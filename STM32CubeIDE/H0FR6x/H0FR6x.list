
H0FR6x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bf0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003710  08019cb0  08019cb0  00029cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d3c0  0801d3c0  00030a84  2**0
                  CONTENTS
  4 .ARM          00000008  0801d3c0  0801d3c0  0002d3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d3c8  0801d3c8  00030a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d3c8  0801d3c8  0002d3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d3d0  0801d3d0  0002d3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801d3d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a7c  20000008  0801d3dc  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006368  20000a88  0801de58  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006df0  0801de58  00036df0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039038  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008320  00000000  00000000  00069ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00021ef7  00000000  00000000  00071e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  00093d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003838  00000000  00000000  00095798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002aa0f  00000000  00000000  00098fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a467  00000000  00000000  000c39df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cde46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dfc  00000000  00000000  000cde98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  000d4c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  000d4d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019c94 	.word	0x08019c94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	08019c94 	.word	0x08019c94

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fde7 	bl	8002020 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd37 	bl	8001ed0 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdd9 	bl	8002020 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fdcf 	bl	8002020 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd5f 	bl	8001f54 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd55 	bl	8001f54 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb59 	bl	8000b78 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fae5 	bl	8000aa0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb4b 	bl	8000b78 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb41 	bl	8000b78 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 faf1 	bl	8000aec <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fae7 	bl	8000aec <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8bc 	bl	80006d8 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	b580      	push	{r7, lr}
 8000574:	0007      	movs	r7, r0
 8000576:	4699      	mov	r9, r3
 8000578:	0c3b      	lsrs	r3, r7, #16
 800057a:	469c      	mov	ip, r3
 800057c:	0413      	lsls	r3, r2, #16
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0400      	lsls	r0, r0, #16
 8000588:	0c14      	lsrs	r4, r2, #16
 800058a:	0c00      	lsrs	r0, r0, #16
 800058c:	4345      	muls	r5, r0
 800058e:	434b      	muls	r3, r1
 8000590:	4360      	muls	r0, r4
 8000592:	4361      	muls	r1, r4
 8000594:	18c0      	adds	r0, r0, r3
 8000596:	0c2c      	lsrs	r4, r5, #16
 8000598:	1820      	adds	r0, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	4283      	cmp	r3, r0
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4372      	muls	r2, r6
 80005ae:	0c03      	lsrs	r3, r0, #16
 80005b0:	4463      	add	r3, ip
 80005b2:	042d      	lsls	r5, r5, #16
 80005b4:	0c2d      	lsrs	r5, r5, #16
 80005b6:	18c9      	adds	r1, r1, r3
 80005b8:	0400      	lsls	r0, r0, #16
 80005ba:	1940      	adds	r0, r0, r5
 80005bc:	1889      	adds	r1, r1, r2
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	; 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 fde5 	bl	80011a8 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fc31 	bl	8000e4c <__aeabi_fsub>
 80005ea:	f000 fddd 	bl	80011a8 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fb87 	bl	8002d20 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f001 ffd0 	bl	80025c0 <__aeabi_dsub>
 8000620:	f002 fb7e 	bl	8002d20 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	0005      	movs	r5, r0
 8000638:	000c      	movs	r4, r1
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0028      	movs	r0, r5
 8000640:	0021      	movs	r1, r4
 8000642:	f7ff ff11 	bl	8000468 <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x28>
 800064a:	0028      	movs	r0, r5
 800064c:	0021      	movs	r1, r4
 800064e:	f000 f80f 	bl	8000670 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e1      	adds	r1, r4, r3
 8000662:	0028      	movs	r0, r5
 8000664:	f000 f804 	bl	8000670 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x22>

08000670 <__aeabi_d2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	2200      	movs	r2, #0
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <__aeabi_d2ulz+0x34>)
 8000676:	000d      	movs	r5, r1
 8000678:	0004      	movs	r4, r0
 800067a:	f001 fd35 	bl	80020e8 <__aeabi_dmul>
 800067e:	f7ff ffbb 	bl	80005f8 <__aeabi_d2uiz>
 8000682:	0006      	movs	r6, r0
 8000684:	f002 fbb2 	bl	8002dec <__aeabi_ui2d>
 8000688:	2200      	movs	r2, #0
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <__aeabi_d2ulz+0x38>)
 800068c:	f001 fd2c 	bl	80020e8 <__aeabi_dmul>
 8000690:	0002      	movs	r2, r0
 8000692:	000b      	movs	r3, r1
 8000694:	0020      	movs	r0, r4
 8000696:	0029      	movs	r1, r5
 8000698:	f001 ff92 	bl	80025c0 <__aeabi_dsub>
 800069c:	f7ff ffac 	bl	80005f8 <__aeabi_d2uiz>
 80006a0:	0031      	movs	r1, r6
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	3df00000 	.word	0x3df00000
 80006a8:	41f00000 	.word	0x41f00000

080006ac <__aeabi_l2d>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	0006      	movs	r6, r0
 80006b0:	0008      	movs	r0, r1
 80006b2:	f002 fb6b 	bl	8002d8c <__aeabi_i2d>
 80006b6:	2200      	movs	r2, #0
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <__aeabi_l2d+0x28>)
 80006ba:	f001 fd15 	bl	80020e8 <__aeabi_dmul>
 80006be:	000d      	movs	r5, r1
 80006c0:	0004      	movs	r4, r0
 80006c2:	0030      	movs	r0, r6
 80006c4:	f002 fb92 	bl	8002dec <__aeabi_ui2d>
 80006c8:	002b      	movs	r3, r5
 80006ca:	0022      	movs	r2, r4
 80006cc:	f000 fdce 	bl	800126c <__aeabi_dadd>
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	41f00000 	.word	0x41f00000

080006d8 <__udivmoddi4>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	4657      	mov	r7, sl
 80006dc:	464e      	mov	r6, r9
 80006de:	4645      	mov	r5, r8
 80006e0:	46de      	mov	lr, fp
 80006e2:	b5e0      	push	{r5, r6, r7, lr}
 80006e4:	0004      	movs	r4, r0
 80006e6:	000d      	movs	r5, r1
 80006e8:	4692      	mov	sl, r2
 80006ea:	4699      	mov	r9, r3
 80006ec:	b083      	sub	sp, #12
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d830      	bhi.n	8000754 <__udivmoddi4+0x7c>
 80006f2:	d02d      	beq.n	8000750 <__udivmoddi4+0x78>
 80006f4:	4649      	mov	r1, r9
 80006f6:	4650      	mov	r0, sl
 80006f8:	f002 fc8c 	bl	8003014 <__clzdi2>
 80006fc:	0029      	movs	r1, r5
 80006fe:	0006      	movs	r6, r0
 8000700:	0020      	movs	r0, r4
 8000702:	f002 fc87 	bl	8003014 <__clzdi2>
 8000706:	1a33      	subs	r3, r6, r0
 8000708:	4698      	mov	r8, r3
 800070a:	3b20      	subs	r3, #32
 800070c:	469b      	mov	fp, r3
 800070e:	d433      	bmi.n	8000778 <__udivmoddi4+0xa0>
 8000710:	465a      	mov	r2, fp
 8000712:	4653      	mov	r3, sl
 8000714:	4093      	lsls	r3, r2
 8000716:	4642      	mov	r2, r8
 8000718:	001f      	movs	r7, r3
 800071a:	4653      	mov	r3, sl
 800071c:	4093      	lsls	r3, r2
 800071e:	001e      	movs	r6, r3
 8000720:	42af      	cmp	r7, r5
 8000722:	d83a      	bhi.n	800079a <__udivmoddi4+0xc2>
 8000724:	42af      	cmp	r7, r5
 8000726:	d100      	bne.n	800072a <__udivmoddi4+0x52>
 8000728:	e078      	b.n	800081c <__udivmoddi4+0x144>
 800072a:	465b      	mov	r3, fp
 800072c:	1ba4      	subs	r4, r4, r6
 800072e:	41bd      	sbcs	r5, r7
 8000730:	2b00      	cmp	r3, #0
 8000732:	da00      	bge.n	8000736 <__udivmoddi4+0x5e>
 8000734:	e075      	b.n	8000822 <__udivmoddi4+0x14a>
 8000736:	2200      	movs	r2, #0
 8000738:	2300      	movs	r3, #0
 800073a:	9200      	str	r2, [sp, #0]
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2301      	movs	r3, #1
 8000740:	465a      	mov	r2, fp
 8000742:	4093      	lsls	r3, r2
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2301      	movs	r3, #1
 8000748:	4642      	mov	r2, r8
 800074a:	4093      	lsls	r3, r2
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	e028      	b.n	80007a2 <__udivmoddi4+0xca>
 8000750:	4282      	cmp	r2, r0
 8000752:	d9cf      	bls.n	80006f4 <__udivmoddi4+0x1c>
 8000754:	2200      	movs	r2, #0
 8000756:	2300      	movs	r3, #0
 8000758:	9200      	str	r2, [sp, #0]
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <__udivmoddi4+0x8e>
 8000762:	601c      	str	r4, [r3, #0]
 8000764:	605d      	str	r5, [r3, #4]
 8000766:	9800      	ldr	r0, [sp, #0]
 8000768:	9901      	ldr	r1, [sp, #4]
 800076a:	b003      	add	sp, #12
 800076c:	bcf0      	pop	{r4, r5, r6, r7}
 800076e:	46bb      	mov	fp, r7
 8000770:	46b2      	mov	sl, r6
 8000772:	46a9      	mov	r9, r5
 8000774:	46a0      	mov	r8, r4
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	4652      	mov	r2, sl
 8000780:	40da      	lsrs	r2, r3
 8000782:	4641      	mov	r1, r8
 8000784:	0013      	movs	r3, r2
 8000786:	464a      	mov	r2, r9
 8000788:	408a      	lsls	r2, r1
 800078a:	0017      	movs	r7, r2
 800078c:	4642      	mov	r2, r8
 800078e:	431f      	orrs	r7, r3
 8000790:	4653      	mov	r3, sl
 8000792:	4093      	lsls	r3, r2
 8000794:	001e      	movs	r6, r3
 8000796:	42af      	cmp	r7, r5
 8000798:	d9c4      	bls.n	8000724 <__udivmoddi4+0x4c>
 800079a:	2200      	movs	r2, #0
 800079c:	2300      	movs	r3, #0
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	4643      	mov	r3, r8
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0d9      	beq.n	800075c <__udivmoddi4+0x84>
 80007a8:	07fb      	lsls	r3, r7, #31
 80007aa:	0872      	lsrs	r2, r6, #1
 80007ac:	431a      	orrs	r2, r3
 80007ae:	4646      	mov	r6, r8
 80007b0:	087b      	lsrs	r3, r7, #1
 80007b2:	e00e      	b.n	80007d2 <__udivmoddi4+0xfa>
 80007b4:	42ab      	cmp	r3, r5
 80007b6:	d101      	bne.n	80007bc <__udivmoddi4+0xe4>
 80007b8:	42a2      	cmp	r2, r4
 80007ba:	d80c      	bhi.n	80007d6 <__udivmoddi4+0xfe>
 80007bc:	1aa4      	subs	r4, r4, r2
 80007be:	419d      	sbcs	r5, r3
 80007c0:	2001      	movs	r0, #1
 80007c2:	1924      	adds	r4, r4, r4
 80007c4:	416d      	adcs	r5, r5
 80007c6:	2100      	movs	r1, #0
 80007c8:	3e01      	subs	r6, #1
 80007ca:	1824      	adds	r4, r4, r0
 80007cc:	414d      	adcs	r5, r1
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d006      	beq.n	80007e0 <__udivmoddi4+0x108>
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	d9ee      	bls.n	80007b4 <__udivmoddi4+0xdc>
 80007d6:	3e01      	subs	r6, #1
 80007d8:	1924      	adds	r4, r4, r4
 80007da:	416d      	adcs	r5, r5
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d1f8      	bne.n	80007d2 <__udivmoddi4+0xfa>
 80007e0:	9800      	ldr	r0, [sp, #0]
 80007e2:	9901      	ldr	r1, [sp, #4]
 80007e4:	465b      	mov	r3, fp
 80007e6:	1900      	adds	r0, r0, r4
 80007e8:	4169      	adcs	r1, r5
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db24      	blt.n	8000838 <__udivmoddi4+0x160>
 80007ee:	002b      	movs	r3, r5
 80007f0:	465a      	mov	r2, fp
 80007f2:	4644      	mov	r4, r8
 80007f4:	40d3      	lsrs	r3, r2
 80007f6:	002a      	movs	r2, r5
 80007f8:	40e2      	lsrs	r2, r4
 80007fa:	001c      	movs	r4, r3
 80007fc:	465b      	mov	r3, fp
 80007fe:	0015      	movs	r5, r2
 8000800:	2b00      	cmp	r3, #0
 8000802:	db2a      	blt.n	800085a <__udivmoddi4+0x182>
 8000804:	0026      	movs	r6, r4
 8000806:	409e      	lsls	r6, r3
 8000808:	0033      	movs	r3, r6
 800080a:	0026      	movs	r6, r4
 800080c:	4647      	mov	r7, r8
 800080e:	40be      	lsls	r6, r7
 8000810:	0032      	movs	r2, r6
 8000812:	1a80      	subs	r0, r0, r2
 8000814:	4199      	sbcs	r1, r3
 8000816:	9000      	str	r0, [sp, #0]
 8000818:	9101      	str	r1, [sp, #4]
 800081a:	e79f      	b.n	800075c <__udivmoddi4+0x84>
 800081c:	42a3      	cmp	r3, r4
 800081e:	d8bc      	bhi.n	800079a <__udivmoddi4+0xc2>
 8000820:	e783      	b.n	800072a <__udivmoddi4+0x52>
 8000822:	4642      	mov	r2, r8
 8000824:	2320      	movs	r3, #32
 8000826:	2100      	movs	r1, #0
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	9100      	str	r1, [sp, #0]
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	40da      	lsrs	r2, r3
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	e786      	b.n	8000746 <__udivmoddi4+0x6e>
 8000838:	4642      	mov	r2, r8
 800083a:	2320      	movs	r3, #32
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	002a      	movs	r2, r5
 8000840:	4646      	mov	r6, r8
 8000842:	409a      	lsls	r2, r3
 8000844:	0023      	movs	r3, r4
 8000846:	40f3      	lsrs	r3, r6
 8000848:	4644      	mov	r4, r8
 800084a:	4313      	orrs	r3, r2
 800084c:	002a      	movs	r2, r5
 800084e:	40e2      	lsrs	r2, r4
 8000850:	001c      	movs	r4, r3
 8000852:	465b      	mov	r3, fp
 8000854:	0015      	movs	r5, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	dad4      	bge.n	8000804 <__udivmoddi4+0x12c>
 800085a:	4642      	mov	r2, r8
 800085c:	002f      	movs	r7, r5
 800085e:	2320      	movs	r3, #32
 8000860:	0026      	movs	r6, r4
 8000862:	4097      	lsls	r7, r2
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	40de      	lsrs	r6, r3
 8000868:	003b      	movs	r3, r7
 800086a:	4333      	orrs	r3, r6
 800086c:	e7cd      	b.n	800080a <__udivmoddi4+0x132>
 800086e:	46c0      	nop			; (mov r8, r8)

08000870 <__aeabi_fdiv>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	464f      	mov	r7, r9
 8000874:	4646      	mov	r6, r8
 8000876:	46d6      	mov	lr, sl
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	b5c0      	push	{r6, r7, lr}
 800087c:	0047      	lsls	r7, r0, #1
 800087e:	1c0c      	adds	r4, r1, #0
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	0e3f      	lsrs	r7, r7, #24
 8000884:	0fc6      	lsrs	r6, r0, #31
 8000886:	2f00      	cmp	r7, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fdiv+0x1c>
 800088a:	e070      	b.n	800096e <__aeabi_fdiv+0xfe>
 800088c:	2fff      	cmp	r7, #255	; 0xff
 800088e:	d100      	bne.n	8000892 <__aeabi_fdiv+0x22>
 8000890:	e075      	b.n	800097e <__aeabi_fdiv+0x10e>
 8000892:	00eb      	lsls	r3, r5, #3
 8000894:	2580      	movs	r5, #128	; 0x80
 8000896:	04ed      	lsls	r5, r5, #19
 8000898:	431d      	orrs	r5, r3
 800089a:	2300      	movs	r3, #0
 800089c:	4699      	mov	r9, r3
 800089e:	469a      	mov	sl, r3
 80008a0:	3f7f      	subs	r7, #127	; 0x7f
 80008a2:	0260      	lsls	r0, r4, #9
 80008a4:	0a43      	lsrs	r3, r0, #9
 80008a6:	4698      	mov	r8, r3
 80008a8:	0063      	lsls	r3, r4, #1
 80008aa:	0e1b      	lsrs	r3, r3, #24
 80008ac:	0fe4      	lsrs	r4, r4, #31
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d04e      	beq.n	8000950 <__aeabi_fdiv+0xe0>
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	d046      	beq.n	8000944 <__aeabi_fdiv+0xd4>
 80008b6:	4642      	mov	r2, r8
 80008b8:	00d0      	lsls	r0, r2, #3
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	04d2      	lsls	r2, r2, #19
 80008be:	4302      	orrs	r2, r0
 80008c0:	4690      	mov	r8, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	3b7f      	subs	r3, #127	; 0x7f
 80008c6:	0031      	movs	r1, r6
 80008c8:	1aff      	subs	r7, r7, r3
 80008ca:	464b      	mov	r3, r9
 80008cc:	4061      	eors	r1, r4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	4313      	orrs	r3, r2
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d900      	bls.n	80008d8 <__aeabi_fdiv+0x68>
 80008d6:	e0b5      	b.n	8000a44 <__aeabi_fdiv+0x1d4>
 80008d8:	486e      	ldr	r0, [pc, #440]	; (8000a94 <__aeabi_fdiv+0x224>)
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	58c3      	ldr	r3, [r0, r3]
 80008de:	469f      	mov	pc, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	4698      	mov	r8, r3
 80008e4:	0026      	movs	r6, r4
 80008e6:	4645      	mov	r5, r8
 80008e8:	4692      	mov	sl, r2
 80008ea:	4653      	mov	r3, sl
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x82>
 80008f0:	e089      	b.n	8000a06 <__aeabi_fdiv+0x196>
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fdiv+0x88>
 80008f6:	e09e      	b.n	8000a36 <__aeabi_fdiv+0x1c6>
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d018      	beq.n	800092e <__aeabi_fdiv+0xbe>
 80008fc:	003b      	movs	r3, r7
 80008fe:	337f      	adds	r3, #127	; 0x7f
 8000900:	2b00      	cmp	r3, #0
 8000902:	dd69      	ble.n	80009d8 <__aeabi_fdiv+0x168>
 8000904:	076a      	lsls	r2, r5, #29
 8000906:	d004      	beq.n	8000912 <__aeabi_fdiv+0xa2>
 8000908:	220f      	movs	r2, #15
 800090a:	402a      	ands	r2, r5
 800090c:	2a04      	cmp	r2, #4
 800090e:	d000      	beq.n	8000912 <__aeabi_fdiv+0xa2>
 8000910:	3504      	adds	r5, #4
 8000912:	012a      	lsls	r2, r5, #4
 8000914:	d503      	bpl.n	800091e <__aeabi_fdiv+0xae>
 8000916:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <__aeabi_fdiv+0x228>)
 8000918:	401d      	ands	r5, r3
 800091a:	003b      	movs	r3, r7
 800091c:	3380      	adds	r3, #128	; 0x80
 800091e:	2bfe      	cmp	r3, #254	; 0xfe
 8000920:	dd00      	ble.n	8000924 <__aeabi_fdiv+0xb4>
 8000922:	e070      	b.n	8000a06 <__aeabi_fdiv+0x196>
 8000924:	01ad      	lsls	r5, r5, #6
 8000926:	0a6d      	lsrs	r5, r5, #9
 8000928:	b2d8      	uxtb	r0, r3
 800092a:	e002      	b.n	8000932 <__aeabi_fdiv+0xc2>
 800092c:	000e      	movs	r6, r1
 800092e:	2000      	movs	r0, #0
 8000930:	2500      	movs	r5, #0
 8000932:	05c0      	lsls	r0, r0, #23
 8000934:	4328      	orrs	r0, r5
 8000936:	07f6      	lsls	r6, r6, #31
 8000938:	4330      	orrs	r0, r6
 800093a:	bce0      	pop	{r5, r6, r7}
 800093c:	46ba      	mov	sl, r7
 800093e:	46b1      	mov	r9, r6
 8000940:	46a8      	mov	r8, r5
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000944:	4643      	mov	r3, r8
 8000946:	2b00      	cmp	r3, #0
 8000948:	d13f      	bne.n	80009ca <__aeabi_fdiv+0x15a>
 800094a:	2202      	movs	r2, #2
 800094c:	3fff      	subs	r7, #255	; 0xff
 800094e:	e003      	b.n	8000958 <__aeabi_fdiv+0xe8>
 8000950:	4643      	mov	r3, r8
 8000952:	2b00      	cmp	r3, #0
 8000954:	d12d      	bne.n	80009b2 <__aeabi_fdiv+0x142>
 8000956:	2201      	movs	r2, #1
 8000958:	0031      	movs	r1, r6
 800095a:	464b      	mov	r3, r9
 800095c:	4061      	eors	r1, r4
 800095e:	b2c9      	uxtb	r1, r1
 8000960:	4313      	orrs	r3, r2
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d834      	bhi.n	80009d0 <__aeabi_fdiv+0x160>
 8000966:	484d      	ldr	r0, [pc, #308]	; (8000a9c <__aeabi_fdiv+0x22c>)
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	58c3      	ldr	r3, [r0, r3]
 800096c:	469f      	mov	pc, r3
 800096e:	2d00      	cmp	r5, #0
 8000970:	d113      	bne.n	800099a <__aeabi_fdiv+0x12a>
 8000972:	2304      	movs	r3, #4
 8000974:	4699      	mov	r9, r3
 8000976:	3b03      	subs	r3, #3
 8000978:	2700      	movs	r7, #0
 800097a:	469a      	mov	sl, r3
 800097c:	e791      	b.n	80008a2 <__aeabi_fdiv+0x32>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d105      	bne.n	800098e <__aeabi_fdiv+0x11e>
 8000982:	2308      	movs	r3, #8
 8000984:	4699      	mov	r9, r3
 8000986:	3b06      	subs	r3, #6
 8000988:	27ff      	movs	r7, #255	; 0xff
 800098a:	469a      	mov	sl, r3
 800098c:	e789      	b.n	80008a2 <__aeabi_fdiv+0x32>
 800098e:	230c      	movs	r3, #12
 8000990:	4699      	mov	r9, r3
 8000992:	3b09      	subs	r3, #9
 8000994:	27ff      	movs	r7, #255	; 0xff
 8000996:	469a      	mov	sl, r3
 8000998:	e783      	b.n	80008a2 <__aeabi_fdiv+0x32>
 800099a:	0028      	movs	r0, r5
 800099c:	f002 fb1c 	bl	8002fd8 <__clzsi2>
 80009a0:	2776      	movs	r7, #118	; 0x76
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	409d      	lsls	r5, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	427f      	negs	r7, r7
 80009aa:	4699      	mov	r9, r3
 80009ac:	469a      	mov	sl, r3
 80009ae:	1a3f      	subs	r7, r7, r0
 80009b0:	e777      	b.n	80008a2 <__aeabi_fdiv+0x32>
 80009b2:	4640      	mov	r0, r8
 80009b4:	f002 fb10 	bl	8002fd8 <__clzsi2>
 80009b8:	4642      	mov	r2, r8
 80009ba:	1f43      	subs	r3, r0, #5
 80009bc:	409a      	lsls	r2, r3
 80009be:	2376      	movs	r3, #118	; 0x76
 80009c0:	425b      	negs	r3, r3
 80009c2:	4690      	mov	r8, r2
 80009c4:	1a1b      	subs	r3, r3, r0
 80009c6:	2200      	movs	r2, #0
 80009c8:	e77d      	b.n	80008c6 <__aeabi_fdiv+0x56>
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	2203      	movs	r2, #3
 80009ce:	e77a      	b.n	80008c6 <__aeabi_fdiv+0x56>
 80009d0:	000e      	movs	r6, r1
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	2500      	movs	r5, #0
 80009d6:	e7ac      	b.n	8000932 <__aeabi_fdiv+0xc2>
 80009d8:	2001      	movs	r0, #1
 80009da:	1ac0      	subs	r0, r0, r3
 80009dc:	281b      	cmp	r0, #27
 80009de:	dca6      	bgt.n	800092e <__aeabi_fdiv+0xbe>
 80009e0:	379e      	adds	r7, #158	; 0x9e
 80009e2:	002a      	movs	r2, r5
 80009e4:	40bd      	lsls	r5, r7
 80009e6:	40c2      	lsrs	r2, r0
 80009e8:	1e6b      	subs	r3, r5, #1
 80009ea:	419d      	sbcs	r5, r3
 80009ec:	4315      	orrs	r5, r2
 80009ee:	076b      	lsls	r3, r5, #29
 80009f0:	d004      	beq.n	80009fc <__aeabi_fdiv+0x18c>
 80009f2:	230f      	movs	r3, #15
 80009f4:	402b      	ands	r3, r5
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fdiv+0x18c>
 80009fa:	3504      	adds	r5, #4
 80009fc:	016b      	lsls	r3, r5, #5
 80009fe:	d544      	bpl.n	8000a8a <__aeabi_fdiv+0x21a>
 8000a00:	2001      	movs	r0, #1
 8000a02:	2500      	movs	r5, #0
 8000a04:	e795      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	2500      	movs	r5, #0
 8000a0a:	e792      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a0c:	2580      	movs	r5, #128	; 0x80
 8000a0e:	2600      	movs	r6, #0
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	03ed      	lsls	r5, r5, #15
 8000a14:	e78d      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a16:	2300      	movs	r3, #0
 8000a18:	4698      	mov	r8, r3
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	03c0      	lsls	r0, r0, #15
 8000a1e:	4205      	tst	r5, r0
 8000a20:	d009      	beq.n	8000a36 <__aeabi_fdiv+0x1c6>
 8000a22:	4643      	mov	r3, r8
 8000a24:	4203      	tst	r3, r0
 8000a26:	d106      	bne.n	8000a36 <__aeabi_fdiv+0x1c6>
 8000a28:	4645      	mov	r5, r8
 8000a2a:	4305      	orrs	r5, r0
 8000a2c:	026d      	lsls	r5, r5, #9
 8000a2e:	0026      	movs	r6, r4
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	0a6d      	lsrs	r5, r5, #9
 8000a34:	e77d      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	03c0      	lsls	r0, r0, #15
 8000a3a:	4305      	orrs	r5, r0
 8000a3c:	026d      	lsls	r5, r5, #9
 8000a3e:	20ff      	movs	r0, #255	; 0xff
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	e776      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a44:	4642      	mov	r2, r8
 8000a46:	016b      	lsls	r3, r5, #5
 8000a48:	0150      	lsls	r0, r2, #5
 8000a4a:	4283      	cmp	r3, r0
 8000a4c:	d219      	bcs.n	8000a82 <__aeabi_fdiv+0x212>
 8000a4e:	221b      	movs	r2, #27
 8000a50:	2500      	movs	r5, #0
 8000a52:	3f01      	subs	r7, #1
 8000a54:	2601      	movs	r6, #1
 8000a56:	001c      	movs	r4, r3
 8000a58:	006d      	lsls	r5, r5, #1
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2c00      	cmp	r4, #0
 8000a5e:	db01      	blt.n	8000a64 <__aeabi_fdiv+0x1f4>
 8000a60:	4298      	cmp	r0, r3
 8000a62:	d801      	bhi.n	8000a68 <__aeabi_fdiv+0x1f8>
 8000a64:	1a1b      	subs	r3, r3, r0
 8000a66:	4335      	orrs	r5, r6
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d1f3      	bne.n	8000a56 <__aeabi_fdiv+0x1e6>
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	4193      	sbcs	r3, r2
 8000a72:	431d      	orrs	r5, r3
 8000a74:	003b      	movs	r3, r7
 8000a76:	337f      	adds	r3, #127	; 0x7f
 8000a78:	000e      	movs	r6, r1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_fdiv+0x210>
 8000a7e:	e741      	b.n	8000904 <__aeabi_fdiv+0x94>
 8000a80:	e7aa      	b.n	80009d8 <__aeabi_fdiv+0x168>
 8000a82:	221a      	movs	r2, #26
 8000a84:	2501      	movs	r5, #1
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	e7e4      	b.n	8000a54 <__aeabi_fdiv+0x1e4>
 8000a8a:	01ad      	lsls	r5, r5, #6
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	e74f      	b.n	8000932 <__aeabi_fdiv+0xc2>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	0801a358 	.word	0x0801a358
 8000a98:	f7ffffff 	.word	0xf7ffffff
 8000a9c:	0801a398 	.word	0x0801a398

08000aa0 <__eqsf2>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	024e      	lsls	r6, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a6d      	lsrs	r5, r5, #9
 8000aae:	2001      	movs	r0, #1
 8000ab0:	0e12      	lsrs	r2, r2, #24
 8000ab2:	0a76      	lsrs	r6, r6, #9
 8000ab4:	0e24      	lsrs	r4, r4, #24
 8000ab6:	0fc9      	lsrs	r1, r1, #31
 8000ab8:	2aff      	cmp	r2, #255	; 0xff
 8000aba:	d006      	beq.n	8000aca <__eqsf2+0x2a>
 8000abc:	2cff      	cmp	r4, #255	; 0xff
 8000abe:	d003      	beq.n	8000ac8 <__eqsf2+0x28>
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	d101      	bne.n	8000ac8 <__eqsf2+0x28>
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	d006      	beq.n	8000ad6 <__eqsf2+0x36>
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d1fc      	bne.n	8000ac8 <__eqsf2+0x28>
 8000ace:	2cff      	cmp	r4, #255	; 0xff
 8000ad0:	d1fa      	bne.n	8000ac8 <__eqsf2+0x28>
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d1f8      	bne.n	8000ac8 <__eqsf2+0x28>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d006      	beq.n	8000ae8 <__eqsf2+0x48>
 8000ada:	2001      	movs	r0, #1
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d1f3      	bne.n	8000ac8 <__eqsf2+0x28>
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	1e43      	subs	r3, r0, #1
 8000ae4:	4198      	sbcs	r0, r3
 8000ae6:	e7ef      	b.n	8000ac8 <__eqsf2+0x28>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e7ed      	b.n	8000ac8 <__eqsf2+0x28>

08000aec <__gesf2>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0245      	lsls	r5, r0, #9
 8000af2:	024e      	lsls	r6, r1, #9
 8000af4:	004c      	lsls	r4, r1, #1
 8000af6:	0fc3      	lsrs	r3, r0, #31
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a76      	lsrs	r6, r6, #9
 8000afe:	0e24      	lsrs	r4, r4, #24
 8000b00:	0fc8      	lsrs	r0, r1, #31
 8000b02:	2aff      	cmp	r2, #255	; 0xff
 8000b04:	d01b      	beq.n	8000b3e <__gesf2+0x52>
 8000b06:	2cff      	cmp	r4, #255	; 0xff
 8000b08:	d00e      	beq.n	8000b28 <__gesf2+0x3c>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11b      	bne.n	8000b46 <__gesf2+0x5a>
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d101      	bne.n	8000b16 <__gesf2+0x2a>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d01c      	beq.n	8000b50 <__gesf2+0x64>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d00c      	beq.n	8000b34 <__gesf2+0x48>
 8000b1a:	4283      	cmp	r3, r0
 8000b1c:	d01c      	beq.n	8000b58 <__gesf2+0x6c>
 8000b1e:	2102      	movs	r1, #2
 8000b20:	1e58      	subs	r0, r3, #1
 8000b22:	4008      	ands	r0, r1
 8000b24:	3801      	subs	r0, #1
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d122      	bne.n	8000b72 <__gesf2+0x86>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d1f4      	bne.n	8000b1a <__gesf2+0x2e>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d1f2      	bne.n	8000b1a <__gesf2+0x2e>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1f6      	bne.n	8000b26 <__gesf2+0x3a>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f3      	b.n	8000b26 <__gesf2+0x3a>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d117      	bne.n	8000b72 <__gesf2+0x86>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d0f0      	beq.n	8000b28 <__gesf2+0x3c>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1e7      	bne.n	8000b1a <__gesf2+0x2e>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d1e5      	bne.n	8000b1a <__gesf2+0x2e>
 8000b4e:	e7e6      	b.n	8000b1e <__gesf2+0x32>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e7      	beq.n	8000b26 <__gesf2+0x3a>
 8000b56:	e7e2      	b.n	8000b1e <__gesf2+0x32>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__gesf2+0x7c>
 8000b5c:	dbea      	blt.n	8000b34 <__gesf2+0x48>
 8000b5e:	42b5      	cmp	r5, r6
 8000b60:	d802      	bhi.n	8000b68 <__gesf2+0x7c>
 8000b62:	d3e7      	bcc.n	8000b34 <__gesf2+0x48>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7de      	b.n	8000b26 <__gesf2+0x3a>
 8000b68:	4243      	negs	r3, r0
 8000b6a:	4158      	adcs	r0, r3
 8000b6c:	0040      	lsls	r0, r0, #1
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7d9      	b.n	8000b26 <__gesf2+0x3a>
 8000b72:	2002      	movs	r0, #2
 8000b74:	4240      	negs	r0, r0
 8000b76:	e7d6      	b.n	8000b26 <__gesf2+0x3a>

08000b78 <__lesf2>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	0042      	lsls	r2, r0, #1
 8000b7c:	0245      	lsls	r5, r0, #9
 8000b7e:	024e      	lsls	r6, r1, #9
 8000b80:	004c      	lsls	r4, r1, #1
 8000b82:	0fc3      	lsrs	r3, r0, #31
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e12      	lsrs	r2, r2, #24
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e24      	lsrs	r4, r4, #24
 8000b8c:	0fc8      	lsrs	r0, r1, #31
 8000b8e:	2aff      	cmp	r2, #255	; 0xff
 8000b90:	d00b      	beq.n	8000baa <__lesf2+0x32>
 8000b92:	2cff      	cmp	r4, #255	; 0xff
 8000b94:	d00d      	beq.n	8000bb2 <__lesf2+0x3a>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	d11f      	bne.n	8000bda <__lesf2+0x62>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d116      	bne.n	8000bcc <__lesf2+0x54>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d114      	bne.n	8000bcc <__lesf2+0x54>
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d010      	beq.n	8000bca <__lesf2+0x52>
 8000ba8:	e009      	b.n	8000bbe <__lesf2+0x46>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d10c      	bne.n	8000bc8 <__lesf2+0x50>
 8000bae:	2cff      	cmp	r4, #255	; 0xff
 8000bb0:	d113      	bne.n	8000bda <__lesf2+0x62>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d108      	bne.n	8000bc8 <__lesf2+0x50>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d008      	beq.n	8000bcc <__lesf2+0x54>
 8000bba:	4283      	cmp	r3, r0
 8000bbc:	d012      	beq.n	8000be4 <__lesf2+0x6c>
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	1e58      	subs	r0, r3, #1
 8000bc2:	4008      	ands	r0, r1
 8000bc4:	3801      	subs	r0, #1
 8000bc6:	e000      	b.n	8000bca <__lesf2+0x52>
 8000bc8:	2002      	movs	r0, #2
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d1f4      	bne.n	8000bba <__lesf2+0x42>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d1fa      	bne.n	8000bca <__lesf2+0x52>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	e7f7      	b.n	8000bca <__lesf2+0x52>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d1ed      	bne.n	8000bba <__lesf2+0x42>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d1eb      	bne.n	8000bba <__lesf2+0x42>
 8000be2:	e7ec      	b.n	8000bbe <__lesf2+0x46>
 8000be4:	42a2      	cmp	r2, r4
 8000be6:	dc05      	bgt.n	8000bf4 <__lesf2+0x7c>
 8000be8:	dbf2      	blt.n	8000bd0 <__lesf2+0x58>
 8000bea:	42b5      	cmp	r5, r6
 8000bec:	d802      	bhi.n	8000bf4 <__lesf2+0x7c>
 8000bee:	d3ef      	bcc.n	8000bd0 <__lesf2+0x58>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e7ea      	b.n	8000bca <__lesf2+0x52>
 8000bf4:	4243      	negs	r3, r0
 8000bf6:	4158      	adcs	r0, r3
 8000bf8:	0040      	lsls	r0, r0, #1
 8000bfa:	3801      	subs	r0, #1
 8000bfc:	e7e5      	b.n	8000bca <__lesf2+0x52>
 8000bfe:	46c0      	nop			; (mov r8, r8)

08000c00 <__aeabi_fmul>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	464f      	mov	r7, r9
 8000c04:	4646      	mov	r6, r8
 8000c06:	46d6      	mov	lr, sl
 8000c08:	0244      	lsls	r4, r0, #9
 8000c0a:	0045      	lsls	r5, r0, #1
 8000c0c:	b5c0      	push	{r6, r7, lr}
 8000c0e:	0a64      	lsrs	r4, r4, #9
 8000c10:	1c0f      	adds	r7, r1, #0
 8000c12:	0e2d      	lsrs	r5, r5, #24
 8000c14:	0fc6      	lsrs	r6, r0, #31
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fmul+0x1c>
 8000c1a:	e08d      	b.n	8000d38 <__aeabi_fmul+0x138>
 8000c1c:	2dff      	cmp	r5, #255	; 0xff
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fmul+0x22>
 8000c20:	e092      	b.n	8000d48 <__aeabi_fmul+0x148>
 8000c22:	2300      	movs	r3, #0
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	4699      	mov	r9, r3
 8000c28:	469a      	mov	sl, r3
 8000c2a:	00e4      	lsls	r4, r4, #3
 8000c2c:	04c0      	lsls	r0, r0, #19
 8000c2e:	4304      	orrs	r4, r0
 8000c30:	3d7f      	subs	r5, #127	; 0x7f
 8000c32:	0278      	lsls	r0, r7, #9
 8000c34:	0a43      	lsrs	r3, r0, #9
 8000c36:	4698      	mov	r8, r3
 8000c38:	007b      	lsls	r3, r7, #1
 8000c3a:	0e1b      	lsrs	r3, r3, #24
 8000c3c:	0fff      	lsrs	r7, r7, #31
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_fmul+0x44>
 8000c42:	e070      	b.n	8000d26 <__aeabi_fmul+0x126>
 8000c44:	2bff      	cmp	r3, #255	; 0xff
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fmul+0x4a>
 8000c48:	e086      	b.n	8000d58 <__aeabi_fmul+0x158>
 8000c4a:	4642      	mov	r2, r8
 8000c4c:	00d0      	lsls	r0, r2, #3
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	3b7f      	subs	r3, #127	; 0x7f
 8000c52:	18ed      	adds	r5, r5, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	04d2      	lsls	r2, r2, #19
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	4690      	mov	r8, r2
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	0031      	movs	r1, r6
 8000c60:	464b      	mov	r3, r9
 8000c62:	4079      	eors	r1, r7
 8000c64:	1c68      	adds	r0, r5, #1
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d81c      	bhi.n	8000ca4 <__aeabi_fmul+0xa4>
 8000c6a:	4a76      	ldr	r2, [pc, #472]	; (8000e44 <__aeabi_fmul+0x244>)
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	58d3      	ldr	r3, [r2, r3]
 8000c70:	469f      	mov	pc, r3
 8000c72:	0039      	movs	r1, r7
 8000c74:	4644      	mov	r4, r8
 8000c76:	46e2      	mov	sl, ip
 8000c78:	4653      	mov	r3, sl
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d00f      	beq.n	8000c9e <__aeabi_fmul+0x9e>
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fmul+0x84>
 8000c82:	e0d7      	b.n	8000e34 <__aeabi_fmul+0x234>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d137      	bne.n	8000cf8 <__aeabi_fmul+0xf8>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	05c0      	lsls	r0, r0, #23
 8000c8e:	4320      	orrs	r0, r4
 8000c90:	07c9      	lsls	r1, r1, #31
 8000c92:	4308      	orrs	r0, r1
 8000c94:	bce0      	pop	{r5, r6, r7}
 8000c96:	46ba      	mov	sl, r7
 8000c98:	46b1      	mov	r9, r6
 8000c9a:	46a8      	mov	r8, r5
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	20ff      	movs	r0, #255	; 0xff
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	e7f3      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000ca4:	0c26      	lsrs	r6, r4, #16
 8000ca6:	0424      	lsls	r4, r4, #16
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	4644      	mov	r4, r8
 8000cac:	0424      	lsls	r4, r4, #16
 8000cae:	0c24      	lsrs	r4, r4, #16
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	0027      	movs	r7, r4
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	4357      	muls	r7, r2
 8000cb8:	4374      	muls	r4, r6
 8000cba:	435a      	muls	r2, r3
 8000cbc:	435e      	muls	r6, r3
 8000cbe:	1912      	adds	r2, r2, r4
 8000cc0:	0c3b      	lsrs	r3, r7, #16
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d903      	bls.n	8000cd0 <__aeabi_fmul+0xd0>
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0252      	lsls	r2, r2, #9
 8000ccc:	4694      	mov	ip, r2
 8000cce:	4466      	add	r6, ip
 8000cd0:	043f      	lsls	r7, r7, #16
 8000cd2:	041a      	lsls	r2, r3, #16
 8000cd4:	0c3f      	lsrs	r7, r7, #16
 8000cd6:	19d2      	adds	r2, r2, r7
 8000cd8:	0194      	lsls	r4, r2, #6
 8000cda:	1e67      	subs	r7, r4, #1
 8000cdc:	41bc      	sbcs	r4, r7
 8000cde:	0c1b      	lsrs	r3, r3, #16
 8000ce0:	0e92      	lsrs	r2, r2, #26
 8000ce2:	199b      	adds	r3, r3, r6
 8000ce4:	4314      	orrs	r4, r2
 8000ce6:	019b      	lsls	r3, r3, #6
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	d400      	bmi.n	8000cf0 <__aeabi_fmul+0xf0>
 8000cee:	e09b      	b.n	8000e28 <__aeabi_fmul+0x228>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	0862      	lsrs	r2, r4, #1
 8000cf4:	401c      	ands	r4, r3
 8000cf6:	4314      	orrs	r4, r2
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	327f      	adds	r2, #127	; 0x7f
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	dd64      	ble.n	8000dca <__aeabi_fmul+0x1ca>
 8000d00:	0763      	lsls	r3, r4, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fmul+0x10e>
 8000d04:	230f      	movs	r3, #15
 8000d06:	4023      	ands	r3, r4
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fmul+0x10e>
 8000d0c:	3404      	adds	r4, #4
 8000d0e:	0123      	lsls	r3, r4, #4
 8000d10:	d503      	bpl.n	8000d1a <__aeabi_fmul+0x11a>
 8000d12:	0002      	movs	r2, r0
 8000d14:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <__aeabi_fmul+0x248>)
 8000d16:	3280      	adds	r2, #128	; 0x80
 8000d18:	401c      	ands	r4, r3
 8000d1a:	2afe      	cmp	r2, #254	; 0xfe
 8000d1c:	dcbf      	bgt.n	8000c9e <__aeabi_fmul+0x9e>
 8000d1e:	01a4      	lsls	r4, r4, #6
 8000d20:	0a64      	lsrs	r4, r4, #9
 8000d22:	b2d0      	uxtb	r0, r2
 8000d24:	e7b2      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000d26:	4643      	mov	r3, r8
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d13d      	bne.n	8000da8 <__aeabi_fmul+0x1a8>
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	3301      	adds	r3, #1
 8000d30:	431a      	orrs	r2, r3
 8000d32:	4691      	mov	r9, r2
 8000d34:	469c      	mov	ip, r3
 8000d36:	e792      	b.n	8000c5e <__aeabi_fmul+0x5e>
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d129      	bne.n	8000d90 <__aeabi_fmul+0x190>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	4699      	mov	r9, r3
 8000d40:	3b03      	subs	r3, #3
 8000d42:	2500      	movs	r5, #0
 8000d44:	469a      	mov	sl, r3
 8000d46:	e774      	b.n	8000c32 <__aeabi_fmul+0x32>
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d11b      	bne.n	8000d84 <__aeabi_fmul+0x184>
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	4699      	mov	r9, r3
 8000d50:	3b06      	subs	r3, #6
 8000d52:	25ff      	movs	r5, #255	; 0xff
 8000d54:	469a      	mov	sl, r3
 8000d56:	e76c      	b.n	8000c32 <__aeabi_fmul+0x32>
 8000d58:	4643      	mov	r3, r8
 8000d5a:	35ff      	adds	r5, #255	; 0xff
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10b      	bne.n	8000d78 <__aeabi_fmul+0x178>
 8000d60:	2302      	movs	r3, #2
 8000d62:	464a      	mov	r2, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e778      	b.n	8000c5e <__aeabi_fmul+0x5e>
 8000d6c:	4653      	mov	r3, sl
 8000d6e:	0031      	movs	r1, r6
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d000      	beq.n	8000d76 <__aeabi_fmul+0x176>
 8000d74:	e783      	b.n	8000c7e <__aeabi_fmul+0x7e>
 8000d76:	e792      	b.n	8000c9e <__aeabi_fmul+0x9e>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	4691      	mov	r9, r2
 8000d80:	469c      	mov	ip, r3
 8000d82:	e76c      	b.n	8000c5e <__aeabi_fmul+0x5e>
 8000d84:	230c      	movs	r3, #12
 8000d86:	4699      	mov	r9, r3
 8000d88:	3b09      	subs	r3, #9
 8000d8a:	25ff      	movs	r5, #255	; 0xff
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	e750      	b.n	8000c32 <__aeabi_fmul+0x32>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f002 f921 	bl	8002fd8 <__clzsi2>
 8000d96:	2576      	movs	r5, #118	; 0x76
 8000d98:	1f43      	subs	r3, r0, #5
 8000d9a:	409c      	lsls	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	426d      	negs	r5, r5
 8000da0:	4699      	mov	r9, r3
 8000da2:	469a      	mov	sl, r3
 8000da4:	1a2d      	subs	r5, r5, r0
 8000da6:	e744      	b.n	8000c32 <__aeabi_fmul+0x32>
 8000da8:	4640      	mov	r0, r8
 8000daa:	f002 f915 	bl	8002fd8 <__clzsi2>
 8000dae:	4642      	mov	r2, r8
 8000db0:	1f43      	subs	r3, r0, #5
 8000db2:	409a      	lsls	r2, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	1a2d      	subs	r5, r5, r0
 8000db8:	4690      	mov	r8, r2
 8000dba:	469c      	mov	ip, r3
 8000dbc:	3d76      	subs	r5, #118	; 0x76
 8000dbe:	e74e      	b.n	8000c5e <__aeabi_fmul+0x5e>
 8000dc0:	2480      	movs	r4, #128	; 0x80
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	20ff      	movs	r0, #255	; 0xff
 8000dc6:	03e4      	lsls	r4, r4, #15
 8000dc8:	e760      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	2b1b      	cmp	r3, #27
 8000dd0:	dd00      	ble.n	8000dd4 <__aeabi_fmul+0x1d4>
 8000dd2:	e759      	b.n	8000c88 <__aeabi_fmul+0x88>
 8000dd4:	0022      	movs	r2, r4
 8000dd6:	309e      	adds	r0, #158	; 0x9e
 8000dd8:	40da      	lsrs	r2, r3
 8000dda:	4084      	lsls	r4, r0
 8000ddc:	0013      	movs	r3, r2
 8000dde:	1e62      	subs	r2, r4, #1
 8000de0:	4194      	sbcs	r4, r2
 8000de2:	431c      	orrs	r4, r3
 8000de4:	0763      	lsls	r3, r4, #29
 8000de6:	d004      	beq.n	8000df2 <__aeabi_fmul+0x1f2>
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fmul+0x1f2>
 8000df0:	3404      	adds	r4, #4
 8000df2:	0163      	lsls	r3, r4, #5
 8000df4:	d51a      	bpl.n	8000e2c <__aeabi_fmul+0x22c>
 8000df6:	2001      	movs	r0, #1
 8000df8:	2400      	movs	r4, #0
 8000dfa:	e747      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000dfc:	2080      	movs	r0, #128	; 0x80
 8000dfe:	03c0      	lsls	r0, r0, #15
 8000e00:	4204      	tst	r4, r0
 8000e02:	d009      	beq.n	8000e18 <__aeabi_fmul+0x218>
 8000e04:	4643      	mov	r3, r8
 8000e06:	4203      	tst	r3, r0
 8000e08:	d106      	bne.n	8000e18 <__aeabi_fmul+0x218>
 8000e0a:	4644      	mov	r4, r8
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0264      	lsls	r4, r4, #9
 8000e10:	0039      	movs	r1, r7
 8000e12:	20ff      	movs	r0, #255	; 0xff
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	e739      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000e18:	2080      	movs	r0, #128	; 0x80
 8000e1a:	03c0      	lsls	r0, r0, #15
 8000e1c:	4304      	orrs	r4, r0
 8000e1e:	0264      	lsls	r4, r4, #9
 8000e20:	0031      	movs	r1, r6
 8000e22:	20ff      	movs	r0, #255	; 0xff
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	e731      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000e28:	0028      	movs	r0, r5
 8000e2a:	e765      	b.n	8000cf8 <__aeabi_fmul+0xf8>
 8000e2c:	01a4      	lsls	r4, r4, #6
 8000e2e:	2000      	movs	r0, #0
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	e72b      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000e34:	2080      	movs	r0, #128	; 0x80
 8000e36:	03c0      	lsls	r0, r0, #15
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	0264      	lsls	r4, r4, #9
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	0a64      	lsrs	r4, r4, #9
 8000e40:	e724      	b.n	8000c8c <__aeabi_fmul+0x8c>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	0801a3d8 	.word	0x0801a3d8
 8000e48:	f7ffffff 	.word	0xf7ffffff

08000e4c <__aeabi_fsub>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	46ce      	mov	lr, r9
 8000e50:	4647      	mov	r7, r8
 8000e52:	0243      	lsls	r3, r0, #9
 8000e54:	0a5b      	lsrs	r3, r3, #9
 8000e56:	024e      	lsls	r6, r1, #9
 8000e58:	00da      	lsls	r2, r3, #3
 8000e5a:	4694      	mov	ip, r2
 8000e5c:	0a72      	lsrs	r2, r6, #9
 8000e5e:	4691      	mov	r9, r2
 8000e60:	0045      	lsls	r5, r0, #1
 8000e62:	004a      	lsls	r2, r1, #1
 8000e64:	b580      	push	{r7, lr}
 8000e66:	0e2d      	lsrs	r5, r5, #24
 8000e68:	001f      	movs	r7, r3
 8000e6a:	0fc4      	lsrs	r4, r0, #31
 8000e6c:	0e12      	lsrs	r2, r2, #24
 8000e6e:	0fc9      	lsrs	r1, r1, #31
 8000e70:	09b6      	lsrs	r6, r6, #6
 8000e72:	2aff      	cmp	r2, #255	; 0xff
 8000e74:	d05b      	beq.n	8000f2e <__aeabi_fsub+0xe2>
 8000e76:	2001      	movs	r0, #1
 8000e78:	4041      	eors	r1, r0
 8000e7a:	428c      	cmp	r4, r1
 8000e7c:	d039      	beq.n	8000ef2 <__aeabi_fsub+0xa6>
 8000e7e:	1aa8      	subs	r0, r5, r2
 8000e80:	2800      	cmp	r0, #0
 8000e82:	dd5a      	ble.n	8000f3a <__aeabi_fsub+0xee>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d06a      	beq.n	8000f5e <__aeabi_fsub+0x112>
 8000e88:	2dff      	cmp	r5, #255	; 0xff
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x42>
 8000e8c:	e0d9      	b.n	8001042 <__aeabi_fsub+0x1f6>
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	04d2      	lsls	r2, r2, #19
 8000e92:	4316      	orrs	r6, r2
 8000e94:	281b      	cmp	r0, #27
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x4e>
 8000e98:	e0e9      	b.n	800106e <__aeabi_fsub+0x222>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	1a18      	subs	r0, r3, r0
 8000ea0:	0143      	lsls	r3, r0, #5
 8000ea2:	d400      	bmi.n	8000ea6 <__aeabi_fsub+0x5a>
 8000ea4:	e0b4      	b.n	8001010 <__aeabi_fsub+0x1c4>
 8000ea6:	0180      	lsls	r0, r0, #6
 8000ea8:	0987      	lsrs	r7, r0, #6
 8000eaa:	0038      	movs	r0, r7
 8000eac:	f002 f894 	bl	8002fd8 <__clzsi2>
 8000eb0:	3805      	subs	r0, #5
 8000eb2:	4087      	lsls	r7, r0
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x6e>
 8000eb8:	e0cc      	b.n	8001054 <__aeabi_fsub+0x208>
 8000eba:	1a2d      	subs	r5, r5, r0
 8000ebc:	48b5      	ldr	r0, [pc, #724]	; (8001194 <__aeabi_fsub+0x348>)
 8000ebe:	4038      	ands	r0, r7
 8000ec0:	0743      	lsls	r3, r0, #29
 8000ec2:	d004      	beq.n	8000ece <__aeabi_fsub+0x82>
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	4003      	ands	r3, r0
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d000      	beq.n	8000ece <__aeabi_fsub+0x82>
 8000ecc:	3004      	adds	r0, #4
 8000ece:	0143      	lsls	r3, r0, #5
 8000ed0:	d400      	bmi.n	8000ed4 <__aeabi_fsub+0x88>
 8000ed2:	e0a0      	b.n	8001016 <__aeabi_fsub+0x1ca>
 8000ed4:	1c6a      	adds	r2, r5, #1
 8000ed6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x90>
 8000eda:	e08d      	b.n	8000ff8 <__aeabi_fsub+0x1ac>
 8000edc:	0180      	lsls	r0, r0, #6
 8000ede:	0a47      	lsrs	r7, r0, #9
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	05d0      	lsls	r0, r2, #23
 8000ee4:	4338      	orrs	r0, r7
 8000ee6:	07e4      	lsls	r4, r4, #31
 8000ee8:	4320      	orrs	r0, r4
 8000eea:	bcc0      	pop	{r6, r7}
 8000eec:	46b9      	mov	r9, r7
 8000eee:	46b0      	mov	r8, r6
 8000ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef2:	1aa8      	subs	r0, r5, r2
 8000ef4:	4680      	mov	r8, r0
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dd45      	ble.n	8000f86 <__aeabi_fsub+0x13a>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d070      	beq.n	8000fe0 <__aeabi_fsub+0x194>
 8000efe:	2dff      	cmp	r5, #255	; 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0xb8>
 8000f02:	e09e      	b.n	8001042 <__aeabi_fsub+0x1f6>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	04db      	lsls	r3, r3, #19
 8000f08:	431e      	orrs	r6, r3
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	2b1b      	cmp	r3, #27
 8000f0e:	dc00      	bgt.n	8000f12 <__aeabi_fsub+0xc6>
 8000f10:	e0d2      	b.n	80010b8 <__aeabi_fsub+0x26c>
 8000f12:	2001      	movs	r0, #1
 8000f14:	4460      	add	r0, ip
 8000f16:	0143      	lsls	r3, r0, #5
 8000f18:	d57a      	bpl.n	8001010 <__aeabi_fsub+0x1c4>
 8000f1a:	3501      	adds	r5, #1
 8000f1c:	2dff      	cmp	r5, #255	; 0xff
 8000f1e:	d06b      	beq.n	8000ff8 <__aeabi_fsub+0x1ac>
 8000f20:	2301      	movs	r3, #1
 8000f22:	4a9d      	ldr	r2, [pc, #628]	; (8001198 <__aeabi_fsub+0x34c>)
 8000f24:	4003      	ands	r3, r0
 8000f26:	0840      	lsrs	r0, r0, #1
 8000f28:	4010      	ands	r0, r2
 8000f2a:	4318      	orrs	r0, r3
 8000f2c:	e7c8      	b.n	8000ec0 <__aeabi_fsub+0x74>
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d020      	beq.n	8000f74 <__aeabi_fsub+0x128>
 8000f32:	428c      	cmp	r4, r1
 8000f34:	d023      	beq.n	8000f7e <__aeabi_fsub+0x132>
 8000f36:	0028      	movs	r0, r5
 8000f38:	38ff      	subs	r0, #255	; 0xff
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d039      	beq.n	8000fb2 <__aeabi_fsub+0x166>
 8000f3e:	1b57      	subs	r7, r2, r5
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0xfa>
 8000f44:	e09d      	b.n	8001082 <__aeabi_fsub+0x236>
 8000f46:	4663      	mov	r3, ip
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x102>
 8000f4c:	e0db      	b.n	8001106 <__aeabi_fsub+0x2ba>
 8000f4e:	1e7b      	subs	r3, r7, #1
 8000f50:	2f01      	cmp	r7, #1
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x10a>
 8000f54:	e10d      	b.n	8001172 <__aeabi_fsub+0x326>
 8000f56:	2fff      	cmp	r7, #255	; 0xff
 8000f58:	d071      	beq.n	800103e <__aeabi_fsub+0x1f2>
 8000f5a:	001f      	movs	r7, r3
 8000f5c:	e098      	b.n	8001090 <__aeabi_fsub+0x244>
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x118>
 8000f62:	e0a7      	b.n	80010b4 <__aeabi_fsub+0x268>
 8000f64:	1e42      	subs	r2, r0, #1
 8000f66:	2801      	cmp	r0, #1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x120>
 8000f6a:	e0e6      	b.n	800113a <__aeabi_fsub+0x2ee>
 8000f6c:	28ff      	cmp	r0, #255	; 0xff
 8000f6e:	d068      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 8000f70:	0010      	movs	r0, r2
 8000f72:	e78f      	b.n	8000e94 <__aeabi_fsub+0x48>
 8000f74:	2001      	movs	r0, #1
 8000f76:	4041      	eors	r1, r0
 8000f78:	42a1      	cmp	r1, r4
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_fsub+0x132>
 8000f7c:	e77f      	b.n	8000e7e <__aeabi_fsub+0x32>
 8000f7e:	20ff      	movs	r0, #255	; 0xff
 8000f80:	4240      	negs	r0, r0
 8000f82:	4680      	mov	r8, r0
 8000f84:	44a8      	add	r8, r5
 8000f86:	4640      	mov	r0, r8
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d038      	beq.n	8000ffe <__aeabi_fsub+0x1b2>
 8000f8c:	1b51      	subs	r1, r2, r5
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x148>
 8000f92:	e0ae      	b.n	80010f2 <__aeabi_fsub+0x2a6>
 8000f94:	2aff      	cmp	r2, #255	; 0xff
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x14e>
 8000f98:	e0df      	b.n	800115a <__aeabi_fsub+0x30e>
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	04db      	lsls	r3, r3, #19
 8000fa0:	4318      	orrs	r0, r3
 8000fa2:	4684      	mov	ip, r0
 8000fa4:	291b      	cmp	r1, #27
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_fsub+0x15e>
 8000fa8:	e0d9      	b.n	800115e <__aeabi_fsub+0x312>
 8000faa:	2001      	movs	r0, #1
 8000fac:	0015      	movs	r5, r2
 8000fae:	1980      	adds	r0, r0, r6
 8000fb0:	e7b1      	b.n	8000f16 <__aeabi_fsub+0xca>
 8000fb2:	20fe      	movs	r0, #254	; 0xfe
 8000fb4:	1c6a      	adds	r2, r5, #1
 8000fb6:	4210      	tst	r0, r2
 8000fb8:	d171      	bne.n	800109e <__aeabi_fsub+0x252>
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_fsub+0x174>
 8000fbe:	e0a6      	b.n	800110e <__aeabi_fsub+0x2c2>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x17c>
 8000fc6:	e0d9      	b.n	800117c <__aeabi_fsub+0x330>
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x184>
 8000fce:	e788      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8000fd0:	1b98      	subs	r0, r3, r6
 8000fd2:	0143      	lsls	r3, r0, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x18c>
 8000fd6:	e0e1      	b.n	800119c <__aeabi_fsub+0x350>
 8000fd8:	4663      	mov	r3, ip
 8000fda:	000c      	movs	r4, r1
 8000fdc:	1af0      	subs	r0, r6, r3
 8000fde:	e76f      	b.n	8000ec0 <__aeabi_fsub+0x74>
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x19a>
 8000fe4:	e0b7      	b.n	8001156 <__aeabi_fsub+0x30a>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	3a01      	subs	r2, #1
 8000fea:	2801      	cmp	r0, #1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x1a4>
 8000fee:	e09c      	b.n	800112a <__aeabi_fsub+0x2de>
 8000ff0:	28ff      	cmp	r0, #255	; 0xff
 8000ff2:	d026      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 8000ff4:	4690      	mov	r8, r2
 8000ff6:	e788      	b.n	8000f0a <__aeabi_fsub+0xbe>
 8000ff8:	22ff      	movs	r2, #255	; 0xff
 8000ffa:	2700      	movs	r7, #0
 8000ffc:	e771      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8000ffe:	20fe      	movs	r0, #254	; 0xfe
 8001000:	1c6a      	adds	r2, r5, #1
 8001002:	4210      	tst	r0, r2
 8001004:	d064      	beq.n	80010d0 <__aeabi_fsub+0x284>
 8001006:	2aff      	cmp	r2, #255	; 0xff
 8001008:	d0f6      	beq.n	8000ff8 <__aeabi_fsub+0x1ac>
 800100a:	0015      	movs	r5, r2
 800100c:	4466      	add	r6, ip
 800100e:	0870      	lsrs	r0, r6, #1
 8001010:	0743      	lsls	r3, r0, #29
 8001012:	d000      	beq.n	8001016 <__aeabi_fsub+0x1ca>
 8001014:	e756      	b.n	8000ec4 <__aeabi_fsub+0x78>
 8001016:	08c3      	lsrs	r3, r0, #3
 8001018:	2dff      	cmp	r5, #255	; 0xff
 800101a:	d012      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	0a5f      	lsrs	r7, r3, #9
 8001020:	b2ea      	uxtb	r2, r5
 8001022:	e75e      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001024:	4662      	mov	r2, ip
 8001026:	2a00      	cmp	r2, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x1e0>
 800102a:	e096      	b.n	800115a <__aeabi_fsub+0x30e>
 800102c:	2e00      	cmp	r6, #0
 800102e:	d008      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4213      	tst	r3, r2
 8001036:	d004      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 8001038:	4648      	mov	r0, r9
 800103a:	4210      	tst	r0, r2
 800103c:	d101      	bne.n	8001042 <__aeabi_fsub+0x1f6>
 800103e:	000c      	movs	r4, r1
 8001040:	464b      	mov	r3, r9
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0d8      	beq.n	8000ff8 <__aeabi_fsub+0x1ac>
 8001046:	2780      	movs	r7, #128	; 0x80
 8001048:	03ff      	lsls	r7, r7, #15
 800104a:	431f      	orrs	r7, r3
 800104c:	027f      	lsls	r7, r7, #9
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	0a7f      	lsrs	r7, r7, #9
 8001052:	e746      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001054:	2320      	movs	r3, #32
 8001056:	003a      	movs	r2, r7
 8001058:	1b45      	subs	r5, r0, r5
 800105a:	0038      	movs	r0, r7
 800105c:	3501      	adds	r5, #1
 800105e:	40ea      	lsrs	r2, r5
 8001060:	1b5d      	subs	r5, r3, r5
 8001062:	40a8      	lsls	r0, r5
 8001064:	1e43      	subs	r3, r0, #1
 8001066:	4198      	sbcs	r0, r3
 8001068:	2500      	movs	r5, #0
 800106a:	4310      	orrs	r0, r2
 800106c:	e728      	b.n	8000ec0 <__aeabi_fsub+0x74>
 800106e:	2320      	movs	r3, #32
 8001070:	1a1b      	subs	r3, r3, r0
 8001072:	0032      	movs	r2, r6
 8001074:	409e      	lsls	r6, r3
 8001076:	40c2      	lsrs	r2, r0
 8001078:	0030      	movs	r0, r6
 800107a:	1e43      	subs	r3, r0, #1
 800107c:	4198      	sbcs	r0, r3
 800107e:	4310      	orrs	r0, r2
 8001080:	e70c      	b.n	8000e9c <__aeabi_fsub+0x50>
 8001082:	2aff      	cmp	r2, #255	; 0xff
 8001084:	d0db      	beq.n	800103e <__aeabi_fsub+0x1f2>
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	4660      	mov	r0, ip
 800108a:	04db      	lsls	r3, r3, #19
 800108c:	4318      	orrs	r0, r3
 800108e:	4684      	mov	ip, r0
 8001090:	2f1b      	cmp	r7, #27
 8001092:	dd56      	ble.n	8001142 <__aeabi_fsub+0x2f6>
 8001094:	2001      	movs	r0, #1
 8001096:	000c      	movs	r4, r1
 8001098:	0015      	movs	r5, r2
 800109a:	1a30      	subs	r0, r6, r0
 800109c:	e700      	b.n	8000ea0 <__aeabi_fsub+0x54>
 800109e:	4663      	mov	r3, ip
 80010a0:	1b9f      	subs	r7, r3, r6
 80010a2:	017b      	lsls	r3, r7, #5
 80010a4:	d43d      	bmi.n	8001122 <__aeabi_fsub+0x2d6>
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d000      	beq.n	80010ac <__aeabi_fsub+0x260>
 80010aa:	e6fe      	b.n	8000eaa <__aeabi_fsub+0x5e>
 80010ac:	2400      	movs	r4, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2700      	movs	r7, #0
 80010b2:	e716      	b.n	8000ee2 <__aeabi_fsub+0x96>
 80010b4:	0005      	movs	r5, r0
 80010b6:	e7af      	b.n	8001018 <__aeabi_fsub+0x1cc>
 80010b8:	0032      	movs	r2, r6
 80010ba:	4643      	mov	r3, r8
 80010bc:	4641      	mov	r1, r8
 80010be:	40da      	lsrs	r2, r3
 80010c0:	2320      	movs	r3, #32
 80010c2:	1a5b      	subs	r3, r3, r1
 80010c4:	409e      	lsls	r6, r3
 80010c6:	0030      	movs	r0, r6
 80010c8:	1e43      	subs	r3, r0, #1
 80010ca:	4198      	sbcs	r0, r3
 80010cc:	4310      	orrs	r0, r2
 80010ce:	e721      	b.n	8000f14 <__aeabi_fsub+0xc8>
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d1a7      	bne.n	8001024 <__aeabi_fsub+0x1d8>
 80010d4:	4663      	mov	r3, ip
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d059      	beq.n	800118e <__aeabi_fsub+0x342>
 80010da:	2200      	movs	r2, #0
 80010dc:	2e00      	cmp	r6, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x296>
 80010e0:	e6ff      	b.n	8000ee2 <__aeabi_fsub+0x96>
 80010e2:	0030      	movs	r0, r6
 80010e4:	4460      	add	r0, ip
 80010e6:	0143      	lsls	r3, r0, #5
 80010e8:	d592      	bpl.n	8001010 <__aeabi_fsub+0x1c4>
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <__aeabi_fsub+0x348>)
 80010ec:	3501      	adds	r5, #1
 80010ee:	4018      	ands	r0, r3
 80010f0:	e78e      	b.n	8001010 <__aeabi_fsub+0x1c4>
 80010f2:	4663      	mov	r3, ip
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d047      	beq.n	8001188 <__aeabi_fsub+0x33c>
 80010f8:	1e4b      	subs	r3, r1, #1
 80010fa:	2901      	cmp	r1, #1
 80010fc:	d015      	beq.n	800112a <__aeabi_fsub+0x2de>
 80010fe:	29ff      	cmp	r1, #255	; 0xff
 8001100:	d02b      	beq.n	800115a <__aeabi_fsub+0x30e>
 8001102:	0019      	movs	r1, r3
 8001104:	e74e      	b.n	8000fa4 <__aeabi_fsub+0x158>
 8001106:	000c      	movs	r4, r1
 8001108:	464b      	mov	r3, r9
 800110a:	003d      	movs	r5, r7
 800110c:	e784      	b.n	8001018 <__aeabi_fsub+0x1cc>
 800110e:	4662      	mov	r2, ip
 8001110:	2a00      	cmp	r2, #0
 8001112:	d18b      	bne.n	800102c <__aeabi_fsub+0x1e0>
 8001114:	2e00      	cmp	r6, #0
 8001116:	d192      	bne.n	800103e <__aeabi_fsub+0x1f2>
 8001118:	2780      	movs	r7, #128	; 0x80
 800111a:	2400      	movs	r4, #0
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	03ff      	lsls	r7, r7, #15
 8001120:	e6df      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001122:	4663      	mov	r3, ip
 8001124:	000c      	movs	r4, r1
 8001126:	1af7      	subs	r7, r6, r3
 8001128:	e6bf      	b.n	8000eaa <__aeabi_fsub+0x5e>
 800112a:	0030      	movs	r0, r6
 800112c:	4460      	add	r0, ip
 800112e:	2501      	movs	r5, #1
 8001130:	0143      	lsls	r3, r0, #5
 8001132:	d400      	bmi.n	8001136 <__aeabi_fsub+0x2ea>
 8001134:	e76c      	b.n	8001010 <__aeabi_fsub+0x1c4>
 8001136:	2502      	movs	r5, #2
 8001138:	e6f2      	b.n	8000f20 <__aeabi_fsub+0xd4>
 800113a:	4663      	mov	r3, ip
 800113c:	2501      	movs	r5, #1
 800113e:	1b98      	subs	r0, r3, r6
 8001140:	e6ae      	b.n	8000ea0 <__aeabi_fsub+0x54>
 8001142:	2320      	movs	r3, #32
 8001144:	4664      	mov	r4, ip
 8001146:	4660      	mov	r0, ip
 8001148:	40fc      	lsrs	r4, r7
 800114a:	1bdf      	subs	r7, r3, r7
 800114c:	40b8      	lsls	r0, r7
 800114e:	1e43      	subs	r3, r0, #1
 8001150:	4198      	sbcs	r0, r3
 8001152:	4320      	orrs	r0, r4
 8001154:	e79f      	b.n	8001096 <__aeabi_fsub+0x24a>
 8001156:	0005      	movs	r5, r0
 8001158:	e75e      	b.n	8001018 <__aeabi_fsub+0x1cc>
 800115a:	464b      	mov	r3, r9
 800115c:	e771      	b.n	8001042 <__aeabi_fsub+0x1f6>
 800115e:	2320      	movs	r3, #32
 8001160:	4665      	mov	r5, ip
 8001162:	4660      	mov	r0, ip
 8001164:	40cd      	lsrs	r5, r1
 8001166:	1a59      	subs	r1, r3, r1
 8001168:	4088      	lsls	r0, r1
 800116a:	1e43      	subs	r3, r0, #1
 800116c:	4198      	sbcs	r0, r3
 800116e:	4328      	orrs	r0, r5
 8001170:	e71c      	b.n	8000fac <__aeabi_fsub+0x160>
 8001172:	4663      	mov	r3, ip
 8001174:	000c      	movs	r4, r1
 8001176:	2501      	movs	r5, #1
 8001178:	1af0      	subs	r0, r6, r3
 800117a:	e691      	b.n	8000ea0 <__aeabi_fsub+0x54>
 800117c:	2e00      	cmp	r6, #0
 800117e:	d095      	beq.n	80010ac <__aeabi_fsub+0x260>
 8001180:	000c      	movs	r4, r1
 8001182:	464f      	mov	r7, r9
 8001184:	2200      	movs	r2, #0
 8001186:	e6ac      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001188:	464b      	mov	r3, r9
 800118a:	000d      	movs	r5, r1
 800118c:	e744      	b.n	8001018 <__aeabi_fsub+0x1cc>
 800118e:	464f      	mov	r7, r9
 8001190:	2200      	movs	r2, #0
 8001192:	e6a6      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001194:	fbffffff 	.word	0xfbffffff
 8001198:	7dffffff 	.word	0x7dffffff
 800119c:	2800      	cmp	r0, #0
 800119e:	d000      	beq.n	80011a2 <__aeabi_fsub+0x356>
 80011a0:	e736      	b.n	8001010 <__aeabi_fsub+0x1c4>
 80011a2:	2400      	movs	r4, #0
 80011a4:	2700      	movs	r7, #0
 80011a6:	e69c      	b.n	8000ee2 <__aeabi_fsub+0x96>

080011a8 <__aeabi_f2iz>:
 80011a8:	0241      	lsls	r1, r0, #9
 80011aa:	0042      	lsls	r2, r0, #1
 80011ac:	0fc3      	lsrs	r3, r0, #31
 80011ae:	0a49      	lsrs	r1, r1, #9
 80011b0:	2000      	movs	r0, #0
 80011b2:	0e12      	lsrs	r2, r2, #24
 80011b4:	2a7e      	cmp	r2, #126	; 0x7e
 80011b6:	dd03      	ble.n	80011c0 <__aeabi_f2iz+0x18>
 80011b8:	2a9d      	cmp	r2, #157	; 0x9d
 80011ba:	dd02      	ble.n	80011c2 <__aeabi_f2iz+0x1a>
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <__aeabi_f2iz+0x3c>)
 80011be:	1898      	adds	r0, r3, r2
 80011c0:	4770      	bx	lr
 80011c2:	2080      	movs	r0, #128	; 0x80
 80011c4:	0400      	lsls	r0, r0, #16
 80011c6:	4301      	orrs	r1, r0
 80011c8:	2a95      	cmp	r2, #149	; 0x95
 80011ca:	dc07      	bgt.n	80011dc <__aeabi_f2iz+0x34>
 80011cc:	2096      	movs	r0, #150	; 0x96
 80011ce:	1a82      	subs	r2, r0, r2
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	4248      	negs	r0, r1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f3      	bne.n	80011c0 <__aeabi_f2iz+0x18>
 80011d8:	0008      	movs	r0, r1
 80011da:	e7f1      	b.n	80011c0 <__aeabi_f2iz+0x18>
 80011dc:	3a96      	subs	r2, #150	; 0x96
 80011de:	4091      	lsls	r1, r2
 80011e0:	e7f7      	b.n	80011d2 <__aeabi_f2iz+0x2a>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	7fffffff 	.word	0x7fffffff

080011e8 <__aeabi_ui2f>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	1e05      	subs	r5, r0, #0
 80011ec:	d00e      	beq.n	800120c <__aeabi_ui2f+0x24>
 80011ee:	f001 fef3 	bl	8002fd8 <__clzsi2>
 80011f2:	239e      	movs	r3, #158	; 0x9e
 80011f4:	0004      	movs	r4, r0
 80011f6:	1a1b      	subs	r3, r3, r0
 80011f8:	2b96      	cmp	r3, #150	; 0x96
 80011fa:	dc0c      	bgt.n	8001216 <__aeabi_ui2f+0x2e>
 80011fc:	2808      	cmp	r0, #8
 80011fe:	dd01      	ble.n	8001204 <__aeabi_ui2f+0x1c>
 8001200:	3c08      	subs	r4, #8
 8001202:	40a5      	lsls	r5, r4
 8001204:	026d      	lsls	r5, r5, #9
 8001206:	0a6d      	lsrs	r5, r5, #9
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	e001      	b.n	8001210 <__aeabi_ui2f+0x28>
 800120c:	2000      	movs	r0, #0
 800120e:	2500      	movs	r5, #0
 8001210:	05c0      	lsls	r0, r0, #23
 8001212:	4328      	orrs	r0, r5
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	2b99      	cmp	r3, #153	; 0x99
 8001218:	dd09      	ble.n	800122e <__aeabi_ui2f+0x46>
 800121a:	0002      	movs	r2, r0
 800121c:	0029      	movs	r1, r5
 800121e:	321b      	adds	r2, #27
 8001220:	4091      	lsls	r1, r2
 8001222:	1e4a      	subs	r2, r1, #1
 8001224:	4191      	sbcs	r1, r2
 8001226:	2205      	movs	r2, #5
 8001228:	1a12      	subs	r2, r2, r0
 800122a:	40d5      	lsrs	r5, r2
 800122c:	430d      	orrs	r5, r1
 800122e:	2c05      	cmp	r4, #5
 8001230:	dc12      	bgt.n	8001258 <__aeabi_ui2f+0x70>
 8001232:	0029      	movs	r1, r5
 8001234:	4e0c      	ldr	r6, [pc, #48]	; (8001268 <__aeabi_ui2f+0x80>)
 8001236:	4031      	ands	r1, r6
 8001238:	076a      	lsls	r2, r5, #29
 800123a:	d009      	beq.n	8001250 <__aeabi_ui2f+0x68>
 800123c:	200f      	movs	r0, #15
 800123e:	4028      	ands	r0, r5
 8001240:	2804      	cmp	r0, #4
 8001242:	d005      	beq.n	8001250 <__aeabi_ui2f+0x68>
 8001244:	3104      	adds	r1, #4
 8001246:	014a      	lsls	r2, r1, #5
 8001248:	d502      	bpl.n	8001250 <__aeabi_ui2f+0x68>
 800124a:	239f      	movs	r3, #159	; 0x9f
 800124c:	4031      	ands	r1, r6
 800124e:	1b1b      	subs	r3, r3, r4
 8001250:	0189      	lsls	r1, r1, #6
 8001252:	0a4d      	lsrs	r5, r1, #9
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	e7db      	b.n	8001210 <__aeabi_ui2f+0x28>
 8001258:	1f62      	subs	r2, r4, #5
 800125a:	4095      	lsls	r5, r2
 800125c:	0029      	movs	r1, r5
 800125e:	4e02      	ldr	r6, [pc, #8]	; (8001268 <__aeabi_ui2f+0x80>)
 8001260:	4031      	ands	r1, r6
 8001262:	076a      	lsls	r2, r5, #29
 8001264:	d0f4      	beq.n	8001250 <__aeabi_ui2f+0x68>
 8001266:	e7e9      	b.n	800123c <__aeabi_ui2f+0x54>
 8001268:	fbffffff 	.word	0xfbffffff

0800126c <__aeabi_dadd>:
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	464f      	mov	r7, r9
 8001270:	4646      	mov	r6, r8
 8001272:	46d6      	mov	lr, sl
 8001274:	000d      	movs	r5, r1
 8001276:	0004      	movs	r4, r0
 8001278:	b5c0      	push	{r6, r7, lr}
 800127a:	001f      	movs	r7, r3
 800127c:	0011      	movs	r1, r2
 800127e:	0328      	lsls	r0, r5, #12
 8001280:	0f62      	lsrs	r2, r4, #29
 8001282:	0a40      	lsrs	r0, r0, #9
 8001284:	4310      	orrs	r0, r2
 8001286:	007a      	lsls	r2, r7, #1
 8001288:	0d52      	lsrs	r2, r2, #21
 800128a:	00e3      	lsls	r3, r4, #3
 800128c:	033c      	lsls	r4, r7, #12
 800128e:	4691      	mov	r9, r2
 8001290:	0a64      	lsrs	r4, r4, #9
 8001292:	0ffa      	lsrs	r2, r7, #31
 8001294:	0f4f      	lsrs	r7, r1, #29
 8001296:	006e      	lsls	r6, r5, #1
 8001298:	4327      	orrs	r7, r4
 800129a:	4692      	mov	sl, r2
 800129c:	46b8      	mov	r8, r7
 800129e:	0d76      	lsrs	r6, r6, #21
 80012a0:	0fed      	lsrs	r5, r5, #31
 80012a2:	00c9      	lsls	r1, r1, #3
 80012a4:	4295      	cmp	r5, r2
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x3e>
 80012a8:	e099      	b.n	80013de <__aeabi_dadd+0x172>
 80012aa:	464c      	mov	r4, r9
 80012ac:	1b34      	subs	r4, r6, r4
 80012ae:	46a4      	mov	ip, r4
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	dc00      	bgt.n	80012b6 <__aeabi_dadd+0x4a>
 80012b4:	e07c      	b.n	80013b0 <__aeabi_dadd+0x144>
 80012b6:	464a      	mov	r2, r9
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0x52>
 80012bc:	e0b8      	b.n	8001430 <__aeabi_dadd+0x1c4>
 80012be:	4ac5      	ldr	r2, [pc, #788]	; (80015d4 <__aeabi_dadd+0x368>)
 80012c0:	4296      	cmp	r6, r2
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x5a>
 80012c4:	e11c      	b.n	8001500 <__aeabi_dadd+0x294>
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	003c      	movs	r4, r7
 80012ca:	0412      	lsls	r2, r2, #16
 80012cc:	4314      	orrs	r4, r2
 80012ce:	46a0      	mov	r8, r4
 80012d0:	4662      	mov	r2, ip
 80012d2:	2a38      	cmp	r2, #56	; 0x38
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0x6c>
 80012d6:	e161      	b.n	800159c <__aeabi_dadd+0x330>
 80012d8:	2a1f      	cmp	r2, #31
 80012da:	dd00      	ble.n	80012de <__aeabi_dadd+0x72>
 80012dc:	e1cc      	b.n	8001678 <__aeabi_dadd+0x40c>
 80012de:	4664      	mov	r4, ip
 80012e0:	2220      	movs	r2, #32
 80012e2:	1b12      	subs	r2, r2, r4
 80012e4:	4644      	mov	r4, r8
 80012e6:	4094      	lsls	r4, r2
 80012e8:	000f      	movs	r7, r1
 80012ea:	46a1      	mov	r9, r4
 80012ec:	4664      	mov	r4, ip
 80012ee:	4091      	lsls	r1, r2
 80012f0:	40e7      	lsrs	r7, r4
 80012f2:	464c      	mov	r4, r9
 80012f4:	1e4a      	subs	r2, r1, #1
 80012f6:	4191      	sbcs	r1, r2
 80012f8:	433c      	orrs	r4, r7
 80012fa:	4642      	mov	r2, r8
 80012fc:	4321      	orrs	r1, r4
 80012fe:	4664      	mov	r4, ip
 8001300:	40e2      	lsrs	r2, r4
 8001302:	1a80      	subs	r0, r0, r2
 8001304:	1a5c      	subs	r4, r3, r1
 8001306:	42a3      	cmp	r3, r4
 8001308:	419b      	sbcs	r3, r3
 800130a:	425f      	negs	r7, r3
 800130c:	1bc7      	subs	r7, r0, r7
 800130e:	023b      	lsls	r3, r7, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0xa8>
 8001312:	e0d0      	b.n	80014b6 <__aeabi_dadd+0x24a>
 8001314:	027f      	lsls	r7, r7, #9
 8001316:	0a7f      	lsrs	r7, r7, #9
 8001318:	2f00      	cmp	r7, #0
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0xb2>
 800131c:	e0ff      	b.n	800151e <__aeabi_dadd+0x2b2>
 800131e:	0038      	movs	r0, r7
 8001320:	f001 fe5a 	bl	8002fd8 <__clzsi2>
 8001324:	0001      	movs	r1, r0
 8001326:	3908      	subs	r1, #8
 8001328:	2320      	movs	r3, #32
 800132a:	0022      	movs	r2, r4
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	408f      	lsls	r7, r1
 8001330:	40da      	lsrs	r2, r3
 8001332:	408c      	lsls	r4, r1
 8001334:	4317      	orrs	r7, r2
 8001336:	42b1      	cmp	r1, r6
 8001338:	da00      	bge.n	800133c <__aeabi_dadd+0xd0>
 800133a:	e0ff      	b.n	800153c <__aeabi_dadd+0x2d0>
 800133c:	1b89      	subs	r1, r1, r6
 800133e:	1c4b      	adds	r3, r1, #1
 8001340:	2b1f      	cmp	r3, #31
 8001342:	dd00      	ble.n	8001346 <__aeabi_dadd+0xda>
 8001344:	e0a8      	b.n	8001498 <__aeabi_dadd+0x22c>
 8001346:	2220      	movs	r2, #32
 8001348:	0039      	movs	r1, r7
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	0020      	movs	r0, r4
 800134e:	4094      	lsls	r4, r2
 8001350:	4091      	lsls	r1, r2
 8001352:	40d8      	lsrs	r0, r3
 8001354:	1e62      	subs	r2, r4, #1
 8001356:	4194      	sbcs	r4, r2
 8001358:	40df      	lsrs	r7, r3
 800135a:	2600      	movs	r6, #0
 800135c:	4301      	orrs	r1, r0
 800135e:	430c      	orrs	r4, r1
 8001360:	0763      	lsls	r3, r4, #29
 8001362:	d009      	beq.n	8001378 <__aeabi_dadd+0x10c>
 8001364:	230f      	movs	r3, #15
 8001366:	4023      	ands	r3, r4
 8001368:	2b04      	cmp	r3, #4
 800136a:	d005      	beq.n	8001378 <__aeabi_dadd+0x10c>
 800136c:	1d23      	adds	r3, r4, #4
 800136e:	42a3      	cmp	r3, r4
 8001370:	41a4      	sbcs	r4, r4
 8001372:	4264      	negs	r4, r4
 8001374:	193f      	adds	r7, r7, r4
 8001376:	001c      	movs	r4, r3
 8001378:	023b      	lsls	r3, r7, #8
 800137a:	d400      	bmi.n	800137e <__aeabi_dadd+0x112>
 800137c:	e09e      	b.n	80014bc <__aeabi_dadd+0x250>
 800137e:	4b95      	ldr	r3, [pc, #596]	; (80015d4 <__aeabi_dadd+0x368>)
 8001380:	3601      	adds	r6, #1
 8001382:	429e      	cmp	r6, r3
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x11c>
 8001386:	e0b7      	b.n	80014f8 <__aeabi_dadd+0x28c>
 8001388:	4a93      	ldr	r2, [pc, #588]	; (80015d8 <__aeabi_dadd+0x36c>)
 800138a:	08e4      	lsrs	r4, r4, #3
 800138c:	4017      	ands	r7, r2
 800138e:	077b      	lsls	r3, r7, #29
 8001390:	0571      	lsls	r1, r6, #21
 8001392:	027f      	lsls	r7, r7, #9
 8001394:	4323      	orrs	r3, r4
 8001396:	0b3f      	lsrs	r7, r7, #12
 8001398:	0d4a      	lsrs	r2, r1, #21
 800139a:	0512      	lsls	r2, r2, #20
 800139c:	433a      	orrs	r2, r7
 800139e:	07ed      	lsls	r5, r5, #31
 80013a0:	432a      	orrs	r2, r5
 80013a2:	0018      	movs	r0, r3
 80013a4:	0011      	movs	r1, r2
 80013a6:	bce0      	pop	{r5, r6, r7}
 80013a8:	46ba      	mov	sl, r7
 80013aa:	46b1      	mov	r9, r6
 80013ac:	46a8      	mov	r8, r5
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d04b      	beq.n	800144c <__aeabi_dadd+0x1e0>
 80013b4:	464c      	mov	r4, r9
 80013b6:	1ba4      	subs	r4, r4, r6
 80013b8:	46a4      	mov	ip, r4
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d000      	beq.n	80013c0 <__aeabi_dadd+0x154>
 80013be:	e123      	b.n	8001608 <__aeabi_dadd+0x39c>
 80013c0:	0004      	movs	r4, r0
 80013c2:	431c      	orrs	r4, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x15c>
 80013c6:	e1af      	b.n	8001728 <__aeabi_dadd+0x4bc>
 80013c8:	4662      	mov	r2, ip
 80013ca:	1e54      	subs	r4, r2, #1
 80013cc:	2a01      	cmp	r2, #1
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x166>
 80013d0:	e215      	b.n	80017fe <__aeabi_dadd+0x592>
 80013d2:	4d80      	ldr	r5, [pc, #512]	; (80015d4 <__aeabi_dadd+0x368>)
 80013d4:	45ac      	cmp	ip, r5
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x16e>
 80013d8:	e1c8      	b.n	800176c <__aeabi_dadd+0x500>
 80013da:	46a4      	mov	ip, r4
 80013dc:	e11b      	b.n	8001616 <__aeabi_dadd+0x3aa>
 80013de:	464a      	mov	r2, r9
 80013e0:	1ab2      	subs	r2, r6, r2
 80013e2:	4694      	mov	ip, r2
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_dadd+0x17e>
 80013e8:	e0ac      	b.n	8001544 <__aeabi_dadd+0x2d8>
 80013ea:	464a      	mov	r2, r9
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	d043      	beq.n	8001478 <__aeabi_dadd+0x20c>
 80013f0:	4a78      	ldr	r2, [pc, #480]	; (80015d4 <__aeabi_dadd+0x368>)
 80013f2:	4296      	cmp	r6, r2
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dadd+0x18c>
 80013f6:	e1af      	b.n	8001758 <__aeabi_dadd+0x4ec>
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	003c      	movs	r4, r7
 80013fc:	0412      	lsls	r2, r2, #16
 80013fe:	4314      	orrs	r4, r2
 8001400:	46a0      	mov	r8, r4
 8001402:	4662      	mov	r2, ip
 8001404:	2a38      	cmp	r2, #56	; 0x38
 8001406:	dc67      	bgt.n	80014d8 <__aeabi_dadd+0x26c>
 8001408:	2a1f      	cmp	r2, #31
 800140a:	dc00      	bgt.n	800140e <__aeabi_dadd+0x1a2>
 800140c:	e15f      	b.n	80016ce <__aeabi_dadd+0x462>
 800140e:	4647      	mov	r7, r8
 8001410:	3a20      	subs	r2, #32
 8001412:	40d7      	lsrs	r7, r2
 8001414:	4662      	mov	r2, ip
 8001416:	2a20      	cmp	r2, #32
 8001418:	d005      	beq.n	8001426 <__aeabi_dadd+0x1ba>
 800141a:	4664      	mov	r4, ip
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	1b12      	subs	r2, r2, r4
 8001420:	4644      	mov	r4, r8
 8001422:	4094      	lsls	r4, r2
 8001424:	4321      	orrs	r1, r4
 8001426:	1e4a      	subs	r2, r1, #1
 8001428:	4191      	sbcs	r1, r2
 800142a:	000c      	movs	r4, r1
 800142c:	433c      	orrs	r4, r7
 800142e:	e057      	b.n	80014e0 <__aeabi_dadd+0x274>
 8001430:	003a      	movs	r2, r7
 8001432:	430a      	orrs	r2, r1
 8001434:	d100      	bne.n	8001438 <__aeabi_dadd+0x1cc>
 8001436:	e105      	b.n	8001644 <__aeabi_dadd+0x3d8>
 8001438:	0022      	movs	r2, r4
 800143a:	3a01      	subs	r2, #1
 800143c:	2c01      	cmp	r4, #1
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x1d6>
 8001440:	e182      	b.n	8001748 <__aeabi_dadd+0x4dc>
 8001442:	4c64      	ldr	r4, [pc, #400]	; (80015d4 <__aeabi_dadd+0x368>)
 8001444:	45a4      	cmp	ip, r4
 8001446:	d05b      	beq.n	8001500 <__aeabi_dadd+0x294>
 8001448:	4694      	mov	ip, r2
 800144a:	e741      	b.n	80012d0 <__aeabi_dadd+0x64>
 800144c:	4c63      	ldr	r4, [pc, #396]	; (80015dc <__aeabi_dadd+0x370>)
 800144e:	1c77      	adds	r7, r6, #1
 8001450:	4227      	tst	r7, r4
 8001452:	d000      	beq.n	8001456 <__aeabi_dadd+0x1ea>
 8001454:	e0c4      	b.n	80015e0 <__aeabi_dadd+0x374>
 8001456:	0004      	movs	r4, r0
 8001458:	431c      	orrs	r4, r3
 800145a:	2e00      	cmp	r6, #0
 800145c:	d000      	beq.n	8001460 <__aeabi_dadd+0x1f4>
 800145e:	e169      	b.n	8001734 <__aeabi_dadd+0x4c8>
 8001460:	2c00      	cmp	r4, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x1fa>
 8001464:	e1bf      	b.n	80017e6 <__aeabi_dadd+0x57a>
 8001466:	4644      	mov	r4, r8
 8001468:	430c      	orrs	r4, r1
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x202>
 800146c:	e1d0      	b.n	8001810 <__aeabi_dadd+0x5a4>
 800146e:	0742      	lsls	r2, r0, #29
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	4313      	orrs	r3, r2
 8001474:	08c0      	lsrs	r0, r0, #3
 8001476:	e029      	b.n	80014cc <__aeabi_dadd+0x260>
 8001478:	003a      	movs	r2, r7
 800147a:	430a      	orrs	r2, r1
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x214>
 800147e:	e170      	b.n	8001762 <__aeabi_dadd+0x4f6>
 8001480:	4662      	mov	r2, ip
 8001482:	4664      	mov	r4, ip
 8001484:	3a01      	subs	r2, #1
 8001486:	2c01      	cmp	r4, #1
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x220>
 800148a:	e0e0      	b.n	800164e <__aeabi_dadd+0x3e2>
 800148c:	4c51      	ldr	r4, [pc, #324]	; (80015d4 <__aeabi_dadd+0x368>)
 800148e:	45a4      	cmp	ip, r4
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x228>
 8001492:	e161      	b.n	8001758 <__aeabi_dadd+0x4ec>
 8001494:	4694      	mov	ip, r2
 8001496:	e7b4      	b.n	8001402 <__aeabi_dadd+0x196>
 8001498:	003a      	movs	r2, r7
 800149a:	391f      	subs	r1, #31
 800149c:	40ca      	lsrs	r2, r1
 800149e:	0011      	movs	r1, r2
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d003      	beq.n	80014ac <__aeabi_dadd+0x240>
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	409f      	lsls	r7, r3
 80014aa:	433c      	orrs	r4, r7
 80014ac:	1e63      	subs	r3, r4, #1
 80014ae:	419c      	sbcs	r4, r3
 80014b0:	2700      	movs	r7, #0
 80014b2:	2600      	movs	r6, #0
 80014b4:	430c      	orrs	r4, r1
 80014b6:	0763      	lsls	r3, r4, #29
 80014b8:	d000      	beq.n	80014bc <__aeabi_dadd+0x250>
 80014ba:	e753      	b.n	8001364 <__aeabi_dadd+0xf8>
 80014bc:	46b4      	mov	ip, r6
 80014be:	08e4      	lsrs	r4, r4, #3
 80014c0:	077b      	lsls	r3, r7, #29
 80014c2:	4323      	orrs	r3, r4
 80014c4:	08f8      	lsrs	r0, r7, #3
 80014c6:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <__aeabi_dadd+0x368>)
 80014c8:	4594      	cmp	ip, r2
 80014ca:	d01d      	beq.n	8001508 <__aeabi_dadd+0x29c>
 80014cc:	4662      	mov	r2, ip
 80014ce:	0307      	lsls	r7, r0, #12
 80014d0:	0552      	lsls	r2, r2, #21
 80014d2:	0b3f      	lsrs	r7, r7, #12
 80014d4:	0d52      	lsrs	r2, r2, #21
 80014d6:	e760      	b.n	800139a <__aeabi_dadd+0x12e>
 80014d8:	4644      	mov	r4, r8
 80014da:	430c      	orrs	r4, r1
 80014dc:	1e62      	subs	r2, r4, #1
 80014de:	4194      	sbcs	r4, r2
 80014e0:	18e4      	adds	r4, r4, r3
 80014e2:	429c      	cmp	r4, r3
 80014e4:	419b      	sbcs	r3, r3
 80014e6:	425f      	negs	r7, r3
 80014e8:	183f      	adds	r7, r7, r0
 80014ea:	023b      	lsls	r3, r7, #8
 80014ec:	d5e3      	bpl.n	80014b6 <__aeabi_dadd+0x24a>
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <__aeabi_dadd+0x368>)
 80014f0:	3601      	adds	r6, #1
 80014f2:	429e      	cmp	r6, r3
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dadd+0x28c>
 80014f6:	e0b5      	b.n	8001664 <__aeabi_dadd+0x3f8>
 80014f8:	0032      	movs	r2, r6
 80014fa:	2700      	movs	r7, #0
 80014fc:	2300      	movs	r3, #0
 80014fe:	e74c      	b.n	800139a <__aeabi_dadd+0x12e>
 8001500:	0742      	lsls	r2, r0, #29
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	4313      	orrs	r3, r2
 8001506:	08c0      	lsrs	r0, r0, #3
 8001508:	001a      	movs	r2, r3
 800150a:	4302      	orrs	r2, r0
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x2a4>
 800150e:	e1e1      	b.n	80018d4 <__aeabi_dadd+0x668>
 8001510:	2780      	movs	r7, #128	; 0x80
 8001512:	033f      	lsls	r7, r7, #12
 8001514:	4307      	orrs	r7, r0
 8001516:	033f      	lsls	r7, r7, #12
 8001518:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <__aeabi_dadd+0x368>)
 800151a:	0b3f      	lsrs	r7, r7, #12
 800151c:	e73d      	b.n	800139a <__aeabi_dadd+0x12e>
 800151e:	0020      	movs	r0, r4
 8001520:	f001 fd5a 	bl	8002fd8 <__clzsi2>
 8001524:	0001      	movs	r1, r0
 8001526:	3118      	adds	r1, #24
 8001528:	291f      	cmp	r1, #31
 800152a:	dc00      	bgt.n	800152e <__aeabi_dadd+0x2c2>
 800152c:	e6fc      	b.n	8001328 <__aeabi_dadd+0xbc>
 800152e:	3808      	subs	r0, #8
 8001530:	4084      	lsls	r4, r0
 8001532:	0027      	movs	r7, r4
 8001534:	2400      	movs	r4, #0
 8001536:	42b1      	cmp	r1, r6
 8001538:	db00      	blt.n	800153c <__aeabi_dadd+0x2d0>
 800153a:	e6ff      	b.n	800133c <__aeabi_dadd+0xd0>
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <__aeabi_dadd+0x36c>)
 800153e:	1a76      	subs	r6, r6, r1
 8001540:	4017      	ands	r7, r2
 8001542:	e70d      	b.n	8001360 <__aeabi_dadd+0xf4>
 8001544:	2a00      	cmp	r2, #0
 8001546:	d02f      	beq.n	80015a8 <__aeabi_dadd+0x33c>
 8001548:	464a      	mov	r2, r9
 800154a:	1b92      	subs	r2, r2, r6
 800154c:	4694      	mov	ip, r2
 800154e:	2e00      	cmp	r6, #0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x2e8>
 8001552:	e0ad      	b.n	80016b0 <__aeabi_dadd+0x444>
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <__aeabi_dadd+0x368>)
 8001556:	4591      	cmp	r9, r2
 8001558:	d100      	bne.n	800155c <__aeabi_dadd+0x2f0>
 800155a:	e10f      	b.n	800177c <__aeabi_dadd+0x510>
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	4310      	orrs	r0, r2
 8001562:	4662      	mov	r2, ip
 8001564:	2a38      	cmp	r2, #56	; 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_dadd+0x2fe>
 8001568:	e10f      	b.n	800178a <__aeabi_dadd+0x51e>
 800156a:	2a1f      	cmp	r2, #31
 800156c:	dd00      	ble.n	8001570 <__aeabi_dadd+0x304>
 800156e:	e180      	b.n	8001872 <__aeabi_dadd+0x606>
 8001570:	4664      	mov	r4, ip
 8001572:	2220      	movs	r2, #32
 8001574:	001e      	movs	r6, r3
 8001576:	1b12      	subs	r2, r2, r4
 8001578:	4667      	mov	r7, ip
 800157a:	0004      	movs	r4, r0
 800157c:	4093      	lsls	r3, r2
 800157e:	4094      	lsls	r4, r2
 8001580:	40fe      	lsrs	r6, r7
 8001582:	1e5a      	subs	r2, r3, #1
 8001584:	4193      	sbcs	r3, r2
 8001586:	40f8      	lsrs	r0, r7
 8001588:	4334      	orrs	r4, r6
 800158a:	431c      	orrs	r4, r3
 800158c:	4480      	add	r8, r0
 800158e:	1864      	adds	r4, r4, r1
 8001590:	428c      	cmp	r4, r1
 8001592:	41bf      	sbcs	r7, r7
 8001594:	427f      	negs	r7, r7
 8001596:	464e      	mov	r6, r9
 8001598:	4447      	add	r7, r8
 800159a:	e7a6      	b.n	80014ea <__aeabi_dadd+0x27e>
 800159c:	4642      	mov	r2, r8
 800159e:	430a      	orrs	r2, r1
 80015a0:	0011      	movs	r1, r2
 80015a2:	1e4a      	subs	r2, r1, #1
 80015a4:	4191      	sbcs	r1, r2
 80015a6:	e6ad      	b.n	8001304 <__aeabi_dadd+0x98>
 80015a8:	4c0c      	ldr	r4, [pc, #48]	; (80015dc <__aeabi_dadd+0x370>)
 80015aa:	1c72      	adds	r2, r6, #1
 80015ac:	4222      	tst	r2, r4
 80015ae:	d000      	beq.n	80015b2 <__aeabi_dadd+0x346>
 80015b0:	e0a1      	b.n	80016f6 <__aeabi_dadd+0x48a>
 80015b2:	0002      	movs	r2, r0
 80015b4:	431a      	orrs	r2, r3
 80015b6:	2e00      	cmp	r6, #0
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x350>
 80015ba:	e0fa      	b.n	80017b2 <__aeabi_dadd+0x546>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x356>
 80015c0:	e145      	b.n	800184e <__aeabi_dadd+0x5e2>
 80015c2:	003a      	movs	r2, r7
 80015c4:	430a      	orrs	r2, r1
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x35e>
 80015c8:	e146      	b.n	8001858 <__aeabi_dadd+0x5ec>
 80015ca:	0742      	lsls	r2, r0, #29
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	08c0      	lsrs	r0, r0, #3
 80015d2:	e77b      	b.n	80014cc <__aeabi_dadd+0x260>
 80015d4:	000007ff 	.word	0x000007ff
 80015d8:	ff7fffff 	.word	0xff7fffff
 80015dc:	000007fe 	.word	0x000007fe
 80015e0:	4647      	mov	r7, r8
 80015e2:	1a5c      	subs	r4, r3, r1
 80015e4:	1bc2      	subs	r2, r0, r7
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	41bf      	sbcs	r7, r7
 80015ea:	427f      	negs	r7, r7
 80015ec:	46b9      	mov	r9, r7
 80015ee:	0017      	movs	r7, r2
 80015f0:	464a      	mov	r2, r9
 80015f2:	1abf      	subs	r7, r7, r2
 80015f4:	023a      	lsls	r2, r7, #8
 80015f6:	d500      	bpl.n	80015fa <__aeabi_dadd+0x38e>
 80015f8:	e08d      	b.n	8001716 <__aeabi_dadd+0x4aa>
 80015fa:	0023      	movs	r3, r4
 80015fc:	433b      	orrs	r3, r7
 80015fe:	d000      	beq.n	8001602 <__aeabi_dadd+0x396>
 8001600:	e68a      	b.n	8001318 <__aeabi_dadd+0xac>
 8001602:	2000      	movs	r0, #0
 8001604:	2500      	movs	r5, #0
 8001606:	e761      	b.n	80014cc <__aeabi_dadd+0x260>
 8001608:	4cb4      	ldr	r4, [pc, #720]	; (80018dc <__aeabi_dadd+0x670>)
 800160a:	45a1      	cmp	r9, r4
 800160c:	d100      	bne.n	8001610 <__aeabi_dadd+0x3a4>
 800160e:	e0ad      	b.n	800176c <__aeabi_dadd+0x500>
 8001610:	2480      	movs	r4, #128	; 0x80
 8001612:	0424      	lsls	r4, r4, #16
 8001614:	4320      	orrs	r0, r4
 8001616:	4664      	mov	r4, ip
 8001618:	2c38      	cmp	r4, #56	; 0x38
 800161a:	dc3d      	bgt.n	8001698 <__aeabi_dadd+0x42c>
 800161c:	4662      	mov	r2, ip
 800161e:	2c1f      	cmp	r4, #31
 8001620:	dd00      	ble.n	8001624 <__aeabi_dadd+0x3b8>
 8001622:	e0b7      	b.n	8001794 <__aeabi_dadd+0x528>
 8001624:	2520      	movs	r5, #32
 8001626:	001e      	movs	r6, r3
 8001628:	1b2d      	subs	r5, r5, r4
 800162a:	0004      	movs	r4, r0
 800162c:	40ab      	lsls	r3, r5
 800162e:	40ac      	lsls	r4, r5
 8001630:	40d6      	lsrs	r6, r2
 8001632:	40d0      	lsrs	r0, r2
 8001634:	4642      	mov	r2, r8
 8001636:	1e5d      	subs	r5, r3, #1
 8001638:	41ab      	sbcs	r3, r5
 800163a:	4334      	orrs	r4, r6
 800163c:	1a12      	subs	r2, r2, r0
 800163e:	4690      	mov	r8, r2
 8001640:	4323      	orrs	r3, r4
 8001642:	e02c      	b.n	800169e <__aeabi_dadd+0x432>
 8001644:	0742      	lsls	r2, r0, #29
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	4313      	orrs	r3, r2
 800164a:	08c0      	lsrs	r0, r0, #3
 800164c:	e73b      	b.n	80014c6 <__aeabi_dadd+0x25a>
 800164e:	185c      	adds	r4, r3, r1
 8001650:	429c      	cmp	r4, r3
 8001652:	419b      	sbcs	r3, r3
 8001654:	4440      	add	r0, r8
 8001656:	425b      	negs	r3, r3
 8001658:	18c7      	adds	r7, r0, r3
 800165a:	2601      	movs	r6, #1
 800165c:	023b      	lsls	r3, r7, #8
 800165e:	d400      	bmi.n	8001662 <__aeabi_dadd+0x3f6>
 8001660:	e729      	b.n	80014b6 <__aeabi_dadd+0x24a>
 8001662:	2602      	movs	r6, #2
 8001664:	4a9e      	ldr	r2, [pc, #632]	; (80018e0 <__aeabi_dadd+0x674>)
 8001666:	0863      	lsrs	r3, r4, #1
 8001668:	4017      	ands	r7, r2
 800166a:	2201      	movs	r2, #1
 800166c:	4014      	ands	r4, r2
 800166e:	431c      	orrs	r4, r3
 8001670:	07fb      	lsls	r3, r7, #31
 8001672:	431c      	orrs	r4, r3
 8001674:	087f      	lsrs	r7, r7, #1
 8001676:	e673      	b.n	8001360 <__aeabi_dadd+0xf4>
 8001678:	4644      	mov	r4, r8
 800167a:	3a20      	subs	r2, #32
 800167c:	40d4      	lsrs	r4, r2
 800167e:	4662      	mov	r2, ip
 8001680:	2a20      	cmp	r2, #32
 8001682:	d005      	beq.n	8001690 <__aeabi_dadd+0x424>
 8001684:	4667      	mov	r7, ip
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	1bd2      	subs	r2, r2, r7
 800168a:	4647      	mov	r7, r8
 800168c:	4097      	lsls	r7, r2
 800168e:	4339      	orrs	r1, r7
 8001690:	1e4a      	subs	r2, r1, #1
 8001692:	4191      	sbcs	r1, r2
 8001694:	4321      	orrs	r1, r4
 8001696:	e635      	b.n	8001304 <__aeabi_dadd+0x98>
 8001698:	4303      	orrs	r3, r0
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	4183      	sbcs	r3, r0
 800169e:	1acc      	subs	r4, r1, r3
 80016a0:	42a1      	cmp	r1, r4
 80016a2:	41bf      	sbcs	r7, r7
 80016a4:	4643      	mov	r3, r8
 80016a6:	427f      	negs	r7, r7
 80016a8:	4655      	mov	r5, sl
 80016aa:	464e      	mov	r6, r9
 80016ac:	1bdf      	subs	r7, r3, r7
 80016ae:	e62e      	b.n	800130e <__aeabi_dadd+0xa2>
 80016b0:	0002      	movs	r2, r0
 80016b2:	431a      	orrs	r2, r3
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x44c>
 80016b6:	e0bd      	b.n	8001834 <__aeabi_dadd+0x5c8>
 80016b8:	4662      	mov	r2, ip
 80016ba:	4664      	mov	r4, ip
 80016bc:	3a01      	subs	r2, #1
 80016be:	2c01      	cmp	r4, #1
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x458>
 80016c2:	e0e5      	b.n	8001890 <__aeabi_dadd+0x624>
 80016c4:	4c85      	ldr	r4, [pc, #532]	; (80018dc <__aeabi_dadd+0x670>)
 80016c6:	45a4      	cmp	ip, r4
 80016c8:	d058      	beq.n	800177c <__aeabi_dadd+0x510>
 80016ca:	4694      	mov	ip, r2
 80016cc:	e749      	b.n	8001562 <__aeabi_dadd+0x2f6>
 80016ce:	4664      	mov	r4, ip
 80016d0:	2220      	movs	r2, #32
 80016d2:	1b12      	subs	r2, r2, r4
 80016d4:	4644      	mov	r4, r8
 80016d6:	4094      	lsls	r4, r2
 80016d8:	000f      	movs	r7, r1
 80016da:	46a1      	mov	r9, r4
 80016dc:	4664      	mov	r4, ip
 80016de:	4091      	lsls	r1, r2
 80016e0:	40e7      	lsrs	r7, r4
 80016e2:	464c      	mov	r4, r9
 80016e4:	1e4a      	subs	r2, r1, #1
 80016e6:	4191      	sbcs	r1, r2
 80016e8:	433c      	orrs	r4, r7
 80016ea:	4642      	mov	r2, r8
 80016ec:	430c      	orrs	r4, r1
 80016ee:	4661      	mov	r1, ip
 80016f0:	40ca      	lsrs	r2, r1
 80016f2:	1880      	adds	r0, r0, r2
 80016f4:	e6f4      	b.n	80014e0 <__aeabi_dadd+0x274>
 80016f6:	4c79      	ldr	r4, [pc, #484]	; (80018dc <__aeabi_dadd+0x670>)
 80016f8:	42a2      	cmp	r2, r4
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x492>
 80016fc:	e6fd      	b.n	80014fa <__aeabi_dadd+0x28e>
 80016fe:	1859      	adds	r1, r3, r1
 8001700:	4299      	cmp	r1, r3
 8001702:	419b      	sbcs	r3, r3
 8001704:	4440      	add	r0, r8
 8001706:	425f      	negs	r7, r3
 8001708:	19c7      	adds	r7, r0, r7
 800170a:	07fc      	lsls	r4, r7, #31
 800170c:	0849      	lsrs	r1, r1, #1
 800170e:	0016      	movs	r6, r2
 8001710:	430c      	orrs	r4, r1
 8001712:	087f      	lsrs	r7, r7, #1
 8001714:	e6cf      	b.n	80014b6 <__aeabi_dadd+0x24a>
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	1a18      	subs	r0, r3, r0
 8001722:	4655      	mov	r5, sl
 8001724:	1bc7      	subs	r7, r0, r7
 8001726:	e5f7      	b.n	8001318 <__aeabi_dadd+0xac>
 8001728:	08c9      	lsrs	r1, r1, #3
 800172a:	077b      	lsls	r3, r7, #29
 800172c:	4655      	mov	r5, sl
 800172e:	430b      	orrs	r3, r1
 8001730:	08f8      	lsrs	r0, r7, #3
 8001732:	e6c8      	b.n	80014c6 <__aeabi_dadd+0x25a>
 8001734:	2c00      	cmp	r4, #0
 8001736:	d000      	beq.n	800173a <__aeabi_dadd+0x4ce>
 8001738:	e081      	b.n	800183e <__aeabi_dadd+0x5d2>
 800173a:	4643      	mov	r3, r8
 800173c:	430b      	orrs	r3, r1
 800173e:	d115      	bne.n	800176c <__aeabi_dadd+0x500>
 8001740:	2080      	movs	r0, #128	; 0x80
 8001742:	2500      	movs	r5, #0
 8001744:	0300      	lsls	r0, r0, #12
 8001746:	e6e3      	b.n	8001510 <__aeabi_dadd+0x2a4>
 8001748:	1a5c      	subs	r4, r3, r1
 800174a:	42a3      	cmp	r3, r4
 800174c:	419b      	sbcs	r3, r3
 800174e:	1bc7      	subs	r7, r0, r7
 8001750:	425b      	negs	r3, r3
 8001752:	2601      	movs	r6, #1
 8001754:	1aff      	subs	r7, r7, r3
 8001756:	e5da      	b.n	800130e <__aeabi_dadd+0xa2>
 8001758:	0742      	lsls	r2, r0, #29
 800175a:	08db      	lsrs	r3, r3, #3
 800175c:	4313      	orrs	r3, r2
 800175e:	08c0      	lsrs	r0, r0, #3
 8001760:	e6d2      	b.n	8001508 <__aeabi_dadd+0x29c>
 8001762:	0742      	lsls	r2, r0, #29
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	4313      	orrs	r3, r2
 8001768:	08c0      	lsrs	r0, r0, #3
 800176a:	e6ac      	b.n	80014c6 <__aeabi_dadd+0x25a>
 800176c:	4643      	mov	r3, r8
 800176e:	4642      	mov	r2, r8
 8001770:	08c9      	lsrs	r1, r1, #3
 8001772:	075b      	lsls	r3, r3, #29
 8001774:	4655      	mov	r5, sl
 8001776:	430b      	orrs	r3, r1
 8001778:	08d0      	lsrs	r0, r2, #3
 800177a:	e6c5      	b.n	8001508 <__aeabi_dadd+0x29c>
 800177c:	4643      	mov	r3, r8
 800177e:	4642      	mov	r2, r8
 8001780:	075b      	lsls	r3, r3, #29
 8001782:	08c9      	lsrs	r1, r1, #3
 8001784:	430b      	orrs	r3, r1
 8001786:	08d0      	lsrs	r0, r2, #3
 8001788:	e6be      	b.n	8001508 <__aeabi_dadd+0x29c>
 800178a:	4303      	orrs	r3, r0
 800178c:	001c      	movs	r4, r3
 800178e:	1e63      	subs	r3, r4, #1
 8001790:	419c      	sbcs	r4, r3
 8001792:	e6fc      	b.n	800158e <__aeabi_dadd+0x322>
 8001794:	0002      	movs	r2, r0
 8001796:	3c20      	subs	r4, #32
 8001798:	40e2      	lsrs	r2, r4
 800179a:	0014      	movs	r4, r2
 800179c:	4662      	mov	r2, ip
 800179e:	2a20      	cmp	r2, #32
 80017a0:	d003      	beq.n	80017aa <__aeabi_dadd+0x53e>
 80017a2:	2540      	movs	r5, #64	; 0x40
 80017a4:	1aad      	subs	r5, r5, r2
 80017a6:	40a8      	lsls	r0, r5
 80017a8:	4303      	orrs	r3, r0
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	4183      	sbcs	r3, r0
 80017ae:	4323      	orrs	r3, r4
 80017b0:	e775      	b.n	800169e <__aeabi_dadd+0x432>
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d0e2      	beq.n	800177c <__aeabi_dadd+0x510>
 80017b6:	003a      	movs	r2, r7
 80017b8:	430a      	orrs	r2, r1
 80017ba:	d0cd      	beq.n	8001758 <__aeabi_dadd+0x4ec>
 80017bc:	0742      	lsls	r2, r0, #29
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	08c0      	lsrs	r0, r0, #3
 80017c6:	0312      	lsls	r2, r2, #12
 80017c8:	4210      	tst	r0, r2
 80017ca:	d006      	beq.n	80017da <__aeabi_dadd+0x56e>
 80017cc:	08fc      	lsrs	r4, r7, #3
 80017ce:	4214      	tst	r4, r2
 80017d0:	d103      	bne.n	80017da <__aeabi_dadd+0x56e>
 80017d2:	0020      	movs	r0, r4
 80017d4:	08cb      	lsrs	r3, r1, #3
 80017d6:	077a      	lsls	r2, r7, #29
 80017d8:	4313      	orrs	r3, r2
 80017da:	0f5a      	lsrs	r2, r3, #29
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	0752      	lsls	r2, r2, #29
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	e690      	b.n	8001508 <__aeabi_dadd+0x29c>
 80017e6:	4643      	mov	r3, r8
 80017e8:	430b      	orrs	r3, r1
 80017ea:	d100      	bne.n	80017ee <__aeabi_dadd+0x582>
 80017ec:	e709      	b.n	8001602 <__aeabi_dadd+0x396>
 80017ee:	4643      	mov	r3, r8
 80017f0:	4642      	mov	r2, r8
 80017f2:	08c9      	lsrs	r1, r1, #3
 80017f4:	075b      	lsls	r3, r3, #29
 80017f6:	4655      	mov	r5, sl
 80017f8:	430b      	orrs	r3, r1
 80017fa:	08d0      	lsrs	r0, r2, #3
 80017fc:	e666      	b.n	80014cc <__aeabi_dadd+0x260>
 80017fe:	1acc      	subs	r4, r1, r3
 8001800:	42a1      	cmp	r1, r4
 8001802:	4189      	sbcs	r1, r1
 8001804:	1a3f      	subs	r7, r7, r0
 8001806:	4249      	negs	r1, r1
 8001808:	4655      	mov	r5, sl
 800180a:	2601      	movs	r6, #1
 800180c:	1a7f      	subs	r7, r7, r1
 800180e:	e57e      	b.n	800130e <__aeabi_dadd+0xa2>
 8001810:	4642      	mov	r2, r8
 8001812:	1a5c      	subs	r4, r3, r1
 8001814:	1a87      	subs	r7, r0, r2
 8001816:	42a3      	cmp	r3, r4
 8001818:	4192      	sbcs	r2, r2
 800181a:	4252      	negs	r2, r2
 800181c:	1abf      	subs	r7, r7, r2
 800181e:	023a      	lsls	r2, r7, #8
 8001820:	d53d      	bpl.n	800189e <__aeabi_dadd+0x632>
 8001822:	1acc      	subs	r4, r1, r3
 8001824:	42a1      	cmp	r1, r4
 8001826:	4189      	sbcs	r1, r1
 8001828:	4643      	mov	r3, r8
 800182a:	4249      	negs	r1, r1
 800182c:	1a1f      	subs	r7, r3, r0
 800182e:	4655      	mov	r5, sl
 8001830:	1a7f      	subs	r7, r7, r1
 8001832:	e595      	b.n	8001360 <__aeabi_dadd+0xf4>
 8001834:	077b      	lsls	r3, r7, #29
 8001836:	08c9      	lsrs	r1, r1, #3
 8001838:	430b      	orrs	r3, r1
 800183a:	08f8      	lsrs	r0, r7, #3
 800183c:	e643      	b.n	80014c6 <__aeabi_dadd+0x25a>
 800183e:	4644      	mov	r4, r8
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	430c      	orrs	r4, r1
 8001844:	d130      	bne.n	80018a8 <__aeabi_dadd+0x63c>
 8001846:	0742      	lsls	r2, r0, #29
 8001848:	4313      	orrs	r3, r2
 800184a:	08c0      	lsrs	r0, r0, #3
 800184c:	e65c      	b.n	8001508 <__aeabi_dadd+0x29c>
 800184e:	077b      	lsls	r3, r7, #29
 8001850:	08c9      	lsrs	r1, r1, #3
 8001852:	430b      	orrs	r3, r1
 8001854:	08f8      	lsrs	r0, r7, #3
 8001856:	e639      	b.n	80014cc <__aeabi_dadd+0x260>
 8001858:	185c      	adds	r4, r3, r1
 800185a:	429c      	cmp	r4, r3
 800185c:	419b      	sbcs	r3, r3
 800185e:	4440      	add	r0, r8
 8001860:	425b      	negs	r3, r3
 8001862:	18c7      	adds	r7, r0, r3
 8001864:	023b      	lsls	r3, r7, #8
 8001866:	d400      	bmi.n	800186a <__aeabi_dadd+0x5fe>
 8001868:	e625      	b.n	80014b6 <__aeabi_dadd+0x24a>
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <__aeabi_dadd+0x674>)
 800186c:	2601      	movs	r6, #1
 800186e:	401f      	ands	r7, r3
 8001870:	e621      	b.n	80014b6 <__aeabi_dadd+0x24a>
 8001872:	0004      	movs	r4, r0
 8001874:	3a20      	subs	r2, #32
 8001876:	40d4      	lsrs	r4, r2
 8001878:	4662      	mov	r2, ip
 800187a:	2a20      	cmp	r2, #32
 800187c:	d004      	beq.n	8001888 <__aeabi_dadd+0x61c>
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	4666      	mov	r6, ip
 8001882:	1b92      	subs	r2, r2, r6
 8001884:	4090      	lsls	r0, r2
 8001886:	4303      	orrs	r3, r0
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	4193      	sbcs	r3, r2
 800188c:	431c      	orrs	r4, r3
 800188e:	e67e      	b.n	800158e <__aeabi_dadd+0x322>
 8001890:	185c      	adds	r4, r3, r1
 8001892:	428c      	cmp	r4, r1
 8001894:	4189      	sbcs	r1, r1
 8001896:	4440      	add	r0, r8
 8001898:	4249      	negs	r1, r1
 800189a:	1847      	adds	r7, r0, r1
 800189c:	e6dd      	b.n	800165a <__aeabi_dadd+0x3ee>
 800189e:	0023      	movs	r3, r4
 80018a0:	433b      	orrs	r3, r7
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x63a>
 80018a4:	e6ad      	b.n	8001602 <__aeabi_dadd+0x396>
 80018a6:	e606      	b.n	80014b6 <__aeabi_dadd+0x24a>
 80018a8:	0744      	lsls	r4, r0, #29
 80018aa:	4323      	orrs	r3, r4
 80018ac:	2480      	movs	r4, #128	; 0x80
 80018ae:	08c0      	lsrs	r0, r0, #3
 80018b0:	0324      	lsls	r4, r4, #12
 80018b2:	4220      	tst	r0, r4
 80018b4:	d008      	beq.n	80018c8 <__aeabi_dadd+0x65c>
 80018b6:	4642      	mov	r2, r8
 80018b8:	08d6      	lsrs	r6, r2, #3
 80018ba:	4226      	tst	r6, r4
 80018bc:	d104      	bne.n	80018c8 <__aeabi_dadd+0x65c>
 80018be:	4655      	mov	r5, sl
 80018c0:	0030      	movs	r0, r6
 80018c2:	08cb      	lsrs	r3, r1, #3
 80018c4:	0751      	lsls	r1, r2, #29
 80018c6:	430b      	orrs	r3, r1
 80018c8:	0f5a      	lsrs	r2, r3, #29
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	0752      	lsls	r2, r2, #29
 80018d0:	4313      	orrs	r3, r2
 80018d2:	e619      	b.n	8001508 <__aeabi_dadd+0x29c>
 80018d4:	2300      	movs	r3, #0
 80018d6:	4a01      	ldr	r2, [pc, #4]	; (80018dc <__aeabi_dadd+0x670>)
 80018d8:	001f      	movs	r7, r3
 80018da:	e55e      	b.n	800139a <__aeabi_dadd+0x12e>
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	ff7fffff 	.word	0xff7fffff

080018e4 <__aeabi_ddiv>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	4645      	mov	r5, r8
 80018ec:	46de      	mov	lr, fp
 80018ee:	b5e0      	push	{r5, r6, r7, lr}
 80018f0:	4681      	mov	r9, r0
 80018f2:	0005      	movs	r5, r0
 80018f4:	030c      	lsls	r4, r1, #12
 80018f6:	0048      	lsls	r0, r1, #1
 80018f8:	4692      	mov	sl, r2
 80018fa:	001f      	movs	r7, r3
 80018fc:	b085      	sub	sp, #20
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	0d40      	lsrs	r0, r0, #21
 8001902:	0fce      	lsrs	r6, r1, #31
 8001904:	2800      	cmp	r0, #0
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0x26>
 8001908:	e156      	b.n	8001bb8 <__aeabi_ddiv+0x2d4>
 800190a:	4bd4      	ldr	r3, [pc, #848]	; (8001c5c <__aeabi_ddiv+0x378>)
 800190c:	4298      	cmp	r0, r3
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x2e>
 8001910:	e172      	b.n	8001bf8 <__aeabi_ddiv+0x314>
 8001912:	0f6b      	lsrs	r3, r5, #29
 8001914:	00e4      	lsls	r4, r4, #3
 8001916:	431c      	orrs	r4, r3
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	4323      	orrs	r3, r4
 800191e:	4698      	mov	r8, r3
 8001920:	4bcf      	ldr	r3, [pc, #828]	; (8001c60 <__aeabi_ddiv+0x37c>)
 8001922:	00ed      	lsls	r5, r5, #3
 8001924:	469b      	mov	fp, r3
 8001926:	2300      	movs	r3, #0
 8001928:	4699      	mov	r9, r3
 800192a:	4483      	add	fp, r0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	033c      	lsls	r4, r7, #12
 8001930:	007b      	lsls	r3, r7, #1
 8001932:	4650      	mov	r0, sl
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	0d5b      	lsrs	r3, r3, #21
 8001938:	0fff      	lsrs	r7, r7, #31
 800193a:	2b00      	cmp	r3, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_ddiv+0x5c>
 800193e:	e11f      	b.n	8001b80 <__aeabi_ddiv+0x29c>
 8001940:	4ac6      	ldr	r2, [pc, #792]	; (8001c5c <__aeabi_ddiv+0x378>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d100      	bne.n	8001948 <__aeabi_ddiv+0x64>
 8001946:	e162      	b.n	8001c0e <__aeabi_ddiv+0x32a>
 8001948:	49c5      	ldr	r1, [pc, #788]	; (8001c60 <__aeabi_ddiv+0x37c>)
 800194a:	0f42      	lsrs	r2, r0, #29
 800194c:	468c      	mov	ip, r1
 800194e:	00e4      	lsls	r4, r4, #3
 8001950:	4659      	mov	r1, fp
 8001952:	4314      	orrs	r4, r2
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	4463      	add	r3, ip
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	4314      	orrs	r4, r2
 800195e:	469b      	mov	fp, r3
 8001960:	00c2      	lsls	r2, r0, #3
 8001962:	2000      	movs	r0, #0
 8001964:	0033      	movs	r3, r6
 8001966:	407b      	eors	r3, r7
 8001968:	469a      	mov	sl, r3
 800196a:	464b      	mov	r3, r9
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d827      	bhi.n	80019c0 <__aeabi_ddiv+0xdc>
 8001970:	49bc      	ldr	r1, [pc, #752]	; (8001c64 <__aeabi_ddiv+0x380>)
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	58cb      	ldr	r3, [r1, r3]
 8001976:	469f      	mov	pc, r3
 8001978:	46b2      	mov	sl, r6
 800197a:	9b00      	ldr	r3, [sp, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d016      	beq.n	80019ae <__aeabi_ddiv+0xca>
 8001980:	2b03      	cmp	r3, #3
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0xa2>
 8001984:	e28e      	b.n	8001ea4 <__aeabi_ddiv+0x5c0>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d000      	beq.n	800198c <__aeabi_ddiv+0xa8>
 800198a:	e0d9      	b.n	8001b40 <__aeabi_ddiv+0x25c>
 800198c:	2300      	movs	r3, #0
 800198e:	2400      	movs	r4, #0
 8001990:	2500      	movs	r5, #0
 8001992:	4652      	mov	r2, sl
 8001994:	051b      	lsls	r3, r3, #20
 8001996:	4323      	orrs	r3, r4
 8001998:	07d2      	lsls	r2, r2, #31
 800199a:	4313      	orrs	r3, r2
 800199c:	0028      	movs	r0, r5
 800199e:	0019      	movs	r1, r3
 80019a0:	b005      	add	sp, #20
 80019a2:	bcf0      	pop	{r4, r5, r6, r7}
 80019a4:	46bb      	mov	fp, r7
 80019a6:	46b2      	mov	sl, r6
 80019a8:	46a9      	mov	r9, r5
 80019aa:	46a0      	mov	r8, r4
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	2400      	movs	r4, #0
 80019b0:	2500      	movs	r5, #0
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <__aeabi_ddiv+0x378>)
 80019b4:	e7ed      	b.n	8001992 <__aeabi_ddiv+0xae>
 80019b6:	46ba      	mov	sl, r7
 80019b8:	46a0      	mov	r8, r4
 80019ba:	0015      	movs	r5, r2
 80019bc:	9000      	str	r0, [sp, #0]
 80019be:	e7dc      	b.n	800197a <__aeabi_ddiv+0x96>
 80019c0:	4544      	cmp	r4, r8
 80019c2:	d200      	bcs.n	80019c6 <__aeabi_ddiv+0xe2>
 80019c4:	e1c7      	b.n	8001d56 <__aeabi_ddiv+0x472>
 80019c6:	d100      	bne.n	80019ca <__aeabi_ddiv+0xe6>
 80019c8:	e1c2      	b.n	8001d50 <__aeabi_ddiv+0x46c>
 80019ca:	2301      	movs	r3, #1
 80019cc:	425b      	negs	r3, r3
 80019ce:	469c      	mov	ip, r3
 80019d0:	002e      	movs	r6, r5
 80019d2:	4640      	mov	r0, r8
 80019d4:	2500      	movs	r5, #0
 80019d6:	44e3      	add	fp, ip
 80019d8:	0223      	lsls	r3, r4, #8
 80019da:	0e14      	lsrs	r4, r2, #24
 80019dc:	431c      	orrs	r4, r3
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	4699      	mov	r9, r3
 80019e2:	0423      	lsls	r3, r4, #16
 80019e4:	0c1f      	lsrs	r7, r3, #16
 80019e6:	0212      	lsls	r2, r2, #8
 80019e8:	4649      	mov	r1, r9
 80019ea:	9200      	str	r2, [sp, #0]
 80019ec:	9701      	str	r7, [sp, #4]
 80019ee:	f7fe fc35 	bl	800025c <__aeabi_uidivmod>
 80019f2:	0002      	movs	r2, r0
 80019f4:	437a      	muls	r2, r7
 80019f6:	040b      	lsls	r3, r1, #16
 80019f8:	0c31      	lsrs	r1, r6, #16
 80019fa:	4680      	mov	r8, r0
 80019fc:	4319      	orrs	r1, r3
 80019fe:	428a      	cmp	r2, r1
 8001a00:	d907      	bls.n	8001a12 <__aeabi_ddiv+0x12e>
 8001a02:	2301      	movs	r3, #1
 8001a04:	425b      	negs	r3, r3
 8001a06:	469c      	mov	ip, r3
 8001a08:	1909      	adds	r1, r1, r4
 8001a0a:	44e0      	add	r8, ip
 8001a0c:	428c      	cmp	r4, r1
 8001a0e:	d800      	bhi.n	8001a12 <__aeabi_ddiv+0x12e>
 8001a10:	e207      	b.n	8001e22 <__aeabi_ddiv+0x53e>
 8001a12:	1a88      	subs	r0, r1, r2
 8001a14:	4649      	mov	r1, r9
 8001a16:	f7fe fc21 	bl	800025c <__aeabi_uidivmod>
 8001a1a:	0409      	lsls	r1, r1, #16
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	0431      	lsls	r1, r6, #16
 8001a20:	4666      	mov	r6, ip
 8001a22:	9a01      	ldr	r2, [sp, #4]
 8001a24:	0c09      	lsrs	r1, r1, #16
 8001a26:	4342      	muls	r2, r0
 8001a28:	0003      	movs	r3, r0
 8001a2a:	4331      	orrs	r1, r6
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d904      	bls.n	8001a3a <__aeabi_ddiv+0x156>
 8001a30:	1909      	adds	r1, r1, r4
 8001a32:	3b01      	subs	r3, #1
 8001a34:	428c      	cmp	r4, r1
 8001a36:	d800      	bhi.n	8001a3a <__aeabi_ddiv+0x156>
 8001a38:	e1ed      	b.n	8001e16 <__aeabi_ddiv+0x532>
 8001a3a:	1a88      	subs	r0, r1, r2
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	0412      	lsls	r2, r2, #16
 8001a40:	431a      	orrs	r2, r3
 8001a42:	4690      	mov	r8, r2
 8001a44:	4641      	mov	r1, r8
 8001a46:	9b00      	ldr	r3, [sp, #0]
 8001a48:	040e      	lsls	r6, r1, #16
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	001f      	movs	r7, r3
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	9b00      	ldr	r3, [sp, #0]
 8001a52:	0c36      	lsrs	r6, r6, #16
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	0c19      	lsrs	r1, r3, #16
 8001a58:	000b      	movs	r3, r1
 8001a5a:	4373      	muls	r3, r6
 8001a5c:	0c12      	lsrs	r2, r2, #16
 8001a5e:	437e      	muls	r6, r7
 8001a60:	9103      	str	r1, [sp, #12]
 8001a62:	4351      	muls	r1, r2
 8001a64:	437a      	muls	r2, r7
 8001a66:	0c1f      	lsrs	r7, r3, #16
 8001a68:	46bc      	mov	ip, r7
 8001a6a:	1876      	adds	r6, r6, r1
 8001a6c:	4466      	add	r6, ip
 8001a6e:	42b1      	cmp	r1, r6
 8001a70:	d903      	bls.n	8001a7a <__aeabi_ddiv+0x196>
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0249      	lsls	r1, r1, #9
 8001a76:	468c      	mov	ip, r1
 8001a78:	4462      	add	r2, ip
 8001a7a:	0c31      	lsrs	r1, r6, #16
 8001a7c:	188a      	adds	r2, r1, r2
 8001a7e:	0431      	lsls	r1, r6, #16
 8001a80:	041e      	lsls	r6, r3, #16
 8001a82:	0c36      	lsrs	r6, r6, #16
 8001a84:	198e      	adds	r6, r1, r6
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d302      	bcc.n	8001a90 <__aeabi_ddiv+0x1ac>
 8001a8a:	d112      	bne.n	8001ab2 <__aeabi_ddiv+0x1ce>
 8001a8c:	42b5      	cmp	r5, r6
 8001a8e:	d210      	bcs.n	8001ab2 <__aeabi_ddiv+0x1ce>
 8001a90:	4643      	mov	r3, r8
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	469c      	mov	ip, r3
 8001a98:	4465      	add	r5, ip
 8001a9a:	001f      	movs	r7, r3
 8001a9c:	429d      	cmp	r5, r3
 8001a9e:	419b      	sbcs	r3, r3
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	191b      	adds	r3, r3, r4
 8001aa4:	18c0      	adds	r0, r0, r3
 8001aa6:	4284      	cmp	r4, r0
 8001aa8:	d200      	bcs.n	8001aac <__aeabi_ddiv+0x1c8>
 8001aaa:	e1a0      	b.n	8001dee <__aeabi_ddiv+0x50a>
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_ddiv+0x1cc>
 8001aae:	e19b      	b.n	8001de8 <__aeabi_ddiv+0x504>
 8001ab0:	4688      	mov	r8, r1
 8001ab2:	1bae      	subs	r6, r5, r6
 8001ab4:	42b5      	cmp	r5, r6
 8001ab6:	41ad      	sbcs	r5, r5
 8001ab8:	1a80      	subs	r0, r0, r2
 8001aba:	426d      	negs	r5, r5
 8001abc:	1b40      	subs	r0, r0, r5
 8001abe:	4284      	cmp	r4, r0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x1e0>
 8001ac2:	e1d5      	b.n	8001e70 <__aeabi_ddiv+0x58c>
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	f7fe fbc9 	bl	800025c <__aeabi_uidivmod>
 8001aca:	9a01      	ldr	r2, [sp, #4]
 8001acc:	040b      	lsls	r3, r1, #16
 8001ace:	4342      	muls	r2, r0
 8001ad0:	0c31      	lsrs	r1, r6, #16
 8001ad2:	0005      	movs	r5, r0
 8001ad4:	4319      	orrs	r1, r3
 8001ad6:	428a      	cmp	r2, r1
 8001ad8:	d900      	bls.n	8001adc <__aeabi_ddiv+0x1f8>
 8001ada:	e16c      	b.n	8001db6 <__aeabi_ddiv+0x4d2>
 8001adc:	1a88      	subs	r0, r1, r2
 8001ade:	4649      	mov	r1, r9
 8001ae0:	f7fe fbbc 	bl	800025c <__aeabi_uidivmod>
 8001ae4:	9a01      	ldr	r2, [sp, #4]
 8001ae6:	0436      	lsls	r6, r6, #16
 8001ae8:	4342      	muls	r2, r0
 8001aea:	0409      	lsls	r1, r1, #16
 8001aec:	0c36      	lsrs	r6, r6, #16
 8001aee:	0003      	movs	r3, r0
 8001af0:	430e      	orrs	r6, r1
 8001af2:	42b2      	cmp	r2, r6
 8001af4:	d900      	bls.n	8001af8 <__aeabi_ddiv+0x214>
 8001af6:	e153      	b.n	8001da0 <__aeabi_ddiv+0x4bc>
 8001af8:	9803      	ldr	r0, [sp, #12]
 8001afa:	1ab6      	subs	r6, r6, r2
 8001afc:	0002      	movs	r2, r0
 8001afe:	042d      	lsls	r5, r5, #16
 8001b00:	431d      	orrs	r5, r3
 8001b02:	9f02      	ldr	r7, [sp, #8]
 8001b04:	042b      	lsls	r3, r5, #16
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	435a      	muls	r2, r3
 8001b0a:	437b      	muls	r3, r7
 8001b0c:	469c      	mov	ip, r3
 8001b0e:	0c29      	lsrs	r1, r5, #16
 8001b10:	4348      	muls	r0, r1
 8001b12:	0c13      	lsrs	r3, r2, #16
 8001b14:	4484      	add	ip, r0
 8001b16:	4463      	add	r3, ip
 8001b18:	4379      	muls	r1, r7
 8001b1a:	4298      	cmp	r0, r3
 8001b1c:	d903      	bls.n	8001b26 <__aeabi_ddiv+0x242>
 8001b1e:	2080      	movs	r0, #128	; 0x80
 8001b20:	0240      	lsls	r0, r0, #9
 8001b22:	4684      	mov	ip, r0
 8001b24:	4461      	add	r1, ip
 8001b26:	0c18      	lsrs	r0, r3, #16
 8001b28:	0412      	lsls	r2, r2, #16
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	0c12      	lsrs	r2, r2, #16
 8001b2e:	1841      	adds	r1, r0, r1
 8001b30:	189b      	adds	r3, r3, r2
 8001b32:	428e      	cmp	r6, r1
 8001b34:	d200      	bcs.n	8001b38 <__aeabi_ddiv+0x254>
 8001b36:	e0ff      	b.n	8001d38 <__aeabi_ddiv+0x454>
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x258>
 8001b3a:	e0fa      	b.n	8001d32 <__aeabi_ddiv+0x44e>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	431d      	orrs	r5, r3
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <__aeabi_ddiv+0x384>)
 8001b42:	445a      	add	r2, fp
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_ddiv+0x266>
 8001b48:	e0aa      	b.n	8001ca0 <__aeabi_ddiv+0x3bc>
 8001b4a:	076b      	lsls	r3, r5, #29
 8001b4c:	d000      	beq.n	8001b50 <__aeabi_ddiv+0x26c>
 8001b4e:	e13d      	b.n	8001dcc <__aeabi_ddiv+0x4e8>
 8001b50:	08ed      	lsrs	r5, r5, #3
 8001b52:	4643      	mov	r3, r8
 8001b54:	01db      	lsls	r3, r3, #7
 8001b56:	d506      	bpl.n	8001b66 <__aeabi_ddiv+0x282>
 8001b58:	4642      	mov	r2, r8
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <__aeabi_ddiv+0x388>)
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	00d2      	lsls	r2, r2, #3
 8001b64:	445a      	add	r2, fp
 8001b66:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <__aeabi_ddiv+0x38c>)
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_ddiv+0x28a>
 8001b6c:	e71f      	b.n	80019ae <__aeabi_ddiv+0xca>
 8001b6e:	4643      	mov	r3, r8
 8001b70:	075b      	lsls	r3, r3, #29
 8001b72:	431d      	orrs	r5, r3
 8001b74:	4643      	mov	r3, r8
 8001b76:	0552      	lsls	r2, r2, #21
 8001b78:	025c      	lsls	r4, r3, #9
 8001b7a:	0b24      	lsrs	r4, r4, #12
 8001b7c:	0d53      	lsrs	r3, r2, #21
 8001b7e:	e708      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001b80:	4652      	mov	r2, sl
 8001b82:	4322      	orrs	r2, r4
 8001b84:	d100      	bne.n	8001b88 <__aeabi_ddiv+0x2a4>
 8001b86:	e07b      	b.n	8001c80 <__aeabi_ddiv+0x39c>
 8001b88:	2c00      	cmp	r4, #0
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_ddiv+0x2aa>
 8001b8c:	e0fa      	b.n	8001d84 <__aeabi_ddiv+0x4a0>
 8001b8e:	0020      	movs	r0, r4
 8001b90:	f001 fa22 	bl	8002fd8 <__clzsi2>
 8001b94:	0002      	movs	r2, r0
 8001b96:	3a0b      	subs	r2, #11
 8001b98:	231d      	movs	r3, #29
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	3908      	subs	r1, #8
 8001ba2:	40da      	lsrs	r2, r3
 8001ba4:	408c      	lsls	r4, r1
 8001ba6:	4314      	orrs	r4, r2
 8001ba8:	4652      	mov	r2, sl
 8001baa:	408a      	lsls	r2, r1
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <__aeabi_ddiv+0x390>)
 8001bae:	4458      	add	r0, fp
 8001bb0:	469b      	mov	fp, r3
 8001bb2:	4483      	add	fp, r0
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e6d5      	b.n	8001964 <__aeabi_ddiv+0x80>
 8001bb8:	464b      	mov	r3, r9
 8001bba:	4323      	orrs	r3, r4
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	d044      	beq.n	8001c4a <__aeabi_ddiv+0x366>
 8001bc0:	2c00      	cmp	r4, #0
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0x2e2>
 8001bc4:	e0ce      	b.n	8001d64 <__aeabi_ddiv+0x480>
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	f001 fa06 	bl	8002fd8 <__clzsi2>
 8001bcc:	0001      	movs	r1, r0
 8001bce:	0002      	movs	r2, r0
 8001bd0:	390b      	subs	r1, #11
 8001bd2:	231d      	movs	r3, #29
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	0010      	movs	r0, r2
 8001bda:	40d9      	lsrs	r1, r3
 8001bdc:	3808      	subs	r0, #8
 8001bde:	4084      	lsls	r4, r0
 8001be0:	000b      	movs	r3, r1
 8001be2:	464d      	mov	r5, r9
 8001be4:	4323      	orrs	r3, r4
 8001be6:	4698      	mov	r8, r3
 8001be8:	4085      	lsls	r5, r0
 8001bea:	4823      	ldr	r0, [pc, #140]	; (8001c78 <__aeabi_ddiv+0x394>)
 8001bec:	1a83      	subs	r3, r0, r2
 8001bee:	469b      	mov	fp, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	e69a      	b.n	800192e <__aeabi_ddiv+0x4a>
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	d11d      	bne.n	8001c3c <__aeabi_ddiv+0x358>
 8001c00:	2308      	movs	r3, #8
 8001c02:	4699      	mov	r9, r3
 8001c04:	3b06      	subs	r3, #6
 8001c06:	2500      	movs	r5, #0
 8001c08:	4683      	mov	fp, r0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	e68f      	b.n	800192e <__aeabi_ddiv+0x4a>
 8001c0e:	4652      	mov	r2, sl
 8001c10:	4322      	orrs	r2, r4
 8001c12:	d109      	bne.n	8001c28 <__aeabi_ddiv+0x344>
 8001c14:	2302      	movs	r3, #2
 8001c16:	4649      	mov	r1, r9
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <__aeabi_ddiv+0x398>)
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	469c      	mov	ip, r3
 8001c20:	2400      	movs	r4, #0
 8001c22:	2002      	movs	r0, #2
 8001c24:	44e3      	add	fp, ip
 8001c26:	e69d      	b.n	8001964 <__aeabi_ddiv+0x80>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <__aeabi_ddiv+0x398>)
 8001c30:	4691      	mov	r9, r2
 8001c32:	469c      	mov	ip, r3
 8001c34:	4652      	mov	r2, sl
 8001c36:	2003      	movs	r0, #3
 8001c38:	44e3      	add	fp, ip
 8001c3a:	e693      	b.n	8001964 <__aeabi_ddiv+0x80>
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	4699      	mov	r9, r3
 8001c40:	3b09      	subs	r3, #9
 8001c42:	46a0      	mov	r8, r4
 8001c44:	4683      	mov	fp, r0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	e671      	b.n	800192e <__aeabi_ddiv+0x4a>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	2300      	movs	r3, #0
 8001c50:	469b      	mov	fp, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	2500      	movs	r5, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	e669      	b.n	800192e <__aeabi_ddiv+0x4a>
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	000007ff 	.word	0x000007ff
 8001c60:	fffffc01 	.word	0xfffffc01
 8001c64:	0801a418 	.word	0x0801a418
 8001c68:	000003ff 	.word	0x000003ff
 8001c6c:	feffffff 	.word	0xfeffffff
 8001c70:	000007fe 	.word	0x000007fe
 8001c74:	000003f3 	.word	0x000003f3
 8001c78:	fffffc0d 	.word	0xfffffc0d
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	4649      	mov	r1, r9
 8001c82:	2301      	movs	r3, #1
 8001c84:	4319      	orrs	r1, r3
 8001c86:	4689      	mov	r9, r1
 8001c88:	2400      	movs	r4, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e66a      	b.n	8001964 <__aeabi_ddiv+0x80>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2480      	movs	r4, #128	; 0x80
 8001c92:	469a      	mov	sl, r3
 8001c94:	2500      	movs	r5, #0
 8001c96:	4b8a      	ldr	r3, [pc, #552]	; (8001ec0 <__aeabi_ddiv+0x5dc>)
 8001c98:	0324      	lsls	r4, r4, #12
 8001c9a:	e67a      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001c9c:	2501      	movs	r5, #1
 8001c9e:	426d      	negs	r5, r5
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	2b38      	cmp	r3, #56	; 0x38
 8001ca6:	dd00      	ble.n	8001caa <__aeabi_ddiv+0x3c6>
 8001ca8:	e670      	b.n	800198c <__aeabi_ddiv+0xa8>
 8001caa:	2b1f      	cmp	r3, #31
 8001cac:	dc00      	bgt.n	8001cb0 <__aeabi_ddiv+0x3cc>
 8001cae:	e0bf      	b.n	8001e30 <__aeabi_ddiv+0x54c>
 8001cb0:	211f      	movs	r1, #31
 8001cb2:	4249      	negs	r1, r1
 8001cb4:	1a8a      	subs	r2, r1, r2
 8001cb6:	4641      	mov	r1, r8
 8001cb8:	40d1      	lsrs	r1, r2
 8001cba:	000a      	movs	r2, r1
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d004      	beq.n	8001cca <__aeabi_ddiv+0x3e6>
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <__aeabi_ddiv+0x5e0>)
 8001cc4:	445b      	add	r3, fp
 8001cc6:	4099      	lsls	r1, r3
 8001cc8:	430d      	orrs	r5, r1
 8001cca:	1e6b      	subs	r3, r5, #1
 8001ccc:	419d      	sbcs	r5, r3
 8001cce:	2307      	movs	r3, #7
 8001cd0:	432a      	orrs	r2, r5
 8001cd2:	001d      	movs	r5, r3
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	4015      	ands	r5, r2
 8001cd8:	4213      	tst	r3, r2
 8001cda:	d100      	bne.n	8001cde <__aeabi_ddiv+0x3fa>
 8001cdc:	e0d4      	b.n	8001e88 <__aeabi_ddiv+0x5a4>
 8001cde:	210f      	movs	r1, #15
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4011      	ands	r1, r2
 8001ce4:	2904      	cmp	r1, #4
 8001ce6:	d100      	bne.n	8001cea <__aeabi_ddiv+0x406>
 8001ce8:	e0cb      	b.n	8001e82 <__aeabi_ddiv+0x59e>
 8001cea:	1d11      	adds	r1, r2, #4
 8001cec:	4291      	cmp	r1, r2
 8001cee:	4192      	sbcs	r2, r2
 8001cf0:	4252      	negs	r2, r2
 8001cf2:	189b      	adds	r3, r3, r2
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	0219      	lsls	r1, r3, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_ddiv+0x418>
 8001cfa:	e0c2      	b.n	8001e82 <__aeabi_ddiv+0x59e>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2400      	movs	r4, #0
 8001d00:	2500      	movs	r5, #0
 8001d02:	e646      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	4641      	mov	r1, r8
 8001d08:	031b      	lsls	r3, r3, #12
 8001d0a:	4219      	tst	r1, r3
 8001d0c:	d008      	beq.n	8001d20 <__aeabi_ddiv+0x43c>
 8001d0e:	421c      	tst	r4, r3
 8001d10:	d106      	bne.n	8001d20 <__aeabi_ddiv+0x43c>
 8001d12:	431c      	orrs	r4, r3
 8001d14:	0324      	lsls	r4, r4, #12
 8001d16:	46ba      	mov	sl, r7
 8001d18:	0015      	movs	r5, r2
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <__aeabi_ddiv+0x5dc>)
 8001d1c:	0b24      	lsrs	r4, r4, #12
 8001d1e:	e638      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001d20:	2480      	movs	r4, #128	; 0x80
 8001d22:	4643      	mov	r3, r8
 8001d24:	0324      	lsls	r4, r4, #12
 8001d26:	431c      	orrs	r4, r3
 8001d28:	0324      	lsls	r4, r4, #12
 8001d2a:	46b2      	mov	sl, r6
 8001d2c:	4b64      	ldr	r3, [pc, #400]	; (8001ec0 <__aeabi_ddiv+0x5dc>)
 8001d2e:	0b24      	lsrs	r4, r4, #12
 8001d30:	e62f      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x454>
 8001d36:	e703      	b.n	8001b40 <__aeabi_ddiv+0x25c>
 8001d38:	19a6      	adds	r6, r4, r6
 8001d3a:	1e68      	subs	r0, r5, #1
 8001d3c:	42a6      	cmp	r6, r4
 8001d3e:	d200      	bcs.n	8001d42 <__aeabi_ddiv+0x45e>
 8001d40:	e08d      	b.n	8001e5e <__aeabi_ddiv+0x57a>
 8001d42:	428e      	cmp	r6, r1
 8001d44:	d200      	bcs.n	8001d48 <__aeabi_ddiv+0x464>
 8001d46:	e0a3      	b.n	8001e90 <__aeabi_ddiv+0x5ac>
 8001d48:	d100      	bne.n	8001d4c <__aeabi_ddiv+0x468>
 8001d4a:	e0b3      	b.n	8001eb4 <__aeabi_ddiv+0x5d0>
 8001d4c:	0005      	movs	r5, r0
 8001d4e:	e6f5      	b.n	8001b3c <__aeabi_ddiv+0x258>
 8001d50:	42aa      	cmp	r2, r5
 8001d52:	d900      	bls.n	8001d56 <__aeabi_ddiv+0x472>
 8001d54:	e639      	b.n	80019ca <__aeabi_ddiv+0xe6>
 8001d56:	4643      	mov	r3, r8
 8001d58:	07de      	lsls	r6, r3, #31
 8001d5a:	0858      	lsrs	r0, r3, #1
 8001d5c:	086b      	lsrs	r3, r5, #1
 8001d5e:	431e      	orrs	r6, r3
 8001d60:	07ed      	lsls	r5, r5, #31
 8001d62:	e639      	b.n	80019d8 <__aeabi_ddiv+0xf4>
 8001d64:	4648      	mov	r0, r9
 8001d66:	f001 f937 	bl	8002fd8 <__clzsi2>
 8001d6a:	0001      	movs	r1, r0
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	3115      	adds	r1, #21
 8001d70:	3220      	adds	r2, #32
 8001d72:	291c      	cmp	r1, #28
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_ddiv+0x494>
 8001d76:	e72c      	b.n	8001bd2 <__aeabi_ddiv+0x2ee>
 8001d78:	464b      	mov	r3, r9
 8001d7a:	3808      	subs	r0, #8
 8001d7c:	4083      	lsls	r3, r0
 8001d7e:	2500      	movs	r5, #0
 8001d80:	4698      	mov	r8, r3
 8001d82:	e732      	b.n	8001bea <__aeabi_ddiv+0x306>
 8001d84:	f001 f928 	bl	8002fd8 <__clzsi2>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	3215      	adds	r2, #21
 8001d8e:	3020      	adds	r0, #32
 8001d90:	2a1c      	cmp	r2, #28
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x4b2>
 8001d94:	e700      	b.n	8001b98 <__aeabi_ddiv+0x2b4>
 8001d96:	4654      	mov	r4, sl
 8001d98:	3b08      	subs	r3, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	409c      	lsls	r4, r3
 8001d9e:	e705      	b.n	8001bac <__aeabi_ddiv+0x2c8>
 8001da0:	1936      	adds	r6, r6, r4
 8001da2:	3b01      	subs	r3, #1
 8001da4:	42b4      	cmp	r4, r6
 8001da6:	d900      	bls.n	8001daa <__aeabi_ddiv+0x4c6>
 8001da8:	e6a6      	b.n	8001af8 <__aeabi_ddiv+0x214>
 8001daa:	42b2      	cmp	r2, r6
 8001dac:	d800      	bhi.n	8001db0 <__aeabi_ddiv+0x4cc>
 8001dae:	e6a3      	b.n	8001af8 <__aeabi_ddiv+0x214>
 8001db0:	1e83      	subs	r3, r0, #2
 8001db2:	1936      	adds	r6, r6, r4
 8001db4:	e6a0      	b.n	8001af8 <__aeabi_ddiv+0x214>
 8001db6:	1909      	adds	r1, r1, r4
 8001db8:	3d01      	subs	r5, #1
 8001dba:	428c      	cmp	r4, r1
 8001dbc:	d900      	bls.n	8001dc0 <__aeabi_ddiv+0x4dc>
 8001dbe:	e68d      	b.n	8001adc <__aeabi_ddiv+0x1f8>
 8001dc0:	428a      	cmp	r2, r1
 8001dc2:	d800      	bhi.n	8001dc6 <__aeabi_ddiv+0x4e2>
 8001dc4:	e68a      	b.n	8001adc <__aeabi_ddiv+0x1f8>
 8001dc6:	1e85      	subs	r5, r0, #2
 8001dc8:	1909      	adds	r1, r1, r4
 8001dca:	e687      	b.n	8001adc <__aeabi_ddiv+0x1f8>
 8001dcc:	230f      	movs	r3, #15
 8001dce:	402b      	ands	r3, r5
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_ddiv+0x4f2>
 8001dd4:	e6bc      	b.n	8001b50 <__aeabi_ddiv+0x26c>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	425b      	negs	r3, r3
 8001dda:	42ab      	cmp	r3, r5
 8001ddc:	419b      	sbcs	r3, r3
 8001dde:	3504      	adds	r5, #4
 8001de0:	425b      	negs	r3, r3
 8001de2:	08ed      	lsrs	r5, r5, #3
 8001de4:	4498      	add	r8, r3
 8001de6:	e6b4      	b.n	8001b52 <__aeabi_ddiv+0x26e>
 8001de8:	42af      	cmp	r7, r5
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x50a>
 8001dec:	e660      	b.n	8001ab0 <__aeabi_ddiv+0x1cc>
 8001dee:	4282      	cmp	r2, r0
 8001df0:	d804      	bhi.n	8001dfc <__aeabi_ddiv+0x518>
 8001df2:	d000      	beq.n	8001df6 <__aeabi_ddiv+0x512>
 8001df4:	e65c      	b.n	8001ab0 <__aeabi_ddiv+0x1cc>
 8001df6:	42ae      	cmp	r6, r5
 8001df8:	d800      	bhi.n	8001dfc <__aeabi_ddiv+0x518>
 8001dfa:	e659      	b.n	8001ab0 <__aeabi_ddiv+0x1cc>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	425b      	negs	r3, r3
 8001e00:	469c      	mov	ip, r3
 8001e02:	9b00      	ldr	r3, [sp, #0]
 8001e04:	44e0      	add	r8, ip
 8001e06:	469c      	mov	ip, r3
 8001e08:	4465      	add	r5, ip
 8001e0a:	429d      	cmp	r5, r3
 8001e0c:	419b      	sbcs	r3, r3
 8001e0e:	425b      	negs	r3, r3
 8001e10:	191b      	adds	r3, r3, r4
 8001e12:	18c0      	adds	r0, r0, r3
 8001e14:	e64d      	b.n	8001ab2 <__aeabi_ddiv+0x1ce>
 8001e16:	428a      	cmp	r2, r1
 8001e18:	d800      	bhi.n	8001e1c <__aeabi_ddiv+0x538>
 8001e1a:	e60e      	b.n	8001a3a <__aeabi_ddiv+0x156>
 8001e1c:	1e83      	subs	r3, r0, #2
 8001e1e:	1909      	adds	r1, r1, r4
 8001e20:	e60b      	b.n	8001a3a <__aeabi_ddiv+0x156>
 8001e22:	428a      	cmp	r2, r1
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x544>
 8001e26:	e5f4      	b.n	8001a12 <__aeabi_ddiv+0x12e>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	4698      	mov	r8, r3
 8001e2c:	1909      	adds	r1, r1, r4
 8001e2e:	e5f0      	b.n	8001a12 <__aeabi_ddiv+0x12e>
 8001e30:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <__aeabi_ddiv+0x5e4>)
 8001e32:	0028      	movs	r0, r5
 8001e34:	4459      	add	r1, fp
 8001e36:	408d      	lsls	r5, r1
 8001e38:	4642      	mov	r2, r8
 8001e3a:	408a      	lsls	r2, r1
 8001e3c:	1e69      	subs	r1, r5, #1
 8001e3e:	418d      	sbcs	r5, r1
 8001e40:	4641      	mov	r1, r8
 8001e42:	40d8      	lsrs	r0, r3
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	4302      	orrs	r2, r0
 8001e48:	432a      	orrs	r2, r5
 8001e4a:	000b      	movs	r3, r1
 8001e4c:	0751      	lsls	r1, r2, #29
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_ddiv+0x56e>
 8001e50:	e751      	b.n	8001cf6 <__aeabi_ddiv+0x412>
 8001e52:	210f      	movs	r1, #15
 8001e54:	4011      	ands	r1, r2
 8001e56:	2904      	cmp	r1, #4
 8001e58:	d000      	beq.n	8001e5c <__aeabi_ddiv+0x578>
 8001e5a:	e746      	b.n	8001cea <__aeabi_ddiv+0x406>
 8001e5c:	e74b      	b.n	8001cf6 <__aeabi_ddiv+0x412>
 8001e5e:	0005      	movs	r5, r0
 8001e60:	428e      	cmp	r6, r1
 8001e62:	d000      	beq.n	8001e66 <__aeabi_ddiv+0x582>
 8001e64:	e66a      	b.n	8001b3c <__aeabi_ddiv+0x258>
 8001e66:	9a00      	ldr	r2, [sp, #0]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x58a>
 8001e6c:	e666      	b.n	8001b3c <__aeabi_ddiv+0x258>
 8001e6e:	e667      	b.n	8001b40 <__aeabi_ddiv+0x25c>
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <__aeabi_ddiv+0x5e8>)
 8001e72:	445a      	add	r2, fp
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	dc00      	bgt.n	8001e7a <__aeabi_ddiv+0x596>
 8001e78:	e710      	b.n	8001c9c <__aeabi_ddiv+0x3b8>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	4498      	add	r8, r3
 8001e80:	e667      	b.n	8001b52 <__aeabi_ddiv+0x26e>
 8001e82:	075d      	lsls	r5, r3, #29
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	0b1c      	lsrs	r4, r3, #12
 8001e88:	08d2      	lsrs	r2, r2, #3
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4315      	orrs	r5, r2
 8001e8e:	e580      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001e90:	9800      	ldr	r0, [sp, #0]
 8001e92:	3d02      	subs	r5, #2
 8001e94:	0042      	lsls	r2, r0, #1
 8001e96:	4282      	cmp	r2, r0
 8001e98:	41bf      	sbcs	r7, r7
 8001e9a:	427f      	negs	r7, r7
 8001e9c:	193c      	adds	r4, r7, r4
 8001e9e:	1936      	adds	r6, r6, r4
 8001ea0:	9200      	str	r2, [sp, #0]
 8001ea2:	e7dd      	b.n	8001e60 <__aeabi_ddiv+0x57c>
 8001ea4:	2480      	movs	r4, #128	; 0x80
 8001ea6:	4643      	mov	r3, r8
 8001ea8:	0324      	lsls	r4, r4, #12
 8001eaa:	431c      	orrs	r4, r3
 8001eac:	0324      	lsls	r4, r4, #12
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__aeabi_ddiv+0x5dc>)
 8001eb0:	0b24      	lsrs	r4, r4, #12
 8001eb2:	e56e      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001eb4:	9a00      	ldr	r2, [sp, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3ea      	bcc.n	8001e90 <__aeabi_ddiv+0x5ac>
 8001eba:	0005      	movs	r5, r0
 8001ebc:	e7d3      	b.n	8001e66 <__aeabi_ddiv+0x582>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007ff 	.word	0x000007ff
 8001ec4:	0000043e 	.word	0x0000043e
 8001ec8:	0000041e 	.word	0x0000041e
 8001ecc:	000003ff 	.word	0x000003ff

08001ed0 <__eqdf2>:
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	464e      	mov	r6, r9
 8001ed4:	4645      	mov	r5, r8
 8001ed6:	46de      	mov	lr, fp
 8001ed8:	4657      	mov	r7, sl
 8001eda:	4690      	mov	r8, r2
 8001edc:	b5e0      	push	{r5, r6, r7, lr}
 8001ede:	0017      	movs	r7, r2
 8001ee0:	031a      	lsls	r2, r3, #12
 8001ee2:	0b12      	lsrs	r2, r2, #12
 8001ee4:	0005      	movs	r5, r0
 8001ee6:	4684      	mov	ip, r0
 8001ee8:	4819      	ldr	r0, [pc, #100]	; (8001f50 <__eqdf2+0x80>)
 8001eea:	030e      	lsls	r6, r1, #12
 8001eec:	004c      	lsls	r4, r1, #1
 8001eee:	4691      	mov	r9, r2
 8001ef0:	005a      	lsls	r2, r3, #1
 8001ef2:	0fdb      	lsrs	r3, r3, #31
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	0b36      	lsrs	r6, r6, #12
 8001ef8:	0d64      	lsrs	r4, r4, #21
 8001efa:	0fc9      	lsrs	r1, r1, #31
 8001efc:	0d52      	lsrs	r2, r2, #21
 8001efe:	4284      	cmp	r4, r0
 8001f00:	d019      	beq.n	8001f36 <__eqdf2+0x66>
 8001f02:	4282      	cmp	r2, r0
 8001f04:	d010      	beq.n	8001f28 <__eqdf2+0x58>
 8001f06:	2001      	movs	r0, #1
 8001f08:	4294      	cmp	r4, r2
 8001f0a:	d10e      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f0c:	454e      	cmp	r6, r9
 8001f0e:	d10c      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f10:	2001      	movs	r0, #1
 8001f12:	45c4      	cmp	ip, r8
 8001f14:	d109      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f16:	4559      	cmp	r1, fp
 8001f18:	d017      	beq.n	8001f4a <__eqdf2+0x7a>
 8001f1a:	2c00      	cmp	r4, #0
 8001f1c:	d105      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f1e:	0030      	movs	r0, r6
 8001f20:	4328      	orrs	r0, r5
 8001f22:	1e43      	subs	r3, r0, #1
 8001f24:	4198      	sbcs	r0, r3
 8001f26:	e000      	b.n	8001f2a <__eqdf2+0x5a>
 8001f28:	2001      	movs	r0, #1
 8001f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f2c:	46bb      	mov	fp, r7
 8001f2e:	46b2      	mov	sl, r6
 8001f30:	46a9      	mov	r9, r5
 8001f32:	46a0      	mov	r8, r4
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f36:	0033      	movs	r3, r6
 8001f38:	2001      	movs	r0, #1
 8001f3a:	432b      	orrs	r3, r5
 8001f3c:	d1f5      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f3e:	42a2      	cmp	r2, r4
 8001f40:	d1f3      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f42:	464b      	mov	r3, r9
 8001f44:	433b      	orrs	r3, r7
 8001f46:	d1f0      	bne.n	8001f2a <__eqdf2+0x5a>
 8001f48:	e7e2      	b.n	8001f10 <__eqdf2+0x40>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e7ed      	b.n	8001f2a <__eqdf2+0x5a>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff

08001f54 <__gedf2>:
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f56:	4647      	mov	r7, r8
 8001f58:	46ce      	mov	lr, r9
 8001f5a:	0004      	movs	r4, r0
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	0016      	movs	r6, r2
 8001f60:	031b      	lsls	r3, r3, #12
 8001f62:	0b1b      	lsrs	r3, r3, #12
 8001f64:	4d2d      	ldr	r5, [pc, #180]	; (800201c <__gedf2+0xc8>)
 8001f66:	004a      	lsls	r2, r1, #1
 8001f68:	4699      	mov	r9, r3
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	0043      	lsls	r3, r0, #1
 8001f6e:	030f      	lsls	r7, r1, #12
 8001f70:	46a4      	mov	ip, r4
 8001f72:	46b0      	mov	r8, r6
 8001f74:	0b3f      	lsrs	r7, r7, #12
 8001f76:	0d52      	lsrs	r2, r2, #21
 8001f78:	0fc9      	lsrs	r1, r1, #31
 8001f7a:	0d5b      	lsrs	r3, r3, #21
 8001f7c:	0fc0      	lsrs	r0, r0, #31
 8001f7e:	42aa      	cmp	r2, r5
 8001f80:	d021      	beq.n	8001fc6 <__gedf2+0x72>
 8001f82:	42ab      	cmp	r3, r5
 8001f84:	d013      	beq.n	8001fae <__gedf2+0x5a>
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d122      	bne.n	8001fd0 <__gedf2+0x7c>
 8001f8a:	433c      	orrs	r4, r7
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <__gedf2+0x42>
 8001f90:	464d      	mov	r5, r9
 8001f92:	432e      	orrs	r6, r5
 8001f94:	d022      	beq.n	8001fdc <__gedf2+0x88>
 8001f96:	2c00      	cmp	r4, #0
 8001f98:	d010      	beq.n	8001fbc <__gedf2+0x68>
 8001f9a:	4281      	cmp	r1, r0
 8001f9c:	d022      	beq.n	8001fe4 <__gedf2+0x90>
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	3901      	subs	r1, #1
 8001fa2:	4008      	ands	r0, r1
 8001fa4:	3801      	subs	r0, #1
 8001fa6:	bcc0      	pop	{r6, r7}
 8001fa8:	46b9      	mov	r9, r7
 8001faa:	46b0      	mov	r8, r6
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	464d      	mov	r5, r9
 8001fb0:	432e      	orrs	r6, r5
 8001fb2:	d129      	bne.n	8002008 <__gedf2+0xb4>
 8001fb4:	2a00      	cmp	r2, #0
 8001fb6:	d1f0      	bne.n	8001f9a <__gedf2+0x46>
 8001fb8:	433c      	orrs	r4, r7
 8001fba:	d1ee      	bne.n	8001f9a <__gedf2+0x46>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d1f2      	bne.n	8001fa6 <__gedf2+0x52>
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4240      	negs	r0, r0
 8001fc4:	e7ef      	b.n	8001fa6 <__gedf2+0x52>
 8001fc6:	003d      	movs	r5, r7
 8001fc8:	4325      	orrs	r5, r4
 8001fca:	d11d      	bne.n	8002008 <__gedf2+0xb4>
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d0ee      	beq.n	8001fae <__gedf2+0x5a>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e2      	bne.n	8001f9a <__gedf2+0x46>
 8001fd4:	464c      	mov	r4, r9
 8001fd6:	4326      	orrs	r6, r4
 8001fd8:	d1df      	bne.n	8001f9a <__gedf2+0x46>
 8001fda:	e7e0      	b.n	8001f9e <__gedf2+0x4a>
 8001fdc:	2000      	movs	r0, #0
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d0e1      	beq.n	8001fa6 <__gedf2+0x52>
 8001fe2:	e7dc      	b.n	8001f9e <__gedf2+0x4a>
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dc0a      	bgt.n	8001ffe <__gedf2+0xaa>
 8001fe8:	dbe8      	blt.n	8001fbc <__gedf2+0x68>
 8001fea:	454f      	cmp	r7, r9
 8001fec:	d8d7      	bhi.n	8001f9e <__gedf2+0x4a>
 8001fee:	d00e      	beq.n	800200e <__gedf2+0xba>
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	454f      	cmp	r7, r9
 8001ff4:	d2d7      	bcs.n	8001fa6 <__gedf2+0x52>
 8001ff6:	2900      	cmp	r1, #0
 8001ff8:	d0e2      	beq.n	8001fc0 <__gedf2+0x6c>
 8001ffa:	0008      	movs	r0, r1
 8001ffc:	e7d3      	b.n	8001fa6 <__gedf2+0x52>
 8001ffe:	4243      	negs	r3, r0
 8002000:	4158      	adcs	r0, r3
 8002002:	0040      	lsls	r0, r0, #1
 8002004:	3801      	subs	r0, #1
 8002006:	e7ce      	b.n	8001fa6 <__gedf2+0x52>
 8002008:	2002      	movs	r0, #2
 800200a:	4240      	negs	r0, r0
 800200c:	e7cb      	b.n	8001fa6 <__gedf2+0x52>
 800200e:	45c4      	cmp	ip, r8
 8002010:	d8c5      	bhi.n	8001f9e <__gedf2+0x4a>
 8002012:	2000      	movs	r0, #0
 8002014:	45c4      	cmp	ip, r8
 8002016:	d2c6      	bcs.n	8001fa6 <__gedf2+0x52>
 8002018:	e7ed      	b.n	8001ff6 <__gedf2+0xa2>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__ledf2>:
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	4647      	mov	r7, r8
 8002024:	46ce      	mov	lr, r9
 8002026:	0004      	movs	r4, r0
 8002028:	0018      	movs	r0, r3
 800202a:	0016      	movs	r6, r2
 800202c:	031b      	lsls	r3, r3, #12
 800202e:	0b1b      	lsrs	r3, r3, #12
 8002030:	4d2c      	ldr	r5, [pc, #176]	; (80020e4 <__ledf2+0xc4>)
 8002032:	004a      	lsls	r2, r1, #1
 8002034:	4699      	mov	r9, r3
 8002036:	b580      	push	{r7, lr}
 8002038:	0043      	lsls	r3, r0, #1
 800203a:	030f      	lsls	r7, r1, #12
 800203c:	46a4      	mov	ip, r4
 800203e:	46b0      	mov	r8, r6
 8002040:	0b3f      	lsrs	r7, r7, #12
 8002042:	0d52      	lsrs	r2, r2, #21
 8002044:	0fc9      	lsrs	r1, r1, #31
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	0fc0      	lsrs	r0, r0, #31
 800204a:	42aa      	cmp	r2, r5
 800204c:	d00d      	beq.n	800206a <__ledf2+0x4a>
 800204e:	42ab      	cmp	r3, r5
 8002050:	d010      	beq.n	8002074 <__ledf2+0x54>
 8002052:	2a00      	cmp	r2, #0
 8002054:	d127      	bne.n	80020a6 <__ledf2+0x86>
 8002056:	433c      	orrs	r4, r7
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <__ledf2+0x60>
 800205c:	464d      	mov	r5, r9
 800205e:	432e      	orrs	r6, r5
 8002060:	d10e      	bne.n	8002080 <__ledf2+0x60>
 8002062:	2000      	movs	r0, #0
 8002064:	2c00      	cmp	r4, #0
 8002066:	d015      	beq.n	8002094 <__ledf2+0x74>
 8002068:	e00e      	b.n	8002088 <__ledf2+0x68>
 800206a:	003d      	movs	r5, r7
 800206c:	4325      	orrs	r5, r4
 800206e:	d110      	bne.n	8002092 <__ledf2+0x72>
 8002070:	4293      	cmp	r3, r2
 8002072:	d118      	bne.n	80020a6 <__ledf2+0x86>
 8002074:	464d      	mov	r5, r9
 8002076:	432e      	orrs	r6, r5
 8002078:	d10b      	bne.n	8002092 <__ledf2+0x72>
 800207a:	2a00      	cmp	r2, #0
 800207c:	d102      	bne.n	8002084 <__ledf2+0x64>
 800207e:	433c      	orrs	r4, r7
 8002080:	2c00      	cmp	r4, #0
 8002082:	d00b      	beq.n	800209c <__ledf2+0x7c>
 8002084:	4281      	cmp	r1, r0
 8002086:	d014      	beq.n	80020b2 <__ledf2+0x92>
 8002088:	2002      	movs	r0, #2
 800208a:	3901      	subs	r1, #1
 800208c:	4008      	ands	r0, r1
 800208e:	3801      	subs	r0, #1
 8002090:	e000      	b.n	8002094 <__ledf2+0x74>
 8002092:	2002      	movs	r0, #2
 8002094:	bcc0      	pop	{r6, r7}
 8002096:	46b9      	mov	r9, r7
 8002098:	46b0      	mov	r8, r6
 800209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209c:	2800      	cmp	r0, #0
 800209e:	d1f9      	bne.n	8002094 <__ledf2+0x74>
 80020a0:	2001      	movs	r0, #1
 80020a2:	4240      	negs	r0, r0
 80020a4:	e7f6      	b.n	8002094 <__ledf2+0x74>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ec      	bne.n	8002084 <__ledf2+0x64>
 80020aa:	464c      	mov	r4, r9
 80020ac:	4326      	orrs	r6, r4
 80020ae:	d1e9      	bne.n	8002084 <__ledf2+0x64>
 80020b0:	e7ea      	b.n	8002088 <__ledf2+0x68>
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dd04      	ble.n	80020c0 <__ledf2+0xa0>
 80020b6:	4243      	negs	r3, r0
 80020b8:	4158      	adcs	r0, r3
 80020ba:	0040      	lsls	r0, r0, #1
 80020bc:	3801      	subs	r0, #1
 80020be:	e7e9      	b.n	8002094 <__ledf2+0x74>
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbeb      	blt.n	800209c <__ledf2+0x7c>
 80020c4:	454f      	cmp	r7, r9
 80020c6:	d8df      	bhi.n	8002088 <__ledf2+0x68>
 80020c8:	d006      	beq.n	80020d8 <__ledf2+0xb8>
 80020ca:	2000      	movs	r0, #0
 80020cc:	454f      	cmp	r7, r9
 80020ce:	d2e1      	bcs.n	8002094 <__ledf2+0x74>
 80020d0:	2900      	cmp	r1, #0
 80020d2:	d0e5      	beq.n	80020a0 <__ledf2+0x80>
 80020d4:	0008      	movs	r0, r1
 80020d6:	e7dd      	b.n	8002094 <__ledf2+0x74>
 80020d8:	45c4      	cmp	ip, r8
 80020da:	d8d5      	bhi.n	8002088 <__ledf2+0x68>
 80020dc:	2000      	movs	r0, #0
 80020de:	45c4      	cmp	ip, r8
 80020e0:	d2d8      	bcs.n	8002094 <__ledf2+0x74>
 80020e2:	e7f5      	b.n	80020d0 <__ledf2+0xb0>
 80020e4:	000007ff 	.word	0x000007ff

080020e8 <__aeabi_dmul>:
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	4657      	mov	r7, sl
 80020ec:	464e      	mov	r6, r9
 80020ee:	4645      	mov	r5, r8
 80020f0:	46de      	mov	lr, fp
 80020f2:	b5e0      	push	{r5, r6, r7, lr}
 80020f4:	4698      	mov	r8, r3
 80020f6:	030c      	lsls	r4, r1, #12
 80020f8:	004b      	lsls	r3, r1, #1
 80020fa:	0006      	movs	r6, r0
 80020fc:	4692      	mov	sl, r2
 80020fe:	b087      	sub	sp, #28
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	0d5b      	lsrs	r3, r3, #21
 8002104:	0fcf      	lsrs	r7, r1, #31
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <__aeabi_dmul+0x24>
 800210a:	e15c      	b.n	80023c6 <__aeabi_dmul+0x2de>
 800210c:	4ad9      	ldr	r2, [pc, #868]	; (8002474 <__aeabi_dmul+0x38c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d100      	bne.n	8002114 <__aeabi_dmul+0x2c>
 8002112:	e175      	b.n	8002400 <__aeabi_dmul+0x318>
 8002114:	0f42      	lsrs	r2, r0, #29
 8002116:	00e4      	lsls	r4, r4, #3
 8002118:	4314      	orrs	r4, r2
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	0412      	lsls	r2, r2, #16
 800211e:	4314      	orrs	r4, r2
 8002120:	4ad5      	ldr	r2, [pc, #852]	; (8002478 <__aeabi_dmul+0x390>)
 8002122:	00c5      	lsls	r5, r0, #3
 8002124:	4694      	mov	ip, r2
 8002126:	4463      	add	r3, ip
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	4699      	mov	r9, r3
 800212e:	469b      	mov	fp, r3
 8002130:	4643      	mov	r3, r8
 8002132:	4642      	mov	r2, r8
 8002134:	031e      	lsls	r6, r3, #12
 8002136:	0fd2      	lsrs	r2, r2, #31
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4650      	mov	r0, sl
 800213c:	4690      	mov	r8, r2
 800213e:	0b36      	lsrs	r6, r6, #12
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	d100      	bne.n	8002146 <__aeabi_dmul+0x5e>
 8002144:	e120      	b.n	8002388 <__aeabi_dmul+0x2a0>
 8002146:	4acb      	ldr	r2, [pc, #812]	; (8002474 <__aeabi_dmul+0x38c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d100      	bne.n	800214e <__aeabi_dmul+0x66>
 800214c:	e162      	b.n	8002414 <__aeabi_dmul+0x32c>
 800214e:	49ca      	ldr	r1, [pc, #808]	; (8002478 <__aeabi_dmul+0x390>)
 8002150:	0f42      	lsrs	r2, r0, #29
 8002152:	468c      	mov	ip, r1
 8002154:	9900      	ldr	r1, [sp, #0]
 8002156:	4463      	add	r3, ip
 8002158:	00f6      	lsls	r6, r6, #3
 800215a:	468c      	mov	ip, r1
 800215c:	4316      	orrs	r6, r2
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	449c      	add	ip, r3
 8002162:	0412      	lsls	r2, r2, #16
 8002164:	4663      	mov	r3, ip
 8002166:	4316      	orrs	r6, r2
 8002168:	00c2      	lsls	r2, r0, #3
 800216a:	2000      	movs	r0, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	9900      	ldr	r1, [sp, #0]
 8002170:	4643      	mov	r3, r8
 8002172:	3101      	adds	r1, #1
 8002174:	468c      	mov	ip, r1
 8002176:	4649      	mov	r1, r9
 8002178:	407b      	eors	r3, r7
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	290f      	cmp	r1, #15
 800217e:	d826      	bhi.n	80021ce <__aeabi_dmul+0xe6>
 8002180:	4bbe      	ldr	r3, [pc, #760]	; (800247c <__aeabi_dmul+0x394>)
 8002182:	0089      	lsls	r1, r1, #2
 8002184:	5859      	ldr	r1, [r3, r1]
 8002186:	468f      	mov	pc, r1
 8002188:	4643      	mov	r3, r8
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	0034      	movs	r4, r6
 800218e:	0015      	movs	r5, r2
 8002190:	4683      	mov	fp, r0
 8002192:	465b      	mov	r3, fp
 8002194:	2b02      	cmp	r3, #2
 8002196:	d016      	beq.n	80021c6 <__aeabi_dmul+0xde>
 8002198:	2b03      	cmp	r3, #3
 800219a:	d100      	bne.n	800219e <__aeabi_dmul+0xb6>
 800219c:	e203      	b.n	80025a6 <__aeabi_dmul+0x4be>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dmul+0xbc>
 80021a2:	e0cd      	b.n	8002340 <__aeabi_dmul+0x258>
 80021a4:	2200      	movs	r2, #0
 80021a6:	2400      	movs	r4, #0
 80021a8:	2500      	movs	r5, #0
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	0512      	lsls	r2, r2, #20
 80021ae:	4322      	orrs	r2, r4
 80021b0:	07db      	lsls	r3, r3, #31
 80021b2:	431a      	orrs	r2, r3
 80021b4:	0028      	movs	r0, r5
 80021b6:	0011      	movs	r1, r2
 80021b8:	b007      	add	sp, #28
 80021ba:	bcf0      	pop	{r4, r5, r6, r7}
 80021bc:	46bb      	mov	fp, r7
 80021be:	46b2      	mov	sl, r6
 80021c0:	46a9      	mov	r9, r5
 80021c2:	46a0      	mov	r8, r4
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c6:	2400      	movs	r4, #0
 80021c8:	2500      	movs	r5, #0
 80021ca:	4aaa      	ldr	r2, [pc, #680]	; (8002474 <__aeabi_dmul+0x38c>)
 80021cc:	e7ed      	b.n	80021aa <__aeabi_dmul+0xc2>
 80021ce:	0c28      	lsrs	r0, r5, #16
 80021d0:	042d      	lsls	r5, r5, #16
 80021d2:	0c2d      	lsrs	r5, r5, #16
 80021d4:	002b      	movs	r3, r5
 80021d6:	0c11      	lsrs	r1, r2, #16
 80021d8:	0412      	lsls	r2, r2, #16
 80021da:	0c12      	lsrs	r2, r2, #16
 80021dc:	4353      	muls	r3, r2
 80021de:	4698      	mov	r8, r3
 80021e0:	0013      	movs	r3, r2
 80021e2:	002f      	movs	r7, r5
 80021e4:	4343      	muls	r3, r0
 80021e6:	4699      	mov	r9, r3
 80021e8:	434f      	muls	r7, r1
 80021ea:	444f      	add	r7, r9
 80021ec:	46bb      	mov	fp, r7
 80021ee:	4647      	mov	r7, r8
 80021f0:	000b      	movs	r3, r1
 80021f2:	0c3f      	lsrs	r7, r7, #16
 80021f4:	46ba      	mov	sl, r7
 80021f6:	4343      	muls	r3, r0
 80021f8:	44da      	add	sl, fp
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	45d1      	cmp	r9, sl
 80021fe:	d904      	bls.n	800220a <__aeabi_dmul+0x122>
 8002200:	2780      	movs	r7, #128	; 0x80
 8002202:	027f      	lsls	r7, r7, #9
 8002204:	46b9      	mov	r9, r7
 8002206:	444b      	add	r3, r9
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	4653      	mov	r3, sl
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	469b      	mov	fp, r3
 8002210:	4653      	mov	r3, sl
 8002212:	041f      	lsls	r7, r3, #16
 8002214:	4643      	mov	r3, r8
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	4698      	mov	r8, r3
 800221c:	003b      	movs	r3, r7
 800221e:	4443      	add	r3, r8
 8002220:	9304      	str	r3, [sp, #16]
 8002222:	0c33      	lsrs	r3, r6, #16
 8002224:	0436      	lsls	r6, r6, #16
 8002226:	0c36      	lsrs	r6, r6, #16
 8002228:	4698      	mov	r8, r3
 800222a:	0033      	movs	r3, r6
 800222c:	4343      	muls	r3, r0
 800222e:	4699      	mov	r9, r3
 8002230:	4643      	mov	r3, r8
 8002232:	4343      	muls	r3, r0
 8002234:	002f      	movs	r7, r5
 8002236:	469a      	mov	sl, r3
 8002238:	4643      	mov	r3, r8
 800223a:	4377      	muls	r7, r6
 800223c:	435d      	muls	r5, r3
 800223e:	0c38      	lsrs	r0, r7, #16
 8002240:	444d      	add	r5, r9
 8002242:	1945      	adds	r5, r0, r5
 8002244:	45a9      	cmp	r9, r5
 8002246:	d903      	bls.n	8002250 <__aeabi_dmul+0x168>
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	4699      	mov	r9, r3
 800224e:	44ca      	add	sl, r9
 8002250:	043f      	lsls	r7, r7, #16
 8002252:	0c28      	lsrs	r0, r5, #16
 8002254:	0c3f      	lsrs	r7, r7, #16
 8002256:	042d      	lsls	r5, r5, #16
 8002258:	19ed      	adds	r5, r5, r7
 800225a:	0c27      	lsrs	r7, r4, #16
 800225c:	0424      	lsls	r4, r4, #16
 800225e:	0c24      	lsrs	r4, r4, #16
 8002260:	0003      	movs	r3, r0
 8002262:	0020      	movs	r0, r4
 8002264:	4350      	muls	r0, r2
 8002266:	437a      	muls	r2, r7
 8002268:	4691      	mov	r9, r2
 800226a:	003a      	movs	r2, r7
 800226c:	4453      	add	r3, sl
 800226e:	9305      	str	r3, [sp, #20]
 8002270:	0c03      	lsrs	r3, r0, #16
 8002272:	469a      	mov	sl, r3
 8002274:	434a      	muls	r2, r1
 8002276:	4361      	muls	r1, r4
 8002278:	4449      	add	r1, r9
 800227a:	4451      	add	r1, sl
 800227c:	44ab      	add	fp, r5
 800227e:	4589      	cmp	r9, r1
 8002280:	d903      	bls.n	800228a <__aeabi_dmul+0x1a2>
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	4699      	mov	r9, r3
 8002288:	444a      	add	r2, r9
 800228a:	0400      	lsls	r0, r0, #16
 800228c:	0c0b      	lsrs	r3, r1, #16
 800228e:	0c00      	lsrs	r0, r0, #16
 8002290:	0409      	lsls	r1, r1, #16
 8002292:	1809      	adds	r1, r1, r0
 8002294:	0020      	movs	r0, r4
 8002296:	4699      	mov	r9, r3
 8002298:	4643      	mov	r3, r8
 800229a:	4370      	muls	r0, r6
 800229c:	435c      	muls	r4, r3
 800229e:	437e      	muls	r6, r7
 80022a0:	435f      	muls	r7, r3
 80022a2:	0c03      	lsrs	r3, r0, #16
 80022a4:	4698      	mov	r8, r3
 80022a6:	19a4      	adds	r4, r4, r6
 80022a8:	4444      	add	r4, r8
 80022aa:	444a      	add	r2, r9
 80022ac:	9703      	str	r7, [sp, #12]
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d904      	bls.n	80022bc <__aeabi_dmul+0x1d4>
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	025b      	lsls	r3, r3, #9
 80022b6:	4698      	mov	r8, r3
 80022b8:	4447      	add	r7, r8
 80022ba:	9703      	str	r7, [sp, #12]
 80022bc:	0423      	lsls	r3, r4, #16
 80022be:	9e02      	ldr	r6, [sp, #8]
 80022c0:	469a      	mov	sl, r3
 80022c2:	9b05      	ldr	r3, [sp, #20]
 80022c4:	445e      	add	r6, fp
 80022c6:	4698      	mov	r8, r3
 80022c8:	42ae      	cmp	r6, r5
 80022ca:	41ad      	sbcs	r5, r5
 80022cc:	1876      	adds	r6, r6, r1
 80022ce:	428e      	cmp	r6, r1
 80022d0:	4189      	sbcs	r1, r1
 80022d2:	0400      	lsls	r0, r0, #16
 80022d4:	0c00      	lsrs	r0, r0, #16
 80022d6:	4450      	add	r0, sl
 80022d8:	4440      	add	r0, r8
 80022da:	426d      	negs	r5, r5
 80022dc:	1947      	adds	r7, r0, r5
 80022de:	46b8      	mov	r8, r7
 80022e0:	4693      	mov	fp, r2
 80022e2:	4249      	negs	r1, r1
 80022e4:	4689      	mov	r9, r1
 80022e6:	44c3      	add	fp, r8
 80022e8:	44d9      	add	r9, fp
 80022ea:	4298      	cmp	r0, r3
 80022ec:	4180      	sbcs	r0, r0
 80022ee:	45a8      	cmp	r8, r5
 80022f0:	41ad      	sbcs	r5, r5
 80022f2:	4593      	cmp	fp, r2
 80022f4:	4192      	sbcs	r2, r2
 80022f6:	4589      	cmp	r9, r1
 80022f8:	4189      	sbcs	r1, r1
 80022fa:	426d      	negs	r5, r5
 80022fc:	4240      	negs	r0, r0
 80022fe:	4328      	orrs	r0, r5
 8002300:	0c24      	lsrs	r4, r4, #16
 8002302:	4252      	negs	r2, r2
 8002304:	4249      	negs	r1, r1
 8002306:	430a      	orrs	r2, r1
 8002308:	9b03      	ldr	r3, [sp, #12]
 800230a:	1900      	adds	r0, r0, r4
 800230c:	1880      	adds	r0, r0, r2
 800230e:	18c7      	adds	r7, r0, r3
 8002310:	464b      	mov	r3, r9
 8002312:	0ddc      	lsrs	r4, r3, #23
 8002314:	9b04      	ldr	r3, [sp, #16]
 8002316:	0275      	lsls	r5, r6, #9
 8002318:	431d      	orrs	r5, r3
 800231a:	1e6a      	subs	r2, r5, #1
 800231c:	4195      	sbcs	r5, r2
 800231e:	464b      	mov	r3, r9
 8002320:	0df6      	lsrs	r6, r6, #23
 8002322:	027f      	lsls	r7, r7, #9
 8002324:	4335      	orrs	r5, r6
 8002326:	025a      	lsls	r2, r3, #9
 8002328:	433c      	orrs	r4, r7
 800232a:	4315      	orrs	r5, r2
 800232c:	01fb      	lsls	r3, r7, #7
 800232e:	d400      	bmi.n	8002332 <__aeabi_dmul+0x24a>
 8002330:	e11c      	b.n	800256c <__aeabi_dmul+0x484>
 8002332:	2101      	movs	r1, #1
 8002334:	086a      	lsrs	r2, r5, #1
 8002336:	400d      	ands	r5, r1
 8002338:	4315      	orrs	r5, r2
 800233a:	07e2      	lsls	r2, r4, #31
 800233c:	4315      	orrs	r5, r2
 800233e:	0864      	lsrs	r4, r4, #1
 8002340:	494f      	ldr	r1, [pc, #316]	; (8002480 <__aeabi_dmul+0x398>)
 8002342:	4461      	add	r1, ip
 8002344:	2900      	cmp	r1, #0
 8002346:	dc00      	bgt.n	800234a <__aeabi_dmul+0x262>
 8002348:	e0b0      	b.n	80024ac <__aeabi_dmul+0x3c4>
 800234a:	076b      	lsls	r3, r5, #29
 800234c:	d009      	beq.n	8002362 <__aeabi_dmul+0x27a>
 800234e:	220f      	movs	r2, #15
 8002350:	402a      	ands	r2, r5
 8002352:	2a04      	cmp	r2, #4
 8002354:	d005      	beq.n	8002362 <__aeabi_dmul+0x27a>
 8002356:	1d2a      	adds	r2, r5, #4
 8002358:	42aa      	cmp	r2, r5
 800235a:	41ad      	sbcs	r5, r5
 800235c:	426d      	negs	r5, r5
 800235e:	1964      	adds	r4, r4, r5
 8002360:	0015      	movs	r5, r2
 8002362:	01e3      	lsls	r3, r4, #7
 8002364:	d504      	bpl.n	8002370 <__aeabi_dmul+0x288>
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <__aeabi_dmul+0x39c>)
 800236a:	00c9      	lsls	r1, r1, #3
 800236c:	4014      	ands	r4, r2
 800236e:	4461      	add	r1, ip
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <__aeabi_dmul+0x3a0>)
 8002372:	4291      	cmp	r1, r2
 8002374:	dd00      	ble.n	8002378 <__aeabi_dmul+0x290>
 8002376:	e726      	b.n	80021c6 <__aeabi_dmul+0xde>
 8002378:	0762      	lsls	r2, r4, #29
 800237a:	08ed      	lsrs	r5, r5, #3
 800237c:	0264      	lsls	r4, r4, #9
 800237e:	0549      	lsls	r1, r1, #21
 8002380:	4315      	orrs	r5, r2
 8002382:	0b24      	lsrs	r4, r4, #12
 8002384:	0d4a      	lsrs	r2, r1, #21
 8002386:	e710      	b.n	80021aa <__aeabi_dmul+0xc2>
 8002388:	4652      	mov	r2, sl
 800238a:	4332      	orrs	r2, r6
 800238c:	d100      	bne.n	8002390 <__aeabi_dmul+0x2a8>
 800238e:	e07f      	b.n	8002490 <__aeabi_dmul+0x3a8>
 8002390:	2e00      	cmp	r6, #0
 8002392:	d100      	bne.n	8002396 <__aeabi_dmul+0x2ae>
 8002394:	e0dc      	b.n	8002550 <__aeabi_dmul+0x468>
 8002396:	0030      	movs	r0, r6
 8002398:	f000 fe1e 	bl	8002fd8 <__clzsi2>
 800239c:	0002      	movs	r2, r0
 800239e:	3a0b      	subs	r2, #11
 80023a0:	231d      	movs	r3, #29
 80023a2:	0001      	movs	r1, r0
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	4652      	mov	r2, sl
 80023a8:	3908      	subs	r1, #8
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	408e      	lsls	r6, r1
 80023ae:	4316      	orrs	r6, r2
 80023b0:	4652      	mov	r2, sl
 80023b2:	408a      	lsls	r2, r1
 80023b4:	9b00      	ldr	r3, [sp, #0]
 80023b6:	4935      	ldr	r1, [pc, #212]	; (800248c <__aeabi_dmul+0x3a4>)
 80023b8:	1a18      	subs	r0, r3, r0
 80023ba:	0003      	movs	r3, r0
 80023bc:	468c      	mov	ip, r1
 80023be:	4463      	add	r3, ip
 80023c0:	2000      	movs	r0, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	e6d3      	b.n	800216e <__aeabi_dmul+0x86>
 80023c6:	0025      	movs	r5, r4
 80023c8:	4305      	orrs	r5, r0
 80023ca:	d04a      	beq.n	8002462 <__aeabi_dmul+0x37a>
 80023cc:	2c00      	cmp	r4, #0
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dmul+0x2ea>
 80023d0:	e0b0      	b.n	8002534 <__aeabi_dmul+0x44c>
 80023d2:	0020      	movs	r0, r4
 80023d4:	f000 fe00 	bl	8002fd8 <__clzsi2>
 80023d8:	0001      	movs	r1, r0
 80023da:	0002      	movs	r2, r0
 80023dc:	390b      	subs	r1, #11
 80023de:	231d      	movs	r3, #29
 80023e0:	0010      	movs	r0, r2
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	0031      	movs	r1, r6
 80023e6:	0035      	movs	r5, r6
 80023e8:	3808      	subs	r0, #8
 80023ea:	4084      	lsls	r4, r0
 80023ec:	40d9      	lsrs	r1, r3
 80023ee:	4085      	lsls	r5, r0
 80023f0:	430c      	orrs	r4, r1
 80023f2:	4826      	ldr	r0, [pc, #152]	; (800248c <__aeabi_dmul+0x3a4>)
 80023f4:	1a83      	subs	r3, r0, r2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	4699      	mov	r9, r3
 80023fc:	469b      	mov	fp, r3
 80023fe:	e697      	b.n	8002130 <__aeabi_dmul+0x48>
 8002400:	0005      	movs	r5, r0
 8002402:	4325      	orrs	r5, r4
 8002404:	d126      	bne.n	8002454 <__aeabi_dmul+0x36c>
 8002406:	2208      	movs	r2, #8
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2302      	movs	r3, #2
 800240c:	2400      	movs	r4, #0
 800240e:	4691      	mov	r9, r2
 8002410:	469b      	mov	fp, r3
 8002412:	e68d      	b.n	8002130 <__aeabi_dmul+0x48>
 8002414:	4652      	mov	r2, sl
 8002416:	9b00      	ldr	r3, [sp, #0]
 8002418:	4332      	orrs	r2, r6
 800241a:	d110      	bne.n	800243e <__aeabi_dmul+0x356>
 800241c:	4915      	ldr	r1, [pc, #84]	; (8002474 <__aeabi_dmul+0x38c>)
 800241e:	2600      	movs	r6, #0
 8002420:	468c      	mov	ip, r1
 8002422:	4463      	add	r3, ip
 8002424:	4649      	mov	r1, r9
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	4319      	orrs	r1, r3
 800242c:	4689      	mov	r9, r1
 800242e:	2002      	movs	r0, #2
 8002430:	e69d      	b.n	800216e <__aeabi_dmul+0x86>
 8002432:	465b      	mov	r3, fp
 8002434:	9701      	str	r7, [sp, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d000      	beq.n	800243c <__aeabi_dmul+0x354>
 800243a:	e6ad      	b.n	8002198 <__aeabi_dmul+0xb0>
 800243c:	e6c3      	b.n	80021c6 <__aeabi_dmul+0xde>
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <__aeabi_dmul+0x38c>)
 8002440:	2003      	movs	r0, #3
 8002442:	4694      	mov	ip, r2
 8002444:	4463      	add	r3, ip
 8002446:	464a      	mov	r2, r9
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2303      	movs	r3, #3
 800244c:	431a      	orrs	r2, r3
 800244e:	4691      	mov	r9, r2
 8002450:	4652      	mov	r2, sl
 8002452:	e68c      	b.n	800216e <__aeabi_dmul+0x86>
 8002454:	220c      	movs	r2, #12
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2303      	movs	r3, #3
 800245a:	0005      	movs	r5, r0
 800245c:	4691      	mov	r9, r2
 800245e:	469b      	mov	fp, r3
 8002460:	e666      	b.n	8002130 <__aeabi_dmul+0x48>
 8002462:	2304      	movs	r3, #4
 8002464:	4699      	mov	r9, r3
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	2400      	movs	r4, #0
 800246e:	469b      	mov	fp, r3
 8002470:	e65e      	b.n	8002130 <__aeabi_dmul+0x48>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	000007ff 	.word	0x000007ff
 8002478:	fffffc01 	.word	0xfffffc01
 800247c:	0801a458 	.word	0x0801a458
 8002480:	000003ff 	.word	0x000003ff
 8002484:	feffffff 	.word	0xfeffffff
 8002488:	000007fe 	.word	0x000007fe
 800248c:	fffffc0d 	.word	0xfffffc0d
 8002490:	4649      	mov	r1, r9
 8002492:	2301      	movs	r3, #1
 8002494:	4319      	orrs	r1, r3
 8002496:	4689      	mov	r9, r1
 8002498:	2600      	movs	r6, #0
 800249a:	2001      	movs	r0, #1
 800249c:	e667      	b.n	800216e <__aeabi_dmul+0x86>
 800249e:	2300      	movs	r3, #0
 80024a0:	2480      	movs	r4, #128	; 0x80
 80024a2:	2500      	movs	r5, #0
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <__aeabi_dmul+0x4cc>)
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	0324      	lsls	r4, r4, #12
 80024aa:	e67e      	b.n	80021aa <__aeabi_dmul+0xc2>
 80024ac:	2001      	movs	r0, #1
 80024ae:	1a40      	subs	r0, r0, r1
 80024b0:	2838      	cmp	r0, #56	; 0x38
 80024b2:	dd00      	ble.n	80024b6 <__aeabi_dmul+0x3ce>
 80024b4:	e676      	b.n	80021a4 <__aeabi_dmul+0xbc>
 80024b6:	281f      	cmp	r0, #31
 80024b8:	dd5b      	ble.n	8002572 <__aeabi_dmul+0x48a>
 80024ba:	221f      	movs	r2, #31
 80024bc:	0023      	movs	r3, r4
 80024be:	4252      	negs	r2, r2
 80024c0:	1a51      	subs	r1, r2, r1
 80024c2:	40cb      	lsrs	r3, r1
 80024c4:	0019      	movs	r1, r3
 80024c6:	2820      	cmp	r0, #32
 80024c8:	d003      	beq.n	80024d2 <__aeabi_dmul+0x3ea>
 80024ca:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <__aeabi_dmul+0x4d0>)
 80024cc:	4462      	add	r2, ip
 80024ce:	4094      	lsls	r4, r2
 80024d0:	4325      	orrs	r5, r4
 80024d2:	1e6a      	subs	r2, r5, #1
 80024d4:	4195      	sbcs	r5, r2
 80024d6:	002a      	movs	r2, r5
 80024d8:	430a      	orrs	r2, r1
 80024da:	2107      	movs	r1, #7
 80024dc:	000d      	movs	r5, r1
 80024de:	2400      	movs	r4, #0
 80024e0:	4015      	ands	r5, r2
 80024e2:	4211      	tst	r1, r2
 80024e4:	d05b      	beq.n	800259e <__aeabi_dmul+0x4b6>
 80024e6:	210f      	movs	r1, #15
 80024e8:	2400      	movs	r4, #0
 80024ea:	4011      	ands	r1, r2
 80024ec:	2904      	cmp	r1, #4
 80024ee:	d053      	beq.n	8002598 <__aeabi_dmul+0x4b0>
 80024f0:	1d11      	adds	r1, r2, #4
 80024f2:	4291      	cmp	r1, r2
 80024f4:	4192      	sbcs	r2, r2
 80024f6:	4252      	negs	r2, r2
 80024f8:	18a4      	adds	r4, r4, r2
 80024fa:	000a      	movs	r2, r1
 80024fc:	0223      	lsls	r3, r4, #8
 80024fe:	d54b      	bpl.n	8002598 <__aeabi_dmul+0x4b0>
 8002500:	2201      	movs	r2, #1
 8002502:	2400      	movs	r4, #0
 8002504:	2500      	movs	r5, #0
 8002506:	e650      	b.n	80021aa <__aeabi_dmul+0xc2>
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	031b      	lsls	r3, r3, #12
 800250c:	421c      	tst	r4, r3
 800250e:	d009      	beq.n	8002524 <__aeabi_dmul+0x43c>
 8002510:	421e      	tst	r6, r3
 8002512:	d107      	bne.n	8002524 <__aeabi_dmul+0x43c>
 8002514:	4333      	orrs	r3, r6
 8002516:	031c      	lsls	r4, r3, #12
 8002518:	4643      	mov	r3, r8
 800251a:	0015      	movs	r5, r2
 800251c:	0b24      	lsrs	r4, r4, #12
 800251e:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <__aeabi_dmul+0x4cc>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	e642      	b.n	80021aa <__aeabi_dmul+0xc2>
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0312      	lsls	r2, r2, #12
 8002528:	4314      	orrs	r4, r2
 800252a:	0324      	lsls	r4, r4, #12
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <__aeabi_dmul+0x4cc>)
 800252e:	0b24      	lsrs	r4, r4, #12
 8002530:	9701      	str	r7, [sp, #4]
 8002532:	e63a      	b.n	80021aa <__aeabi_dmul+0xc2>
 8002534:	f000 fd50 	bl	8002fd8 <__clzsi2>
 8002538:	0001      	movs	r1, r0
 800253a:	0002      	movs	r2, r0
 800253c:	3115      	adds	r1, #21
 800253e:	3220      	adds	r2, #32
 8002540:	291c      	cmp	r1, #28
 8002542:	dc00      	bgt.n	8002546 <__aeabi_dmul+0x45e>
 8002544:	e74b      	b.n	80023de <__aeabi_dmul+0x2f6>
 8002546:	0034      	movs	r4, r6
 8002548:	3808      	subs	r0, #8
 800254a:	2500      	movs	r5, #0
 800254c:	4084      	lsls	r4, r0
 800254e:	e750      	b.n	80023f2 <__aeabi_dmul+0x30a>
 8002550:	f000 fd42 	bl	8002fd8 <__clzsi2>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	3215      	adds	r2, #21
 800255a:	3020      	adds	r0, #32
 800255c:	2a1c      	cmp	r2, #28
 800255e:	dc00      	bgt.n	8002562 <__aeabi_dmul+0x47a>
 8002560:	e71e      	b.n	80023a0 <__aeabi_dmul+0x2b8>
 8002562:	4656      	mov	r6, sl
 8002564:	3b08      	subs	r3, #8
 8002566:	2200      	movs	r2, #0
 8002568:	409e      	lsls	r6, r3
 800256a:	e723      	b.n	80023b4 <__aeabi_dmul+0x2cc>
 800256c:	9b00      	ldr	r3, [sp, #0]
 800256e:	469c      	mov	ip, r3
 8002570:	e6e6      	b.n	8002340 <__aeabi_dmul+0x258>
 8002572:	4912      	ldr	r1, [pc, #72]	; (80025bc <__aeabi_dmul+0x4d4>)
 8002574:	0022      	movs	r2, r4
 8002576:	4461      	add	r1, ip
 8002578:	002e      	movs	r6, r5
 800257a:	408d      	lsls	r5, r1
 800257c:	408a      	lsls	r2, r1
 800257e:	40c6      	lsrs	r6, r0
 8002580:	1e69      	subs	r1, r5, #1
 8002582:	418d      	sbcs	r5, r1
 8002584:	4332      	orrs	r2, r6
 8002586:	432a      	orrs	r2, r5
 8002588:	40c4      	lsrs	r4, r0
 800258a:	0753      	lsls	r3, r2, #29
 800258c:	d0b6      	beq.n	80024fc <__aeabi_dmul+0x414>
 800258e:	210f      	movs	r1, #15
 8002590:	4011      	ands	r1, r2
 8002592:	2904      	cmp	r1, #4
 8002594:	d1ac      	bne.n	80024f0 <__aeabi_dmul+0x408>
 8002596:	e7b1      	b.n	80024fc <__aeabi_dmul+0x414>
 8002598:	0765      	lsls	r5, r4, #29
 800259a:	0264      	lsls	r4, r4, #9
 800259c:	0b24      	lsrs	r4, r4, #12
 800259e:	08d2      	lsrs	r2, r2, #3
 80025a0:	4315      	orrs	r5, r2
 80025a2:	2200      	movs	r2, #0
 80025a4:	e601      	b.n	80021aa <__aeabi_dmul+0xc2>
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	4314      	orrs	r4, r2
 80025ac:	0324      	lsls	r4, r4, #12
 80025ae:	4a01      	ldr	r2, [pc, #4]	; (80025b4 <__aeabi_dmul+0x4cc>)
 80025b0:	0b24      	lsrs	r4, r4, #12
 80025b2:	e5fa      	b.n	80021aa <__aeabi_dmul+0xc2>
 80025b4:	000007ff 	.word	0x000007ff
 80025b8:	0000043e 	.word	0x0000043e
 80025bc:	0000041e 	.word	0x0000041e

080025c0 <__aeabi_dsub>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	4657      	mov	r7, sl
 80025c4:	464e      	mov	r6, r9
 80025c6:	4645      	mov	r5, r8
 80025c8:	46de      	mov	lr, fp
 80025ca:	b5e0      	push	{r5, r6, r7, lr}
 80025cc:	001e      	movs	r6, r3
 80025ce:	0017      	movs	r7, r2
 80025d0:	004a      	lsls	r2, r1, #1
 80025d2:	030b      	lsls	r3, r1, #12
 80025d4:	0d52      	lsrs	r2, r2, #21
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	4690      	mov	r8, r2
 80025da:	0f42      	lsrs	r2, r0, #29
 80025dc:	431a      	orrs	r2, r3
 80025de:	0fcd      	lsrs	r5, r1, #31
 80025e0:	4ccd      	ldr	r4, [pc, #820]	; (8002918 <__aeabi_dsub+0x358>)
 80025e2:	0331      	lsls	r1, r6, #12
 80025e4:	00c3      	lsls	r3, r0, #3
 80025e6:	4694      	mov	ip, r2
 80025e8:	0070      	lsls	r0, r6, #1
 80025ea:	0f7a      	lsrs	r2, r7, #29
 80025ec:	0a49      	lsrs	r1, r1, #9
 80025ee:	00ff      	lsls	r7, r7, #3
 80025f0:	469a      	mov	sl, r3
 80025f2:	46b9      	mov	r9, r7
 80025f4:	0d40      	lsrs	r0, r0, #21
 80025f6:	0ff6      	lsrs	r6, r6, #31
 80025f8:	4311      	orrs	r1, r2
 80025fa:	42a0      	cmp	r0, r4
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x40>
 80025fe:	e0b1      	b.n	8002764 <__aeabi_dsub+0x1a4>
 8002600:	2201      	movs	r2, #1
 8002602:	4056      	eors	r6, r2
 8002604:	46b3      	mov	fp, r6
 8002606:	42b5      	cmp	r5, r6
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x4c>
 800260a:	e088      	b.n	800271e <__aeabi_dsub+0x15e>
 800260c:	4642      	mov	r2, r8
 800260e:	1a12      	subs	r2, r2, r0
 8002610:	2a00      	cmp	r2, #0
 8002612:	dc00      	bgt.n	8002616 <__aeabi_dsub+0x56>
 8002614:	e0ae      	b.n	8002774 <__aeabi_dsub+0x1b4>
 8002616:	2800      	cmp	r0, #0
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x5c>
 800261a:	e0c1      	b.n	80027a0 <__aeabi_dsub+0x1e0>
 800261c:	48be      	ldr	r0, [pc, #760]	; (8002918 <__aeabi_dsub+0x358>)
 800261e:	4580      	cmp	r8, r0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x64>
 8002622:	e151      	b.n	80028c8 <__aeabi_dsub+0x308>
 8002624:	2080      	movs	r0, #128	; 0x80
 8002626:	0400      	lsls	r0, r0, #16
 8002628:	4301      	orrs	r1, r0
 800262a:	2a38      	cmp	r2, #56	; 0x38
 800262c:	dd00      	ble.n	8002630 <__aeabi_dsub+0x70>
 800262e:	e17b      	b.n	8002928 <__aeabi_dsub+0x368>
 8002630:	2a1f      	cmp	r2, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x76>
 8002634:	e1ee      	b.n	8002a14 <__aeabi_dsub+0x454>
 8002636:	2020      	movs	r0, #32
 8002638:	003e      	movs	r6, r7
 800263a:	1a80      	subs	r0, r0, r2
 800263c:	000c      	movs	r4, r1
 800263e:	40d6      	lsrs	r6, r2
 8002640:	40d1      	lsrs	r1, r2
 8002642:	4087      	lsls	r7, r0
 8002644:	4662      	mov	r2, ip
 8002646:	4084      	lsls	r4, r0
 8002648:	1a52      	subs	r2, r2, r1
 800264a:	1e78      	subs	r0, r7, #1
 800264c:	4187      	sbcs	r7, r0
 800264e:	4694      	mov	ip, r2
 8002650:	4334      	orrs	r4, r6
 8002652:	4327      	orrs	r7, r4
 8002654:	1bdc      	subs	r4, r3, r7
 8002656:	42a3      	cmp	r3, r4
 8002658:	419b      	sbcs	r3, r3
 800265a:	4662      	mov	r2, ip
 800265c:	425b      	negs	r3, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4699      	mov	r9, r3
 8002662:	464b      	mov	r3, r9
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	d400      	bmi.n	800266a <__aeabi_dsub+0xaa>
 8002668:	e118      	b.n	800289c <__aeabi_dsub+0x2dc>
 800266a:	464b      	mov	r3, r9
 800266c:	0258      	lsls	r0, r3, #9
 800266e:	0a43      	lsrs	r3, r0, #9
 8002670:	4699      	mov	r9, r3
 8002672:	464b      	mov	r3, r9
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0xba>
 8002678:	e137      	b.n	80028ea <__aeabi_dsub+0x32a>
 800267a:	4648      	mov	r0, r9
 800267c:	f000 fcac 	bl	8002fd8 <__clzsi2>
 8002680:	0001      	movs	r1, r0
 8002682:	3908      	subs	r1, #8
 8002684:	2320      	movs	r3, #32
 8002686:	0022      	movs	r2, r4
 8002688:	4648      	mov	r0, r9
 800268a:	1a5b      	subs	r3, r3, r1
 800268c:	40da      	lsrs	r2, r3
 800268e:	4088      	lsls	r0, r1
 8002690:	408c      	lsls	r4, r1
 8002692:	4643      	mov	r3, r8
 8002694:	4310      	orrs	r0, r2
 8002696:	4588      	cmp	r8, r1
 8002698:	dd00      	ble.n	800269c <__aeabi_dsub+0xdc>
 800269a:	e136      	b.n	800290a <__aeabi_dsub+0x34a>
 800269c:	1ac9      	subs	r1, r1, r3
 800269e:	1c4b      	adds	r3, r1, #1
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dsub+0xe6>
 80026a4:	e0ea      	b.n	800287c <__aeabi_dsub+0x2bc>
 80026a6:	2220      	movs	r2, #32
 80026a8:	0026      	movs	r6, r4
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	0001      	movs	r1, r0
 80026ae:	4094      	lsls	r4, r2
 80026b0:	40de      	lsrs	r6, r3
 80026b2:	40d8      	lsrs	r0, r3
 80026b4:	2300      	movs	r3, #0
 80026b6:	4091      	lsls	r1, r2
 80026b8:	1e62      	subs	r2, r4, #1
 80026ba:	4194      	sbcs	r4, r2
 80026bc:	4681      	mov	r9, r0
 80026be:	4698      	mov	r8, r3
 80026c0:	4331      	orrs	r1, r6
 80026c2:	430c      	orrs	r4, r1
 80026c4:	0763      	lsls	r3, r4, #29
 80026c6:	d009      	beq.n	80026dc <__aeabi_dsub+0x11c>
 80026c8:	230f      	movs	r3, #15
 80026ca:	4023      	ands	r3, r4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d005      	beq.n	80026dc <__aeabi_dsub+0x11c>
 80026d0:	1d23      	adds	r3, r4, #4
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	41a4      	sbcs	r4, r4
 80026d6:	4264      	negs	r4, r4
 80026d8:	44a1      	add	r9, r4
 80026da:	001c      	movs	r4, r3
 80026dc:	464b      	mov	r3, r9
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	d400      	bmi.n	80026e4 <__aeabi_dsub+0x124>
 80026e2:	e0de      	b.n	80028a2 <__aeabi_dsub+0x2e2>
 80026e4:	4641      	mov	r1, r8
 80026e6:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <__aeabi_dsub+0x358>)
 80026e8:	3101      	adds	r1, #1
 80026ea:	4299      	cmp	r1, r3
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x130>
 80026ee:	e0e7      	b.n	80028c0 <__aeabi_dsub+0x300>
 80026f0:	464b      	mov	r3, r9
 80026f2:	488a      	ldr	r0, [pc, #552]	; (800291c <__aeabi_dsub+0x35c>)
 80026f4:	08e4      	lsrs	r4, r4, #3
 80026f6:	4003      	ands	r3, r0
 80026f8:	0018      	movs	r0, r3
 80026fa:	0549      	lsls	r1, r1, #21
 80026fc:	075b      	lsls	r3, r3, #29
 80026fe:	0240      	lsls	r0, r0, #9
 8002700:	4323      	orrs	r3, r4
 8002702:	0d4a      	lsrs	r2, r1, #21
 8002704:	0b04      	lsrs	r4, r0, #12
 8002706:	0512      	lsls	r2, r2, #20
 8002708:	07ed      	lsls	r5, r5, #31
 800270a:	4322      	orrs	r2, r4
 800270c:	432a      	orrs	r2, r5
 800270e:	0018      	movs	r0, r3
 8002710:	0011      	movs	r1, r2
 8002712:	bcf0      	pop	{r4, r5, r6, r7}
 8002714:	46bb      	mov	fp, r7
 8002716:	46b2      	mov	sl, r6
 8002718:	46a9      	mov	r9, r5
 800271a:	46a0      	mov	r8, r4
 800271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271e:	4642      	mov	r2, r8
 8002720:	1a12      	subs	r2, r2, r0
 8002722:	2a00      	cmp	r2, #0
 8002724:	dd52      	ble.n	80027cc <__aeabi_dsub+0x20c>
 8002726:	2800      	cmp	r0, #0
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x16c>
 800272a:	e09c      	b.n	8002866 <__aeabi_dsub+0x2a6>
 800272c:	45a0      	cmp	r8, r4
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x172>
 8002730:	e0ca      	b.n	80028c8 <__aeabi_dsub+0x308>
 8002732:	2080      	movs	r0, #128	; 0x80
 8002734:	0400      	lsls	r0, r0, #16
 8002736:	4301      	orrs	r1, r0
 8002738:	2a38      	cmp	r2, #56	; 0x38
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x17e>
 800273c:	e149      	b.n	80029d2 <__aeabi_dsub+0x412>
 800273e:	2a1f      	cmp	r2, #31
 8002740:	dc00      	bgt.n	8002744 <__aeabi_dsub+0x184>
 8002742:	e197      	b.n	8002a74 <__aeabi_dsub+0x4b4>
 8002744:	0010      	movs	r0, r2
 8002746:	000e      	movs	r6, r1
 8002748:	3820      	subs	r0, #32
 800274a:	40c6      	lsrs	r6, r0
 800274c:	2a20      	cmp	r2, #32
 800274e:	d004      	beq.n	800275a <__aeabi_dsub+0x19a>
 8002750:	2040      	movs	r0, #64	; 0x40
 8002752:	1a82      	subs	r2, r0, r2
 8002754:	4091      	lsls	r1, r2
 8002756:	430f      	orrs	r7, r1
 8002758:	46b9      	mov	r9, r7
 800275a:	464c      	mov	r4, r9
 800275c:	1e62      	subs	r2, r4, #1
 800275e:	4194      	sbcs	r4, r2
 8002760:	4334      	orrs	r4, r6
 8002762:	e13a      	b.n	80029da <__aeabi_dsub+0x41a>
 8002764:	000a      	movs	r2, r1
 8002766:	433a      	orrs	r2, r7
 8002768:	d028      	beq.n	80027bc <__aeabi_dsub+0x1fc>
 800276a:	46b3      	mov	fp, r6
 800276c:	42b5      	cmp	r5, r6
 800276e:	d02b      	beq.n	80027c8 <__aeabi_dsub+0x208>
 8002770:	4a6b      	ldr	r2, [pc, #428]	; (8002920 <__aeabi_dsub+0x360>)
 8002772:	4442      	add	r2, r8
 8002774:	2a00      	cmp	r2, #0
 8002776:	d05d      	beq.n	8002834 <__aeabi_dsub+0x274>
 8002778:	4642      	mov	r2, r8
 800277a:	4644      	mov	r4, r8
 800277c:	1a82      	subs	r2, r0, r2
 800277e:	2c00      	cmp	r4, #0
 8002780:	d000      	beq.n	8002784 <__aeabi_dsub+0x1c4>
 8002782:	e0f5      	b.n	8002970 <__aeabi_dsub+0x3b0>
 8002784:	4665      	mov	r5, ip
 8002786:	431d      	orrs	r5, r3
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x1cc>
 800278a:	e19c      	b.n	8002ac6 <__aeabi_dsub+0x506>
 800278c:	1e55      	subs	r5, r2, #1
 800278e:	2a01      	cmp	r2, #1
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x1d4>
 8002792:	e1fb      	b.n	8002b8c <__aeabi_dsub+0x5cc>
 8002794:	4c60      	ldr	r4, [pc, #384]	; (8002918 <__aeabi_dsub+0x358>)
 8002796:	42a2      	cmp	r2, r4
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x1dc>
 800279a:	e1bd      	b.n	8002b18 <__aeabi_dsub+0x558>
 800279c:	002a      	movs	r2, r5
 800279e:	e0f0      	b.n	8002982 <__aeabi_dsub+0x3c2>
 80027a0:	0008      	movs	r0, r1
 80027a2:	4338      	orrs	r0, r7
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x1e8>
 80027a6:	e0c3      	b.n	8002930 <__aeabi_dsub+0x370>
 80027a8:	1e50      	subs	r0, r2, #1
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x1f0>
 80027ae:	e1a8      	b.n	8002b02 <__aeabi_dsub+0x542>
 80027b0:	4c59      	ldr	r4, [pc, #356]	; (8002918 <__aeabi_dsub+0x358>)
 80027b2:	42a2      	cmp	r2, r4
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x1f8>
 80027b6:	e087      	b.n	80028c8 <__aeabi_dsub+0x308>
 80027b8:	0002      	movs	r2, r0
 80027ba:	e736      	b.n	800262a <__aeabi_dsub+0x6a>
 80027bc:	2201      	movs	r2, #1
 80027be:	4056      	eors	r6, r2
 80027c0:	46b3      	mov	fp, r6
 80027c2:	42b5      	cmp	r5, r6
 80027c4:	d000      	beq.n	80027c8 <__aeabi_dsub+0x208>
 80027c6:	e721      	b.n	800260c <__aeabi_dsub+0x4c>
 80027c8:	4a55      	ldr	r2, [pc, #340]	; (8002920 <__aeabi_dsub+0x360>)
 80027ca:	4442      	add	r2, r8
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x212>
 80027d0:	e0b5      	b.n	800293e <__aeabi_dsub+0x37e>
 80027d2:	4642      	mov	r2, r8
 80027d4:	4644      	mov	r4, r8
 80027d6:	1a82      	subs	r2, r0, r2
 80027d8:	2c00      	cmp	r4, #0
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x21e>
 80027dc:	e138      	b.n	8002a50 <__aeabi_dsub+0x490>
 80027de:	4e4e      	ldr	r6, [pc, #312]	; (8002918 <__aeabi_dsub+0x358>)
 80027e0:	42b0      	cmp	r0, r6
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dsub+0x226>
 80027e4:	e1de      	b.n	8002ba4 <__aeabi_dsub+0x5e4>
 80027e6:	2680      	movs	r6, #128	; 0x80
 80027e8:	4664      	mov	r4, ip
 80027ea:	0436      	lsls	r6, r6, #16
 80027ec:	4334      	orrs	r4, r6
 80027ee:	46a4      	mov	ip, r4
 80027f0:	2a38      	cmp	r2, #56	; 0x38
 80027f2:	dd00      	ble.n	80027f6 <__aeabi_dsub+0x236>
 80027f4:	e196      	b.n	8002b24 <__aeabi_dsub+0x564>
 80027f6:	2a1f      	cmp	r2, #31
 80027f8:	dd00      	ble.n	80027fc <__aeabi_dsub+0x23c>
 80027fa:	e224      	b.n	8002c46 <__aeabi_dsub+0x686>
 80027fc:	2620      	movs	r6, #32
 80027fe:	1ab4      	subs	r4, r6, r2
 8002800:	46a2      	mov	sl, r4
 8002802:	4664      	mov	r4, ip
 8002804:	4656      	mov	r6, sl
 8002806:	40b4      	lsls	r4, r6
 8002808:	46a1      	mov	r9, r4
 800280a:	001c      	movs	r4, r3
 800280c:	464e      	mov	r6, r9
 800280e:	40d4      	lsrs	r4, r2
 8002810:	4326      	orrs	r6, r4
 8002812:	0034      	movs	r4, r6
 8002814:	4656      	mov	r6, sl
 8002816:	40b3      	lsls	r3, r6
 8002818:	1e5e      	subs	r6, r3, #1
 800281a:	41b3      	sbcs	r3, r6
 800281c:	431c      	orrs	r4, r3
 800281e:	4663      	mov	r3, ip
 8002820:	40d3      	lsrs	r3, r2
 8002822:	18c9      	adds	r1, r1, r3
 8002824:	19e4      	adds	r4, r4, r7
 8002826:	42bc      	cmp	r4, r7
 8002828:	41bf      	sbcs	r7, r7
 800282a:	427f      	negs	r7, r7
 800282c:	46b9      	mov	r9, r7
 800282e:	4680      	mov	r8, r0
 8002830:	4489      	add	r9, r1
 8002832:	e0d8      	b.n	80029e6 <__aeabi_dsub+0x426>
 8002834:	4640      	mov	r0, r8
 8002836:	4c3b      	ldr	r4, [pc, #236]	; (8002924 <__aeabi_dsub+0x364>)
 8002838:	3001      	adds	r0, #1
 800283a:	4220      	tst	r0, r4
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x280>
 800283e:	e0b4      	b.n	80029aa <__aeabi_dsub+0x3ea>
 8002840:	4640      	mov	r0, r8
 8002842:	2800      	cmp	r0, #0
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x288>
 8002846:	e144      	b.n	8002ad2 <__aeabi_dsub+0x512>
 8002848:	4660      	mov	r0, ip
 800284a:	4318      	orrs	r0, r3
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x290>
 800284e:	e190      	b.n	8002b72 <__aeabi_dsub+0x5b2>
 8002850:	0008      	movs	r0, r1
 8002852:	4338      	orrs	r0, r7
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x298>
 8002856:	e1aa      	b.n	8002bae <__aeabi_dsub+0x5ee>
 8002858:	4661      	mov	r1, ip
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	0749      	lsls	r1, r1, #29
 800285e:	430b      	orrs	r3, r1
 8002860:	4661      	mov	r1, ip
 8002862:	08cc      	lsrs	r4, r1, #3
 8002864:	e027      	b.n	80028b6 <__aeabi_dsub+0x2f6>
 8002866:	0008      	movs	r0, r1
 8002868:	4338      	orrs	r0, r7
 800286a:	d061      	beq.n	8002930 <__aeabi_dsub+0x370>
 800286c:	1e50      	subs	r0, r2, #1
 800286e:	2a01      	cmp	r2, #1
 8002870:	d100      	bne.n	8002874 <__aeabi_dsub+0x2b4>
 8002872:	e139      	b.n	8002ae8 <__aeabi_dsub+0x528>
 8002874:	42a2      	cmp	r2, r4
 8002876:	d027      	beq.n	80028c8 <__aeabi_dsub+0x308>
 8002878:	0002      	movs	r2, r0
 800287a:	e75d      	b.n	8002738 <__aeabi_dsub+0x178>
 800287c:	0002      	movs	r2, r0
 800287e:	391f      	subs	r1, #31
 8002880:	40ca      	lsrs	r2, r1
 8002882:	0011      	movs	r1, r2
 8002884:	2b20      	cmp	r3, #32
 8002886:	d003      	beq.n	8002890 <__aeabi_dsub+0x2d0>
 8002888:	2240      	movs	r2, #64	; 0x40
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4098      	lsls	r0, r3
 800288e:	4304      	orrs	r4, r0
 8002890:	1e63      	subs	r3, r4, #1
 8002892:	419c      	sbcs	r4, r3
 8002894:	2300      	movs	r3, #0
 8002896:	4699      	mov	r9, r3
 8002898:	4698      	mov	r8, r3
 800289a:	430c      	orrs	r4, r1
 800289c:	0763      	lsls	r3, r4, #29
 800289e:	d000      	beq.n	80028a2 <__aeabi_dsub+0x2e2>
 80028a0:	e712      	b.n	80026c8 <__aeabi_dsub+0x108>
 80028a2:	464b      	mov	r3, r9
 80028a4:	464a      	mov	r2, r9
 80028a6:	08e4      	lsrs	r4, r4, #3
 80028a8:	075b      	lsls	r3, r3, #29
 80028aa:	4323      	orrs	r3, r4
 80028ac:	08d4      	lsrs	r4, r2, #3
 80028ae:	4642      	mov	r2, r8
 80028b0:	4919      	ldr	r1, [pc, #100]	; (8002918 <__aeabi_dsub+0x358>)
 80028b2:	428a      	cmp	r2, r1
 80028b4:	d00e      	beq.n	80028d4 <__aeabi_dsub+0x314>
 80028b6:	0324      	lsls	r4, r4, #12
 80028b8:	0552      	lsls	r2, r2, #21
 80028ba:	0b24      	lsrs	r4, r4, #12
 80028bc:	0d52      	lsrs	r2, r2, #21
 80028be:	e722      	b.n	8002706 <__aeabi_dsub+0x146>
 80028c0:	000a      	movs	r2, r1
 80028c2:	2400      	movs	r4, #0
 80028c4:	2300      	movs	r3, #0
 80028c6:	e71e      	b.n	8002706 <__aeabi_dsub+0x146>
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	4662      	mov	r2, ip
 80028cc:	0752      	lsls	r2, r2, #29
 80028ce:	4313      	orrs	r3, r2
 80028d0:	4662      	mov	r2, ip
 80028d2:	08d4      	lsrs	r4, r2, #3
 80028d4:	001a      	movs	r2, r3
 80028d6:	4322      	orrs	r2, r4
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x31c>
 80028da:	e1fc      	b.n	8002cd6 <__aeabi_dsub+0x716>
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0312      	lsls	r2, r2, #12
 80028e0:	4314      	orrs	r4, r2
 80028e2:	0324      	lsls	r4, r4, #12
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <__aeabi_dsub+0x358>)
 80028e6:	0b24      	lsrs	r4, r4, #12
 80028e8:	e70d      	b.n	8002706 <__aeabi_dsub+0x146>
 80028ea:	0020      	movs	r0, r4
 80028ec:	f000 fb74 	bl	8002fd8 <__clzsi2>
 80028f0:	0001      	movs	r1, r0
 80028f2:	3118      	adds	r1, #24
 80028f4:	291f      	cmp	r1, #31
 80028f6:	dc00      	bgt.n	80028fa <__aeabi_dsub+0x33a>
 80028f8:	e6c4      	b.n	8002684 <__aeabi_dsub+0xc4>
 80028fa:	3808      	subs	r0, #8
 80028fc:	4084      	lsls	r4, r0
 80028fe:	4643      	mov	r3, r8
 8002900:	0020      	movs	r0, r4
 8002902:	2400      	movs	r4, #0
 8002904:	4588      	cmp	r8, r1
 8002906:	dc00      	bgt.n	800290a <__aeabi_dsub+0x34a>
 8002908:	e6c8      	b.n	800269c <__aeabi_dsub+0xdc>
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__aeabi_dsub+0x35c>)
 800290c:	1a5b      	subs	r3, r3, r1
 800290e:	4010      	ands	r0, r2
 8002910:	4698      	mov	r8, r3
 8002912:	4681      	mov	r9, r0
 8002914:	e6d6      	b.n	80026c4 <__aeabi_dsub+0x104>
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	000007ff 	.word	0x000007ff
 800291c:	ff7fffff 	.word	0xff7fffff
 8002920:	fffff801 	.word	0xfffff801
 8002924:	000007fe 	.word	0x000007fe
 8002928:	430f      	orrs	r7, r1
 800292a:	1e7a      	subs	r2, r7, #1
 800292c:	4197      	sbcs	r7, r2
 800292e:	e691      	b.n	8002654 <__aeabi_dsub+0x94>
 8002930:	4661      	mov	r1, ip
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	0749      	lsls	r1, r1, #29
 8002936:	430b      	orrs	r3, r1
 8002938:	4661      	mov	r1, ip
 800293a:	08cc      	lsrs	r4, r1, #3
 800293c:	e7b8      	b.n	80028b0 <__aeabi_dsub+0x2f0>
 800293e:	4640      	mov	r0, r8
 8002940:	4cd3      	ldr	r4, [pc, #844]	; (8002c90 <__aeabi_dsub+0x6d0>)
 8002942:	3001      	adds	r0, #1
 8002944:	4220      	tst	r0, r4
 8002946:	d000      	beq.n	800294a <__aeabi_dsub+0x38a>
 8002948:	e0a2      	b.n	8002a90 <__aeabi_dsub+0x4d0>
 800294a:	4640      	mov	r0, r8
 800294c:	2800      	cmp	r0, #0
 800294e:	d000      	beq.n	8002952 <__aeabi_dsub+0x392>
 8002950:	e101      	b.n	8002b56 <__aeabi_dsub+0x596>
 8002952:	4660      	mov	r0, ip
 8002954:	4318      	orrs	r0, r3
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x39a>
 8002958:	e15e      	b.n	8002c18 <__aeabi_dsub+0x658>
 800295a:	0008      	movs	r0, r1
 800295c:	4338      	orrs	r0, r7
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x3a2>
 8002960:	e15f      	b.n	8002c22 <__aeabi_dsub+0x662>
 8002962:	4661      	mov	r1, ip
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	0749      	lsls	r1, r1, #29
 8002968:	430b      	orrs	r3, r1
 800296a:	4661      	mov	r1, ip
 800296c:	08cc      	lsrs	r4, r1, #3
 800296e:	e7a2      	b.n	80028b6 <__aeabi_dsub+0x2f6>
 8002970:	4dc8      	ldr	r5, [pc, #800]	; (8002c94 <__aeabi_dsub+0x6d4>)
 8002972:	42a8      	cmp	r0, r5
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x3b8>
 8002976:	e0cf      	b.n	8002b18 <__aeabi_dsub+0x558>
 8002978:	2580      	movs	r5, #128	; 0x80
 800297a:	4664      	mov	r4, ip
 800297c:	042d      	lsls	r5, r5, #16
 800297e:	432c      	orrs	r4, r5
 8002980:	46a4      	mov	ip, r4
 8002982:	2a38      	cmp	r2, #56	; 0x38
 8002984:	dc56      	bgt.n	8002a34 <__aeabi_dsub+0x474>
 8002986:	2a1f      	cmp	r2, #31
 8002988:	dd00      	ble.n	800298c <__aeabi_dsub+0x3cc>
 800298a:	e0d1      	b.n	8002b30 <__aeabi_dsub+0x570>
 800298c:	2520      	movs	r5, #32
 800298e:	001e      	movs	r6, r3
 8002990:	1aad      	subs	r5, r5, r2
 8002992:	4664      	mov	r4, ip
 8002994:	40ab      	lsls	r3, r5
 8002996:	40ac      	lsls	r4, r5
 8002998:	40d6      	lsrs	r6, r2
 800299a:	1e5d      	subs	r5, r3, #1
 800299c:	41ab      	sbcs	r3, r5
 800299e:	4334      	orrs	r4, r6
 80029a0:	4323      	orrs	r3, r4
 80029a2:	4664      	mov	r4, ip
 80029a4:	40d4      	lsrs	r4, r2
 80029a6:	1b09      	subs	r1, r1, r4
 80029a8:	e049      	b.n	8002a3e <__aeabi_dsub+0x47e>
 80029aa:	4660      	mov	r0, ip
 80029ac:	1bdc      	subs	r4, r3, r7
 80029ae:	1a46      	subs	r6, r0, r1
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	4180      	sbcs	r0, r0
 80029b4:	4240      	negs	r0, r0
 80029b6:	4681      	mov	r9, r0
 80029b8:	0030      	movs	r0, r6
 80029ba:	464e      	mov	r6, r9
 80029bc:	1b80      	subs	r0, r0, r6
 80029be:	4681      	mov	r9, r0
 80029c0:	0200      	lsls	r0, r0, #8
 80029c2:	d476      	bmi.n	8002ab2 <__aeabi_dsub+0x4f2>
 80029c4:	464b      	mov	r3, r9
 80029c6:	4323      	orrs	r3, r4
 80029c8:	d000      	beq.n	80029cc <__aeabi_dsub+0x40c>
 80029ca:	e652      	b.n	8002672 <__aeabi_dsub+0xb2>
 80029cc:	2400      	movs	r4, #0
 80029ce:	2500      	movs	r5, #0
 80029d0:	e771      	b.n	80028b6 <__aeabi_dsub+0x2f6>
 80029d2:	4339      	orrs	r1, r7
 80029d4:	000c      	movs	r4, r1
 80029d6:	1e62      	subs	r2, r4, #1
 80029d8:	4194      	sbcs	r4, r2
 80029da:	18e4      	adds	r4, r4, r3
 80029dc:	429c      	cmp	r4, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	425b      	negs	r3, r3
 80029e2:	4463      	add	r3, ip
 80029e4:	4699      	mov	r9, r3
 80029e6:	464b      	mov	r3, r9
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	d400      	bmi.n	80029ee <__aeabi_dsub+0x42e>
 80029ec:	e756      	b.n	800289c <__aeabi_dsub+0x2dc>
 80029ee:	2301      	movs	r3, #1
 80029f0:	469c      	mov	ip, r3
 80029f2:	4ba8      	ldr	r3, [pc, #672]	; (8002c94 <__aeabi_dsub+0x6d4>)
 80029f4:	44e0      	add	r8, ip
 80029f6:	4598      	cmp	r8, r3
 80029f8:	d038      	beq.n	8002a6c <__aeabi_dsub+0x4ac>
 80029fa:	464b      	mov	r3, r9
 80029fc:	48a6      	ldr	r0, [pc, #664]	; (8002c98 <__aeabi_dsub+0x6d8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	4003      	ands	r3, r0
 8002a02:	0018      	movs	r0, r3
 8002a04:	0863      	lsrs	r3, r4, #1
 8002a06:	4014      	ands	r4, r2
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	07c3      	lsls	r3, r0, #31
 8002a0c:	431c      	orrs	r4, r3
 8002a0e:	0843      	lsrs	r3, r0, #1
 8002a10:	4699      	mov	r9, r3
 8002a12:	e657      	b.n	80026c4 <__aeabi_dsub+0x104>
 8002a14:	0010      	movs	r0, r2
 8002a16:	000e      	movs	r6, r1
 8002a18:	3820      	subs	r0, #32
 8002a1a:	40c6      	lsrs	r6, r0
 8002a1c:	2a20      	cmp	r2, #32
 8002a1e:	d004      	beq.n	8002a2a <__aeabi_dsub+0x46a>
 8002a20:	2040      	movs	r0, #64	; 0x40
 8002a22:	1a82      	subs	r2, r0, r2
 8002a24:	4091      	lsls	r1, r2
 8002a26:	430f      	orrs	r7, r1
 8002a28:	46b9      	mov	r9, r7
 8002a2a:	464f      	mov	r7, r9
 8002a2c:	1e7a      	subs	r2, r7, #1
 8002a2e:	4197      	sbcs	r7, r2
 8002a30:	4337      	orrs	r7, r6
 8002a32:	e60f      	b.n	8002654 <__aeabi_dsub+0x94>
 8002a34:	4662      	mov	r2, ip
 8002a36:	431a      	orrs	r2, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	4193      	sbcs	r3, r2
 8002a3e:	1afc      	subs	r4, r7, r3
 8002a40:	42a7      	cmp	r7, r4
 8002a42:	41bf      	sbcs	r7, r7
 8002a44:	427f      	negs	r7, r7
 8002a46:	1bcb      	subs	r3, r1, r7
 8002a48:	4699      	mov	r9, r3
 8002a4a:	465d      	mov	r5, fp
 8002a4c:	4680      	mov	r8, r0
 8002a4e:	e608      	b.n	8002662 <__aeabi_dsub+0xa2>
 8002a50:	4666      	mov	r6, ip
 8002a52:	431e      	orrs	r6, r3
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x498>
 8002a56:	e0be      	b.n	8002bd6 <__aeabi_dsub+0x616>
 8002a58:	1e56      	subs	r6, r2, #1
 8002a5a:	2a01      	cmp	r2, #1
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x4a0>
 8002a5e:	e109      	b.n	8002c74 <__aeabi_dsub+0x6b4>
 8002a60:	4c8c      	ldr	r4, [pc, #560]	; (8002c94 <__aeabi_dsub+0x6d4>)
 8002a62:	42a2      	cmp	r2, r4
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x4a8>
 8002a66:	e119      	b.n	8002c9c <__aeabi_dsub+0x6dc>
 8002a68:	0032      	movs	r2, r6
 8002a6a:	e6c1      	b.n	80027f0 <__aeabi_dsub+0x230>
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	2400      	movs	r4, #0
 8002a70:	2300      	movs	r3, #0
 8002a72:	e648      	b.n	8002706 <__aeabi_dsub+0x146>
 8002a74:	2020      	movs	r0, #32
 8002a76:	000c      	movs	r4, r1
 8002a78:	1a80      	subs	r0, r0, r2
 8002a7a:	003e      	movs	r6, r7
 8002a7c:	4087      	lsls	r7, r0
 8002a7e:	4084      	lsls	r4, r0
 8002a80:	40d6      	lsrs	r6, r2
 8002a82:	1e78      	subs	r0, r7, #1
 8002a84:	4187      	sbcs	r7, r0
 8002a86:	40d1      	lsrs	r1, r2
 8002a88:	4334      	orrs	r4, r6
 8002a8a:	433c      	orrs	r4, r7
 8002a8c:	448c      	add	ip, r1
 8002a8e:	e7a4      	b.n	80029da <__aeabi_dsub+0x41a>
 8002a90:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <__aeabi_dsub+0x6d4>)
 8002a92:	4290      	cmp	r0, r2
 8002a94:	d100      	bne.n	8002a98 <__aeabi_dsub+0x4d8>
 8002a96:	e0e9      	b.n	8002c6c <__aeabi_dsub+0x6ac>
 8002a98:	19df      	adds	r7, r3, r7
 8002a9a:	429f      	cmp	r7, r3
 8002a9c:	419b      	sbcs	r3, r3
 8002a9e:	4461      	add	r1, ip
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	18c9      	adds	r1, r1, r3
 8002aa4:	07cc      	lsls	r4, r1, #31
 8002aa6:	087f      	lsrs	r7, r7, #1
 8002aa8:	084b      	lsrs	r3, r1, #1
 8002aaa:	4699      	mov	r9, r3
 8002aac:	4680      	mov	r8, r0
 8002aae:	433c      	orrs	r4, r7
 8002ab0:	e6f4      	b.n	800289c <__aeabi_dsub+0x2dc>
 8002ab2:	1afc      	subs	r4, r7, r3
 8002ab4:	42a7      	cmp	r7, r4
 8002ab6:	41bf      	sbcs	r7, r7
 8002ab8:	4663      	mov	r3, ip
 8002aba:	427f      	negs	r7, r7
 8002abc:	1ac9      	subs	r1, r1, r3
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	e5d5      	b.n	8002672 <__aeabi_dsub+0xb2>
 8002ac6:	08ff      	lsrs	r7, r7, #3
 8002ac8:	074b      	lsls	r3, r1, #29
 8002aca:	465d      	mov	r5, fp
 8002acc:	433b      	orrs	r3, r7
 8002ace:	08cc      	lsrs	r4, r1, #3
 8002ad0:	e6ee      	b.n	80028b0 <__aeabi_dsub+0x2f0>
 8002ad2:	4662      	mov	r2, ip
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	d000      	beq.n	8002ada <__aeabi_dsub+0x51a>
 8002ad8:	e082      	b.n	8002be0 <__aeabi_dsub+0x620>
 8002ada:	000b      	movs	r3, r1
 8002adc:	433b      	orrs	r3, r7
 8002ade:	d11b      	bne.n	8002b18 <__aeabi_dsub+0x558>
 8002ae0:	2480      	movs	r4, #128	; 0x80
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	e6f9      	b.n	80028dc <__aeabi_dsub+0x31c>
 8002ae8:	19dc      	adds	r4, r3, r7
 8002aea:	429c      	cmp	r4, r3
 8002aec:	419b      	sbcs	r3, r3
 8002aee:	4461      	add	r1, ip
 8002af0:	4689      	mov	r9, r1
 8002af2:	425b      	negs	r3, r3
 8002af4:	4499      	add	r9, r3
 8002af6:	464b      	mov	r3, r9
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	d444      	bmi.n	8002b86 <__aeabi_dsub+0x5c6>
 8002afc:	2301      	movs	r3, #1
 8002afe:	4698      	mov	r8, r3
 8002b00:	e6cc      	b.n	800289c <__aeabi_dsub+0x2dc>
 8002b02:	1bdc      	subs	r4, r3, r7
 8002b04:	4662      	mov	r2, ip
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	419b      	sbcs	r3, r3
 8002b0a:	1a51      	subs	r1, r2, r1
 8002b0c:	425b      	negs	r3, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	4699      	mov	r9, r3
 8002b12:	2301      	movs	r3, #1
 8002b14:	4698      	mov	r8, r3
 8002b16:	e5a4      	b.n	8002662 <__aeabi_dsub+0xa2>
 8002b18:	08ff      	lsrs	r7, r7, #3
 8002b1a:	074b      	lsls	r3, r1, #29
 8002b1c:	465d      	mov	r5, fp
 8002b1e:	433b      	orrs	r3, r7
 8002b20:	08cc      	lsrs	r4, r1, #3
 8002b22:	e6d7      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002b24:	4662      	mov	r2, ip
 8002b26:	431a      	orrs	r2, r3
 8002b28:	0014      	movs	r4, r2
 8002b2a:	1e63      	subs	r3, r4, #1
 8002b2c:	419c      	sbcs	r4, r3
 8002b2e:	e679      	b.n	8002824 <__aeabi_dsub+0x264>
 8002b30:	0015      	movs	r5, r2
 8002b32:	4664      	mov	r4, ip
 8002b34:	3d20      	subs	r5, #32
 8002b36:	40ec      	lsrs	r4, r5
 8002b38:	46a0      	mov	r8, r4
 8002b3a:	2a20      	cmp	r2, #32
 8002b3c:	d005      	beq.n	8002b4a <__aeabi_dsub+0x58a>
 8002b3e:	2540      	movs	r5, #64	; 0x40
 8002b40:	4664      	mov	r4, ip
 8002b42:	1aaa      	subs	r2, r5, r2
 8002b44:	4094      	lsls	r4, r2
 8002b46:	4323      	orrs	r3, r4
 8002b48:	469a      	mov	sl, r3
 8002b4a:	4654      	mov	r4, sl
 8002b4c:	1e63      	subs	r3, r4, #1
 8002b4e:	419c      	sbcs	r4, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	4323      	orrs	r3, r4
 8002b54:	e773      	b.n	8002a3e <__aeabi_dsub+0x47e>
 8002b56:	4662      	mov	r2, ip
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	d023      	beq.n	8002ba4 <__aeabi_dsub+0x5e4>
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	433a      	orrs	r2, r7
 8002b60:	d000      	beq.n	8002b64 <__aeabi_dsub+0x5a4>
 8002b62:	e0a0      	b.n	8002ca6 <__aeabi_dsub+0x6e6>
 8002b64:	4662      	mov	r2, ip
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	0752      	lsls	r2, r2, #29
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	4662      	mov	r2, ip
 8002b6e:	08d4      	lsrs	r4, r2, #3
 8002b70:	e6b0      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002b72:	000b      	movs	r3, r1
 8002b74:	433b      	orrs	r3, r7
 8002b76:	d100      	bne.n	8002b7a <__aeabi_dsub+0x5ba>
 8002b78:	e728      	b.n	80029cc <__aeabi_dsub+0x40c>
 8002b7a:	08ff      	lsrs	r7, r7, #3
 8002b7c:	074b      	lsls	r3, r1, #29
 8002b7e:	465d      	mov	r5, fp
 8002b80:	433b      	orrs	r3, r7
 8002b82:	08cc      	lsrs	r4, r1, #3
 8002b84:	e697      	b.n	80028b6 <__aeabi_dsub+0x2f6>
 8002b86:	2302      	movs	r3, #2
 8002b88:	4698      	mov	r8, r3
 8002b8a:	e736      	b.n	80029fa <__aeabi_dsub+0x43a>
 8002b8c:	1afc      	subs	r4, r7, r3
 8002b8e:	42a7      	cmp	r7, r4
 8002b90:	41bf      	sbcs	r7, r7
 8002b92:	4663      	mov	r3, ip
 8002b94:	427f      	negs	r7, r7
 8002b96:	1ac9      	subs	r1, r1, r3
 8002b98:	1bcb      	subs	r3, r1, r7
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	465d      	mov	r5, fp
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	e55e      	b.n	8002662 <__aeabi_dsub+0xa2>
 8002ba4:	074b      	lsls	r3, r1, #29
 8002ba6:	08ff      	lsrs	r7, r7, #3
 8002ba8:	433b      	orrs	r3, r7
 8002baa:	08cc      	lsrs	r4, r1, #3
 8002bac:	e692      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002bae:	1bdc      	subs	r4, r3, r7
 8002bb0:	4660      	mov	r0, ip
 8002bb2:	42a3      	cmp	r3, r4
 8002bb4:	41b6      	sbcs	r6, r6
 8002bb6:	1a40      	subs	r0, r0, r1
 8002bb8:	4276      	negs	r6, r6
 8002bba:	1b80      	subs	r0, r0, r6
 8002bbc:	4681      	mov	r9, r0
 8002bbe:	0200      	lsls	r0, r0, #8
 8002bc0:	d560      	bpl.n	8002c84 <__aeabi_dsub+0x6c4>
 8002bc2:	1afc      	subs	r4, r7, r3
 8002bc4:	42a7      	cmp	r7, r4
 8002bc6:	41bf      	sbcs	r7, r7
 8002bc8:	4663      	mov	r3, ip
 8002bca:	427f      	negs	r7, r7
 8002bcc:	1ac9      	subs	r1, r1, r3
 8002bce:	1bcb      	subs	r3, r1, r7
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	465d      	mov	r5, fp
 8002bd4:	e576      	b.n	80026c4 <__aeabi_dsub+0x104>
 8002bd6:	08ff      	lsrs	r7, r7, #3
 8002bd8:	074b      	lsls	r3, r1, #29
 8002bda:	433b      	orrs	r3, r7
 8002bdc:	08cc      	lsrs	r4, r1, #3
 8002bde:	e667      	b.n	80028b0 <__aeabi_dsub+0x2f0>
 8002be0:	000a      	movs	r2, r1
 8002be2:	08db      	lsrs	r3, r3, #3
 8002be4:	433a      	orrs	r2, r7
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x62a>
 8002be8:	e66f      	b.n	80028ca <__aeabi_dsub+0x30a>
 8002bea:	4662      	mov	r2, ip
 8002bec:	0752      	lsls	r2, r2, #29
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	4662      	mov	r2, ip
 8002bf2:	08d4      	lsrs	r4, r2, #3
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0312      	lsls	r2, r2, #12
 8002bf8:	4214      	tst	r4, r2
 8002bfa:	d007      	beq.n	8002c0c <__aeabi_dsub+0x64c>
 8002bfc:	08c8      	lsrs	r0, r1, #3
 8002bfe:	4210      	tst	r0, r2
 8002c00:	d104      	bne.n	8002c0c <__aeabi_dsub+0x64c>
 8002c02:	465d      	mov	r5, fp
 8002c04:	0004      	movs	r4, r0
 8002c06:	08fb      	lsrs	r3, r7, #3
 8002c08:	0749      	lsls	r1, r1, #29
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	0f5a      	lsrs	r2, r3, #29
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	0752      	lsls	r2, r2, #29
 8002c14:	4313      	orrs	r3, r2
 8002c16:	e65d      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002c18:	074b      	lsls	r3, r1, #29
 8002c1a:	08ff      	lsrs	r7, r7, #3
 8002c1c:	433b      	orrs	r3, r7
 8002c1e:	08cc      	lsrs	r4, r1, #3
 8002c20:	e649      	b.n	80028b6 <__aeabi_dsub+0x2f6>
 8002c22:	19dc      	adds	r4, r3, r7
 8002c24:	429c      	cmp	r4, r3
 8002c26:	419b      	sbcs	r3, r3
 8002c28:	4461      	add	r1, ip
 8002c2a:	4689      	mov	r9, r1
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	4499      	add	r9, r3
 8002c30:	464b      	mov	r3, r9
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	d400      	bmi.n	8002c38 <__aeabi_dsub+0x678>
 8002c36:	e631      	b.n	800289c <__aeabi_dsub+0x2dc>
 8002c38:	464a      	mov	r2, r9
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <__aeabi_dsub+0x6d8>)
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4691      	mov	r9, r2
 8002c42:	4698      	mov	r8, r3
 8002c44:	e62a      	b.n	800289c <__aeabi_dsub+0x2dc>
 8002c46:	0016      	movs	r6, r2
 8002c48:	4664      	mov	r4, ip
 8002c4a:	3e20      	subs	r6, #32
 8002c4c:	40f4      	lsrs	r4, r6
 8002c4e:	46a0      	mov	r8, r4
 8002c50:	2a20      	cmp	r2, #32
 8002c52:	d005      	beq.n	8002c60 <__aeabi_dsub+0x6a0>
 8002c54:	2640      	movs	r6, #64	; 0x40
 8002c56:	4664      	mov	r4, ip
 8002c58:	1ab2      	subs	r2, r6, r2
 8002c5a:	4094      	lsls	r4, r2
 8002c5c:	4323      	orrs	r3, r4
 8002c5e:	469a      	mov	sl, r3
 8002c60:	4654      	mov	r4, sl
 8002c62:	1e63      	subs	r3, r4, #1
 8002c64:	419c      	sbcs	r4, r3
 8002c66:	4643      	mov	r3, r8
 8002c68:	431c      	orrs	r4, r3
 8002c6a:	e5db      	b.n	8002824 <__aeabi_dsub+0x264>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	2400      	movs	r4, #0
 8002c70:	2300      	movs	r3, #0
 8002c72:	e548      	b.n	8002706 <__aeabi_dsub+0x146>
 8002c74:	19dc      	adds	r4, r3, r7
 8002c76:	42bc      	cmp	r4, r7
 8002c78:	41bf      	sbcs	r7, r7
 8002c7a:	4461      	add	r1, ip
 8002c7c:	4689      	mov	r9, r1
 8002c7e:	427f      	negs	r7, r7
 8002c80:	44b9      	add	r9, r7
 8002c82:	e738      	b.n	8002af6 <__aeabi_dsub+0x536>
 8002c84:	464b      	mov	r3, r9
 8002c86:	4323      	orrs	r3, r4
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0x6cc>
 8002c8a:	e69f      	b.n	80029cc <__aeabi_dsub+0x40c>
 8002c8c:	e606      	b.n	800289c <__aeabi_dsub+0x2dc>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	000007fe 	.word	0x000007fe
 8002c94:	000007ff 	.word	0x000007ff
 8002c98:	ff7fffff 	.word	0xff7fffff
 8002c9c:	08ff      	lsrs	r7, r7, #3
 8002c9e:	074b      	lsls	r3, r1, #29
 8002ca0:	433b      	orrs	r3, r7
 8002ca2:	08cc      	lsrs	r4, r1, #3
 8002ca4:	e616      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002ca6:	4662      	mov	r2, ip
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	0752      	lsls	r2, r2, #29
 8002cac:	4313      	orrs	r3, r2
 8002cae:	4662      	mov	r2, ip
 8002cb0:	08d4      	lsrs	r4, r2, #3
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0312      	lsls	r2, r2, #12
 8002cb6:	4214      	tst	r4, r2
 8002cb8:	d007      	beq.n	8002cca <__aeabi_dsub+0x70a>
 8002cba:	08c8      	lsrs	r0, r1, #3
 8002cbc:	4210      	tst	r0, r2
 8002cbe:	d104      	bne.n	8002cca <__aeabi_dsub+0x70a>
 8002cc0:	465d      	mov	r5, fp
 8002cc2:	0004      	movs	r4, r0
 8002cc4:	08fb      	lsrs	r3, r7, #3
 8002cc6:	0749      	lsls	r1, r1, #29
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	0f5a      	lsrs	r2, r3, #29
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	0752      	lsls	r2, r2, #29
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	e5fe      	b.n	80028d4 <__aeabi_dsub+0x314>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4a01      	ldr	r2, [pc, #4]	; (8002ce0 <__aeabi_dsub+0x720>)
 8002cda:	001c      	movs	r4, r3
 8002cdc:	e513      	b.n	8002706 <__aeabi_dsub+0x146>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	000007ff 	.word	0x000007ff

08002ce4 <__aeabi_dcmpun>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	0005      	movs	r5, r0
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <__aeabi_dcmpun+0x38>)
 8002cea:	031c      	lsls	r4, r3, #12
 8002cec:	0016      	movs	r6, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	030a      	lsls	r2, r1, #12
 8002cf2:	0049      	lsls	r1, r1, #1
 8002cf4:	0b12      	lsrs	r2, r2, #12
 8002cf6:	0d49      	lsrs	r1, r1, #21
 8002cf8:	0b24      	lsrs	r4, r4, #12
 8002cfa:	0d5b      	lsrs	r3, r3, #21
 8002cfc:	4281      	cmp	r1, r0
 8002cfe:	d008      	beq.n	8002d12 <__aeabi_dcmpun+0x2e>
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <__aeabi_dcmpun+0x38>)
 8002d02:	2000      	movs	r0, #0
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <__aeabi_dcmpun+0x2c>
 8002d08:	0020      	movs	r0, r4
 8002d0a:	4330      	orrs	r0, r6
 8002d0c:	1e43      	subs	r3, r0, #1
 8002d0e:	4198      	sbcs	r0, r3
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	2001      	movs	r0, #1
 8002d14:	432a      	orrs	r2, r5
 8002d16:	d1fb      	bne.n	8002d10 <__aeabi_dcmpun+0x2c>
 8002d18:	e7f2      	b.n	8002d00 <__aeabi_dcmpun+0x1c>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	000007ff 	.word	0x000007ff

08002d20 <__aeabi_d2iz>:
 8002d20:	000a      	movs	r2, r1
 8002d22:	b530      	push	{r4, r5, lr}
 8002d24:	4c13      	ldr	r4, [pc, #76]	; (8002d74 <__aeabi_d2iz+0x54>)
 8002d26:	0053      	lsls	r3, r2, #1
 8002d28:	0309      	lsls	r1, r1, #12
 8002d2a:	0005      	movs	r5, r0
 8002d2c:	0b09      	lsrs	r1, r1, #12
 8002d2e:	2000      	movs	r0, #0
 8002d30:	0d5b      	lsrs	r3, r3, #21
 8002d32:	0fd2      	lsrs	r2, r2, #31
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	dd04      	ble.n	8002d42 <__aeabi_d2iz+0x22>
 8002d38:	480f      	ldr	r0, [pc, #60]	; (8002d78 <__aeabi_d2iz+0x58>)
 8002d3a:	4283      	cmp	r3, r0
 8002d3c:	dd02      	ble.n	8002d44 <__aeabi_d2iz+0x24>
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <__aeabi_d2iz+0x5c>)
 8002d40:	18d0      	adds	r0, r2, r3
 8002d42:	bd30      	pop	{r4, r5, pc}
 8002d44:	2080      	movs	r0, #128	; 0x80
 8002d46:	0340      	lsls	r0, r0, #13
 8002d48:	4301      	orrs	r1, r0
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <__aeabi_d2iz+0x60>)
 8002d4c:	1ac0      	subs	r0, r0, r3
 8002d4e:	281f      	cmp	r0, #31
 8002d50:	dd08      	ble.n	8002d64 <__aeabi_d2iz+0x44>
 8002d52:	480c      	ldr	r0, [pc, #48]	; (8002d84 <__aeabi_d2iz+0x64>)
 8002d54:	1ac3      	subs	r3, r0, r3
 8002d56:	40d9      	lsrs	r1, r3
 8002d58:	000b      	movs	r3, r1
 8002d5a:	4258      	negs	r0, r3
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d1f0      	bne.n	8002d42 <__aeabi_d2iz+0x22>
 8002d60:	0018      	movs	r0, r3
 8002d62:	e7ee      	b.n	8002d42 <__aeabi_d2iz+0x22>
 8002d64:	4c08      	ldr	r4, [pc, #32]	; (8002d88 <__aeabi_d2iz+0x68>)
 8002d66:	40c5      	lsrs	r5, r0
 8002d68:	46a4      	mov	ip, r4
 8002d6a:	4463      	add	r3, ip
 8002d6c:	4099      	lsls	r1, r3
 8002d6e:	000b      	movs	r3, r1
 8002d70:	432b      	orrs	r3, r5
 8002d72:	e7f2      	b.n	8002d5a <__aeabi_d2iz+0x3a>
 8002d74:	000003fe 	.word	0x000003fe
 8002d78:	0000041d 	.word	0x0000041d
 8002d7c:	7fffffff 	.word	0x7fffffff
 8002d80:	00000433 	.word	0x00000433
 8002d84:	00000413 	.word	0x00000413
 8002d88:	fffffbed 	.word	0xfffffbed

08002d8c <__aeabi_i2d>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d016      	beq.n	8002dc0 <__aeabi_i2d+0x34>
 8002d92:	17c3      	asrs	r3, r0, #31
 8002d94:	18c5      	adds	r5, r0, r3
 8002d96:	405d      	eors	r5, r3
 8002d98:	0fc4      	lsrs	r4, r0, #31
 8002d9a:	0028      	movs	r0, r5
 8002d9c:	f000 f91c 	bl	8002fd8 <__clzsi2>
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <__aeabi_i2d+0x5c>)
 8002da2:	1a12      	subs	r2, r2, r0
 8002da4:	280a      	cmp	r0, #10
 8002da6:	dc16      	bgt.n	8002dd6 <__aeabi_i2d+0x4a>
 8002da8:	0003      	movs	r3, r0
 8002daa:	002e      	movs	r6, r5
 8002dac:	3315      	adds	r3, #21
 8002dae:	409e      	lsls	r6, r3
 8002db0:	230b      	movs	r3, #11
 8002db2:	1a18      	subs	r0, r3, r0
 8002db4:	40c5      	lsrs	r5, r0
 8002db6:	0552      	lsls	r2, r2, #21
 8002db8:	032d      	lsls	r5, r5, #12
 8002dba:	0b2d      	lsrs	r5, r5, #12
 8002dbc:	0d53      	lsrs	r3, r2, #21
 8002dbe:	e003      	b.n	8002dc8 <__aeabi_i2d+0x3c>
 8002dc0:	2400      	movs	r4, #0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	051b      	lsls	r3, r3, #20
 8002dca:	432b      	orrs	r3, r5
 8002dcc:	07e4      	lsls	r4, r4, #31
 8002dce:	4323      	orrs	r3, r4
 8002dd0:	0030      	movs	r0, r6
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	380b      	subs	r0, #11
 8002dd8:	4085      	lsls	r5, r0
 8002dda:	0552      	lsls	r2, r2, #21
 8002ddc:	032d      	lsls	r5, r5, #12
 8002dde:	2600      	movs	r6, #0
 8002de0:	0b2d      	lsrs	r5, r5, #12
 8002de2:	0d53      	lsrs	r3, r2, #21
 8002de4:	e7f0      	b.n	8002dc8 <__aeabi_i2d+0x3c>
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	0000041e 	.word	0x0000041e

08002dec <__aeabi_ui2d>:
 8002dec:	b510      	push	{r4, lr}
 8002dee:	1e04      	subs	r4, r0, #0
 8002df0:	d010      	beq.n	8002e14 <__aeabi_ui2d+0x28>
 8002df2:	f000 f8f1 	bl	8002fd8 <__clzsi2>
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <__aeabi_ui2d+0x48>)
 8002df8:	1a1b      	subs	r3, r3, r0
 8002dfa:	280a      	cmp	r0, #10
 8002dfc:	dc11      	bgt.n	8002e22 <__aeabi_ui2d+0x36>
 8002dfe:	220b      	movs	r2, #11
 8002e00:	0021      	movs	r1, r4
 8002e02:	1a12      	subs	r2, r2, r0
 8002e04:	40d1      	lsrs	r1, r2
 8002e06:	3015      	adds	r0, #21
 8002e08:	030a      	lsls	r2, r1, #12
 8002e0a:	055b      	lsls	r3, r3, #21
 8002e0c:	4084      	lsls	r4, r0
 8002e0e:	0b12      	lsrs	r2, r2, #12
 8002e10:	0d5b      	lsrs	r3, r3, #21
 8002e12:	e001      	b.n	8002e18 <__aeabi_ui2d+0x2c>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2200      	movs	r2, #0
 8002e18:	051b      	lsls	r3, r3, #20
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	0020      	movs	r0, r4
 8002e1e:	0019      	movs	r1, r3
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	0022      	movs	r2, r4
 8002e24:	380b      	subs	r0, #11
 8002e26:	4082      	lsls	r2, r0
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	0312      	lsls	r2, r2, #12
 8002e2c:	2400      	movs	r4, #0
 8002e2e:	0b12      	lsrs	r2, r2, #12
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	e7f1      	b.n	8002e18 <__aeabi_ui2d+0x2c>
 8002e34:	0000041e 	.word	0x0000041e

08002e38 <__aeabi_f2d>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	0043      	lsls	r3, r0, #1
 8002e3c:	0246      	lsls	r6, r0, #9
 8002e3e:	0fc4      	lsrs	r4, r0, #31
 8002e40:	20fe      	movs	r0, #254	; 0xfe
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	0a75      	lsrs	r5, r6, #9
 8002e48:	4208      	tst	r0, r1
 8002e4a:	d00c      	beq.n	8002e66 <__aeabi_f2d+0x2e>
 8002e4c:	22e0      	movs	r2, #224	; 0xe0
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4694      	mov	ip, r2
 8002e52:	076d      	lsls	r5, r5, #29
 8002e54:	0b36      	lsrs	r6, r6, #12
 8002e56:	4463      	add	r3, ip
 8002e58:	051b      	lsls	r3, r3, #20
 8002e5a:	4333      	orrs	r3, r6
 8002e5c:	07e4      	lsls	r4, r4, #31
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	0028      	movs	r0, r5
 8002e62:	0019      	movs	r1, r3
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d114      	bne.n	8002e94 <__aeabi_f2d+0x5c>
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	d01b      	beq.n	8002ea6 <__aeabi_f2d+0x6e>
 8002e6e:	0028      	movs	r0, r5
 8002e70:	f000 f8b2 	bl	8002fd8 <__clzsi2>
 8002e74:	280a      	cmp	r0, #10
 8002e76:	dc1c      	bgt.n	8002eb2 <__aeabi_f2d+0x7a>
 8002e78:	230b      	movs	r3, #11
 8002e7a:	002e      	movs	r6, r5
 8002e7c:	1a1b      	subs	r3, r3, r0
 8002e7e:	40de      	lsrs	r6, r3
 8002e80:	0003      	movs	r3, r0
 8002e82:	3315      	adds	r3, #21
 8002e84:	409d      	lsls	r5, r3
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <__aeabi_f2d+0x88>)
 8002e88:	0336      	lsls	r6, r6, #12
 8002e8a:	1a12      	subs	r2, r2, r0
 8002e8c:	0552      	lsls	r2, r2, #21
 8002e8e:	0b36      	lsrs	r6, r6, #12
 8002e90:	0d53      	lsrs	r3, r2, #21
 8002e92:	e7e1      	b.n	8002e58 <__aeabi_f2d+0x20>
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	d009      	beq.n	8002eac <__aeabi_f2d+0x74>
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	0b36      	lsrs	r6, r6, #12
 8002e9c:	0312      	lsls	r2, r2, #12
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <__aeabi_f2d+0x8c>)
 8002ea0:	076d      	lsls	r5, r5, #29
 8002ea2:	4316      	orrs	r6, r2
 8002ea4:	e7d8      	b.n	8002e58 <__aeabi_f2d+0x20>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	e7d5      	b.n	8002e58 <__aeabi_f2d+0x20>
 8002eac:	2600      	movs	r6, #0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <__aeabi_f2d+0x8c>)
 8002eb0:	e7d2      	b.n	8002e58 <__aeabi_f2d+0x20>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	3b0b      	subs	r3, #11
 8002eb6:	409d      	lsls	r5, r3
 8002eb8:	002e      	movs	r6, r5
 8002eba:	2500      	movs	r5, #0
 8002ebc:	e7e3      	b.n	8002e86 <__aeabi_f2d+0x4e>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	00000389 	.word	0x00000389
 8002ec4:	000007ff 	.word	0x000007ff

08002ec8 <__aeabi_d2f>:
 8002ec8:	0002      	movs	r2, r0
 8002eca:	004b      	lsls	r3, r1, #1
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	0d5b      	lsrs	r3, r3, #21
 8002ed0:	030c      	lsls	r4, r1, #12
 8002ed2:	4e3d      	ldr	r6, [pc, #244]	; (8002fc8 <__aeabi_d2f+0x100>)
 8002ed4:	0a64      	lsrs	r4, r4, #9
 8002ed6:	0f40      	lsrs	r0, r0, #29
 8002ed8:	1c5f      	adds	r7, r3, #1
 8002eda:	0fc9      	lsrs	r1, r1, #31
 8002edc:	4304      	orrs	r4, r0
 8002ede:	00d5      	lsls	r5, r2, #3
 8002ee0:	4237      	tst	r7, r6
 8002ee2:	d00a      	beq.n	8002efa <__aeabi_d2f+0x32>
 8002ee4:	4839      	ldr	r0, [pc, #228]	; (8002fcc <__aeabi_d2f+0x104>)
 8002ee6:	181e      	adds	r6, r3, r0
 8002ee8:	2efe      	cmp	r6, #254	; 0xfe
 8002eea:	dd16      	ble.n	8002f1a <__aeabi_d2f+0x52>
 8002eec:	20ff      	movs	r0, #255	; 0xff
 8002eee:	2400      	movs	r4, #0
 8002ef0:	05c0      	lsls	r0, r0, #23
 8002ef2:	4320      	orrs	r0, r4
 8002ef4:	07c9      	lsls	r1, r1, #31
 8002ef6:	4308      	orrs	r0, r1
 8002ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <__aeabi_d2f+0x44>
 8002efe:	432c      	orrs	r4, r5
 8002f00:	d026      	beq.n	8002f50 <__aeabi_d2f+0x88>
 8002f02:	2205      	movs	r2, #5
 8002f04:	0192      	lsls	r2, r2, #6
 8002f06:	0a54      	lsrs	r4, r2, #9
 8002f08:	b2d8      	uxtb	r0, r3
 8002f0a:	e7f1      	b.n	8002ef0 <__aeabi_d2f+0x28>
 8002f0c:	4325      	orrs	r5, r4
 8002f0e:	d0ed      	beq.n	8002eec <__aeabi_d2f+0x24>
 8002f10:	2080      	movs	r0, #128	; 0x80
 8002f12:	03c0      	lsls	r0, r0, #15
 8002f14:	4304      	orrs	r4, r0
 8002f16:	20ff      	movs	r0, #255	; 0xff
 8002f18:	e7ea      	b.n	8002ef0 <__aeabi_d2f+0x28>
 8002f1a:	2e00      	cmp	r6, #0
 8002f1c:	dd1b      	ble.n	8002f56 <__aeabi_d2f+0x8e>
 8002f1e:	0192      	lsls	r2, r2, #6
 8002f20:	1e53      	subs	r3, r2, #1
 8002f22:	419a      	sbcs	r2, r3
 8002f24:	00e4      	lsls	r4, r4, #3
 8002f26:	0f6d      	lsrs	r5, r5, #29
 8002f28:	4322      	orrs	r2, r4
 8002f2a:	432a      	orrs	r2, r5
 8002f2c:	0753      	lsls	r3, r2, #29
 8002f2e:	d048      	beq.n	8002fc2 <__aeabi_d2f+0xfa>
 8002f30:	230f      	movs	r3, #15
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d000      	beq.n	8002f3a <__aeabi_d2f+0x72>
 8002f38:	3204      	adds	r2, #4
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	04db      	lsls	r3, r3, #19
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d03f      	beq.n	8002fc2 <__aeabi_d2f+0xfa>
 8002f42:	1c70      	adds	r0, r6, #1
 8002f44:	2efe      	cmp	r6, #254	; 0xfe
 8002f46:	d0d1      	beq.n	8002eec <__aeabi_d2f+0x24>
 8002f48:	0192      	lsls	r2, r2, #6
 8002f4a:	0a54      	lsrs	r4, r2, #9
 8002f4c:	b2c0      	uxtb	r0, r0
 8002f4e:	e7cf      	b.n	8002ef0 <__aeabi_d2f+0x28>
 8002f50:	2000      	movs	r0, #0
 8002f52:	2400      	movs	r4, #0
 8002f54:	e7cc      	b.n	8002ef0 <__aeabi_d2f+0x28>
 8002f56:	0032      	movs	r2, r6
 8002f58:	3217      	adds	r2, #23
 8002f5a:	db22      	blt.n	8002fa2 <__aeabi_d2f+0xda>
 8002f5c:	2080      	movs	r0, #128	; 0x80
 8002f5e:	0400      	lsls	r0, r0, #16
 8002f60:	4320      	orrs	r0, r4
 8002f62:	241e      	movs	r4, #30
 8002f64:	1ba4      	subs	r4, r4, r6
 8002f66:	2c1f      	cmp	r4, #31
 8002f68:	dd1d      	ble.n	8002fa6 <__aeabi_d2f+0xde>
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4252      	negs	r2, r2
 8002f6e:	1b96      	subs	r6, r2, r6
 8002f70:	0002      	movs	r2, r0
 8002f72:	40f2      	lsrs	r2, r6
 8002f74:	0016      	movs	r6, r2
 8002f76:	2c20      	cmp	r4, #32
 8002f78:	d004      	beq.n	8002f84 <__aeabi_d2f+0xbc>
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <__aeabi_d2f+0x108>)
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	4098      	lsls	r0, r3
 8002f82:	4305      	orrs	r5, r0
 8002f84:	002a      	movs	r2, r5
 8002f86:	1e53      	subs	r3, r2, #1
 8002f88:	419a      	sbcs	r2, r3
 8002f8a:	4332      	orrs	r2, r6
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	0753      	lsls	r3, r2, #29
 8002f90:	d1ce      	bne.n	8002f30 <__aeabi_d2f+0x68>
 8002f92:	2480      	movs	r4, #128	; 0x80
 8002f94:	0013      	movs	r3, r2
 8002f96:	04e4      	lsls	r4, r4, #19
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4023      	ands	r3, r4
 8002f9c:	4222      	tst	r2, r4
 8002f9e:	d1d3      	bne.n	8002f48 <__aeabi_d2f+0x80>
 8002fa0:	e7b0      	b.n	8002f04 <__aeabi_d2f+0x3c>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e7ad      	b.n	8002f02 <__aeabi_d2f+0x3a>
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <__aeabi_d2f+0x10c>)
 8002fa8:	4694      	mov	ip, r2
 8002faa:	002a      	movs	r2, r5
 8002fac:	40e2      	lsrs	r2, r4
 8002fae:	0014      	movs	r4, r2
 8002fb0:	002a      	movs	r2, r5
 8002fb2:	4463      	add	r3, ip
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	4098      	lsls	r0, r3
 8002fb8:	1e55      	subs	r5, r2, #1
 8002fba:	41aa      	sbcs	r2, r5
 8002fbc:	4302      	orrs	r2, r0
 8002fbe:	4322      	orrs	r2, r4
 8002fc0:	e7e4      	b.n	8002f8c <__aeabi_d2f+0xc4>
 8002fc2:	0033      	movs	r3, r6
 8002fc4:	e79e      	b.n	8002f04 <__aeabi_d2f+0x3c>
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	000007fe 	.word	0x000007fe
 8002fcc:	fffffc80 	.word	0xfffffc80
 8002fd0:	fffffca2 	.word	0xfffffca2
 8002fd4:	fffffc82 	.word	0xfffffc82

08002fd8 <__clzsi2>:
 8002fd8:	211c      	movs	r1, #28
 8002fda:	2301      	movs	r3, #1
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4298      	cmp	r0, r3
 8002fe0:	d301      	bcc.n	8002fe6 <__clzsi2+0xe>
 8002fe2:	0c00      	lsrs	r0, r0, #16
 8002fe4:	3910      	subs	r1, #16
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	4298      	cmp	r0, r3
 8002fea:	d301      	bcc.n	8002ff0 <__clzsi2+0x18>
 8002fec:	0a00      	lsrs	r0, r0, #8
 8002fee:	3908      	subs	r1, #8
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	4298      	cmp	r0, r3
 8002ff4:	d301      	bcc.n	8002ffa <__clzsi2+0x22>
 8002ff6:	0900      	lsrs	r0, r0, #4
 8002ff8:	3904      	subs	r1, #4
 8002ffa:	a202      	add	r2, pc, #8	; (adr r2, 8003004 <__clzsi2+0x2c>)
 8002ffc:	5c10      	ldrb	r0, [r2, r0]
 8002ffe:	1840      	adds	r0, r0, r1
 8003000:	4770      	bx	lr
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	02020304 	.word	0x02020304
 8003008:	01010101 	.word	0x01010101
	...

08003014 <__clzdi2>:
 8003014:	b510      	push	{r4, lr}
 8003016:	2900      	cmp	r1, #0
 8003018:	d103      	bne.n	8003022 <__clzdi2+0xe>
 800301a:	f7ff ffdd 	bl	8002fd8 <__clzsi2>
 800301e:	3020      	adds	r0, #32
 8003020:	e002      	b.n	8003028 <__clzdi2+0x14>
 8003022:	0008      	movs	r0, r1
 8003024:	f7ff ffd8 	bl	8002fd8 <__clzsi2>
 8003028:	bd10      	pop	{r4, pc}
 800302a:	46c0      	nop			; (mov r8, r8)

0800302c <Processor_type>:
 */


 // Function To find  type of MCU
char Processor_type(uint8_t module_name)
{
 800302c:	0003      	movs	r3, r0
	{
	  return 'F' ;
      }
    else
      {
	  return 'G';
 800302e:	2047      	movs	r0, #71	; 0x47
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8003030:	2b1b      	cmp	r3, #27
 8003032:	d804      	bhi.n	800303e <Processor_type+0x12>
 8003034:	4a02      	ldr	r2, [pc, #8]	; (8003040 <Processor_type+0x14>)
	  return 'G';
 8003036:	3846      	subs	r0, #70	; 0x46
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8003038:	40da      	lsrs	r2, r3
	  return 'G';
 800303a:	4390      	bics	r0, r2
 800303c:	3046      	adds	r0, #70	; 0x46
	  }
}
 800303e:	4770      	bx	lr
 8003040:	0f8ac7e0 	.word	0x0f8ac7e0

08003044 <Send_BOS_Message>:
{
	 return array[dst-1][0];
}

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout,uint8_t dst)
{
 8003044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003046:	46c6      	mov	lr, r8
 8003048:	0017      	movs	r7, r2
	 return array[dst-1][0];
 800304a:	2216      	movs	r2, #22
{
 800304c:	0006      	movs	r6, r0
 800304e:	b500      	push	{lr}
 8003050:	001d      	movs	r5, r3
 8003052:	ab06      	add	r3, sp, #24
 8003054:	7818      	ldrb	r0, [r3, #0]
	 return array[dst-1][0];
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <Send_BOS_Message+0x94>)
 8003058:	3801      	subs	r0, #1
 800305a:	4342      	muls	r2, r0
 800305c:	5ad3      	ldrh	r3, [r2, r3]
	uint8_t module_name=Get_Module_Name(dst);
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL)
 800305e:	0030      	movs	r0, r6
{
 8003060:	000c      	movs	r4, r1
	 return array[dst-1][0];
 8003062:	4698      	mov	r8, r3
	if(GetUart(port) != NULL)
 8003064:	f00a fd6c 	bl	800db40 <GetUart>
 8003068:	2800      	cmp	r0, #0
 800306a:	d024      	beq.n	80030b6 <Send_BOS_Message+0x72>
	{
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK)
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <Send_BOS_Message+0x98>)
 800306e:	00b2      	lsls	r2, r6, #2
 8003070:	0029      	movs	r1, r5
 8003072:	58d0      	ldr	r0, [r2, r3]
 8003074:	f00a fefa 	bl	800de6c <osSemaphoreWait>
 8003078:	2800      	cmp	r0, #0
 800307a:	d11c      	bne.n	80030b6 <Send_BOS_Message+0x72>
		{
			if(Processor_type(module_name)=='G')
 800307c:	4643      	mov	r3, r8
 800307e:	b2d8      	uxtb	r0, r3
 8003080:	f7ff ffd4 	bl	800302c <Processor_type>
 8003084:	2847      	cmp	r0, #71	; 0x47
 8003086:	d01e      	beq.n	80030c6 <Send_BOS_Message+0x82>
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
			}
			else
			{
			for(uint8_t i=0;i<n;i++)
 8003088:	2300      	movs	r3, #0
 800308a:	4698      	mov	r8, r3
 800308c:	2f00      	cmp	r7, #0
 800308e:	d012      	beq.n	80030b6 <Send_BOS_Message+0x72>
			  {
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8003090:	0030      	movs	r0, r6
 8003092:	f00a fd55 	bl	800db40 <GetUart>
 8003096:	2201      	movs	r2, #1
 8003098:	0021      	movs	r1, r4
 800309a:	f00f fdd5 	bl	8012c48 <HAL_UART_Transmit_IT>
 800309e:	0005      	movs	r5, r0
				buffer++;
				//Delay_us(500);
			 	Delay_ms(2);
 80030a0:	2002      	movs	r0, #2
 80030a2:	f00c fd97 	bl	800fbd4 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 80030a6:	4643      	mov	r3, r8
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4690      	mov	r8, r2
				buffer++;
 80030ae:	3401      	adds	r4, #1
			for(uint8_t i=0;i<n;i++)
 80030b0:	42ba      	cmp	r2, r7
 80030b2:	d3ed      	bcc.n	8003090 <Send_BOS_Message+0x4c>
 80030b4:	e000      	b.n	80030b8 <Send_BOS_Message+0x74>
	HAL_StatusTypeDef result =HAL_ERROR;
 80030b6:	2501      	movs	r5, #1
			  }
			}
		}
	}

	Delay_ms(10);// Delay Between Sending Two Messages.
 80030b8:	200a      	movs	r0, #10
 80030ba:	f00c fd8b 	bl	800fbd4 <HAL_Delay>
	return result;
}
 80030be:	0028      	movs	r0, r5
 80030c0:	bc80      	pop	{r7}
 80030c2:	46b8      	mov	r8, r7
 80030c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
 80030c6:	0030      	movs	r0, r6
 80030c8:	f00a fd3a 	bl	800db40 <GetUart>
 80030cc:	003a      	movs	r2, r7
 80030ce:	0021      	movs	r1, r4
 80030d0:	f00f fdba 	bl	8012c48 <HAL_UART_Transmit_IT>
 80030d4:	0005      	movs	r5, r0
 80030d6:	e7ef      	b.n	80030b8 <Send_BOS_Message+0x74>
 80030d8:	20000f84 	.word	0x20000f84
 80030dc:	20001f08 	.word	0x20001f08

080030e0 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 80030e4:	4922      	ldr	r1, [pc, #136]	; (8003170 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80030e6:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 80030e8:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80030ea:	b29a      	uxth	r2, r3
	if(temp == 0xFFFF)				// Memory has been erased
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d035      	beq.n	800315c <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 80030f0:	0a16      	lsrs	r6, r2, #8
		if(N == 0)
 80030f2:	d02c      	beq.n	800314e <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <LoadROtopology+0x94>)
 80030f6:	b2f6      	uxtb	r6, r6
 80030f8:	701e      	strb	r6, [r3, #0]
			N =1;
		myID =(uint8_t )temp;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <LoadROtopology+0x98>)
 80030fc:	701a      	strb	r2, [r3, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 80030fe:	466b      	mov	r3, sp
 8003100:	1dd9      	adds	r1, r3, #7
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003102:	2300      	movs	r3, #0
	uint16_t add =2, temp =0;
 8003104:	2202      	movs	r2, #2
		for(uint8_t i =1; i <= N; i++){
 8003106:	2501      	movs	r5, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003108:	469c      	mov	ip, r3
 800310a:	4c1c      	ldr	r4, [pc, #112]	; (800317c <LoadROtopology+0x9c>)
 800310c:	4663      	mov	r3, ip
 800310e:	700b      	strb	r3, [r1, #0]
 8003110:	780b      	ldrb	r3, [r1, #0]
 8003112:	2b0a      	cmp	r3, #10
 8003114:	d814      	bhi.n	8003140 <LoadROtopology+0x60>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8003116:	1e6b      	subs	r3, r5, #1
 8003118:	0098      	lsls	r0, r3, #2
 800311a:	18c0      	adds	r0, r0, r3
 800311c:	0040      	lsls	r0, r0, #1
 800311e:	18c0      	adds	r0, r0, r3
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <LoadROtopology+0x8c>)
 8003122:	18d7      	adds	r7, r2, r3
 8003124:	780b      	ldrb	r3, [r1, #0]
 8003126:	883f      	ldrh	r7, [r7, #0]
 8003128:	18c3      	adds	r3, r0, r3
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	52e7      	strh	r7, [r4, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800312e:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8003130:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003132:	3301      	adds	r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	700b      	strb	r3, [r1, #0]
 8003138:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 800313a:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800313c:	2b0a      	cmp	r3, #10
 800313e:	d9ef      	bls.n	8003120 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8003140:	3501      	adds	r5, #1
 8003142:	b2ed      	uxtb	r5, r5
 8003144:	42ae      	cmp	r6, r5
 8003146:	d2e1      	bcs.n	800310c <LoadROtopology+0x2c>
 8003148:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 800314a:	b003      	add	sp, #12
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 800314e:	2101      	movs	r1, #1
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8003152:	2601      	movs	r6, #1
			N =1;
 8003154:	7019      	strb	r1, [r3, #0]
		myID =(uint8_t )temp;
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <LoadROtopology+0x98>)
 8003158:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =1; i <= N; i++){
 800315a:	e7d0      	b.n	80030fe <LoadROtopology+0x1e>
		N =1;
 800315c:	2201      	movs	r2, #1
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8003160:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8003162:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003164:	2200      	movs	r2, #0
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <LoadROtopology+0x98>)
 8003168:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 800316a:	e7ee      	b.n	800314a <LoadROtopology+0x6a>
 800316c:	0801d800 	.word	0x0801d800
 8003170:	0000ffff 	.word	0x0000ffff
 8003174:	20000008 	.word	0x20000008
 8003178:	20000aa8 	.word	0x20000aa8
 800317c:	20000f84 	.word	0x20000f84

08003180 <LoadEEalias>:
}

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	4657      	mov	r7, sl
 8003184:	464e      	mov	r6, r9
 8003186:	46de      	mov	lr, fp
 8003188:	4645      	mov	r5, r8
 800318a:	b5e0      	push	{r5, r6, r7, lr}
 800318c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 800318e:	466b      	mov	r3, sp
 8003190:	1d9e      	adds	r6, r3, #6
 8003192:	2300      	movs	r3, #0
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003194:	4698      	mov	r8, r3
	uint16_t add =0, temp =0;
 8003196:	8033      	strh	r3, [r6, #0]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <LoadEEalias+0x80>)
	uint16_t add =0, temp =0;
 800319a:	2721      	movs	r7, #33	; 0x21
 800319c:	469a      	mov	sl, r3
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <LoadEEalias+0x84>)
 80031a0:	469b      	mov	fp, r3
 80031a2:	4643      	mov	r3, r8
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	001d      	movs	r5, r3
 80031a8:	4699      	mov	r9, r3
 80031aa:	4445      	add	r5, r8
 80031ac:	1f7c      	subs	r4, r7, #5
 80031ae:	006d      	lsls	r5, r5, #1
 80031b0:	b2a4      	uxth	r4, r4
 80031b2:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80031b4:	0020      	movs	r0, r4
 80031b6:	0031      	movs	r1, r6
 80031b8:	f008 fbd8 	bl	800b96c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80031bc:	8833      	ldrh	r3, [r6, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031be:	3401      	adds	r4, #1
			moduleAlias[i][j] =(uint8_t )temp;
 80031c0:	706b      	strb	r3, [r5, #1]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031c2:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031c8:	3502      	adds	r5, #2
 80031ca:	42bc      	cmp	r4, r7
 80031cc:	d1f2      	bne.n	80031b4 <LoadEEalias+0x34>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80031ce:	464f      	mov	r7, r9
 80031d0:	2300      	movs	r3, #0
 80031d2:	4447      	add	r7, r8
 80031d4:	007f      	lsls	r7, r7, #1
 80031d6:	4457      	add	r7, sl
 80031d8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80031da:	4643      	mov	r3, r8
 80031dc:	3301      	adds	r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4698      	mov	r8, r3
 80031e2:	465b      	mov	r3, fp
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	3405      	adds	r4, #5
 80031e8:	b2a7      	uxth	r7, r4
 80031ea:	4543      	cmp	r3, r8
 80031ec:	d2d9      	bcs.n	80031a2 <LoadEEalias+0x22>
	}
	
	return result;
}
 80031ee:	2000      	movs	r0, #0
 80031f0:	b003      	add	sp, #12
 80031f2:	bcf0      	pop	{r4, r5, r6, r7}
 80031f4:	46bb      	mov	fp, r7
 80031f6:	46b2      	mov	sl, r6
 80031f8:	46a9      	mov	r9, r5
 80031fa:	46a0      	mov	r8, r4
 80031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000e74 	.word	0x20000e74
 8003204:	20000008 	.word	0x20000008

08003208 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	4646      	mov	r6, r8
 800320c:	46d6      	mov	lr, sl
 800320e:	464f      	mov	r7, r9
 8003210:	b5c0      	push	{r6, r7, lr}
 8003212:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003214:	466b      	mov	r3, sp
 8003216:	1d9e      	adds	r6, r3, #6
 8003218:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800321a:	4d23      	ldr	r5, [pc, #140]	; (80032a8 <LoadEEgroup+0xa0>)
	uint16_t add =0, temp =0;
 800321c:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 800321e:	782b      	ldrb	r3, [r5, #0]
	uint16_t add =0, temp =0;
 8003220:	2400      	movs	r4, #0
	for(i =0; i < N; i++)			// N modules
 8003222:	2b00      	cmp	r3, #0
 8003224:	d03c      	beq.n	80032a0 <LoadEEgroup+0x98>
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <LoadEEgroup+0xa4>)
 8003228:	2100      	movs	r1, #0
 800322a:	4698      	mov	r8, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800322c:	1d1f      	adds	r7, r3, #4
 800322e:	0020      	movs	r0, r4
 8003230:	0049      	lsls	r1, r1, #1
 8003232:	30cb      	adds	r0, #203	; 0xcb
 8003234:	1879      	adds	r1, r7, r1
 8003236:	b280      	uxth	r0, r0
 8003238:	f008 fb98 	bl	800b96c <EE_ReadVariable>
		add++;
 800323c:	1c61      	adds	r1, r4, #1
	for(i =0; i < N; i++)			// N modules
 800323e:	782b      	ldrb	r3, [r5, #0]
		add++;
 8003240:	b28c      	uxth	r4, r1
	for(i =0; i < N; i++)			// N modules
 8003242:	b2c9      	uxtb	r1, r1
 8003244:	428b      	cmp	r3, r1
 8003246:	d8f2      	bhi.n	800322e <LoadEEgroup+0x26>
 8003248:	2338      	movs	r3, #56	; 0x38
 800324a:	0027      	movs	r7, r4
 800324c:	34d0      	adds	r4, #208	; 0xd0
 800324e:	469c      	mov	ip, r3
 8003250:	b2a3      	uxth	r3, r4
 8003252:	4699      	mov	r9, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003254:	2300      	movs	r3, #0
 8003256:	469a      	mov	sl, r3
 8003258:	379e      	adds	r7, #158	; 0x9e
 800325a:	44e0      	add	r8, ip
 800325c:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 800325e:	4645      	mov	r5, r8
 8003260:	1f7c      	subs	r4, r7, #5
 8003262:	b2a4      	uxth	r4, r4
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003264:	0020      	movs	r0, r4
 8003266:	0031      	movs	r1, r6
 8003268:	f008 fb80 	bl	800b96c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 800326c:	8833      	ldrh	r3, [r6, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800326e:	3401      	adds	r4, #1
			groupAlias[i][j] =(uint8_t )temp;
 8003270:	706b      	strb	r3, [r5, #1]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003272:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003278:	3502      	adds	r5, #2
 800327a:	42a7      	cmp	r7, r4
 800327c:	d1f2      	bne.n	8003264 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800327e:	4643      	mov	r3, r8
 8003280:	4652      	mov	r2, sl
 8003282:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003284:	230a      	movs	r3, #10
 8003286:	469c      	mov	ip, r3
 8003288:	3705      	adds	r7, #5
 800328a:	b2bf      	uxth	r7, r7
 800328c:	44e0      	add	r8, ip
 800328e:	454f      	cmp	r7, r9
 8003290:	d1e5      	bne.n	800325e <LoadEEgroup+0x56>
	}
	
	return result;
}
 8003292:	2000      	movs	r0, #0
 8003294:	b002      	add	sp, #8
 8003296:	bce0      	pop	{r5, r6, r7}
 8003298:	46ba      	mov	sl, r7
 800329a:	46b1      	mov	r9, r6
 800329c:	46a8      	mov	r8, r5
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <LoadEEgroup+0xa4>)
 80032a2:	4698      	mov	r8, r3
 80032a4:	e7d0      	b.n	8003248 <LoadEEgroup+0x40>
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000008 	.word	0x20000008
 80032ac:	20000aa8 	.word	0x20000aa8

080032b0 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80032b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b2:	b085      	sub	sp, #20
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	466a      	mov	r2, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80032b8:	20e4      	movs	r0, #228	; 0xe4
 80032ba:	a903      	add	r1, sp, #12
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80032bc:	8193      	strh	r3, [r2, #12]
 80032be:	81d3      	strh	r3, [r2, #14]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80032c0:	f008 fb54 	bl	800b96c <EE_ReadVariable>
	uint8_t direction =0;
 80032c4:	2500      	movs	r5, #0
	if(!status1){
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d101      	bne.n	80032ce <LoadEEstreams+0x1e>
		direction =(uint8_t )temp1;
 80032ca:	466b      	mov	r3, sp
 80032cc:	7b1d      	ldrb	r5, [r3, #12]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80032ce:	a903      	add	r1, sp, #12
 80032d0:	20e5      	movs	r0, #229	; 0xe5
 80032d2:	f008 fb4b 	bl	800b96c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80032d6:	230e      	movs	r3, #14
 80032d8:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80032da:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80032dc:	0019      	movs	r1, r3
 80032de:	20e6      	movs	r0, #230	; 0xe6
 80032e0:	f008 fb44 	bl	800b96c <EE_ReadVariable>
	if(!status1 && !status2){
 80032e4:	4304      	orrs	r4, r0
 80032e6:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80032e8:	2600      	movs	r6, #0
	if(!status1 && !status2){
 80032ea:	2c00      	cmp	r4, #0
 80032ec:	d104      	bne.n	80032f8 <LoadEEstreams+0x48>
		count =((uint32_t )temp1 << 16) + temp2;
 80032ee:	466b      	mov	r3, sp
 80032f0:	899e      	ldrh	r6, [r3, #12]
 80032f2:	89db      	ldrh	r3, [r3, #14]
 80032f4:	0436      	lsls	r6, r6, #16
 80032f6:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80032f8:	a903      	add	r1, sp, #12
 80032fa:	20e7      	movs	r0, #231	; 0xe7
 80032fc:	f008 fb36 	bl	800b96c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003300:	230e      	movs	r3, #14
 8003302:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003304:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003306:	0019      	movs	r1, r3
 8003308:	20e8      	movs	r0, #232	; 0xe8
 800330a:	f008 fb2f 	bl	800b96c <EE_ReadVariable>
	if(!status1 && !status2){
 800330e:	4304      	orrs	r4, r0
 8003310:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8003312:	2700      	movs	r7, #0
	if(!status1 && !status2){
 8003314:	2c00      	cmp	r4, #0
 8003316:	d104      	bne.n	8003322 <LoadEEstreams+0x72>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003318:	466b      	mov	r3, sp
 800331a:	899f      	ldrh	r7, [r3, #12]
 800331c:	89db      	ldrh	r3, [r3, #14]
 800331e:	043f      	lsls	r7, r7, #16
 8003320:	18ff      	adds	r7, r7, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003322:	20e9      	movs	r0, #233	; 0xe9
 8003324:	a903      	add	r1, sp, #12
 8003326:	f008 fb21 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 800332a:	2800      	cmp	r0, #0
 800332c:	d02f      	beq.n	800338e <LoadEEstreams+0xde>
 800332e:	4c26      	ldr	r4, [pc, #152]	; (80033c8 <LoadEEstreams+0x118>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003330:	20ea      	movs	r0, #234	; 0xea
 8003332:	a903      	add	r1, sp, #12
 8003334:	f008 fb1a 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 8003338:	2800      	cmp	r0, #0
 800333a:	d104      	bne.n	8003346 <LoadEEstreams+0x96>
		src2 =(uint8_t )(temp1 >> 8);
 800333c:	466b      	mov	r3, sp
 800333e:	899b      	ldrh	r3, [r3, #12]
 8003340:	0a1a      	lsrs	r2, r3, #8
 8003342:	77a2      	strb	r2, [r4, #30]
		dst2 =(uint8_t )temp1;
 8003344:	77e3      	strb	r3, [r4, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003346:	20eb      	movs	r0, #235	; 0xeb
 8003348:	a903      	add	r1, sp, #12
 800334a:	f008 fb0f 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 800334e:	2800      	cmp	r0, #0
 8003350:	d106      	bne.n	8003360 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8003352:	466b      	mov	r3, sp
 8003354:	2220      	movs	r2, #32
 8003356:	899b      	ldrh	r3, [r3, #12]
 8003358:	0a19      	lsrs	r1, r3, #8
 800335a:	54a1      	strb	r1, [r4, r2]
		dst3 =(uint8_t )temp1;
 800335c:	3201      	adds	r2, #1
 800335e:	54a3      	strb	r3, [r4, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003360:	7f23      	ldrb	r3, [r4, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <LoadEEstreams+0xbc>
 8003366:	7f62      	ldrb	r2, [r4, #29]
 8003368:	2a00      	cmp	r2, #0
 800336a:	d11e      	bne.n	80033aa <LoadEEstreams+0xfa>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800336c:	7fa3      	ldrb	r3, [r4, #30]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <LoadEEstreams+0xc8>
 8003372:	7fe2      	ldrb	r2, [r4, #31]
 8003374:	2a00      	cmp	r2, #0
 8003376:	d11f      	bne.n	80033b8 <LoadEEstreams+0x108>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003378:	2320      	movs	r3, #32
 800337a:	5ce3      	ldrb	r3, [r4, r3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <LoadEEstreams+0xd8>
 8003380:	2221      	movs	r2, #33	; 0x21
 8003382:	5ca2      	ldrb	r2, [r4, r2]
 8003384:	2a00      	cmp	r2, #0
 8003386:	d109      	bne.n	800339c <LoadEEstreams+0xec>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003388:	2000      	movs	r0, #0
 800338a:	b005      	add	sp, #20
 800338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800338e:	466b      	mov	r3, sp
 8003390:	899b      	ldrh	r3, [r3, #12]
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <LoadEEstreams+0x118>)
 8003394:	0a1a      	lsrs	r2, r3, #8
 8003396:	7722      	strb	r2, [r4, #28]
		dst1 =(uint8_t )temp1;
 8003398:	7763      	strb	r3, [r4, #29]
 800339a:	e7c9      	b.n	8003330 <LoadEEstreams+0x80>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	0031      	movs	r1, r6
 80033a0:	003a      	movs	r2, r7
 80033a2:	0028      	movs	r0, r5
 80033a4:	f004 fcea 	bl	8007d7c <SetupDMAStreams>
 80033a8:	e7ee      	b.n	8003388 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	0031      	movs	r1, r6
 80033ae:	003a      	movs	r2, r7
 80033b0:	0028      	movs	r0, r5
 80033b2:	f004 fce3 	bl	8007d7c <SetupDMAStreams>
 80033b6:	e7d9      	b.n	800336c <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80033b8:	9200      	str	r2, [sp, #0]
 80033ba:	0031      	movs	r1, r6
 80033bc:	003a      	movs	r2, r7
 80033be:	0028      	movs	r0, r5
 80033c0:	f004 fcdc 	bl	8007d7c <SetupDMAStreams>
 80033c4:	e7d8      	b.n	8003378 <LoadEEstreams+0xc8>
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000b28 	.word	0x20000b28

080033cc <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80033cc:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80033ce:	b530      	push	{r4, r5, lr}
 80033d0:	b083      	sub	sp, #12
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80033d2:	a901      	add	r1, sp, #4
 80033d4:	0040      	lsls	r0, r0, #1
 80033d6:	f008 fac9 	bl	800b96c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
		BOSMessaging.response =(uint8_t )temp1;
 80033da:	4c53      	ldr	r4, [pc, #332]	; (8003528 <LoadEEparams+0x15c>)
	if(!status1){
 80033dc:	2800      	cmp	r0, #0
 80033de:	d15e      	bne.n	800349e <LoadEEparams+0xd2>
		BOSMessaging.response =(uint8_t )temp1;
 80033e0:	466b      	mov	r3, sp
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033e2:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80033e4:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033e6:	a901      	add	r1, sp, #4
		BOSMessaging.response =(uint8_t )temp1;
 80033e8:	84a3      	strh	r3, [r4, #36]	; 0x24
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033ea:	0040      	lsls	r0, r0, #1
 80033ec:	f008 fabe 	bl	800b96c <EE_ReadVariable>

	if(!status1){
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d15e      	bne.n	80034b2 <LoadEEparams+0xe6>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80033f4:	466b      	mov	r3, sp
 80033f6:	0021      	movs	r1, r4
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033f8:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80033fa:	889b      	ldrh	r3, [r3, #4]
 80033fc:	3124      	adds	r1, #36	; 0x24
 80033fe:	0bda      	lsrs	r2, r3, #15
 8003400:	710a      	strb	r2, [r1, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003402:	085b      	lsrs	r3, r3, #1
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003404:	a901      	add	r1, sp, #4
 8003406:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003408:	8563      	strh	r3, [r4, #42]	; 0x2a
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800340a:	f008 faaf 	bl	800b96c <EE_ReadVariable>
	if(!status1)
 800340e:	2800      	cmp	r0, #0
 8003410:	d15d      	bne.n	80034ce <LoadEEparams+0x102>
		BOS.buttons.debounce =temp1;
 8003412:	466b      	mov	r3, sp
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003414:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003416:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003418:	a901      	add	r1, sp, #4
 800341a:	0040      	lsls	r0, r0, #1
 800341c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800341e:	f008 faa5 	bl	800b96c <EE_ReadVariable>
	if(!status1)
 8003422:	2800      	cmp	r0, #0
 8003424:	d15d      	bne.n	80034e2 <LoadEEparams+0x116>
		BOS.buttons.singleClickTime =temp1;
 8003426:	466b      	mov	r3, sp
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003428:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 800342a:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800342c:	a901      	add	r1, sp, #4
 800342e:	30ff      	adds	r0, #255	; 0xff
 8003430:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003432:	f008 fa9b 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 8003436:	2800      	cmp	r0, #0
 8003438:	d15d      	bne.n	80034f6 <LoadEEparams+0x12a>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 800343a:	466b      	mov	r3, sp
 800343c:	889b      	ldrh	r3, [r3, #4]
 800343e:	8623      	strh	r3, [r4, #48]	; 0x30
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003440:	208c      	movs	r0, #140	; 0x8c
 8003442:	a901      	add	r1, sp, #4
 8003444:	0040      	lsls	r0, r0, #1
 8003446:	f008 fa91 	bl	800b96c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800344a:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800344c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800344e:	201a      	movs	r0, #26
 8003450:	1d99      	adds	r1, r3, #6
 8003452:	30ff      	adds	r0, #255	; 0xff
 8003454:	f008 fa8a 	bl	800b96c <EE_ReadVariable>
	if(!status1 && !status2){
 8003458:	4305      	orrs	r5, r0
 800345a:	b2ad      	uxth	r5, r5
 800345c:	2d00      	cmp	r5, #0
 800345e:	d156      	bne.n	800350e <LoadEEparams+0x142>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003460:	466b      	mov	r3, sp
 8003462:	466a      	mov	r2, sp
 8003464:	88db      	ldrh	r3, [r3, #6]
 8003466:	8892      	ldrh	r2, [r2, #4]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	4313      	orrs	r3, r2
 800346c:	6363      	str	r3, [r4, #52]	; 0x34
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800346e:	208d      	movs	r0, #141	; 0x8d
 8003470:	a901      	add	r1, sp, #4
 8003472:	0040      	lsls	r0, r0, #1
 8003474:	f008 fa7a 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 8003478:	2800      	cmp	r0, #0
 800347a:	d144      	bne.n	8003506 <LoadEEparams+0x13a>
		BOS.daylightsaving =(int8_t )temp1;
 800347c:	466b      	mov	r3, sp
 800347e:	889b      	ldrh	r3, [r3, #4]
 8003480:	8723      	strh	r3, [r4, #56]	; 0x38
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003482:	201c      	movs	r0, #28
 8003484:	a901      	add	r1, sp, #4
 8003486:	30ff      	adds	r0, #255	; 0xff
 8003488:	f008 fa70 	bl	800b96c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800348c:	2800      	cmp	r0, #0
 800348e:	d136      	bne.n	80034fe <LoadEEparams+0x132>
		BOS.disableCLI =(uint8_t )temp1;
 8003490:	466b      	mov	r3, sp
 8003492:	791b      	ldrb	r3, [r3, #4]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 8003494:	2000      	movs	r0, #0
 8003496:	342c      	adds	r4, #44	; 0x2c
 8003498:	76a3      	strb	r3, [r4, #26]
 800349a:	b003      	add	sp, #12
 800349c:	bd30      	pop	{r4, r5, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800349e:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80034a2:	a901      	add	r1, sp, #4
		BOSMessaging.response =BOSMessging_default.response;
 80034a4:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80034a6:	0040      	lsls	r0, r0, #1
		BOSMessaging.response =BOSMessging_default.response;
 80034a8:	84a3      	strh	r3, [r4, #36]	; 0x24
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80034aa:	f008 fa5f 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d0a0      	beq.n	80033f4 <LoadEEparams+0x28>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80034b2:	0022      	movs	r2, r4
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80034b4:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <LoadEEparams+0x160>)
 80034b8:	3224      	adds	r2, #36	; 0x24
 80034ba:	7a19      	ldrb	r1, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80034bc:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80034be:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80034c0:	895b      	ldrh	r3, [r3, #10]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80034c2:	a901      	add	r1, sp, #4
		BOSMessaging.trial=BOSMessging_default.trial;
 80034c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80034c6:	f008 fa51 	bl	800b96c <EE_ReadVariable>
	if(!status1)
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d0a1      	beq.n	8003412 <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80034ce:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80034d2:	a901      	add	r1, sp, #4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80034d4:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80034d6:	0040      	lsls	r0, r0, #1
 80034d8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80034da:	f008 fa47 	bl	800b96c <EE_ReadVariable>
	if(!status1)
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0a1      	beq.n	8003426 <LoadEEparams+0x5a>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80034e2:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80034e6:	a901      	add	r1, sp, #4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80034e8:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80034ea:	30ff      	adds	r0, #255	; 0xff
 80034ec:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80034ee:	f008 fa3d 	bl	800b96c <EE_ReadVariable>
	if(!status1){
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d0a1      	beq.n	800343a <LoadEEparams+0x6e>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <LoadEEparams+0x160>)
 80034f8:	8a1b      	ldrh	r3, [r3, #16]
 80034fa:	8623      	strh	r3, [r4, #48]	; 0x30
 80034fc:	e7a0      	b.n	8003440 <LoadEEparams+0x74>
		BOS.disableCLI =BOS_default.disableCLI;
 80034fe:	2326      	movs	r3, #38	; 0x26
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <LoadEEparams+0x160>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	e7c6      	b.n	8003494 <LoadEEparams+0xc8>
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003506:	23c0      	movs	r3, #192	; 0xc0
 8003508:	015b      	lsls	r3, r3, #5
 800350a:	8723      	strh	r3, [r4, #56]	; 0x38
 800350c:	e7b9      	b.n	8003482 <LoadEEparams+0xb6>
	else if(CLI_LOW_Baudrate_Flag)
 800350e:	2348      	movs	r3, #72	; 0x48
 8003510:	5ce3      	ldrb	r3, [r4, r3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003516:	23e1      	movs	r3, #225	; 0xe1
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	6363      	str	r3, [r4, #52]	; 0x34
 800351c:	e7a7      	b.n	800346e <LoadEEparams+0xa2>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800351e:	4b03      	ldr	r3, [pc, #12]	; (800352c <LoadEEparams+0x160>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	6363      	str	r3, [r4, #52]	; 0x34
 8003524:	e7a3      	b.n	800346e <LoadEEparams+0xa2>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000b28 	.word	0x20000b28
 800352c:	20000008 	.word	0x20000008

08003530 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	464f      	mov	r7, r9
 8003534:	4646      	mov	r6, r8
 8003536:	46d6      	mov	lr, sl
 8003538:	b5c0      	push	{r6, r7, lr}
 800353a:	b088      	sub	sp, #32
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800353c:	2300      	movs	r3, #0
 800353e:	466a      	mov	r2, sp
 8003540:	83d3      	strh	r3, [r2, #30]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003542:	330f      	adds	r3, #15
 8003544:	4698      	mov	r8, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003546:	3b0e      	subs	r3, #14
 8003548:	4699      	mov	r9, r3
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800354a:	3304      	adds	r3, #4
 800354c:	33ff      	adds	r3, #255	; 0xff
	uint16_t temp16 =0, status1 =0;
 800354e:	2701      	movs	r7, #1
 8003550:	24ec      	movs	r4, #236	; 0xec
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003552:	469a      	mov	sl, r3
 8003554:	4e33      	ldr	r6, [pc, #204]	; (8003624 <LoadEEbuttons+0xf4>)
 8003556:	e006      	b.n	8003566 <LoadEEbuttons+0x36>
 8003558:	3404      	adds	r4, #4
 800355a:	3701      	adds	r7, #1
 800355c:	b2a4      	uxth	r4, r4
 800355e:	b2ff      	uxtb	r7, r7
 8003560:	3609      	adds	r6, #9
 8003562:	4554      	cmp	r4, sl
 8003564:	d057      	beq.n	8003616 <LoadEEbuttons+0xe6>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003566:	231e      	movs	r3, #30
 8003568:	446b      	add	r3, sp
 800356a:	0019      	movs	r1, r3
 800356c:	0020      	movs	r0, r4
 800356e:	f008 f9fd 	bl	800b96c <EE_ReadVariable>
 8003572:	1e05      	subs	r5, r0, #0
		if(!status1)									// This variable exists
 8003574:	d1f0      	bne.n	8003558 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003576:	466b      	mov	r3, sp
 8003578:	8bdb      	ldrh	r3, [r3, #30]
 800357a:	0a19      	lsrs	r1, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800357c:	0b1a      	lsrs	r2, r3, #12
 800357e:	42ba      	cmp	r2, r7
 8003580:	d1ea      	bne.n	8003558 <LoadEEbuttons+0x28>
 8003582:	4642      	mov	r2, r8
 8003584:	4640      	mov	r0, r8
 8003586:	400a      	ands	r2, r1
 8003588:	4208      	tst	r0, r1
 800358a:	d0e5      	beq.n	8003558 <LoadEEbuttons+0x28>
				button[i + 1].events =(uint8_t )temp16;
 800358c:	71f3      	strb	r3, [r6, #7]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800358e:	231e      	movs	r3, #30
 8003590:	1c60      	adds	r0, r4, #1
 8003592:	446b      	add	r3, sp
 8003594:	0019      	movs	r1, r3
				button[i + 1].type =temp8 & 0x0F;
 8003596:	7032      	strb	r2, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003598:	b280      	uxth	r0, r0
 800359a:	f008 f9e7 	bl	800b96c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800359e:	466b      	mov	r3, sp
 80035a0:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80035a2:	1ca0      	adds	r0, r4, #2
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80035a4:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80035a6:	7133      	strb	r3, [r6, #4]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80035a8:	231e      	movs	r3, #30
 80035aa:	446b      	add	r3, sp
 80035ac:	0019      	movs	r1, r3
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80035ae:	7072      	strb	r2, [r6, #1]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80035b0:	b280      	uxth	r0, r0
 80035b2:	f008 f9db 	bl	800b96c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80035b6:	466b      	mov	r3, sp
 80035b8:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80035ba:	1ce0      	adds	r0, r4, #3
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80035bc:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80035be:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80035c0:	231e      	movs	r3, #30
 80035c2:	446b      	add	r3, sp
 80035c4:	0019      	movs	r1, r3
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80035c6:	70b2      	strb	r2, [r6, #2]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80035c8:	b280      	uxth	r0, r0
 80035ca:	f008 f9cf 	bl	800b96c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80035ce:	466b      	mov	r3, sp
 80035d0:	8bdb      	ldrh	r3, [r3, #30]
				AddPortButton(button[i + 1].type,i + 1);
 80035d2:	0039      	movs	r1, r7
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80035d4:	0a1a      	lsrs	r2, r3, #8
 80035d6:	70f2      	strb	r2, [r6, #3]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80035d8:	71b3      	strb	r3, [r6, #6]
				AddPortButton(button[i + 1].type,i + 1);
 80035da:	7830      	ldrb	r0, [r6, #0]
 80035dc:	f008 fdce 	bl	800c17c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80035e0:	4648      	mov	r0, r9
 80035e2:	79f1      	ldrb	r1, [r6, #7]
 80035e4:	7873      	ldrb	r3, [r6, #1]
 80035e6:	104a      	asrs	r2, r1, #1
 80035e8:	9505      	str	r5, [sp, #20]
 80035ea:	4002      	ands	r2, r0
 80035ec:	4001      	ands	r1, r0
 80035ee:	79b0      	ldrb	r0, [r6, #6]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80035f0:	3404      	adds	r4, #4
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80035f2:	9004      	str	r0, [sp, #16]
 80035f4:	7970      	ldrb	r0, [r6, #5]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80035f6:	b2a4      	uxth	r4, r4
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80035f8:	9003      	str	r0, [sp, #12]
 80035fa:	7930      	ldrb	r0, [r6, #4]
 80035fc:	9002      	str	r0, [sp, #8]
 80035fe:	78f0      	ldrb	r0, [r6, #3]
 8003600:	9001      	str	r0, [sp, #4]
 8003602:	78b0      	ldrb	r0, [r6, #2]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003604:	3609      	adds	r6, #9
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003606:	9000      	str	r0, [sp, #0]
 8003608:	0038      	movs	r0, r7
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800360a:	3701      	adds	r7, #1
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800360c:	f008 febc 	bl	800c388 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003610:	b2ff      	uxtb	r7, r7
 8003612:	4554      	cmp	r4, sl
 8003614:	d1a7      	bne.n	8003566 <LoadEEbuttons+0x36>
			}
		}
	}
	
	return result;
}
 8003616:	2000      	movs	r0, #0
 8003618:	b008      	add	sp, #32
 800361a:	bce0      	pop	{r5, r6, r7}
 800361c:	46ba      	mov	sl, r7
 800361e:	46b1      	mov	r9, r6
 8003620:	46a8      	mov	r8, r5
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003624:	20002856 	.word	0x20002856

08003628 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	46d6      	mov	lr, sl
 800362c:	4646      	mov	r6, r8
 800362e:	464f      	mov	r7, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003630:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003632:	b5c0      	push	{r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003634:	f010 f874 	bl	8013720 <malloc>
 8003638:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 800363a:	d06c      	beq.n	8003716 <LoadROsnippets+0xee>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800363c:	4c37      	ldr	r4, [pc, #220]	; (800371c <LoadROsnippets+0xf4>)
 800363e:	7823      	ldrb	r3, [r4, #0]
 8003640:	2bfe      	cmp	r3, #254	; 0xfe
 8003642:	d157      	bne.n	80036f4 <LoadROsnippets+0xcc>
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	4699      	mov	r9, r3
 8003648:	2364      	movs	r3, #100	; 0x64
 800364a:	469a      	mov	sl, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <LoadROsnippets+0xf8>)
 800364e:	4f35      	ldr	r7, [pc, #212]	; (8003724 <LoadROsnippets+0xfc>)
 8003650:	4698      	mov	r8, r3
 8003652:	44ba      	add	sl, r7
		for(i =0; i < sizeof(snippet_t); i++)
 8003654:	0021      	movs	r1, r4
BOS_Status LoadROsnippets(void){
 8003656:	0023      	movs	r3, r4
 8003658:	3114      	adds	r1, #20
 800365a:	1b35      	subs	r5, r6, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	54ea      	strb	r2, [r5, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 8003660:	3301      	adds	r3, #1
 8003662:	428b      	cmp	r3, r1
 8003664:	d1fa      	bne.n	800365c <LoadROsnippets+0x34>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003666:	2214      	movs	r2, #20
 8003668:	4649      	mov	r1, r9
 800366a:	0038      	movs	r0, r7
 800366c:	f010 fa8c 	bl	8013b88 <memcpy>
		currentAdd=currentAdd+20;
 8003670:	3428      	adds	r4, #40	; 0x28
		memset(snipBuffer,0,sizeof(snippet_t));
 8003672:	2214      	movs	r2, #20
 8003674:	2100      	movs	r1, #0
 8003676:	0030      	movs	r0, r6
 8003678:	f010 fa8f 	bl	8013b9a <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800367c:	7822      	ldrb	r2, [r4, #0]
 800367e:	2afd      	cmp	r2, #253	; 0xfd
 8003680:	d83a      	bhi.n	80036f8 <LoadROsnippets+0xd0>
		i =0;
 8003682:	2300      	movs	r3, #0
 8003684:	3d28      	subs	r5, #40	; 0x28
 8003686:	e001      	b.n	800368c <LoadROsnippets+0x64>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003688:	2b32      	cmp	r3, #50	; 0x32
 800368a:	d030      	beq.n	80036ee <LoadROsnippets+0xc6>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 800368c:	552a      	strb	r2, [r5, r4]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800368e:	7862      	ldrb	r2, [r4, #1]
			++i;
 8003690:	3301      	adds	r3, #1
			++currentAdd;
 8003692:	3401      	adds	r4, #1
			++i;
 8003694:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003696:	2afd      	cmp	r2, #253	; 0xfd
 8003698:	d9f6      	bls.n	8003688 <LoadROsnippets+0x60>
		if(snipBuffer[i - 1] != 0)
 800369a:	001d      	movs	r5, r3
 800369c:	1e5a      	subs	r2, r3, #1
 800369e:	5cb2      	ldrb	r2, [r6, r2]
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d001      	beq.n	80036a8 <LoadROsnippets+0x80>
			++i;	// String termination char was not recorded, then add one
 80036a4:	3301      	adds	r3, #1
		snippets[s].cmd =(char* )malloc(i);
 80036a6:	b2dd      	uxtb	r5, r3
 80036a8:	0028      	movs	r0, r5
 80036aa:	f010 f839 	bl	8013720 <malloc>
 80036ae:	60f8      	str	r0, [r7, #12]
		if(snippets[s].cmd == NULL){
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d026      	beq.n	8003702 <LoadROsnippets+0xda>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80036b4:	002a      	movs	r2, r5
 80036b6:	0031      	movs	r1, r6
 80036b8:	f010 fa66 	bl	8013b88 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80036bc:	4643      	mov	r3, r8
 80036be:	4642      	mov	r2, r8
 80036c0:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80036c2:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80036c4:	3301      	adds	r3, #1
 80036c6:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80036c8:	0030      	movs	r0, r6
 80036ca:	002a      	movs	r2, r5
 80036cc:	f010 fa65 	bl	8013b9a <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80036d0:	7823      	ldrb	r3, [r4, #0]
 80036d2:	2bfe      	cmp	r3, #254	; 0xfe
 80036d4:	d102      	bne.n	80036dc <LoadROsnippets+0xb4>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80036d6:	3714      	adds	r7, #20
 80036d8:	45ba      	cmp	sl, r7
 80036da:	d1bb      	bne.n	8003654 <LoadROsnippets+0x2c>
			break;
	}
	
	free(snipBuffer);
 80036dc:	0030      	movs	r0, r6
 80036de:	f010 f829 	bl	8013734 <free>
	return BOS_OK;
 80036e2:	2000      	movs	r0, #0
}
 80036e4:	bce0      	pop	{r5, r6, r7}
 80036e6:	46ba      	mov	sl, r7
 80036e8:	46b1      	mov	r9, r6
 80036ea:	46a8      	mov	r8, r5
 80036ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ee:	2231      	movs	r2, #49	; 0x31
 80036f0:	2532      	movs	r5, #50	; 0x32
 80036f2:	e7d4      	b.n	800369e <LoadROsnippets+0x76>
		return BOS_ERROR;
 80036f4:	20ff      	movs	r0, #255	; 0xff
 80036f6:	e7f5      	b.n	80036e4 <LoadROsnippets+0xbc>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80036f8:	2201      	movs	r2, #1
 80036fa:	2500      	movs	r5, #0
		i =0;
 80036fc:	2300      	movs	r3, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80036fe:	4252      	negs	r2, r2
 8003700:	e7cd      	b.n	800369e <LoadROsnippets+0x76>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003702:	2214      	movs	r2, #20
 8003704:	2100      	movs	r1, #0
 8003706:	0038      	movs	r0, r7
 8003708:	f010 fa47 	bl	8013b9a <memset>
			free(snipBuffer);
 800370c:	0030      	movs	r0, r6
 800370e:	f010 f811 	bl	8013734 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003712:	200e      	movs	r0, #14
 8003714:	e7e6      	b.n	80036e4 <LoadROsnippets+0xbc>
		return BOS_MEM_FULL;
 8003716:	20fb      	movs	r0, #251	; 0xfb
 8003718:	e7e4      	b.n	80036e4 <LoadROsnippets+0xbc>
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	0801dc00 	.word	0x0801dc00
 8003720:	200017ac 	.word	0x200017ac
 8003724:	200017b0 	.word	0x200017b0

08003728 <LoadEEvars>:
void LoadEEvars(void){
 8003728:	b570      	push	{r4, r5, r6, lr}
	LoadROtopology();
 800372a:	f7ff fcd9 	bl	80030e0 <LoadROtopology>
	for(uint8_t i =1; i <= N; i++){
 800372e:	4c0f      	ldr	r4, [pc, #60]	; (800376c <LoadEEvars+0x44>)
 8003730:	7823      	ldrb	r3, [r4, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <LoadEEvars+0x28>
 8003736:	2001      	movs	r0, #1
 8003738:	4d0d      	ldr	r5, [pc, #52]	; (8003770 <LoadEEvars+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800373a:	1e41      	subs	r1, r0, #1
 800373c:	1c46      	adds	r6, r0, #1
 800373e:	0049      	lsls	r1, r1, #1
 8003740:	0030      	movs	r0, r6
 8003742:	1869      	adds	r1, r5, r1
 8003744:	f008 f912 	bl	800b96c <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8003748:	7823      	ldrb	r3, [r4, #0]
 800374a:	b2f0      	uxtb	r0, r6
 800374c:	4283      	cmp	r3, r0
 800374e:	d2f4      	bcs.n	800373a <LoadEEvars+0x12>
	LoadEEalias();
 8003750:	f7ff fd16 	bl	8003180 <LoadEEalias>
	LoadEEgroup();
 8003754:	f7ff fd58 	bl	8003208 <LoadEEgroup>
	LoadEEstreams();
 8003758:	f7ff fdaa 	bl	80032b0 <LoadEEstreams>
	LoadEEparams();
 800375c:	f7ff fe36 	bl	80033cc <LoadEEparams>
	LoadEEbuttons();
 8003760:	f7ff fee6 	bl	8003530 <LoadEEbuttons>
	LoadROsnippets();
 8003764:	f7ff ff60 	bl	8003628 <LoadROsnippets>
}
 8003768:	bd70      	pop	{r4, r5, r6, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000008 	.word	0x20000008
 8003770:	200029e4 	.word	0x200029e4

08003774 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	46c6      	mov	lr, r8
 8003778:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800377a:	4e10      	ldr	r6, [pc, #64]	; (80037bc <SaveEEportsDir+0x48>)
 800377c:	7833      	ldrb	r3, [r6, #0]
 800377e:	4698      	mov	r8, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <SaveEEportsDir+0x3e>
	BOS_Status result =BOS_OK;
 8003784:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003786:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003788:	4698      	mov	r8, r3
 800378a:	4f0d      	ldr	r7, [pc, #52]	; (80037c0 <SaveEEportsDir+0x4c>)
 800378c:	e007      	b.n	800379e <SaveEEportsDir+0x2a>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800378e:	2c19      	cmp	r4, #25
 8003790:	d901      	bls.n	8003796 <SaveEEportsDir+0x22>
			result =BOS_ERR_EEPROM;
 8003792:	230a      	movs	r3, #10
 8003794:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003796:	7833      	ldrb	r3, [r6, #0]
 8003798:	b2ec      	uxtb	r4, r5
 800379a:	42a3      	cmp	r3, r4
 800379c:	d309      	bcc.n	80037b2 <SaveEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 800379e:	1e63      	subs	r3, r4, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	5af9      	ldrh	r1, [r7, r3]
 80037a4:	1c65      	adds	r5, r4, #1
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d0f1      	beq.n	800378e <SaveEEportsDir+0x1a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80037aa:	b2a8      	uxth	r0, r5
 80037ac:	f008 f90a 	bl	800b9c4 <EE_WriteVariable>
 80037b0:	e7ed      	b.n	800378e <SaveEEportsDir+0x1a>
	}
	
	return result;
}
 80037b2:	4640      	mov	r0, r8
 80037b4:	bc80      	pop	{r7}
 80037b6:	46b8      	mov	r8, r7
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	20000008 	.word	0x20000008
 80037c0:	200029e4 	.word	0x200029e4

080037c4 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80037c4:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80037c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c8:	4646      	mov	r6, r8
 80037ca:	46d6      	mov	lr, sl
 80037cc:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80037ce:	4698      	mov	r8, r3
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80037d2:	b5c0      	push	{r6, r7, lr}
 80037d4:	4699      	mov	r9, r3
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80037d8:	2600      	movs	r6, #0
 80037da:	469a      	mov	sl, r3
 80037dc:	e005      	b.n	80037ea <SaveEEalias+0x26>
 80037de:	4653      	mov	r3, sl
 80037e0:	3601      	adds	r6, #1
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2f6      	uxtb	r6, r6
 80037e6:	42b3      	cmp	r3, r6
 80037e8:	d326      	bcc.n	8003838 <SaveEEalias+0x74>
	    {
		if(moduleAlias[i][0]){
 80037ea:	464b      	mov	r3, r9
 80037ec:	00b4      	lsls	r4, r6, #2
 80037ee:	19a4      	adds	r4, r4, r6
 80037f0:	0064      	lsls	r4, r4, #1
 80037f2:	5d1b      	ldrb	r3, [r3, r4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f2      	beq.n	80037de <SaveEEalias+0x1a>
 80037f8:	4645      	mov	r5, r8
 80037fa:	4647      	mov	r7, r8
 80037fc:	3401      	adds	r4, #1
 80037fe:	351c      	adds	r5, #28
 8003800:	3721      	adds	r7, #33	; 0x21
 8003802:	444c      	add	r4, r9
 8003804:	b2ad      	uxth	r5, r5
 8003806:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003808:	7821      	ldrb	r1, [r4, #0]
 800380a:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800380c:	0028      	movs	r0, r5
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800380e:	18c9      	adds	r1, r1, r3
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003810:	3501      	adds	r5, #1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003812:	b289      	uxth	r1, r1
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003814:	b2ad      	uxth	r5, r5
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003816:	f008 f8d5 	bl	800b9c4 <EE_WriteVariable>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800381a:	42bd      	cmp	r5, r7
 800381c:	d002      	beq.n	8003824 <SaveEEalias+0x60>
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	3402      	adds	r4, #2
 8003822:	e7f1      	b.n	8003808 <SaveEEalias+0x44>
				add++;
 8003824:	4643      	mov	r3, r8
 8003826:	3305      	adds	r3, #5
 8003828:	b29b      	uxth	r3, r3
 800382a:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800382c:	4653      	mov	r3, sl
 800382e:	3601      	adds	r6, #1
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2f6      	uxtb	r6, r6
 8003834:	42b3      	cmp	r3, r6
 8003836:	d2d8      	bcs.n	80037ea <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003838:	2000      	movs	r0, #0
 800383a:	bce0      	pop	{r5, r6, r7}
 800383c:	46ba      	mov	sl, r7
 800383e:	46b1      	mov	r9, r6
 8003840:	46a8      	mov	r8, r5
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	20000e74 	.word	0x20000e74
 8003848:	20000008 	.word	0x20000008

0800384c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	46de      	mov	lr, fp
 8003850:	4657      	mov	r7, sl
 8003852:	464e      	mov	r6, r9
 8003854:	4645      	mov	r5, r8
 8003856:	468b      	mov	fp, r1
 8003858:	b5e0      	push	{r5, r6, r7, lr}
 800385a:	001c      	movs	r4, r3
 800385c:	ab0a      	add	r3, sp, #40	; 0x28
 800385e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003860:	0001      	movs	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003862:	469a      	mov	sl, r3
 8003864:	ab0b      	add	r3, sp, #44	; 0x2c
 8003866:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003868:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800386a:	4698      	mov	r8, r3
 800386c:	ab0c      	add	r3, sp, #48	; 0x30
 800386e:	781f      	ldrb	r7, [r3, #0]
 8003870:	ab0d      	add	r3, sp, #52	; 0x34
 8003872:	781e      	ldrb	r6, [r3, #0]
 8003874:	ab0e      	add	r3, sp, #56	; 0x38
 8003876:	4691      	mov	r9, r2
 8003878:	781d      	ldrb	r5, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800387a:	f008 f8a3 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800387e:	465b      	mov	r3, fp
 8003880:	0a19      	lsrs	r1, r3, #8
 8003882:	b289      	uxth	r1, r1
 8003884:	20e5      	movs	r0, #229	; 0xe5
 8003886:	f008 f89d 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800388a:	465b      	mov	r3, fp
 800388c:	20e6      	movs	r0, #230	; 0xe6
 800388e:	b299      	uxth	r1, r3
 8003890:	f008 f898 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003894:	464b      	mov	r3, r9
 8003896:	0a19      	lsrs	r1, r3, #8
 8003898:	b289      	uxth	r1, r1
 800389a:	20e7      	movs	r0, #231	; 0xe7
 800389c:	f008 f892 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80038a0:	464b      	mov	r3, r9
 80038a2:	20e8      	movs	r0, #232	; 0xe8
 80038a4:	b299      	uxth	r1, r3
 80038a6:	f008 f88d 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80038aa:	0221      	lsls	r1, r4, #8
 80038ac:	4451      	add	r1, sl
 80038ae:	b289      	uxth	r1, r1
 80038b0:	20e9      	movs	r0, #233	; 0xe9
 80038b2:	f008 f887 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80038b6:	4643      	mov	r3, r8
 80038b8:	0219      	lsls	r1, r3, #8
 80038ba:	19c9      	adds	r1, r1, r7
 80038bc:	b289      	uxth	r1, r1
 80038be:	20ea      	movs	r0, #234	; 0xea
 80038c0:	f008 f880 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80038c4:	0231      	lsls	r1, r6, #8
 80038c6:	1949      	adds	r1, r1, r5
 80038c8:	b289      	uxth	r1, r1
 80038ca:	20eb      	movs	r0, #235	; 0xeb
 80038cc:	f008 f87a 	bl	800b9c4 <EE_WriteVariable>
	
	return result;
}
 80038d0:	2000      	movs	r0, #0
 80038d2:	bcf0      	pop	{r4, r5, r6, r7}
 80038d4:	46bb      	mov	fp, r7
 80038d6:	46b2      	mov	sl, r6
 80038d8:	46a9      	mov	r9, r5
 80038da:	46a0      	mov	r8, r4
 80038dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)

080038e0 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80038e0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80038e2:	4c21      	ldr	r4, [pc, #132]	; (8003968 <SaveEEparams+0x88>)
 80038e4:	2224      	movs	r2, #36	; 0x24
 80038e6:	0025      	movs	r5, r4
 80038e8:	208a      	movs	r0, #138	; 0x8a
 80038ea:	3524      	adds	r5, #36	; 0x24
 80038ec:	786b      	ldrb	r3, [r5, #1]
 80038ee:	5ca1      	ldrb	r1, [r4, r2]
 80038f0:	015b      	lsls	r3, r3, #5
 80038f2:	4319      	orrs	r1, r3
 80038f4:	0040      	lsls	r0, r0, #1
 80038f6:	f008 f865 	bl	800b9c4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80038fa:	208e      	movs	r0, #142	; 0x8e
 80038fc:	7929      	ldrb	r1, [r5, #4]
 80038fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003900:	03c9      	lsls	r1, r1, #15
 8003902:	4319      	orrs	r1, r3
 8003904:	b289      	uxth	r1, r1
 8003906:	0040      	lsls	r0, r0, #1
 8003908:	f008 f85c 	bl	800b9c4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800390c:	2016      	movs	r0, #22
 800390e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003910:	30ff      	adds	r0, #255	; 0xff
 8003912:	f008 f857 	bl	800b9c4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003916:	208b      	movs	r0, #139	; 0x8b
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003918:	0025      	movs	r5, r4
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800391a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800391c:	0040      	lsls	r0, r0, #1
 800391e:	f008 f851 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003922:	2018      	movs	r0, #24
 8003924:	352c      	adds	r5, #44	; 0x2c
 8003926:	796b      	ldrb	r3, [r5, #5]
 8003928:	7b29      	ldrb	r1, [r5, #12]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	4319      	orrs	r1, r3
 800392e:	30ff      	adds	r0, #255	; 0xff
 8003930:	f008 f848 	bl	800b9c4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003934:	208c      	movs	r0, #140	; 0x8c
 8003936:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003938:	0040      	lsls	r0, r0, #1
 800393a:	f008 f843 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800393e:	201a      	movs	r0, #26
 8003940:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003942:	30ff      	adds	r0, #255	; 0xff
 8003944:	f008 f83e 	bl	800b9c4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003948:	208d      	movs	r0, #141	; 0x8d
 800394a:	7b6b      	ldrb	r3, [r5, #13]
 800394c:	7929      	ldrb	r1, [r5, #4]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	4319      	orrs	r1, r3
 8003952:	0040      	lsls	r0, r0, #1
 8003954:	f008 f836 	bl	800b9c4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003958:	201c      	movs	r0, #28
 800395a:	7ea9      	ldrb	r1, [r5, #26]
 800395c:	30ff      	adds	r0, #255	; 0xff
 800395e:	f008 f831 	bl	800b9c4 <EE_WriteVariable>
	
	return result;
}
 8003962:	2000      	movs	r0, #0
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000b28 	.word	0x20000b28

0800396c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003970:	4e12      	ldr	r6, [pc, #72]	; (80039bc <ClearEEportsDir+0x50>)
 8003972:	2234      	movs	r2, #52	; 0x34
 8003974:	2100      	movs	r1, #0
 8003976:	0030      	movs	r0, r6
BOS_Status ClearEEportsDir(void){
 8003978:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800397a:	f010 f90e 	bl	8013b9a <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800397e:	4d10      	ldr	r5, [pc, #64]	; (80039c0 <ClearEEportsDir+0x54>)
 8003980:	782f      	ldrb	r7, [r5, #0]
 8003982:	2f00      	cmp	r7, #0
 8003984:	d016      	beq.n	80039b4 <ClearEEportsDir+0x48>
 8003986:	2302      	movs	r3, #2
 8003988:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800398a:	2700      	movs	r7, #0
 800398c:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800398e:	2c19      	cmp	r4, #25
 8003990:	d900      	bls.n	8003994 <ClearEEportsDir+0x28>
			result =BOS_ERR_EEPROM;
 8003992:	270a      	movs	r7, #10
	for(uint8_t i =1; i <= N; i++){
 8003994:	4643      	mov	r3, r8
 8003996:	b2dc      	uxtb	r4, r3
 8003998:	782b      	ldrb	r3, [r5, #0]
 800399a:	42a3      	cmp	r3, r4
 800399c:	d30a      	bcc.n	80039b4 <ClearEEportsDir+0x48>
		if(arrayPortsDir[i - 1])
 800399e:	1e63      	subs	r3, r4, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	5af1      	ldrh	r1, [r6, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80039a4:	1c63      	adds	r3, r4, #1
 80039a6:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d0f0      	beq.n	800398e <ClearEEportsDir+0x22>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80039ac:	0018      	movs	r0, r3
 80039ae:	f008 f809 	bl	800b9c4 <EE_WriteVariable>
 80039b2:	e7ec      	b.n	800398e <ClearEEportsDir+0x22>
	}
	
	return result;
}
 80039b4:	0038      	movs	r0, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	46b8      	mov	r8, r7
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	200029e4 	.word	0x200029e4
 80039c0:	20000008 	.word	0x20000008

080039c4 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80039c4:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80039c6:	b530      	push	{r4, r5, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80039c8:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80039ca:	b08f      	sub	sp, #60	; 0x3c
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80039cc:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80039ce:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	aa03      	add	r2, sp, #12
 80039d4:	ab06      	add	r3, sp, #24
 80039d6:	a905      	add	r1, sp, #20
 80039d8:	2001      	movs	r0, #1
 80039da:	f008 faa5 	bl	800bf28 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80039de:	aa04      	add	r2, sp, #16
 80039e0:	ab08      	add	r3, sp, #32
 80039e2:	a907      	add	r1, sp, #28
 80039e4:	2002      	movs	r0, #2
 80039e6:	9400      	str	r4, [sp, #0]
 80039e8:	f008 fa9e 	bl	800bf28 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80039f0:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80039f4:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80039f6:	9805      	ldr	r0, [sp, #20]
 80039f8:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80039fa:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80039fe:	f00d fc99 	bl	8011334 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a02:	2302      	movs	r3, #2
 8003a04:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003a06:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003a08:	9808      	ldr	r0, [sp, #32]
 8003a0a:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003a10:	f00d fc90 	bl	8011334 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003a14:	466b      	mov	r3, sp
 8003a16:	2200      	movs	r2, #0
 8003a18:	8999      	ldrh	r1, [r3, #12]
 8003a1a:	9805      	ldr	r0, [sp, #20]
 8003a1c:	f00d fe3e 	bl	801169c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003a20:	2005      	movs	r0, #5
 8003a22:	f009 fea9 	bl	800d778 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003a26:	8821      	ldrh	r1, [r4, #0]
 8003a28:	9808      	ldr	r0, [sp, #32]
 8003a2a:	f00d fe31 	bl	8011690 <HAL_GPIO_ReadPin>
 8003a2e:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003a30:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <IsLowerCLIbaud+0x76>
}
 8003a36:	b00f      	add	sp, #60	; 0x3c
 8003a38:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003a3a:	466b      	mov	r3, sp
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	8999      	ldrh	r1, [r3, #12]
 8003a40:	9805      	ldr	r0, [sp, #20]
 8003a42:	f00d fe2b 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003a46:	2005      	movs	r0, #5
 8003a48:	f009 fe96 	bl	800d778 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003a4c:	8821      	ldrh	r1, [r4, #0]
 8003a4e:	9808      	ldr	r0, [sp, #32]
 8003a50:	f00d fe1e 	bl	8011690 <HAL_GPIO_ReadPin>
 8003a54:	3801      	subs	r0, #1
 8003a56:	4243      	negs	r3, r0
 8003a58:	4158      	adcs	r0, r3
			return 1;
 8003a5a:	b2c0      	uxtb	r0, r0
 8003a5c:	e7eb      	b.n	8003a36 <IsLowerCLIbaud+0x72>
 8003a5e:	46c0      	nop			; (mov r8, r8)

08003a60 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003a62:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	f7fc fb4d 	bl	8000104 <strcmp>
 8003a6a:	4243      	negs	r3, r0
 8003a6c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 8003a6e:	b2c0      	uxtb	r0, r0
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	20000098 	.word	0x20000098

08003a78 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003a78:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003a7a:	7801      	ldrb	r1, [r0, #0]
uint8_t IsMathOperator(char *string){
 8003a7c:	0003      	movs	r3, r0
		if(!strcmp(string,"="))
 8003a7e:	000c      	movs	r4, r1
 8003a80:	3c3d      	subs	r4, #61	; 0x3d
 8003a82:	293d      	cmp	r1, #61	; 0x3d
 8003a84:	d100      	bne.n	8003a88 <IsMathOperator+0x10>
 8003a86:	7844      	ldrb	r4, [r0, #1]
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003a88:	000d      	movs	r5, r1
		if(!strcmp(string,"="))
 8003a8a:	2006      	movs	r0, #6
		else if(!strcmp(string,">"))
 8003a8c:	3d3e      	subs	r5, #62	; 0x3e
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003a8e:	393c      	subs	r1, #60	; 0x3c
		if(!strcmp(string,"="))
 8003a90:	2c00      	cmp	r4, #0
 8003a92:	d027      	beq.n	8003ae4 <IsMathOperator+0x6c>
		else if(!strcmp(string,">"))
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	d102      	bne.n	8003a9e <IsMathOperator+0x26>
 8003a98:	785a      	ldrb	r2, [r3, #1]
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d024      	beq.n	8003ae8 <IsMathOperator+0x70>
		else if(!strcmp(string,"<"))
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d102      	bne.n	8003aa8 <IsMathOperator+0x30>
 8003aa2:	785a      	ldrb	r2, [r3, #1]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d021      	beq.n	8003aec <IsMathOperator+0x74>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	2a3e      	cmp	r2, #62	; 0x3e
 8003aac:	d105      	bne.n	8003aba <IsMathOperator+0x42>
 8003aae:	785e      	ldrb	r6, [r3, #1]
 8003ab0:	2e3d      	cmp	r6, #61	; 0x3d
 8003ab2:	d102      	bne.n	8003aba <IsMathOperator+0x42>
 8003ab4:	789e      	ldrb	r6, [r3, #2]
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d01a      	beq.n	8003af0 <IsMathOperator+0x78>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003aba:	2a3c      	cmp	r2, #60	; 0x3c
 8003abc:	d105      	bne.n	8003aca <IsMathOperator+0x52>
 8003abe:	785e      	ldrb	r6, [r3, #1]
 8003ac0:	2e3d      	cmp	r6, #61	; 0x3d
 8003ac2:	d102      	bne.n	8003aca <IsMathOperator+0x52>
 8003ac4:	789e      	ldrb	r6, [r3, #2]
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	d014      	beq.n	8003af4 <IsMathOperator+0x7c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003aca:	2a21      	cmp	r2, #33	; 0x21
 8003acc:	d105      	bne.n	8003ada <IsMathOperator+0x62>
 8003ace:	785a      	ldrb	r2, [r3, #1]
 8003ad0:	2a3d      	cmp	r2, #61	; 0x3d
 8003ad2:	d102      	bne.n	8003ada <IsMathOperator+0x62>
 8003ad4:	789a      	ldrb	r2, [r3, #2]
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d00e      	beq.n	8003af8 <IsMathOperator+0x80>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003ada:	3801      	subs	r0, #1
 8003adc:	b2c0      	uxtb	r0, r0
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d1d6      	bne.n	8003a90 <IsMathOperator+0x18>
			return MATH_NOT_EQUAL;
	}
	return 0;
}
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	e7fc      	b.n	8003ae2 <IsMathOperator+0x6a>
			return MATH_GREATER;
 8003ae8:	2002      	movs	r0, #2
 8003aea:	e7fa      	b.n	8003ae2 <IsMathOperator+0x6a>
			return MATH_SMALLER;
 8003aec:	2003      	movs	r0, #3
 8003aee:	e7f8      	b.n	8003ae2 <IsMathOperator+0x6a>
			return MATH_GREATER_EQUAL;
 8003af0:	2004      	movs	r0, #4
 8003af2:	e7f6      	b.n	8003ae2 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
 8003af4:	2005      	movs	r0, #5
 8003af6:	e7f4      	b.n	8003ae2 <IsMathOperator+0x6a>
			return MATH_NOT_EQUAL;
 8003af8:	2006      	movs	r0, #6
 8003afa:	e7f2      	b.n	8003ae2 <IsMathOperator+0x6a>

08003afc <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003afc:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003afe:	f009 fcf3 	bl	800d4e8 <RTC_Init>
	GetTimeDate();
 8003b02:	f009 fd91 	bl	800d628 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003b06:	f008 f841 	bl	800bb8c <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003b0a:	f008 f9b7 	bl	800be7c <GPIO_Init>
	DMA_Init();
 8003b0e:	f007 f89f 	bl	800ac50 <DMA_Init>
	TIM_USEC_Init();
 8003b12:	f009 fdbb 	bl	800d68c <TIM_USEC_Init>
	CRC_Init();
 8003b16:	f007 fe63 	bl	800b7e0 <CRC_Init>
	TIM_MSEC_Init();
 8003b1a:	f009 fde9 	bl	800d6f0 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003b1e:	f008 fa5f 	bl	800bfe0 <IsFactoryReset>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d15d      	bne.n	8003be2 <BOS_Init+0xe6>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003b26:	f7ff ff4d 	bl	80039c4 <IsLowerCLIbaud>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d01c      	beq.n	8003b68 <BOS_Init+0x6c>
		CLI_LOW_Baudrate_Flag =1;
 8003b2e:	2348      	movs	r3, #72	; 0x48
 8003b30:	2201      	movs	r2, #1
 8003b32:	4d35      	ldr	r5, [pc, #212]	; (8003c08 <BOS_Init+0x10c>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b34:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b36:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 8003b38:	54ea      	strb	r2, [r5, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b3a:	f009 fe1d 	bl	800d778 <StartMilliDelay>
		Module_Peripheral_Init();
 8003b3e:	f006 fdc1 	bl	800a6c4 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003b42:	21e1      	movs	r1, #225	; 0xe1
			UpdateBaudrate(port,BOS.clibaudrate);
 8003b44:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b46:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003b48:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b4a:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003b4c:	6369      	str	r1, [r5, #52]	; 0x34
			UpdateBaudrate(port,BOS.clibaudrate);
 8003b4e:	f009 ffe5 	bl	800db1c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b52:	2c06      	cmp	r4, #6
 8003b54:	d00e      	beq.n	8003b74 <BOS_Init+0x78>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003b56:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b58:	3401      	adds	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8003b5a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b5c:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003b5e:	f009 ffdd 	bl	800db1c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b62:	2c06      	cmp	r4, #6
 8003b64:	d1f7      	bne.n	8003b56 <BOS_Init+0x5a>
 8003b66:	e005      	b.n	8003b74 <BOS_Init+0x78>
		}
	}
	else{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b68:	2032      	movs	r0, #50	; 0x32
 8003b6a:	f009 fe05 	bl	800d778 <StartMilliDelay>
		Module_Peripheral_Init();
 8003b6e:	f006 fda9 	bl	800a6c4 <Module_Peripheral_Init>
 8003b72:	4d25      	ldr	r5, [pc, #148]	; (8003c08 <BOS_Init+0x10c>)
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003b74:	f7ff fdd8 	bl	8003728 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003b78:	f00a f87a 	bl	800dc70 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003b7c:	f007 fd94 	bl	800b6a8 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003b80:	2180      	movs	r1, #128	; 0x80
	if(myID == 0) /* Native module */
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <BOS_Init+0x110>)
		IND_ON();
 8003b84:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003b86:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003b88:	4821      	ldr	r0, [pc, #132]	; (8003c10 <BOS_Init+0x114>)
 8003b8a:	01c9      	lsls	r1, r1, #7
	if(myID == 0) /* Native module */
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <BOS_Init+0xb8>
		IND_ON();
 8003b90:	f00d fd84 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003b94:	20fa      	movs	r0, #250	; 0xfa
 8003b96:	0040      	lsls	r0, r0, #1
		IND_ON();
		Delay_ms_no_rtos(500);
		IND_OFF();
		Delay_ms_no_rtos(100);
		IND_ON();
		Delay_ms_no_rtos(100);
 8003b98:	f009 fdee 	bl	800d778 <StartMilliDelay>
		IND_OFF();
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	481b      	ldr	r0, [pc, #108]	; (8003c10 <BOS_Init+0x114>)
 8003ba2:	01c9      	lsls	r1, r1, #7
 8003ba4:	f00d fd7a 	bl	801169c <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003ba8:	f003 fdb8 	bl	800771c <ResetUartORE>
	
	BOS_initialized =1;
 8003bac:	2349      	movs	r3, #73	; 0x49
 8003bae:	2201      	movs	r2, #1
 8003bb0:	54ea      	strb	r2, [r5, r3]
}
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8003bb4:	f00d fd72 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003bb8:	20fa      	movs	r0, #250	; 0xfa
 8003bba:	0040      	lsls	r0, r0, #1
 8003bbc:	f009 fddc 	bl	800d778 <StartMilliDelay>
		IND_OFF();
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	01c9      	lsls	r1, r1, #7
 8003bc6:	4812      	ldr	r0, [pc, #72]	; (8003c10 <BOS_Init+0x114>)
 8003bc8:	f00d fd68 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003bcc:	2064      	movs	r0, #100	; 0x64
 8003bce:	f009 fdd3 	bl	800d778 <StartMilliDelay>
		IND_ON();
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	480e      	ldr	r0, [pc, #56]	; (8003c10 <BOS_Init+0x114>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	01c9      	lsls	r1, r1, #7
 8003bda:	f00d fd5f 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003bde:	2064      	movs	r0, #100	; 0x64
 8003be0:	e7da      	b.n	8003b98 <BOS_Init+0x9c>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003be2:	4c0c      	ldr	r4, [pc, #48]	; (8003c14 <BOS_Init+0x118>)
 8003be4:	4d0c      	ldr	r5, [pc, #48]	; (8003c18 <BOS_Init+0x11c>)
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	d004      	beq.n	8003bf6 <BOS_Init+0xfa>
		if(EE_Format() == HAL_OK){
 8003bec:	f007 ff7e 	bl	800baec <EE_Format>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d100      	bne.n	8003bf6 <BOS_Init+0xfa>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003bf4:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bf6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <BOS_Init+0x120>)
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <BOS_Init+0x124>)
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	e7fd      	b.n	8003c04 <BOS_Init+0x108>
 8003c08:	20000b28 	.word	0x20000b28
 8003c0c:	20000aa8 	.word	0x20000aa8
 8003c10:	48000800 	.word	0x48000800
 8003c14:	20007ff0 	.word	0x20007ff0
 8003c18:	beefdead 	.word	0xbeefdead
 8003c1c:	e000ed00 	.word	0xe000ed00
 8003c20:	05fa0004 	.word	0x05fa0004

08003c24 <Module_Init>:
void Module_Init(void){
 8003c24:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003c26:	f00b ffb7 	bl	800fb98 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003c2a:	f006 fb51 	bl	800a2d0 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003c2e:	f7ff ff65 	bl	8003afc <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003c32:	f003 ff8f 	bl	8007b54 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003c36:	f00a f8f5 	bl	800de24 <osKernelStart>
}
 8003c3a:	bd10      	pop	{r4, pc}

08003c3c <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003c40:	4e12      	ldr	r6, [pc, #72]	; (8003c8c <ExploreNeighbors+0x50>)
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
 8003c44:	0037      	movs	r7, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003c46:	0005      	movs	r5, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003c48:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003c4a:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003c4c:	b500      	push	{lr}
			messageParams[2] =port;
 8003c4e:	374c      	adds	r7, #76	; 0x4c
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003c50:	b082      	sub	sp, #8
		if(port != ignore){
 8003c52:	42a5      	cmp	r5, r4
 8003c54:	d010      	beq.n	8003c78 <ExploreNeighbors+0x3c>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003c56:	4643      	mov	r3, r8
 8003c58:	224c      	movs	r2, #76	; 0x4c
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			messageParams[2] =port;
 8003c5c:	70bc      	strb	r4, [r7, #2]
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003c5e:	ba5b      	rev16	r3, r3
 8003c60:	52b3      	strh	r3, [r6, r2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003c62:	2303      	movs	r3, #3
 8003c64:	2200      	movs	r2, #0
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	0020      	movs	r0, r4
 8003c6c:	3307      	adds	r3, #7
 8003c6e:	f004 f977 	bl	8007f60 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003c72:	200a      	movs	r0, #10
 8003c74:	f00a f8dc 	bl	800de30 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003c78:	3401      	adds	r4, #1
 8003c7a:	b2e4      	uxtb	r4, r4
 8003c7c:	2c06      	cmp	r4, #6
 8003c7e:	d1e8      	bne.n	8003c52 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 8003c80:	2000      	movs	r0, #0
 8003c82:	b002      	add	sp, #8
 8003c84:	bc80      	pop	{r7}
 8003c86:	46b8      	mov	r8, r7
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000b28 	.word	0x20000b28
 8003c90:	20000008 	.word	0x20000008

08003c94 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	4657      	mov	r7, sl
 8003c98:	464e      	mov	r6, r9
 8003c9a:	4645      	mov	r5, r8
 8003c9c:	46de      	mov	lr, fp
 8003c9e:	b5e0      	push	{r5, r6, r7, lr}
 8003ca0:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003ca2:	466a      	mov	r2, sp
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <FindBroadcastRoutes+0x13c>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003ca6:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003ca8:	781e      	ldrb	r6, [r3, #0]
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003caa:	0004      	movs	r4, r0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003cac:	1df3      	adds	r3, r6, #7
 8003cae:	08db      	lsrs	r3, r3, #3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	469d      	mov	sp, r3
 8003cb6:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	d00a      	beq.n	8003cd2 <FindBroadcastRoutes+0x3e>
		modules[m] =0;
 8003cbc:	0032      	movs	r2, r6
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4668      	mov	r0, sp
 8003cc2:	f00f ff6a 	bl	8013b9a <memset>
		bcastRoutes[m] =0;
 8003cc6:	4843      	ldr	r0, [pc, #268]	; (8003dd4 <FindBroadcastRoutes+0x140>)
 8003cc8:	2100      	movs	r1, #0
 8003cca:	0072      	lsls	r2, r6, #1
 8003ccc:	307c      	adds	r0, #124	; 0x7c
 8003cce:	f00f ff64 	bl	8013b9a <memset>
	}
	modules[src - 1] =++level;					// Tag the source
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	2216      	movs	r2, #22
 8003cd6:	1e60      	subs	r0, r4, #1
 8003cd8:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <FindBroadcastRoutes+0x144>)
 8003cdc:	4342      	muls	r2, r0
 8003cde:	469c      	mov	ip, r3
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <FindBroadcastRoutes+0x140>)
 8003ce2:	0040      	lsls	r0, r0, #1
 8003ce4:	1818      	adds	r0, r3, r0
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003cea:	3301      	adds	r3, #1
 8003cec:	4462      	add	r2, ip
	modules[src - 1] =++level;					// Tag the source
 8003cee:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003cf0:	247c      	movs	r4, #124	; 0x7c
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003cf2:	469c      	mov	ip, r3
 8003cf4:	46ab      	mov	fp, r5
 8003cf6:	607e      	str	r6, [r7, #4]
		if(array[src - 1][p]){
 8003cf8:	8853      	ldrh	r3, [r2, #2]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <FindBroadcastRoutes+0x86>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003cfe:	5b06      	ldrh	r6, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003d00:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003d02:	46b1      	mov	r9, r6
 8003d04:	4646      	mov	r6, r8
 8003d06:	408e      	lsls	r6, r1
 8003d08:	46b2      	mov	sl, r6
 8003d0a:	464e      	mov	r6, r9
 8003d0c:	4655      	mov	r5, sl
 8003d0e:	432e      	orrs	r6, r5
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003d10:	4665      	mov	r5, ip
 8003d12:	445b      	add	r3, fp
 8003d14:	3b01      	subs	r3, #1
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003d16:	5306      	strh	r6, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003d18:	701d      	strb	r5, [r3, #0]
	for(p =1; p <= 6; p++){
 8003d1a:	3101      	adds	r1, #1
 8003d1c:	3202      	adds	r2, #2
 8003d1e:	2906      	cmp	r1, #6
 8003d20:	d1ea      	bne.n	8003cf8 <FindBroadcastRoutes+0x64>
	++level;												// Move one level
 8003d22:	465d      	mov	r5, fp
 8003d24:	2302      	movs	r3, #2
 8003d26:	687e      	ldr	r6, [r7, #4]
 8003d28:	469b      	mov	fp, r3
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003d2a:	46b0      	mov	r8, r6
 8003d2c:	002e      	movs	r6, r5
		++level;											// Move one level
 8003d2e:	465b      	mov	r3, fp
 8003d30:	3301      	adds	r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	469b      	mov	fp, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003d36:	4643      	mov	r3, r8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03f      	beq.n	8003dbc <FindBroadcastRoutes+0x128>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	425b      	negs	r3, r3
 8003d40:	445b      	add	r3, fp
 8003d42:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003d44:	2300      	movs	r3, #0
 8003d46:	4c23      	ldr	r4, [pc, #140]	; (8003dd4 <FindBroadcastRoutes+0x140>)
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003d48:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003d4a:	469c      	mov	ip, r3
 8003d4c:	4d22      	ldr	r5, [pc, #136]	; (8003dd8 <FindBroadcastRoutes+0x144>)
 8003d4e:	347c      	adds	r4, #124	; 0x7c
 8003d50:	e005      	b.n	8003d5e <FindBroadcastRoutes+0xca>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003d52:	3201      	adds	r2, #1
 8003d54:	b2d3      	uxtb	r3, r2
 8003d56:	3402      	adds	r4, #2
 8003d58:	3516      	adds	r5, #22
 8003d5a:	4598      	cmp	r8, r3
 8003d5c:	d92b      	bls.n	8003db6 <FindBroadcastRoutes+0x122>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003d5e:	5cb3      	ldrb	r3, [r6, r2]
 8003d60:	454b      	cmp	r3, r9
 8003d62:	d1f6      	bne.n	8003d52 <FindBroadcastRoutes+0xbe>
 8003d64:	4643      	mov	r3, r8
 8003d66:	0028      	movs	r0, r5
 8003d68:	46aa      	mov	sl, r5
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	0025      	movs	r5, r4
 8003d6e:	4690      	mov	r8, r2
 8003d70:	607b      	str	r3, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003d72:	8843      	ldrh	r3, [r0, #2]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00f      	beq.n	8003d98 <FindBroadcastRoutes+0x104>
 8003d78:	08db      	lsrs	r3, r3, #3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	5cf2      	ldrb	r2, [r6, r3]
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d10a      	bne.n	8003d98 <FindBroadcastRoutes+0x104>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003d82:	2401      	movs	r4, #1
 8003d84:	408c      	lsls	r4, r1
 8003d86:	882a      	ldrh	r2, [r5, #0]
 8003d88:	4322      	orrs	r2, r4
 8003d8a:	802a      	strh	r2, [r5, #0]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003d8c:	465a      	mov	r2, fp
 8003d8e:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003d90:	4663      	mov	r3, ip
 8003d92:	3301      	adds	r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	469c      	mov	ip, r3
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003d98:	3101      	adds	r1, #1
 8003d9a:	3002      	adds	r0, #2
 8003d9c:	2906      	cmp	r1, #6
 8003d9e:	d1e8      	bne.n	8003d72 <FindBroadcastRoutes+0xde>
 8003da0:	4642      	mov	r2, r8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	002c      	movs	r4, r5
 8003da6:	4698      	mov	r8, r3
 8003da8:	4655      	mov	r5, sl
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003daa:	3201      	adds	r2, #1
 8003dac:	b2d3      	uxtb	r3, r2
 8003dae:	3402      	adds	r4, #2
 8003db0:	3516      	adds	r5, #22
 8003db2:	4598      	cmp	r8, r3
 8003db4:	d8d3      	bhi.n	8003d5e <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003db6:	4663      	mov	r3, ip
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1b8      	bne.n	8003d2e <FindBroadcastRoutes+0x9a>
	
	return result;
}
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b003      	add	sp, #12
 8003dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8003dc4:	46bb      	mov	fp, r7
 8003dc6:	46b2      	mov	sl, r6
 8003dc8:	46a9      	mov	r9, r5
 8003dca:	46a0      	mov	r8, r4
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	20000b28 	.word	0x20000b28
 8003dd8:	20000f84 	.word	0x20000f84

08003ddc <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dde:	46de      	mov	lr, fp
 8003de0:	4645      	mov	r5, r8
 8003de2:	464e      	mov	r6, r9
 8003de4:	4657      	mov	r7, sl
 8003de6:	b5e0      	push	{r5, r6, r7, lr}
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003de8:	2500      	movs	r5, #0
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003dea:	b093      	sub	sp, #76	; 0x4c
 8003dec:	0004      	movs	r4, r0
 8003dee:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003df0:	222e      	movs	r2, #46	; 0x2e
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003df2:	9102      	str	r1, [sp, #8]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003df4:	a806      	add	r0, sp, #24
 8003df6:	2100      	movs	r1, #0
 8003df8:	9505      	str	r5, [sp, #20]
 8003dfa:	f00f fece 	bl	8013b9a <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003dfe:	221a      	movs	r2, #26
 8003e00:	2100      	movs	r1, #0
 8003e02:	486a      	ldr	r0, [pc, #424]	; (8003fac <FindRoute+0x1d0>)
 8003e04:	f00f fec9 	bl	8013b9a <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003e08:	2130      	movs	r1, #48	; 0x30
 8003e0a:	4b69      	ldr	r3, [pc, #420]	; (8003fb0 <FindRoute+0x1d4>)
 8003e0c:	1e62      	subs	r2, r4, #1
 8003e0e:	4698      	mov	r8, r3
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	545d      	strb	r5, [r3, r1]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003e14:	311c      	adds	r1, #28
 8003e16:	545d      	strb	r5, [r3, r1]
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003e18:	2316      	movs	r3, #22
 8003e1a:	4353      	muls	r3, r2
 8003e1c:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <FindRoute+0x1d8>)
 8003e1e:	2001      	movs	r0, #1
 8003e20:	4693      	mov	fp, r2
 8003e22:	001a      	movs	r2, r3
 8003e24:	445a      	add	r2, fp
 8003e26:	9203      	str	r2, [sp, #12]
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003e28:	b2b1      	uxth	r1, r6
 8003e2a:	0043      	lsls	r3, r0, #1
 8003e2c:	5ad3      	ldrh	r3, [r2, r3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <FindRoute+0x5e>
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d100      	bne.n	8003e3a <FindRoute+0x5e>
 8003e38:	e0a8      	b.n	8003f8c <FindRoute+0x1b0>
	for(int col =1; col <= 6; col++){
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	2807      	cmp	r0, #7
 8003e3e:	d1f4      	bne.n	8003e2a <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003e40:	4b5d      	ldr	r3, [pc, #372]	; (8003fb8 <FindRoute+0x1dc>)
 8003e42:	7818      	ldrb	r0, [r3, #0]
 8003e44:	2301      	movs	r3, #1
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d100      	bne.n	8003e4c <FindRoute+0x70>
 8003e4a:	e0ab      	b.n	8003fa4 <FindRoute+0x1c8>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e4c:	4647      	mov	r7, r8
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e4e:	4645      	mov	r5, r8
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e50:	26ff      	movs	r6, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e52:	2100      	movs	r1, #0
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e54:	372f      	adds	r7, #47	; 0x2f
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e56:	354b      	adds	r5, #75	; 0x4b
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	d002      	beq.n	8003e62 <FindRoute+0x86>
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e5c:	195a      	adds	r2, r3, r5
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e5e:	54fe      	strb	r6, [r7, r3]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e60:	7011      	strb	r1, [r2, #0]
	for(int i =1; i <= N; i++){
 8003e62:	3301      	adds	r3, #1
 8003e64:	4283      	cmp	r3, r0
 8003e66:	ddf7      	ble.n	8003e58 <FindRoute+0x7c>
	uint8_t u =0;
 8003e68:	2300      	movs	r3, #0
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
		smallest =arr[0];
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
 8003e6a:	4646      	mov	r6, r8
	uint8_t u =0;
 8003e6c:	469a      	mov	sl, r3
		smallest =arr[0];
 8003e6e:	3330      	adds	r3, #48	; 0x30
 8003e70:	4699      	mov	r9, r3
 8003e72:	af05      	add	r7, sp, #20
		if((arr[i] < smallest) && !Q[i]){
 8003e74:	3630      	adds	r6, #48	; 0x30
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003e76:	003c      	movs	r4, r7
	uint8_t u =0;
 8003e78:	003a      	movs	r2, r7
	char temp =1;
 8003e7a:	2101      	movs	r1, #1
	for(int i =0; i < N; i++){
 8003e7c:	2300      	movs	r3, #0
		temp &=Q[i];
 8003e7e:	7815      	ldrb	r5, [r2, #0]
	for(int i =0; i < N; i++){
 8003e80:	3301      	adds	r3, #1
		temp &=Q[i];
 8003e82:	4029      	ands	r1, r5
	for(int i =0; i < N; i++){
 8003e84:	3201      	adds	r2, #1
 8003e86:	4283      	cmp	r3, r0
 8003e88:	dbf9      	blt.n	8003e7e <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d14a      	bne.n	8003f24 <FindRoute+0x148>
	if(!Q[0])						// Not visited yet
 8003e8e:	783b      	ldrb	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d042      	beq.n	8003f1a <FindRoute+0x13e>
		smallest =arr[0];
 8003e94:	4643      	mov	r3, r8
 8003e96:	464a      	mov	r2, r9
	uint8_t smallest =0xFF;
 8003e98:	25ff      	movs	r5, #255	; 0xff
		smallest =arr[0];
 8003e9a:	5c9a      	ldrb	r2, [r3, r2]
	uint8_t smallest =0xFF;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	468c      	mov	ip, r1
 8003ea0:	e000      	b.n	8003ea4 <FindRoute+0xc8>
		if((arr[i] < smallest) && !Q[i]){
 8003ea2:	5d9a      	ldrb	r2, [r3, r6]
 8003ea4:	4295      	cmp	r5, r2
 8003ea6:	d905      	bls.n	8003eb4 <FindRoute+0xd8>
 8003ea8:	7821      	ldrb	r1, [r4, #0]
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	d102      	bne.n	8003eb4 <FindRoute+0xd8>
			index =i;
 8003eae:	b2d9      	uxtb	r1, r3
 8003eb0:	468c      	mov	ip, r1
		if((arr[i] < smallest) && !Q[i]){
 8003eb2:	0015      	movs	r5, r2
	for(int i =0; i < N; i++){
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	dbf2      	blt.n	8003ea2 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003ebc:	4661      	mov	r1, ip
 8003ebe:	3101      	adds	r1, #1
 8003ec0:	b2cb      	uxtb	r3, r1
 8003ec2:	469a      	mov	sl, r3
		if(u == desID){
 8003ec4:	9b02      	ldr	r3, [sp, #8]
 8003ec6:	459a      	cmp	sl, r3
 8003ec8:	d02d      	beq.n	8003f26 <FindRoute+0x14a>
			Q[u - 1] =1;									// Remove u from Q
 8003eca:	4653      	mov	r3, sl
 8003ecc:	1e5d      	subs	r5, r3, #1
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2416      	movs	r4, #22
 8003ed2:	557b      	strb	r3, [r7, r5]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ed4:	465b      	mov	r3, fp
 8003ed6:	436c      	muls	r4, r5
 8003ed8:	191a      	adds	r2, r3, r4
 8003eda:	330c      	adds	r3, #12
 8003edc:	191c      	adds	r4, r3, r4
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ede:	4445      	add	r5, r8
 8003ee0:	9001      	str	r0, [sp, #4]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003ee2:	8853      	ldrh	r3, [r2, #2]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <FindRoute+0x134>
				v =(array[u - 1][n] >> 3);
 8003ee8:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	5cf9      	ldrb	r1, [r7, r3]
 8003ef0:	2900      	cmp	r1, #0
 8003ef2:	d10d      	bne.n	8003f10 <FindRoute+0x134>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ef4:	4649      	mov	r1, r9
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003ef6:	4648      	mov	r0, r9
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ef8:	5c69      	ldrb	r1, [r5, r1]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003efa:	4443      	add	r3, r8
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003efc:	3101      	adds	r1, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003efe:	5c18      	ldrb	r0, [r3, r0]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003f00:	b2c9      	uxtb	r1, r1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003f02:	4288      	cmp	r0, r1
 8003f04:	d904      	bls.n	8003f10 <FindRoute+0x134>
						routeDist[v - 1] =alt;
 8003f06:	4648      	mov	r0, r9
 8003f08:	5419      	strb	r1, [r3, r0]
						routePrev[v - 1] =u;
 8003f0a:	214c      	movs	r1, #76	; 0x4c
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	5458      	strb	r0, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003f10:	3202      	adds	r2, #2
 8003f12:	42a2      	cmp	r2, r4
 8003f14:	d1e5      	bne.n	8003ee2 <FindRoute+0x106>
 8003f16:	9801      	ldr	r0, [sp, #4]
 8003f18:	e7ad      	b.n	8003e76 <FindRoute+0x9a>
		smallest =arr[0];
 8003f1a:	464a      	mov	r2, r9
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	5c9d      	ldrb	r5, [r3, r2]
 8003f20:	002a      	movs	r2, r5
 8003f22:	e7bb      	b.n	8003e9c <FindRoute+0xc0>
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003f24:	4653      	mov	r3, sl
 8003f26:	3b01      	subs	r3, #1
 8003f28:	214c      	movs	r1, #76	; 0x4c
 8003f2a:	4443      	add	r3, r8
 8003f2c:	5c59      	ldrb	r1, [r3, r1]
 8003f2e:	4650      	mov	r0, sl
 8003f30:	2300      	movs	r3, #0
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d101      	bne.n	8003f3a <FindRoute+0x15e>
 8003f36:	e00c      	b.n	8003f52 <FindRoute+0x176>
 8003f38:	0011      	movs	r1, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	4c1b      	ldr	r4, [pc, #108]	; (8003fac <FindRoute+0x1d0>)
 8003f3e:	3301      	adds	r3, #1
 8003f40:	54a0      	strb	r0, [r4, r2]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003f42:	4642      	mov	r2, r8
 8003f44:	1852      	adds	r2, r2, r1
 8003f46:	324b      	adds	r2, #75	; 0x4b
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	0008      	movs	r0, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003f4c:	b2db      	uxtb	r3, r3
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003f4e:	2a00      	cmp	r2, #0
 8003f50:	d1f2      	bne.n	8003f38 <FindRoute+0x15c>
	for(int col =1; col <= 6; col++){
 8003f52:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003f54:	9902      	ldr	r1, [sp, #8]
 8003f56:	9c03      	ldr	r4, [sp, #12]
 8003f58:	4441      	add	r1, r8
 8003f5a:	312f      	adds	r1, #47	; 0x2f
 8003f5c:	0043      	lsls	r3, r0, #1
 8003f5e:	5ae3      	ldrh	r3, [r4, r3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <FindRoute+0x19a>
 8003f64:	4d11      	ldr	r5, [pc, #68]	; (8003fac <FindRoute+0x1d0>)
 8003f66:	780a      	ldrb	r2, [r1, #0]
 8003f68:	46ac      	mov	ip, r5
 8003f6a:	4462      	add	r2, ip
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	08db      	lsrs	r3, r3, #3
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d014      	beq.n	8003fa0 <FindRoute+0x1c4>
	for(int col =1; col <= 6; col++){
 8003f76:	3001      	adds	r0, #1
 8003f78:	2807      	cmp	r0, #7
 8003f7a:	d1ef      	bne.n	8003f5c <FindRoute+0x180>
	return 0;
 8003f7c:	2000      	movs	r0, #0
}
 8003f7e:	b013      	add	sp, #76	; 0x4c
 8003f80:	bcf0      	pop	{r4, r5, r6, r7}
 8003f82:	46bb      	mov	fp, r7
 8003f84:	46b2      	mov	sl, r6
 8003f86:	46a9      	mov	r9, r5
 8003f88:	46a0      	mov	r8, r4
 8003f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003f8c:	9b02      	ldr	r3, [sp, #8]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	001a      	movs	r2, r3
 8003f92:	4442      	add	r2, r8
 8003f94:	322f      	adds	r2, #47	; 0x2f
 8003f96:	7011      	strb	r1, [r2, #0]
			route[0] =desID;
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <FindRoute+0x1d0>)
			return col;
 8003f9a:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003f9c:	7013      	strb	r3, [r2, #0]
			return col;
 8003f9e:	e7ee      	b.n	8003f7e <FindRoute+0x1a2>
			return col;
 8003fa0:	b2c0      	uxtb	r0, r0
 8003fa2:	e7ec      	b.n	8003f7e <FindRoute+0x1a2>
	for(int i =1; i <= N; i++){
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	425b      	negs	r3, r3
 8003fa8:	4692      	mov	sl, r2
 8003faa:	e7bd      	b.n	8003f28 <FindRoute+0x14c>
 8003fac:	20001f2c 	.word	0x20001f2c
 8003fb0:	20000ba8 	.word	0x20000ba8
 8003fb4:	20000f84 	.word	0x20000f84
 8003fb8:	20000008 	.word	0x20000008

08003fbc <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fc0:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003fc2:	4645      	mov	r5, r8
 8003fc4:	46de      	mov	lr, fp
 8003fc6:	464e      	mov	r6, r9
 8003fc8:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fca:	3468      	adds	r4, #104	; 0x68
 8003fcc:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003fce:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fd0:	4698      	mov	r8, r3
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003fd4:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fd6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fd8:	c223      	stmia	r2!, {r0, r1, r5}
 8003fda:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003fdc:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fde:	6011      	str	r1, [r2, #0]
 8003fe0:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fe2:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003fe4:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fe6:	2501      	movs	r5, #1
 8003fe8:	f7fc f896 	bl	8000118 <strlen>
 8003fec:	426d      	negs	r5, r5
 8003fee:	2332      	movs	r3, #50	; 0x32
 8003ff0:	b282      	uxth	r2, r0
 8003ff2:	0021      	movs	r1, r4
 8003ff4:	0030      	movs	r0, r6
 8003ff6:	9500      	str	r5, [sp, #0]
 8003ff8:	f009 fd3a 	bl	800da70 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003ffc:	4b4e      	ldr	r3, [pc, #312]	; (8004138 <DisplayTopology+0x17c>)
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ffe:	2701      	movs	r7, #1
 8004000:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"P%d\t",i);
 8004002:	003a      	movs	r2, r7
 8004004:	4649      	mov	r1, r9
 8004006:	0020      	movs	r0, r4
 8004008:	f00f ffb8 	bl	8013f7c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800400c:	0020      	movs	r0, r4
 800400e:	f7fc f883 	bl	8000118 <strlen>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004012:	3701      	adds	r7, #1
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004014:	b282      	uxth	r2, r0
 8004016:	2332      	movs	r3, #50	; 0x32
 8004018:	0021      	movs	r1, r4
 800401a:	0030      	movs	r0, r6
 800401c:	9500      	str	r5, [sp, #0]
 800401e:	f009 fd27 	bl	800da70 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004022:	2f06      	cmp	r7, #6
 8004024:	d1ed      	bne.n	8004002 <DisplayTopology+0x46>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8004026:	2332      	movs	r3, #50	; 0x32
 8004028:	2203      	movs	r2, #3
 800402a:	0030      	movs	r0, r6
 800402c:	4943      	ldr	r1, [pc, #268]	; (800413c <DisplayTopology+0x180>)
 800402e:	9500      	str	r5, [sp, #0]
 8004030:	f009 fd1e 	bl	800da70 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <DisplayTopology+0x184>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d060      	beq.n	80040fe <DisplayTopology+0x142>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800403c:	2301      	movs	r3, #1
 800403e:	425b      	negs	r3, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8004040:	4645      	mov	r5, r8
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004042:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004044:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8004046:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004048:	469b      	mov	fp, r3
				sprintf(pcUserMessage,"%d\t",0);
 800404a:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <DisplayTopology+0x18c>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 800404c:	3568      	adds	r5, #104	; 0x68
				sprintf(pcUserMessage,"%d\t",0);
 800404e:	469a      	mov	sl, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8004050:	1c63      	adds	r3, r4, #1
 8004052:	001a      	movs	r2, r3
 8004054:	493d      	ldr	r1, [pc, #244]	; (800414c <DisplayTopology+0x190>)
 8004056:	0028      	movs	r0, r5
 8004058:	4699      	mov	r9, r3
 800405a:	f00f ff8f 	bl	8013f7c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800405e:	0028      	movs	r0, r5
 8004060:	f7fc f85a 	bl	8000118 <strlen>
 8004064:	4643      	mov	r3, r8
 8004066:	b282      	uxth	r2, r0
 8004068:	0029      	movs	r1, r5
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	0030      	movs	r0, r6
 800406e:	2332      	movs	r3, #50	; 0x32
 8004070:	f009 fcfe 	bl	800da70 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8004074:	2316      	movs	r3, #22
 8004076:	435c      	muls	r4, r3
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <DisplayTopology+0x194>)
 800407a:	2205      	movs	r2, #5
 800407c:	5b1b      	ldrh	r3, [r3, r4]
 800407e:	0028      	movs	r0, r5
 8004080:	0059      	lsls	r1, r3, #1
 8004082:	18c9      	adds	r1, r1, r3
 8004084:	4b33      	ldr	r3, [pc, #204]	; (8004154 <DisplayTopology+0x198>)
 8004086:	0049      	lsls	r1, r1, #1
 8004088:	469c      	mov	ip, r3
 800408a:	4461      	add	r1, ip
 800408c:	f00f ffcb 	bl	8014026 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004090:	4643      	mov	r3, r8
 8004092:	2205      	movs	r2, #5
 8004094:	0029      	movs	r1, r5
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	0030      	movs	r0, r6
 800409a:	2332      	movs	r3, #50	; 0x32
 800409c:	f009 fce8 	bl	800da70 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 80040a0:	4643      	mov	r3, r8
 80040a2:	2201      	movs	r2, #1
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	0030      	movs	r0, r6
 80040a8:	2332      	movs	r3, #50	; 0x32
 80040aa:	492b      	ldr	r1, [pc, #172]	; (8004158 <DisplayTopology+0x19c>)
 80040ac:	f009 fce0 	bl	800da70 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <DisplayTopology+0x194>)
 80040b2:	191f      	adds	r7, r3, r4
 80040b4:	330a      	adds	r3, #10
 80040b6:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 80040b8:	887a      	ldrh	r2, [r7, #2]
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	d12f      	bne.n	800411e <DisplayTopology+0x162>
				sprintf(pcUserMessage,"%d\t",0);
 80040be:	4651      	mov	r1, sl
 80040c0:	0028      	movs	r0, r5
 80040c2:	f00f ff5b 	bl	8013f7c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040c6:	0028      	movs	r0, r5
 80040c8:	f7fc f826 	bl	8000118 <strlen>
 80040cc:	4643      	mov	r3, r8
 80040ce:	b282      	uxth	r2, r0
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0029      	movs	r1, r5
 80040d4:	2332      	movs	r3, #50	; 0x32
 80040d6:	0030      	movs	r0, r6
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80040d8:	3702      	adds	r7, #2
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040da:	f009 fcc9 	bl	800da70 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80040de:	42a7      	cmp	r7, r4
 80040e0:	d1ea      	bne.n	80040b8 <DisplayTopology+0xfc>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 80040e2:	4643      	mov	r3, r8
 80040e4:	2202      	movs	r2, #2
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	0030      	movs	r0, r6
 80040ea:	2332      	movs	r3, #50	; 0x32
 80040ec:	491b      	ldr	r1, [pc, #108]	; (800415c <DisplayTopology+0x1a0>)
 80040ee:	f009 fcbf 	bl	800da70 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 80040f2:	464b      	mov	r3, r9
 80040f4:	b2dc      	uxtb	r4, r3
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <DisplayTopology+0x184>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	42a3      	cmp	r3, r4
 80040fc:	d8a8      	bhi.n	8004050 <DisplayTopology+0x94>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 80040fe:	2301      	movs	r3, #1
 8004100:	425b      	negs	r3, r3
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	0030      	movs	r0, r6
 8004108:	4915      	ldr	r1, [pc, #84]	; (8004160 <DisplayTopology+0x1a4>)
 800410a:	3333      	adds	r3, #51	; 0x33
 800410c:	f009 fcb0 	bl	800da70 <writePxMutex>
}
 8004110:	b003      	add	sp, #12
 8004112:	bcf0      	pop	{r4, r5, r6, r7}
 8004114:	46bb      	mov	fp, r7
 8004116:	46b2      	mov	sl, r6
 8004118:	46a9      	mov	r9, r5
 800411a:	46a0      	mov	r8, r4
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 800411e:	2307      	movs	r3, #7
 8004120:	4659      	mov	r1, fp
 8004122:	4013      	ands	r3, r2
 8004124:	0028      	movs	r0, r5
 8004126:	08d2      	lsrs	r2, r2, #3
 8004128:	f00f ff28 	bl	8013f7c <sprintf>
 800412c:	e7cb      	b.n	80040c6 <DisplayTopology+0x10a>
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20000ba8 	.word	0x20000ba8
 8004134:	0801a498 	.word	0x0801a498
 8004138:	0801a4ac 	.word	0x0801a4ac
 800413c:	0801b390 	.word	0x0801b390
 8004140:	20000008 	.word	0x20000008
 8004144:	0801a4c4 	.word	0x0801a4c4
 8004148:	0801a4c0 	.word	0x0801a4c0
 800414c:	0801a4b4 	.word	0x0801a4b4
 8004150:	20000f84 	.word	0x20000f84
 8004154:	08019d5c 	.word	0x08019d5c
 8004158:	0801a4a8 	.word	0x0801a4a8
 800415c:	0801a5d0 	.word	0x0801a5d0
 8004160:	0801bd94 	.word	0x0801bd94

08004164 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8004164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004166:	46de      	mov	lr, fp
 8004168:	4645      	mov	r5, r8
 800416a:	4657      	mov	r7, sl
 800416c:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800416e:	4c37      	ldr	r4, [pc, #220]	; (800424c <DisplayPortsDir+0xe8>)
void DisplayPortsDir(uint8_t port){
 8004170:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004172:	3468      	adds	r4, #104	; 0x68
 8004174:	0022      	movs	r2, r4
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <DisplayPortsDir+0xec>)
void DisplayPortsDir(uint8_t port){
 8004178:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800417a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800417c:	c223      	stmia	r2!, {r0, r1, r5}
 800417e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004180:	c223      	stmia	r2!, {r0, r1, r5}
 8004182:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8004184:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004186:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004188:	0020      	movs	r0, r4
 800418a:	f7fb ffc5 	bl	8000118 <strlen>
 800418e:	2301      	movs	r3, #1
 8004190:	425b      	negs	r3, r3
 8004192:	b282      	uxth	r2, r0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	0021      	movs	r1, r4
 8004198:	3333      	adds	r3, #51	; 0x33
 800419a:	4650      	mov	r0, sl
 800419c:	f009 fc68 	bl	800da70 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80041a0:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <DisplayPortsDir+0xf0>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d034      	beq.n	8004212 <DisplayPortsDir+0xae>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4699      	mov	r9, r3
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <DisplayPortsDir+0xf4>)
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041ae:	2780      	movs	r7, #128	; 0x80
 80041b0:	4698      	mov	r8, r3
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <DisplayPortsDir+0xf8>)
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041b4:	023f      	lsls	r7, r7, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80041b6:	469b      	mov	fp, r3
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041b8:	464b      	mov	r3, r9
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80041ba:	4e24      	ldr	r6, [pc, #144]	; (800424c <DisplayPortsDir+0xe8>)
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041bc:	1e5d      	subs	r5, r3, #1
 80041be:	2400      	movs	r4, #0
 80041c0:	006d      	lsls	r5, r5, #1
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80041c2:	3668      	adds	r6, #104	; 0x68
 80041c4:	e001      	b.n	80041ca <DisplayPortsDir+0x66>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80041c6:	2c0a      	cmp	r4, #10
 80041c8:	d01b      	beq.n	8004202 <DisplayPortsDir+0x9e>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041ca:	0022      	movs	r2, r4
 80041cc:	0039      	movs	r1, r7
 80041ce:	4643      	mov	r3, r8
 80041d0:	4111      	asrs	r1, r2
 80041d2:	5b5b      	ldrh	r3, [r3, r5]
 80041d4:	3401      	adds	r4, #1
 80041d6:	4219      	tst	r1, r3
 80041d8:	d0f5      	beq.n	80041c6 <DisplayPortsDir+0x62>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80041da:	0023      	movs	r3, r4
 80041dc:	464a      	mov	r2, r9
 80041de:	4659      	mov	r1, fp
 80041e0:	0030      	movs	r0, r6
 80041e2:	f00f fecb 	bl	8013f7c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 80041e6:	0030      	movs	r0, r6
 80041e8:	f7fb ff96 	bl	8000118 <strlen>
 80041ec:	2301      	movs	r3, #1
 80041ee:	425b      	negs	r3, r3
 80041f0:	b282      	uxth	r2, r0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0031      	movs	r1, r6
 80041f6:	4650      	mov	r0, sl
 80041f8:	3333      	adds	r3, #51	; 0x33
 80041fa:	f009 fc39 	bl	800da70 <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80041fe:	2c0a      	cmp	r4, #10
 8004200:	d1e3      	bne.n	80041ca <DisplayPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8004202:	464b      	mov	r3, r9
 8004204:	3301      	adds	r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	4699      	mov	r9, r3
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <DisplayPortsDir+0xf0>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	454b      	cmp	r3, r9
 8004210:	d2d2      	bcs.n	80041b8 <DisplayPortsDir+0x54>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004212:	4c0e      	ldr	r4, [pc, #56]	; (800424c <DisplayPortsDir+0xe8>)
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <DisplayPortsDir+0xfc>)
 8004216:	3468      	adds	r4, #104	; 0x68
 8004218:	0022      	movs	r2, r4
 800421a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800421c:	c223      	stmia	r2!, {r0, r1, r5}
 800421e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004220:	c223      	stmia	r2!, {r0, r1, r5}
 8004222:	cb03      	ldmia	r3!, {r0, r1}
 8004224:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004226:	0020      	movs	r0, r4
 8004228:	f7fb ff76 	bl	8000118 <strlen>
 800422c:	2301      	movs	r3, #1
 800422e:	425b      	negs	r3, r3
 8004230:	b282      	uxth	r2, r0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	0021      	movs	r1, r4
 8004236:	4650      	mov	r0, sl
 8004238:	3333      	adds	r3, #51	; 0x33
 800423a:	f009 fc19 	bl	800da70 <writePxMutex>
	HAL_MAX_DELAY);
}
 800423e:	b003      	add	sp, #12
 8004240:	bcf0      	pop	{r4, r5, r6, r7}
 8004242:	46bb      	mov	fp, r7
 8004244:	46b2      	mov	sl, r6
 8004246:	46a9      	mov	r9, r5
 8004248:	46a0      	mov	r8, r4
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424c:	20000ba8 	.word	0x20000ba8
 8004250:	0801a4cc 	.word	0x0801a4cc
 8004254:	20000008 	.word	0x20000008
 8004258:	200029e4 	.word	0x200029e4
 800425c:	0801a508 	.word	0x0801a508
 8004260:	0801a4e8 	.word	0x0801a4e8

08004264 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	46de      	mov	lr, fp
 8004268:	464e      	mov	r6, r9
 800426a:	4645      	mov	r5, r8
 800426c:	4657      	mov	r7, sl
 800426e:	b5e0      	push	{r5, r6, r7, lr}
 8004270:	b085      	sub	sp, #20
 8004272:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004274:	f009 ff84 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8004278:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800427a:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800427c:	4d99      	ldr	r5, [pc, #612]	; (80044e4 <DisplayModuleStatus+0x280>)
	strcpy((char* )pcOutputString,"");
 800427e:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004280:	4b99      	ldr	r3, [pc, #612]	; (80044e8 <DisplayModuleStatus+0x284>)
 8004282:	3568      	adds	r5, #104	; 0x68
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	4999      	ldr	r1, [pc, #612]	; (80044ec <DisplayModuleStatus+0x288>)
 8004288:	0028      	movs	r0, r5
 800428a:	f00f fe77 	bl	8013f7c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800428e:	0029      	movs	r1, r5
 8004290:	0020      	movs	r0, r4
 8004292:	f00f fe93 	bl	8013fbc <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004296:	4b96      	ldr	r3, [pc, #600]	; (80044f0 <DisplayModuleStatus+0x28c>)
 8004298:	4996      	ldr	r1, [pc, #600]	; (80044f4 <DisplayModuleStatus+0x290>)
 800429a:	4698      	mov	r8, r3
 800429c:	2338      	movs	r3, #56	; 0x38
 800429e:	4642      	mov	r2, r8
 80042a0:	0028      	movs	r0, r5
 80042a2:	5cd2      	ldrb	r2, [r2, r3]
 80042a4:	f00f fe6a 	bl	8013f7c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80042a8:	0029      	movs	r1, r5
 80042aa:	0020      	movs	r0, r4
 80042ac:	f00f fe86 	bl	8013fbc <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80042b0:	2306      	movs	r3, #6
 80042b2:	2200      	movs	r2, #0
 80042b4:	4990      	ldr	r1, [pc, #576]	; (80044f8 <DisplayModuleStatus+0x294>)
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	0028      	movs	r0, r5
 80042ba:	3b04      	subs	r3, #4
 80042bc:	f00f fe5e 	bl	8013f7c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80042c0:	0029      	movs	r1, r5
 80042c2:	0020      	movs	r0, r4
 80042c4:	f00f fe7a 	bl	8013fbc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80042c8:	4a8c      	ldr	r2, [pc, #560]	; (80044fc <DisplayModuleStatus+0x298>)
 80042ca:	498d      	ldr	r1, [pc, #564]	; (8004500 <DisplayModuleStatus+0x29c>)
 80042cc:	0028      	movs	r0, r5
 80042ce:	f00f fe55 	bl	8013f7c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80042d2:	0029      	movs	r1, r5
 80042d4:	0020      	movs	r0, r4
 80042d6:	f00f fe71 	bl	8013fbc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80042da:	4a8a      	ldr	r2, [pc, #552]	; (8004504 <DisplayModuleStatus+0x2a0>)
 80042dc:	498a      	ldr	r1, [pc, #552]	; (8004508 <DisplayModuleStatus+0x2a4>)
 80042de:	0028      	movs	r0, r5
 80042e0:	f00f fe4c 	bl	8013f7c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80042e4:	0029      	movs	r1, r5
 80042e6:	0020      	movs	r0, r4
 80042e8:	f00f fe68 	bl	8013fbc <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80042ec:	002a      	movs	r2, r5
 80042ee:	4b87      	ldr	r3, [pc, #540]	; (800450c <DisplayModuleStatus+0x2a8>)
 80042f0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042f2:	c243      	stmia	r2!, {r0, r1, r6}
 80042f4:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 80042f6:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 80042fc:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80042fe:	8091      	strh	r1, [r2, #4]
 8004300:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004302:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004304:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004306:	f00f fe59 	bl	8013fbc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800430a:	4b81      	ldr	r3, [pc, #516]	; (8004510 <DisplayModuleStatus+0x2ac>)
 800430c:	469a      	mov	sl, r3
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 800430e:	4b81      	ldr	r3, [pc, #516]	; (8004514 <DisplayModuleStatus+0x2b0>)
 8004310:	4699      	mov	r9, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004312:	4b81      	ldr	r3, [pc, #516]	; (8004518 <DisplayModuleStatus+0x2b4>)
 8004314:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8004316:	0032      	movs	r2, r6
 8004318:	4651      	mov	r1, sl
 800431a:	0028      	movs	r0, r5
 800431c:	f00f fe2e 	bl	8013f7c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004320:	0029      	movs	r1, r5
 8004322:	0020      	movs	r0, r4
 8004324:	f00f fe4a 	bl	8013fbc <strcat>
		switch(portStatus[i]){
 8004328:	4643      	mov	r3, r8
 800432a:	333c      	adds	r3, #60	; 0x3c
 800432c:	5cf3      	ldrb	r3, [r6, r3]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d80b      	bhi.n	800434a <DisplayModuleStatus+0xe6>
 8004332:	464a      	mov	r2, r9
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	58d3      	ldr	r3, [r2, r3]
 8004338:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800433a:	4b78      	ldr	r3, [pc, #480]	; (800451c <DisplayModuleStatus+0x2b8>)
 800433c:	4a78      	ldr	r2, [pc, #480]	; (8004520 <DisplayModuleStatus+0x2bc>)
 800433e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004340:	c283      	stmia	r2!, {r0, r1, r7}
 8004342:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004344:	c283      	stmia	r2!, {r0, r1, r7}
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800434a:	0029      	movs	r1, r5
 800434c:	0020      	movs	r0, r4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800434e:	3601      	adds	r6, #1
		strcat((char* )pcOutputString,pcUserMessage);
 8004350:	f00f fe34 	bl	8013fbc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004354:	2e06      	cmp	r6, #6
 8004356:	d1de      	bne.n	8004316 <DisplayModuleStatus+0xb2>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004358:	4b72      	ldr	r3, [pc, #456]	; (8004524 <DisplayModuleStatus+0x2c0>)
 800435a:	4a71      	ldr	r2, [pc, #452]	; (8004520 <DisplayModuleStatus+0x2bc>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800435c:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800435e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004360:	c243      	stmia	r2!, {r0, r1, r6}
 8004362:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004364:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004366:	0029      	movs	r1, r5
 8004368:	0020      	movs	r0, r4
 800436a:	f00f fe27 	bl	8013fbc <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800436e:	2268      	movs	r2, #104	; 0x68
 8004370:	4694      	mov	ip, r2
 8004372:	4b6d      	ldr	r3, [pc, #436]	; (8004528 <DisplayModuleStatus+0x2c4>)
 8004374:	4f6d      	ldr	r7, [pc, #436]	; (800452c <DisplayModuleStatus+0x2c8>)
 8004376:	469a      	mov	sl, r3
 8004378:	4b5a      	ldr	r3, [pc, #360]	; (80044e4 <DisplayModuleStatus+0x280>)
	strcat((char* )pcOutputString,pcUserMessage);
 800437a:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800437c:	4463      	add	r3, ip
 800437e:	4699      	mov	r9, r3
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004380:	4b6b      	ldr	r3, [pc, #428]	; (8004530 <DisplayModuleStatus+0x2cc>)
 8004382:	003c      	movs	r4, r7
 8004384:	469b      	mov	fp, r3
 8004386:	4e6b      	ldr	r6, [pc, #428]	; (8004534 <DisplayModuleStatus+0x2d0>)
 8004388:	e016      	b.n	80043b8 <DisplayModuleStatus+0x154>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800438a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800438c:	f006 f9d4 	bl	800a738 <GetPort>
 8004390:	0007      	movs	r7, r0
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	f006 f9d0 	bl	800a738 <GetPort>
 8004398:	002a      	movs	r2, r5
 800439a:	003b      	movs	r3, r7
 800439c:	4651      	mov	r1, sl
 800439e:	9000      	str	r0, [sp, #0]
 80043a0:	4648      	mov	r0, r9
 80043a2:	f00f fdeb 	bl	8013f7c <sprintf>
	for(char i =1; i <= 6; i++){
 80043a6:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80043a8:	4649      	mov	r1, r9
 80043aa:	4640      	mov	r0, r8
 80043ac:	f00f fe06 	bl	8013fbc <strcat>
	for(char i =1; i <= 6; i++){
 80043b0:	3638      	adds	r6, #56	; 0x38
 80043b2:	3404      	adds	r4, #4
 80043b4:	2d07      	cmp	r5, #7
 80043b6:	d010      	beq.n	80043da <DisplayModuleStatus+0x176>
		if(streamDMA[i - 1].Instance == 0){
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <DisplayModuleStatus+0x126>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80043be:	002a      	movs	r2, r5
 80043c0:	4659      	mov	r1, fp
 80043c2:	4648      	mov	r0, r9
 80043c4:	f00f fdda 	bl	8013f7c <sprintf>
	for(char i =1; i <= 6; i++){
 80043c8:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	f00f fdf5 	bl	8013fbc <strcat>
	for(char i =1; i <= 6; i++){
 80043d2:	3638      	adds	r6, #56	; 0x38
 80043d4:	3404      	adds	r4, #4
 80043d6:	2d07      	cmp	r5, #7
 80043d8:	d1ee      	bne.n	80043b8 <DisplayModuleStatus+0x154>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80043da:	4640      	mov	r0, r8
 80043dc:	f7fb fe9c 	bl	8000118 <strlen>
 80043e0:	4644      	mov	r4, r8
 80043e2:	0006      	movs	r6, r0
 80043e4:	4b54      	ldr	r3, [pc, #336]	; (8004538 <DisplayModuleStatus+0x2d4>)
 80043e6:	2202      	movs	r2, #2
 80043e8:	0019      	movs	r1, r3
 80043ea:	1820      	adds	r0, r4, r0
 80043ec:	469a      	mov	sl, r3
 80043ee:	f00f fbcb 	bl	8013b88 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80043f2:	1cb0      	adds	r0, r6, #2
 80043f4:	221d      	movs	r2, #29
 80043f6:	4951      	ldr	r1, [pc, #324]	; (800453c <DisplayModuleStatus+0x2d8>)
 80043f8:	1820      	adds	r0, r4, r0
 80043fa:	f00f fbc5 	bl	8013b88 <memcpy>
	temp =strlen((char* )pcOutputString);
 80043fe:	231e      	movs	r3, #30
 8004400:	4698      	mov	r8, r3
 8004402:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <DisplayModuleStatus+0x2dc>)
 8004404:	44b0      	add	r8, r6
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004406:	4699      	mov	r9, r3
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004408:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <DisplayModuleStatus+0x2e0>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800440a:	2680      	movs	r6, #128	; 0x80
	temp =strlen((char* )pcOutputString);
 800440c:	2500      	movs	r5, #0
			sprintf(pcUserMessage,"P%d ",p);
 800440e:	469b      	mov	fp, r3
 8004410:	4f34      	ldr	r7, [pc, #208]	; (80044e4 <DisplayModuleStatus+0x280>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004412:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004414:	3768      	adds	r7, #104	; 0x68
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004416:	4649      	mov	r1, r9
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <DisplayModuleStatus+0x284>)
 800441a:	002a      	movs	r2, r5
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	3501      	adds	r5, #1
 8004420:	3b01      	subs	r3, #1
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	5acb      	ldrh	r3, [r1, r3]
 8004426:	0031      	movs	r1, r6
 8004428:	4111      	asrs	r1, r2
 800442a:	4219      	tst	r1, r3
 800442c:	d13c      	bne.n	80044a8 <DisplayModuleStatus+0x244>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800442e:	2d05      	cmp	r5, #5
 8004430:	d1f1      	bne.n	8004416 <DisplayModuleStatus+0x1b2>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004432:	0020      	movs	r0, r4
 8004434:	f7fb fe70 	bl	8000118 <strlen>
 8004438:	4643      	mov	r3, r8
 800443a:	041e      	lsls	r6, r3, #16
 800443c:	0005      	movs	r5, r0
 800443e:	0c36      	lsrs	r6, r6, #16
 8004440:	42b0      	cmp	r0, r6
 8004442:	d048      	beq.n	80044d6 <DisplayModuleStatus+0x272>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004444:	2203      	movs	r2, #3
 8004446:	4651      	mov	r1, sl
 8004448:	1960      	adds	r0, r4, r5
 800444a:	f00f fb9d 	bl	8013b88 <memcpy>
	
	/* Display output */
	if(port)
 800444e:	9b03      	ldr	r3, [sp, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d133      	bne.n	80044bc <DisplayModuleStatus+0x258>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8004454:	b005      	add	sp, #20
 8004456:	bcf0      	pop	{r4, r5, r6, r7}
 8004458:	46bb      	mov	fp, r7
 800445a:	46b2      	mov	sl, r6
 800445c:	46a9      	mov	r9, r5
 800445e:	46a0      	mov	r8, r4
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004462:	4b39      	ldr	r3, [pc, #228]	; (8004548 <DisplayModuleStatus+0x2e4>)
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <DisplayModuleStatus+0x2bc>)
 8004466:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004468:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800446a:	e76e      	b.n	800434a <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <DisplayModuleStatus+0x2e8>)
 800446e:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <DisplayModuleStatus+0x2bc>)
 8004470:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004472:	c283      	stmia	r2!, {r0, r1, r7}
 8004474:	cb03      	ldmia	r3!, {r0, r1}
 8004476:	c203      	stmia	r2!, {r0, r1}
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	7013      	strb	r3, [r2, #0]
				break;
 800447c:	e765      	b.n	800434a <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800447e:	465a      	mov	r2, fp
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <DisplayModuleStatus+0x2bc>)
 8004482:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004484:	c383      	stmia	r3!, {r0, r1, r7}
 8004486:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004488:	c383      	stmia	r3!, {r0, r1, r7}
 800448a:	6811      	ldr	r1, [r2, #0]
 800448c:	6019      	str	r1, [r3, #0]
 800448e:	8891      	ldrh	r1, [r2, #4]
 8004490:	8099      	strh	r1, [r3, #4]
 8004492:	7992      	ldrb	r2, [r2, #6]
 8004494:	719a      	strb	r2, [r3, #6]
				break;
 8004496:	e758      	b.n	800434a <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Free\n\r");
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <DisplayModuleStatus+0x2ec>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	602a      	str	r2, [r5, #0]
 800449e:	889a      	ldrh	r2, [r3, #4]
 80044a0:	80aa      	strh	r2, [r5, #4]
 80044a2:	799b      	ldrb	r3, [r3, #6]
 80044a4:	71ab      	strb	r3, [r5, #6]
				break;
 80044a6:	e750      	b.n	800434a <DisplayModuleStatus+0xe6>
			sprintf(pcUserMessage,"P%d ",p);
 80044a8:	4659      	mov	r1, fp
 80044aa:	002a      	movs	r2, r5
 80044ac:	0038      	movs	r0, r7
 80044ae:	f00f fd65 	bl	8013f7c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80044b2:	0039      	movs	r1, r7
 80044b4:	0020      	movs	r0, r4
 80044b6:	f00f fd81 	bl	8013fbc <strcat>
 80044ba:	e7b8      	b.n	800442e <DisplayModuleStatus+0x1ca>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80044bc:	0020      	movs	r0, r4
 80044be:	f7fb fe2b 	bl	8000118 <strlen>
 80044c2:	2301      	movs	r3, #1
 80044c4:	425b      	negs	r3, r3
 80044c6:	b282      	uxth	r2, r0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	0021      	movs	r1, r4
 80044cc:	9803      	ldr	r0, [sp, #12]
 80044ce:	3333      	adds	r3, #51	; 0x33
 80044d0:	f009 face 	bl	800da70 <writePxMutex>
}
 80044d4:	e7be      	b.n	8004454 <DisplayModuleStatus+0x1f0>
		strcat((char* )pcOutputString,"None");
 80044d6:	2205      	movs	r2, #5
 80044d8:	491e      	ldr	r1, [pc, #120]	; (8004554 <DisplayModuleStatus+0x2f0>)
 80044da:	1820      	adds	r0, r4, r0
 80044dc:	f00f fb54 	bl	8013b88 <memcpy>
	strcat((char* )pcOutputString,"\n\r");
 80044e0:	3504      	adds	r5, #4
 80044e2:	e7af      	b.n	8004444 <DisplayModuleStatus+0x1e0>
 80044e4:	20000ba8 	.word	0x20000ba8
 80044e8:	20000aa8 	.word	0x20000aa8
 80044ec:	0801a51c 	.word	0x0801a51c
 80044f0:	20000c28 	.word	0x20000c28
 80044f4:	0801a538 	.word	0x0801a538
 80044f8:	0801a554 	.word	0x0801a554
 80044fc:	0801a574 	.word	0x0801a574
 8004500:	0801a580 	.word	0x0801a580
 8004504:	0801a598 	.word	0x0801a598
 8004508:	0801a5a4 	.word	0x0801a5a4
 800450c:	0801a5c0 	.word	0x0801a5c0
 8004510:	0801a5d4 	.word	0x0801a5d4
 8004514:	08019cb0 	.word	0x08019cb0
 8004518:	0801a624 	.word	0x0801a624
 800451c:	0801a608 	.word	0x0801a608
 8004520:	20000c10 	.word	0x20000c10
 8004524:	0801a644 	.word	0x0801a644
 8004528:	0801a678 	.word	0x0801a678
 800452c:	2000198c 	.word	0x2000198c
 8004530:	0801a65c 	.word	0x0801a65c
 8004534:	20002500 	.word	0x20002500
 8004538:	0801a5d0 	.word	0x0801a5d0
 800453c:	0801a6a8 	.word	0x0801a6a8
 8004540:	200029e4 	.word	0x200029e4
 8004544:	0801a6c8 	.word	0x0801a6c8
 8004548:	0801a5fc 	.word	0x0801a5fc
 800454c:	0801a5e4 	.word	0x0801a5e4
 8004550:	0801a5dc 	.word	0x0801a5dc
 8004554:	0801a6d0 	.word	0x0801a6d0

08004558 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	46c6      	mov	lr, r8
 800455c:	b500      	push	{lr}
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 800455e:	7803      	ldrb	r3, [r0, #0]
int16_t GetID(char *string){
 8004560:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004562:	2b6d      	cmp	r3, #109	; 0x6d
 8004564:	d10a      	bne.n	800457c <GetID+0x24>
 8004566:	7843      	ldrb	r3, [r0, #1]
 8004568:	2b65      	cmp	r3, #101	; 0x65
 800456a:	d107      	bne.n	800457c <GetID+0x24>
 800456c:	7883      	ldrb	r3, [r0, #2]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <GetID+0x24>
		return myID;
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <GetID+0xb4>)
 8004574:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004576:	bc80      	pop	{r7}
 8004578:	46b8      	mov	r8, r7
 800457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strcmp(string,"all"))
 800457c:	0030      	movs	r0, r6
 800457e:	4924      	ldr	r1, [pc, #144]	; (8004610 <GetID+0xb8>)
 8004580:	f7fb fdc0 	bl	8000104 <strcmp>
 8004584:	2800      	cmp	r0, #0
 8004586:	d037      	beq.n	80045f8 <GetID+0xa0>
	else if(string[0] == '#') /* Check IDs */
 8004588:	7833      	ldrb	r3, [r6, #0]
 800458a:	4698      	mov	r8, r3
 800458c:	2b23      	cmp	r3, #35	; 0x23
 800458e:	d022      	beq.n	80045d6 <GetID+0x7e>
		for(i =0; i < N; i++){
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <GetID+0xbc>)
 8004592:	781f      	ldrb	r7, [r3, #0]
 8004594:	2f00      	cmp	r7, #0
 8004596:	d00f      	beq.n	80045b8 <GetID+0x60>
 8004598:	2400      	movs	r4, #0
 800459a:	4d1f      	ldr	r5, [pc, #124]	; (8004618 <GetID+0xc0>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800459c:	0029      	movs	r1, r5
 800459e:	0030      	movs	r0, r6
 80045a0:	f7fb fdb0 	bl	8000104 <strcmp>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d102      	bne.n	80045ae <GetID+0x56>
 80045a8:	4643      	mov	r3, r8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d126      	bne.n	80045fc <GetID+0xa4>
		for(i =0; i < N; i++){
 80045ae:	3401      	adds	r4, #1
 80045b0:	b2e4      	uxtb	r4, r4
 80045b2:	350a      	adds	r5, #10
 80045b4:	42a7      	cmp	r7, r4
 80045b6:	d1f1      	bne.n	800459c <GetID+0x44>
 80045b8:	2400      	movs	r4, #0
 80045ba:	4d14      	ldr	r5, [pc, #80]	; (800460c <GetID+0xb4>)
 80045bc:	3538      	adds	r5, #56	; 0x38
			if(!strcmp(string,groupAlias[i]))
 80045be:	0029      	movs	r1, r5
 80045c0:	0030      	movs	r0, r6
 80045c2:	f7fb fd9f 	bl	8000104 <strcmp>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d01a      	beq.n	8004600 <GetID+0xa8>
		for(i =0; i < MaxNumOfGroups; i++){
 80045ca:	3401      	adds	r4, #1
 80045cc:	350a      	adds	r5, #10
 80045ce:	2c0a      	cmp	r4, #10
 80045d0:	d1f5      	bne.n	80045be <GetID+0x66>
		return BOS_ERR_WrongName;
 80045d2:	2064      	movs	r0, #100	; 0x64
 80045d4:	e7cf      	b.n	8004576 <GetID+0x1e>
		id =atol(string + 1);
 80045d6:	1c70      	adds	r0, r6, #1
 80045d8:	f00f f817 	bl	801360a <atol>
 80045dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <GetID+0x92>
 80045e2:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <GetID+0xbc>)
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d204      	bcs.n	80045f4 <GetID+0x9c>
		else if(id == myID)
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <GetID+0xb4>)
			return BOS_ERR_WrongID;
 80045ec:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1c0      	bne.n	8004576 <GetID+0x1e>
			return myID;
 80045f4:	b218      	sxth	r0, r3
 80045f6:	e7be      	b.n	8004576 <GetID+0x1e>
		return BOS_BROADCAST;
 80045f8:	20ff      	movs	r0, #255	; 0xff
 80045fa:	e7bc      	b.n	8004576 <GetID+0x1e>
				return (i);
 80045fc:	b220      	sxth	r0, r4
 80045fe:	e7ba      	b.n	8004576 <GetID+0x1e>
				return (BOS_MULTICAST | (i << 8));
 8004600:	20fe      	movs	r0, #254	; 0xfe
 8004602:	0224      	lsls	r4, r4, #8
 8004604:	4320      	orrs	r0, r4
 8004606:	b200      	sxth	r0, r0
 8004608:	e7b5      	b.n	8004576 <GetID+0x1e>
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	20000aa8 	.word	0x20000aa8
 8004610:	0801a6d8 	.word	0x0801a6d8
 8004614:	20000008 	.word	0x20000008
 8004618:	20000e74 	.word	0x20000e74

0800461c <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 800461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461e:	46c6      	mov	lr, r8
 8004620:	4c2a      	ldr	r4, [pc, #168]	; (80046cc <NameModule+0xb0>)
 8004622:	4680      	mov	r8, r0
 8004624:	0025      	movs	r5, r4
 8004626:	000e      	movs	r6, r1
 8004628:	b500      	push	{lr}
 800462a:	3510      	adds	r5, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800462c:	0021      	movs	r1, r4
 800462e:	0030      	movs	r0, r6
 8004630:	f7fb fd68 	bl	8000104 <strcmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	d03a      	beq.n	80046ae <NameModule+0x92>
	for(i =0; i < NumOfKeywords; i++){
 8004638:	3404      	adds	r4, #4
 800463a:	42ac      	cmp	r4, r5
 800463c:	d1f6      	bne.n	800462c <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <NameModule+0xb4>)
 8004640:	781f      	ldrb	r7, [r3, #0]
 8004642:	2f01      	cmp	r7, #1
 8004644:	dd10      	ble.n	8004668 <NameModule+0x4c>
 8004646:	2501      	movs	r5, #1
 8004648:	4c22      	ldr	r4, [pc, #136]	; (80046d4 <NameModule+0xb8>)
 800464a:	e003      	b.n	8004654 <NameModule+0x38>
 800464c:	3501      	adds	r5, #1
 800464e:	340a      	adds	r4, #10
 8004650:	42bd      	cmp	r5, r7
 8004652:	da09      	bge.n	8004668 <NameModule+0x4c>
		if(!strcmp(alias,moduleAlias[i]))
 8004654:	0021      	movs	r1, r4
 8004656:	0030      	movs	r0, r6
 8004658:	f7fb fd54 	bl	8000104 <strcmp>
 800465c:	2800      	cmp	r0, #0
 800465e:	d1f5      	bne.n	800464c <NameModule+0x30>
			return BOS_ERR_ExistingAlias;
 8004660:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004662:	bc80      	pop	{r7}
 8004664:	46b8      	mov	r8, r7
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004668:	4d1b      	ldr	r5, [pc, #108]	; (80046d8 <NameModule+0xbc>)
 800466a:	002c      	movs	r4, r5
 800466c:	359c      	adds	r5, #156	; 0x9c
 800466e:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004670:	0021      	movs	r1, r4
 8004672:	0030      	movs	r0, r6
 8004674:	f7fb fd46 	bl	8000104 <strcmp>
 8004678:	2800      	cmp	r0, #0
 800467a:	d0f1      	beq.n	8004660 <NameModule+0x44>
	for(i =0; i < MaxNumOfGroups; i++){
 800467c:	340a      	adds	r4, #10
 800467e:	42a5      	cmp	r5, r4
 8004680:	d1f6      	bne.n	8004670 <NameModule+0x54>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004682:	4f16      	ldr	r7, [pc, #88]	; (80046dc <NameModule+0xc0>)
 8004684:	4c16      	ldr	r4, [pc, #88]	; (80046e0 <NameModule+0xc4>)
 8004686:	647c      	str	r4, [r7, #68]	; 0x44
 8004688:	e003      	b.n	8004692 <NameModule+0x76>
 800468a:	6864      	ldr	r4, [r4, #4]
 800468c:	647c      	str	r4, [r7, #68]	; 0x44
 800468e:	2c00      	cmp	r4, #0
 8004690:	d00f      	beq.n	80046b2 <NameModule+0x96>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004696:	0028      	movs	r0, r5
 8004698:	f7fb fd3e 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800469c:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800469e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80046a0:	0030      	movs	r0, r6
 80046a2:	f00f fcae 	bl	8014002 <strncmp>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1ef      	bne.n	800468a <NameModule+0x6e>
			return BOS_ERR_ExistingCmd;
 80046aa:	2008      	movs	r0, #8
 80046ac:	e7d9      	b.n	8004662 <NameModule+0x46>
			return BOS_ERR_Keyword;
 80046ae:	2006      	movs	r0, #6
 80046b0:	e7d7      	b.n	8004662 <NameModule+0x46>
	strcpy(moduleAlias[module],alias);
 80046b2:	4643      	mov	r3, r8
 80046b4:	0098      	lsls	r0, r3, #2
 80046b6:	4f0b      	ldr	r7, [pc, #44]	; (80046e4 <NameModule+0xc8>)
 80046b8:	4440      	add	r0, r8
 80046ba:	0040      	lsls	r0, r0, #1
 80046bc:	0031      	movs	r1, r6
 80046be:	19c0      	adds	r0, r0, r7
 80046c0:	f00f fc97 	bl	8013ff2 <strcpy>
	result =SaveEEalias();
 80046c4:	f7ff f87e 	bl	80037c4 <SaveEEalias>
	return result;
 80046c8:	e7cb      	b.n	8004662 <NameModule+0x46>
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	08019d0c 	.word	0x08019d0c
 80046d0:	20000008 	.word	0x20000008
 80046d4:	20000e7e 	.word	0x20000e7e
 80046d8:	20000aa8 	.word	0x20000aa8
 80046dc:	20000c28 	.word	0x20000c28
 80046e0:	200000bc 	.word	0x200000bc
 80046e4:	20000e74 	.word	0x20000e74

080046e8 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	464f      	mov	r7, r9
 80046ec:	4646      	mov	r6, r8
 80046ee:	46d6      	mov	lr, sl
 80046f0:	4b3c      	ldr	r3, [pc, #240]	; (80047e4 <AddModuleToGroup+0xfc>)
 80046f2:	b5c0      	push	{r6, r7, lr}
 80046f4:	001f      	movs	r7, r3
 80046f6:	3738      	adds	r7, #56	; 0x38
 80046f8:	4680      	mov	r8, r0
 80046fa:	000e      	movs	r6, r1
 80046fc:	4699      	mov	r9, r3
 80046fe:	003d      	movs	r5, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004700:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 8004702:	0029      	movs	r1, r5
 8004704:	0030      	movs	r0, r6
 8004706:	f7fb fcfd 	bl	8000104 <strcmp>
 800470a:	2800      	cmp	r0, #0
 800470c:	d051      	beq.n	80047b2 <AddModuleToGroup+0xca>
	for(i =0; i < MaxNumOfGroups; i++){
 800470e:	3401      	adds	r4, #1
 8004710:	350a      	adds	r5, #10
 8004712:	2c0a      	cmp	r4, #10
 8004714:	d1f5      	bne.n	8004702 <AddModuleToGroup+0x1a>
 8004716:	4c34      	ldr	r4, [pc, #208]	; (80047e8 <AddModuleToGroup+0x100>)
 8004718:	0025      	movs	r5, r4
 800471a:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 800471c:	0021      	movs	r1, r4
 800471e:	0030      	movs	r0, r6
 8004720:	f7fb fcf0 	bl	8000104 <strcmp>
 8004724:	2800      	cmp	r0, #0
 8004726:	d04e      	beq.n	80047c6 <AddModuleToGroup+0xde>
	for(j =0; j < NumOfKeywords; j++){
 8004728:	3404      	adds	r4, #4
 800472a:	42a5      	cmp	r5, r4
 800472c:	d1f6      	bne.n	800471c <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <AddModuleToGroup+0x104>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	469a      	mov	sl, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	dd12      	ble.n	800475e <AddModuleToGroup+0x76>
 8004738:	2501      	movs	r5, #1
 800473a:	4c2d      	ldr	r4, [pc, #180]	; (80047f0 <AddModuleToGroup+0x108>)
 800473c:	e003      	b.n	8004746 <AddModuleToGroup+0x5e>
 800473e:	3501      	adds	r5, #1
 8004740:	340a      	adds	r4, #10
 8004742:	45aa      	cmp	sl, r5
 8004744:	dd0b      	ble.n	800475e <AddModuleToGroup+0x76>
		if(!strcmp(group,moduleAlias[j]))
 8004746:	0021      	movs	r1, r4
 8004748:	0030      	movs	r0, r6
 800474a:	f7fb fcdb 	bl	8000104 <strcmp>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1f5      	bne.n	800473e <AddModuleToGroup+0x56>
			return BOS_ERR_ExistingAlias;
 8004752:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004754:	bce0      	pop	{r5, r6, r7}
 8004756:	46ba      	mov	sl, r7
 8004758:	46b1      	mov	r9, r6
 800475a:	46a8      	mov	r8, r5
 800475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <AddModuleToGroup+0x10c>)
 8004760:	4c25      	ldr	r4, [pc, #148]	; (80047f8 <AddModuleToGroup+0x110>)
 8004762:	469a      	mov	sl, r3
 8004764:	649c      	str	r4, [r3, #72]	; 0x48
 8004766:	e004      	b.n	8004772 <AddModuleToGroup+0x8a>
 8004768:	4653      	mov	r3, sl
 800476a:	6864      	ldr	r4, [r4, #4]
 800476c:	649c      	str	r4, [r3, #72]	; 0x48
 800476e:	2c00      	cmp	r4, #0
 8004770:	d00d      	beq.n	800478e <AddModuleToGroup+0xa6>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004776:	0028      	movs	r0, r5
 8004778:	f7fb fcce 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800477c:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800477e:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004780:	0030      	movs	r0, r6
 8004782:	f00f fc3e 	bl	8014002 <strncmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	d1ee      	bne.n	8004768 <AddModuleToGroup+0x80>
			return BOS_ERR_ExistingCmd;
 800478a:	2008      	movs	r0, #8
 800478c:	e7e2      	b.n	8004754 <AddModuleToGroup+0x6c>
		if(!groupAlias[i][0]){
 800478e:	783b      	ldrb	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <AddModuleToGroup+0xe2>
	for(i =0; i < MaxNumOfGroups; i++){
 8004794:	3401      	adds	r4, #1
 8004796:	370a      	adds	r7, #10
 8004798:	2c0a      	cmp	r4, #10
 800479a:	d1f8      	bne.n	800478e <AddModuleToGroup+0xa6>
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80047a0:	4647      	mov	r7, r8
 80047a2:	3f01      	subs	r7, #1
 80047a4:	007f      	lsls	r7, r7, #1
 80047a6:	444f      	add	r7, r9
 80047a8:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80047aa:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80047ac:	4313      	orrs	r3, r2
 80047ae:	80bb      	strh	r3, [r7, #4]
	return result;
 80047b0:	e7d0      	b.n	8004754 <AddModuleToGroup+0x6c>
			groupModules[module - 1] |=(0x0001 << i);
 80047b2:	2201      	movs	r2, #1
 80047b4:	4647      	mov	r7, r8
 80047b6:	40a2      	lsls	r2, r4
 80047b8:	3f01      	subs	r7, #1
 80047ba:	007f      	lsls	r7, r7, #1
 80047bc:	444f      	add	r7, r9
 80047be:	88bb      	ldrh	r3, [r7, #4]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	80bb      	strh	r3, [r7, #4]
			return result;
 80047c4:	e7c6      	b.n	8004754 <AddModuleToGroup+0x6c>
			return BOS_ERR_Keyword;
 80047c6:	2006      	movs	r0, #6
 80047c8:	e7c4      	b.n	8004754 <AddModuleToGroup+0x6c>
			strcpy(groupAlias[i],group);
 80047ca:	464a      	mov	r2, r9
 80047cc:	00a3      	lsls	r3, r4, #2
 80047ce:	191b      	adds	r3, r3, r4
 80047d0:	0058      	lsls	r0, r3, #1
 80047d2:	3238      	adds	r2, #56	; 0x38
 80047d4:	0031      	movs	r1, r6
 80047d6:	1810      	adds	r0, r2, r0
 80047d8:	f00f fc0b 	bl	8013ff2 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80047dc:	2301      	movs	r3, #1
 80047de:	40a3      	lsls	r3, r4
 80047e0:	b21b      	sxth	r3, r3
			break;
 80047e2:	e7dd      	b.n	80047a0 <AddModuleToGroup+0xb8>
 80047e4:	20000aa8 	.word	0x20000aa8
 80047e8:	08019d0c 	.word	0x08019d0c
 80047ec:	20000008 	.word	0x20000008
 80047f0:	20000e7e 	.word	0x20000e7e
 80047f4:	20000c28 	.word	0x20000c28
 80047f8:	200000bc 	.word	0x200000bc

080047fc <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	4647      	mov	r7, r8
 8004800:	46ce      	mov	lr, r9
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004802:	2524      	movs	r5, #36	; 0x24
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004804:	b580      	push	{r7, lr}
 8004806:	468c      	mov	ip, r1
 8004808:	a908      	add	r1, sp, #32
 800480a:	c910      	ldmia	r1!, {r4}
	response =BOSMessaging.response;
 800480c:	4e92      	ldr	r6, [pc, #584]	; (8004a58 <WriteToRemote+0x25c>)
 800480e:	46a8      	mov	r8, r5
 8004810:	5d77      	ldrb	r7, [r6, r5]
	if(timeout)
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004812:	0025      	movs	r5, r4
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004814:	4681      	mov	r9, r0
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004816:	1e68      	subs	r0, r5, #1
 8004818:	4185      	sbcs	r5, r0
 800481a:	4640      	mov	r0, r8
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800481c:	7809      	ldrb	r1, [r1, #0]
		BOSMessaging.response = BOS_RESPONSE_MSG;
 800481e:	016d      	lsls	r5, r5, #5
 8004820:	5435      	strb	r5, [r6, r0]
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
	else
		code = CODE_WRITE_REMOTE;
 8004822:	000d      	movs	r5, r1
 8004824:	1e69      	subs	r1, r5, #1
 8004826:	418d      	sbcs	r5, r1
 8004828:	0069      	lsls	r1, r5, #1
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 800482a:	2580      	movs	r5, #128	; 0x80
		code = CODE_WRITE_REMOTE;
 800482c:	3120      	adds	r1, #32
	if(remoteAddress < FLASH_BASE){
 800482e:	052d      	lsls	r5, r5, #20
 8004830:	42aa      	cmp	r2, r5
 8004832:	d229      	bcs.n	8004888 <WriteToRemote+0x8c>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004834:	214c      	movs	r1, #76	; 0x4c
 8004836:	5472      	strb	r2, [r6, r1]
		messageParams[1] =format;						// Send local format
 8004838:	0032      	movs	r2, r6
 800483a:	324c      	adds	r2, #76	; 0x4c
 800483c:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 800483e:	2b08      	cmp	r3, #8
 8004840:	d819      	bhi.n	8004876 <WriteToRemote+0x7a>
 8004842:	4a86      	ldr	r2, [pc, #536]	; (8004a5c <WriteToRemote+0x260>)
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	58d3      	ldr	r3, [r2, r3]
 8004848:	469f      	mov	pc, r3
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
				break;
			case FMT_INT32:
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800484a:	4663      	mov	r3, ip
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	0033      	movs	r3, r6
 8004850:	334c      	adds	r3, #76	; 0x4c
 8004852:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004854:	4662      	mov	r2, ip
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	1212      	asrs	r2, r2, #8
 800485a:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800485c:	4662      	mov	r2, ip
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	1412      	asrs	r2, r2, #16
 8004862:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004864:	4662      	mov	r2, ip
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	1612      	asrs	r2, r2, #24
 800486a:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 800486c:	2120      	movs	r1, #32
 800486e:	2206      	movs	r2, #6
 8004870:	4648      	mov	r0, r9
 8004872:	f003 fde5 	bl	8008440 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004876:	2324      	movs	r3, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004878:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 800487a:	54f7      	strb	r7, [r6, r3]
	if(timeout){
 800487c:	2c00      	cmp	r4, #0
 800487e:	d115      	bne.n	80048ac <WriteToRemote+0xb0>
}
 8004880:	bcc0      	pop	{r6, r7}
 8004882:	46b9      	mov	r9, r7
 8004884:	46b0      	mov	r8, r6
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004888:	254c      	movs	r5, #76	; 0x4c
 800488a:	2000      	movs	r0, #0
 800488c:	5570      	strb	r0, [r6, r5]
		messageParams[1] =format;							// Local format
 800488e:	0035      	movs	r5, r6
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 8004890:	0e10      	lsrs	r0, r2, #24
		messageParams[1] =format;							// Local format
 8004892:	354c      	adds	r5, #76	; 0x4c
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 8004894:	70a8      	strb	r0, [r5, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004896:	0c10      	lsrs	r0, r2, #16
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004898:	ba52      	rev16	r2, r2
		messageParams[1] =format;							// Local format
 800489a:	706b      	strb	r3, [r5, #1]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 800489c:	70e8      	strb	r0, [r5, #3]
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 800489e:	80aa      	strh	r2, [r5, #4]
		switch(format){
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d8e8      	bhi.n	8004876 <WriteToRemote+0x7a>
 80048a4:	4a6e      	ldr	r2, [pc, #440]	; (8004a60 <WriteToRemote+0x264>)
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	58d3      	ldr	r3, [r2, r3]
 80048aa:	469f      	mov	pc, r3
		uint32_t t0 =HAL_GetTick();
 80048ac:	f00b f98c 	bl	800fbc8 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80048b0:	264c      	movs	r6, #76	; 0x4c
		uint32_t t0 =HAL_GetTick();
 80048b2:	0005      	movs	r5, r0
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80048b4:	4f6b      	ldr	r7, [pc, #428]	; (8004a64 <WriteToRemote+0x268>)
 80048b6:	5db8      	ldrb	r0, [r7, r6]
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d0e1      	beq.n	8004880 <WriteToRemote+0x84>
 80048bc:	f00b f984 	bl	800fbc8 <HAL_GetTick>
 80048c0:	1b40      	subs	r0, r0, r5
 80048c2:	42a0      	cmp	r0, r4
 80048c4:	d3f7      	bcc.n	80048b6 <WriteToRemote+0xba>
		return responseStatus;
 80048c6:	5db8      	ldrb	r0, [r7, r6]
 80048c8:	e7da      	b.n	8004880 <WriteToRemote+0x84>
				messageParams[6] =*(__IO int8_t* )localAddress;
 80048ca:	4663      	mov	r3, ip
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	0033      	movs	r3, r6
 80048d0:	334c      	adds	r3, #76	; 0x4c
 80048d2:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80048d4:	4648      	mov	r0, r9
 80048d6:	2207      	movs	r2, #7
 80048d8:	f003 fdb2 	bl	8008440 <SendMessageToModule>
				break;
 80048dc:	e7cb      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80048de:	4663      	mov	r3, ip
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	0033      	movs	r3, r6
 80048e4:	334c      	adds	r3, #76	; 0x4c
 80048e6:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80048e8:	2120      	movs	r1, #32
 80048ea:	2203      	movs	r2, #3
 80048ec:	4648      	mov	r0, r9
 80048ee:	f003 fda7 	bl	8008440 <SendMessageToModule>
				break;
 80048f2:	e7c0      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048f4:	4663      	mov	r3, ip
 80048f6:	0032      	movs	r2, r6
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	324c      	adds	r2, #76	; 0x4c
 80048fc:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048fe:	4663      	mov	r3, ip
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	0a1b      	lsrs	r3, r3, #8
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004904:	70d3      	strb	r3, [r2, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004906:	2120      	movs	r1, #32
 8004908:	2204      	movs	r2, #4
 800490a:	4648      	mov	r0, r9
 800490c:	f003 fd98 	bl	8008440 <SendMessageToModule>
				break;
 8004910:	e7b1      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004912:	4663      	mov	r3, ip
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	0033      	movs	r3, r6
 8004918:	334c      	adds	r3, #76	; 0x4c
 800491a:	709a      	strb	r2, [r3, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 800491c:	4662      	mov	r2, ip
 800491e:	7852      	ldrb	r2, [r2, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004920:	2120      	movs	r1, #32
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004922:	70da      	strb	r2, [r3, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004924:	4662      	mov	r2, ip
 8004926:	7892      	ldrb	r2, [r2, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004928:	4648      	mov	r0, r9
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800492a:	711a      	strb	r2, [r3, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800492c:	4662      	mov	r2, ip
 800492e:	78d2      	ldrb	r2, [r2, #3]
 8004930:	715a      	strb	r2, [r3, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004932:	4662      	mov	r2, ip
 8004934:	7912      	ldrb	r2, [r2, #4]
 8004936:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004938:	4662      	mov	r2, ip
 800493a:	7952      	ldrb	r2, [r2, #5]
 800493c:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 800493e:	4662      	mov	r2, ip
 8004940:	7992      	ldrb	r2, [r2, #6]
 8004942:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004944:	4662      	mov	r2, ip
 8004946:	79d2      	ldrb	r2, [r2, #7]
 8004948:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800494a:	220a      	movs	r2, #10
 800494c:	f003 fd78 	bl	8008440 <SendMessageToModule>
				break;
 8004950:	e791      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004952:	4663      	mov	r3, ip
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	0033      	movs	r3, r6
 8004958:	334c      	adds	r3, #76	; 0x4c
 800495a:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800495c:	4662      	mov	r2, ip
 800495e:	7852      	ldrb	r2, [r2, #1]
				SendMessageToModule(module,code,14);
 8004960:	4648      	mov	r0, r9
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004962:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004964:	4662      	mov	r2, ip
 8004966:	7892      	ldrb	r2, [r2, #2]
 8004968:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800496a:	4662      	mov	r2, ip
 800496c:	78d2      	ldrb	r2, [r2, #3]
 800496e:	725a      	strb	r2, [r3, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004970:	4662      	mov	r2, ip
 8004972:	7912      	ldrb	r2, [r2, #4]
 8004974:	729a      	strb	r2, [r3, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004976:	4662      	mov	r2, ip
 8004978:	7952      	ldrb	r2, [r2, #5]
 800497a:	72da      	strb	r2, [r3, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800497c:	4662      	mov	r2, ip
 800497e:	7992      	ldrb	r2, [r2, #6]
 8004980:	731a      	strb	r2, [r3, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004982:	4662      	mov	r2, ip
 8004984:	79d2      	ldrb	r2, [r2, #7]
 8004986:	735a      	strb	r2, [r3, #13]
				SendMessageToModule(module,code,14);
 8004988:	220e      	movs	r2, #14
 800498a:	f003 fd59 	bl	8008440 <SendMessageToModule>
				break;
 800498e:	e772      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004990:	4663      	mov	r3, ip
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	0033      	movs	r3, r6
 8004996:	334c      	adds	r3, #76	; 0x4c
 8004998:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800499a:	4662      	mov	r2, ip
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	0a12      	lsrs	r2, r2, #8
 80049a0:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80049a2:	4662      	mov	r2, ip
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	0c12      	lsrs	r2, r2, #16
 80049a8:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80049aa:	4662      	mov	r2, ip
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	0e12      	lsrs	r2, r2, #24
 80049b0:	e75b      	b.n	800486a <WriteToRemote+0x6e>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80049b2:	4663      	mov	r3, ip
 80049b4:	0032      	movs	r2, r6
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	324c      	adds	r2, #76	; 0x4c
 80049ba:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80049bc:	4663      	mov	r3, ip
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b21b      	sxth	r3, r3
 80049c2:	121b      	asrs	r3, r3, #8
 80049c4:	e79e      	b.n	8004904 <WriteToRemote+0x108>
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80049c6:	4663      	mov	r3, ip
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	0033      	movs	r3, r6
 80049cc:	334c      	adds	r3, #76	; 0x4c
 80049ce:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80049d0:	4662      	mov	r2, ip
 80049d2:	6812      	ldr	r2, [r2, #0]
				SendMessageToModule(module,code,10);
 80049d4:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80049d6:	1212      	asrs	r2, r2, #8
 80049d8:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80049da:	4662      	mov	r2, ip
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	1412      	asrs	r2, r2, #16
 80049e0:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80049e2:	4662      	mov	r2, ip
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	1612      	asrs	r2, r2, #24
 80049e8:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 80049ea:	220a      	movs	r2, #10
 80049ec:	f003 fd28 	bl	8008440 <SendMessageToModule>
				break;
 80049f0:	e741      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80049f2:	4663      	mov	r3, ip
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	0033      	movs	r3, r6
 80049f8:	334c      	adds	r3, #76	; 0x4c
 80049fa:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80049fc:	4662      	mov	r2, ip
 80049fe:	6812      	ldr	r2, [r2, #0]
				SendMessageToModule(module,code,10);
 8004a00:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004a02:	0a12      	lsrs	r2, r2, #8
 8004a04:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004a06:	4662      	mov	r2, ip
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	0c12      	lsrs	r2, r2, #16
 8004a0c:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004a0e:	4662      	mov	r2, ip
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	0e12      	lsrs	r2, r2, #24
 8004a14:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 8004a16:	220a      	movs	r2, #10
 8004a18:	f003 fd12 	bl	8008440 <SendMessageToModule>
				break;
 8004a1c:	e72b      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004a1e:	4663      	mov	r3, ip
 8004a20:	0032      	movs	r2, r6
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	324c      	adds	r2, #76	; 0x4c
 8004a26:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004a28:	4663      	mov	r3, ip
 8004a2a:	881b      	ldrh	r3, [r3, #0]
				SendMessageToModule(module,code,8);
 8004a2c:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	121b      	asrs	r3, r3, #8
 8004a32:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 8004a34:	2208      	movs	r2, #8
 8004a36:	f003 fd03 	bl	8008440 <SendMessageToModule>
				break;
 8004a3a:	e71c      	b.n	8004876 <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004a3c:	4663      	mov	r3, ip
 8004a3e:	0032      	movs	r2, r6
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	324c      	adds	r2, #76	; 0x4c
 8004a44:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004a46:	4663      	mov	r3, ip
 8004a48:	881b      	ldrh	r3, [r3, #0]
				SendMessageToModule(module,code,8);
 8004a4a:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 8004a50:	2208      	movs	r2, #8
 8004a52:	f003 fcf5 	bl	8008440 <SendMessageToModule>
				break;
 8004a56:	e70e      	b.n	8004876 <WriteToRemote+0x7a>
 8004a58:	20000b28 	.word	0x20000b28
 8004a5c:	08019cc4 	.word	0x08019cc4
 8004a60:	08019ce8 	.word	0x08019ce8
 8004a64:	20000c28 	.word	0x20000c28

08004a68 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004a68:	b570      	push	{r4, r5, r6, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004a6a:	2101      	movs	r1, #1
char* GetDateString(void){
 8004a6c:	b082      	sub	sp, #8
	char *buffer =malloc(30 * sizeof(int8_t));
 8004a6e:	201e      	movs	r0, #30
 8004a70:	f00e fdd2 	bl	8013618 <calloc>
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004a74:	4d0b      	ldr	r5, [pc, #44]	; (8004aa4 <GetDateString+0x3c>)
	char *buffer =malloc(30 * sizeof(int8_t));
 8004a76:	0004      	movs	r4, r0
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004a78:	0028      	movs	r0, r5
 8004a7a:	2644      	movs	r6, #68	; 0x44
 8004a7c:	302c      	adds	r0, #44	; 0x2c
 8004a7e:	7d02      	ldrb	r2, [r0, #20]
 8004a80:	5bad      	ldrh	r5, [r5, r6]
 8004a82:	7d83      	ldrb	r3, [r0, #22]
 8004a84:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <GetDateString+0x40>)
 8004a86:	9501      	str	r5, [sp, #4]
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	7d40      	ldrb	r0, [r0, #21]
 8004a8c:	0092      	lsls	r2, r2, #2
 8004a8e:	188a      	adds	r2, r1, r2
 8004a90:	9000      	str	r0, [sp, #0]
 8004a92:	6912      	ldr	r2, [r2, #16]
 8004a94:	0020      	movs	r0, r4
 8004a96:	312c      	adds	r1, #44	; 0x2c
 8004a98:	f00f fa70 	bl	8013f7c <sprintf>
	return buffer;
}
 8004a9c:	0020      	movs	r0, r4
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	20000b28 	.word	0x20000b28
 8004aa8:	08019d0c 	.word	0x08019d0c

08004aac <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004aac:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004ab0:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004ab2:	7819      	ldrb	r1, [r3, #0]
 8004ab4:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004ab6:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	3b02      	subs	r3, #2
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	3303      	adds	r3, #3
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	000b      	movs	r3, r1
 8004ac6:	f003 fcf1 	bl	80084ac <StartScastDMAStream>
}
 8004aca:	b005      	add	sp, #20
 8004acc:	bd00      	pop	{pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	20000aa8 	.word	0x20000aa8

08004ad4 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	0005      	movs	r5, r0
 8004ad8:	000c      	movs	r4, r1
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8004ada:	20e4      	movs	r0, #228	; 0xe4
 8004adc:	2100      	movs	r1, #0
 8004ade:	f006 ff71 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	20e5      	movs	r0, #229	; 0xe5
 8004ae6:	f006 ff6d 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8004aea:	2100      	movs	r1, #0
 8004aec:	20e6      	movs	r0, #230	; 0xe6
 8004aee:	f006 ff69 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8004af2:	2100      	movs	r1, #0
 8004af4:	20e7      	movs	r0, #231	; 0xe7
 8004af6:	f006 ff65 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8004afa:	2100      	movs	r1, #0
 8004afc:	20e8      	movs	r0, #232	; 0xe8
 8004afe:	f006 ff61 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8004b02:	2100      	movs	r1, #0
 8004b04:	20e9      	movs	r0, #233	; 0xe9
 8004b06:	f006 ff5d 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	20ea      	movs	r0, #234	; 0xea
 8004b0e:	f006 ff59 	bl	800b9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8004b12:	2100      	movs	r1, #0
 8004b14:	20eb      	movs	r0, #235	; 0xeb
 8004b16:	f006 ff55 	bl	800b9c4 <EE_WriteVariable>
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004b1a:	1e69      	subs	r1, r5, #1
 8004b1c:	00cb      	lsls	r3, r1, #3
 8004b1e:	1a5b      	subs	r3, r3, r1
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <Unbridge+0x90>)
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	589b      	ldr	r3, [r3, r2]
 8004b26:	1e61      	subs	r1, r4, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d011      	beq.n	8004b50 <Unbridge+0x7c>
 8004b2c:	00cb      	lsls	r3, r1, #3
 8004b2e:	1a5b      	subs	r3, r3, r1
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	589b      	ldr	r3, [r3, r2]
		SwitchStreamDMAToMsg(port1);
 8004b34:	0028      	movs	r0, r5
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <Unbridge+0x6e>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 8004b3a:	f006 fd57 	bl	800b5ec <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004b3e:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
		SwitchStreamDMAToMsg(port1);
 8004b42:	f006 fd53 	bl	800b5ec <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004b46:	0020      	movs	r0, r4
 8004b48:	f006 fd50 	bl	800b5ec <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	e7f7      	b.n	8004b40 <Unbridge+0x6c>
	else if(streamDMA[port2 - 1].Instance != 0){
 8004b50:	00cb      	lsls	r3, r1, #3
 8004b52:	1a5b      	subs	r3, r3, r1
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	589b      	ldr	r3, [r3, r2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <Unbridge+0x8c>
		SwitchStreamDMAToMsg(port2);
 8004b5c:	0020      	movs	r0, r4
 8004b5e:	e7ec      	b.n	8004b3a <Unbridge+0x66>
		return BOS_ERR_WrongValue;
 8004b60:	2068      	movs	r0, #104	; 0x68
 8004b62:	e7ed      	b.n	8004b40 <Unbridge+0x6c>
 8004b64:	20002500 	.word	0x20002500

08004b68 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	46c6      	mov	lr, r8
 8004b6c:	b500      	push	{lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004b6e:	4d26      	ldr	r5, [pc, #152]	; (8004c08 <AddSnippet.part.0+0xa0>)
BOS_Status AddSnippet(uint8_t code,char *string){
 8004b70:	0007      	movs	r7, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004b72:	782b      	ldrb	r3, [r5, #0]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	009c      	lsls	r4, r3, #2
 8004b78:	18e4      	adds	r4, r4, r3
 8004b7a:	00a4      	lsls	r4, r4, #2
 8004b7c:	192c      	adds	r4, r5, r4
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	4698      	mov	r8, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02e      	beq.n	8004be4 <AddSnippet.part.0+0x7c>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fb fac6 	bl	8000118 <strlen>
 8004b8c:	0006      	movs	r6, r0
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004b8e:	0038      	movs	r0, r7
 8004b90:	f7fb fac2 	bl	8000118 <strlen>
 8004b94:	1831      	adds	r1, r6, r0
 8004b96:	3102      	adds	r1, #2
 8004b98:	4640      	mov	r0, r8
 8004b9a:	f00f f831 	bl	8013c00 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004b9e:	782a      	ldrb	r2, [r5, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004ba0:	6120      	str	r0, [r4, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004ba2:	3a01      	subs	r2, #1
 8004ba4:	0093      	lsls	r3, r2, #2
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	18eb      	adds	r3, r5, r3
 8004bac:	6918      	ldr	r0, [r3, #16]
 8004bae:	1c72      	adds	r2, r6, #1
 8004bb0:	1880      	adds	r0, r0, r2
 8004bb2:	0039      	movs	r1, r7
 8004bb4:	f00f fa1d 	bl	8013ff2 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004bb8:	782a      	ldrb	r2, [r5, #0]
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0093      	lsls	r3, r2, #2
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	2213      	movs	r2, #19
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	18eb      	adds	r3, r5, r3
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	559a      	strb	r2, [r3, r6]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004bca:	782b      	ldrb	r3, [r5, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	0098      	lsls	r0, r3, #2
 8004bd0:	18c3      	adds	r3, r0, r3
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18ea      	adds	r2, r5, r3
 8004bd6:	6912      	ldr	r2, [r2, #16]
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	d00d      	beq.n	8004bf8 <AddSnippet.part.0+0x90>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004bdc:	2000      	movs	r0, #0
}
 8004bde:	bc80      	pop	{r7}
 8004be0:	46b8      	mov	r8, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004be4:	f7fb fa98 	bl	8000118 <strlen>
 8004be8:	3001      	adds	r0, #1
 8004bea:	f00e fd99 	bl	8013720 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004bee:	0039      	movs	r1, r7
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004bf0:	6120      	str	r0, [r4, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004bf2:	f00f f9fe 	bl	8013ff2 <strcpy>
 8004bf6:	e7f1      	b.n	8004bdc <AddSnippet.part.0+0x74>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004bf8:	1d28      	adds	r0, r5, #4
 8004bfa:	2214      	movs	r2, #20
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	18c0      	adds	r0, r0, r3
 8004c00:	f00e ffcb 	bl	8013b9a <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004c04:	200e      	movs	r0, #14
 8004c06:	e7ea      	b.n	8004bde <AddSnippet.part.0+0x76>
 8004c08:	200017ac 	.word	0x200017ac

08004c0c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0e:	464e      	mov	r6, r9
 8004c10:	4645      	mov	r5, r8
 8004c12:	46de      	mov	lr, fp
 8004c14:	4657      	mov	r7, sl
 8004c16:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c18:	4cd0      	ldr	r4, [pc, #832]	; (8004f5c <ParseSnippetCondition+0x350>)
BOS_Status ParseSnippetCondition(char *string){
 8004c1a:	0005      	movs	r5, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c1c:	7826      	ldrb	r6, [r4, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004c1e:	b089      	sub	sp, #36	; 0x24
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c20:	2e05      	cmp	r6, #5
 8004c22:	d065      	beq.n	8004cf0 <ParseSnippetCondition+0xe4>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004c24:	00b3      	lsls	r3, r6, #2
 8004c26:	1998      	adds	r0, r3, r6
 8004c28:	0080      	lsls	r0, r0, #2
 8004c2a:	4699      	mov	r9, r3
 8004c2c:	1823      	adds	r3, r4, r0
 8004c2e:	4698      	mov	r8, r3
 8004c30:	2300      	movs	r3, #0
 8004c32:	4642      	mov	r2, r8
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004c34:	4640      	mov	r0, r8
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004c36:	8093      	strh	r3, [r2, #4]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	3006      	adds	r0, #6
 8004c3e:	f00e ffac 	bl	8013b9a <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004c42:	782b      	ldrb	r3, [r5, #0]
 8004c44:	2b62      	cmp	r3, #98	; 0x62
 8004c46:	d102      	bne.n	8004c4e <ParseSnippetCondition+0x42>
 8004c48:	78ab      	ldrb	r3, [r5, #2]
 8004c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4c:	d052      	beq.n	8004cf4 <ParseSnippetCondition+0xe8>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004c4e:	0027      	movs	r7, r4
 8004c50:	3768      	adds	r7, #104	; 0x68
 8004c52:	0029      	movs	r1, r5
 8004c54:	0038      	movs	r0, r7
 8004c56:	f00f f9cc 	bl	8013ff2 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004c5a:	4ec1      	ldr	r6, [pc, #772]	; (8004f60 <ParseSnippetCondition+0x354>)
 8004c5c:	0038      	movs	r0, r7
 8004c5e:	0031      	movs	r1, r6
 8004c60:	f010 f830 	bl	8014cc4 <strtok>
		secondPart =strtok( NULL," ");
 8004c64:	0031      	movs	r1, r6
		firstPart =strtok((char* )cInputString," ");
 8004c66:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f010 f82b 	bl	8014cc4 <strtok>
		thirdPart =strtok( NULL," ");
 8004c6e:	0031      	movs	r1, r6
		secondPart =strtok( NULL," ");
 8004c70:	0007      	movs	r7, r0
		thirdPart =strtok( NULL," ");
 8004c72:	2000      	movs	r0, #0
 8004c74:	f010 f826 	bl	8014cc4 <strtok>
 8004c78:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	d036      	beq.n	8004cec <ParseSnippetCondition+0xe0>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004c7e:	0028      	movs	r0, r5
 8004c80:	f7fe feee 	bl	8003a60 <IsModuleParameter>
 8004c84:	4680      	mov	r8, r0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d12c      	bne.n	8004ce4 <ParseSnippetCondition+0xd8>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d02e      	beq.n	8004cec <ParseSnippetCondition+0xe0>
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d02c      	beq.n	8004cec <ParseSnippetCondition+0xe0>
				modPar2 =IsModuleParameter(thirdPart);
 8004c92:	0030      	movs	r0, r6
 8004c94:	f7fe fee4 	bl	8003a60 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d059      	beq.n	8004d50 <ParseSnippetCondition+0x144>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	7826      	ldrb	r6, [r4, #0]
 8004ca0:	00b5      	lsls	r5, r6, #2
 8004ca2:	19ab      	adds	r3, r5, r6
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	711a      	strb	r2, [r3, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004caa:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004cac:	72d8      	strb	r0, [r3, #11]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cae:	71da      	strb	r2, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cb0:	0038      	movs	r0, r7
 8004cb2:	f7fe fee1 	bl	8003a78 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cb6:	7822      	ldrb	r2, [r4, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cb8:	19ad      	adds	r5, r5, r6
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cba:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cbc:	00ad      	lsls	r5, r5, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cbe:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cc0:	1965      	adds	r5, r4, r5
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cc2:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cc4:	7168      	strb	r0, [r5, #5]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cc6:	18e3      	adds	r3, r4, r3
 8004cc8:	795b      	ldrb	r3, [r3, #5]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <ParseSnippetCondition+0xe0>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004cce:	2700      	movs	r7, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004cd0:	3201      	adds	r2, #1
 8004cd2:	7022      	strb	r2, [r4, #0]
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004cd4:	0038      	movs	r0, r7
 8004cd6:	b009      	add	sp, #36	; 0x24
 8004cd8:	bcf0      	pop	{r4, r5, r6, r7}
 8004cda:	46bb      	mov	fp, r7
 8004cdc:	46b2      	mov	sl, r6
 8004cde:	46a9      	mov	r9, r5
 8004ce0:	46a0      	mov	r8, r4
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	d1d2      	bne.n	8004c8e <ParseSnippetCondition+0x82>
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	d068      	beq.n	8004dbe <ParseSnippetCondition+0x1b2>
			return BOS_ERR_WrongParam;
 8004cec:	2767      	movs	r7, #103	; 0x67
 8004cee:	e7f1      	b.n	8004cd4 <ParseSnippetCondition+0xc8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004cf0:	270e      	movs	r7, #14
 8004cf2:	e7ef      	b.n	8004cd4 <ParseSnippetCondition+0xc8>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004cf4:	786b      	ldrb	r3, [r5, #1]
	BOS_Status status =BOS_OK;
 8004cf6:	2700      	movs	r7, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004cf8:	3b30      	subs	r3, #48	; 0x30
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	469a      	mov	sl, r3
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d8e8      	bhi.n	8004cd4 <ParseSnippetCondition+0xc8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d02:	4641      	mov	r1, r8
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004d04:	4650      	mov	r0, sl
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d06:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004d08:	7188      	strb	r0, [r1, #6]
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d0a:	808b      	strh	r3, [r1, #4]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004d0c:	1ce9      	adds	r1, r5, #3
 8004d0e:	468b      	mov	fp, r1
 8004d10:	2207      	movs	r2, #7
 8004d12:	4658      	mov	r0, fp
 8004d14:	4993      	ldr	r1, [pc, #588]	; (8004f64 <ParseSnippetCondition+0x358>)
 8004d16:	f00f f974 	bl	8014002 <strncmp>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d032      	beq.n	8004d84 <ParseSnippetCondition+0x178>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004d1e:	220e      	movs	r2, #14
 8004d20:	4658      	mov	r0, fp
 8004d22:	4991      	ldr	r1, [pc, #580]	; (8004f68 <ParseSnippetCondition+0x35c>)
 8004d24:	f00f f96d 	bl	8014002 <strncmp>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d162      	bne.n	8004df2 <ParseSnippetCondition+0x1e6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004d2c:	2306      	movs	r3, #6
 8004d2e:	4642      	mov	r2, r8
 8004d30:	71d3      	strb	r3, [r2, #7]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004d32:	4653      	mov	r3, sl
 8004d34:	00da      	lsls	r2, r3, #3
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <ParseSnippetCondition+0x360>)
 8004d38:	4452      	add	r2, sl
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	0017      	movs	r7, r2
 8004d40:	7a1b      	ldrb	r3, [r3, #8]
 8004d42:	401f      	ands	r7, r3
 8004d44:	421a      	tst	r2, r3
 8004d46:	d045      	beq.n	8004dd4 <ParseSnippetCondition+0x1c8>
				status =BOS_OK;
 8004d48:	2700      	movs	r7, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	7026      	strb	r6, [r4, #0]
 8004d4e:	e7c1      	b.n	8004cd4 <ParseSnippetCondition+0xc8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004d50:	7822      	ldrb	r2, [r4, #0]
					float constant =atof(thirdPart);
 8004d52:	0030      	movs	r0, r6
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004d54:	0093      	lsls	r3, r2, #2
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	2203      	movs	r2, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	18e3      	adds	r3, r4, r3
 8004d5e:	711a      	strb	r2, [r3, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004d60:	4642      	mov	r2, r8
 8004d62:	71da      	strb	r2, [r3, #7]
					float constant =atof(thirdPart);
 8004d64:	f00e fc46 	bl	80135f4 <atof>
 8004d68:	f7fe f8ae 	bl	8002ec8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004d6c:	7826      	ldrb	r6, [r4, #0]
					float constant =atof(thirdPart);
 8004d6e:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004d70:	00b5      	lsls	r5, r6, #2
 8004d72:	19a8      	adds	r0, r5, r6
 8004d74:	0080      	lsls	r0, r0, #2
 8004d76:	1820      	adds	r0, r4, r0
 8004d78:	2204      	movs	r2, #4
 8004d7a:	a907      	add	r1, sp, #28
 8004d7c:	300a      	adds	r0, #10
 8004d7e:	f00e ff03 	bl	8013b88 <memcpy>
 8004d82:	e795      	b.n	8004cb0 <ParseSnippetCondition+0xa4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004d84:	2305      	movs	r3, #5
 8004d86:	4641      	mov	r1, r8
 8004d88:	71cb      	strb	r3, [r1, #7]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	4b77      	ldr	r3, [pc, #476]	; (8004f6c <ParseSnippetCondition+0x360>)
 8004d8e:	00ca      	lsls	r2, r1, #3
 8004d90:	4452      	add	r2, sl
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	2201      	movs	r2, #1
 8004d96:	7a1b      	ldrb	r3, [r3, #8]
 8004d98:	3701      	adds	r7, #1
 8004d9a:	401f      	ands	r7, r3
 8004d9c:	421a      	tst	r2, r3
 8004d9e:	d1d3      	bne.n	8004d48 <ParseSnippetCondition+0x13c>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004da0:	2301      	movs	r3, #1
 8004da2:	2200      	movs	r2, #0
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	2101      	movs	r1, #1
 8004da8:	2300      	movs	r3, #0
 8004daa:	4650      	mov	r0, sl
 8004dac:	9704      	str	r7, [sp, #16]
 8004dae:	9703      	str	r7, [sp, #12]
 8004db0:	9702      	str	r7, [sp, #8]
 8004db2:	9701      	str	r7, [sp, #4]
 8004db4:	9700      	str	r7, [sp, #0]
 8004db6:	f007 fae7 	bl	800c388 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004dba:	7826      	ldrb	r6, [r4, #0]
 8004dbc:	e7c5      	b.n	8004d4a <ParseSnippetCondition+0x13e>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	7822      	ldrb	r2, [r4, #0]
 8004dc2:	0093      	lsls	r3, r2, #2
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	18e3      	adds	r3, r4, r3
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004dca:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004dcc:	7119      	strb	r1, [r3, #4]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004dce:	71d8      	strb	r0, [r3, #7]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004dd0:	7022      	strb	r2, [r4, #0]
				return BOS_OK;
 8004dd2:	e77f      	b.n	8004cd4 <ParseSnippetCondition+0xc8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	9305      	str	r3, [sp, #20]
 8004dda:	4650      	mov	r0, sl
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9704      	str	r7, [sp, #16]
 8004de0:	9703      	str	r7, [sp, #12]
 8004de2:	9702      	str	r7, [sp, #8]
 8004de4:	9701      	str	r7, [sp, #4]
 8004de6:	9700      	str	r7, [sp, #0]
 8004de8:	3a01      	subs	r2, #1
 8004dea:	f007 facd 	bl	800c388 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004dee:	7826      	ldrb	r6, [r4, #0]
 8004df0:	e7ab      	b.n	8004d4a <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004df2:	220c      	movs	r2, #12
 8004df4:	4658      	mov	r0, fp
 8004df6:	495e      	ldr	r1, [pc, #376]	; (8004f70 <ParseSnippetCondition+0x364>)
 8004df8:	f00f f903 	bl	8014002 <strncmp>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d10f      	bne.n	8004e20 <ParseSnippetCondition+0x214>
				if(!button[port].pressedX1Sec){
 8004e00:	4653      	mov	r3, sl
 8004e02:	00da      	lsls	r2, r3, #3
 8004e04:	4b59      	ldr	r3, [pc, #356]	; (8004f6c <ParseSnippetCondition+0x360>)
 8004e06:	4452      	add	r2, sl
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	789f      	ldrb	r7, [r3, #2]
 8004e0c:	2f00      	cmp	r7, #0
 8004e0e:	d021      	beq.n	8004e54 <ParseSnippetCondition+0x248>
				else if(!button[port].pressedX2Sec){
 8004e10:	78df      	ldrb	r7, [r3, #3]
 8004e12:	2f00      	cmp	r7, #0
 8004e14:	d03a      	beq.n	8004e8c <ParseSnippetCondition+0x280>
				else if(!button[port].pressedX3Sec){
 8004e16:	791f      	ldrb	r7, [r3, #4]
 8004e18:	2f00      	cmp	r7, #0
 8004e1a:	d065      	beq.n	8004ee8 <ParseSnippetCondition+0x2dc>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004e1c:	270c      	movs	r7, #12
 8004e1e:	e794      	b.n	8004d4a <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004e20:	220d      	movs	r2, #13
 8004e22:	4658      	mov	r0, fp
 8004e24:	4953      	ldr	r1, [pc, #332]	; (8004f74 <ParseSnippetCondition+0x368>)
 8004e26:	f00f f8ec 	bl	8014002 <strncmp>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d18d      	bne.n	8004d4a <ParseSnippetCondition+0x13e>
				if(!button[port].releasedY1Sec){
 8004e2e:	4653      	mov	r3, sl
 8004e30:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <ParseSnippetCondition+0x360>)
 8004e32:	00d9      	lsls	r1, r3, #3
 8004e34:	18cb      	adds	r3, r1, r3
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	795f      	ldrb	r7, [r3, #5]
 8004e3a:	2f00      	cmp	r7, #0
 8004e3c:	d03d      	beq.n	8004eba <ParseSnippetCondition+0x2ae>
				else if(!button[port].releasedY2Sec){
 8004e3e:	799f      	ldrb	r7, [r3, #6]
 8004e40:	2f00      	cmp	r7, #0
 8004e42:	d06b      	beq.n	8004f1c <ParseSnippetCondition+0x310>
				else if(!button[port].releasedY3Sec){
 8004e44:	4451      	add	r1, sl
 8004e46:	1852      	adds	r2, r2, r1
 8004e48:	79d7      	ldrb	r7, [r2, #7]
 8004e4a:	2f00      	cmp	r7, #0
 8004e4c:	d100      	bne.n	8004e50 <ParseSnippetCondition+0x244>
 8004e4e:	e093      	b.n	8004f78 <ParseSnippetCondition+0x36c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004e50:	270d      	movs	r7, #13
 8004e52:	e77a      	b.n	8004d4a <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004e54:	2309      	movs	r3, #9
 8004e56:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e58:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004e5a:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e5c:	300f      	adds	r0, #15
 8004e5e:	f00e fbce 	bl	80135fe <atoi>
 8004e62:	7821      	ldrb	r1, [r4, #0]
 8004e64:	b2c3      	uxtb	r3, r0
 8004e66:	008a      	lsls	r2, r1, #2
 8004e68:	1852      	adds	r2, r2, r1
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	18a2      	adds	r2, r4, r2
 8004e6e:	7213      	strb	r3, [r2, #8]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e70:	2201      	movs	r2, #1
 8004e72:	9704      	str	r7, [sp, #16]
 8004e74:	9205      	str	r2, [sp, #20]
 8004e76:	9703      	str	r7, [sp, #12]
 8004e78:	9702      	str	r7, [sp, #8]
 8004e7a:	9701      	str	r7, [sp, #4]
 8004e7c:	9700      	str	r7, [sp, #0]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	4650      	mov	r0, sl
 8004e84:	f007 fa80 	bl	800c388 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004e88:	7826      	ldrb	r6, [r4, #0]
 8004e8a:	e75e      	b.n	8004d4a <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e90:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e92:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e94:	300f      	adds	r0, #15
 8004e96:	f00e fbb2 	bl	80135fe <atoi>
 8004e9a:	7822      	ldrb	r2, [r4, #0]
 8004e9c:	b2c0      	uxtb	r0, r0
 8004e9e:	0093      	lsls	r3, r2, #2
 8004ea0:	189b      	adds	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	18e3      	adds	r3, r4, r3
 8004ea6:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	9704      	str	r7, [sp, #16]
 8004eac:	9305      	str	r3, [sp, #20]
 8004eae:	9703      	str	r7, [sp, #12]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9702      	str	r7, [sp, #8]
 8004eb4:	9701      	str	r7, [sp, #4]
 8004eb6:	9000      	str	r0, [sp, #0]
 8004eb8:	e7e1      	b.n	8004e7e <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004eba:	230c      	movs	r3, #12
 8004ebc:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ebe:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004ec0:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ec2:	3010      	adds	r0, #16
 8004ec4:	f00e fb9b 	bl	80135fe <atoi>
 8004ec8:	7822      	ldrb	r2, [r4, #0]
 8004eca:	b2c0      	uxtb	r0, r0
 8004ecc:	0093      	lsls	r3, r2, #2
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	18e3      	adds	r3, r4, r3
 8004ed4:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9704      	str	r7, [sp, #16]
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	9703      	str	r7, [sp, #12]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	9701      	str	r7, [sp, #4]
 8004ee4:	9700      	str	r7, [sp, #0]
 8004ee6:	e7ca      	b.n	8004e7e <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004ee8:	0033      	movs	r3, r6
 8004eea:	220b      	movs	r2, #11
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004eec:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004eee:	444b      	add	r3, r9
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	18e3      	adds	r3, r4, r3
 8004ef4:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ef6:	300f      	adds	r0, #15
 8004ef8:	f00e fb81 	bl	80135fe <atoi>
 8004efc:	7822      	ldrb	r2, [r4, #0]
 8004efe:	b2c0      	uxtb	r0, r0
 8004f00:	0093      	lsls	r3, r2, #2
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	18e3      	adds	r3, r4, r3
 8004f08:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9001      	str	r0, [sp, #4]
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	9302      	str	r3, [sp, #8]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	e7b0      	b.n	8004e7e <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004f1c:	2314      	movs	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f1e:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004f20:	4698      	mov	r8, r3
 8004f22:	435e      	muls	r6, r3
 8004f24:	3b07      	subs	r3, #7
 8004f26:	19a6      	adds	r6, r4, r6
 8004f28:	71f3      	strb	r3, [r6, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f2a:	3010      	adds	r0, #16
 8004f2c:	f00e fb67 	bl	80135fe <atoi>
 8004f30:	4642      	mov	r2, r8
 8004f32:	7823      	ldrb	r3, [r4, #0]
 8004f34:	b2c0      	uxtb	r0, r0
 8004f36:	4353      	muls	r3, r2
 8004f38:	18e3      	adds	r3, r4, r3
 8004f3a:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	2301      	movs	r3, #1
 8004f40:	9003      	str	r0, [sp, #12]
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	000a      	movs	r2, r1
 8004f46:	000b      	movs	r3, r1
 8004f48:	4650      	mov	r0, sl
 8004f4a:	9104      	str	r1, [sp, #16]
 8004f4c:	9102      	str	r1, [sp, #8]
 8004f4e:	9101      	str	r1, [sp, #4]
 8004f50:	9100      	str	r1, [sp, #0]
 8004f52:	f007 fa19 	bl	800c388 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004f56:	7826      	ldrb	r6, [r4, #0]
 8004f58:	e6f7      	b.n	8004d4a <ParseSnippetCondition+0x13e>
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	200017ac 	.word	0x200017ac
 8004f60:	0801a5d8 	.word	0x0801a5d8
 8004f64:	0801b3c4 	.word	0x0801b3c4
 8004f68:	0801ab9c 	.word	0x0801ab9c
 8004f6c:	2000284c 	.word	0x2000284c
 8004f70:	0801abac 	.word	0x0801abac
 8004f74:	0801abbc 	.word	0x0801abbc
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004f78:	2314      	movs	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f7a:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	435e      	muls	r6, r3
 8004f80:	3b06      	subs	r3, #6
 8004f82:	19a6      	adds	r6, r4, r6
 8004f84:	71f3      	strb	r3, [r6, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f86:	3010      	adds	r0, #16
 8004f88:	f00e fb39 	bl	80135fe <atoi>
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	7823      	ldrb	r3, [r4, #0]
 8004f90:	b2c0      	uxtb	r0, r0
 8004f92:	4353      	muls	r3, r2
 8004f94:	18e3      	adds	r3, r4, r3
 8004f96:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004f98:	2301      	movs	r3, #1
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9004      	str	r0, [sp, #16]
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	4650      	mov	r0, sl
 8004fa6:	9703      	str	r7, [sp, #12]
 8004fa8:	9702      	str	r7, [sp, #8]
 8004faa:	9701      	str	r7, [sp, #4]
 8004fac:	9700      	str	r7, [sp, #0]
 8004fae:	f007 f9eb 	bl	800c388 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004fb2:	7826      	ldrb	r6, [r4, #0]
 8004fb4:	e6c9      	b.n	8004d4a <ParseSnippetCondition+0x13e>
 8004fb6:	46c0      	nop			; (mov r8, r8)

08004fb8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	46de      	mov	lr, fp
 8004fbc:	464e      	mov	r6, r9
 8004fbe:	4657      	mov	r7, sl
 8004fc0:	4645      	mov	r5, r8
 8004fc2:	b5e0      	push	{r5, r6, r7, lr}
 8004fc4:	001e      	movs	r6, r3
	char idString[MaxLengthOfAlias] ={0};
 8004fc6:	2300      	movs	r3, #0
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004fc8:	b08b      	sub	sp, #44	; 0x2c
 8004fca:	4682      	mov	sl, r0
 8004fcc:	468b      	mov	fp, r1
 8004fce:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	a808      	add	r0, sp, #32
 8004fd6:	9307      	str	r3, [sp, #28]
 8004fd8:	f00e fddf 	bl	8013b9a <memset>
 8004fdc:	4bd3      	ldr	r3, [pc, #844]	; (800532c <CLI_CommandParser+0x374>)
 8004fde:	4cd4      	ldr	r4, [pc, #848]	; (8005330 <CLI_CommandParser+0x378>)
 8004fe0:	4699      	mov	r9, r3
	for(int i =0; string[i]; i++){
 8004fe2:	782b      	ldrb	r3, [r5, #0]
 8004fe4:	002a      	movs	r2, r5
		string[i] =tolower(string[i]);
 8004fe6:	2003      	movs	r0, #3
	for(int i =0; string[i]; i++){
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <CLI_CommandParser+0x4a>
		string[i] =tolower(string[i]);
 8004fec:	5ce1      	ldrb	r1, [r4, r3]
 8004fee:	4001      	ands	r1, r0
 8004ff0:	2901      	cmp	r1, #1
 8004ff2:	d101      	bne.n	8004ff8 <CLI_CommandParser+0x40>
 8004ff4:	3320      	adds	r3, #32
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	7013      	strb	r3, [r2, #0]
	for(int i =0; string[i]; i++){
 8004ffa:	7853      	ldrb	r3, [r2, #1]
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f4      	bne.n	8004fec <CLI_CommandParser+0x34>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005002:	464b      	mov	r3, r9
 8005004:	7e9f      	ldrb	r7, [r3, #26]
 8005006:	2f00      	cmp	r7, #0
 8005008:	d04d      	beq.n	80050a6 <CLI_CommandParser+0xee>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 800500a:	2206      	movs	r2, #6
 800500c:	0028      	movs	r0, r5
 800500e:	49c9      	ldr	r1, [pc, #804]	; (8005334 <CLI_CommandParser+0x37c>)
 8005010:	f00e fff7 	bl	8014002 <strncmp>
 8005014:	2800      	cmp	r0, #0
 8005016:	d100      	bne.n	800501a <CLI_CommandParser+0x62>
 8005018:	e0a5      	b.n	8005166 <CLI_CommandParser+0x1ae>
		else if(recordSnippet == SNIPPET_COMMANDS){
 800501a:	2f02      	cmp	r7, #2
 800501c:	d125      	bne.n	800506a <CLI_CommandParser+0xb2>
	switch(code){
 800501e:	0028      	movs	r0, r5
 8005020:	f7ff fda2 	bl	8004b68 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8005024:	2800      	cmp	r0, #0
 8005026:	d000      	beq.n	800502a <CLI_CommandParser+0x72>
 8005028:	e0d7      	b.n	80051da <CLI_CommandParser+0x222>
				pcOutputString[0] ='\r';
 800502a:	230d      	movs	r3, #13
 800502c:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800502e:	465b      	mov	r3, fp
 8005030:	2b00      	cmp	r3, #0
 8005032:	d100      	bne.n	8005036 <CLI_CommandParser+0x7e>
 8005034:	e0ad      	b.n	8005192 <CLI_CommandParser+0x1da>
 8005036:	2300      	movs	r3, #0
 8005038:	4698      	mov	r8, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800503a:	0030      	movs	r0, r6
 800503c:	f7fb f86c 	bl	8000118 <strlen>
 8005040:	2301      	movs	r3, #1
 8005042:	425b      	negs	r3, r3
 8005044:	b282      	uxth	r2, r0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	0031      	movs	r1, r6
 800504a:	4650      	mov	r0, sl
 800504c:	3333      	adds	r3, #51	; 0x33
 800504e:	f008 fd0f 	bl	800da70 <writePxMutex>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005052:	0030      	movs	r0, r6
 8005054:	f7fb f860 	bl	8000118 <strlen>
 8005058:	2100      	movs	r1, #0
 800505a:	0002      	movs	r2, r0
 800505c:	0030      	movs	r0, r6
 800505e:	f00e fd9c 	bl	8013b9a <memset>
	} while(xReturned != pdFALSE);
 8005062:	4643      	mov	r3, r8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1bc      	bne.n	8004fe2 <CLI_CommandParser+0x2a>
 8005068:	e09b      	b.n	80051a2 <CLI_CommandParser+0x1ea>
			loc =strchr((char* )cInputString,'.');
 800506a:	212e      	movs	r1, #46	; 0x2e
 800506c:	0028      	movs	r0, r5
 800506e:	f00e ffb2 	bl	8013fd6 <strchr>
 8005072:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005074:	d009      	beq.n	800508a <CLI_CommandParser+0xd2>
 8005076:	1ec3      	subs	r3, r0, #3
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	2a62      	cmp	r2, #98	; 0x62
 800507c:	d12a      	bne.n	80050d4 <CLI_CommandParser+0x11c>
 800507e:	785a      	ldrb	r2, [r3, #1]
 8005080:	2a6f      	cmp	r2, #111	; 0x6f
 8005082:	d127      	bne.n	80050d4 <CLI_CommandParser+0x11c>
 8005084:	789b      	ldrb	r3, [r3, #2]
 8005086:	2b73      	cmp	r3, #115	; 0x73
 8005088:	d124      	bne.n	80050d4 <CLI_CommandParser+0x11c>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800508a:	2299      	movs	r2, #153	; 0x99
 800508c:	0031      	movs	r1, r6
 800508e:	0028      	movs	r0, r5
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	f008 fff3 	bl	800e07c <FreeRTOS_CLIProcessCommand>
 8005096:	4680      	mov	r8, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005098:	7833      	ldrb	r3, [r6, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0d9      	beq.n	8005052 <CLI_CommandParser+0x9a>
 800509e:	465b      	mov	r3, fp
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0d6      	beq.n	8005052 <CLI_CommandParser+0x9a>
 80050a4:	e7c9      	b.n	800503a <CLI_CommandParser+0x82>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 80050a6:	782b      	ldrb	r3, [r5, #0]
 80050a8:	2b69      	cmp	r3, #105	; 0x69
 80050aa:	d1de      	bne.n	800506a <CLI_CommandParser+0xb2>
 80050ac:	786b      	ldrb	r3, [r5, #1]
 80050ae:	2b66      	cmp	r3, #102	; 0x66
 80050b0:	d1db      	bne.n	800506a <CLI_CommandParser+0xb2>
 80050b2:	78ab      	ldrb	r3, [r5, #2]
 80050b4:	001f      	movs	r7, r3
 80050b6:	3f20      	subs	r7, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d1d6      	bne.n	800506a <CLI_CommandParser+0xb2>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 80050bc:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 80050be:	f7ff fda5 	bl	8004c0c <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d000      	beq.n	80050c8 <CLI_CommandParser+0x110>
 80050c6:	e07f      	b.n	80051c8 <CLI_CommandParser+0x210>
				recordSnippet = SNIPPET_COMMANDS;
 80050c8:	2302      	movs	r3, #2
 80050ca:	464a      	mov	r2, r9
 80050cc:	7693      	strb	r3, [r2, #26]
				pcOutputString[0] ='\r';
 80050ce:	330b      	adds	r3, #11
 80050d0:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80050d2:	e7ac      	b.n	800502e <CLI_CommandParser+0x76>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	5ce3      	ldrb	r3, [r4, r3]
 80050d8:	075b      	lsls	r3, r3, #29
 80050da:	d4d6      	bmi.n	800508a <CLI_CommandParser+0xd2>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 80050dc:	0029      	movs	r1, r5
 80050de:	1b7a      	subs	r2, r7, r5
 80050e0:	a807      	add	r0, sp, #28
 80050e2:	f00e ffa0 	bl	8014026 <strncpy>
				id =GetID(idString);
 80050e6:	a807      	add	r0, sp, #28
 80050e8:	f7ff fa36 	bl	8004558 <GetID>
				if(id == myID){
 80050ec:	4b92      	ldr	r3, [pc, #584]	; (8005338 <CLI_CommandParser+0x380>)
				id =GetID(idString);
 80050ee:	9003      	str	r0, [sp, #12]
				if(id == myID){
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	4298      	cmp	r0, r3
 80050f6:	d100      	bne.n	80050fa <CLI_CommandParser+0x142>
 80050f8:	e087      	b.n	800520a <CLI_CommandParser+0x252>
				else if(id == BOS_ERR_WrongName){
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	2b64      	cmp	r3, #100	; 0x64
 80050fe:	d100      	bne.n	8005102 <CLI_CommandParser+0x14a>
 8005100:	e072      	b.n	80051e8 <CLI_CommandParser+0x230>
				else if(id == BOS_ERR_WrongID){
 8005102:	9b03      	ldr	r3, [sp, #12]
 8005104:	2b66      	cmp	r3, #102	; 0x66
 8005106:	d100      	bne.n	800510a <CLI_CommandParser+0x152>
 8005108:	e087      	b.n	800521a <CLI_CommandParser+0x262>
				else if(id == BOS_BROADCAST){
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	d100      	bne.n	8005112 <CLI_CommandParser+0x15a>
 8005110:	e0c4      	b.n	800529c <CLI_CommandParser+0x2e4>
				else if((uint8_t )id == BOS_MULTICAST){
 8005112:	466b      	mov	r3, sp
 8005114:	7b1b      	ldrb	r3, [r3, #12]
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	2bfe      	cmp	r3, #254	; 0xfe
 800511a:	d100      	bne.n	800511e <CLI_CommandParser+0x166>
 800511c:	e12e      	b.n	800537c <CLI_CommandParser+0x3c4>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 800511e:	1c7b      	adds	r3, r7, #1
 8005120:	2206      	movs	r2, #6
 8005122:	0018      	movs	r0, r3
 8005124:	4985      	ldr	r1, [pc, #532]	; (800533c <CLI_CommandParser+0x384>)
 8005126:	4698      	mov	r8, r3
 8005128:	f00e ff6b 	bl	8014002 <strncmp>
 800512c:	2800      	cmp	r0, #0
 800512e:	d000      	beq.n	8005132 <CLI_CommandParser+0x17a>
 8005130:	e07a      	b.n	8005228 <CLI_CommandParser+0x270>
						SendMessageToModule(id,CODE_UPDATE,0);
 8005132:	9b05      	ldr	r3, [sp, #20]
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005134:	4f82      	ldr	r7, [pc, #520]	; (8005340 <CLI_CommandParser+0x388>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005136:	4698      	mov	r8, r3
 8005138:	2200      	movs	r2, #0
 800513a:	2119      	movs	r1, #25
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800513c:	7038      	strb	r0, [r7, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 800513e:	0018      	movs	r0, r3
 8005140:	f003 f97e 	bl	8008440 <SendMessageToModule>
						osDelay(100);
 8005144:	2064      	movs	r0, #100	; 0x64
 8005146:	f008 fe73 	bl	800de30 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800514a:	4b7e      	ldr	r3, [pc, #504]	; (8005344 <CLI_CommandParser+0x38c>)
 800514c:	4641      	mov	r1, r8
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	4b79      	ldr	r3, [pc, #484]	; (8005338 <CLI_CommandParser+0x380>)
 8005152:	7818      	ldrb	r0, [r3, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	f005 fa2d 	bl	800a5b4 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800515a:	783b      	ldrb	r3, [r7, #0]
 800515c:	2b60      	cmp	r3, #96	; 0x60
 800515e:	d100      	bne.n	8005162 <CLI_CommandParser+0x1aa>
 8005160:	e0cd      	b.n	80052fe <CLI_CommandParser+0x346>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005162:	7833      	ldrb	r3, [r6, #0]
 8005164:	e012      	b.n	800518c <CLI_CommandParser+0x1d4>
			recordSnippet =0;
 8005166:	464b      	mov	r3, r9
			snippets[numOfRecordedSnippets - 1].state = true;
 8005168:	4a77      	ldr	r2, [pc, #476]	; (8005348 <CLI_CommandParser+0x390>)
			recordSnippet =0;
 800516a:	7698      	strb	r0, [r3, #26]
			snippets[numOfRecordedSnippets - 1].state = true;
 800516c:	7811      	ldrb	r1, [r2, #0]
 800516e:	3901      	subs	r1, #1
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	185b      	adds	r3, r3, r1
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	2201      	movs	r2, #1
 800517a:	751a      	strb	r2, [r3, #20]
			SaveToRO();
 800517c:	f005 f900 	bl	800a380 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005180:	2241      	movs	r2, #65	; 0x41
 8005182:	0030      	movs	r0, r6
 8005184:	4971      	ldr	r1, [pc, #452]	; (800534c <CLI_CommandParser+0x394>)
 8005186:	f00e fcff 	bl	8013b88 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800518a:	7833      	ldrb	r3, [r6, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d000      	beq.n	8005192 <CLI_CommandParser+0x1da>
 8005190:	e74d      	b.n	800502e <CLI_CommandParser+0x76>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005192:	0030      	movs	r0, r6
 8005194:	f7fa ffc0 	bl	8000118 <strlen>
 8005198:	2100      	movs	r1, #0
 800519a:	0002      	movs	r2, r0
 800519c:	0030      	movs	r0, r6
 800519e:	f00e fcfc 	bl	8013b9a <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80051a2:	2209      	movs	r2, #9
 80051a4:	2100      	movs	r1, #0
 80051a6:	a807      	add	r0, sp, #28
 80051a8:	f00e fcf7 	bl	8013b9a <memset>
	if(!recordSnippet && enableOutput)
 80051ac:	464b      	mov	r3, r9
 80051ae:	7e9b      	ldrb	r3, [r3, #26]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d102      	bne.n	80051ba <CLI_CommandParser+0x202>
 80051b4:	465b      	mov	r3, fp
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11d      	bne.n	80051f6 <CLI_CommandParser+0x23e>
}
 80051ba:	b00b      	add	sp, #44	; 0x2c
 80051bc:	bcf0      	pop	{r4, r5, r6, r7}
 80051be:	46bb      	mov	fp, r7
 80051c0:	46b2      	mov	sl, r6
 80051c2:	46a9      	mov	r9, r5
 80051c4:	46a0      	mov	r8, r4
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051c8:	2252      	movs	r2, #82	; 0x52
 80051ca:	0030      	movs	r0, r6
 80051cc:	4960      	ldr	r1, [pc, #384]	; (8005350 <CLI_CommandParser+0x398>)
 80051ce:	f00e fcdb 	bl	8013b88 <memcpy>
				recordSnippet =0;
 80051d2:	464b      	mov	r3, r9
 80051d4:	769f      	strb	r7, [r3, #26]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051d6:	7833      	ldrb	r3, [r6, #0]
 80051d8:	e7d8      	b.n	800518c <CLI_CommandParser+0x1d4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051da:	2252      	movs	r2, #82	; 0x52
 80051dc:	0030      	movs	r0, r6
 80051de:	495c      	ldr	r1, [pc, #368]	; (8005350 <CLI_CommandParser+0x398>)
 80051e0:	f00e fcd2 	bl	8013b88 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051e4:	7833      	ldrb	r3, [r6, #0]
 80051e6:	e7d1      	b.n	800518c <CLI_CommandParser+0x1d4>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051e8:	2227      	movs	r2, #39	; 0x27
 80051ea:	0030      	movs	r0, r6
 80051ec:	4959      	ldr	r1, [pc, #356]	; (8005354 <CLI_CommandParser+0x39c>)
 80051ee:	f00e fccb 	bl	8013b88 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051f2:	7833      	ldrb	r3, [r6, #0]
 80051f4:	e7ca      	b.n	800518c <CLI_CommandParser+0x1d4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80051f6:	2301      	movs	r3, #1
 80051f8:	425b      	negs	r3, r3
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2238      	movs	r2, #56	; 0x38
 80051fe:	4650      	mov	r0, sl
 8005200:	4955      	ldr	r1, [pc, #340]	; (8005358 <CLI_CommandParser+0x3a0>)
 8005202:	3333      	adds	r3, #51	; 0x33
 8005204:	f008 fc34 	bl	800da70 <writePxMutex>
}
 8005208:	e7d7      	b.n	80051ba <CLI_CommandParser+0x202>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800520a:	2299      	movs	r2, #153	; 0x99
 800520c:	0031      	movs	r1, r6
 800520e:	1c78      	adds	r0, r7, #1
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	f008 ff33 	bl	800e07c <FreeRTOS_CLIProcessCommand>
 8005216:	4680      	mov	r8, r0
 8005218:	e73e      	b.n	8005098 <CLI_CommandParser+0xe0>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800521a:	2225      	movs	r2, #37	; 0x25
 800521c:	0030      	movs	r0, r6
 800521e:	494f      	ldr	r1, [pc, #316]	; (800535c <CLI_CommandParser+0x3a4>)
 8005220:	f00e fcb2 	bl	8013b88 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005224:	7833      	ldrb	r3, [r6, #0]
 8005226:	e7b1      	b.n	800518c <CLI_CommandParser+0x1d4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005228:	0028      	movs	r0, r5
 800522a:	f7fa ff75 	bl	8000118 <strlen>
 800522e:	ab07      	add	r3, sp, #28
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	0018      	movs	r0, r3
 8005234:	f7fa ff70 	bl	8000118 <strlen>
 8005238:	9a04      	ldr	r2, [sp, #16]
 800523a:	4641      	mov	r1, r8
 800523c:	3a01      	subs	r2, #1
 800523e:	1a12      	subs	r2, r2, r0
 8005240:	0007      	movs	r7, r0
 8005242:	4847      	ldr	r0, [pc, #284]	; (8005360 <CLI_CommandParser+0x3a8>)
 8005244:	f00e feef 	bl	8014026 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005248:	0028      	movs	r0, r5
 800524a:	f7fa ff65 	bl	8000118 <strlen>
 800524e:	1e42      	subs	r2, r0, #1
 8005250:	1bd2      	subs	r2, r2, r7
 8005252:	2117      	movs	r1, #23
 8005254:	b292      	uxth	r2, r2
 8005256:	9805      	ldr	r0, [sp, #20]
 8005258:	f003 f8f2 	bl	8008440 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800525c:	0030      	movs	r0, r6
 800525e:	9a03      	ldr	r2, [sp, #12]
 8005260:	4940      	ldr	r1, [pc, #256]	; (8005364 <CLI_CommandParser+0x3ac>)
 8005262:	f00e fe8b 	bl	8013f7c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005266:	7833      	ldrb	r3, [r6, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00d      	beq.n	8005288 <CLI_CommandParser+0x2d0>
 800526c:	465b      	mov	r3, fp
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <CLI_CommandParser+0x2d0>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005272:	0030      	movs	r0, r6
 8005274:	f7fa ff50 	bl	8000118 <strlen>
 8005278:	2301      	movs	r3, #1
 800527a:	b282      	uxth	r2, r0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	0031      	movs	r1, r6
 8005280:	4650      	mov	r0, sl
 8005282:	3331      	adds	r3, #49	; 0x31
 8005284:	f008 fbf4 	bl	800da70 <writePxMutex>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005288:	0030      	movs	r0, r6
 800528a:	f7fa ff45 	bl	8000118 <strlen>
 800528e:	2100      	movs	r1, #0
 8005290:	0002      	movs	r2, r0
 8005292:	0030      	movs	r0, r6
 8005294:	f00e fc81 	bl	8013b9a <memset>
 8005298:	4f29      	ldr	r7, [pc, #164]	; (8005340 <CLI_CommandParser+0x388>)
 800529a:	e75e      	b.n	800515a <CLI_CommandParser+0x1a2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800529c:	221a      	movs	r2, #26
 800529e:	2100      	movs	r1, #0
 80052a0:	4831      	ldr	r0, [pc, #196]	; (8005368 <CLI_CommandParser+0x3b0>)
 80052a2:	f00e fc7a 	bl	8013b9a <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80052a6:	1c7b      	adds	r3, r7, #1
 80052a8:	0028      	movs	r0, r5
 80052aa:	4698      	mov	r8, r3
 80052ac:	f7fa ff34 	bl	8000118 <strlen>
 80052b0:	ab07      	add	r3, sp, #28
 80052b2:	9003      	str	r0, [sp, #12]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7fa ff2f 	bl	8000118 <strlen>
 80052ba:	9a03      	ldr	r2, [sp, #12]
 80052bc:	4641      	mov	r1, r8
 80052be:	3a01      	subs	r2, #1
 80052c0:	1a12      	subs	r2, r2, r0
 80052c2:	0007      	movs	r7, r0
 80052c4:	4826      	ldr	r0, [pc, #152]	; (8005360 <CLI_CommandParser+0x3a8>)
 80052c6:	f00e feae 	bl	8014026 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80052ca:	0028      	movs	r0, r5
 80052cc:	f7fa ff24 	bl	8000118 <strlen>
 80052d0:	1bc3      	subs	r3, r0, r7
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2217      	movs	r2, #23
 80052d6:	21ff      	movs	r1, #255	; 0xff
 80052d8:	9804      	ldr	r0, [sp, #16]
 80052da:	f003 f861 	bl	80083a0 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052de:	2299      	movs	r2, #153	; 0x99
 80052e0:	0031      	movs	r1, r6
 80052e2:	0092      	lsls	r2, r2, #2
 80052e4:	4640      	mov	r0, r8
 80052e6:	f008 fec9 	bl	800e07c <FreeRTOS_CLIProcessCommand>
 80052ea:	4680      	mov	r8, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80052ec:	0030      	movs	r0, r6
 80052ee:	f7fa ff13 	bl	8000118 <strlen>
 80052f2:	221d      	movs	r2, #29
 80052f4:	491d      	ldr	r1, [pc, #116]	; (800536c <CLI_CommandParser+0x3b4>)
 80052f6:	1830      	adds	r0, r6, r0
 80052f8:	f00e fc46 	bl	8013b88 <memcpy>
 80052fc:	e6cc      	b.n	8005098 <CLI_CommandParser+0xe0>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80052fe:	21fa      	movs	r1, #250	; 0xfa
 8005300:	2001      	movs	r0, #1
 8005302:	0089      	lsls	r1, r1, #2
 8005304:	f00a f882 	bl	800f40c <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <CLI_CommandParser+0x3b8>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d100      	bne.n	8005312 <CLI_CommandParser+0x35a>
 8005310:	e727      	b.n	8005162 <CLI_CommandParser+0x1aa>
							++timedoutMsg;
 8005312:	4a18      	ldr	r2, [pc, #96]	; (8005374 <CLI_CommandParser+0x3bc>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005314:	0030      	movs	r0, r6
							++timedoutMsg;
 8005316:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005318:	4917      	ldr	r1, [pc, #92]	; (8005378 <CLI_CommandParser+0x3c0>)
							++timedoutMsg;
 800531a:	3301      	adds	r3, #1
 800531c:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	0032      	movs	r2, r6
 8005322:	f00e fe2b 	bl	8013f7c <sprintf>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005326:	7833      	ldrb	r3, [r6, #0]
 8005328:	e730      	b.n	800518c <CLI_CommandParser+0x1d4>
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	2000182c 	.word	0x2000182c
 8005330:	0801cf6a 	.word	0x0801cf6a
 8005334:	0801ac20 	.word	0x0801ac20
 8005338:	20000aa8 	.word	0x20000aa8
 800533c:	0801ad08 	.word	0x0801ad08
 8005340:	20000b4c 	.word	0x20000b4c
 8005344:	20000c60 	.word	0x20000c60
 8005348:	200017ac 	.word	0x200017ac
 800534c:	0801ac28 	.word	0x0801ac28
 8005350:	0801abcc 	.word	0x0801abcc
 8005354:	0801ac6c 	.word	0x0801ac6c
 8005358:	0801ad54 	.word	0x0801ad54
 800535c:	0801ac94 	.word	0x0801ac94
 8005360:	20000b74 	.word	0x20000b74
 8005364:	0801ad10 	.word	0x0801ad10
 8005368:	20000e58 	.word	0x20000e58
 800536c:	0801acbc 	.word	0x0801acbc
 8005370:	20000c74 	.word	0x20000c74
 8005374:	2000219c 	.word	0x2000219c
 8005378:	0801ad34 	.word	0x0801ad34
					group =id >> 8;
 800537c:	464a      	mov	r2, r9
 800537e:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005380:	2100      	movs	r1, #0
					group =id >> 8;
 8005382:	1218      	asrs	r0, r3, #8
 8005384:	b2c3      	uxtb	r3, r0
 8005386:	76d3      	strb	r3, [r2, #27]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005388:	481c      	ldr	r0, [pc, #112]	; (80053fc <CLI_CommandParser+0x444>)
 800538a:	221a      	movs	r2, #26
					group =id >> 8;
 800538c:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800538e:	f00e fc04 	bl	8013b9a <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005392:	0028      	movs	r0, r5
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	9005      	str	r0, [sp, #20]
 800539a:	a807      	add	r0, sp, #28
 800539c:	f7fa febc 	bl	8000118 <strlen>
 80053a0:	9a05      	ldr	r2, [sp, #20]
 80053a2:	3701      	adds	r7, #1
 80053a4:	3a01      	subs	r2, #1
 80053a6:	1a12      	subs	r2, r2, r0
 80053a8:	0039      	movs	r1, r7
 80053aa:	9005      	str	r0, [sp, #20]
 80053ac:	4814      	ldr	r0, [pc, #80]	; (8005400 <CLI_CommandParser+0x448>)
 80053ae:	f00e fe3a 	bl	8014026 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80053b2:	0028      	movs	r0, r5
 80053b4:	f7fa feb0 	bl	8000118 <strlen>
 80053b8:	9a05      	ldr	r2, [sp, #20]
 80053ba:	9903      	ldr	r1, [sp, #12]
 80053bc:	1a83      	subs	r3, r0, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2217      	movs	r2, #23
 80053c2:	9804      	ldr	r0, [sp, #16]
 80053c4:	f002 ffec 	bl	80083a0 <BroadcastMessage>
					if(InGroup(myID,group))
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <CLI_CommandParser+0x44c>)
 80053ca:	4a0f      	ldr	r2, [pc, #60]	; (8005408 <CLI_CommandParser+0x450>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	5a9b      	ldrh	r3, [r3, r2]
 80053d4:	464a      	mov	r2, r9
 80053d6:	7ed2      	ldrb	r2, [r2, #27]
 80053d8:	4113      	asrs	r3, r2
 80053da:	07db      	lsls	r3, r3, #31
 80053dc:	d406      	bmi.n	80053ec <CLI_CommandParser+0x434>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80053de:	0032      	movs	r2, r6
 80053e0:	0030      	movs	r0, r6
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <CLI_CommandParser+0x454>)
 80053e4:	ab07      	add	r3, sp, #28
 80053e6:	f00e fdc9 	bl	8013f7c <sprintf>
 80053ea:	e655      	b.n	8005098 <CLI_CommandParser+0xe0>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80053ec:	2299      	movs	r2, #153	; 0x99
 80053ee:	0031      	movs	r1, r6
 80053f0:	0038      	movs	r0, r7
 80053f2:	0092      	lsls	r2, r2, #2
 80053f4:	f008 fe42 	bl	800e07c <FreeRTOS_CLIProcessCommand>
 80053f8:	4680      	mov	r8, r0
 80053fa:	e7f0      	b.n	80053de <CLI_CommandParser+0x426>
 80053fc:	20000e58 	.word	0x20000e58
 8005400:	20000b74 	.word	0x20000b74
 8005404:	20000aa8 	.word	0x20000aa8
 8005408:	20000aac 	.word	0x20000aac
 800540c:	0801acdc 	.word	0x0801acdc

08005410 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005412:	46de      	mov	lr, fp
 8005414:	4657      	mov	r7, sl
 8005416:	464e      	mov	r6, r9
 8005418:	4645      	mov	r5, r8
 800541a:	b5e0      	push	{r5, r6, r7, lr}
 800541c:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 800541e:	ab02      	add	r3, sp, #8
 8005420:	469c      	mov	ip, r3
 8005422:	240f      	movs	r4, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005424:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 8005426:	2300      	movs	r3, #0
 8005428:	4464      	add	r4, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800542a:	4249      	negs	r1, r1
 800542c:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 800542e:	7023      	strb	r3, [r4, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005430:	f009 ffec 	bl	800f40c <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005434:	f008 fea4 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005438:	23e1      	movs	r3, #225	; 0xe1
 800543a:	4a57      	ldr	r2, [pc, #348]	; (8005598 <prvCLITask+0x188>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800543c:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	031b      	lsls	r3, r3, #12
 8005442:	429a      	cmp	r2, r3
 8005444:	d100      	bne.n	8005448 <prvCLITask+0x38>
 8005446:	e0a4      	b.n	8005592 <prvCLITask+0x182>
			if(port != PcPort)
 8005448:	4b54      	ldr	r3, [pc, #336]	; (800559c <prvCLITask+0x18c>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800544a:	2501      	movs	r5, #1
			if(port != PcPort)
 800544c:	4698      	mov	r8, r3
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800544e:	4646      	mov	r6, r8
			if(port != PcPort)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	429d      	cmp	r5, r3
 8005454:	d005      	beq.n	8005462 <prvCLITask+0x52>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005456:	21e1      	movs	r1, #225	; 0xe1
 8005458:	0028      	movs	r0, r5
 800545a:	0309      	lsls	r1, r1, #12
 800545c:	f008 fb5e 	bl	800db1c <UpdateBaudrate>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005460:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005462:	3501      	adds	r5, #1
 8005464:	b2ed      	uxtb	r5, r5
 8005466:	2d06      	cmp	r5, #6
 8005468:	d1f3      	bne.n	8005452 <prvCLITask+0x42>
 800546a:	46b0      	mov	r8, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800546c:	4641      	mov	r1, r8
 800546e:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <prvCLITask+0x190>)
 8005470:	4d4c      	ldr	r5, [pc, #304]	; (80055a4 <prvCLITask+0x194>)
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	469b      	mov	fp, r3
 8005476:	0053      	lsls	r3, r2, #1
 8005478:	189b      	adds	r3, r3, r2
 800547a:	4a4b      	ldr	r2, [pc, #300]	; (80055a8 <prvCLITask+0x198>)
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	7809      	ldrb	r1, [r1, #0]
 8005480:	189b      	adds	r3, r3, r2
 8005482:	4a4a      	ldr	r2, [pc, #296]	; (80055ac <prvCLITask+0x19c>)
 8005484:	351c      	adds	r5, #28
 8005486:	7812      	ldrb	r2, [r2, #0]
 8005488:	0028      	movs	r0, r5
 800548a:	9100      	str	r1, [sp, #0]
 800548c:	4948      	ldr	r1, [pc, #288]	; (80055b0 <prvCLITask+0x1a0>)
 800548e:	f00e fd75 	bl	8013f7c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005492:	4643      	mov	r3, r8
 8005494:	22a4      	movs	r2, #164	; 0xa4
 8005496:	4947      	ldr	r1, [pc, #284]	; (80055b4 <prvCLITask+0x1a4>)
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	7818      	ldrb	r0, [r3, #0]
 800549c:	230a      	movs	r3, #10
 800549e:	f008 fb1d 	bl	800dadc <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80054a2:	0028      	movs	r0, r5
 80054a4:	f7fa fe38 	bl	8000118 <strlen>
 80054a8:	4643      	mov	r3, r8
 80054aa:	b282      	uxth	r2, r0
 80054ac:	0029      	movs	r1, r5
 80054ae:	7818      	ldrb	r0, [r3, #0]
 80054b0:	230a      	movs	r3, #10
 80054b2:	f008 fb13 	bl	800dadc <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80054b6:	2278      	movs	r2, #120	; 0x78
 80054b8:	4694      	mov	ip, r2
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <prvCLITask+0x1a8>)
	int8_t cInputIndex =0, *pcOutputString;
 80054bc:	2700      	movs	r7, #0
 80054be:	4699      	mov	r9, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80054c0:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <prvCLITask+0x194>)
			Read_In_CLI_Task_Flag = 0;
 80054c2:	2600      	movs	r6, #0
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80054c4:	4463      	add	r3, ip
 80054c6:	469a      	mov	sl, r3
 80054c8:	4d3c      	ldr	r5, [pc, #240]	; (80055bc <prvCLITask+0x1ac>)
 80054ca:	e024      	b.n	8005516 <prvCLITask+0x106>
				cRxedChar = Rx_Data[PcPort - 1];
 80054cc:	4643      	mov	r3, r8
 80054ce:	464a      	mov	r2, r9
 80054d0:	7818      	ldrb	r0, [r3, #0]
 80054d2:	1e43      	subs	r3, r0, #1
 80054d4:	5cd2      	ldrb	r2, [r2, r3]
 80054d6:	7022      	strb	r2, [r4, #0]
				Rx_Data[PcPort - 1] = 0;
 80054d8:	464a      	mov	r2, r9
 80054da:	54d6      	strb	r6, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80054dc:	230a      	movs	r3, #10
 80054de:	2201      	movs	r2, #1
 80054e0:	0021      	movs	r1, r4
			Read_In_CLI_Task_Flag = 0;
 80054e2:	702e      	strb	r6, [r5, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80054e4:	f008 fafa 	bl	800dadc <writePxITMutex>
			if(cRxedChar == '\r'){
 80054e8:	7823      	ldrb	r3, [r4, #0]
 80054ea:	2b0d      	cmp	r3, #13
 80054ec:	d024      	beq.n	8005538 <prvCLITask+0x128>
				if(cRxedChar == '\n'){
 80054ee:	2b0a      	cmp	r3, #10
 80054f0:	d00f      	beq.n	8005512 <prvCLITask+0x102>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d03c      	beq.n	8005570 <prvCLITask+0x160>
 80054f6:	2b7f      	cmp	r3, #127	; 0x7f
 80054f8:	d03a      	beq.n	8005570 <prvCLITask+0x160>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80054fa:	001a      	movs	r2, r3
 80054fc:	3a20      	subs	r2, #32
 80054fe:	2a5e      	cmp	r2, #94	; 0x5e
 8005500:	d807      	bhi.n	8005512 <prvCLITask+0x102>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005502:	2f31      	cmp	r7, #49	; 0x31
 8005504:	dc05      	bgt.n	8005512 <prvCLITask+0x102>
							cInputString[cInputIndex] =cRxedChar;
 8005506:	2178      	movs	r1, #120	; 0x78
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <prvCLITask+0x194>)
 800550a:	19d2      	adds	r2, r2, r7
							cInputIndex++;
 800550c:	3701      	adds	r7, #1
							cInputString[cInputIndex] =cRxedChar;
 800550e:	5453      	strb	r3, [r2, r1]
							cInputIndex++;
 8005510:	b27f      	sxtb	r7, r7
		taskYIELD();
 8005512:	f00a fa0f 	bl	800f934 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8005516:	782b      	ldrb	r3, [r5, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d1fa      	bne.n	8005512 <prvCLITask+0x102>
			if(Processor_type(myPN)=='G')
 800551c:	465b      	mov	r3, fp
 800551e:	7818      	ldrb	r0, [r3, #0]
 8005520:	f7fd fd84 	bl	800302c <Processor_type>
 8005524:	2847      	cmp	r0, #71	; 0x47
 8005526:	d1d1      	bne.n	80054cc <prvCLITask+0xbc>
				cRxedChar = CLI_Data;
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <prvCLITask+0x1b0>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	7023      	strb	r3, [r4, #0]
				CLI_Data = 0;
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <prvCLITask+0x1b0>)
 8005530:	701e      	strb	r6, [r3, #0]
				cRxedChar = Rx_Data[PcPort - 1];
 8005532:	4643      	mov	r3, r8
 8005534:	7818      	ldrb	r0, [r3, #0]
 8005536:	e7d1      	b.n	80054dc <prvCLITask+0xcc>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005538:	4643      	mov	r3, r8
 800553a:	2202      	movs	r2, #2
 800553c:	7818      	ldrb	r0, [r3, #0]
 800553e:	4921      	ldr	r1, [pc, #132]	; (80055c4 <prvCLITask+0x1b4>)
 8005540:	230a      	movs	r3, #10
 8005542:	f008 facb 	bl	800dadc <writePxITMutex>
				if(cInputIndex == 0){
 8005546:	2f00      	cmp	r7, #0
 8005548:	d01d      	beq.n	8005586 <prvCLITask+0x176>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800554a:	4643      	mov	r3, r8
 800554c:	4652      	mov	r2, sl
 800554e:	7818      	ldrb	r0, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	f7ff fd30 	bl	8004fb8 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005558:	4812      	ldr	r0, [pc, #72]	; (80055a4 <prvCLITask+0x194>)
 800555a:	4651      	mov	r1, sl
 800555c:	3044      	adds	r0, #68	; 0x44
 800555e:	f00e fd48 	bl	8013ff2 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005562:	2232      	movs	r2, #50	; 0x32
 8005564:	2100      	movs	r1, #0
 8005566:	4650      	mov	r0, sl
 8005568:	f00e fb17 	bl	8013b9a <memset>
				cInputIndex =0;
 800556c:	2700      	movs	r7, #0
 800556e:	e7d0      	b.n	8005512 <prvCLITask+0x102>
					if(cInputIndex > 0){
 8005570:	2f00      	cmp	r7, #0
 8005572:	d0ce      	beq.n	8005512 <prvCLITask+0x102>
						cInputString[cInputIndex] ='\0';
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <prvCLITask+0x194>)
						cInputIndex--;
 8005576:	3f01      	subs	r7, #1
						cInputString[cInputIndex] ='\0';
 8005578:	4694      	mov	ip, r2
 800557a:	2278      	movs	r2, #120	; 0x78
						cInputIndex--;
 800557c:	b2fb      	uxtb	r3, r7
						cInputString[cInputIndex] ='\0';
 800557e:	4463      	add	r3, ip
						cInputIndex--;
 8005580:	b27f      	sxtb	r7, r7
						cInputString[cInputIndex] ='\0';
 8005582:	549e      	strb	r6, [r3, r2]
 8005584:	e7c5      	b.n	8005512 <prvCLITask+0x102>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005586:	4907      	ldr	r1, [pc, #28]	; (80055a4 <prvCLITask+0x194>)
 8005588:	4650      	mov	r0, sl
 800558a:	3144      	adds	r1, #68	; 0x44
 800558c:	f00e fd31 	bl	8013ff2 <strcpy>
 8005590:	e7db      	b.n	800554a <prvCLITask+0x13a>
 8005592:	4b02      	ldr	r3, [pc, #8]	; (800559c <prvCLITask+0x18c>)
 8005594:	4698      	mov	r8, r3
 8005596:	e769      	b.n	800546c <prvCLITask+0x5c>
 8005598:	20000b54 	.word	0x20000b54
 800559c:	20000c60 	.word	0x20000c60
 80055a0:	20000030 	.word	0x20000030
 80055a4:	2000182c 	.word	0x2000182c
 80055a8:	08019d5c 	.word	0x08019d5c
 80055ac:	20000aa8 	.word	0x20000aa8
 80055b0:	0801ad90 	.word	0x0801ad90
 80055b4:	0801adbc 	.word	0x0801adbc
 80055b8:	20001dd0 	.word	0x20001dd0
 80055bc:	200017a9 	.word	0x200017a9
 80055c0:	200011f1 	.word	0x200011f1
 80055c4:	0801c5a0 	.word	0x0801c5a0

080055c8 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80055ca:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80055cc:	000d      	movs	r5, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80055ce:	7814      	ldrb	r4, [r2, #0]
 80055d0:	3c01      	subs	r4, #1
 80055d2:	00a3      	lsls	r3, r4, #2
 80055d4:	191b      	adds	r3, r3, r4
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	18d3      	adds	r3, r2, r3
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d026      	beq.n	800562e <ParseSnippetCommand+0x66>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80055e0:	4f15      	ldr	r7, [pc, #84]	; (8005638 <ParseSnippetCommand+0x70>)
 80055e2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	d014      	beq.n	8005612 <ParseSnippetCommand+0x4a>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80055e8:	7823      	ldrb	r3, [r4, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00e      	beq.n	800560c <ParseSnippetCommand+0x44>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80055ee:	2113      	movs	r1, #19
 80055f0:	0020      	movs	r0, r4
 80055f2:	f00e fcf0 	bl	8013fd6 <strchr>
 80055f6:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 80055f8:	d00e      	beq.n	8005618 <ParseSnippetCommand+0x50>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80055fa:	1b02      	subs	r2, r0, r4
 80055fc:	0021      	movs	r1, r4
 80055fe:	0028      	movs	r0, r5
 8005600:	f00e fd11 	bl	8014026 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005604:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005606:	3601      	adds	r6, #1
 8005608:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 800560c:	2000      	movs	r0, #0
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
		return false;
 8005610:	e7fb      	b.n	800560a <ParseSnippetCommand+0x42>
		ptrStart =snippetBuffer;
 8005612:	0004      	movs	r4, r0
 8005614:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005616:	e7e7      	b.n	80055e8 <ParseSnippetCommand+0x20>
		strcpy((char* )cliBuffer,ptrStart);
 8005618:	0021      	movs	r1, r4
 800561a:	0028      	movs	r0, r5
 800561c:	f00e fce9 	bl	8013ff2 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005620:	0028      	movs	r0, r5
 8005622:	f7fa fd79 	bl	8000118 <strlen>
 8005626:	1824      	adds	r4, r4, r0
 8005628:	62fc      	str	r4, [r7, #44]	; 0x2c
	return true;
 800562a:	2001      	movs	r0, #1
 800562c:	e7ed      	b.n	800560a <ParseSnippetCommand+0x42>
		return false;
 800562e:	2000      	movs	r0, #0
 8005630:	e7eb      	b.n	800560a <ParseSnippetCommand+0x42>
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	200017ac 	.word	0x200017ac
 8005638:	200018ac 	.word	0x200018ac

0800563c <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 800563c:	0081      	lsls	r1, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800563e:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 8005640:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <CheckSnippetCondition+0xbc>)
 8005642:	1809      	adds	r1, r1, r0
 8005644:	0089      	lsls	r1, r1, #2
 8005646:	185c      	adds	r4, r3, r1
 8005648:	7922      	ldrb	r2, [r4, #4]
bool CheckSnippetCondition(uint8_t index){
 800564a:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 800564c:	2a01      	cmp	r2, #1
 800564e:	d01f      	beq.n	8005690 <CheckSnippetCondition+0x54>
 8005650:	2a03      	cmp	r2, #3
 8005652:	d11a      	bne.n	800568a <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005654:	79e0      	ldrb	r0, [r4, #7]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005656:	1859      	adds	r1, r3, r1
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005658:	3801      	subs	r0, #1
 800565a:	0042      	lsls	r2, r0, #1
 800565c:	1812      	adds	r2, r2, r0
 800565e:	4827      	ldr	r0, [pc, #156]	; (80056fc <CheckSnippetCondition+0xc0>)
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	5812      	ldr	r2, [r2, r0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005664:	310a      	adds	r1, #10
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005666:	6815      	ldr	r5, [r2, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005668:	a801      	add	r0, sp, #4
 800566a:	2204      	movs	r2, #4
 800566c:	f00e fa8c 	bl	8013b88 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005670:	7963      	ldrb	r3, [r4, #5]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d809      	bhi.n	800568a <CheckSnippetCondition+0x4e>
 8005676:	4a22      	ldr	r2, [pc, #136]	; (8005700 <CheckSnippetCondition+0xc4>)
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	58d3      	ldr	r3, [r2, r3]
 800567c:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800567e:	9801      	ldr	r0, [sp, #4]
 8005680:	1c29      	adds	r1, r5, #0
 8005682:	f7fa ff3f 	bl	8000504 <__aeabi_fcmpgt>
 8005686:	2800      	cmp	r0, #0
 8005688:	d113      	bne.n	80056b2 <CheckSnippetCondition+0x76>
			
		default:
			break;
	}
	
	return false;
 800568a:	2000      	movs	r0, #0
}
 800568c:	b003      	add	sp, #12
 800568e:	bd30      	pop	{r4, r5, pc}
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005690:	79a2      	ldrb	r2, [r4, #6]
 8005692:	00d3      	lsls	r3, r2, #3
 8005694:	189b      	adds	r3, r3, r2
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <CheckSnippetCondition+0xc8>)
 8005698:	5c98      	ldrb	r0, [r3, r2]
 800569a:	79e3      	ldrb	r3, [r4, #7]
 800569c:	1ac0      	subs	r0, r0, r3
 800569e:	4243      	negs	r3, r0
 80056a0:	4158      	adcs	r0, r3
 80056a2:	b2c0      	uxtb	r0, r0
 80056a4:	e7f2      	b.n	800568c <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 80056a6:	9801      	ldr	r0, [sp, #4]
 80056a8:	1c29      	adds	r1, r5, #0
 80056aa:	f7fa ff11 	bl	80004d0 <__aeabi_fcmpeq>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d1eb      	bne.n	800568a <CheckSnippetCondition+0x4e>
 80056b2:	2100      	movs	r1, #0
 80056b4:	1c28      	adds	r0, r5, #0
 80056b6:	f7fa ff0b 	bl	80004d0 <__aeabi_fcmpeq>
 80056ba:	4243      	negs	r3, r0
 80056bc:	4158      	adcs	r0, r3
 80056be:	e7e5      	b.n	800568c <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 80056c0:	9801      	ldr	r0, [sp, #4]
 80056c2:	1c29      	adds	r1, r5, #0
 80056c4:	f7fa ff04 	bl	80004d0 <__aeabi_fcmpeq>
 80056c8:	1e43      	subs	r3, r0, #1
 80056ca:	4198      	sbcs	r0, r3
 80056cc:	e7de      	b.n	800568c <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80056ce:	9801      	ldr	r0, [sp, #4]
 80056d0:	1c29      	adds	r1, r5, #0
 80056d2:	f7fa ff03 	bl	80004dc <__aeabi_fcmplt>
 80056d6:	1e43      	subs	r3, r0, #1
 80056d8:	4198      	sbcs	r0, r3
 80056da:	e7d7      	b.n	800568c <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	1c29      	adds	r1, r5, #0
 80056e0:	f7fa ff06 	bl	80004f0 <__aeabi_fcmple>
 80056e4:	1e43      	subs	r3, r0, #1
 80056e6:	4198      	sbcs	r0, r3
 80056e8:	e7d0      	b.n	800568c <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80056ea:	9801      	ldr	r0, [sp, #4]
 80056ec:	1c29      	adds	r1, r5, #0
 80056ee:	f7fa ff13 	bl	8000518 <__aeabi_fcmpge>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0c9      	beq.n	800568a <CheckSnippetCondition+0x4e>
 80056f6:	e7dc      	b.n	80056b2 <CheckSnippetCondition+0x76>
 80056f8:	200017ac 	.word	0x200017ac
 80056fc:	20000098 	.word	0x20000098
 8005700:	08019e40 	.word	0x08019e40
 8005704:	2000284c 	.word	0x2000284c

08005708 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	46de      	mov	lr, fp
 800570c:	464e      	mov	r6, r9
 800570e:	4645      	mov	r5, r8
 8005710:	4657      	mov	r7, sl
 8005712:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005714:	f008 fd34 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005718:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800571a:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 800571c:	4698      	mov	r8, r3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d03a      	beq.n	800579a <ExecuteSnippet+0x92>
 8005724:	4643      	mov	r3, r8
 8005726:	1d1d      	adds	r5, r3, #4
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <ExecuteSnippet+0xa4>)
 800572a:	4f21      	ldr	r7, [pc, #132]	; (80057b0 <ExecuteSnippet+0xa8>)
 800572c:	469b      	mov	fp, r3
 800572e:	2320      	movs	r3, #32
 8005730:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005732:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <ExecuteSnippet+0xac>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005734:	2400      	movs	r4, #0
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005736:	4699      	mov	r9, r3
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005738:	3730      	adds	r7, #48	; 0x30
 800573a:	e006      	b.n	800574a <ExecuteSnippet+0x42>
	for(s =0; s < numOfRecordedSnippets; s++){
 800573c:	4643      	mov	r3, r8
 800573e:	3401      	adds	r4, #1
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2a4      	uxth	r4, r4
 8005744:	3514      	adds	r5, #20
 8005746:	42a3      	cmp	r3, r4
 8005748:	d927      	bls.n	800579a <ExecuteSnippet+0x92>
		if(snippets[s].state)								// Check for activated Snippets
 800574a:	7c2b      	ldrb	r3, [r5, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f5      	beq.n	800573c <ExecuteSnippet+0x34>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005750:	b2e0      	uxtb	r0, r4
 8005752:	f7ff ff73 	bl	800563c <CheckSnippetCondition>
 8005756:	2800      	cmp	r0, #0
 8005758:	d0f0      	beq.n	800573c <ExecuteSnippet+0x34>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800575a:	465b      	mov	r3, fp
 800575c:	4652      	mov	r2, sl
 800575e:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005760:	e00e      	b.n	8005780 <ExecuteSnippet+0x78>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005762:	464b      	mov	r3, r9
 8005764:	003a      	movs	r2, r7
 8005766:	2100      	movs	r1, #0
 8005768:	7818      	ldrb	r0, [r3, #0]
 800576a:	0033      	movs	r3, r6
 800576c:	f7ff fc24 	bl	8004fb8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005770:	0030      	movs	r0, r6
 8005772:	f7fa fcd1 	bl	8000118 <strlen>
 8005776:	2100      	movs	r1, #0
 8005778:	0002      	movs	r2, r0
 800577a:	0030      	movs	r0, r6
 800577c:	f00e fa0d 	bl	8013b9a <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005780:	0039      	movs	r1, r7
 8005782:	68e8      	ldr	r0, [r5, #12]
 8005784:	f7ff ff20 	bl	80055c8 <ParseSnippetCommand>
 8005788:	2800      	cmp	r0, #0
 800578a:	d1ea      	bne.n	8005762 <ExecuteSnippet+0x5a>
	for(s =0; s < numOfRecordedSnippets; s++){
 800578c:	4643      	mov	r3, r8
 800578e:	3401      	adds	r4, #1
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	b2a4      	uxth	r4, r4
 8005794:	3514      	adds	r5, #20
 8005796:	42a3      	cmp	r3, r4
 8005798:	d8d7      	bhi.n	800574a <ExecuteSnippet+0x42>
			}
		}
	}
	
	return result;
}
 800579a:	2000      	movs	r0, #0
 800579c:	bcf0      	pop	{r4, r5, r6, r7}
 800579e:	46bb      	mov	fp, r7
 80057a0:	46b2      	mov	sl, r6
 80057a2:	46a9      	mov	r9, r5
 80057a4:	46a0      	mov	r8, r4
 80057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a8:	200017ac 	.word	0x200017ac
 80057ac:	20000b4c 	.word	0x20000b4c
 80057b0:	200018ac 	.word	0x200018ac
 80057b4:	20000c60 	.word	0x20000c60

080057b8 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80057b8:	2000      	movs	r0, #0
 80057ba:	4770      	bx	lr

080057bc <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <resetCommand+0x14>)
 80057c2:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <resetCommand+0x18>)
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	e7fd      	b.n	80057ca <resetCommand+0xe>
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	e000ed00 	.word	0xe000ed00
 80057d4:	05fa0004 	.word	0x05fa0004

080057d8 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80057dc:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057de:	b082      	sub	sp, #8
 80057e0:	0005      	movs	r5, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057e2:	466a      	mov	r2, sp
 80057e4:	2101      	movs	r1, #1
 80057e6:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 80057e8:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80057ea:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ec:	f008 fccc 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057f0:	2300      	movs	r3, #0
 80057f2:	56c3      	ldrsb	r3, [r0, r3]
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d00e      	beq.n	8005816 <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057f8:	2102      	movs	r1, #2
 80057fa:	aa01      	add	r2, sp, #4
 80057fc:	0020      	movs	r0, r4
 80057fe:	f008 fcc3 	bl	800e188 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005802:	f00d ff02 	bl	801360a <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005806:	2213      	movs	r2, #19
 8005808:	0028      	movs	r0, r5
 800580a:	490f      	ldr	r1, [pc, #60]	; (8005848 <setBaudrateCommand+0x70>)
 800580c:	f00e f9bc 	bl	8013b88 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005810:	2000      	movs	r0, #0
 8005812:	b002      	add	sp, #8
 8005814:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005816:	3001      	adds	r0, #1
 8005818:	f00d fef7 	bl	801360a <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800581c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800581e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005820:	2102      	movs	r1, #2
 8005822:	0020      	movs	r0, r4
 8005824:	f008 fcb0 	bl	800e188 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005828:	f00d feef 	bl	801360a <atol>
 800582c:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 800582e:	b2f0      	uxtb	r0, r6
 8005830:	0021      	movs	r1, r4
 8005832:	f008 f973 	bl	800db1c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005836:	23ff      	movs	r3, #255	; 0xff
 8005838:	0022      	movs	r2, r4
 800583a:	0028      	movs	r0, r5
 800583c:	4903      	ldr	r1, [pc, #12]	; (800584c <setBaudrateCommand+0x74>)
 800583e:	4033      	ands	r3, r6
 8005840:	f00e fb9c 	bl	8013f7c <sprintf>
 8005844:	e7e4      	b.n	8005810 <setBaudrateCommand+0x38>
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	0801b078 	.word	0x0801b078
 800584c:	0801b050 	.word	0x0801b050

08005850 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005850:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <flashsizeCommand+0x10>)
 8005854:	4903      	ldr	r1, [pc, #12]	; (8005864 <flashsizeCommand+0x14>)
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	f00e fb90 	bl	8013f7c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800585c:	2000      	movs	r0, #0
 800585e:	bd10      	pop	{r4, pc}
 8005860:	1ffff7cc 	.word	0x1ffff7cc
 8005864:	0801b08c 	.word	0x0801b08c

08005868 <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005868:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800586a:	b510      	push	{r4, lr}
 800586c:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 800586e:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005870:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005872:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005874:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005876:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005878:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 800587a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800587c:	f008 fc84 	bl	800e188 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005880:	7803      	ldrb	r3, [r0, #0]
 8005882:	3b32      	subs	r3, #50	; 0x32
 8005884:	2b01      	cmp	r3, #1
 8005886:	d907      	bls.n	8005898 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005888:	2215      	movs	r2, #21
 800588a:	0020      	movs	r0, r4
 800588c:	490a      	ldr	r1, [pc, #40]	; (80058b8 <GetReadPrecentageCommand+0x50>)
 800588e:	f00e f97b 	bl	8013b88 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005892:	2000      	movs	r0, #0
 8005894:	b002      	add	sp, #8
 8005896:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005898:	f00d feb7 	bl	801360a <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 800589c:	a901      	add	r1, sp, #4
 800589e:	b2c0      	uxtb	r0, r0
 80058a0:	f006 ff88 	bl	800c7b4 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80058a4:	9801      	ldr	r0, [sp, #4]
 80058a6:	f7fd fac7 	bl	8002e38 <__aeabi_f2d>
 80058aa:	0002      	movs	r2, r0
 80058ac:	000b      	movs	r3, r1
 80058ae:	0020      	movs	r0, r4
 80058b0:	4902      	ldr	r1, [pc, #8]	; (80058bc <GetReadPrecentageCommand+0x54>)
 80058b2:	f00e fb63 	bl	8013f7c <sprintf>
 80058b6:	e7ec      	b.n	8005892 <GetReadPrecentageCommand+0x2a>
 80058b8:	0801b0d0 	.word	0x0801b0d0
 80058bc:	0801b0ac 	.word	0x0801b0ac

080058c0 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c0:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80058c2:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c4:	0004      	movs	r4, r0
 80058c6:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80058c8:	4668      	mov	r0, sp
 80058ca:	a901      	add	r1, sp, #4
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80058d0:	f006 fea4 	bl	800c61c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80058d4:	4669      	mov	r1, sp
 80058d6:	0020      	movs	r0, r4
 80058d8:	f00e fb8b 	bl	8013ff2 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80058dc:	9801      	ldr	r0, [sp, #4]
 80058de:	f7fd faab 	bl	8002e38 <__aeabi_f2d>
 80058e2:	0002      	movs	r2, r0
 80058e4:	000b      	movs	r3, r1
 80058e6:	0020      	movs	r0, r4
 80058e8:	4902      	ldr	r1, [pc, #8]	; (80058f4 <ReadVrefCommand+0x34>)
 80058ea:	f00e fb47 	bl	8013f7c <sprintf>
}
 80058ee:	2000      	movs	r0, #0
 80058f0:	b002      	add	sp, #8
 80058f2:	bd10      	pop	{r4, pc}
 80058f4:	0801b0e8 	.word	0x0801b0e8

080058f8 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058f8:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80058fa:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058fc:	0004      	movs	r4, r0
 80058fe:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005900:	4668      	mov	r0, sp
 8005902:	a901      	add	r1, sp, #4
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005908:	f006 fe88 	bl	800c61c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800590c:	4669      	mov	r1, sp
 800590e:	0020      	movs	r0, r4
 8005910:	f00e fb6f 	bl	8013ff2 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	f7fd fa8f 	bl	8002e38 <__aeabi_f2d>
 800591a:	0002      	movs	r2, r0
 800591c:	000b      	movs	r3, r1
 800591e:	0020      	movs	r0, r4
 8005920:	4902      	ldr	r1, [pc, #8]	; (800592c <ReadTempCommand+0x34>)
 8005922:	f00e fb2b 	bl	8013f7c <sprintf>
}
 8005926:	2000      	movs	r0, #0
 8005928:	b002      	add	sp, #8
 800592a:	bd10      	pop	{r4, pc}
 800592c:	0801b110 	.word	0x0801b110

08005930 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005930:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005934:	0014      	movs	r4, r2
 8005936:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005938:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800593a:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800593c:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800593e:	2101      	movs	r1, #1
 8005940:	aa01      	add	r2, sp, #4
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005942:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005944:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 8005946:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005948:	f008 fc1e 	bl	800e188 <FreeRTOS_CLIGetParameter>
 800594c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800594e:	2102      	movs	r1, #2
 8005950:	0020      	movs	r0, r4
 8005952:	aa02      	add	r2, sp, #8
 8005954:	f008 fc18 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005958:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800595a:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800595c:	3b32      	subs	r3, #50	; 0x32
 800595e:	2b01      	cmp	r3, #1
 8005960:	d907      	bls.n	8005972 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005962:	2215      	movs	r2, #21
 8005964:	0030      	movs	r0, r6
 8005966:	4919      	ldr	r1, [pc, #100]	; (80059cc <ADCReadCommand+0x9c>)
 8005968:	f00e f90e 	bl	8013b88 <memcpy>
}
 800596c:	2000      	movs	r0, #0
 800596e:	b005      	add	sp, #20
 8005970:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005972:	0028      	movs	r0, r5
 8005974:	f00d fe49 	bl	801360a <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005978:	4f15      	ldr	r7, [pc, #84]	; (80059d0 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800597a:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800597c:	0039      	movs	r1, r7
 800597e:	0020      	movs	r0, r4
 8005980:	f7fa fbc0 	bl	8000104 <strcmp>
 8005984:	2800      	cmp	r0, #0
 8005986:	d005      	beq.n	8005994 <ADCReadCommand+0x64>
 8005988:	0020      	movs	r0, r4
 800598a:	4912      	ldr	r1, [pc, #72]	; (80059d4 <ADCReadCommand+0xa4>)
 800598c:	f7fa fbba 	bl	8000104 <strcmp>
 8005990:	2800      	cmp	r0, #0
 8005992:	d115      	bne.n	80059c0 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005994:	0039      	movs	r1, r7
 8005996:	0028      	movs	r0, r5
 8005998:	f007 f800 	bl	800c99c <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800599c:	aa03      	add	r2, sp, #12
 800599e:	0039      	movs	r1, r7
 80059a0:	0028      	movs	r0, r5
 80059a2:	f007 f849 	bl	800ca38 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80059a6:	a903      	add	r1, sp, #12
 80059a8:	0030      	movs	r0, r6
 80059aa:	f00e fb22 	bl	8013ff2 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80059ae:	9803      	ldr	r0, [sp, #12]
 80059b0:	f7fa fe0a 	bl	80005c8 <__aeabi_f2uiz>
 80059b4:	4908      	ldr	r1, [pc, #32]	; (80059d8 <ADCReadCommand+0xa8>)
 80059b6:	b282      	uxth	r2, r0
 80059b8:	0030      	movs	r0, r6
 80059ba:	f00e fadf 	bl	8013f7c <sprintf>
 80059be:	e7d5      	b.n	800596c <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059c0:	2212      	movs	r2, #18
 80059c2:	0030      	movs	r0, r6
 80059c4:	4905      	ldr	r1, [pc, #20]	; (80059dc <ADCReadCommand+0xac>)
 80059c6:	f00e f8df 	bl	8013b88 <memcpy>
 80059ca:	e7cf      	b.n	800596c <ADCReadCommand+0x3c>
 80059cc:	0801b0d0 	.word	0x0801b0d0
 80059d0:	0801b134 	.word	0x0801b134
 80059d4:	0801b138 	.word	0x0801b138
 80059d8:	0801b140 	.word	0x0801b140
 80059dc:	0801b150 	.word	0x0801b150

080059e0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	46de      	mov	lr, fp
 80059e4:	4657      	mov	r7, sl
 80059e6:	4645      	mov	r5, r8
 80059e8:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80059ea:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059ec:	b5e0      	push	{r5, r6, r7, lr}
 80059ee:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80059f0:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80059f2:	4b5d      	ldr	r3, [pc, #372]	; (8005b68 <testportCommand+0x188>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059f4:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80059f6:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059f8:	4680      	mov	r8, r0
	char WriteVaule[1] ="H";
 80059fa:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059fc:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059fe:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 8005a00:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a02:	f008 fbc1 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005a06:	4959      	ldr	r1, [pc, #356]	; (8005b6c <testportCommand+0x18c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a08:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005a0a:	f7fa fb7b 	bl	8000104 <strcmp>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d15f      	bne.n	8005ad2 <testportCommand+0xf2>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005a12:	2401      	movs	r4, #1
 8005a14:	4d56      	ldr	r5, [pc, #344]	; (8005b70 <testportCommand+0x190>)
 8005a16:	4a57      	ldr	r2, [pc, #348]	; (8005b74 <testportCommand+0x194>)
 8005a18:	782b      	ldrb	r3, [r5, #0]
 8005a1a:	18d2      	adds	r2, r2, r3
 8005a1c:	3a01      	subs	r2, #1
 8005a1e:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005a20:	4a55      	ldr	r2, [pc, #340]	; (8005b78 <testportCommand+0x198>)
 8005a22:	4691      	mov	r9, r2
 8005a24:	b2e2      	uxtb	r2, r4
 8005a26:	4692      	mov	sl, r2
			if(PcPort != ports){
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d107      	bne.n	8005a3c <testportCommand+0x5c>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005a2c:	3401      	adds	r4, #1
 8005a2e:	2c06      	cmp	r4, #6
 8005a30:	d047      	beq.n	8005ac2 <testportCommand+0xe2>
			if(PcPort != ports){
 8005a32:	782b      	ldrb	r3, [r5, #0]
 8005a34:	b2e2      	uxtb	r2, r4
 8005a36:	4692      	mov	sl, r2
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d0f7      	beq.n	8005a2c <testportCommand+0x4c>
				WriteVaule[0] =rand();
 8005a3c:	f00e f8c6 	bl	8013bcc <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005a40:	2364      	movs	r3, #100	; 0x64
 8005a42:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 8005a44:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005a46:	0039      	movs	r1, r7
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	469b      	mov	fp, r3
 8005a4c:	4650      	mov	r0, sl
 8005a4e:	3b5a      	subs	r3, #90	; 0x5a
 8005a50:	f008 f80e 	bl	800da70 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005a54:	4650      	mov	r0, sl
 8005a56:	f008 f873 	bl	800db40 <GetUart>
 8005a5a:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005a5c:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d03f      	beq.n	8005ae6 <testportCommand+0x106>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005a66:	0022      	movs	r2, r4
 8005a68:	4944      	ldr	r1, [pc, #272]	; (8005b7c <testportCommand+0x19c>)
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f00e fa86 	bl	8013f7c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a70:	4640      	mov	r0, r8
 8005a72:	f7fa fb51 	bl	8000118 <strlen>
 8005a76:	465b      	mov	r3, fp
 8005a78:	b282      	uxth	r2, r0
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	7828      	ldrb	r0, [r5, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	230a      	movs	r3, #10
 8005a82:	f007 fff5 	bl	800da70 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005a86:	2254      	movs	r2, #84	; 0x54
 8005a88:	493d      	ldr	r1, [pc, #244]	; (8005b80 <testportCommand+0x1a0>)
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f00e f87c 	bl	8013b88 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a90:	2364      	movs	r3, #100	; 0x64
 8005a92:	7828      	ldrb	r0, [r5, #0]
 8005a94:	2253      	movs	r2, #83	; 0x53
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4641      	mov	r1, r8
 8005a9a:	3b5a      	subs	r3, #90	; 0x5a
 8005a9c:	f007 ffe8 	bl	800da70 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e002      	b.n	8005aaa <testportCommand+0xca>
					Delay_ms(1);
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	f00a f895 	bl	800fbd4 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005aaa:	782a      	ldrb	r2, [r5, #0]
 8005aac:	3a01      	subs	r2, #1
 8005aae:	0053      	lsls	r3, r2, #1
 8005ab0:	189b      	adds	r3, r3, r2
 8005ab2:	019b      	lsls	r3, r3, #6
 8005ab4:	444b      	add	r3, r9
 8005ab6:	5d9b      	ldrb	r3, [r3, r6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f3      	beq.n	8005aa4 <testportCommand+0xc4>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005abc:	3401      	adds	r4, #1
 8005abe:	2c06      	cmp	r4, #6
 8005ac0:	d1b7      	bne.n	8005a32 <testportCommand+0x52>
}
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	b005      	add	sp, #20
 8005ac6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ac8:	46bb      	mov	fp, r7
 8005aca:	46b2      	mov	sl, r6
 8005acc:	46a9      	mov	r9, r5
 8005ace:	46a0      	mov	r8, r4
 8005ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	56e3      	ldrsb	r3, [r4, r3]
 8005ad6:	2b70      	cmp	r3, #112	; 0x70
 8005ad8:	d016      	beq.n	8005b08 <testportCommand+0x128>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ada:	220f      	movs	r2, #15
 8005adc:	4640      	mov	r0, r8
 8005ade:	4929      	ldr	r1, [pc, #164]	; (8005b84 <testportCommand+0x1a4>)
 8005ae0:	f00e f852 	bl	8013b88 <memcpy>
 8005ae4:	e7ed      	b.n	8005ac2 <testportCommand+0xe2>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005ae6:	0022      	movs	r2, r4
 8005ae8:	4927      	ldr	r1, [pc, #156]	; (8005b88 <testportCommand+0x1a8>)
 8005aea:	4640      	mov	r0, r8
 8005aec:	f00e fa46 	bl	8013f7c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005af0:	4640      	mov	r0, r8
 8005af2:	f7fa fb11 	bl	8000118 <strlen>
 8005af6:	465b      	mov	r3, fp
 8005af8:	b282      	uxth	r2, r0
 8005afa:	4641      	mov	r1, r8
 8005afc:	7828      	ldrb	r0, [r5, #0]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	3b5a      	subs	r3, #90	; 0x5a
 8005b02:	f007 ffb5 	bl	800da70 <writePxMutex>
 8005b06:	e7be      	b.n	8005a86 <testportCommand+0xa6>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b08:	1c60      	adds	r0, r4, #1
 8005b0a:	f00d fd7e 	bl	801360a <atol>
 8005b0e:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005b10:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b12:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d905      	bls.n	8005b24 <testportCommand+0x144>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b18:	221b      	movs	r2, #27
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	491b      	ldr	r1, [pc, #108]	; (8005b8c <testportCommand+0x1ac>)
 8005b1e:	f00e f833 	bl	8013b88 <memcpy>
 8005b22:	e7ce      	b.n	8005ac2 <testportCommand+0xe2>
				WriteVaule[0] =rand();
 8005b24:	f00e f852 	bl	8013bcc <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005b28:	2364      	movs	r3, #100	; 0x64
 8005b2a:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 8005b2c:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005b2e:	0039      	movs	r1, r7
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	0028      	movs	r0, r5
 8005b34:	3b32      	subs	r3, #50	; 0x32
 8005b36:	f007 ff9b 	bl	800da70 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f008 f800 	bl	800db40 <GetUart>
 8005b40:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005b42:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005b44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d006      	beq.n	8005b5a <testportCommand+0x17a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	4640      	mov	r0, r8
 8005b50:	490a      	ldr	r1, [pc, #40]	; (8005b7c <testportCommand+0x19c>)
 8005b52:	4022      	ands	r2, r4
 8005b54:	f00e fa12 	bl	8013f7c <sprintf>
 8005b58:	e7b3      	b.n	8005ac2 <testportCommand+0xe2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005b5a:	22ff      	movs	r2, #255	; 0xff
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	490a      	ldr	r1, [pc, #40]	; (8005b88 <testportCommand+0x1a8>)
 8005b60:	4022      	ands	r2, r4
 8005b62:	f00e fa0b 	bl	8013f7c <sprintf>
 8005b66:	e7ac      	b.n	8005ac2 <testportCommand+0xe2>
 8005b68:	0801b214 	.word	0x0801b214
 8005b6c:	0801a6d8 	.word	0x0801a6d8
 8005b70:	20000c60 	.word	0x20000c60
 8005b74:	200019d0 	.word	0x200019d0
 8005b78:	20001a10 	.word	0x20001a10
 8005b7c:	0801b180 	.word	0x0801b180
 8005b80:	0801b194 	.word	0x0801b194
 8005b84:	0801b204 	.word	0x0801b204
 8005b88:	0801b164 	.word	0x0801b164
 8005b8c:	0801b1e8 	.word	0x0801b1e8

08005b90 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b94:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b96:	b082      	sub	sp, #8
 8005b98:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b9a:	466a      	mov	r2, sp
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ba4:	f008 faf0 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005ba8:	2300      	movs	r3, #0
 8005baa:	56c3      	ldrsb	r3, [r0, r3]
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d010      	beq.n	8005bd2 <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	aa01      	add	r2, sp, #4
 8005bb6:	f008 fae7 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bba:	2300      	movs	r3, #0
 8005bbc:	56c3      	ldrsb	r3, [r0, r3]
 8005bbe:	2b70      	cmp	r3, #112	; 0x70
 8005bc0:	d02f      	beq.n	8005c22 <unbridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bc2:	220f      	movs	r2, #15
 8005bc4:	0028      	movs	r0, r5
 8005bc6:	4919      	ldr	r1, [pc, #100]	; (8005c2c <unbridgeCommand+0x9c>)
 8005bc8:	f00d ffde 	bl	8013b88 <memcpy>
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	b002      	add	sp, #8
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f00d fd19 	bl	801360a <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bd8:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bda:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bdc:	aa01      	add	r2, sp, #4
 8005bde:	0020      	movs	r0, r4
 8005be0:	f008 fad2 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005be4:	2300      	movs	r3, #0
 8005be6:	56c3      	ldrsb	r3, [r0, r3]
 8005be8:	2b70      	cmp	r3, #112	; 0x70
 8005bea:	d1ea      	bne.n	8005bc2 <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bec:	3001      	adds	r0, #1
 8005bee:	f00d fd0c 	bl	801360a <atol>
 8005bf2:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 8005bf4:	b2c1      	uxtb	r1, r0
 8005bf6:	b2f0      	uxtb	r0, r6
 8005bf8:	f7fe ff6c 	bl	8004ad4 <Unbridge>
	if(result == BOS_OK)
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d108      	bne.n	8005c12 <unbridgeCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	0023      	movs	r3, r4
 8005c04:	0028      	movs	r0, r5
 8005c06:	4013      	ands	r3, r2
 8005c08:	4909      	ldr	r1, [pc, #36]	; (8005c30 <unbridgeCommand+0xa0>)
 8005c0a:	4032      	ands	r2, r6
 8005c0c:	f00e f9b6 	bl	8013f7c <sprintf>
 8005c10:	e7dc      	b.n	8005bcc <unbridgeCommand+0x3c>
	else if(result == BOS_ERR_WrongParam)
 8005c12:	2867      	cmp	r0, #103	; 0x67
 8005c14:	d0d5      	beq.n	8005bc2 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005c16:	2219      	movs	r2, #25
 8005c18:	0028      	movs	r0, r5
 8005c1a:	4906      	ldr	r1, [pc, #24]	; (8005c34 <unbridgeCommand+0xa4>)
 8005c1c:	f00d ffb4 	bl	8013b88 <memcpy>
	return pdFALSE;
 8005c20:	e7d4      	b.n	8005bcc <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005c22:	3001      	adds	r0, #1
 8005c24:	f00d fcf1 	bl	801360a <atol>
	else if(result == BOS_ERR_WrongParam)
 8005c28:	e7cb      	b.n	8005bc2 <unbridgeCommand+0x32>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	0801b204 	.word	0x0801b204
 8005c30:	0801b218 	.word	0x0801b218
 8005c34:	0801b238 	.word	0x0801b238

08005c38 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005c3c:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c3e:	b082      	sub	sp, #8
 8005c40:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c42:	466a      	mov	r2, sp
 8005c44:	2101      	movs	r1, #1
 8005c46:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c4c:	f008 fa9c 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005c50:	2300      	movs	r3, #0
 8005c52:	56c3      	ldrsb	r3, [r0, r3]
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d010      	beq.n	8005c7a <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005c58:	2102      	movs	r1, #2
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	aa01      	add	r2, sp, #4
 8005c5e:	f008 fa93 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005c62:	2300      	movs	r3, #0
 8005c64:	56c3      	ldrsb	r3, [r0, r3]
 8005c66:	2b70      	cmp	r3, #112	; 0x70
 8005c68:	d02f      	beq.n	8005cca <bridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c6a:	220f      	movs	r2, #15
 8005c6c:	0028      	movs	r0, r5
 8005c6e:	4919      	ldr	r1, [pc, #100]	; (8005cd4 <bridgeCommand+0x9c>)
 8005c70:	f00d ff8a 	bl	8013b88 <memcpy>
}
 8005c74:	2000      	movs	r0, #0
 8005c76:	b002      	add	sp, #8
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f00d fcc5 	bl	801360a <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005c80:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c82:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005c84:	aa01      	add	r2, sp, #4
 8005c86:	0020      	movs	r0, r4
 8005c88:	f008 fa7e 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	56c3      	ldrsb	r3, [r0, r3]
 8005c90:	2b70      	cmp	r3, #112	; 0x70
 8005c92:	d1ea      	bne.n	8005c6a <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005c94:	3001      	adds	r0, #1
 8005c96:	f00d fcb8 	bl	801360a <atol>
 8005c9a:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005c9c:	b2c1      	uxtb	r1, r0
 8005c9e:	b2f0      	uxtb	r0, r6
 8005ca0:	f7fe ff04 	bl	8004aac <Bridge>
	if(result == BOS_OK)
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d108      	bne.n	8005cba <bridgeCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	0023      	movs	r3, r4
 8005cac:	0028      	movs	r0, r5
 8005cae:	4013      	ands	r3, r2
 8005cb0:	4909      	ldr	r1, [pc, #36]	; (8005cd8 <bridgeCommand+0xa0>)
 8005cb2:	4032      	ands	r2, r6
 8005cb4:	f00e f962 	bl	8013f7c <sprintf>
 8005cb8:	e7dc      	b.n	8005c74 <bridgeCommand+0x3c>
	else if(result == BOS_ERR_WrongParam)
 8005cba:	2867      	cmp	r0, #103	; 0x67
 8005cbc:	d0d5      	beq.n	8005c6a <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005cbe:	2217      	movs	r2, #23
 8005cc0:	0028      	movs	r0, r5
 8005cc2:	4906      	ldr	r1, [pc, #24]	; (8005cdc <bridgeCommand+0xa4>)
 8005cc4:	f00d ff60 	bl	8013b88 <memcpy>
	return pdFALSE;
 8005cc8:	e7d4      	b.n	8005c74 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005cca:	3001      	adds	r0, #1
 8005ccc:	f00d fc9d 	bl	801360a <atol>
	else if(result == BOS_ERR_WrongParam)
 8005cd0:	e7cb      	b.n	8005c6a <bridgeCommand+0x32>
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	0801b204 	.word	0x0801b204
 8005cd8:	0801b254 	.word	0x0801b254
 8005cdc:	0801b278 	.word	0x0801b278

08005ce0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce2:	46d6      	mov	lr, sl
 8005ce4:	4646      	mov	r6, r8
 8005ce6:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005ce8:	2500      	movs	r5, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cea:	b5c0      	push	{r6, r7, lr}
 8005cec:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005cee:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cf0:	0006      	movs	r6, r0
 8005cf2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005cf4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005cf6:	9501      	str	r5, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005cf8:	f008 fa46 	bl	800e188 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005cfc:	f00d fc7f 	bl	80135fe <atoi>
 8005d00:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005d02:	2c00      	cmp	r4, #0
 8005d04:	d003      	beq.n	8005d0e <delSnipCommand+0x2e>
 8005d06:	4f2c      	ldr	r7, [pc, #176]	; (8005db8 <delSnipCommand+0xd8>)
 8005d08:	783b      	ldrb	r3, [r7, #0]
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	d20b      	bcs.n	8005d26 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d0e:	2223      	movs	r2, #35	; 0x23
 8005d10:	0030      	movs	r0, r6
 8005d12:	492a      	ldr	r1, [pc, #168]	; (8005dbc <delSnipCommand+0xdc>)
 8005d14:	f00d ff38 	bl	8013b88 <memcpy>
}
 8005d18:	2000      	movs	r0, #0
 8005d1a:	b002      	add	sp, #8
 8005d1c:	bce0      	pop	{r5, r6, r7}
 8005d1e:	46ba      	mov	sl, r7
 8005d20:	46b1      	mov	r9, r6
 8005d22:	46a8      	mov	r8, r5
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005d26:	23ff      	movs	r3, #255	; 0xff
 8005d28:	4003      	ands	r3, r0
 8005d2a:	469a      	mov	sl, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	0098      	lsls	r0, r3, #2
 8005d30:	18c0      	adds	r0, r0, r3
 8005d32:	4b23      	ldr	r3, [pc, #140]	; (8005dc0 <delSnipCommand+0xe0>)
 8005d34:	0080      	lsls	r0, r0, #2
 8005d36:	4699      	mov	r9, r3
 8005d38:	4680      	mov	r8, r0
 8005d3a:	44c8      	add	r8, r9
 8005d3c:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005d3e:	3002      	adds	r0, #2
 8005d40:	2204      	movs	r2, #4
 8005d42:	2100      	movs	r1, #0
		snippets[index - 1].cond.conditionType =0;
 8005d44:	801d      	strh	r5, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005d46:	4448      	add	r0, r9
 8005d48:	f00d ff27 	bl	8013b9a <memset>
		snippets[index - 1].state = false;
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	2300      	movs	r3, #0
		free(snippets[index - 1].cmd);
 8005d50:	68d0      	ldr	r0, [r2, #12]
		snippets[index - 1].state = false;
 8005d52:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 8005d54:	f00d fcee 	bl	8013734 <free>
		snippets[index - 1].cmd = NULL;
 8005d58:	4643      	mov	r3, r8
 8005d5a:	60dd      	str	r5, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d5c:	783b      	ldrb	r3, [r7, #0]
 8005d5e:	4698      	mov	r8, r3
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d91d      	bls.n	8005da0 <delSnipCommand+0xc0>
 8005d64:	4653      	mov	r3, sl
 8005d66:	009d      	lsls	r5, r3, #2
 8005d68:	4455      	add	r5, sl
 8005d6a:	00ad      	lsls	r5, r5, #2
 8005d6c:	444d      	add	r5, r9
 8005d6e:	e004      	b.n	8005d7a <delSnipCommand+0x9a>
 8005d70:	3401      	adds	r4, #1
 8005d72:	b2e4      	uxtb	r4, r4
 8005d74:	3514      	adds	r5, #20
 8005d76:	45a0      	cmp	r8, r4
 8005d78:	d012      	beq.n	8005da0 <delSnipCommand+0xc0>
			if(snippets[s].cond.conditionType){
 8005d7a:	782b      	ldrb	r3, [r5, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f7      	beq.n	8005d70 <delSnipCommand+0x90>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005d80:	0028      	movs	r0, r5
 8005d82:	0029      	movs	r1, r5
 8005d84:	2214      	movs	r2, #20
 8005d86:	3814      	subs	r0, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d88:	3401      	adds	r4, #1
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005d8a:	f00d fefd 	bl	8013b88 <memcpy>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d8e:	b2e4      	uxtb	r4, r4
				memset(&snippets[s],0,sizeof(snippet_t));
 8005d90:	0028      	movs	r0, r5
 8005d92:	2214      	movs	r2, #20
 8005d94:	2100      	movs	r1, #0
 8005d96:	f00d ff00 	bl	8013b9a <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d9a:	3514      	adds	r5, #20
 8005d9c:	45a0      	cmp	r8, r4
 8005d9e:	d1ec      	bne.n	8005d7a <delSnipCommand+0x9a>
		--numOfRecordedSnippets;
 8005da0:	4643      	mov	r3, r8
 8005da2:	3b01      	subs	r3, #1
 8005da4:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005da6:	f004 faeb 	bl	800a380 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005daa:	2236      	movs	r2, #54	; 0x36
 8005dac:	0030      	movs	r0, r6
 8005dae:	4905      	ldr	r1, [pc, #20]	; (8005dc4 <delSnipCommand+0xe4>)
 8005db0:	f00d feea 	bl	8013b88 <memcpy>
 8005db4:	e7b0      	b.n	8005d18 <delSnipCommand+0x38>
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	200017ac 	.word	0x200017ac
 8005dbc:	0801b2c8 	.word	0x0801b2c8
 8005dc0:	200017b0 	.word	0x200017b0
 8005dc4:	0801b290 	.word	0x0801b290

08005dc8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dc8:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005dca:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dcc:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dce:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dd0:	0004      	movs	r4, r0
 8005dd2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dd4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005dd6:	9501      	str	r5, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dd8:	f008 f9d6 	bl	800e188 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ddc:	f00d fc0f 	bl	80135fe <atoi>
 8005de0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <pauseSnipCommand+0x26>
 8005de6:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <pauseSnipCommand+0x58>)
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d207      	bcs.n	8005dfe <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005dee:	2223      	movs	r2, #35	; 0x23
 8005df0:	0020      	movs	r0, r4
 8005df2:	490c      	ldr	r1, [pc, #48]	; (8005e24 <pauseSnipCommand+0x5c>)
 8005df4:	f00d fec8 	bl	8013b88 <memcpy>
}
 8005df8:	2000      	movs	r0, #0
 8005dfa:	b003      	add	sp, #12
 8005dfc:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 8005dfe:	23ff      	movs	r3, #255	; 0xff
 8005e00:	4018      	ands	r0, r3
 8005e02:	3801      	subs	r0, #1
 8005e04:	0083      	lsls	r3, r0, #2
 8005e06:	1818      	adds	r0, r3, r0
 8005e08:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <pauseSnipCommand+0x60>)
 8005e0a:	0080      	lsls	r0, r0, #2
 8005e0c:	1818      	adds	r0, r3, r0
 8005e0e:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005e10:	f004 fab6 	bl	800a380 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e14:	2235      	movs	r2, #53	; 0x35
 8005e16:	0020      	movs	r0, r4
 8005e18:	4904      	ldr	r1, [pc, #16]	; (8005e2c <pauseSnipCommand+0x64>)
 8005e1a:	f00d feb5 	bl	8013b88 <memcpy>
 8005e1e:	e7eb      	b.n	8005df8 <pauseSnipCommand+0x30>
 8005e20:	200017ac 	.word	0x200017ac
 8005e24:	0801b2c8 	.word	0x0801b2c8
 8005e28:	200017b0 	.word	0x200017b0
 8005e2c:	0801b2ec 	.word	0x0801b2ec

08005e30 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005e30:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e32:	b510      	push	{r4, lr}
 8005e34:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e36:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e38:	0004      	movs	r4, r0
 8005e3a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e3c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005e3e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e40:	f008 f9a2 	bl	800e188 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005e44:	f00d fbdb 	bl	80135fe <atoi>
 8005e48:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <actSnipCommand+0x26>
 8005e4e:	4a0f      	ldr	r2, [pc, #60]	; (8005e8c <actSnipCommand+0x5c>)
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d207      	bcs.n	8005e66 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e56:	2223      	movs	r2, #35	; 0x23
 8005e58:	0020      	movs	r0, r4
 8005e5a:	490d      	ldr	r1, [pc, #52]	; (8005e90 <actSnipCommand+0x60>)
 8005e5c:	f00d fe94 	bl	8013b88 <memcpy>
}
 8005e60:	2000      	movs	r0, #0
 8005e62:	b002      	add	sp, #8
 8005e64:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005e66:	23ff      	movs	r3, #255	; 0xff
 8005e68:	4018      	ands	r0, r3
 8005e6a:	3801      	subs	r0, #1
 8005e6c:	0083      	lsls	r3, r0, #2
 8005e6e:	1818      	adds	r0, r3, r0
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <actSnipCommand+0x64>)
 8005e72:	0080      	lsls	r0, r0, #2
 8005e74:	1818      	adds	r0, r3, r0
 8005e76:	2301      	movs	r3, #1
 8005e78:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005e7a:	f004 fa81 	bl	800a380 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e7e:	2238      	movs	r2, #56	; 0x38
 8005e80:	0020      	movs	r0, r4
 8005e82:	4905      	ldr	r1, [pc, #20]	; (8005e98 <actSnipCommand+0x68>)
 8005e84:	f00d fe80 	bl	8013b88 <memcpy>
 8005e88:	e7ea      	b.n	8005e60 <actSnipCommand+0x30>
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	200017ac 	.word	0x200017ac
 8005e90:	0801b2c8 	.word	0x0801b2c8
 8005e94:	200017b0 	.word	0x200017b0
 8005e98:	0801b324 	.word	0x0801b324

08005e9c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	46de      	mov	lr, fp
 8005ea0:	4645      	mov	r5, r8
 8005ea2:	4657      	mov	r7, sl
 8005ea4:	464e      	mov	r6, r9
 8005ea6:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005ea8:	4a72      	ldr	r2, [pc, #456]	; (8006074 <snipCommand+0x1d8>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005eaa:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005eac:	ab06      	add	r3, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005eae:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 8005eb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005eb2:	c313      	stmia	r3!, {r0, r1, r4}
 8005eb4:	8812      	ldrh	r2, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005eb6:	4970      	ldr	r1, [pc, #448]	; (8006078 <snipCommand+0x1dc>)
	char status[2][7] ={"Paused", "Active"};
 8005eb8:	801a      	strh	r2, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005eba:	4b70      	ldr	r3, [pc, #448]	; (800607c <snipCommand+0x1e0>)
 8005ebc:	2237      	movs	r2, #55	; 0x37
 8005ebe:	7818      	ldrb	r0, [r3, #0]
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	425b      	negs	r3, r3
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	3333      	adds	r3, #51	; 0x33
 8005ec8:	f007 fdd2 	bl	800da70 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ecc:	4b6c      	ldr	r3, [pc, #432]	; (8006080 <snipCommand+0x1e4>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d044      	beq.n	8005f5e <snipCommand+0xc2>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4699      	mov	r9, r3
 8005ed8:	4c6a      	ldr	r4, [pc, #424]	; (8006084 <snipCommand+0x1e8>)
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005eda:	4f6b      	ldr	r7, [pc, #428]	; (8006088 <snipCommand+0x1ec>)
 8005edc:	464b      	mov	r3, r9
 8005ede:	46ca      	mov	sl, r9
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	4699      	mov	r9, r3
		if(snippets[s].cond.conditionType)
 8005ee6:	4653      	mov	r3, sl
 8005ee8:	009e      	lsls	r6, r3, #2
 8005eea:	18f1      	adds	r1, r6, r3
 8005eec:	008b      	lsls	r3, r1, #2
 8005eee:	4698      	mov	r8, r3
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4b66      	ldr	r3, [pc, #408]	; (800608c <snipCommand+0x1f0>)
 8005ef4:	5c9b      	ldrb	r3, [r3, r2]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d13e      	bne.n	8005f78 <snipCommand+0xdc>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005efa:	4b64      	ldr	r3, [pc, #400]	; (800608c <snipCommand+0x1f0>)
 8005efc:	4456      	add	r6, sl
 8005efe:	469c      	mov	ip, r3
 8005f00:	00b6      	lsls	r6, r6, #2
 8005f02:	4466      	add	r6, ip
 8005f04:	e00d      	b.n	8005f22 <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005f06:	002a      	movs	r2, r5
 8005f08:	0039      	movs	r1, r7
 8005f0a:	0023      	movs	r3, r4
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	f00e f835 	bl	8013f7c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005f12:	0020      	movs	r0, r4
 8005f14:	f7fa f900 	bl	8000118 <strlen>
 8005f18:	2100      	movs	r1, #0
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	f00d fe3c 	bl	8013b9a <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005f22:	0021      	movs	r1, r4
 8005f24:	68f0      	ldr	r0, [r6, #12]
 8005f26:	f7ff fb4f 	bl	80055c8 <ParseSnippetCommand>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d1eb      	bne.n	8005f06 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005f2e:	0028      	movs	r0, r5
 8005f30:	f7fa f8f2 	bl	8000118 <strlen>
 8005f34:	220c      	movs	r2, #12
 8005f36:	0006      	movs	r6, r0
 8005f38:	4955      	ldr	r1, [pc, #340]	; (8006090 <snipCommand+0x1f4>)
 8005f3a:	1828      	adds	r0, r5, r0
 8005f3c:	f00d fe24 	bl	8013b88 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005f40:	4b4e      	ldr	r3, [pc, #312]	; (800607c <snipCommand+0x1e0>)
 8005f42:	360b      	adds	r6, #11
 8005f44:	7818      	ldrb	r0, [r3, #0]
 8005f46:	2301      	movs	r3, #1
 8005f48:	425b      	negs	r3, r3
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	0029      	movs	r1, r5
 8005f4e:	3333      	adds	r3, #51	; 0x33
 8005f50:	b2b2      	uxth	r2, r6
 8005f52:	f007 fd8d 	bl	800da70 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005f56:	4b4a      	ldr	r3, [pc, #296]	; (8006080 <snipCommand+0x1e4>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	454b      	cmp	r3, r9
 8005f5c:	d8be      	bhi.n	8005edc <snipCommand+0x40>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005f5e:	22b5      	movs	r2, #181	; 0xb5
 8005f60:	0028      	movs	r0, r5
 8005f62:	494c      	ldr	r1, [pc, #304]	; (8006094 <snipCommand+0x1f8>)
 8005f64:	f00d fe10 	bl	8013b88 <memcpy>
}
 8005f68:	2000      	movs	r0, #0
 8005f6a:	b00b      	add	sp, #44	; 0x2c
 8005f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8005f6e:	46bb      	mov	fp, r7
 8005f70:	46b2      	mov	sl, r6
 8005f72:	46a9      	mov	r9, r5
 8005f74:	46a0      	mov	r8, r4
 8005f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005f78:	4b44      	ldr	r3, [pc, #272]	; (800608c <snipCommand+0x1f0>)
 8005f7a:	0028      	movs	r0, r5
 8005f7c:	4443      	add	r3, r8
 8005f7e:	7c1a      	ldrb	r2, [r3, #16]
 8005f80:	469b      	mov	fp, r3
 8005f82:	00d3      	lsls	r3, r2, #3
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	aa06      	add	r2, sp, #24
 8005f88:	4694      	mov	ip, r2
 8005f8a:	4943      	ldr	r1, [pc, #268]	; (8006098 <snipCommand+0x1fc>)
 8005f8c:	464a      	mov	r2, r9
 8005f8e:	4463      	add	r3, ip
 8005f90:	f00d fff4 	bl	8013f7c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005f94:	4642      	mov	r2, r8
 8005f96:	4b3d      	ldr	r3, [pc, #244]	; (800608c <snipCommand+0x1f0>)
 8005f98:	5c9b      	ldrb	r3, [r3, r2]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d114      	bne.n	8005fc8 <snipCommand+0x12c>
				switch(snippets[s].cond.buffer1[1]){
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	2b0b      	cmp	r3, #11
 8005fa4:	d83a      	bhi.n	800601c <snipCommand+0x180>
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d855      	bhi.n	8006056 <snipCommand+0x1ba>
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d048      	beq.n	8006040 <snipCommand+0x1a4>
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d1a3      	bne.n	8005efa <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005fb2:	465a      	mov	r2, fp
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	68d2      	ldr	r2, [r2, #12]
 8005fb8:	789b      	ldrb	r3, [r3, #2]
 8005fba:	0028      	movs	r0, r5
 8005fbc:	9200      	str	r2, [sp, #0]
 8005fbe:	4937      	ldr	r1, [pc, #220]	; (800609c <snipCommand+0x200>)
 8005fc0:	002a      	movs	r2, r5
 8005fc2:	f00d ffdb 	bl	8013f7c <sprintf>
						break;
 8005fc6:	e798      	b.n	8005efa <snipCommand+0x5e>
		switch(snippets[s].cond.conditionType){
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d196      	bne.n	8005efa <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005fcc:	4b2f      	ldr	r3, [pc, #188]	; (800608c <snipCommand+0x1f0>)
 8005fce:	4641      	mov	r1, r8
 8005fd0:	469c      	mov	ip, r3
 8005fd2:	3106      	adds	r1, #6
 8005fd4:	4461      	add	r1, ip
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	a805      	add	r0, sp, #20
 8005fda:	f00d fdd5 	bl	8013b88 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005fde:	465b      	mov	r3, fp
 8005fe0:	78da      	ldrb	r2, [r3, #3]
 8005fe2:	9805      	ldr	r0, [sp, #20]
 8005fe4:	3a01      	subs	r2, #1
 8005fe6:	0053      	lsls	r3, r2, #1
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	4a2d      	ldr	r2, [pc, #180]	; (80060a0 <snipCommand+0x204>)
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4698      	mov	r8, r3
 8005ff4:	f7fc ff20 	bl	8002e38 <__aeabi_f2d>
 8005ff8:	465b      	mov	r3, fp
 8005ffa:	9002      	str	r0, [sp, #8]
 8005ffc:	9103      	str	r1, [sp, #12]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <snipCommand+0x1d8>)
 8006002:	3b01      	subs	r3, #1
 8006004:	0059      	lsls	r1, r3, #1
 8006006:	3210      	adds	r2, #16
 8006008:	18cb      	adds	r3, r1, r3
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	002a      	movs	r2, r5
 8006010:	4643      	mov	r3, r8
 8006012:	0028      	movs	r0, r5
 8006014:	4923      	ldr	r1, [pc, #140]	; (80060a4 <snipCommand+0x208>)
 8006016:	f00d ffb1 	bl	8013f7c <sprintf>
				break;
 800601a:	e76e      	b.n	8005efa <snipCommand+0x5e>
 800601c:	3b0c      	subs	r3, #12
 800601e:	2b02      	cmp	r3, #2
 8006020:	d900      	bls.n	8006024 <snipCommand+0x188>
 8006022:	e76a      	b.n	8005efa <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8006024:	465a      	mov	r2, fp
 8006026:	465b      	mov	r3, fp
 8006028:	68d2      	ldr	r2, [r2, #12]
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	9201      	str	r2, [sp, #4]
 800602e:	465a      	mov	r2, fp
 8006030:	7912      	ldrb	r2, [r2, #4]
 8006032:	0028      	movs	r0, r5
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	491c      	ldr	r1, [pc, #112]	; (80060a8 <snipCommand+0x20c>)
 8006038:	002a      	movs	r2, r5
 800603a:	f00d ff9f 	bl	8013f7c <sprintf>
						break;
 800603e:	e75c      	b.n	8005efa <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8006040:	465a      	mov	r2, fp
 8006042:	465b      	mov	r3, fp
 8006044:	68d2      	ldr	r2, [r2, #12]
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	0028      	movs	r0, r5
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	4917      	ldr	r1, [pc, #92]	; (80060ac <snipCommand+0x210>)
 800604e:	002a      	movs	r2, r5
 8006050:	f00d ff94 	bl	8013f7c <sprintf>
						break;
 8006054:	e751      	b.n	8005efa <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8006056:	465a      	mov	r2, fp
 8006058:	465b      	mov	r3, fp
 800605a:	68d2      	ldr	r2, [r2, #12]
 800605c:	789b      	ldrb	r3, [r3, #2]
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	465a      	mov	r2, fp
 8006062:	7912      	ldrb	r2, [r2, #4]
 8006064:	0028      	movs	r0, r5
 8006066:	9200      	str	r2, [sp, #0]
 8006068:	4911      	ldr	r1, [pc, #68]	; (80060b0 <snipCommand+0x214>)
 800606a:	002a      	movs	r2, r5
 800606c:	f00d ff86 	bl	8013f7c <sprintf>
						break;
 8006070:	e743      	b.n	8005efa <snipCommand+0x5e>
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	08019e80 	.word	0x08019e80
 8006078:	0801b35c 	.word	0x0801b35c
 800607c:	20000c60 	.word	0x20000c60
 8006080:	200017ac 	.word	0x200017ac
 8006084:	20001910 	.word	0x20001910
 8006088:	0801b410 	.word	0x0801b410
 800608c:	200017b0 	.word	0x200017b0
 8006090:	0801b418 	.word	0x0801b418
 8006094:	0801b424 	.word	0x0801b424
 8006098:	0801b394 	.word	0x0801b394
 800609c:	0801b3b4 	.word	0x0801b3b4
 80060a0:	20000098 	.word	0x20000098
 80060a4:	0801b400 	.word	0x0801b400
 80060a8:	0801b3e4 	.word	0x0801b3e4
 80060ac:	0801b3a0 	.word	0x0801b3a0
 80060b0:	0801b3cc 	.word	0x0801b3cc

080060b4 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060b4:	b510      	push	{r4, lr}
 80060b6:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 80060b8:	f009 fda0 	bl	800fbfc <HAL_GetDEVID>
	switch(dev){
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <idcodeCommand+0x78>)
 80060be:	0403      	lsls	r3, r0, #16
 80060c0:	4694      	mov	ip, r2
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	4463      	add	r3, ip
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d803      	bhi.n	80060d2 <idcodeCommand+0x1e>
 80060ca:	4a19      	ldr	r2, [pc, #100]	; (8006130 <idcodeCommand+0x7c>)
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	58d3      	ldr	r3, [r2, r3]
 80060d0:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 80060d2:	0020      	movs	r0, r4
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <idcodeCommand+0x80>)
 80060d6:	4918      	ldr	r1, [pc, #96]	; (8006138 <idcodeCommand+0x84>)
 80060d8:	f00d ff50 	bl	8013f7c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 80060dc:	f009 fd88 	bl	800fbf0 <HAL_GetREVID>
 80060e0:	0022      	movs	r2, r4
 80060e2:	0b03      	lsrs	r3, r0, #12
 80060e4:	4915      	ldr	r1, [pc, #84]	; (800613c <idcodeCommand+0x88>)
 80060e6:	0020      	movs	r0, r4
 80060e8:	f00d ff48 	bl	8013f7c <sprintf>
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 80060f0:	0020      	movs	r0, r4
 80060f2:	4a13      	ldr	r2, [pc, #76]	; (8006140 <idcodeCommand+0x8c>)
 80060f4:	4910      	ldr	r1, [pc, #64]	; (8006138 <idcodeCommand+0x84>)
 80060f6:	f00d ff41 	bl	8013f7c <sprintf>
			break;
 80060fa:	e7ef      	b.n	80060dc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80060fc:	0020      	movs	r0, r4
 80060fe:	4a11      	ldr	r2, [pc, #68]	; (8006144 <idcodeCommand+0x90>)
 8006100:	490d      	ldr	r1, [pc, #52]	; (8006138 <idcodeCommand+0x84>)
 8006102:	f00d ff3b 	bl	8013f7c <sprintf>
			break;
 8006106:	e7e9      	b.n	80060dc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006108:	0020      	movs	r0, r4
 800610a:	4a0f      	ldr	r2, [pc, #60]	; (8006148 <idcodeCommand+0x94>)
 800610c:	490a      	ldr	r1, [pc, #40]	; (8006138 <idcodeCommand+0x84>)
 800610e:	f00d ff35 	bl	8013f7c <sprintf>
			break;
 8006112:	e7e3      	b.n	80060dc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8006114:	0020      	movs	r0, r4
 8006116:	4a0d      	ldr	r2, [pc, #52]	; (800614c <idcodeCommand+0x98>)
 8006118:	4907      	ldr	r1, [pc, #28]	; (8006138 <idcodeCommand+0x84>)
 800611a:	f00d ff2f 	bl	8013f7c <sprintf>
			break;
 800611e:	e7dd      	b.n	80060dc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8006120:	0020      	movs	r0, r4
 8006122:	4a0b      	ldr	r2, [pc, #44]	; (8006150 <idcodeCommand+0x9c>)
 8006124:	4904      	ldr	r1, [pc, #16]	; (8006138 <idcodeCommand+0x84>)
 8006126:	f00d ff29 	bl	8013f7c <sprintf>
			break;
 800612a:	e7d7      	b.n	80060dc <idcodeCommand+0x28>
 800612c:	fffffbc0 	.word	0xfffffbc0
 8006130:	08019e5c 	.word	0x08019e5c
 8006134:	0801b52c 	.word	0x0801b52c
 8006138:	0801b4e8 	.word	0x0801b4e8
 800613c:	0801b534 	.word	0x0801b534
 8006140:	0801b508 	.word	0x0801b508
 8006144:	0801b520 	.word	0x0801b520
 8006148:	0801b4dc 	.word	0x0801b4dc
 800614c:	0801b4fc 	.word	0x0801b4fc
 8006150:	0801b514 	.word	0x0801b514

08006154 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8006158:	220e      	movs	r2, #14
 800615a:	4911      	ldr	r1, [pc, #68]	; (80061a0 <uuidCommand+0x4c>)
 800615c:	f00d fd14 	bl	8013b88 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8006160:	4d10      	ldr	r5, [pc, #64]	; (80061a4 <uuidCommand+0x50>)
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <uuidCommand+0x54>)
 8006164:	0029      	movs	r1, r5
 8006166:	0022      	movs	r2, r4
 8006168:	0020      	movs	r0, r4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f00d ff06 	bl	8013f7c <sprintf>
 8006170:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <uuidCommand+0x58>)
 8006172:	0029      	movs	r1, r5
 8006174:	0022      	movs	r2, r4
 8006176:	0020      	movs	r0, r4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f00d feff 	bl	8013f7c <sprintf>
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <uuidCommand+0x5c>)
 8006180:	0029      	movs	r1, r5
 8006182:	0022      	movs	r2, r4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0020      	movs	r0, r4
 8006188:	f00d fef8 	bl	8013f7c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 800618c:	0020      	movs	r0, r4
 800618e:	f7f9 ffc3 	bl	8000118 <strlen>
 8006192:	2203      	movs	r2, #3
 8006194:	4907      	ldr	r1, [pc, #28]	; (80061b4 <uuidCommand+0x60>)
 8006196:	1820      	adds	r0, r4, r0
 8006198:	f00d fcf6 	bl	8013b88 <memcpy>
}
 800619c:	2000      	movs	r0, #0
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	0801b54c 	.word	0x0801b54c
 80061a4:	0801b55c 	.word	0x0801b55c
 80061a8:	1ffff7ac 	.word	0x1ffff7ac
 80061ac:	1ffff7b0 	.word	0x1ffff7b0
 80061b0:	1ffff7b4 	.word	0x1ffff7b4
 80061b4:	0801c5a0 	.word	0x0801c5a0

080061b8 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061b8:	b510      	push	{r4, lr}
 80061ba:	0004      	movs	r4, r0
	GetTimeDate();
 80061bc:	f007 fa34 	bl	800d628 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80061c0:	f7fe fc52 	bl	8004a68 <GetDateString>
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <dateCommand+0x1c>)
 80061c6:	0002      	movs	r2, r0
 80061c8:	0020      	movs	r0, r4
 80061ca:	f00d fed7 	bl	8013f7c <sprintf>
}
 80061ce:	2000      	movs	r0, #0
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	0801b564 	.word	0x0801b564

080061d8 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061da:	46ce      	mov	lr, r9
 80061dc:	4647      	mov	r7, r8
 80061de:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80061e0:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061e6:	466a      	mov	r2, sp
 80061e8:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061ea:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061ec:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061f2:	f007 ffc9 	bl	800e188 <FreeRTOS_CLIGetParameter>
 80061f6:	4b6c      	ldr	r3, [pc, #432]	; (80063a8 <getCommand+0x1d0>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80061f8:	2204      	movs	r2, #4
 80061fa:	496c      	ldr	r1, [pc, #432]	; (80063ac <getCommand+0x1d4>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061fc:	0004      	movs	r4, r0
 80061fe:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006200:	f00d feff 	bl	8014002 <strncmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	d14d      	bne.n	80062a4 <getCommand+0xcc>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006208:	9b00      	ldr	r3, [sp, #0]
 800620a:	1d27      	adds	r7, r4, #4
 800620c:	1f1e      	subs	r6, r3, #4
 800620e:	0032      	movs	r2, r6
 8006210:	0038      	movs	r0, r7
 8006212:	4967      	ldr	r1, [pc, #412]	; (80063b0 <getCommand+0x1d8>)
 8006214:	f00d fef5 	bl	8014002 <strncmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	d10e      	bne.n	800623a <getCommand+0x62>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 800621c:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <getCommand+0x1dc>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b60      	cmp	r3, #96	; 0x60
 8006222:	d05d      	beq.n	80062e0 <getCommand+0x108>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006224:	2b20      	cmp	r3, #32
 8006226:	d055      	beq.n	80062d4 <getCommand+0xfc>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006228:	2b00      	cmp	r3, #0
 800622a:	d100      	bne.n	800622e <getCommand+0x56>
 800622c:	e099      	b.n	8006362 <getCommand+0x18a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800622e:	0022      	movs	r2, r4
 8006230:	0028      	movs	r0, r5
 8006232:	4961      	ldr	r1, [pc, #388]	; (80063b8 <getCommand+0x1e0>)
 8006234:	f00d fea2 	bl	8013f7c <sprintf>
 8006238:	e040      	b.n	80062bc <getCommand+0xe4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800623a:	0032      	movs	r2, r6
 800623c:	0038      	movs	r0, r7
 800623e:	495f      	ldr	r1, [pc, #380]	; (80063bc <getCommand+0x1e4>)
 8006240:	f00d fedf 	bl	8014002 <strncmp>
 8006244:	2800      	cmp	r0, #0
 8006246:	d03f      	beq.n	80062c8 <getCommand+0xf0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006248:	0032      	movs	r2, r6
 800624a:	0038      	movs	r0, r7
 800624c:	495c      	ldr	r1, [pc, #368]	; (80063c0 <getCommand+0x1e8>)
 800624e:	f00d fed8 	bl	8014002 <strncmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	d100      	bne.n	8006258 <getCommand+0x80>
 8006256:	e091      	b.n	800637c <getCommand+0x1a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006258:	0032      	movs	r2, r6
 800625a:	0038      	movs	r0, r7
 800625c:	4959      	ldr	r1, [pc, #356]	; (80063c4 <getCommand+0x1ec>)
 800625e:	f00d fed0 	bl	8014002 <strncmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	d100      	bne.n	8006268 <getCommand+0x90>
 8006266:	e090      	b.n	800638a <getCommand+0x1b2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006268:	0032      	movs	r2, r6
 800626a:	0038      	movs	r0, r7
 800626c:	4956      	ldr	r1, [pc, #344]	; (80063c8 <getCommand+0x1f0>)
 800626e:	f00d fec8 	bl	8014002 <strncmp>
 8006272:	2800      	cmp	r0, #0
 8006274:	d100      	bne.n	8006278 <getCommand+0xa0>
 8006276:	e07a      	b.n	800636e <getCommand+0x196>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006278:	0032      	movs	r2, r6
 800627a:	0038      	movs	r0, r7
 800627c:	4953      	ldr	r1, [pc, #332]	; (80063cc <getCommand+0x1f4>)
 800627e:	f00d fec0 	bl	8014002 <strncmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	d100      	bne.n	8006288 <getCommand+0xb0>
 8006286:	e087      	b.n	8006398 <getCommand+0x1c0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006288:	0032      	movs	r2, r6
 800628a:	0038      	movs	r0, r7
 800628c:	4950      	ldr	r1, [pc, #320]	; (80063d0 <getCommand+0x1f8>)
 800628e:	f00d feb8 	bl	8014002 <strncmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	d10d      	bne.n	80062b2 <getCommand+0xda>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006296:	4b4f      	ldr	r3, [pc, #316]	; (80063d4 <getCommand+0x1fc>)
 8006298:	0028      	movs	r0, r5
 800629a:	795a      	ldrb	r2, [r3, #5]
 800629c:	494e      	ldr	r1, [pc, #312]	; (80063d8 <getCommand+0x200>)
 800629e:	f00d fe6d 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80062a2:	e00b      	b.n	80062bc <getCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80062a4:	2205      	movs	r2, #5
 80062a6:	0020      	movs	r0, r4
 80062a8:	494c      	ldr	r1, [pc, #304]	; (80063dc <getCommand+0x204>)
 80062aa:	f00d feaa 	bl	8014002 <strncmp>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d01c      	beq.n	80062ec <getCommand+0x114>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80062b2:	2213      	movs	r2, #19
 80062b4:	0028      	movs	r0, r5
 80062b6:	494a      	ldr	r1, [pc, #296]	; (80063e0 <getCommand+0x208>)
 80062b8:	f00d fc66 	bl	8013b88 <memcpy>
}
 80062bc:	2000      	movs	r0, #0
 80062be:	b003      	add	sp, #12
 80062c0:	bcc0      	pop	{r6, r7}
 80062c2:	46b9      	mov	r9, r7
 80062c4:	46b0      	mov	r8, r6
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(BOSMessaging.trace == TRACE_BOTH)
 80062c8:	4b3a      	ldr	r3, [pc, #232]	; (80063b4 <getCommand+0x1dc>)
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d007      	beq.n	80062e0 <getCommand+0x108>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d1a9      	bne.n	8006228 <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80062d4:	0028      	movs	r0, r5
 80062d6:	4a43      	ldr	r2, [pc, #268]	; (80063e4 <getCommand+0x20c>)
 80062d8:	4943      	ldr	r1, [pc, #268]	; (80063e8 <getCommand+0x210>)
 80062da:	f00d fe4f 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80062de:	e7ed      	b.n	80062bc <getCommand+0xe4>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80062e0:	0028      	movs	r0, r5
 80062e2:	4a42      	ldr	r2, [pc, #264]	; (80063ec <getCommand+0x214>)
 80062e4:	4940      	ldr	r1, [pc, #256]	; (80063e8 <getCommand+0x210>)
 80062e6:	f00d fe49 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80062ea:	e7e7      	b.n	80062bc <getCommand+0xe4>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062ec:	0030      	movs	r0, r6
 80062ee:	2102      	movs	r1, #2
 80062f0:	aa01      	add	r2, sp, #4
 80062f2:	f007 ff49 	bl	800e188 <FreeRTOS_CLIGetParameter>
 80062f6:	2400      	movs	r4, #0
 80062f8:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 80062fa:	4e3d      	ldr	r6, [pc, #244]	; (80063f0 <getCommand+0x218>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80062fc:	0031      	movs	r1, r6
 80062fe:	0038      	movs	r0, r7
 8006300:	f7f9 ff00 	bl	8000104 <strcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	d009      	beq.n	800631c <getCommand+0x144>
		for(i =0; i < MaxNumOfGroups; i++){
 8006308:	3401      	adds	r4, #1
 800630a:	360a      	adds	r6, #10
 800630c:	2c0a      	cmp	r4, #10
 800630e:	d1f5      	bne.n	80062fc <getCommand+0x124>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006310:	003a      	movs	r2, r7
 8006312:	0028      	movs	r0, r5
 8006314:	4937      	ldr	r1, [pc, #220]	; (80063f4 <getCommand+0x21c>)
 8006316:	f00d fe31 	bl	8013f7c <sprintf>
			return pdFALSE;
 800631a:	e7cf      	b.n	80062bc <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800631c:	003a      	movs	r2, r7
 800631e:	0028      	movs	r0, r5
 8006320:	4935      	ldr	r1, [pc, #212]	; (80063f8 <getCommand+0x220>)
 8006322:	f00d fe2b 	bl	8013f7c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8006326:	4f35      	ldr	r7, [pc, #212]	; (80063fc <getCommand+0x224>)
 8006328:	783b      	ldrb	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0c6      	beq.n	80062bc <getCommand+0xe4>
 800632e:	2601      	movs	r6, #1
 8006330:	4b33      	ldr	r3, [pc, #204]	; (8006400 <getCommand+0x228>)
 8006332:	40a6      	lsls	r6, r4
 8006334:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006336:	4b33      	ldr	r3, [pc, #204]	; (8006404 <getCommand+0x22c>)
			for(j =1; j <= N; j++)						// N modules
 8006338:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800633a:	4699      	mov	r9, r3
 800633c:	e004      	b.n	8006348 <getCommand+0x170>
			for(j =1; j <= N; j++)						// N modules
 800633e:	3401      	adds	r4, #1
 8006340:	783b      	ldrb	r3, [r7, #0]
 8006342:	b2e4      	uxtb	r4, r4
 8006344:	42a3      	cmp	r3, r4
 8006346:	d3b9      	bcc.n	80062bc <getCommand+0xe4>
				if(InGroup(j,i)){
 8006348:	4643      	mov	r3, r8
 800634a:	1e62      	subs	r2, r4, #1
 800634c:	0052      	lsls	r2, r2, #1
 800634e:	5a9b      	ldrh	r3, [r3, r2]
 8006350:	421e      	tst	r6, r3
 8006352:	d0f4      	beq.n	800633e <getCommand+0x166>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006354:	0023      	movs	r3, r4
 8006356:	002a      	movs	r2, r5
 8006358:	4649      	mov	r1, r9
 800635a:	0028      	movs	r0, r5
 800635c:	f00d fe0e 	bl	8013f7c <sprintf>
 8006360:	e7ed      	b.n	800633e <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006362:	0028      	movs	r0, r5
 8006364:	4a28      	ldr	r2, [pc, #160]	; (8006408 <getCommand+0x230>)
 8006366:	4920      	ldr	r1, [pc, #128]	; (80063e8 <getCommand+0x210>)
 8006368:	f00d fe08 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800636c:	e7a6      	b.n	80062bc <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 800636e:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <getCommand+0x1fc>)
 8006370:	0028      	movs	r0, r5
 8006372:	885a      	ldrh	r2, [r3, #2]
 8006374:	4918      	ldr	r1, [pc, #96]	; (80063d8 <getCommand+0x200>)
 8006376:	f00d fe01 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800637a:	e79f      	b.n	80062bc <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <getCommand+0x1fc>)
 800637e:	0028      	movs	r0, r5
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	4915      	ldr	r1, [pc, #84]	; (80063d8 <getCommand+0x200>)
 8006384:	f00d fdfa 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006388:	e798      	b.n	80062bc <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <getCommand+0x1fc>)
 800638c:	0028      	movs	r0, r5
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	4911      	ldr	r1, [pc, #68]	; (80063d8 <getCommand+0x200>)
 8006392:	f00d fdf3 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006396:	e791      	b.n	80062bc <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006398:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <getCommand+0x1fc>)
 800639a:	0028      	movs	r0, r5
 800639c:	791a      	ldrb	r2, [r3, #4]
 800639e:	490e      	ldr	r1, [pc, #56]	; (80063d8 <getCommand+0x200>)
 80063a0:	f00d fdec 	bl	8013f7c <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80063a4:	e78a      	b.n	80062bc <getCommand+0xe4>
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	20001910 	.word	0x20001910
 80063ac:	0801b57c 	.word	0x0801b57c
 80063b0:	0801b584 	.word	0x0801b584
 80063b4:	20000b4c 	.word	0x20000b4c
 80063b8:	0801b618 	.word	0x0801b618
 80063bc:	0801b59c 	.word	0x0801b59c
 80063c0:	0801b5a4 	.word	0x0801b5a4
 80063c4:	0801b5b0 	.word	0x0801b5b0
 80063c8:	0801b5bc 	.word	0x0801b5bc
 80063cc:	0801b5cc 	.word	0x0801b5cc
 80063d0:	0801b5e0 	.word	0x0801b5e0
 80063d4:	20000b54 	.word	0x20000b54
 80063d8:	0801ad2c 	.word	0x0801ad2c
 80063dc:	0801b5f4 	.word	0x0801b5f4
 80063e0:	0801b604 	.word	0x0801b604
 80063e4:	0801b590 	.word	0x0801b590
 80063e8:	0801a5b8 	.word	0x0801a5b8
 80063ec:	0801a6d8 	.word	0x0801a6d8
 80063f0:	20000ae0 	.word	0x20000ae0
 80063f4:	0801b638 	.word	0x0801b638
 80063f8:	0801b654 	.word	0x0801b654
 80063fc:	20000008 	.word	0x20000008
 8006400:	20000aac 	.word	0x20000aac
 8006404:	0801b5fc 	.word	0x0801b5fc
 8006408:	0801b594 	.word	0x0801b594

0800640c <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 800640c:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006412:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006414:	0005      	movs	r5, r0
 8006416:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006418:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 800641a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800641c:	f007 feb4 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006420:	9e01      	ldr	r6, [sp, #4]
 8006422:	491f      	ldr	r1, [pc, #124]	; (80064a0 <defaultCommand+0x94>)
 8006424:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006426:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006428:	f00d fdeb 	bl	8014002 <strncmp>
 800642c:	2800      	cmp	r0, #0
 800642e:	d026      	beq.n	800647e <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006430:	0032      	movs	r2, r6
 8006432:	0020      	movs	r0, r4
 8006434:	491b      	ldr	r1, [pc, #108]	; (80064a4 <defaultCommand+0x98>)
 8006436:	f00d fde4 	bl	8014002 <strncmp>
 800643a:	2800      	cmp	r0, #0
 800643c:	d007      	beq.n	800644e <defaultCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800643e:	220f      	movs	r2, #15
 8006440:	0028      	movs	r0, r5
 8006442:	4919      	ldr	r1, [pc, #100]	; (80064a8 <defaultCommand+0x9c>)
 8006444:	f00d fba0 	bl	8013b88 <memcpy>
}
 8006448:	2000      	movs	r0, #0
 800644a:	b002      	add	sp, #8
 800644c:	bd70      	pop	{r4, r5, r6, pc}
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800644e:	2116      	movs	r1, #22
 8006450:	2200      	movs	r2, #0
 8006452:	20ff      	movs	r0, #255	; 0xff
 8006454:	f001 fff4 	bl	8008440 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006458:	2202      	movs	r2, #2
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <defaultCommand+0xa0>)
		osDelay(100);
 800645c:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 800645e:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006460:	f007 fce6 	bl	800de30 <osDelay>
		ClearEEportsDir();
 8006464:	f7fd fa82 	bl	800396c <ClearEEportsDir>
		ClearROtopology();
 8006468:	f004 f88e 	bl	800a588 <ClearROtopology>
		osDelay(100);
 800646c:	2064      	movs	r0, #100	; 0x64
 800646e:	f007 fcdf 	bl	800de30 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006472:	2240      	movs	r2, #64	; 0x40
 8006474:	0028      	movs	r0, r5
 8006476:	490e      	ldr	r1, [pc, #56]	; (80064b0 <defaultCommand+0xa4>)
 8006478:	f00d fb86 	bl	8013b88 <memcpy>
	if(result == BOS_ERR_WrongValue)
 800647c:	e7e4      	b.n	8006448 <defaultCommand+0x3c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800647e:	490d      	ldr	r1, [pc, #52]	; (80064b4 <defaultCommand+0xa8>)
 8006480:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <defaultCommand+0xac>)
 8006482:	000a      	movs	r2, r1
 8006484:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006486:	c213      	stmia	r2!, {r0, r1, r4}
 8006488:	cb13      	ldmia	r3!, {r0, r1, r4}
 800648a:	c213      	stmia	r2!, {r0, r1, r4}
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006490:	f7fd fa26 	bl	80038e0 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006494:	2227      	movs	r2, #39	; 0x27
 8006496:	0028      	movs	r0, r5
 8006498:	4908      	ldr	r1, [pc, #32]	; (80064bc <defaultCommand+0xb0>)
 800649a:	f00d fb75 	bl	8013b88 <memcpy>
	if(result == BOS_ERR_WrongValue)
 800649e:	e7d3      	b.n	8006448 <defaultCommand+0x3c>
 80064a0:	0801b668 	.word	0x0801b668
 80064a4:	0801b698 	.word	0x0801b698
 80064a8:	0801b6a0 	.word	0x0801b6a0
 80064ac:	200011ef 	.word	0x200011ef
 80064b0:	0801b6b0 	.word	0x0801b6b0
 80064b4:	20000b54 	.word	0x20000b54
 80064b8:	20000014 	.word	0x20000014
 80064bc:	0801b670 	.word	0x0801b670

080064c0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	4645      	mov	r5, r8
 80064c4:	46de      	mov	lr, fp
 80064c6:	4657      	mov	r7, sl
 80064c8:	464e      	mov	r6, r9
 80064ca:	b5e0      	push	{r5, r6, r7, lr}
 80064cc:	0016      	movs	r6, r2
 80064ce:	2700      	movs	r7, #0
 80064d0:	2300      	movs	r3, #0
 80064d2:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064d4:	2101      	movs	r1, #1
 80064d6:	aa09      	add	r2, sp, #36	; 0x24
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064d8:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064da:	0030      	movs	r0, r6
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064dc:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80064de:	9709      	str	r7, [sp, #36]	; 0x24
 80064e0:	970a      	str	r7, [sp, #40]	; 0x28
 80064e2:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80064e4:	970c      	str	r7, [sp, #48]	; 0x30
 80064e6:	970d      	str	r7, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064e8:	f007 fe4e 	bl	800e188 <FreeRTOS_CLIGetParameter>
 80064ec:	4cc9      	ldr	r4, [pc, #804]	; (8006814 <setCommand+0x354>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80064ee:	2204      	movs	r2, #4
 80064f0:	49c9      	ldr	r1, [pc, #804]	; (8006818 <setCommand+0x358>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064f2:	4680      	mov	r8, r0
 80064f4:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80064f6:	f00d fd84 	bl	8014002 <strncmp>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d100      	bne.n	8006500 <setCommand+0x40>
 80064fe:	e079      	b.n	80065f4 <setCommand+0x134>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006500:	2204      	movs	r2, #4
 8006502:	4640      	mov	r0, r8
 8006504:	49c5      	ldr	r1, [pc, #788]	; (800681c <setCommand+0x35c>)
 8006506:	f00d fd7c 	bl	8014002 <strncmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	d014      	beq.n	8006538 <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800650e:	2204      	movs	r2, #4
 8006510:	4640      	mov	r0, r8
 8006512:	49c3      	ldr	r1, [pc, #780]	; (8006820 <setCommand+0x360>)
 8006514:	f00d fd75 	bl	8014002 <strncmp>
 8006518:	2800      	cmp	r0, #0
 800651a:	d100      	bne.n	800651e <setCommand+0x5e>
 800651c:	e0d8      	b.n	80066d0 <setCommand+0x210>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800651e:	2213      	movs	r2, #19
 8006520:	0028      	movs	r0, r5
 8006522:	49c0      	ldr	r1, [pc, #768]	; (8006824 <setCommand+0x364>)
 8006524:	f00d fb30 	bl	8013b88 <memcpy>
}
 8006528:	2000      	movs	r0, #0
 800652a:	b00f      	add	sp, #60	; 0x3c
 800652c:	bcf0      	pop	{r4, r5, r6, r7}
 800652e:	46bb      	mov	fp, r7
 8006530:	46b2      	mov	sl, r6
 8006532:	46a9      	mov	r9, r5
 8006534:	46a0      	mov	r8, r4
 8006536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006538:	2102      	movs	r1, #2
 800653a:	0030      	movs	r0, r6
 800653c:	aa0a      	add	r2, sp, #40	; 0x28
 800653e:	f007 fe23 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006542:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006544:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006546:	aa0b      	add	r2, sp, #44	; 0x2c
 8006548:	0030      	movs	r0, r6
 800654a:	f007 fe1d 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800654e:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006550:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006552:	aa0c      	add	r2, sp, #48	; 0x30
 8006554:	0030      	movs	r0, r6
 8006556:	f007 fe17 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800655a:	2105      	movs	r1, #5
 800655c:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800655e:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006560:	0030      	movs	r0, r6
 8006562:	f007 fe11 	bl	800e188 <FreeRTOS_CLIGetParameter>
 8006566:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006568:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800656a:	f00d f848 	bl	80135fe <atoi>
 800656e:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006570:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006572:	4698      	mov	r8, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006574:	f00d f843 	bl	80135fe <atoi>
 8006578:	0006      	movs	r6, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800657a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800657c:	f00d f83f 	bl	80135fe <atoi>
		if(pcParameterString5 != NULL){
 8006580:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <setCommand+0xd8>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	2a61      	cmp	r2, #97	; 0x61
 800658a:	d000      	beq.n	800658e <setCommand+0xce>
 800658c:	e138      	b.n	8006800 <setCommand+0x340>
 800658e:	7859      	ldrb	r1, [r3, #1]
				temp84 =RTC_AM;
 8006590:	2701      	movs	r7, #1
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006592:	296d      	cmp	r1, #109	; 0x6d
 8006594:	d000      	beq.n	8006598 <setCommand+0xd8>
 8006596:	e133      	b.n	8006800 <setCommand+0x340>
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006598:	4643      	mov	r3, r8
 800659a:	2b17      	cmp	r3, #23
 800659c:	d824      	bhi.n	80065e8 <setCommand+0x128>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800659e:	b2f3      	uxtb	r3, r6
 80065a0:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80065a2:	2b3b      	cmp	r3, #59	; 0x3b
 80065a4:	d820      	bhi.n	80065e8 <setCommand+0x128>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80065a6:	b2c6      	uxtb	r6, r0
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80065a8:	2e3b      	cmp	r6, #59	; 0x3b
 80065aa:	d81d      	bhi.n	80065e8 <setCommand+0x128>
				GetTimeDate();
 80065ac:	f007 f83c 	bl	800d628 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80065b0:	4b9d      	ldr	r3, [pc, #628]	; (8006828 <setCommand+0x368>)
 80065b2:	7d1a      	ldrb	r2, [r3, #20]
 80065b4:	7d59      	ldrb	r1, [r3, #21]
 80065b6:	7d98      	ldrb	r0, [r3, #22]
 80065b8:	4694      	mov	ip, r2
 80065ba:	8b1a      	ldrh	r2, [r3, #24]
 80065bc:	7b1b      	ldrb	r3, [r3, #12]
 80065be:	9703      	str	r7, [sp, #12]
 80065c0:	b25b      	sxtb	r3, r3
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	4643      	mov	r3, r8
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	464b      	mov	r3, r9
 80065ca:	9600      	str	r6, [sp, #0]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	4663      	mov	r3, ip
 80065d0:	f006 ffcc 	bl	800d56c <BOS_CalendarConfig>
 80065d4:	4682      	mov	sl, r0
	if(result == BOS_OK){
 80065d6:	4653      	mov	r3, sl
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d100      	bne.n	80065de <setCommand+0x11e>
 80065dc:	e1b8      	b.n	8006950 <setCommand+0x490>
	else if(result == BOS_ERR_WrongParam)
 80065de:	2b67      	cmp	r3, #103	; 0x67
 80065e0:	d09d      	beq.n	800651e <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 80065e2:	4653      	mov	r3, sl
 80065e4:	2b68      	cmp	r3, #104	; 0x68
 80065e6:	d19f      	bne.n	8006528 <setCommand+0x68>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80065e8:	220f      	movs	r2, #15
 80065ea:	0028      	movs	r0, r5
 80065ec:	498f      	ldr	r1, [pc, #572]	; (800682c <setCommand+0x36c>)
 80065ee:	f00d facb 	bl	8013b88 <memcpy>
 80065f2:	e799      	b.n	8006528 <setCommand+0x68>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065f4:	2102      	movs	r1, #2
 80065f6:	0030      	movs	r0, r6
 80065f8:	aa0a      	add	r2, sp, #40	; 0x28
 80065fa:	f007 fdc5 	bl	800e188 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80065fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006600:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006602:	1d1f      	adds	r7, r3, #4
 8006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006606:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006608:	3b04      	subs	r3, #4
 800660a:	4698      	mov	r8, r3
 800660c:	4b88      	ldr	r3, [pc, #544]	; (8006830 <setCommand+0x370>)
 800660e:	4642      	mov	r2, r8
 8006610:	0019      	movs	r1, r3
 8006612:	0038      	movs	r0, r7
 8006614:	4699      	mov	r9, r3
 8006616:	f00d fcf4 	bl	8014002 <strncmp>
 800661a:	2800      	cmp	r0, #0
 800661c:	d128      	bne.n	8006670 <setCommand+0x1b0>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800661e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006620:	0030      	movs	r0, r6
 8006622:	003a      	movs	r2, r7
 8006624:	4983      	ldr	r1, [pc, #524]	; (8006834 <setCommand+0x374>)
 8006626:	f00d fcec 	bl	8014002 <strncmp>
 800662a:	2800      	cmp	r0, #0
 800662c:	d100      	bne.n	8006630 <setCommand+0x170>
 800662e:	e184      	b.n	800693a <setCommand+0x47a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006630:	003a      	movs	r2, r7
 8006632:	0030      	movs	r0, r6
 8006634:	4980      	ldr	r1, [pc, #512]	; (8006838 <setCommand+0x378>)
 8006636:	f00d fce4 	bl	8014002 <strncmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	d100      	bne.n	8006640 <setCommand+0x180>
 800663e:	e1ba      	b.n	80069b6 <setCommand+0x4f6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006640:	003a      	movs	r2, r7
 8006642:	0030      	movs	r0, r6
 8006644:	497d      	ldr	r1, [pc, #500]	; (800683c <setCommand+0x37c>)
 8006646:	f00d fcdc 	bl	8014002 <strncmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	d100      	bne.n	8006650 <setCommand+0x190>
 800664e:	e18c      	b.n	800696a <setCommand+0x4aa>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006650:	003a      	movs	r2, r7
 8006652:	0030      	movs	r0, r6
 8006654:	497a      	ldr	r1, [pc, #488]	; (8006840 <setCommand+0x380>)
 8006656:	f00d fcd4 	bl	8014002 <strncmp>
 800665a:	2800      	cmp	r0, #0
 800665c:	d1c4      	bne.n	80065e8 <setCommand+0x128>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800665e:	4b79      	ldr	r3, [pc, #484]	; (8006844 <setCommand+0x384>)
 8006660:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006662:	208a      	movs	r0, #138	; 0x8a
 8006664:	7859      	ldrb	r1, [r3, #1]
 8006666:	0040      	lsls	r0, r0, #1
 8006668:	0209      	lsls	r1, r1, #8
 800666a:	f005 f9ab 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 800666e:	e16f      	b.n	8006950 <setCommand+0x490>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006670:	4642      	mov	r2, r8
 8006672:	0038      	movs	r0, r7
 8006674:	4974      	ldr	r1, [pc, #464]	; (8006848 <setCommand+0x388>)
 8006676:	f00d fcc4 	bl	8014002 <strncmp>
 800667a:	2800      	cmp	r0, #0
 800667c:	d000      	beq.n	8006680 <setCommand+0x1c0>
 800667e:	e083      	b.n	8006788 <setCommand+0x2c8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006680:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006682:	0030      	movs	r0, r6
 8006684:	003a      	movs	r2, r7
 8006686:	496b      	ldr	r1, [pc, #428]	; (8006834 <setCommand+0x374>)
 8006688:	f00d fcbb 	bl	8014002 <strncmp>
 800668c:	2800      	cmp	r0, #0
 800668e:	d100      	bne.n	8006692 <setCommand+0x1d2>
 8006690:	e1cb      	b.n	8006a2a <setCommand+0x56a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006692:	003a      	movs	r2, r7
 8006694:	0030      	movs	r0, r6
 8006696:	4968      	ldr	r1, [pc, #416]	; (8006838 <setCommand+0x378>)
 8006698:	f00d fcb3 	bl	8014002 <strncmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	d100      	bne.n	80066a2 <setCommand+0x1e2>
 80066a0:	e17d      	b.n	800699e <setCommand+0x4de>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80066a2:	003a      	movs	r2, r7
 80066a4:	4649      	mov	r1, r9
 80066a6:	0030      	movs	r0, r6
 80066a8:	f00d fcab 	bl	8014002 <strncmp>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d100      	bne.n	80066b2 <setCommand+0x1f2>
 80066b0:	e1ca      	b.n	8006a48 <setCommand+0x588>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80066b2:	003a      	movs	r2, r7
 80066b4:	0030      	movs	r0, r6
 80066b6:	4962      	ldr	r1, [pc, #392]	; (8006840 <setCommand+0x380>)
 80066b8:	f00d fca3 	bl	8014002 <strncmp>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d193      	bne.n	80065e8 <setCommand+0x128>
				BOSMessaging.trace =TRACE_NONE;
 80066c0:	4b60      	ldr	r3, [pc, #384]	; (8006844 <setCommand+0x384>)
 80066c2:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066c4:	3015      	adds	r0, #21
 80066c6:	7819      	ldrb	r1, [r3, #0]
 80066c8:	30ff      	adds	r0, #255	; 0xff
 80066ca:	f005 f97b 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80066ce:	e13f      	b.n	8006950 <setCommand+0x490>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066d0:	2102      	movs	r1, #2
 80066d2:	0030      	movs	r0, r6
 80066d4:	aa0a      	add	r2, sp, #40	; 0x28
 80066d6:	f007 fd57 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066da:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066dc:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066de:	aa0b      	add	r2, sp, #44	; 0x2c
 80066e0:	0030      	movs	r0, r6
 80066e2:	f007 fd51 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066e6:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066e8:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ea:	aa0c      	add	r2, sp, #48	; 0x30
 80066ec:	0030      	movs	r0, r6
 80066ee:	f007 fd4b 	bl	800e188 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066f2:	2105      	movs	r1, #5
 80066f4:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066f6:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066f8:	0030      	movs	r0, r6
 80066fa:	f007 fd45 	bl	800e188 <FreeRTOS_CLIGetParameter>
 80066fe:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006700:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006702:	f00c ff7c 	bl	80135fe <atoi>
 8006706:	0006      	movs	r6, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006708:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800670a:	f00c ff78 	bl	80135fe <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800670e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006710:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006712:	2206      	movs	r2, #6
 8006714:	0038      	movs	r0, r7
 8006716:	494d      	ldr	r1, [pc, #308]	; (800684c <setCommand+0x38c>)
 8006718:	f00d fc73 	bl	8014002 <strncmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	d100      	bne.n	8006722 <setCommand+0x262>
 8006720:	e0ac      	b.n	800687c <setCommand+0x3bc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006722:	2207      	movs	r2, #7
 8006724:	0038      	movs	r0, r7
 8006726:	494a      	ldr	r1, [pc, #296]	; (8006850 <setCommand+0x390>)
 8006728:	f00d fc6b 	bl	8014002 <strncmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	d100      	bne.n	8006732 <setCommand+0x272>
 8006730:	e118      	b.n	8006964 <setCommand+0x4a4>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006732:	2209      	movs	r2, #9
 8006734:	0038      	movs	r0, r7
 8006736:	4947      	ldr	r1, [pc, #284]	; (8006854 <setCommand+0x394>)
 8006738:	f00d fc63 	bl	8014002 <strncmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	d100      	bne.n	8006742 <setCommand+0x282>
 8006740:	e17f      	b.n	8006a42 <setCommand+0x582>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006742:	2208      	movs	r2, #8
 8006744:	0038      	movs	r0, r7
 8006746:	4944      	ldr	r1, [pc, #272]	; (8006858 <setCommand+0x398>)
 8006748:	f00d fc5b 	bl	8014002 <strncmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	d100      	bne.n	8006752 <setCommand+0x292>
 8006750:	e18e      	b.n	8006a70 <setCommand+0x5b0>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006752:	2206      	movs	r2, #6
 8006754:	0038      	movs	r0, r7
 8006756:	4941      	ldr	r1, [pc, #260]	; (800685c <setCommand+0x39c>)
 8006758:	f00d fc53 	bl	8014002 <strncmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	d100      	bne.n	8006762 <setCommand+0x2a2>
 8006760:	e19f      	b.n	8006aa2 <setCommand+0x5e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006762:	2208      	movs	r2, #8
 8006764:	0038      	movs	r0, r7
 8006766:	493e      	ldr	r1, [pc, #248]	; (8006860 <setCommand+0x3a0>)
 8006768:	f00d fc4b 	bl	8014002 <strncmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	d100      	bne.n	8006772 <setCommand+0x2b2>
 8006770:	e22c      	b.n	8006bcc <setCommand+0x70c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006772:	2206      	movs	r2, #6
 8006774:	0038      	movs	r0, r7
 8006776:	493b      	ldr	r1, [pc, #236]	; (8006864 <setCommand+0x3a4>)
 8006778:	f00d fc43 	bl	8014002 <strncmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	d000      	beq.n	8006782 <setCommand+0x2c2>
 8006780:	e25e      	b.n	8006c40 <setCommand+0x780>
			temp81 =SUNDAY;
 8006782:	2307      	movs	r3, #7
 8006784:	9307      	str	r3, [sp, #28]
 8006786:	e07b      	b.n	8006880 <setCommand+0x3c0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006788:	4642      	mov	r2, r8
 800678a:	0038      	movs	r0, r7
 800678c:	4936      	ldr	r1, [pc, #216]	; (8006868 <setCommand+0x3a8>)
 800678e:	f00d fc38 	bl	8014002 <strncmp>
 8006792:	4681      	mov	r9, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	d100      	bne.n	800679a <setCommand+0x2da>
 8006798:	e119      	b.n	80069ce <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800679a:	4642      	mov	r2, r8
 800679c:	0038      	movs	r0, r7
 800679e:	4933      	ldr	r1, [pc, #204]	; (800686c <setCommand+0x3ac>)
 80067a0:	f00d fc2f 	bl	8014002 <strncmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d100      	bne.n	80067aa <setCommand+0x2ea>
 80067a8:	e0eb      	b.n	8006982 <setCommand+0x4c2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80067aa:	4642      	mov	r2, r8
 80067ac:	0038      	movs	r0, r7
 80067ae:	4930      	ldr	r1, [pc, #192]	; (8006870 <setCommand+0x3b0>)
 80067b0:	f00d fc27 	bl	8014002 <strncmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d100      	bne.n	80067ba <setCommand+0x2fa>
 80067b8:	e14c      	b.n	8006a54 <setCommand+0x594>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80067ba:	4642      	mov	r2, r8
 80067bc:	0038      	movs	r0, r7
 80067be:	492d      	ldr	r1, [pc, #180]	; (8006874 <setCommand+0x3b4>)
 80067c0:	f00d fc1f 	bl	8014002 <strncmp>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d100      	bne.n	80067ca <setCommand+0x30a>
 80067c8:	e155      	b.n	8006a76 <setCommand+0x5b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80067ca:	4642      	mov	r2, r8
 80067cc:	0038      	movs	r0, r7
 80067ce:	492a      	ldr	r1, [pc, #168]	; (8006878 <setCommand+0x3b8>)
 80067d0:	f00d fc17 	bl	8014002 <strncmp>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d000      	beq.n	80067da <setCommand+0x31a>
 80067d8:	e6a1      	b.n	800651e <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 80067da:	0030      	movs	r0, r6
 80067dc:	f00c ff0f 	bl	80135fe <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067e0:	1e43      	subs	r3, r0, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2bfe      	cmp	r3, #254	; 0xfe
 80067e6:	d900      	bls.n	80067ea <setCommand+0x32a>
 80067e8:	e6fe      	b.n	80065e8 <setCommand+0x128>
				BOS.buttons.maxInterClickTime =temp16;
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <setCommand+0x368>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067ec:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80067ee:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067f0:	0200      	lsls	r0, r0, #8
 80067f2:	4301      	orrs	r1, r0
 80067f4:	2018      	movs	r0, #24
 80067f6:	b289      	uxth	r1, r1
 80067f8:	30ff      	adds	r0, #255	; 0xff
 80067fa:	f005 f8e3 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80067fe:	e0a7      	b.n	8006950 <setCommand+0x490>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006800:	2a70      	cmp	r2, #112	; 0x70
 8006802:	d000      	beq.n	8006806 <setCommand+0x346>
 8006804:	e6f0      	b.n	80065e8 <setCommand+0x128>
 8006806:	785b      	ldrb	r3, [r3, #1]
				temp84 =RTC_PM;
 8006808:	2702      	movs	r7, #2
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800680a:	2b6d      	cmp	r3, #109	; 0x6d
 800680c:	d100      	bne.n	8006810 <setCommand+0x350>
 800680e:	e6c3      	b.n	8006598 <setCommand+0xd8>
 8006810:	e6ea      	b.n	80065e8 <setCommand+0x128>
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20001910 	.word	0x20001910
 8006818:	0801b57c 	.word	0x0801b57c
 800681c:	0801b7f4 	.word	0x0801b7f4
 8006820:	0801b7fc 	.word	0x0801b7fc
 8006824:	0801b604 	.word	0x0801b604
 8006828:	20000b54 	.word	0x20000b54
 800682c:	0801b6a0 	.word	0x0801b6a0
 8006830:	0801b584 	.word	0x0801b584
 8006834:	0801a6d8 	.word	0x0801a6d8
 8006838:	0801b6f0 	.word	0x0801b6f0
 800683c:	0801b6f8 	.word	0x0801b6f8
 8006840:	0801b594 	.word	0x0801b594
 8006844:	20000b4c 	.word	0x20000b4c
 8006848:	0801b59c 	.word	0x0801b59c
 800684c:	0801b804 	.word	0x0801b804
 8006850:	0801b80c 	.word	0x0801b80c
 8006854:	0801b814 	.word	0x0801b814
 8006858:	0801b820 	.word	0x0801b820
 800685c:	0801b82c 	.word	0x0801b82c
 8006860:	0801b834 	.word	0x0801b834
 8006864:	0801b840 	.word	0x0801b840
 8006868:	0801b5a4 	.word	0x0801b5a4
 800686c:	0801b5b0 	.word	0x0801b5b0
 8006870:	0801b5bc 	.word	0x0801b5bc
 8006874:	0801b5cc 	.word	0x0801b5cc
 8006878:	0801b5e0 	.word	0x0801b5e0
			temp81 =MONDAY;
 800687c:	2301      	movs	r3, #1
 800687e:	9307      	str	r3, [sp, #28]
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006880:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8006882:	2207      	movs	r2, #7
 8006884:	0038      	movs	r0, r7
 8006886:	49d4      	ldr	r1, [pc, #848]	; (8006bd8 <setCommand+0x718>)
 8006888:	f00d fbbb 	bl	8014002 <strncmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	d02f      	beq.n	80068f0 <setCommand+0x430>
 8006890:	783b      	ldrb	r3, [r7, #0]
 8006892:	469a      	mov	sl, r3
 8006894:	2b31      	cmp	r3, #49	; 0x31
 8006896:	d028      	beq.n	80068ea <setCommand+0x42a>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006898:	2208      	movs	r2, #8
 800689a:	0038      	movs	r0, r7
 800689c:	49cf      	ldr	r1, [pc, #828]	; (8006bdc <setCommand+0x71c>)
 800689e:	f00d fbb0 	bl	8014002 <strncmp>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d100      	bne.n	80068a8 <setCommand+0x3e8>
 80068a6:	e1fe      	b.n	8006ca6 <setCommand+0x7e6>
 80068a8:	4653      	mov	r3, sl
 80068aa:	2b32      	cmp	r3, #50	; 0x32
 80068ac:	d103      	bne.n	80068b6 <setCommand+0x3f6>
 80068ae:	787b      	ldrb	r3, [r7, #1]
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x3f6>
 80068b4:	e1f7      	b.n	8006ca6 <setCommand+0x7e6>
 80068b6:	2300      	movs	r3, #0
 80068b8:	469a      	mov	sl, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80068ba:	2205      	movs	r2, #5
 80068bc:	0038      	movs	r0, r7
 80068be:	49c8      	ldr	r1, [pc, #800]	; (8006be0 <setCommand+0x720>)
 80068c0:	f00d fb9f 	bl	8014002 <strncmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d100      	bne.n	80068ca <setCommand+0x40a>
 80068c8:	e0e8      	b.n	8006a9c <setCommand+0x5dc>
 80068ca:	783b      	ldrb	r3, [r7, #0]
 80068cc:	469b      	mov	fp, r3
 80068ce:	2b33      	cmp	r3, #51	; 0x33
 80068d0:	d000      	beq.n	80068d4 <setCommand+0x414>
 80068d2:	e0e9      	b.n	8006aa8 <setCommand+0x5e8>
			temp82 =MARCH;
 80068d4:	2203      	movs	r2, #3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80068d6:	787b      	ldrb	r3, [r7, #1]
			temp82 =MARCH;
 80068d8:	4691      	mov	r9, r2
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d000      	beq.n	80068e0 <setCommand+0x420>
 80068de:	e0e3      	b.n	8006aa8 <setCommand+0x5e8>
		if(result == BOS_OK){
 80068e0:	4653      	mov	r3, sl
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d000      	beq.n	80068e8 <setCommand+0x428>
 80068e6:	e67c      	b.n	80065e2 <setCommand+0x122>
 80068e8:	e004      	b.n	80068f4 <setCommand+0x434>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068ea:	787b      	ldrb	r3, [r7, #1]
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d1d3      	bne.n	8006898 <setCommand+0x3d8>
			temp82 =JANUARY;
 80068f0:	2301      	movs	r3, #1
 80068f2:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// day
 80068f4:	b2f7      	uxtb	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80068f6:	1e7b      	subs	r3, r7, #1
 80068f8:	2b1e      	cmp	r3, #30
 80068fa:	d900      	bls.n	80068fe <setCommand+0x43e>
 80068fc:	e674      	b.n	80065e8 <setCommand+0x128>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80068fe:	4643      	mov	r3, r8
 8006900:	b29b      	uxth	r3, r3
 8006902:	4698      	mov	r8, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006904:	4bb7      	ldr	r3, [pc, #732]	; (8006be4 <setCommand+0x724>)
 8006906:	4443      	add	r3, r8
 8006908:	2b64      	cmp	r3, #100	; 0x64
 800690a:	d900      	bls.n	800690e <setCommand+0x44e>
 800690c:	e66c      	b.n	80065e8 <setCommand+0x128>
				GetTimeDate();
 800690e:	f006 fe8b 	bl	800d628 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006912:	220c      	movs	r2, #12
 8006914:	4bb4      	ldr	r3, [pc, #720]	; (8006be8 <setCommand+0x728>)
 8006916:	0039      	movs	r1, r7
 8006918:	569a      	ldrsb	r2, [r3, r2]
 800691a:	4648      	mov	r0, r9
 800691c:	9204      	str	r2, [sp, #16]
 800691e:	7cda      	ldrb	r2, [r3, #19]
 8006920:	9203      	str	r2, [sp, #12]
 8006922:	7c9a      	ldrb	r2, [r3, #18]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	7c5a      	ldrb	r2, [r3, #17]
 8006928:	9201      	str	r2, [sp, #4]
 800692a:	7c1b      	ldrb	r3, [r3, #16]
 800692c:	4642      	mov	r2, r8
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	f006 fe1b 	bl	800d56c <BOS_CalendarConfig>
 8006936:	4682      	mov	sl, r0
 8006938:	e64d      	b.n	80065d6 <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800693a:	2260      	movs	r2, #96	; 0x60
 800693c:	4bab      	ldr	r3, [pc, #684]	; (8006bec <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800693e:	3015      	adds	r0, #21
 8006940:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006942:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006944:	2360      	movs	r3, #96	; 0x60
 8006946:	0209      	lsls	r1, r1, #8
 8006948:	4319      	orrs	r1, r3
 800694a:	30ff      	adds	r0, #255	; 0xff
 800694c:	f005 f83a 	bl	800b9c4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006950:	2300      	movs	r3, #0
 8006952:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006956:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006958:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800695a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800695c:	49a4      	ldr	r1, [pc, #656]	; (8006bf0 <setCommand+0x730>)
 800695e:	f00d fb0d 	bl	8013f7c <sprintf>
	return pdFALSE;
 8006962:	e5e1      	b.n	8006528 <setCommand+0x68>
			temp81 =TUESDAY;
 8006964:	2302      	movs	r3, #2
 8006966:	9307      	str	r3, [sp, #28]
 8006968:	e78a      	b.n	8006880 <setCommand+0x3c0>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	4b9f      	ldr	r3, [pc, #636]	; (8006bec <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800696e:	3015      	adds	r0, #21
 8006970:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006972:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	0209      	lsls	r1, r1, #8
 8006978:	4319      	orrs	r1, r3
 800697a:	30ff      	adds	r0, #255	; 0xff
 800697c:	f005 f822 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006980:	e7e6      	b.n	8006950 <setCommand+0x490>
			temp16 =atoi((const char* )pcParameterString2);
 8006982:	0030      	movs	r0, r6
 8006984:	f00c fe3b 	bl	80135fe <atoi>
 8006988:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800698a:	2900      	cmp	r1, #0
 800698c:	d100      	bne.n	8006990 <setCommand+0x4d0>
 800698e:	e62b      	b.n	80065e8 <setCommand+0x128>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006990:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006992:	4b95      	ldr	r3, [pc, #596]	; (8006be8 <setCommand+0x728>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006994:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006996:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006998:	f005 f814 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 800699c:	e7d8      	b.n	8006950 <setCommand+0x490>
				BOSMessaging.trace =TRACE_MESSAGE;
 800699e:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069a0:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80069a2:	4b92      	ldr	r3, [pc, #584]	; (8006bec <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069a4:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80069a6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	3015      	adds	r0, #21
 80069ac:	4319      	orrs	r1, r3
 80069ae:	30ff      	adds	r0, #255	; 0xff
 80069b0:	f005 f808 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80069b4:	e7cc      	b.n	8006950 <setCommand+0x490>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80069b6:	2220      	movs	r2, #32
 80069b8:	4b8c      	ldr	r3, [pc, #560]	; (8006bec <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069ba:	3015      	adds	r0, #21
 80069bc:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80069be:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069c0:	2320      	movs	r3, #32
 80069c2:	0209      	lsls	r1, r1, #8
 80069c4:	4319      	orrs	r1, r3
 80069c6:	30ff      	adds	r0, #255	; 0xff
 80069c8:	f004 fffc 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80069cc:	e7c0      	b.n	8006950 <setCommand+0x490>
			temp2 =atoi((const char* )pcParameterString2);
 80069ce:	0030      	movs	r0, r6
 80069d0:	f00c fe15 	bl	80135fe <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80069d4:	23e1      	movs	r3, #225	; 0xe1
 80069d6:	031b      	lsls	r3, r3, #12
 80069d8:	4298      	cmp	r0, r3
 80069da:	d900      	bls.n	80069de <setCommand+0x51e>
 80069dc:	e604      	b.n	80065e8 <setCommand+0x128>
				BOS.clibaudrate =temp2;
 80069de:	4e82      	ldr	r6, [pc, #520]	; (8006be8 <setCommand+0x728>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80069e0:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 80069e2:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80069e4:	208c      	movs	r0, #140	; 0x8c
 80069e6:	0040      	lsls	r0, r0, #1
 80069e8:	f004 ffec 	bl	800b9c4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80069ec:	201a      	movs	r0, #26
 80069ee:	8971      	ldrh	r1, [r6, #10]
 80069f0:	30ff      	adds	r0, #255	; 0xff
 80069f2:	f004 ffe7 	bl	800b9c4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80069f6:	4649      	mov	r1, r9
 80069f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80069fc:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80069fe:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006a00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a02:	497b      	ldr	r1, [pc, #492]	; (8006bf0 <setCommand+0x730>)
 8006a04:	f00d faba 	bl	8013f7c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006a08:	0028      	movs	r0, r5
 8006a0a:	f7f9 fb85 	bl	8000118 <strlen>
 8006a0e:	0004      	movs	r4, r0
 8006a10:	2230      	movs	r2, #48	; 0x30
 8006a12:	4978      	ldr	r1, [pc, #480]	; (8006bf4 <setCommand+0x734>)
 8006a14:	1828      	adds	r0, r5, r0
 8006a16:	f00d f8b7 	bl	8013b88 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006a1a:	0020      	movs	r0, r4
 8006a1c:	302f      	adds	r0, #47	; 0x2f
 8006a1e:	22b2      	movs	r2, #178	; 0xb2
 8006a20:	4975      	ldr	r1, [pc, #468]	; (8006bf8 <setCommand+0x738>)
 8006a22:	1828      	adds	r0, r5, r0
 8006a24:	f00d f8b0 	bl	8013b88 <memcpy>
 8006a28:	e57e      	b.n	8006528 <setCommand+0x68>
				BOSMessaging.trace =TRACE_BOTH;
 8006a2a:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a2c:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006a2e:	4b6f      	ldr	r3, [pc, #444]	; (8006bec <setCommand+0x72c>)
 8006a30:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a32:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a34:	0089      	lsls	r1, r1, #2
 8006a36:	3015      	adds	r0, #21
 8006a38:	4319      	orrs	r1, r3
 8006a3a:	30ff      	adds	r0, #255	; 0xff
 8006a3c:	f004 ffc2 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006a40:	e786      	b.n	8006950 <setCommand+0x490>
			temp81 =WEDNESDAY;
 8006a42:	2303      	movs	r3, #3
 8006a44:	9307      	str	r3, [sp, #28]
 8006a46:	e71b      	b.n	8006880 <setCommand+0x3c0>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a48:	2202      	movs	r2, #2
 8006a4a:	4b68      	ldr	r3, [pc, #416]	; (8006bec <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a4c:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a4e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	e7ef      	b.n	8006a34 <setCommand+0x574>
			temp16 =atoi((const char* )pcParameterString2);
 8006a54:	0030      	movs	r0, r6
 8006a56:	f00c fdd2 	bl	80135fe <atoi>
 8006a5a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d100      	bne.n	8006a62 <setCommand+0x5a2>
 8006a60:	e5c2      	b.n	80065e8 <setCommand+0x128>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a62:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006a64:	4b60      	ldr	r3, [pc, #384]	; (8006be8 <setCommand+0x728>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a66:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006a68:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a6a:	f004 ffab 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006a6e:	e76f      	b.n	8006950 <setCommand+0x490>
			temp81 =THURSDAY;
 8006a70:	2304      	movs	r3, #4
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	e704      	b.n	8006880 <setCommand+0x3c0>
			temp16 =atoi((const char* )pcParameterString2);
 8006a76:	0030      	movs	r0, r6
 8006a78:	f00c fdc1 	bl	80135fe <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a7c:	1e43      	subs	r3, r0, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2bfe      	cmp	r3, #254	; 0xfe
 8006a82:	d900      	bls.n	8006a86 <setCommand+0x5c6>
 8006a84:	e5b0      	b.n	80065e8 <setCommand+0x128>
				BOS.buttons.minInterClickTime =temp16;
 8006a86:	4b58      	ldr	r3, [pc, #352]	; (8006be8 <setCommand+0x728>)
 8006a88:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a8a:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006a8c:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a8e:	0209      	lsls	r1, r1, #8
 8006a90:	4301      	orrs	r1, r0
 8006a92:	2018      	movs	r0, #24
 8006a94:	30ff      	adds	r0, #255	; 0xff
 8006a96:	f004 ff95 	bl	800b9c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006a9a:	e759      	b.n	8006950 <setCommand+0x490>
			temp82 =MARCH;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	4699      	mov	r9, r3
 8006aa0:	e71e      	b.n	80068e0 <setCommand+0x420>
			temp81 =FRIDAY;
 8006aa2:	2305      	movs	r3, #5
 8006aa4:	9307      	str	r3, [sp, #28]
 8006aa6:	e6eb      	b.n	8006880 <setCommand+0x3c0>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	0038      	movs	r0, r7
 8006aac:	4953      	ldr	r1, [pc, #332]	; (8006bfc <setCommand+0x73c>)
 8006aae:	f00d faa8 	bl	8014002 <strncmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <setCommand+0x5f8>
 8006ab6:	e08c      	b.n	8006bd2 <setCommand+0x712>
 8006ab8:	465b      	mov	r3, fp
 8006aba:	2b34      	cmp	r3, #52	; 0x34
 8006abc:	d105      	bne.n	8006aca <setCommand+0x60a>
			temp82 =APRIL;
 8006abe:	2204      	movs	r2, #4
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006ac0:	787b      	ldrb	r3, [r7, #1]
			temp82 =APRIL;
 8006ac2:	4691      	mov	r9, r2
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d100      	bne.n	8006aca <setCommand+0x60a>
 8006ac8:	e70a      	b.n	80068e0 <setCommand+0x420>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006aca:	2203      	movs	r2, #3
 8006acc:	0038      	movs	r0, r7
 8006ace:	494c      	ldr	r1, [pc, #304]	; (8006c00 <setCommand+0x740>)
 8006ad0:	f00d fa97 	bl	8014002 <strncmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d100      	bne.n	8006ada <setCommand+0x61a>
 8006ad8:	e0d6      	b.n	8006c88 <setCommand+0x7c8>
 8006ada:	2202      	movs	r2, #2
 8006adc:	0038      	movs	r0, r7
 8006ade:	4949      	ldr	r1, [pc, #292]	; (8006c04 <setCommand+0x744>)
 8006ae0:	f00d fa8f 	bl	8014002 <strncmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d100      	bne.n	8006aea <setCommand+0x62a>
 8006ae8:	e0ce      	b.n	8006c88 <setCommand+0x7c8>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006aea:	2204      	movs	r2, #4
 8006aec:	0038      	movs	r0, r7
 8006aee:	4946      	ldr	r1, [pc, #280]	; (8006c08 <setCommand+0x748>)
 8006af0:	f00d fa87 	bl	8014002 <strncmp>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d100      	bne.n	8006afa <setCommand+0x63a>
 8006af8:	e0c9      	b.n	8006c8e <setCommand+0x7ce>
 8006afa:	2202      	movs	r2, #2
 8006afc:	0038      	movs	r0, r7
 8006afe:	4943      	ldr	r1, [pc, #268]	; (8006c0c <setCommand+0x74c>)
 8006b00:	f00d fa7f 	bl	8014002 <strncmp>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d100      	bne.n	8006b0a <setCommand+0x64a>
 8006b08:	e0c1      	b.n	8006c8e <setCommand+0x7ce>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	0038      	movs	r0, r7
 8006b0e:	4940      	ldr	r1, [pc, #256]	; (8006c10 <setCommand+0x750>)
 8006b10:	f00d fa77 	bl	8014002 <strncmp>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d100      	bne.n	8006b1a <setCommand+0x65a>
 8006b18:	e0bf      	b.n	8006c9a <setCommand+0x7da>
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	0038      	movs	r0, r7
 8006b1e:	493d      	ldr	r1, [pc, #244]	; (8006c14 <setCommand+0x754>)
 8006b20:	f00d fa6f 	bl	8014002 <strncmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d100      	bne.n	8006b2a <setCommand+0x66a>
 8006b28:	e0b7      	b.n	8006c9a <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	0038      	movs	r0, r7
 8006b2e:	493a      	ldr	r1, [pc, #232]	; (8006c18 <setCommand+0x758>)
 8006b30:	f00d fa67 	bl	8014002 <strncmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d100      	bne.n	8006b3a <setCommand+0x67a>
 8006b38:	e0ac      	b.n	8006c94 <setCommand+0x7d4>
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	0038      	movs	r0, r7
 8006b3e:	4937      	ldr	r1, [pc, #220]	; (8006c1c <setCommand+0x75c>)
 8006b40:	f00d fa5f 	bl	8014002 <strncmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d100      	bne.n	8006b4a <setCommand+0x68a>
 8006b48:	e0a4      	b.n	8006c94 <setCommand+0x7d4>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006b4a:	2209      	movs	r2, #9
 8006b4c:	0038      	movs	r0, r7
 8006b4e:	4934      	ldr	r1, [pc, #208]	; (8006c20 <setCommand+0x760>)
 8006b50:	f00d fa57 	bl	8014002 <strncmp>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d100      	bne.n	8006b5a <setCommand+0x69a>
 8006b58:	e0ab      	b.n	8006cb2 <setCommand+0x7f2>
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	0038      	movs	r0, r7
 8006b5e:	4931      	ldr	r1, [pc, #196]	; (8006c24 <setCommand+0x764>)
 8006b60:	f00d fa4f 	bl	8014002 <strncmp>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d100      	bne.n	8006b6a <setCommand+0x6aa>
 8006b68:	e0a3      	b.n	8006cb2 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	0038      	movs	r0, r7
 8006b6e:	492e      	ldr	r1, [pc, #184]	; (8006c28 <setCommand+0x768>)
 8006b70:	f00d fa47 	bl	8014002 <strncmp>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d100      	bne.n	8006b7a <setCommand+0x6ba>
 8006b78:	e098      	b.n	8006cac <setCommand+0x7ec>
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	0038      	movs	r0, r7
 8006b7e:	492b      	ldr	r1, [pc, #172]	; (8006c2c <setCommand+0x76c>)
 8006b80:	f00d fa3f 	bl	8014002 <strncmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d100      	bne.n	8006b8a <setCommand+0x6ca>
 8006b88:	e090      	b.n	8006cac <setCommand+0x7ec>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	0038      	movs	r0, r7
 8006b8e:	4928      	ldr	r1, [pc, #160]	; (8006c30 <setCommand+0x770>)
 8006b90:	f00d fa37 	bl	8014002 <strncmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d100      	bne.n	8006b9a <setCommand+0x6da>
 8006b98:	e082      	b.n	8006ca0 <setCommand+0x7e0>
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	0038      	movs	r0, r7
 8006b9e:	4925      	ldr	r1, [pc, #148]	; (8006c34 <setCommand+0x774>)
 8006ba0:	f00d fa2f 	bl	8014002 <strncmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d07b      	beq.n	8006ca0 <setCommand+0x7e0>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006ba8:	2208      	movs	r2, #8
 8006baa:	0038      	movs	r0, r7
 8006bac:	4922      	ldr	r1, [pc, #136]	; (8006c38 <setCommand+0x778>)
 8006bae:	f00d fa28 	bl	8014002 <strncmp>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d007      	beq.n	8006bc6 <setCommand+0x706>
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	0038      	movs	r0, r7
 8006bba:	4920      	ldr	r1, [pc, #128]	; (8006c3c <setCommand+0x77c>)
 8006bbc:	f00d fa21 	bl	8014002 <strncmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d000      	beq.n	8006bc6 <setCommand+0x706>
 8006bc4:	e510      	b.n	80065e8 <setCommand+0x128>
			temp82 =DECEMBER;
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	4699      	mov	r9, r3
 8006bca:	e689      	b.n	80068e0 <setCommand+0x420>
			temp81 =SATURDAY;
 8006bcc:	2306      	movs	r3, #6
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	e656      	b.n	8006880 <setCommand+0x3c0>
			temp82 =APRIL;
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	e683      	b.n	80068e0 <setCommand+0x420>
 8006bd8:	0801b8c4 	.word	0x0801b8c4
 8006bdc:	0801b8cc 	.word	0x0801b8cc
 8006be0:	0801b84c 	.word	0x0801b84c
 8006be4:	fffff830 	.word	0xfffff830
 8006be8:	20000b54 	.word	0x20000b54
 8006bec:	20000b4c 	.word	0x20000b4c
 8006bf0:	0801b6fc 	.word	0x0801b6fc
 8006bf4:	0801b710 	.word	0x0801b710
 8006bf8:	0801b740 	.word	0x0801b740
 8006bfc:	0801b854 	.word	0x0801b854
 8006c00:	0801b85c 	.word	0x0801b85c
 8006c04:	0801b860 	.word	0x0801b860
 8006c08:	0801b864 	.word	0x0801b864
 8006c0c:	0801b86c 	.word	0x0801b86c
 8006c10:	0801b870 	.word	0x0801b870
 8006c14:	0801b878 	.word	0x0801b878
 8006c18:	0801b87c 	.word	0x0801b87c
 8006c1c:	0801b884 	.word	0x0801b884
 8006c20:	0801b888 	.word	0x0801b888
 8006c24:	0801b894 	.word	0x0801b894
 8006c28:	0801b898 	.word	0x0801b898
 8006c2c:	0801b8a0 	.word	0x0801b8a0
 8006c30:	0801b8a4 	.word	0x0801b8a4
 8006c34:	0801b8b0 	.word	0x0801b8b0
 8006c38:	0801b8b4 	.word	0x0801b8b4
 8006c3c:	0801b8c0 	.word	0x0801b8c0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c40:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8006c42:	2207      	movs	r2, #7
 8006c44:	0038      	movs	r0, r7
 8006c46:	491c      	ldr	r1, [pc, #112]	; (8006cb8 <setCommand+0x7f8>)
 8006c48:	f00d f9db 	bl	8014002 <strncmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d100      	bne.n	8006c52 <setCommand+0x792>
 8006c50:	e4ca      	b.n	80065e8 <setCommand+0x128>
 8006c52:	2202      	movs	r2, #2
 8006c54:	0038      	movs	r0, r7
 8006c56:	4919      	ldr	r1, [pc, #100]	; (8006cbc <setCommand+0x7fc>)
 8006c58:	f00d f9d3 	bl	8014002 <strncmp>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d100      	bne.n	8006c62 <setCommand+0x7a2>
 8006c60:	e4c2      	b.n	80065e8 <setCommand+0x128>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006c62:	2208      	movs	r2, #8
 8006c64:	0038      	movs	r0, r7
 8006c66:	4916      	ldr	r1, [pc, #88]	; (8006cc0 <setCommand+0x800>)
 8006c68:	f00d f9cb 	bl	8014002 <strncmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d100      	bne.n	8006c72 <setCommand+0x7b2>
 8006c70:	e4ba      	b.n	80065e8 <setCommand+0x128>
 8006c72:	2202      	movs	r2, #2
 8006c74:	0038      	movs	r0, r7
 8006c76:	4913      	ldr	r1, [pc, #76]	; (8006cc4 <setCommand+0x804>)
 8006c78:	f00d f9c3 	bl	8014002 <strncmp>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d100      	bne.n	8006c82 <setCommand+0x7c2>
 8006c80:	e4b2      	b.n	80065e8 <setCommand+0x128>
			result =BOS_ERR_WrongValue;
 8006c82:	2368      	movs	r3, #104	; 0x68
 8006c84:	469a      	mov	sl, r3
 8006c86:	e618      	b.n	80068ba <setCommand+0x3fa>
			temp82 =MAY;
 8006c88:	2305      	movs	r3, #5
 8006c8a:	4699      	mov	r9, r3
 8006c8c:	e628      	b.n	80068e0 <setCommand+0x420>
			temp82 =JUNE;
 8006c8e:	2306      	movs	r3, #6
 8006c90:	4699      	mov	r9, r3
 8006c92:	e625      	b.n	80068e0 <setCommand+0x420>
			temp82 =AUGUST;
 8006c94:	2308      	movs	r3, #8
 8006c96:	4699      	mov	r9, r3
 8006c98:	e622      	b.n	80068e0 <setCommand+0x420>
			temp82 =JULY;
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	4699      	mov	r9, r3
 8006c9e:	e61f      	b.n	80068e0 <setCommand+0x420>
			temp82 =NOVEMBER;
 8006ca0:	230b      	movs	r3, #11
 8006ca2:	4699      	mov	r9, r3
 8006ca4:	e61c      	b.n	80068e0 <setCommand+0x420>
			temp82 =FEBRUARY;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	4699      	mov	r9, r3
 8006caa:	e623      	b.n	80068f4 <setCommand+0x434>
			temp82 =OCTOBER;
 8006cac:	230a      	movs	r3, #10
 8006cae:	4699      	mov	r9, r3
 8006cb0:	e616      	b.n	80068e0 <setCommand+0x420>
			temp82 =SEPTEMBER;
 8006cb2:	2309      	movs	r3, #9
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	e613      	b.n	80068e0 <setCommand+0x420>
 8006cb8:	0801b8c4 	.word	0x0801b8c4
 8006cbc:	0801b848 	.word	0x0801b848
 8006cc0:	0801b8cc 	.word	0x0801b8cc
 8006cc4:	0801b8d8 	.word	0x0801b8d8

08006cc8 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006cc8:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cca:	b530      	push	{r4, r5, lr}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	0004      	movs	r4, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cd0:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cd4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006cd6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cd8:	f007 fa56 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006cdc:	2300      	movs	r3, #0
 8006cde:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006ce0:	2500      	movs	r5, #0
	if(pcParameterString1[0] == 'p'){
 8006ce2:	2b70      	cmp	r3, #112	; 0x70
 8006ce4:	d00e      	beq.n	8006d04 <removebuttonCommand+0x3c>
	result =RemovePortButton(port);
 8006ce6:	0028      	movs	r0, r5
 8006ce8:	f005 fac2 	bl	800c270 <RemovePortButton>
	if(result == BOS_OK){
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d002      	beq.n	8006cf6 <removebuttonCommand+0x2e>
}
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	b003      	add	sp, #12
 8006cf4:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006cf6:	002b      	movs	r3, r5
 8006cf8:	002a      	movs	r2, r5
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <removebuttonCommand+0x48>)
 8006cfe:	f00d f93d 	bl	8013f7c <sprintf>
 8006d02:	e7f5      	b.n	8006cf0 <removebuttonCommand+0x28>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d04:	3001      	adds	r0, #1
 8006d06:	f00c fc80 	bl	801360a <atol>
 8006d0a:	b2c5      	uxtb	r5, r0
 8006d0c:	e7eb      	b.n	8006ce6 <removebuttonCommand+0x1e>
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	0801b8dc 	.word	0x0801b8dc

08006d14 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d16:	46ce      	mov	lr, r9
 8006d18:	4647      	mov	r7, r8
 8006d1a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006d1c:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d22:	2101      	movs	r1, #1
 8006d24:	aa02      	add	r2, sp, #8
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d26:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d28:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006d2a:	9302      	str	r3, [sp, #8]
 8006d2c:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d2e:	f007 fa2b 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d32:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d34:	4e24      	ldr	r6, [pc, #144]	; (8006dc8 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d36:	001a      	movs	r2, r3
 8006d38:	4924      	ldr	r1, [pc, #144]	; (8006dcc <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d3a:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d3c:	4699      	mov	r9, r3
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d3e:	64f0      	str	r0, [r6, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d40:	f00d f95f 	bl	8014002 <strncmp>
		type =MOMENTARY_NO;
 8006d44:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d007      	beq.n	8006d5a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006d4a:	464a      	mov	r2, r9
 8006d4c:	0020      	movs	r0, r4
 8006d4e:	4920      	ldr	r1, [pc, #128]	; (8006dd0 <addbuttonCommand+0xbc>)
 8006d50:	f00d f957 	bl	8014002 <strncmp>
		type =MOMENTARY_NC;
 8006d54:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d115      	bne.n	8006d86 <addbuttonCommand+0x72>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d5a:	aa03      	add	r2, sp, #12
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	0028      	movs	r0, r5
 8006d60:	f007 fa12 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006d64:	2200      	movs	r2, #0
 8006d66:	5682      	ldrsb	r2, [r0, r2]
	uint8_t port =0, type =0;
 8006d68:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006d6a:	2a70      	cmp	r2, #112	; 0x70
 8006d6c:	d026      	beq.n	8006dbc <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006d6e:	0021      	movs	r1, r4
 8006d70:	0038      	movs	r0, r7
 8006d72:	f005 fa03 	bl	800c17c <AddPortButton>
	if(result == BOS_OK){
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d016      	beq.n	8006da8 <addbuttonCommand+0x94>
}
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	b005      	add	sp, #20
 8006d7e:	bcc0      	pop	{r6, r7}
 8006d80:	46b9      	mov	r9, r7
 8006d82:	46b0      	mov	r8, r6
 8006d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006d86:	464a      	mov	r2, r9
 8006d88:	0020      	movs	r0, r4
 8006d8a:	4912      	ldr	r1, [pc, #72]	; (8006dd4 <addbuttonCommand+0xc0>)
 8006d8c:	f00d f939 	bl	8014002 <strncmp>
		type =ONOFF_NO;
 8006d90:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d0e1      	beq.n	8006d5a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006d96:	464a      	mov	r2, r9
 8006d98:	0020      	movs	r0, r4
 8006d9a:	490f      	ldr	r1, [pc, #60]	; (8006dd8 <addbuttonCommand+0xc4>)
 8006d9c:	f00d f931 	bl	8014002 <strncmp>
		type =ONOFF_NC;
 8006da0:	4243      	negs	r3, r0
 8006da2:	4158      	adcs	r0, r3
 8006da4:	0087      	lsls	r7, r0, #2
 8006da6:	e7d8      	b.n	8006d5a <addbuttonCommand+0x46>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006da8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006daa:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006dac:	490b      	ldr	r1, [pc, #44]	; (8006ddc <addbuttonCommand+0xc8>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006dae:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006db0:	0023      	movs	r3, r4
 8006db2:	4640      	mov	r0, r8
 8006db4:	9400      	str	r4, [sp, #0]
 8006db6:	f00d f8e1 	bl	8013f7c <sprintf>
 8006dba:	e7de      	b.n	8006d7a <addbuttonCommand+0x66>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f00c fc24 	bl	801360a <atol>
 8006dc2:	b2c4      	uxtb	r4, r0
 8006dc4:	e7d3      	b.n	8006d6e <addbuttonCommand+0x5a>
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	20001910 	.word	0x20001910
 8006dcc:	0801b904 	.word	0x0801b904
 8006dd0:	0801b914 	.word	0x0801b914
 8006dd4:	0801b924 	.word	0x0801b924
 8006dd8:	0801b930 	.word	0x0801b930
 8006ddc:	0801b93c 	.word	0x0801b93c

08006de0 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	46de      	mov	lr, fp
 8006de4:	4657      	mov	r7, sl
 8006de6:	4645      	mov	r5, r8
 8006de8:	464e      	mov	r6, r9
 8006dea:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006dec:	2500      	movs	r5, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dee:	0014      	movs	r4, r2
 8006df0:	b099      	sub	sp, #100	; 0x64
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006df2:	2206      	movs	r2, #6
 8006df4:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df6:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006df8:	a810      	add	r0, sp, #64	; 0x40
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006dfa:	9508      	str	r5, [sp, #32]
 8006dfc:	9509      	str	r5, [sp, #36]	; 0x24
 8006dfe:	950a      	str	r5, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006e00:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e02:	950c      	str	r5, [sp, #48]	; 0x30
 8006e04:	950d      	str	r5, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006e06:	950e      	str	r5, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006e08:	950f      	str	r5, [sp, #60]	; 0x3c
 8006e0a:	f00c fec6 	bl	8013b9a <memset>
 8006e0e:	2206      	movs	r2, #6
 8006e10:	2100      	movs	r1, #0
 8006e12:	a813      	add	r0, sp, #76	; 0x4c
 8006e14:	9512      	str	r5, [sp, #72]	; 0x48
 8006e16:	f00c fec0 	bl	8013b9a <memset>
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	a816      	add	r0, sp, #88	; 0x58
 8006e20:	9515      	str	r5, [sp, #84]	; 0x54
 8006e22:	f00c feba 	bl	8013b9a <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e26:	aa08      	add	r2, sp, #32
 8006e28:	2101      	movs	r1, #1
 8006e2a:	0020      	movs	r0, r4
 8006e2c:	f007 f9ac 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006e30:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e32:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006e34:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e36:	4692      	mov	sl, r2
	if(pcParameterString1[0] == 'P'){
 8006e38:	2b50      	cmp	r3, #80	; 0x50
 8006e3a:	d100      	bne.n	8006e3e <scastCommand+0x5e>
 8006e3c:	e089      	b.n	8006f52 <scastCommand+0x172>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e3e:	2102      	movs	r1, #2
 8006e40:	aa09      	add	r2, sp, #36	; 0x24
 8006e42:	0020      	movs	r0, r4
 8006e44:	f007 f9a0 	bl	800e188 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e4a:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006e4c:	a80f      	add	r0, sp, #60	; 0x3c
 8006e4e:	f00d f8ea 	bl	8014026 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006e52:	a80f      	add	r0, sp, #60	; 0x3c
 8006e54:	f7fd fb80 	bl	8004558 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e58:	aa0a      	add	r2, sp, #40	; 0x28
 8006e5a:	2103      	movs	r1, #3
	srcM =(uint8_t )GetID(par1);
 8006e5c:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e5e:	0020      	movs	r0, r4
 8006e60:	f007 f992 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006e64:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e66:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006e68:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e6a:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d06a      	beq.n	8006f46 <scastCommand+0x166>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006e70:	2104      	movs	r1, #4
 8006e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e74:	0020      	movs	r0, r4
 8006e76:	f007 f987 	bl	800e188 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006e7c:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006e7e:	a812      	add	r0, sp, #72	; 0x48
 8006e80:	f00d f8d1 	bl	8014026 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006e84:	a812      	add	r0, sp, #72	; 0x48
 8006e86:	f7fd fb67 	bl	8004558 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006e8a:	2105      	movs	r1, #5
 8006e8c:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006e8e:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006e90:	0020      	movs	r0, r4
 8006e92:	f007 f979 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e98:	4931      	ldr	r1, [pc, #196]	; (8006f60 <scastCommand+0x180>)
 8006e9a:	001a      	movs	r2, r3
 8006e9c:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006e9e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ea0:	f00d f8af 	bl	8014002 <strncmp>
		direction =FORWARD;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4698      	mov	r8, r3
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d008      	beq.n	8006ebe <scastCommand+0xde>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006eac:	464a      	mov	r2, r9
 8006eae:	0028      	movs	r0, r5
 8006eb0:	492c      	ldr	r1, [pc, #176]	; (8006f64 <scastCommand+0x184>)
 8006eb2:	f00d f8a6 	bl	8014002 <strncmp>
		direction =BACKWARD;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4698      	mov	r8, r3
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d12a      	bne.n	8006f14 <scastCommand+0x134>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006ebe:	0029      	movs	r1, r5
 8006ec0:	464a      	mov	r2, r9
 8006ec2:	a815      	add	r0, sp, #84	; 0x54
 8006ec4:	f00d f8af 	bl	8014026 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006ec8:	2106      	movs	r1, #6
 8006eca:	aa0d      	add	r2, sp, #52	; 0x34
 8006ecc:	0020      	movs	r0, r4
 8006ece:	f007 f95b 	bl	800e188 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ed2:	f00c fb9a 	bl	801360a <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ed6:	2107      	movs	r1, #7
 8006ed8:	aa0e      	add	r2, sp, #56	; 0x38
	count =(uint32_t )atol((char* )pcParameterString6);
 8006eda:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006edc:	0020      	movs	r0, r4
 8006ede:	f007 f953 	bl	800e188 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ee2:	f00c fb92 	bl	801360a <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	4643      	mov	r3, r8
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006eec:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006eee:	9002      	str	r0, [sp, #8]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	465a      	mov	r2, fp
 8006ef4:	003b      	movs	r3, r7
 8006ef6:	0031      	movs	r1, r6
 8006ef8:	4650      	mov	r0, sl
 8006efa:	9501      	str	r5, [sp, #4]
 8006efc:	f001 fad6 	bl	80084ac <StartScastDMAStream>
	if(result == BOS_OK){
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d011      	beq.n	8006f28 <scastCommand+0x148>
}
 8006f04:	2000      	movs	r0, #0
 8006f06:	b019      	add	sp, #100	; 0x64
 8006f08:	bcf0      	pop	{r4, r5, r6, r7}
 8006f0a:	46bb      	mov	fp, r7
 8006f0c:	46b2      	mov	sl, r6
 8006f0e:	46a9      	mov	r9, r5
 8006f10:	46a0      	mov	r8, r4
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006f14:	464a      	mov	r2, r9
 8006f16:	0028      	movs	r0, r5
 8006f18:	4913      	ldr	r1, [pc, #76]	; (8006f68 <scastCommand+0x188>)
 8006f1a:	f00d f872 	bl	8014002 <strncmp>
		direction =BIDIRECTIONAL;
 8006f1e:	4243      	negs	r3, r0
 8006f20:	4158      	adcs	r0, r3
 8006f22:	0043      	lsls	r3, r0, #1
 8006f24:	4698      	mov	r8, r3
 8006f26:	e7ca      	b.n	8006ebe <scastCommand+0xde>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006f28:	ab12      	add	r3, sp, #72	; 0x48
 8006f2a:	9302      	str	r3, [sp, #8]
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	ab0f      	add	r3, sp, #60	; 0x3c
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	490d      	ldr	r1, [pc, #52]	; (8006f6c <scastCommand+0x18c>)
 8006f36:	4653      	mov	r3, sl
 8006f38:	9807      	ldr	r0, [sp, #28]
 8006f3a:	9404      	str	r4, [sp, #16]
 8006f3c:	9503      	str	r5, [sp, #12]
 8006f3e:	aa15      	add	r2, sp, #84	; 0x54
 8006f40:	f00d f81c 	bl	8013f7c <sprintf>
 8006f44:	e7de      	b.n	8006f04 <scastCommand+0x124>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f46:	3001      	adds	r0, #1
 8006f48:	f00c fb5f 	bl	801360a <atol>
 8006f4c:	b2c3      	uxtb	r3, r0
 8006f4e:	469b      	mov	fp, r3
 8006f50:	e78e      	b.n	8006e70 <scastCommand+0x90>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006f52:	3001      	adds	r0, #1
 8006f54:	f00c fb59 	bl	801360a <atol>
 8006f58:	b2c3      	uxtb	r3, r0
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	e76f      	b.n	8006e3e <scastCommand+0x5e>
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	0801b970 	.word	0x0801b970
 8006f64:	0801b978 	.word	0x0801b978
 8006f68:	0801b984 	.word	0x0801b984
 8006f6c:	0801b994 	.word	0x0801b994

08006f70 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006f72:	4d37      	ldr	r5, [pc, #220]	; (8007050 <infoCommand+0xe0>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f74:	0004      	movs	r4, r0
	if(N > 1)
 8006f76:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f78:	b083      	sub	sp, #12
	if(N > 1)
 8006f7a:	2a01      	cmp	r2, #1
 8006f7c:	d82c      	bhi.n	8006fd8 <infoCommand+0x68>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006f7e:	4935      	ldr	r1, [pc, #212]	; (8007054 <infoCommand+0xe4>)
 8006f80:	f00c fffc 	bl	8013f7c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006f84:	2601      	movs	r6, #1
 8006f86:	0020      	movs	r0, r4
 8006f88:	f7f9 f8c6 	bl	8000118 <strlen>
 8006f8c:	4d32      	ldr	r5, [pc, #200]	; (8007058 <infoCommand+0xe8>)
 8006f8e:	4276      	negs	r6, r6
 8006f90:	2332      	movs	r3, #50	; 0x32
 8006f92:	b282      	uxth	r2, r0
 8006f94:	0021      	movs	r1, r4
 8006f96:	7828      	ldrb	r0, [r5, #0]
 8006f98:	9600      	str	r6, [sp, #0]
 8006f9a:	f006 fd69 	bl	800da70 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006f9e:	2213      	movs	r2, #19
 8006fa0:	492e      	ldr	r1, [pc, #184]	; (800705c <infoCommand+0xec>)
 8006fa2:	0020      	movs	r0, r4
 8006fa4:	f00c fdf0 	bl	8013b88 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006fa8:	0020      	movs	r0, r4
 8006faa:	f7f9 f8b5 	bl	8000118 <strlen>
 8006fae:	2332      	movs	r3, #50	; 0x32
 8006fb0:	b282      	uxth	r2, r0
 8006fb2:	0021      	movs	r1, r4
 8006fb4:	7828      	ldrb	r0, [r5, #0]
 8006fb6:	9600      	str	r6, [sp, #0]
 8006fb8:	f006 fd5a 	bl	800da70 <writePxMutex>
	DisplayTopology(PcPort);
 8006fbc:	7828      	ldrb	r0, [r5, #0]
 8006fbe:	f7fc fffd 	bl	8003fbc <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006fc2:	7828      	ldrb	r0, [r5, #0]
 8006fc4:	f7fd f8ce 	bl	8004164 <DisplayPortsDir>
	sprintf((char* )pcWriteBuffer," ");
 8006fc8:	2202      	movs	r2, #2
 8006fca:	0020      	movs	r0, r4
 8006fcc:	4924      	ldr	r1, [pc, #144]	; (8007060 <infoCommand+0xf0>)
 8006fce:	f00c fddb 	bl	8013b88 <memcpy>
}
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	b003      	add	sp, #12
 8006fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006fd8:	f006 fdf8 	bl	800dbcc <ReadPortsDir>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006fdc:	782a      	ldrb	r2, [r5, #0]
 8006fde:	491d      	ldr	r1, [pc, #116]	; (8007054 <infoCommand+0xe4>)
		result =ReadPortsDir();
 8006fe0:	0006      	movs	r6, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f00c ffca 	bl	8013f7c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006fe8:	2701      	movs	r7, #1
 8006fea:	0020      	movs	r0, r4
 8006fec:	f7f9 f894 	bl	8000118 <strlen>
 8006ff0:	4d19      	ldr	r5, [pc, #100]	; (8007058 <infoCommand+0xe8>)
 8006ff2:	427f      	negs	r7, r7
 8006ff4:	2332      	movs	r3, #50	; 0x32
 8006ff6:	b282      	uxth	r2, r0
 8006ff8:	0021      	movs	r1, r4
 8006ffa:	7828      	ldrb	r0, [r5, #0]
 8006ffc:	9700      	str	r7, [sp, #0]
 8006ffe:	f006 fd37 	bl	800da70 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8007002:	2213      	movs	r2, #19
 8007004:	4915      	ldr	r1, [pc, #84]	; (800705c <infoCommand+0xec>)
 8007006:	0020      	movs	r0, r4
 8007008:	f00c fdbe 	bl	8013b88 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 800700c:	0020      	movs	r0, r4
 800700e:	f7f9 f883 	bl	8000118 <strlen>
 8007012:	2332      	movs	r3, #50	; 0x32
 8007014:	b282      	uxth	r2, r0
 8007016:	0021      	movs	r1, r4
 8007018:	7828      	ldrb	r0, [r5, #0]
 800701a:	9700      	str	r7, [sp, #0]
 800701c:	f006 fd28 	bl	800da70 <writePxMutex>
	DisplayTopology(PcPort);
 8007020:	7828      	ldrb	r0, [r5, #0]
 8007022:	f7fc ffcb 	bl	8003fbc <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007026:	7828      	ldrb	r0, [r5, #0]
 8007028:	f7fd f89c 	bl	8004164 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 800702c:	2e02      	cmp	r6, #2
 800702e:	d1cb      	bne.n	8006fc8 <infoCommand+0x58>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8007030:	2244      	movs	r2, #68	; 0x44
 8007032:	490c      	ldr	r1, [pc, #48]	; (8007064 <infoCommand+0xf4>)
 8007034:	0020      	movs	r0, r4
 8007036:	f00c fda7 	bl	8013b88 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800703a:	0020      	movs	r0, r4
 800703c:	f7f9 f86c 	bl	8000118 <strlen>
 8007040:	2332      	movs	r3, #50	; 0x32
 8007042:	b282      	uxth	r2, r0
 8007044:	0021      	movs	r1, r4
 8007046:	7828      	ldrb	r0, [r5, #0]
 8007048:	9700      	str	r7, [sp, #0]
 800704a:	f006 fd11 	bl	800da70 <writePxMutex>
 800704e:	e7bb      	b.n	8006fc8 <infoCommand+0x58>
 8007050:	20000008 	.word	0x20000008
 8007054:	0801ba1c 	.word	0x0801ba1c
 8007058:	20000c60 	.word	0x20000c60
 800705c:	0801ba38 	.word	0x0801ba38
 8007060:	0801a5d8 	.word	0x0801a5d8
 8007064:	0801ba4c 	.word	0x0801ba4c

08007068 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007068:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 800706a:	2000      	movs	r0, #0
 800706c:	f7fd f8fa 	bl	8004264 <DisplayModuleStatus>
}
 8007070:	2000      	movs	r0, #0
 8007072:	bd10      	pop	{r4, pc}

08007074 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007076:	46de      	mov	lr, fp
 8007078:	464e      	mov	r6, r9
 800707a:	4657      	mov	r7, sl
 800707c:	4645      	mov	r5, r8
	char module[MaxLengthOfAlias + 30] ={0};
 800707e:	2400      	movs	r4, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007080:	b5e0      	push	{r5, r6, r7, lr}
 8007082:	b091      	sub	sp, #68	; 0x44
 8007084:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8007086:	2100      	movs	r1, #0
 8007088:	2223      	movs	r2, #35	; 0x23
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800708a:	0007      	movs	r7, r0
	char module[MaxLengthOfAlias + 30] ={0};
 800708c:	a807      	add	r0, sp, #28
 800708e:	9406      	str	r4, [sp, #24]
 8007090:	f00c fd83 	bl	8013b9a <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8007094:	2206      	movs	r2, #6
 8007096:	2100      	movs	r1, #0
 8007098:	a804      	add	r0, sp, #16
 800709a:	9403      	str	r4, [sp, #12]
 800709c:	f00c fd7d 	bl	8013b9a <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070a0:	4d56      	ldr	r5, [pc, #344]	; (80071fc <groupCommand+0x188>)
 80070a2:	2101      	movs	r1, #1
 80070a4:	002a      	movs	r2, r5
 80070a6:	4648      	mov	r0, r9
 80070a8:	3250      	adds	r2, #80	; 0x50
 80070aa:	f007 f86d 	bl	800e188 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80070ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070b0:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80070b2:	a803      	add	r0, sp, #12
 80070b4:	f00c ffb7 	bl	8014026 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80070b8:	4c51      	ldr	r4, [pc, #324]	; (8007200 <groupCommand+0x18c>)
 80070ba:	0026      	movs	r6, r4
 80070bc:	3664      	adds	r6, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 80070be:	0021      	movs	r1, r4
 80070c0:	a803      	add	r0, sp, #12
 80070c2:	f7f9 f81f 	bl	8000104 <strcmp>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d04d      	beq.n	8007166 <groupCommand+0xf2>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80070ca:	340a      	adds	r4, #10
 80070cc:	42a6      	cmp	r6, r4
 80070ce:	d1f6      	bne.n	80070be <groupCommand+0x4a>
	type =1;
 80070d0:	2301      	movs	r3, #1
 80070d2:	9301      	str	r3, [sp, #4]
	count =2;
 80070d4:	2302      	movs	r3, #2
 80070d6:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 80070d8:	220a      	movs	r2, #10
 80070da:	494a      	ldr	r1, [pc, #296]	; (8007204 <groupCommand+0x190>)
 80070dc:	0038      	movs	r0, r7
	count =2;
 80070de:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80070e0:	f00c fd52 	bl	8013b88 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80070e4:	002a      	movs	r2, r5
 80070e6:	2102      	movs	r1, #2
 80070e8:	4648      	mov	r0, r9
 80070ea:	3258      	adds	r2, #88	; 0x58
 80070ec:	f007 f84c 	bl	800e188 <FreeRTOS_CLIGetParameter>
 80070f0:	1e01      	subs	r1, r0, #0
 80070f2:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 80070f4:	d100      	bne.n	80070f8 <groupCommand+0x84>
 80070f6:	e07c      	b.n	80071f2 <groupCommand+0x17e>
		module[xParameterStringLength] ='\0';
 80070f8:	2300      	movs	r3, #0
 80070fa:	469a      	mov	sl, r3
		if(count > 2)
 80070fc:	3354      	adds	r3, #84	; 0x54
 80070fe:	4698      	mov	r8, r3
			strcat((char* )pcWriteBuffer,", ");
 8007100:	4b41      	ldr	r3, [pc, #260]	; (8007208 <groupCommand+0x194>)
 8007102:	ae06      	add	r6, sp, #24
 8007104:	469b      	mov	fp, r3
 8007106:	e00f      	b.n	8007128 <groupCommand+0xb4>
		strcat((char* )pcWriteBuffer,module);
 8007108:	0031      	movs	r1, r6
 800710a:	0038      	movs	r0, r7
 800710c:	f00c ff56 	bl	8013fbc <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007110:	002a      	movs	r2, r5
 8007112:	4643      	mov	r3, r8
 8007114:	3401      	adds	r4, #1
 8007116:	b261      	sxtb	r1, r4
 8007118:	4648      	mov	r0, r9
 800711a:	3258      	adds	r2, #88	; 0x58
 800711c:	54e9      	strb	r1, [r5, r3]
 800711e:	f007 f833 	bl	800e188 <FreeRTOS_CLIGetParameter>
 8007122:	1e01      	subs	r1, r0, #0
 8007124:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8007126:	d033      	beq.n	8007190 <groupCommand+0x11c>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007128:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800712a:	0030      	movs	r0, r6
 800712c:	0022      	movs	r2, r4
 800712e:	f00c ff7a 	bl	8014026 <strncpy>
		module[xParameterStringLength] ='\0';
 8007132:	4653      	mov	r3, sl
		modID =GetID(module);
 8007134:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8007136:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8007138:	f7fd fa0e 	bl	8004558 <GetID>
		if(modID < 0)
 800713c:	2800      	cmp	r0, #0
 800713e:	db38      	blt.n	80071b2 <groupCommand+0x13e>
		result =AddModuleToGroup(modID,alias);
 8007140:	b2c0      	uxtb	r0, r0
 8007142:	a903      	add	r1, sp, #12
 8007144:	f7fd fad0 	bl	80046e8 <AddModuleToGroup>
		if(result != BOS_OK)
 8007148:	2800      	cmp	r0, #0
 800714a:	d10f      	bne.n	800716c <groupCommand+0xf8>
		if(count > 2)
 800714c:	4643      	mov	r3, r8
 800714e:	56ec      	ldrsb	r4, [r5, r3]
 8007150:	2c02      	cmp	r4, #2
 8007152:	ddd9      	ble.n	8007108 <groupCommand+0x94>
			strcat((char* )pcWriteBuffer,", ");
 8007154:	0038      	movs	r0, r7
 8007156:	f7f8 ffdf 	bl	8000118 <strlen>
 800715a:	2203      	movs	r2, #3
 800715c:	4659      	mov	r1, fp
 800715e:	1838      	adds	r0, r7, r0
 8007160:	f00c fd12 	bl	8013b88 <memcpy>
 8007164:	e7d0      	b.n	8007108 <groupCommand+0x94>
			type =0;
 8007166:	2300      	movs	r3, #0
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	e7b3      	b.n	80070d4 <groupCommand+0x60>
	else if(count == 2)
 800716c:	2354      	movs	r3, #84	; 0x54
 800716e:	56eb      	ldrsb	r3, [r5, r3]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d02c      	beq.n	80071ce <groupCommand+0x15a>
	else if(result == BOS_ERR_Keyword)
 8007174:	2806      	cmp	r0, #6
 8007176:	d024      	beq.n	80071c2 <groupCommand+0x14e>
	else if(result == BOS_ERR_ExistingAlias)
 8007178:	2807      	cmp	r0, #7
 800717a:	d02e      	beq.n	80071da <groupCommand+0x166>
	else if(result == BOS_ERR_ExistingCmd)
 800717c:	2808      	cmp	r0, #8
 800717e:	d032      	beq.n	80071e6 <groupCommand+0x172>
}
 8007180:	2000      	movs	r0, #0
 8007182:	b011      	add	sp, #68	; 0x44
 8007184:	bcf0      	pop	{r4, r5, r6, r7}
 8007186:	46bb      	mov	fp, r7
 8007188:	46b2      	mov	sl, r6
 800718a:	46a9      	mov	r9, r5
 800718c:	46a0      	mov	r8, r4
 800718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007190:	4643      	mov	r3, r8
 8007192:	56eb      	ldrsb	r3, [r5, r3]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d01a      	beq.n	80071ce <groupCommand+0x15a>
	else if(result == BOS_OK && type){
 8007198:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 800719a:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10e      	bne.n	80071be <groupCommand+0x14a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 80071a0:	491a      	ldr	r1, [pc, #104]	; (800720c <groupCommand+0x198>)
 80071a2:	0030      	movs	r0, r6
 80071a4:	f00c feea 	bl	8013f7c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 80071a8:	0031      	movs	r1, r6
 80071aa:	0038      	movs	r0, r7
 80071ac:	f00c ff06 	bl	8013fbc <strcat>
 80071b0:	e7e6      	b.n	8007180 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80071b2:	0032      	movs	r2, r6
 80071b4:	0038      	movs	r0, r7
 80071b6:	4916      	ldr	r1, [pc, #88]	; (8007210 <groupCommand+0x19c>)
 80071b8:	f00c fee0 	bl	8013f7c <sprintf>
	return pdFALSE;
 80071bc:	e7e0      	b.n	8007180 <groupCommand+0x10c>
		sprintf(module,(char* )pcMessageOKnew,alias);
 80071be:	4915      	ldr	r1, [pc, #84]	; (8007214 <groupCommand+0x1a0>)
 80071c0:	e7ef      	b.n	80071a2 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 80071c2:	0038      	movs	r0, r7
 80071c4:	4914      	ldr	r1, [pc, #80]	; (8007218 <groupCommand+0x1a4>)
 80071c6:	aa03      	add	r2, sp, #12
 80071c8:	f00c fed8 	bl	8013f7c <sprintf>
 80071cc:	e7d8      	b.n	8007180 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 80071ce:	0038      	movs	r0, r7
 80071d0:	4912      	ldr	r1, [pc, #72]	; (800721c <groupCommand+0x1a8>)
 80071d2:	aa03      	add	r2, sp, #12
 80071d4:	f00c fed2 	bl	8013f7c <sprintf>
 80071d8:	e7d2      	b.n	8007180 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80071da:	0038      	movs	r0, r7
 80071dc:	4910      	ldr	r1, [pc, #64]	; (8007220 <groupCommand+0x1ac>)
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	f00c fecc 	bl	8013f7c <sprintf>
 80071e4:	e7cc      	b.n	8007180 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 80071e6:	0038      	movs	r0, r7
 80071e8:	490e      	ldr	r1, [pc, #56]	; (8007224 <groupCommand+0x1b0>)
 80071ea:	aa03      	add	r2, sp, #12
 80071ec:	f00c fec6 	bl	8013f7c <sprintf>
 80071f0:	e7c6      	b.n	8007180 <groupCommand+0x10c>
	else if(count == 2)
 80071f2:	572b      	ldrsb	r3, [r5, r4]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d0ea      	beq.n	80071ce <groupCommand+0x15a>
 80071f8:	ae06      	add	r6, sp, #24
 80071fa:	e7cd      	b.n	8007198 <groupCommand+0x124>
 80071fc:	20001910 	.word	0x20001910
 8007200:	20000ae0 	.word	0x20000ae0
 8007204:	0801ba90 	.word	0x0801ba90
 8007208:	0801ba9c 	.word	0x0801ba9c
 800720c:	0801bae8 	.word	0x0801bae8
 8007210:	0801bbbc 	.word	0x0801bbbc
 8007214:	0801bacc 	.word	0x0801bacc
 8007218:	0801bb08 	.word	0x0801bb08
 800721c:	0801baa0 	.word	0x0801baa0
 8007220:	0801bb48 	.word	0x0801bb48
 8007224:	0801bb7c 	.word	0x0801bb7c

08007228 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007228:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800722a:	4c1b      	ldr	r4, [pc, #108]	; (8007298 <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800722c:	0005      	movs	r5, r0
 800722e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007230:	0022      	movs	r2, r4
 8007232:	2101      	movs	r1, #1
 8007234:	3260      	adds	r2, #96	; 0x60
 8007236:	f006 ffa7 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800723a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800723c:	0001      	movs	r1, r0
 800723e:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007240:	2b09      	cmp	r3, #9
 8007242:	dd01      	ble.n	8007248 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007244:	2300      	movs	r3, #0
 8007246:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007248:	4e14      	ldr	r6, [pc, #80]	; (800729c <nameCommand+0x74>)
 800724a:	7830      	ldrb	r0, [r6, #0]
 800724c:	f7fd f9e6 	bl	800461c <NameModule>
	if(result == BOS_OK)
 8007250:	2800      	cmp	r0, #0
 8007252:	d007      	beq.n	8007264 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8007254:	2806      	cmp	r0, #6
 8007256:	d012      	beq.n	800727e <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007258:	2807      	cmp	r0, #7
 800725a:	d00a      	beq.n	8007272 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 800725c:	2808      	cmp	r0, #8
 800725e:	d014      	beq.n	800728a <nameCommand+0x62>
}
 8007260:	2000      	movs	r0, #0
 8007262:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007264:	0028      	movs	r0, r5
 8007266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007268:	7832      	ldrb	r2, [r6, #0]
 800726a:	490d      	ldr	r1, [pc, #52]	; (80072a0 <nameCommand+0x78>)
 800726c:	f00c fe86 	bl	8013f7c <sprintf>
 8007270:	e7f6      	b.n	8007260 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007272:	0028      	movs	r0, r5
 8007274:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007276:	490b      	ldr	r1, [pc, #44]	; (80072a4 <nameCommand+0x7c>)
 8007278:	f00c fe80 	bl	8013f7c <sprintf>
 800727c:	e7f0      	b.n	8007260 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800727e:	0028      	movs	r0, r5
 8007280:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007282:	4909      	ldr	r1, [pc, #36]	; (80072a8 <nameCommand+0x80>)
 8007284:	f00c fe7a 	bl	8013f7c <sprintf>
 8007288:	e7ea      	b.n	8007260 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800728a:	0028      	movs	r0, r5
 800728c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800728e:	4907      	ldr	r1, [pc, #28]	; (80072ac <nameCommand+0x84>)
 8007290:	f00c fe74 	bl	8013f7c <sprintf>
 8007294:	e7e4      	b.n	8007260 <nameCommand+0x38>
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	20001910 	.word	0x20001910
 800729c:	20000aa8 	.word	0x20000aa8
 80072a0:	0801bbe0 	.word	0x0801bbe0
 80072a4:	0801bb48 	.word	0x0801bb48
 80072a8:	0801bb08 	.word	0x0801bb08
 80072ac:	0801bb7c 	.word	0x0801bb7c

080072b0 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072b0:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <pingCommand+0x48>)
 80072b4:	4911      	ldr	r1, [pc, #68]	; (80072fc <pingCommand+0x4c>)
 80072b6:	781a      	ldrb	r2, [r3, #0]
 80072b8:	0093      	lsls	r3, r2, #2
 80072ba:	189b      	adds	r3, r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	5c5c      	ldrb	r4, [r3, r1]
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	d113      	bne.n	80072ec <pingCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80072c4:	490e      	ldr	r1, [pc, #56]	; (8007300 <pingCommand+0x50>)
 80072c6:	f00c fe59 	bl	8013f7c <sprintf>
	RTOS_IND_blink(200);
 80072ca:	2180      	movs	r1, #128	; 0x80
 80072cc:	2201      	movs	r2, #1
 80072ce:	01c9      	lsls	r1, r1, #7
 80072d0:	480c      	ldr	r0, [pc, #48]	; (8007304 <pingCommand+0x54>)
 80072d2:	f00a f9e3 	bl	801169c <HAL_GPIO_WritePin>
 80072d6:	20c8      	movs	r0, #200	; 0xc8
 80072d8:	f006 fdaa 	bl	800de30 <osDelay>
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	2200      	movs	r2, #0
 80072e0:	4808      	ldr	r0, [pc, #32]	; (8007304 <pingCommand+0x54>)
 80072e2:	01c9      	lsls	r1, r1, #7
 80072e4:	f00a f9da 	bl	801169c <HAL_GPIO_WritePin>
}
 80072e8:	2000      	movs	r0, #0
 80072ea:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072ec:	185b      	adds	r3, r3, r1
 80072ee:	4906      	ldr	r1, [pc, #24]	; (8007308 <pingCommand+0x58>)
 80072f0:	f00c fe44 	bl	8013f7c <sprintf>
 80072f4:	e7e9      	b.n	80072ca <pingCommand+0x1a>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20000aa8 	.word	0x20000aa8
 80072fc:	20000e74 	.word	0x20000e74
 8007300:	0801bbf8 	.word	0x0801bbf8
 8007304:	48000800 	.word	0x48000800
 8007308:	0801bc0c 	.word	0x0801bc0c

0800730c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800730c:	b510      	push	{r4, lr}
 800730e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007310:	2241      	movs	r2, #65	; 0x41
 8007312:	4904      	ldr	r1, [pc, #16]	; (8007324 <prvRunTimeStatsCommand+0x18>)
 8007314:	f00c fc38 	bl	8013b88 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007318:	0020      	movs	r0, r4
 800731a:	3040      	adds	r0, #64	; 0x40
 800731c:	f007 ffec 	bl	800f2f8 <vTaskGetRunTimeStats>
}
 8007320:	2000      	movs	r0, #0
 8007322:	bd10      	pop	{r4, pc}
 8007324:	0801bc28 	.word	0x0801bc28

08007328 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007328:	b510      	push	{r4, lr}
 800732a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800732c:	2250      	movs	r2, #80	; 0x50
 800732e:	4904      	ldr	r1, [pc, #16]	; (8007340 <prvTaskStatsCommand+0x18>)
 8007330:	f00c fc2a 	bl	8013b88 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007334:	0020      	movs	r0, r4
 8007336:	304f      	adds	r0, #79	; 0x4f
 8007338:	f007 ff6e 	bl	800f218 <vTaskList>
}
 800733c:	2000      	movs	r0, #0
 800733e:	bd10      	pop	{r4, pc}
 8007340:	0801bc6c 	.word	0x0801bc6c

08007344 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007344:	b510      	push	{r4, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	0004      	movs	r4, r0
	GetTimeDate();
 800734a:	f006 f96d 	bl	800d628 <GetTimeDate>
	if(BOS.hourformat == 24)
 800734e:	4915      	ldr	r1, [pc, #84]	; (80073a4 <timeCommand+0x60>)
 8007350:	7b4b      	ldrb	r3, [r1, #13]
 8007352:	2b18      	cmp	r3, #24
 8007354:	d00d      	beq.n	8007372 <timeCommand+0x2e>
	else if(BOS.hourformat == 12){
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d002      	beq.n	8007360 <timeCommand+0x1c>
}
 800735a:	2000      	movs	r0, #0
 800735c:	b004      	add	sp, #16
 800735e:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007360:	7ccb      	ldrb	r3, [r1, #19]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d010      	beq.n	8007388 <timeCommand+0x44>
		else if(BOS.time.ampm == RTC_PM)
 8007366:	2b02      	cmp	r3, #2
 8007368:	d1f7      	bne.n	800735a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800736a:	7c4b      	ldrb	r3, [r1, #17]
 800736c:	7c8a      	ldrb	r2, [r1, #18]
 800736e:	480e      	ldr	r0, [pc, #56]	; (80073a8 <timeCommand+0x64>)
 8007370:	e00d      	b.n	800738e <timeCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007372:	89c8      	ldrh	r0, [r1, #14]
 8007374:	7c4b      	ldrb	r3, [r1, #17]
 8007376:	7c8a      	ldrb	r2, [r1, #18]
 8007378:	9001      	str	r0, [sp, #4]
 800737a:	7c09      	ldrb	r1, [r1, #16]
 800737c:	0020      	movs	r0, r4
 800737e:	9100      	str	r1, [sp, #0]
 8007380:	490a      	ldr	r1, [pc, #40]	; (80073ac <timeCommand+0x68>)
 8007382:	f00c fdfb 	bl	8013f7c <sprintf>
 8007386:	e7e8      	b.n	800735a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8007388:	7c4b      	ldrb	r3, [r1, #17]
 800738a:	7c8a      	ldrb	r2, [r1, #18]
 800738c:	4808      	ldr	r0, [pc, #32]	; (80073b0 <timeCommand+0x6c>)
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800738e:	9002      	str	r0, [sp, #8]
 8007390:	89c8      	ldrh	r0, [r1, #14]
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	7c09      	ldrb	r1, [r1, #16]
 8007396:	0020      	movs	r0, r4
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	4906      	ldr	r1, [pc, #24]	; (80073b4 <timeCommand+0x70>)
 800739c:	f00c fdee 	bl	8013f7c <sprintf>
 80073a0:	e7db      	b.n	800735a <timeCommand+0x16>
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	20000b54 	.word	0x20000b54
 80073a8:	0801bd14 	.word	0x0801bd14
 80073ac:	0801bcbc 	.word	0x0801bcbc
 80073b0:	0801bd10 	.word	0x0801bd10
 80073b4:	0801bce4 	.word	0x0801bce4

080073b8 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ba:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073bc:	4c4e      	ldr	r4, [pc, #312]	; (80074f8 <bootloaderUpdateCommand+0x140>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073be:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073c0:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073c2:	2300      	movs	r3, #0
 80073c4:	b500      	push	{lr}
 80073c6:	0006      	movs	r6, r0
 80073c8:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073ca:	2101      	movs	r1, #1
 80073cc:	0028      	movs	r0, r5
 80073ce:	3268      	adds	r2, #104	; 0x68
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073d0:	2700      	movs	r7, #0
 80073d2:	4698      	mov	r8, r3
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073d4:	f006 fed8 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80073d8:	2800      	cmp	r0, #0
 80073da:	d063      	beq.n	80074a4 <bootloaderUpdateCommand+0xec>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80073dc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80073de:	4947      	ldr	r1, [pc, #284]	; (80074fc <bootloaderUpdateCommand+0x144>)
 80073e0:	f00c fe0f 	bl	8014002 <strncmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d133      	bne.n	8007450 <bootloaderUpdateCommand+0x98>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80073e8:	0022      	movs	r2, r4
 80073ea:	2102      	movs	r1, #2
 80073ec:	0028      	movs	r0, r5
 80073ee:	326c      	adds	r2, #108	; 0x6c
 80073f0:	f006 feca 	bl	800e188 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80073f4:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80073f6:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80073f8:	3274      	adds	r2, #116	; 0x74
 80073fa:	0028      	movs	r0, r5
 80073fc:	2103      	movs	r1, #3
 80073fe:	f006 fec3 	bl	800e188 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8007402:	2200      	movs	r2, #0
 8007404:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007406:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8007408:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 800740a:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 800740c:	2a23      	cmp	r2, #35	; 0x23
 800740e:	d042      	beq.n	8007496 <bootloaderUpdateCommand+0xde>
			if(pcParameterString3[0] == 'p'){
 8007410:	2300      	movs	r3, #0
 8007412:	56c3      	ldrsb	r3, [r0, r3]
 8007414:	2b70      	cmp	r3, #112	; 0x70
 8007416:	d038      	beq.n	800748a <bootloaderUpdateCommand+0xd2>
				result =BOS_ERR_WrongValue;
 8007418:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 800741a:	4c39      	ldr	r4, [pc, #228]	; (8007500 <bootloaderUpdateCommand+0x148>)
 800741c:	7823      	ldrb	r3, [r4, #0]
 800741e:	42bb      	cmp	r3, r7
 8007420:	d020      	beq.n	8007464 <bootloaderUpdateCommand+0xac>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007422:	2200      	movs	r2, #0
 8007424:	4b37      	ldr	r3, [pc, #220]	; (8007504 <bootloaderUpdateCommand+0x14c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007426:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007428:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 800742a:	4642      	mov	r2, r8
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <bootloaderUpdateCommand+0x150>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800742e:	0038      	movs	r0, r7
				messageParams[0] =port;
 8007430:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007432:	2201      	movs	r2, #1
 8007434:	f001 f804 	bl	8008440 <SendMessageToModule>
				osDelay(100);
 8007438:	2064      	movs	r0, #100	; 0x64
 800743a:	f006 fcf9 	bl	800de30 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800743e:	4b33      	ldr	r3, [pc, #204]	; (800750c <bootloaderUpdateCommand+0x154>)
 8007440:	0039      	movs	r1, r7
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	7820      	ldrb	r0, [r4, #0]
 8007446:	4643      	mov	r3, r8
 8007448:	f003 f8b4 	bl	800a5b4 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800744c:	2d68      	cmp	r5, #104	; 0x68
 800744e:	d104      	bne.n	800745a <bootloaderUpdateCommand+0xa2>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007450:	220f      	movs	r2, #15
 8007452:	0030      	movs	r0, r6
 8007454:	492e      	ldr	r1, [pc, #184]	; (8007510 <bootloaderUpdateCommand+0x158>)
 8007456:	f00c fb97 	bl	8013b88 <memcpy>
}
 800745a:	2000      	movs	r0, #0
 800745c:	b002      	add	sp, #8
 800745e:	bc80      	pop	{r7}
 8007460:	46b8      	mov	r8, r7
 8007462:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007464:	2300      	movs	r3, #0
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	4640      	mov	r0, r8
 800746e:	3319      	adds	r3, #25
 8007470:	f000 fd76 	bl	8007f60 <SendMessageFromPort>
				osDelay(100);
 8007474:	2064      	movs	r0, #100	; 0x64
 8007476:	f006 fcdb 	bl	800de30 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800747a:	7820      	ldrb	r0, [r4, #0]
 800747c:	4b23      	ldr	r3, [pc, #140]	; (800750c <bootloaderUpdateCommand+0x154>)
 800747e:	0001      	movs	r1, r0
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	4643      	mov	r3, r8
 8007484:	f003 f896 	bl	800a5b4 <remoteBootloaderUpdate>
 8007488:	e7e0      	b.n	800744c <bootloaderUpdateCommand+0x94>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800748a:	3001      	adds	r0, #1
 800748c:	f00c f8bd 	bl	801360a <atol>
 8007490:	b2c3      	uxtb	r3, r0
 8007492:	4698      	mov	r8, r3
 8007494:	e7c1      	b.n	800741a <bootloaderUpdateCommand+0x62>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007496:	1c58      	adds	r0, r3, #1
 8007498:	f00c f8b7 	bl	801360a <atol>
	BOS_Status result =BOS_OK;
 800749c:	2500      	movs	r5, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800749e:	b2c7      	uxtb	r7, r0
			if(pcParameterString3[0] == 'p'){
 80074a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80074a2:	e7b5      	b.n	8007410 <bootloaderUpdateCommand+0x58>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80074a4:	4b16      	ldr	r3, [pc, #88]	; (8007500 <bootloaderUpdateCommand+0x148>)
 80074a6:	0030      	movs	r0, r6
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	491a      	ldr	r1, [pc, #104]	; (8007514 <bootloaderUpdateCommand+0x15c>)
 80074ac:	f00c fd66 	bl	8013f7c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80074b0:	4b19      	ldr	r3, [pc, #100]	; (8007518 <bootloaderUpdateCommand+0x160>)
 80074b2:	0030      	movs	r0, r6
 80074b4:	6819      	ldr	r1, [r3, #0]
 80074b6:	f00c fd81 	bl	8013fbc <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80074ba:	0030      	movs	r0, r6
 80074bc:	f7f8 fe2c 	bl	8000118 <strlen>
 80074c0:	4b12      	ldr	r3, [pc, #72]	; (800750c <bootloaderUpdateCommand+0x154>)
 80074c2:	b282      	uxth	r2, r0
 80074c4:	7818      	ldrb	r0, [r3, #0]
 80074c6:	2301      	movs	r3, #1
 80074c8:	425b      	negs	r3, r3
 80074ca:	0031      	movs	r1, r6
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	3333      	adds	r3, #51	; 0x33
 80074d0:	f006 face 	bl	800da70 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80074d4:	4b11      	ldr	r3, [pc, #68]	; (800751c <bootloaderUpdateCommand+0x164>)
 80074d6:	4a12      	ldr	r2, [pc, #72]	; (8007520 <bootloaderUpdateCommand+0x168>)
		osDelay(10);
 80074d8:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80074da:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80074dc:	2201      	movs	r2, #1
 80074de:	4b11      	ldr	r3, [pc, #68]	; (8007524 <bootloaderUpdateCommand+0x16c>)
 80074e0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80074e2:	f006 fca5 	bl	800de30 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <bootloaderUpdateCommand+0x170>)
 80074ec:	4a0f      	ldr	r2, [pc, #60]	; (800752c <bootloaderUpdateCommand+0x174>)
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	e7fd      	b.n	80074f4 <bootloaderUpdateCommand+0x13c>
 80074f8:	20001910 	.word	0x20001910
 80074fc:	0801bd38 	.word	0x0801bd38
 8007500:	20000aa8 	.word	0x20000aa8
 8007504:	20000b4c 	.word	0x20000b4c
 8007508:	20000b74 	.word	0x20000b74
 800750c:	20000c60 	.word	0x20000c60
 8007510:	0801b6a0 	.word	0x0801b6a0
 8007514:	0801bd18 	.word	0x0801bd18
 8007518:	20000060 	.word	0x20000060
 800751c:	20007ff0 	.word	0x20007ff0
 8007520:	deadbeef 	.word	0xdeadbeef
 8007524:	200011ef 	.word	0x200011ef
 8007528:	e000ed00 	.word	0xe000ed00
 800752c:	05fa0004 	.word	0x05fa0004

08007530 <RegisterUserCLICommands>:
}
 8007530:	4770      	bx	lr
 8007532:	46c0      	nop			; (mov r8, r8)

08007534 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007534:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007536:	4c46      	ldr	r4, [pc, #280]	; (8007650 <vRegisterCLICommands+0x11c>)
 8007538:	0020      	movs	r0, r4
 800753a:	3024      	adds	r0, #36	; 0x24
 800753c:	f006 fd86 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007540:	0020      	movs	r0, r4
 8007542:	3034      	adds	r0, #52	; 0x34
 8007544:	f006 fd82 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007548:	0020      	movs	r0, r4
 800754a:	3044      	adds	r0, #68	; 0x44
 800754c:	f006 fd7e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007550:	0020      	movs	r0, r4
 8007552:	3054      	adds	r0, #84	; 0x54
 8007554:	f006 fd7a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007558:	0020      	movs	r0, r4
 800755a:	3064      	adds	r0, #100	; 0x64
 800755c:	f006 fd76 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007560:	0020      	movs	r0, r4
 8007562:	3074      	adds	r0, #116	; 0x74
 8007564:	f006 fd72 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007568:	4c3a      	ldr	r4, [pc, #232]	; (8007654 <vRegisterCLICommands+0x120>)
 800756a:	1d20      	adds	r0, r4, #4
 800756c:	f006 fd6e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007570:	0020      	movs	r0, r4
 8007572:	3014      	adds	r0, #20
 8007574:	f006 fd6a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007578:	0020      	movs	r0, r4
 800757a:	3024      	adds	r0, #36	; 0x24
 800757c:	f006 fd66 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007580:	0020      	movs	r0, r4
 8007582:	3034      	adds	r0, #52	; 0x34
 8007584:	f006 fd62 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007588:	0020      	movs	r0, r4
 800758a:	3044      	adds	r0, #68	; 0x44
 800758c:	f006 fd5e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007590:	0020      	movs	r0, r4
 8007592:	3054      	adds	r0, #84	; 0x54
 8007594:	f006 fd5a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007598:	0020      	movs	r0, r4
 800759a:	3064      	adds	r0, #100	; 0x64
 800759c:	f006 fd56 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80075a0:	0020      	movs	r0, r4
 80075a2:	3074      	adds	r0, #116	; 0x74
 80075a4:	f006 fd52 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80075a8:	4c2b      	ldr	r4, [pc, #172]	; (8007658 <vRegisterCLICommands+0x124>)
 80075aa:	1d20      	adds	r0, r4, #4
 80075ac:	f006 fd4e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80075b0:	0020      	movs	r0, r4
 80075b2:	3014      	adds	r0, #20
 80075b4:	f006 fd4a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80075b8:	0020      	movs	r0, r4
 80075ba:	3024      	adds	r0, #36	; 0x24
 80075bc:	f006 fd46 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80075c0:	0020      	movs	r0, r4
 80075c2:	3034      	adds	r0, #52	; 0x34
 80075c4:	f006 fd42 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80075c8:	0020      	movs	r0, r4
 80075ca:	3044      	adds	r0, #68	; 0x44
 80075cc:	f006 fd3e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80075d0:	0020      	movs	r0, r4
 80075d2:	3054      	adds	r0, #84	; 0x54
 80075d4:	f006 fd3a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80075d8:	0020      	movs	r0, r4
 80075da:	3064      	adds	r0, #100	; 0x64
 80075dc:	f006 fd36 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80075e0:	0020      	movs	r0, r4
 80075e2:	3074      	adds	r0, #116	; 0x74
 80075e4:	f006 fd32 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80075e8:	4c1c      	ldr	r4, [pc, #112]	; (800765c <vRegisterCLICommands+0x128>)
 80075ea:	1d20      	adds	r0, r4, #4
 80075ec:	f006 fd2e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80075f0:	0020      	movs	r0, r4
 80075f2:	3014      	adds	r0, #20
 80075f4:	f006 fd2a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80075f8:	0020      	movs	r0, r4
 80075fa:	3024      	adds	r0, #36	; 0x24
 80075fc:	f006 fd26 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007600:	0020      	movs	r0, r4
 8007602:	3034      	adds	r0, #52	; 0x34
 8007604:	f006 fd22 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007608:	0020      	movs	r0, r4
 800760a:	3044      	adds	r0, #68	; 0x44
 800760c:	f006 fd1e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007610:	0020      	movs	r0, r4
 8007612:	3054      	adds	r0, #84	; 0x54
 8007614:	f006 fd1a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007618:	0020      	movs	r0, r4
 800761a:	3064      	adds	r0, #100	; 0x64
 800761c:	f006 fd16 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007620:	0020      	movs	r0, r4
 8007622:	3074      	adds	r0, #116	; 0x74
 8007624:	f006 fd12 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007628:	4c0d      	ldr	r4, [pc, #52]	; (8007660 <vRegisterCLICommands+0x12c>)
 800762a:	1d20      	adds	r0, r4, #4
 800762c:	f006 fd0e 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007630:	0020      	movs	r0, r4
 8007632:	3014      	adds	r0, #20
 8007634:	f006 fd0a 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007638:	0020      	movs	r0, r4
 800763a:	3024      	adds	r0, #36	; 0x24
 800763c:	f006 fd06 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007640:	2223      	movs	r2, #35	; 0x23
 8007642:	4b08      	ldr	r3, [pc, #32]	; (8007664 <vRegisterCLICommands+0x130>)
 8007644:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007646:	f003 f85f 	bl	800a708 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800764a:	f7ff ff71 	bl	8007530 <RegisterUserCLICommands>
}
 800764e:	bd10      	pop	{r4, pc}
 8007650:	08019e80 	.word	0x08019e80
 8007654:	08019f00 	.word	0x08019f00
 8007658:	08019f80 	.word	0x08019f80
 800765c:	0801a000 	.word	0x0801a000
 8007660:	0801a080 	.word	0x0801a080
 8007664:	200011ec 	.word	0x200011ec

08007668 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	46c6      	mov	lr, r8
 800766c:	b500      	push	{lr}
 800766e:	0005      	movs	r5, r0
 8007670:	000e      	movs	r6, r1
 8007672:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007674:	f003 f860 	bl	800a738 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 800767a:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800767c:	4698      	mov	r8, r3
 800767e:	5c1b      	ldrb	r3, [r3, r0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d905      	bls.n	8007690 <StartDMAstream+0x28>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007684:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007686:	2b03      	cmp	r3, #3
 8007688:	d002      	beq.n	8007690 <StartDMAstream+0x28>
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
	
	return BOS_OK;
}
 800768a:	bc80      	pop	{r7}
 800768c:	46b8      	mov	r8, r7
 800768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwitchMsgDMAToStream(srcPort);
 8007690:	0020      	movs	r0, r4
 8007692:	f003 fbb9 	bl	800ae08 <SwitchMsgDMAToStream>
	dmaStreamDst[srcPort - 1] =huartDst;
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <StartDMAstream+0x54>)
 8007698:	1e62      	subs	r2, r4, #1
 800769a:	0092      	lsls	r2, r2, #2
 800769c:	50d6      	str	r6, [r2, r3]
	portStatus[srcPort] =STREAM;
 800769e:	2102      	movs	r1, #2
	dmaStreamCount[srcPort - 1] =0;
 80076a0:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 80076a2:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 80076a4:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 80076a6:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 80076a8:	615a      	str	r2, [r3, #20]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076aa:	0028      	movs	r0, r5
 80076ac:	003a      	movs	r2, r7
 80076ae:	0031      	movs	r1, r6
 80076b0:	f003 ff7c 	bl	800b5ac <DMA_STREAM_Setup>
	return BOS_OK;
 80076b4:	2000      	movs	r0, #0
 80076b6:	e7e8      	b.n	800768a <StartDMAstream+0x22>
 80076b8:	20000c64 	.word	0x20000c64
 80076bc:	2000198c 	.word	0x2000198c

080076c0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076c0:	b570      	push	{r4, r5, r6, lr}
	if(portStatus[port] != STREAM){
 80076c2:	4b12      	ldr	r3, [pc, #72]	; (800770c <DMA_IRQHandler+0x4c>)
void DMA_IRQHandler(uint8_t port){
 80076c4:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80076c6:	5c1b      	ldrb	r3, [r3, r0]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d008      	beq.n	80076de <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076cc:	3c01      	subs	r4, #1
 80076ce:	00e0      	lsls	r0, r4, #3
 80076d0:	1b00      	subs	r0, r0, r4
 80076d2:	4c0f      	ldr	r4, [pc, #60]	; (8007710 <DMA_IRQHandler+0x50>)
 80076d4:	00c0      	lsls	r0, r0, #3
 80076d6:	1900      	adds	r0, r0, r4
 80076d8:	f008 ffb4 	bl	8010644 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80076dc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076de:	1e45      	subs	r5, r0, #1
 80076e0:	00e8      	lsls	r0, r5, #3
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <DMA_IRQHandler+0x54>)
 80076e4:	1b40      	subs	r0, r0, r5
 80076e6:	00c0      	lsls	r0, r0, #3
 80076e8:	18c0      	adds	r0, r0, r3
 80076ea:	f008 ffab 	bl	8010644 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <DMA_IRQHandler+0x58>)
 80076f0:	00ad      	lsls	r5, r5, #2
 80076f2:	195d      	adds	r5, r3, r5
 80076f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d004      	beq.n	8007704 <DMA_IRQHandler+0x44>
			++dmaStreamCount[port - 1];
 80076fa:	696b      	ldr	r3, [r5, #20]
 80076fc:	3301      	adds	r3, #1
 80076fe:	616b      	str	r3, [r5, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007700:	429a      	cmp	r2, r3
 8007702:	d8eb      	bhi.n	80076dc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007704:	0020      	movs	r0, r4
 8007706:	f003 fb67 	bl	800add8 <StopStreamDMA>
 800770a:	e7e7      	b.n	80076dc <DMA_IRQHandler+0x1c>
 800770c:	20000c64 	.word	0x20000c64
 8007710:	200026f8 	.word	0x200026f8
 8007714:	20002500 	.word	0x20002500
 8007718:	2000198c 	.word	0x2000198c

0800771c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <ResetUartORE+0x24>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	2308      	movs	r3, #8
 8007722:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007724:	4a07      	ldr	r2, [pc, #28]	; (8007744 <ResetUartORE+0x28>)
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800772a:	4a07      	ldr	r2, [pc, #28]	; (8007748 <ResetUartORE+0x2c>)
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007730:	4a06      	ldr	r2, [pc, #24]	; (800774c <ResetUartORE+0x30>)
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007736:	4a06      	ldr	r2, [pc, #24]	; (8007750 <ResetUartORE+0x34>)
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	6213      	str	r3, [r2, #32]
#endif
}
 800773c:	4770      	bx	lr
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	200023c4 	.word	0x200023c4
 8007744:	20002354 	.word	0x20002354
 8007748:	200022e4 	.word	0x200022e4
 800774c:	20002274 	.word	0x20002274
 8007750:	20002204 	.word	0x20002204

08007754 <ExecuteMonitor.part.0>:
	
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007756:	2300      	movs	r3, #0
void ExecuteMonitor(void)
 8007758:	46de      	mov	lr, fp
 800775a:	4645      	mov	r5, r8
 800775c:	4657      	mov	r7, sl
 800775e:	464e      	mov	r6, r9
	Monitor_time =0;
 8007760:	4acf      	ldr	r2, [pc, #828]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
void ExecuteMonitor(void)
 8007762:	b5e0      	push	{r5, r6, r7, lr}
	Monitor_time =0;
 8007764:	6013      	str	r3, [r2, #0]
	flag=0;
 8007766:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 8007768:	3320      	adds	r3, #32
 800776a:	7153      	strb	r3, [r2, #5]
 800776c:	4bcd      	ldr	r3, [pc, #820]	; (8007aa4 <ExecuteMonitor.part.0+0x350>)
 800776e:	4dce      	ldr	r5, [pc, #824]	; (8007aa8 <ExecuteMonitor.part.0+0x354>)
 8007770:	469b      	mov	fp, r3
 8007772:	4cce      	ldr	r4, [pc, #824]	; (8007aac <ExecuteMonitor.part.0+0x358>)
	for (;;)
	{
		//giving initial value to currentCharacter and perviousCharacter to avoid writing in the nonProcessingParameter matrix  in case of non-transmission from STM32CubeMonitorIDE
		                    nonProcessingParameterIndex=0;
 8007774:	2300      	movs	r3, #0
 8007776:	702b      	strb	r3, [r5, #0]
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
								perviousCharacter=currentCharacter;
								currentCharacter= INTIAL_VALUE;
							}
				            }
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007778:	3320      	adds	r3, #32
		            	    perviousCharacter= INTIAL_VALUE;
 800777a:	2703      	movs	r7, #3
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800777c:	4698      	mov	r8, r3
 800777e:	e006      	b.n	800778e <ExecuteMonitor.part.0+0x3a>
 8007780:	4bc7      	ldr	r3, [pc, #796]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d040      	beq.n	800780a <ExecuteMonitor.part.0+0xb6>
 8007788:	2b02      	cmp	r3, #2
 800778a:	d100      	bne.n	800778e <ExecuteMonitor.part.0+0x3a>
 800778c:	e0a5      	b.n	80078da <ExecuteMonitor.part.0+0x186>
		            	    Delay_us(100);
 800778e:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007790:	706f      	strb	r7, [r5, #1]
		            	    Delay_us(100);
 8007792:	f005 ffdf 	bl	800d754 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007796:	4bc2      	ldr	r3, [pc, #776]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 8007798:	786a      	ldrb	r2, [r5, #1]
 800779a:	795b      	ldrb	r3, [r3, #5]
 800779c:	429a      	cmp	r2, r3
 800779e:	d007      	beq.n	80077b0 <ExecuteMonitor.part.0+0x5c>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80077a0:	782a      	ldrb	r2, [r5, #0]
								perviousCharacter=currentCharacter;
 80077a2:	706b      	strb	r3, [r5, #1]
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80077a4:	1c51      	adds	r1, r2, #1
 80077a6:	18aa      	adds	r2, r5, r2
 80077a8:	7113      	strb	r3, [r2, #4]
								currentCharacter= INTIAL_VALUE;
 80077aa:	4abd      	ldr	r2, [pc, #756]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80077ac:	7029      	strb	r1, [r5, #0]
								currentCharacter= INTIAL_VALUE;
 80077ae:	7157      	strb	r7, [r2, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80077b0:	4642      	mov	r2, r8
 80077b2:	4393      	bics	r3, r2
 80077b4:	d1e4      	bne.n	8007780 <ExecuteMonitor.part.0+0x2c>


                   if(flag == NonActive)
 80077b6:	4bba      	ldr	r3, [pc, #744]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d123      	bne.n	8007806 <ExecuteMonitor.part.0+0xb2>
                   {
                	   nonProcessingParameterIndex=0;
 80077be:	702b      	strb	r3, [r5, #0]
 		              //first parameter:It's the parameter that has no specific location in the commands.
 		            if(FirstCharacterInParameter == '[')
 80077c0:	792b      	ldrb	r3, [r5, #4]
 80077c2:	2b5b      	cmp	r3, #91	; 0x5b
 80077c4:	d100      	bne.n	80077c8 <ExecuteMonitor.part.0+0x74>
 80077c6:	e10c      	b.n	80079e2 <ExecuteMonitor.part.0+0x28e>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //second parameter:It's the parameter that has specific location in the commands.
 		            else if(FirstCharacterInParameter == '#')
 80077c8:	2b23      	cmp	r3, #35	; 0x23
 80077ca:	d100      	bne.n	80077ce <ExecuteMonitor.part.0+0x7a>
 80077cc:	e0f9      	b.n	80079c2 <ExecuteMonitor.part.0+0x26e>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //third parameter:It's the first parameter in the command
 		            else if(FirstCharacterInParameter == '=')
 80077ce:	2b3d      	cmp	r3, #61	; 0x3d
 80077d0:	d100      	bne.n	80077d4 <ExecuteMonitor.part.0+0x80>
 80077d2:	e142      	b.n	8007a5a <ExecuteMonitor.part.0+0x306>
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 80077d4:	7f2f      	ldrb	r7, [r5, #28]
 80077d6:	2332      	movs	r3, #50	; 0x32
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80077d8:	0028      	movs	r0, r5
 80077da:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 80077dc:	54ef      	strb	r7, [r5, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80077de:	3034      	adds	r0, #52	; 0x34
 80077e0:	1bcf      	subs	r7, r1, r7
 80077e2:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80077e4:	002f      	movs	r7, r5
 80077e6:	371c      	adds	r7, #28
 80077e8:	0039      	movs	r1, r7
 80077ea:	220f      	movs	r2, #15
 80077ec:	f00c f9cc 	bl	8013b88 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80077f0:	2214      	movs	r2, #20
 80077f2:	2100      	movs	r1, #0
 80077f4:	1d28      	adds	r0, r5, #4
 80077f6:	f00c f9d0 	bl	8013b9a <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80077fa:	2214      	movs	r2, #20
 80077fc:	2100      	movs	r1, #0
 80077fe:	0038      	movs	r0, r7
 8007800:	f00c f9cb 	bl	8013b9a <memset>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8007804:	e7b6      	b.n	8007774 <ExecuteMonitor.part.0+0x20>
                   if(flag == RUN_FOR_ONCE)
 8007806:	2b01      	cmp	r3, #1
 8007808:	d164      	bne.n	80078d4 <ExecuteMonitor.part.0+0x180>
                	finalMatrixIndex=0;
 800780a:	2200      	movs	r2, #0
 800780c:	232c      	movs	r3, #44	; 0x2c
                	twoDMatrixIndex=1;
 800780e:	2101      	movs	r1, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007810:	202d      	movs	r0, #45	; 0x2d
                	finalMatrixIndex=0;
 8007812:	54e2      	strb	r2, [r4, r3]
                	twoDMatrixIndex=1;
 8007814:	3301      	adds	r3, #1
 8007816:	54e1      	strb	r1, [r4, r3]
		          	counter=0;
 8007818:	3301      	adds	r3, #1
 800781a:	54e2      	strb	r2, [r4, r3]
		           while(counter != numCommandParameters)
 800781c:	3303      	adds	r3, #3
 800781e:	5cea      	ldrb	r2, [r5, r3]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007820:	4680      	mov	r8, r0
 8007822:	3001      	adds	r0, #1
		           while(counter != numCommandParameters)
 8007824:	2100      	movs	r1, #0
 8007826:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007828:	4681      	mov	r9, r0
		           while(counter != numCommandParameters)
 800782a:	2a00      	cmp	r2, #0
 800782c:	d02e      	beq.n	800788c <ExecuteMonitor.part.0+0x138>
 800782e:	2201      	movs	r2, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007830:	2030      	movs	r0, #48	; 0x30
 8007832:	4682      	mov	sl, r0
 8007834:	0010      	movs	r0, r2
 8007836:	272c      	movs	r7, #44	; 0x2c
 8007838:	001a      	movs	r2, r3
 800783a:	0003      	movs	r3, r0
 800783c:	e002      	b.n	8007844 <ExecuteMonitor.part.0+0xf0>
 800783e:	464b      	mov	r3, r9
 8007840:	5ce2      	ldrb	r2, [r4, r3]
 8007842:	5da3      	ldrb	r3, [r4, r6]
 8007844:	4646      	mov	r6, r8
 8007846:	1c58      	adds	r0, r3, #1
 8007848:	55a0      	strb	r0, [r4, r6]
 800784a:	1c48      	adds	r0, r1, #1
 800784c:	55e0      	strb	r0, [r4, r7]
 800784e:	0110      	lsls	r0, r2, #4
 8007850:	1a82      	subs	r2, r0, r2
 8007852:	18aa      	adds	r2, r5, r2
 8007854:	18d2      	adds	r2, r2, r3
 8007856:	2334      	movs	r3, #52	; 0x34
 8007858:	5cd3      	ldrb	r3, [r2, r3]
 800785a:	4652      	mov	r2, sl
 800785c:	1861      	adds	r1, r4, r1
 800785e:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8007860:	2001      	movs	r0, #1
 8007862:	f008 f9b7 	bl	800fbd4 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007866:	2220      	movs	r2, #32
 8007868:	5de1      	ldrb	r1, [r4, r7]
 800786a:	1863      	adds	r3, r4, r1
 800786c:	332f      	adds	r3, #47	; 0x2f
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	4393      	bics	r3, r2
 8007872:	d1e4      	bne.n	800783e <ExecuteMonitor.part.0+0xea>
		                   counter++;
 8007874:	464b      	mov	r3, r9
 8007876:	464a      	mov	r2, r9
 8007878:	5ce3      	ldrb	r3, [r4, r3]
		                   twoDMatrixIndex=1;
 800787a:	2001      	movs	r0, #1
		                   counter++;
 800787c:	3301      	adds	r3, #1
 800787e:	b2db      	uxtb	r3, r3
 8007880:	54a3      	strb	r3, [r4, r2]
		           while(counter != numCommandParameters)
 8007882:	2231      	movs	r2, #49	; 0x31
 8007884:	5caa      	ldrb	r2, [r5, r2]
		                   twoDMatrixIndex=1;
 8007886:	55a0      	strb	r0, [r4, r6]
		           while(counter != numCommandParameters)
 8007888:	429a      	cmp	r2, r3
 800788a:	d1d0      	bne.n	800782e <ExecuteMonitor.part.0+0xda>
		          		   flag=0;
 800788c:	2200      	movs	r2, #0
		          		   counter=0;
 800788e:	232e      	movs	r3, #46	; 0x2e
		          		   flag=0;
 8007890:	4983      	ldr	r1, [pc, #524]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
		          		   counter=0;
 8007892:	54e2      	strb	r2, [r4, r3]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007894:	3301      	adds	r3, #1
 8007896:	54e2      	strb	r2, [r4, r3]
		          		   flag=0;
 8007898:	710a      	strb	r2, [r1, #4]
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800789a:	3230      	adds	r2, #48	; 0x30
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800789c:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800789e:	4690      	mov	r8, r2
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078a0:	272f      	movs	r7, #47	; 0x2f
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80078a2:	465a      	mov	r2, fp
 80078a4:	4641      	mov	r1, r8
 80078a6:	18d2      	adds	r2, r2, r3
 80078a8:	18e3      	adds	r3, r4, r3
 80078aa:	5c5b      	ldrb	r3, [r3, r1]
 80078ac:	3281      	adds	r2, #129	; 0x81
 80078ae:	32ff      	adds	r2, #255	; 0xff
 80078b0:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80078b2:	2001      	movs	r0, #1
 80078b4:	f008 f98e 	bl	800fbd4 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078b8:	5de3      	ldrb	r3, [r4, r7]
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	55e3      	strb	r3, [r4, r7]
 80078c0:	2b3f      	cmp	r3, #63	; 0x3f
 80078c2:	d9ee      	bls.n	80078a2 <ExecuteMonitor.part.0+0x14e>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80078c4:	0020      	movs	r0, r4
 80078c6:	2240      	movs	r2, #64	; 0x40
 80078c8:	2100      	movs	r1, #0
 80078ca:	3030      	adds	r0, #48	; 0x30
 80078cc:	f00c f965 	bl	8013b9a <memset>
                   if(flag == CONTINUOUS_RUN)
 80078d0:	4b73      	ldr	r3, [pc, #460]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 80078d2:	791b      	ldrb	r3, [r3, #4]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d000      	beq.n	80078da <ExecuteMonitor.part.0+0x186>
 80078d8:	e74c      	b.n	8007774 <ExecuteMonitor.part.0+0x20>
		           {
                	finalMatrixIndex=0;
 80078da:	2300      	movs	r3, #0
 80078dc:	222c      	movs	r2, #44	; 0x2c
                	twoDMatrixIndex=1;
 80078de:	2101      	movs	r1, #1
                	finalMatrixIndex=0;
 80078e0:	54a3      	strb	r3, [r4, r2]
                	twoDMatrixIndex=1;
 80078e2:	3201      	adds	r2, #1
 80078e4:	54a1      	strb	r1, [r4, r2]
   		          	counter=0;
 80078e6:	3201      	adds	r2, #1
 80078e8:	54a3      	strb	r3, [r4, r2]
   		           while(counter != numCommandParameters)
 80078ea:	3331      	adds	r3, #49	; 0x31
 80078ec:	5ceb      	ldrb	r3, [r5, r3]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d03a      	beq.n	8007968 <ExecuteMonitor.part.0+0x214>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078f2:	3a01      	subs	r2, #1
 80078f4:	4690      	mov	r8, r2
 80078f6:	3201      	adds	r2, #1
   		           while(counter != numCommandParameters)
 80078f8:	2100      	movs	r1, #0
 80078fa:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078fc:	4691      	mov	r9, r2
   		           while(counter != numCommandParameters)
 80078fe:	2201      	movs	r2, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007900:	2030      	movs	r0, #48	; 0x30
 8007902:	4682      	mov	sl, r0
 8007904:	0010      	movs	r0, r2
 8007906:	272c      	movs	r7, #44	; 0x2c
 8007908:	001a      	movs	r2, r3
 800790a:	0003      	movs	r3, r0
 800790c:	e001      	b.n	8007912 <ExecuteMonitor.part.0+0x1be>
 800790e:	5ce2      	ldrb	r2, [r4, r3]
 8007910:	5da3      	ldrb	r3, [r4, r6]
 8007912:	4646      	mov	r6, r8
 8007914:	1c58      	adds	r0, r3, #1
 8007916:	55a0      	strb	r0, [r4, r6]
 8007918:	1c48      	adds	r0, r1, #1
 800791a:	55e0      	strb	r0, [r4, r7]
 800791c:	0110      	lsls	r0, r2, #4
 800791e:	1a82      	subs	r2, r0, r2
 8007920:	18aa      	adds	r2, r5, r2
 8007922:	18d2      	adds	r2, r2, r3
 8007924:	2334      	movs	r3, #52	; 0x34
 8007926:	5cd3      	ldrb	r3, [r2, r3]
 8007928:	4652      	mov	r2, sl
 800792a:	1861      	adds	r1, r4, r1
 800792c:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 800792e:	2001      	movs	r0, #1
 8007930:	f008 f950 	bl	800fbd4 <HAL_Delay>
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007934:	5de1      	ldrb	r1, [r4, r7]
 8007936:	1863      	adds	r3, r4, r1
 8007938:	332f      	adds	r3, #47	; 0x2f
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	2320      	movs	r3, #32
 800793e:	439a      	bics	r2, r3
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007940:	464b      	mov	r3, r9
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007942:	d1e4      	bne.n	800790e <ExecuteMonitor.part.0+0x1ba>

   		             counter++;
 8007944:	4648      	mov	r0, r9
 8007946:	5ce3      	ldrb	r3, [r4, r3]
   		             twoDMatrixIndex=1;
 8007948:	2601      	movs	r6, #1
   		             counter++;
 800794a:	3301      	adds	r3, #1
 800794c:	b2db      	uxtb	r3, r3
 800794e:	5423      	strb	r3, [r4, r0]
   		             twoDMatrixIndex=1;
 8007950:	4640      	mov	r0, r8
 8007952:	5426      	strb	r6, [r4, r0]
   		           while(counter != numCommandParameters)
 8007954:	2031      	movs	r0, #49	; 0x31
 8007956:	5c28      	ldrb	r0, [r5, r0]
 8007958:	4298      	cmp	r0, r3
 800795a:	d1d0      	bne.n	80078fe <ExecuteMonitor.part.0+0x1aa>
   		          }
		            counter=0;
 800795c:	4649      	mov	r1, r9
                  while(flag != NonActive)
 800795e:	4b50      	ldr	r3, [pc, #320]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
		            counter=0;
 8007960:	5462      	strb	r2, [r4, r1]
                  while(flag != NonActive)
 8007962:	791b      	ldrb	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <ExecuteMonitor.part.0+0x256>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007968:	2300      	movs	r3, #0
 800796a:	4699      	mov	r9, r3
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800796c:	2330      	movs	r3, #48	; 0x30
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800796e:	272f      	movs	r7, #47	; 0x2f
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007970:	4698      	mov	r8, r3
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007972:	464b      	mov	r3, r9
 8007974:	55e3      	strb	r3, [r4, r7]
 8007976:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007978:	465a      	mov	r2, fp
 800797a:	4641      	mov	r1, r8
 800797c:	18d2      	adds	r2, r2, r3
 800797e:	18e3      	adds	r3, r4, r3
 8007980:	5c5b      	ldrb	r3, [r3, r1]
 8007982:	3281      	adds	r2, #129	; 0x81
 8007984:	32ff      	adds	r2, #255	; 0xff
 8007986:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8007988:	20c8      	movs	r0, #200	; 0xc8
 800798a:	f005 fee3 	bl	800d754 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800798e:	5de3      	ldrb	r3, [r4, r7]
 8007990:	3301      	adds	r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	55e3      	strb	r3, [r4, r7]
 8007996:	2b3f      	cmp	r3, #63	; 0x3f
 8007998:	d9ee      	bls.n	8007978 <ExecuteMonitor.part.0+0x224>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 800799a:	4b41      	ldr	r3, [pc, #260]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f008 f919 	bl	800fbd4 <HAL_Delay>
                  while(flag != NonActive)
 80079a2:	4b3f      	ldr	r3, [pc, #252]	; (8007aa0 <ExecuteMonitor.part.0+0x34c>)
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e3      	bne.n	8007972 <ExecuteMonitor.part.0+0x21e>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80079aa:	0020      	movs	r0, r4
 80079ac:	2240      	movs	r2, #64	; 0x40
 80079ae:	2100      	movs	r1, #0
 80079b0:	3030      	adds	r0, #48	; 0x30
 80079b2:	f00c f8f2 	bl	8013b9a <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80079b6:	22c0      	movs	r2, #192	; 0xc0
 80079b8:	2100      	movs	r1, #0
 80079ba:	483d      	ldr	r0, [pc, #244]	; (8007ab0 <ExecuteMonitor.part.0+0x35c>)
 80079bc:	f00c f8ed 	bl	8013b9a <memset>
 80079c0:	e6d8      	b.n	8007774 <ExecuteMonitor.part.0+0x20>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80079c2:	7968      	ldrb	r0, [r5, #5]
 80079c4:	210a      	movs	r1, #10
 80079c6:	f7f8 fc49 	bl	800025c <__aeabi_uidivmod>
 		            	processingParameterIndex=1;
 80079ca:	2330      	movs	r3, #48	; 0x30
 80079cc:	2201      	movs	r2, #1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80079ce:	0028      	movs	r0, r5
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80079d0:	b2cf      	uxtb	r7, r1
 		            	processingParameterIndex=1;
 80079d2:	54ea      	strb	r2, [r5, r3]
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80079d4:	772f      	strb	r7, [r5, #28]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80079d6:	1da9      	adds	r1, r5, #6
 80079d8:	3211      	adds	r2, #17
 80079da:	301d      	adds	r0, #29
 80079dc:	f00c f8d4 	bl	8013b88 <memcpy>
 80079e0:	e6f9      	b.n	80077d6 <ExecuteMonitor.part.0+0x82>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80079e2:	7e2b      	ldrb	r3, [r5, #24]
 80079e4:	210a      	movs	r1, #10
 80079e6:	7968      	ldrb	r0, [r5, #5]
 80079e8:	4698      	mov	r8, r3
 80079ea:	f7f8 fc37 	bl	800025c <__aeabi_uidivmod>
 80079ee:	b2c9      	uxtb	r1, r1
 80079f0:	2703      	movs	r7, #3
 80079f2:	4541      	cmp	r1, r8
 80079f4:	d04d      	beq.n	8007a92 <ExecuteMonitor.part.0+0x33e>
 80079f6:	19eb      	adds	r3, r5, r7
 80079f8:	210a      	movs	r1, #10
 80079fa:	7918      	ldrb	r0, [r3, #4]
 80079fc:	f7f8 fc2e 	bl	800025c <__aeabi_uidivmod>
 8007a00:	003a      	movs	r2, r7
 8007a02:	b2c9      	uxtb	r1, r1
 8007a04:	3702      	adds	r7, #2
 8007a06:	b2ff      	uxtb	r7, r7
 8007a08:	4541      	cmp	r1, r8
 8007a0a:	d1f4      	bne.n	80079f6 <ExecuteMonitor.part.0+0x2a2>
 		            			nonProcessingParameterIndex++;
 8007a0c:	3201      	adds	r2, #1
 8007a0e:	b2d3      	uxtb	r3, r2
 8007a10:	4698      	mov	r8, r3
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a12:	46b9      	mov	r9, r7
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a14:	18eb      	adds	r3, r5, r3
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	210a      	movs	r1, #10
 8007a1a:	469a      	mov	sl, r3
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7f8 fc1d 	bl	800025c <__aeabi_uidivmod>
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a22:	4653      	mov	r3, sl
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a24:	b2cf      	uxtb	r7, r1
 8007a26:	772f      	strb	r7, [r5, #28]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a28:	2b5d      	cmp	r3, #93	; 0x5d
 8007a2a:	d009      	beq.n	8007a40 <ExecuteMonitor.part.0+0x2ec>
 8007a2c:	4643      	mov	r3, r8
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	18ea      	adds	r2, r5, r3
 8007a34:	7912      	ldrb	r2, [r2, #4]
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2a5d      	cmp	r2, #93	; 0x5d
 8007a3c:	d1f9      	bne.n	8007a32 <ExecuteMonitor.part.0+0x2de>
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a3e:	4699      	mov	r9, r3
 		            	processingParameterIndex=1;
 8007a40:	2330      	movs	r3, #48	; 0x30
 8007a42:	2201      	movs	r2, #1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a44:	0028      	movs	r0, r5
 		            	processingParameterIndex=1;
 8007a46:	54ea      	strb	r2, [r5, r3]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a48:	464b      	mov	r3, r9
 8007a4a:	1d29      	adds	r1, r5, #4
 8007a4c:	3213      	adds	r2, #19
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	4449      	add	r1, r9
 8007a52:	301d      	adds	r0, #29
 8007a54:	f00c f898 	bl	8013b88 <memcpy>
 8007a58:	e6bd      	b.n	80077d6 <ExecuteMonitor.part.0+0x82>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007a5a:	7968      	ldrb	r0, [r5, #5]
 8007a5c:	210a      	movs	r1, #10
 8007a5e:	f7f8 fbfd 	bl	800025c <__aeabi_uidivmod>
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007a62:	79a8      	ldrb	r0, [r5, #6]
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007a64:	7629      	strb	r1, [r5, #24]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007a66:	210a      	movs	r1, #10
 8007a68:	f7f8 fbf8 	bl	800025c <__aeabi_uidivmod>
 8007a6c:	2331      	movs	r3, #49	; 0x31
 8007a6e:	54e9      	strb	r1, [r5, r3]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007a70:	79e8      	ldrb	r0, [r5, #7]
 8007a72:	210a      	movs	r1, #10
 8007a74:	f7f8 fbf2 	bl	800025c <__aeabi_uidivmod>
                	    processingParameterIndex=1;
 8007a78:	2330      	movs	r3, #48	; 0x30
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007a7a:	b2cf      	uxtb	r7, r1
                	    processingParameterIndex=1;
 8007a7c:	2201      	movs	r2, #1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a7e:	0028      	movs	r0, r5
 8007a80:	0029      	movs	r1, r5
                	    processingParameterIndex=1;
 8007a82:	54ea      	strb	r2, [r5, r3]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007a84:	772f      	strb	r7, [r5, #28]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a86:	3108      	adds	r1, #8
 8007a88:	320f      	adds	r2, #15
 8007a8a:	301d      	adds	r0, #29
 8007a8c:	f00c f87c 	bl	8013b88 <memcpy>
 8007a90:	e6a1      	b.n	80077d6 <ExecuteMonitor.part.0+0x82>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007a92:	2303      	movs	r3, #3
 8007a94:	2202      	movs	r2, #2
 8007a96:	4699      	mov	r9, r3
 8007a98:	4690      	mov	r8, r2
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	e7ba      	b.n	8007a14 <ExecuteMonitor.part.0+0x2c0>
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	20000000 	.word	0x20000000
 8007aa4:	20001a10 	.word	0x20001a10
 8007aa8:	20001dd8 	.word	0x20001dd8
 8007aac:	20001e58 	.word	0x20001e58
 8007ab0:	20001b90 	.word	0x20001b90

08007ab4 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4c22      	ldr	r4, [pc, #136]	; (8007b40 <StartDefaultTask+0x8c>)
 8007ab8:	4d22      	ldr	r5, [pc, #136]	; (8007b44 <StartDefaultTask+0x90>)
		switch(indMode){
 8007aba:	7823      	ldrb	r3, [r4, #0]
		if(needToDelayButtonStateReset != true)
 8007abc:	4e22      	ldr	r6, [pc, #136]	; (8007b48 <StartDefaultTask+0x94>)
		switch(indMode){
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d014      	beq.n	8007aec <StartDefaultTask+0x38>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d02c      	beq.n	8007b20 <StartDefaultTask+0x6c>
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d032      	beq.n	8007b30 <StartDefaultTask+0x7c>
		CheckAttachedButtons();
 8007aca:	f005 f84f 	bl	800cb6c <CheckAttachedButtons>
		ExecuteSnippet();
 8007ace:	f7fd fe1b 	bl	8005708 <ExecuteSnippet>
    if(Monitor_time == INTIAL_VALUE)
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d021      	beq.n	8007b1c <StartDefaultTask+0x68>
		if(needToDelayButtonStateReset != true)
 8007ad8:	7833      	ldrb	r3, [r6, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <StartDefaultTask+0x2e>
			delayButtonStateReset = false;
 8007ade:	4a1b      	ldr	r2, [pc, #108]	; (8007b4c <StartDefaultTask+0x98>)
 8007ae0:	7013      	strb	r3, [r2, #0]
		taskYIELD();
 8007ae2:	f007 ff27 	bl	800f934 <vPortYield>
		switch(indMode){
 8007ae6:	7823      	ldrb	r3, [r4, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d1ea      	bne.n	8007ac2 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	4818      	ldr	r0, [pc, #96]	; (8007b50 <StartDefaultTask+0x9c>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	01c9      	lsls	r1, r1, #7
 8007af4:	f009 fdd2 	bl	801169c <HAL_GPIO_WritePin>
 8007af8:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8007afa:	f006 f999 	bl	800de30 <osDelay>
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	2200      	movs	r2, #0
 8007b02:	4813      	ldr	r0, [pc, #76]	; (8007b50 <StartDefaultTask+0x9c>)
 8007b04:	01c9      	lsls	r1, r1, #7
 8007b06:	f009 fdc9 	bl	801169c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	7023      	strb	r3, [r4, #0]
		CheckAttachedButtons();
 8007b0e:	f005 f82d 	bl	800cb6c <CheckAttachedButtons>
		ExecuteSnippet();
 8007b12:	f7fd fdf9 	bl	8005708 <ExecuteSnippet>
    if(Monitor_time == INTIAL_VALUE)
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d1dd      	bne.n	8007ad8 <StartDefaultTask+0x24>
 8007b1c:	f7ff fe1a 	bl	8007754 <ExecuteMonitor.part.0>
				RTOS_IND_blink(30);
 8007b20:	2180      	movs	r1, #128	; 0x80
 8007b22:	480b      	ldr	r0, [pc, #44]	; (8007b50 <StartDefaultTask+0x9c>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	01c9      	lsls	r1, r1, #7
 8007b28:	f009 fdb8 	bl	801169c <HAL_GPIO_WritePin>
 8007b2c:	201e      	movs	r0, #30
 8007b2e:	e7e4      	b.n	8007afa <StartDefaultTask+0x46>
				RTOS_IND_blink(200);
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	4807      	ldr	r0, [pc, #28]	; (8007b50 <StartDefaultTask+0x9c>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	01c9      	lsls	r1, r1, #7
 8007b38:	f009 fdb0 	bl	801169c <HAL_GPIO_WritePin>
 8007b3c:	20c8      	movs	r0, #200	; 0xc8
 8007b3e:	e7dc      	b.n	8007afa <StartDefaultTask+0x46>
 8007b40:	200011ef 	.word	0x200011ef
 8007b44:	20000000 	.word	0x20000000
 8007b48:	20002934 	.word	0x20002934
 8007b4c:	20002932 	.word	0x20002932
 8007b50:	48000800 	.word	0x48000800

08007b54 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007b56:	4d58      	ldr	r5, [pc, #352]	; (8007cb8 <MX_FREERTOS_Init+0x164>)
 8007b58:	2400      	movs	r4, #0
 8007b5a:	002b      	movs	r3, r5
 8007b5c:	2603      	movs	r6, #3
void MX_FREERTOS_Init(void){
 8007b5e:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007b60:	3370      	adds	r3, #112	; 0x70
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	9600      	str	r6, [sp, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	22f0      	movs	r2, #240	; 0xf0
 8007b6a:	4954      	ldr	r1, [pc, #336]	; (8007cbc <MX_FREERTOS_Init+0x168>)
 8007b6c:	9403      	str	r4, [sp, #12]
 8007b6e:	9402      	str	r4, [sp, #8]
 8007b70:	4853      	ldr	r0, [pc, #332]	; (8007cc0 <MX_FREERTOS_Init+0x16c>)
 8007b72:	f006 ff23 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007b76:	002b      	movs	r3, r5
 8007b78:	3374      	adds	r3, #116	; 0x74
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	9600      	str	r6, [sp, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	22f0      	movs	r2, #240	; 0xf0
 8007b82:	4950      	ldr	r1, [pc, #320]	; (8007cc4 <MX_FREERTOS_Init+0x170>)
 8007b84:	9403      	str	r4, [sp, #12]
 8007b86:	9402      	str	r4, [sp, #8]
 8007b88:	484f      	ldr	r0, [pc, #316]	; (8007cc8 <MX_FREERTOS_Init+0x174>)
 8007b8a:	f006 ff17 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007b8e:	002b      	movs	r3, r5
 8007b90:	3378      	adds	r3, #120	; 0x78
 8007b92:	22f0      	movs	r2, #240	; 0xf0
 8007b94:	494d      	ldr	r1, [pc, #308]	; (8007ccc <MX_FREERTOS_Init+0x178>)
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	9600      	str	r6, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9403      	str	r4, [sp, #12]
 8007b9e:	9402      	str	r4, [sp, #8]
 8007ba0:	484b      	ldr	r0, [pc, #300]	; (8007cd0 <MX_FREERTOS_Init+0x17c>)
 8007ba2:	f006 ff0b 	bl	800e9bc <xTaskGenericCreate>
	vRegisterCLICommands();
 8007ba6:	f7ff fcc5 	bl	8007534 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007baa:	228c      	movs	r2, #140	; 0x8c
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007bac:	2704      	movs	r7, #4
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007bae:	357c      	adds	r5, #124	; 0x7c
 8007bb0:	9501      	str	r5, [sp, #4]
 8007bb2:	9600      	str	r6, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4947      	ldr	r1, [pc, #284]	; (8007cd4 <MX_FREERTOS_Init+0x180>)
 8007bb8:	9403      	str	r4, [sp, #12]
 8007bba:	9402      	str	r4, [sp, #8]
 8007bbc:	0052      	lsls	r2, r2, #1
 8007bbe:	4846      	ldr	r0, [pc, #280]	; (8007cd8 <MX_FREERTOS_Init+0x184>)
 8007bc0:	f006 fefc 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007bc4:	4d45      	ldr	r5, [pc, #276]	; (8007cdc <MX_FREERTOS_Init+0x188>)
 8007bc6:	4e46      	ldr	r6, [pc, #280]	; (8007ce0 <MX_FREERTOS_Init+0x18c>)
 8007bc8:	2301      	movs	r3, #1
 8007bca:	22f0      	movs	r2, #240	; 0xf0
 8007bcc:	0030      	movs	r0, r6
 8007bce:	4945      	ldr	r1, [pc, #276]	; (8007ce4 <MX_FREERTOS_Init+0x190>)
 8007bd0:	9403      	str	r4, [sp, #12]
 8007bd2:	9402      	str	r4, [sp, #8]
 8007bd4:	9501      	str	r5, [sp, #4]
 8007bd6:	9700      	str	r7, [sp, #0]
 8007bd8:	f006 fef0 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007bdc:	1d2b      	adds	r3, r5, #4
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	22f0      	movs	r2, #240	; 0xf0
 8007be2:	2302      	movs	r3, #2
 8007be4:	0030      	movs	r0, r6
 8007be6:	4940      	ldr	r1, [pc, #256]	; (8007ce8 <MX_FREERTOS_Init+0x194>)
 8007be8:	9403      	str	r4, [sp, #12]
 8007bea:	9402      	str	r4, [sp, #8]
 8007bec:	9700      	str	r7, [sp, #0]
 8007bee:	f006 fee5 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007bf2:	002b      	movs	r3, r5
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	22f0      	movs	r2, #240	; 0xf0
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	0030      	movs	r0, r6
 8007bfe:	493b      	ldr	r1, [pc, #236]	; (8007cec <MX_FREERTOS_Init+0x198>)
 8007c00:	9403      	str	r4, [sp, #12]
 8007c02:	9402      	str	r4, [sp, #8]
 8007c04:	9700      	str	r7, [sp, #0]
 8007c06:	f006 fed9 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007c0a:	002b      	movs	r3, r5
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	22f0      	movs	r2, #240	; 0xf0
 8007c12:	2304      	movs	r3, #4
 8007c14:	0030      	movs	r0, r6
 8007c16:	4936      	ldr	r1, [pc, #216]	; (8007cf0 <MX_FREERTOS_Init+0x19c>)
 8007c18:	9403      	str	r4, [sp, #12]
 8007c1a:	9402      	str	r4, [sp, #8]
 8007c1c:	9700      	str	r7, [sp, #0]
 8007c1e:	f006 fecd 	bl	800e9bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007c22:	002b      	movs	r3, r5
 8007c24:	3310      	adds	r3, #16
 8007c26:	22f0      	movs	r2, #240	; 0xf0
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	0030      	movs	r0, r6
 8007c2c:	2305      	movs	r3, #5
 8007c2e:	4931      	ldr	r1, [pc, #196]	; (8007cf4 <MX_FREERTOS_Init+0x1a0>)
 8007c30:	9403      	str	r4, [sp, #12]
 8007c32:	9402      	str	r4, [sp, #8]
 8007c34:	9700      	str	r7, [sp, #0]
 8007c36:	f006 fec1 	bl	800e9bc <xTaskGenericCreate>
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007c3e:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007c40:	f006 f8fe 	bl	800de40 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007c44:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007c46:	61a8      	str	r0, [r5, #24]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007c48:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007c4a:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007c4c:	f006 f8f8 	bl	800de40 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007c50:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007c52:	6368      	str	r0, [r5, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007c54:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007c56:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007c58:	f006 f8f2 	bl	800de40 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007c5c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007c5e:	61e8      	str	r0, [r5, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007c60:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007c62:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007c64:	f006 f8ec 	bl	800de40 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007c68:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007c6a:	63a8      	str	r0, [r5, #56]	; 0x38
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007c6c:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007c6e:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007c70:	f006 f8e6 	bl	800de40 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007c74:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007c76:	6228      	str	r0, [r5, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007c78:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007c7a:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007c7c:	f006 f8e0 	bl	800de40 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007c80:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007c82:	63e8      	str	r0, [r5, #60]	; 0x3c
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007c84:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007c86:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007c88:	f006 f8da 	bl	800de40 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007c8c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007c8e:	6268      	str	r0, [r5, #36]	; 0x24
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007c90:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007c92:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007c94:	f006 f8d4 	bl	800de40 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007c98:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007c9a:	6428      	str	r0, [r5, #64]	; 0x40
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007c9c:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007c9e:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007ca0:	f006 f8ce 	bl	800de40 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ca4:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007ca6:	62a8      	str	r0, [r5, #40]	; 0x28
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ca8:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007caa:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007cac:	f006 f8c8 	bl	800de40 <osSemaphoreCreate>
 8007cb0:	6468      	str	r0, [r5, #68]	; 0x44
}
 8007cb2:	b00f      	add	sp, #60	; 0x3c
 8007cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	20001e58 	.word	0x20001e58
 8007cbc:	0801c9b8 	.word	0x0801c9b8
 8007cc0:	08007ab5 	.word	0x08007ab5
 8007cc4:	0801c9c4 	.word	0x0801c9c4
 8007cc8:	08008639 	.word	0x08008639
 8007ccc:	0801c9d0 	.word	0x0801c9d0
 8007cd0:	080135f1 	.word	0x080135f1
 8007cd4:	0801c9dc 	.word	0x0801c9dc
 8007cd8:	08005411 	.word	0x08005411
 8007cdc:	20001ed8 	.word	0x20001ed8
 8007ce0:	080089e5 	.word	0x080089e5
 8007ce4:	0801c9e4 	.word	0x0801c9e4
 8007ce8:	0801c9f0 	.word	0x0801c9f0
 8007cec:	0801c9fc 	.word	0x0801c9fc
 8007cf0:	0801ca08 	.word	0x0801ca08
 8007cf4:	0801ca14 	.word	0x0801ca14

08007cf8 <vMainConfigureTimerForRunTimeStats>:
}


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007cfa:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	4904      	ldr	r1, [pc, #16]	; (8007d10 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007d00:	f7f8 fa26 	bl	8000150 <__udivsi3>
 8007d04:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007d06:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	200000b8 	.word	0x200000b8
 8007d10:	00002710 	.word	0x00002710
 8007d14:	20001ed8 	.word	0x20001ed8

08007d18 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007d18:	21fa      	movs	r1, #250	; 0xfa
 8007d1a:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <ulMainGetRunTimeCounterValue+0x3c>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007d1c:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	0089      	lsls	r1, r1, #2
 8007d22:	f7f8 fa15 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d26:	4c0c      	ldr	r4, [pc, #48]	; (8007d58 <ulMainGetRunTimeCounterValue+0x40>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007d28:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d2a:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007d2c:	f006 ffb4 	bl	800ec98 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <ulMainGetRunTimeCounterValue+0x44>)
	ulTickCount =xTaskGetTickCountFromISR();
 8007d32:	0003      	movs	r3, r0
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007d34:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d36:	1ba8      	subs	r0, r5, r6
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007d38:	0152      	lsls	r2, r2, #5
 8007d3a:	d502      	bpl.n	8007d42 <ulMainGetRunTimeCounterValue+0x2a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d3c:	6820      	ldr	r0, [r4, #0]
		ulTickCount++;
 8007d3e:	3301      	adds	r3, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d40:	1a28      	subs	r0, r5, r0
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007d42:	009c      	lsls	r4, r3, #2
 8007d44:	18e4      	adds	r4, r4, r3
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <ulMainGetRunTimeCounterValue+0x48>)
	ulReturn =(ulTickCount * 10UL);
 8007d48:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007d4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d4c:	f7f8 fa00 	bl	8000150 <__udivsi3>
 8007d50:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	200000b8 	.word	0x200000b8
 8007d58:	e000e018 	.word	0xe000e018
 8007d5c:	e000ed04 	.word	0xe000ed04
 8007d60:	20001ed8 	.word	0x20001ed8

08007d64 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007d64:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007d66:	f007 fd8d 	bl	800f884 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007d6a:	b2c4      	uxtb	r4, r0
 8007d6c:	0020      	movs	r0, r4
 8007d6e:	f003 f833 	bl	800add8 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007d72:	0020      	movs	r0, r4
 8007d74:	f003 fc3a 	bl	800b5ec <SwitchStreamDMAToMsg>
}
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)

08007d7c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d7e:	46ce      	mov	lr, r9
 8007d80:	4647      	mov	r7, r8
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b085      	sub	sp, #20
 8007d86:	0004      	movs	r4, r0
 8007d88:	0018      	movs	r0, r3
 8007d8a:	466b      	mov	r3, sp
 8007d8c:	73d8      	strb	r0, [r3, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007d8e:	ab0c      	add	r3, sp, #48	; 0x30
 8007d90:	781b      	ldrb	r3, [r3, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007d92:	000e      	movs	r6, r1
 8007d94:	0015      	movs	r5, r2
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007d96:	4298      	cmp	r0, r3
 8007d98:	d100      	bne.n	8007d9c <SetupDMAStreams+0x20>
 8007d9a:	e091      	b.n	8007ec0 <SetupDMAStreams+0x144>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d00f      	beq.n	8007dc0 <SetupDMAStreams+0x44>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00d      	beq.n	8007dc0 <SetupDMAStreams+0x44>
	if(direction == FORWARD){
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d00d      	beq.n	8007dc4 <SetupDMAStreams+0x48>
	else if(direction == BACKWARD){
 8007da8:	2c01      	cmp	r4, #1
 8007daa:	d100      	bne.n	8007dae <SetupDMAStreams+0x32>
 8007dac:	e08f      	b.n	8007ece <SetupDMAStreams+0x152>
		return BOS_ERR_WrongParam;
 8007dae:	2767      	movs	r7, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007db0:	2c02      	cmp	r4, #2
 8007db2:	d03d      	beq.n	8007e30 <SetupDMAStreams+0xb4>
}
 8007db4:	0038      	movs	r0, r7
 8007db6:	b005      	add	sp, #20
 8007db8:	bcc0      	pop	{r6, r7}
 8007dba:	46b9      	mov	r9, r7
 8007dbc:	46b0      	mov	r8, r6
 8007dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007dc0:	2767      	movs	r7, #103	; 0x67
 8007dc2:	e7f7      	b.n	8007db4 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007dc4:	f005 febc 	bl	800db40 <GetUart>
 8007dc8:	ab0c      	add	r3, sp, #48	; 0x30
 8007dca:	0004      	movs	r4, r0
 8007dcc:	7818      	ldrb	r0, [r3, #0]
 8007dce:	f005 feb7 	bl	800db40 <GetUart>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	0001      	movs	r1, r0
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	f7ff fc46 	bl	8007668 <StartDMAstream>
 8007ddc:	2817      	cmp	r0, #23
 8007dde:	d074      	beq.n	8007eca <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007de0:	21fa      	movs	r1, #250	; 0xfa
 8007de2:	0168      	lsls	r0, r5, #5
 8007de4:	1b40      	subs	r0, r0, r5
 8007de6:	0080      	lsls	r0, r0, #2
 8007de8:	1940      	adds	r0, r0, r5
 8007dea:	0089      	lsls	r1, r1, #2
 8007dec:	00c0      	lsls	r0, r0, #3
 8007dee:	f7f8 f9af 	bl	8000150 <__udivsi3>
 8007df2:	4b45      	ldr	r3, [pc, #276]	; (8007f08 <SetupDMAStreams+0x18c>)
 8007df4:	0001      	movs	r1, r0
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	230f      	movs	r3, #15
 8007dfa:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4843      	ldr	r0, [pc, #268]	; (8007f0c <SetupDMAStreams+0x190>)
 8007e00:	f007 fbd4 	bl	800f5ac <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007e04:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007e06:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007e08:	7bdb      	ldrb	r3, [r3, #15]
 8007e0a:	4a41      	ldr	r2, [pc, #260]	; (8007f10 <SetupDMAStreams+0x194>)
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007e12:	2700      	movs	r7, #0
	if(xTimerStream != NULL)
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d0cd      	beq.n	8007db4 <SetupDMAStreams+0x38>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007e18:	f006 ff38 	bl	800ec8c <xTaskGetTickCount>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	425b      	negs	r3, r3
 8007e20:	0002      	movs	r2, r0
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2101      	movs	r1, #1
 8007e26:	2300      	movs	r3, #0
 8007e28:	0020      	movs	r0, r4
 8007e2a:	f007 fbdf 	bl	800f5ec <xTimerGenericCommand>
 8007e2e:	e7c1      	b.n	8007db4 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007e30:	f005 fe86 	bl	800db40 <GetUart>
 8007e34:	ab0c      	add	r3, sp, #48	; 0x30
 8007e36:	0004      	movs	r4, r0
 8007e38:	7818      	ldrb	r0, [r3, #0]
 8007e3a:	f005 fe81 	bl	800db40 <GetUart>
 8007e3e:	2201      	movs	r2, #1
 8007e40:	0001      	movs	r1, r0
 8007e42:	0020      	movs	r0, r4
 8007e44:	f7ff fc10 	bl	8007668 <StartDMAstream>
 8007e48:	2817      	cmp	r0, #23
 8007e4a:	d03e      	beq.n	8007eca <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007e4c:	21fa      	movs	r1, #250	; 0xfa
 8007e4e:	0168      	lsls	r0, r5, #5
 8007e50:	1b40      	subs	r0, r0, r5
 8007e52:	0080      	lsls	r0, r0, #2
 8007e54:	1940      	adds	r0, r0, r5
 8007e56:	0089      	lsls	r1, r1, #2
 8007e58:	00c0      	lsls	r0, r0, #3
 8007e5a:	f7f8 f979 	bl	8000150 <__udivsi3>
 8007e5e:	4b2a      	ldr	r3, [pc, #168]	; (8007f08 <SetupDMAStreams+0x18c>)
 8007e60:	4f2a      	ldr	r7, [pc, #168]	; (8007f0c <SetupDMAStreams+0x190>)
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4698      	mov	r8, r3
 8007e66:	230f      	movs	r3, #15
 8007e68:	0001      	movs	r1, r0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	446b      	add	r3, sp
 8007e6e:	0004      	movs	r4, r0
 8007e70:	0038      	movs	r0, r7
 8007e72:	f007 fb9b 	bl	800f5ac <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007e76:	466b      	mov	r3, sp
 8007e78:	7bdb      	ldrb	r3, [r3, #15]
 8007e7a:	4d25      	ldr	r5, [pc, #148]	; (8007f10 <SetupDMAStreams+0x194>)
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	515e      	str	r6, [r3, r5]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007e82:	ab0c      	add	r3, sp, #48	; 0x30
 8007e84:	7818      	ldrb	r0, [r3, #0]
 8007e86:	f005 fe5b 	bl	800db40 <GetUart>
 8007e8a:	466b      	mov	r3, sp
 8007e8c:	4681      	mov	r9, r0
 8007e8e:	7bd8      	ldrb	r0, [r3, #15]
 8007e90:	f005 fe56 	bl	800db40 <GetUart>
 8007e94:	2201      	movs	r2, #1
 8007e96:	0001      	movs	r1, r0
 8007e98:	4648      	mov	r0, r9
 8007e9a:	f7ff fbe5 	bl	8007668 <StartDMAstream>
 8007e9e:	2817      	cmp	r0, #23
 8007ea0:	d013      	beq.n	8007eca <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007ea2:	4643      	mov	r3, r8
 8007ea4:	0021      	movs	r1, r4
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	ab0c      	add	r3, sp, #48	; 0x30
 8007eac:	0038      	movs	r0, r7
 8007eae:	f007 fb7d 	bl	800f5ac <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007eb2:	ab0c      	add	r3, sp, #48	; 0x30
 8007eb4:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007eb6:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	515e      	str	r6, [r3, r5]
 8007ebe:	e7a8      	b.n	8007e12 <SetupDMAStreams+0x96>
		portStatus[src] =STREAM;
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <SetupDMAStreams+0x198>)
		return BOS_ERR_WrongParam;
 8007ec4:	2767      	movs	r7, #103	; 0x67
		portStatus[src] =STREAM;
 8007ec6:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 8007ec8:	e774      	b.n	8007db4 <SetupDMAStreams+0x38>
			return BOS_ERR_PORT_BUSY;
 8007eca:	2717      	movs	r7, #23
 8007ecc:	e772      	b.n	8007db4 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f005 fe36 	bl	800db40 <GetUart>
 8007ed4:	466b      	mov	r3, sp
 8007ed6:	0004      	movs	r4, r0
 8007ed8:	7bd8      	ldrb	r0, [r3, #15]
 8007eda:	f005 fe31 	bl	800db40 <GetUart>
 8007ede:	2201      	movs	r2, #1
 8007ee0:	0001      	movs	r1, r0
 8007ee2:	0020      	movs	r0, r4
 8007ee4:	f7ff fbc0 	bl	8007668 <StartDMAstream>
 8007ee8:	2817      	cmp	r0, #23
 8007eea:	d0ee      	beq.n	8007eca <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007eec:	21fa      	movs	r1, #250	; 0xfa
 8007eee:	0168      	lsls	r0, r5, #5
 8007ef0:	1b40      	subs	r0, r0, r5
 8007ef2:	0080      	lsls	r0, r0, #2
 8007ef4:	1940      	adds	r0, r0, r5
 8007ef6:	0089      	lsls	r1, r1, #2
 8007ef8:	00c0      	lsls	r0, r0, #3
 8007efa:	f7f8 f929 	bl	8000150 <__udivsi3>
 8007efe:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <SetupDMAStreams+0x18c>)
 8007f00:	0001      	movs	r1, r0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	ab0c      	add	r3, sp, #48	; 0x30
 8007f06:	e779      	b.n	8007dfc <SetupDMAStreams+0x80>
 8007f08:	08007d65 	.word	0x08007d65
 8007f0c:	0801ca20 	.word	0x0801ca20
 8007f10:	200019b4 	.word	0x200019b4
 8007f14:	20000c64 	.word	0x20000c64

08007f18 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007f18:	b510      	push	{r4, lr}
	switch(port){
 8007f1a:	2805      	cmp	r0, #5
 8007f1c:	d80a      	bhi.n	8007f34 <NotifyMessagingTask+0x1c>
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <NotifyMessagingTask+0x30>)
 8007f20:	0080      	lsls	r0, r0, #2
 8007f22:	581b      	ldr	r3, [r3, r0]
 8007f24:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <NotifyMessagingTask+0x34>)
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f007 faac 	bl	800f48c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007f34:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <NotifyMessagingTask+0x38>)
 8007f38:	e7f6      	b.n	8007f28 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007f3a:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <NotifyMessagingTask+0x3c>)
 8007f3c:	e7f4      	b.n	8007f28 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <NotifyMessagingTask+0x40>)
 8007f40:	e7f2      	b.n	8007f28 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <NotifyMessagingTask+0x44>)
 8007f44:	e7f0      	b.n	8007f28 <NotifyMessagingTask+0x10>
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	0801a0b4 	.word	0x0801a0b4
 8007f4c:	20001ee8 	.word	0x20001ee8
 8007f50:	20001ed8 	.word	0x20001ed8
 8007f54:	20001edc 	.word	0x20001edc
 8007f58:	20001ee0 	.word	0x20001ee0
 8007f5c:	20001ee4 	.word	0x20001ee4

08007f60 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007f60:	b530      	push	{r4, r5, lr}
 8007f62:	b083      	sub	sp, #12
 8007f64:	ac06      	add	r4, sp, #24
 8007f66:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007f68:	0004      	movs	r4, r0
 8007f6a:	4314      	orrs	r4, r2
 8007f6c:	d00c      	beq.n	8007f88 <SendMessageFromPort+0x28>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d008      	beq.n	8007f84 <SendMessageFromPort+0x24>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d001      	beq.n	8007f7a <SendMessageFromPort+0x1a>
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	d006      	beq.n	8007f88 <SendMessageFromPort+0x28>
 8007f7a:	9500      	str	r5, [sp, #0]
 8007f7c:	f000 f806 	bl	8007f8c <SendMessageFromPort.part.0>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007f80:	b003      	add	sp, #12
 8007f82:	bd30      	pop	{r4, r5, pc}
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007f84:	2afd      	cmp	r2, #253	; 0xfd
 8007f86:	d8f8      	bhi.n	8007f7a <SendMessageFromPort+0x1a>
		return BOS_ERR_WrongParam;
 8007f88:	2067      	movs	r0, #103	; 0x67
 8007f8a:	e7f9      	b.n	8007f80 <SendMessageFromPort+0x20>

08007f8c <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	46de      	mov	lr, fp
 8007f90:	4645      	mov	r5, r8
 8007f92:	464e      	mov	r6, r9
 8007f94:	4657      	mov	r7, sl
 8007f96:	b5e0      	push	{r5, r6, r7, lr}
 8007f98:	b089      	sub	sp, #36	; 0x24
 8007f9a:	0006      	movs	r6, r0
 8007f9c:	9303      	str	r3, [sp, #12]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007f9e:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007fa0:	ab12      	add	r3, sp, #72	; 0x48
 8007fa2:	4688      	mov	r8, r1
 8007fa4:	881d      	ldrh	r5, [r3, #0]
 8007fa6:	4693      	mov	fp, r2
	TaskPriority =uxTaskPriorityGet( NULL);
 8007fa8:	f006 fdda 	bl	800eb60 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007fac:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007fae:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	f006 fde5 	bl	800eb80 <vTaskPrioritySet>
	message[0] ='H';
 8007fb6:	2348      	movs	r3, #72	; 0x48
 8007fb8:	4cd5      	ldr	r4, [pc, #852]	; (8008310 <SendMessageFromPort.part.0+0x384>)
 8007fba:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007fbc:	3312      	adds	r3, #18
 8007fbe:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007fc0:	4643      	mov	r3, r8
 8007fc2:	4333      	orrs	r3, r6
 8007fc4:	d000      	beq.n	8007fc8 <SendMessageFromPort.part.0+0x3c>
 8007fc6:	e07c      	b.n	80080c2 <SendMessageFromPort.part.0+0x136>
 8007fc8:	465b      	mov	r3, fp
 8007fca:	2bfd      	cmp	r3, #253	; 0xfd
 8007fcc:	d800      	bhi.n	8007fd0 <SendMessageFromPort.part.0+0x44>
 8007fce:	e14b      	b.n	8008268 <SendMessageFromPort.part.0+0x2dc>
		length =messageLength[numberOfParams - 1];
 8007fd0:	3d01      	subs	r5, #1
 8007fd2:	4bd0      	ldr	r3, [pc, #832]	; (8008314 <SendMessageFromPort.part.0+0x388>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007fd4:	00e9      	lsls	r1, r5, #3
		length =messageLength[numberOfParams - 1];
 8007fd6:	5d5f      	ldrb	r7, [r3, r5]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007fd8:	1b49      	subs	r1, r1, r5
 8007fda:	4dcf      	ldr	r5, [pc, #828]	; (8008318 <SendMessageFromPort.part.0+0x38c>)
 8007fdc:	00c9      	lsls	r1, r1, #3
 8007fde:	003a      	movs	r2, r7
 8007fe0:	48ce      	ldr	r0, [pc, #824]	; (800831c <SendMessageFromPort.part.0+0x390>)
 8007fe2:	1949      	adds	r1, r1, r5
 8007fe4:	f00b fdd0 	bl	8013b88 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007fe8:	1cfb      	adds	r3, r7, #3
 8007fea:	469a      	mov	sl, r3
 8007fec:	4dcc      	ldr	r5, [pc, #816]	; (8008320 <SendMessageFromPort.part.0+0x394>)
 8007fee:	001a      	movs	r2, r3
 8007ff0:	0021      	movs	r1, r4
 8007ff2:	0028      	movs	r0, r5
	message[2] =length;
 8007ff4:	70a7      	strb	r7, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007ff6:	f00b fdc7 	bl	8013b88 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007ffa:	b2bb      	uxth	r3, r7
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	0028      	movs	r0, r5
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	f003 fc0f 	bl	800b824 <CalculateCRC8>
 8008006:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8008008:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800800a:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 800800c:	2100      	movs	r1, #0
 800800e:	0028      	movs	r0, r5
 8008010:	f00b fdc3 	bl	8013b9a <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8008014:	465b      	mov	r3, fp
 8008016:	2bfd      	cmp	r3, #253	; 0xfd
 8008018:	d900      	bls.n	800801c <SendMessageFromPort.part.0+0x90>
 800801a:	e0fb      	b.n	8008214 <SendMessageFromPort.part.0+0x288>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	3b2c      	subs	r3, #44	; 0x2c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d800      	bhi.n	8008026 <SendMessageFromPort.part.0+0x9a>
 8008024:	e156      	b.n	80082d4 <SendMessageFromPort.part.0+0x348>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8008026:	4bbf      	ldr	r3, [pc, #764]	; (8008324 <SendMessageFromPort.part.0+0x398>)
 8008028:	4699      	mov	r9, r3
 800802a:	88db      	ldrh	r3, [r3, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d100      	bne.n	8008032 <SendMessageFromPort.part.0+0xa6>
 8008030:	e15a      	b.n	80082e8 <SendMessageFromPort.part.0+0x35c>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008032:	9d05      	ldr	r5, [sp, #20]
 8008034:	4fbc      	ldr	r7, [pc, #752]	; (8008328 <SendMessageFromPort.part.0+0x39c>)
 8008036:	3504      	adds	r5, #4
 8008038:	b2ab      	uxth	r3, r5
 800803a:	4698      	mov	r8, r3
 800803c:	4bbb      	ldr	r3, [pc, #748]	; (800832c <SendMessageFromPort.part.0+0x3a0>)
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800803e:	2500      	movs	r5, #0
 8008040:	469a      	mov	sl, r3
 8008042:	003b      	movs	r3, r7
 8008044:	0037      	movs	r7, r6
 8008046:	4646      	mov	r6, r8
 8008048:	4698      	mov	r8, r3
 800804a:	e005      	b.n	8008058 <SendMessageFromPort.part.0+0xcc>
 800804c:	464a      	mov	r2, r9
 800804e:	1c6b      	adds	r3, r5, #1
 8008050:	88d2      	ldrh	r2, [r2, #6]
 8008052:	b2dd      	uxtb	r5, r3
 8008054:	42aa      	cmp	r2, r5
 8008056:	d920      	bls.n	800809a <SendMessageFromPort.part.0+0x10e>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008058:	465b      	mov	r3, fp
 800805a:	0032      	movs	r2, r6
 800805c:	0021      	movs	r1, r4
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	0038      	movs	r0, r7
 8008062:	2332      	movs	r3, #50	; 0x32
 8008064:	f7fa ffee 	bl	8003044 <Send_BOS_Message>
				osDelay(200);
 8008068:	20c8      	movs	r0, #200	; 0xc8
 800806a:	f005 fee1 	bl	800de30 <osDelay>
				if(ACK_FLAG == true)
 800806e:	4653      	mov	r3, sl
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d111      	bne.n	800809a <SendMessageFromPort.part.0+0x10e>
				if(rejected_FLAG == true)
 8008076:	4643      	mov	r3, r8
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0e6      	beq.n	800804c <SendMessageFromPort.part.0+0xc0>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 800807e:	465b      	mov	r3, fp
 8008080:	0032      	movs	r2, r6
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	0021      	movs	r1, r4
 8008086:	2332      	movs	r3, #50	; 0x32
 8008088:	0038      	movs	r0, r7
 800808a:	f7fa ffdb 	bl	8003044 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800808e:	464a      	mov	r2, r9
 8008090:	1c6b      	adds	r3, r5, #1
 8008092:	88d2      	ldrh	r2, [r2, #6]
 8008094:	b2dd      	uxtb	r5, r3
 8008096:	42aa      	cmp	r2, r5
 8008098:	d8de      	bhi.n	8008058 <SendMessageFromPort.part.0+0xcc>
 800809a:	4647      	mov	r7, r8
		ACK_FLAG =false; rejected_FLAG=false;
 800809c:	2300      	movs	r3, #0
 800809e:	4652      	mov	r2, sl
 80080a0:	703b      	strb	r3, [r7, #0]
 80080a2:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 80080a4:	2000      	movs	r0, #0
 80080a6:	9904      	ldr	r1, [sp, #16]
 80080a8:	f006 fd6a 	bl	800eb80 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 80080ac:	2202      	movs	r2, #2
	return result;
 80080ae:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 80080b0:	4b9f      	ldr	r3, [pc, #636]	; (8008330 <SendMessageFromPort.part.0+0x3a4>)
 80080b2:	701a      	strb	r2, [r3, #0]
}
 80080b4:	b009      	add	sp, #36	; 0x24
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	46bb      	mov	fp, r7
 80080ba:	46b2      	mov	sl, r6
 80080bc:	46a9      	mov	r9, r5
 80080be:	46a0      	mov	r8, r4
 80080c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d100      	bne.n	80080ca <SendMessageFromPort.part.0+0x13e>
 80080c8:	e782      	b.n	8007fd0 <SendMessageFromPort.part.0+0x44>
		if(src == 0)
 80080ca:	4643      	mov	r3, r8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d100      	bne.n	80080d2 <SendMessageFromPort.part.0+0x146>
 80080d0:	e0ce      	b.n	8008270 <SendMessageFromPort.part.0+0x2e4>
		message[2] =length;
 80080d2:	2300      	movs	r3, #0
 80080d4:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 80080d6:	465b      	mov	r3, fp
 80080d8:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 80080da:	4643      	mov	r3, r8
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80080dc:	4a91      	ldr	r2, [pc, #580]	; (8008324 <SendMessageFromPort.part.0+0x398>)
		message[4] =src;
 80080de:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80080e0:	7913      	ldrb	r3, [r2, #4]
 80080e2:	7851      	ldrb	r1, [r2, #1]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	7812      	ldrb	r2, [r2, #0]
 80080e8:	0089      	lsls	r1, r1, #2
 80080ea:	430b      	orrs	r3, r1
 80080ec:	4313      	orrs	r3, r2
		if(code > 0xFF)
 80080ee:	22ff      	movs	r2, #255	; 0xff
 80080f0:	9903      	ldr	r1, [sp, #12]
 80080f2:	428a      	cmp	r2, r1
 80080f4:	4192      	sbcs	r2, r2
 80080f6:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80080f8:	0052      	lsls	r2, r2, #1
 80080fa:	4313      	orrs	r3, r2
 80080fc:	2200      	movs	r2, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	4692      	mov	sl, r2
 8008102:	7163      	strb	r3, [r4, #5]
		message[6 + shift] =(uint8_t )code;
 8008104:	71a1      	strb	r1, [r4, #6]
		if(extendCode == true){
 8008106:	29ff      	cmp	r1, #255	; 0xff
 8008108:	d900      	bls.n	800810c <SendMessageFromPort.part.0+0x180>
 800810a:	e0cb      	b.n	80082a4 <SendMessageFromPort.part.0+0x318>
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800810c:	2d2e      	cmp	r5, #46	; 0x2e
 800810e:	d800      	bhi.n	8008112 <SendMessageFromPort.part.0+0x186>
 8008110:	e0cf      	b.n	80082b2 <SendMessageFromPort.part.0+0x326>
			message[5] |=0x80;
 8008112:	2280      	movs	r2, #128	; 0x80
 8008114:	4252      	negs	r2, r2
 8008116:	4313      	orrs	r3, r2
 8008118:	7163      	strb	r3, [r4, #5]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 800811a:	232e      	movs	r3, #46	; 0x2e
 800811c:	4699      	mov	r9, r3
			totalNumberOfParams =numberOfParams;
 800811e:	4f85      	ldr	r7, [pc, #532]	; (8008334 <SendMessageFromPort.part.0+0x3a8>)
 8008120:	807d      	strh	r5, [r7, #2]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8008122:	464b      	mov	r3, r9
 8008124:	4641      	mov	r1, r8
 8008126:	465a      	mov	r2, fp
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	0030      	movs	r0, r6
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	f7ff ff17 	bl	8007f60 <SendMessageFromPort>
					osDelay(10);
 8008132:	200a      	movs	r0, #10
 8008134:	f005 fe7c 	bl	800de30 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8008138:	887d      	ldrh	r5, [r7, #2]
					ptrShift +=numberOfParams;
 800813a:	8839      	ldrh	r1, [r7, #0]
					totalNumberOfParams -=numberOfParams;
 800813c:	3d2e      	subs	r5, #46	; 0x2e
					ptrShift +=numberOfParams;
 800813e:	312e      	adds	r1, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8008140:	b2ad      	uxth	r5, r5
					ptrShift +=numberOfParams;
 8008142:	b289      	uxth	r1, r1
					totalNumberOfParams -=numberOfParams;
 8008144:	807d      	strh	r5, [r7, #2]
					ptrShift +=numberOfParams;
 8008146:	8039      	strh	r1, [r7, #0]
			while(totalNumberOfParams != 0){
 8008148:	2d00      	cmp	r5, #0
 800814a:	d100      	bne.n	800814e <SendMessageFromPort.part.0+0x1c2>
 800814c:	e107      	b.n	800835e <SendMessageFromPort.part.0+0x3d2>
				if((totalNumberOfParams / numberOfParams) >= 1){
 800814e:	2d2d      	cmp	r5, #45	; 0x2d
 8008150:	d8e7      	bhi.n	8008122 <SendMessageFromPort.part.0+0x196>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8008152:	237f      	movs	r3, #127	; 0x7f
 8008154:	7962      	ldrb	r2, [r4, #5]
 8008156:	4013      	ands	r3, r2
 8008158:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800815a:	4653      	mov	r3, sl
 800815c:	1dd8      	adds	r0, r3, #7
 800815e:	4b76      	ldr	r3, [pc, #472]	; (8008338 <SendMessageFromPort.part.0+0x3ac>)
 8008160:	002a      	movs	r2, r5
 8008162:	18c9      	adds	r1, r1, r3
 8008164:	1820      	adds	r0, r4, r0
 8008166:	f00b fd0f 	bl	8013b88 <memcpy>
					ptrShift =0;
 800816a:	2300      	movs	r3, #0
 800816c:	803b      	strh	r3, [r7, #0]
					totalNumberOfParams =0;
 800816e:	807b      	strh	r3, [r7, #2]
					length =numberOfParams + shift + 4;
 8008170:	4653      	mov	r3, sl
 8008172:	1d1f      	adds	r7, r3, #4
 8008174:	197f      	adds	r7, r7, r5
 8008176:	b2ff      	uxtb	r7, r7
		if(AddBcastPayload == true){
 8008178:	4b70      	ldr	r3, [pc, #448]	; (800833c <SendMessageFromPort.part.0+0x3b0>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d100      	bne.n	8008182 <SendMessageFromPort.part.0+0x1f6>
 8008180:	e732      	b.n	8007fe8 <SendMessageFromPort.part.0+0x5c>
			if(dstGroupID < BOS_BROADCAST){
 8008182:	4b6f      	ldr	r3, [pc, #444]	; (8008340 <SendMessageFromPort.part.0+0x3b4>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2bff      	cmp	r3, #255	; 0xff
 8008188:	d100      	bne.n	800818c <SendMessageFromPort.part.0+0x200>
 800818a:	e0b3      	b.n	80082f4 <SendMessageFromPort.part.0+0x368>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800818c:	4a6d      	ldr	r2, [pc, #436]	; (8008344 <SendMessageFromPort.part.0+0x3b8>)
 800818e:	7810      	ldrb	r0, [r2, #0]
 8008190:	4681      	mov	r9, r0
 8008192:	2800      	cmp	r0, #0
 8008194:	d100      	bne.n	8008198 <SendMessageFromPort.part.0+0x20c>
 8008196:	e0df      	b.n	8008358 <SendMessageFromPort.part.0+0x3cc>
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	4694      	mov	ip, r2
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800819e:	4652      	mov	r2, sl
 80081a0:	3207      	adds	r2, #7
 80081a2:	9206      	str	r2, [sp, #24]
 80081a4:	0032      	movs	r2, r6
 80081a6:	464e      	mov	r6, r9
 80081a8:	46a9      	mov	r9, r5
 80081aa:	9707      	str	r7, [sp, #28]
			uint8_t groupMembers =0;
 80081ac:	2000      	movs	r0, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80081ae:	464f      	mov	r7, r9
				for(uint16_t i =1; i <= N; i++)						// N modules
 80081b0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80081b2:	4665      	mov	r5, ip
 80081b4:	4691      	mov	r9, r2
 80081b6:	4964      	ldr	r1, [pc, #400]	; (8008348 <SendMessageFromPort.part.0+0x3bc>)
					if(InGroup(i,dstGroupID)){
 80081b8:	880a      	ldrh	r2, [r1, #0]
 80081ba:	4215      	tst	r5, r2
 80081bc:	d00e      	beq.n	80081dc <SendMessageFromPort.part.0+0x250>
						++groupMembers;							// Add this member
 80081be:	3001      	adds	r0, #1
 80081c0:	b2c0      	uxtb	r0, r0
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80081c2:	19c2      	adds	r2, r0, r7
 80081c4:	2a2c      	cmp	r2, #44	; 0x2c
 80081c6:	dd00      	ble.n	80081ca <SendMessageFromPort.part.0+0x23e>
 80081c8:	e092      	b.n	80082f0 <SendMessageFromPort.part.0+0x364>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80081ca:	1822      	adds	r2, r4, r0
 80081cc:	19d2      	adds	r2, r2, r7
 80081ce:	9205      	str	r2, [sp, #20]
 80081d0:	9a06      	ldr	r2, [sp, #24]
 80081d2:	4694      	mov	ip, r2
 80081d4:	9a05      	ldr	r2, [sp, #20]
 80081d6:	4462      	add	r2, ip
 80081d8:	3a01      	subs	r2, #1
 80081da:	7013      	strb	r3, [r2, #0]
				for(uint16_t i =1; i <= N; i++)						// N modules
 80081dc:	3301      	adds	r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3102      	adds	r1, #2
 80081e2:	42b3      	cmp	r3, r6
 80081e4:	d9e8      	bls.n	80081b8 <SendMessageFromPort.part.0+0x22c>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80081e6:	003d      	movs	r5, r7
 80081e8:	464e      	mov	r6, r9
 80081ea:	0001      	movs	r1, r0
 80081ec:	9f07      	ldr	r7, [sp, #28]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80081ee:	1942      	adds	r2, r0, r5
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80081f0:	4653      	mov	r3, sl
 80081f2:	3307      	adds	r3, #7
 80081f4:	195d      	adds	r5, r3, r5
 80081f6:	186d      	adds	r5, r5, r1
 80081f8:	5560      	strb	r0, [r4, r5]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80081fa:	2a2b      	cmp	r2, #43	; 0x2b
 80081fc:	dc78      	bgt.n	80082f0 <SendMessageFromPort.part.0+0x364>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80081fe:	4a53      	ldr	r2, [pc, #332]	; (800834c <SendMessageFromPort.part.0+0x3c0>)
 8008200:	3702      	adds	r7, #2
 8008202:	7813      	ldrb	r3, [r2, #0]
 8008204:	1965      	adds	r5, r4, r5
 8008206:	3301      	adds	r3, #1
 8008208:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800820a:	183f      	adds	r7, r7, r0
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800820c:	7013      	strb	r3, [r2, #0]
 800820e:	706b      	strb	r3, [r5, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008210:	b2ff      	uxtb	r7, r7
 8008212:	e6e9      	b.n	8007fe8 <SendMessageFromPort.part.0+0x5c>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <SendMessageFromPort.part.0+0x294>
 800821a:	4643      	mov	r3, r8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d056      	beq.n	80082ce <SendMessageFromPort.part.0+0x342>
		FindBroadcastRoutes(src);
 8008220:	4640      	mov	r0, r8
 8008222:	f7fb fd37 	bl	8003c94 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008226:	4b4a      	ldr	r3, [pc, #296]	; (8008350 <SendMessageFromPort.part.0+0x3c4>)
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008228:	9d05      	ldr	r5, [sp, #20]
 800822a:	4699      	mov	r9, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800822c:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 800822e:	3504      	adds	r5, #4
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008230:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008232:	b2ab      	uxth	r3, r5
 8008234:	4698      	mov	r8, r3
 8008236:	464b      	mov	r3, r9
		FindBroadcastRoutes(src);
 8008238:	2100      	movs	r1, #0
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 800823a:	46b1      	mov	r9, r6
 800823c:	001e      	movs	r6, r3
 800823e:	4f3a      	ldr	r7, [pc, #232]	; (8008328 <SendMessageFromPort.part.0+0x39c>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008240:	7833      	ldrb	r3, [r6, #0]
 8008242:	4a44      	ldr	r2, [pc, #272]	; (8008354 <SendMessageFromPort.part.0+0x3c8>)
 8008244:	3b01      	subs	r3, #1
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	5ad3      	ldrh	r3, [r2, r3]
 800824a:	4652      	mov	r2, sl
 800824c:	410b      	asrs	r3, r1
 800824e:	1c4d      	adds	r5, r1, #1
 8008250:	b2e8      	uxtb	r0, r5
 8008252:	421a      	tst	r2, r3
 8008254:	d110      	bne.n	8008278 <SendMessageFromPort.part.0+0x2ec>
			rejected_FLAG=false;
 8008256:	2300      	movs	r3, #0
			Delay_us(10);
 8008258:	200a      	movs	r0, #10
			rejected_FLAG=false;
 800825a:	703b      	strb	r3, [r7, #0]
			Delay_us(10);
 800825c:	f005 fa7a 	bl	800d754 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008260:	0029      	movs	r1, r5
 8008262:	2d05      	cmp	r5, #5
 8008264:	d1ec      	bne.n	8008240 <SendMessageFromPort.part.0+0x2b4>
 8008266:	e71d      	b.n	80080a4 <SendMessageFromPort.part.0+0x118>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d100      	bne.n	8008270 <SendMessageFromPort.part.0+0x2e4>
 800826e:	e6af      	b.n	8007fd0 <SendMessageFromPort.part.0+0x44>
			src =myID;
 8008270:	4b37      	ldr	r3, [pc, #220]	; (8008350 <SendMessageFromPort.part.0+0x3c4>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	4698      	mov	r8, r3
 8008276:	e72c      	b.n	80080d2 <SendMessageFromPort.part.0+0x146>
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008278:	465b      	mov	r3, fp
 800827a:	4642      	mov	r2, r8
 800827c:	0021      	movs	r1, r4
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	2332      	movs	r3, #50	; 0x32
 8008282:	f7fa fedf 	bl	8003044 <Send_BOS_Message>
				osDelay(200);
 8008286:	20c8      	movs	r0, #200	; 0xc8
 8008288:	f005 fdd2 	bl	800de30 <osDelay>
				if(rejected_FLAG == true)
 800828c:	783b      	ldrb	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0e1      	beq.n	8008256 <SendMessageFromPort.part.0+0x2ca>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008292:	465b      	mov	r3, fp
 8008294:	4642      	mov	r2, r8
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	0021      	movs	r1, r4
 800829a:	2332      	movs	r3, #50	; 0x32
 800829c:	4648      	mov	r0, r9
 800829e:	f7fa fed1 	bl	8003044 <Send_BOS_Message>
 80082a2:	e7d8      	b.n	8008256 <SendMessageFromPort.part.0+0x2ca>
			message[6 + shift] =(uint8_t )(code >> 8);
 80082a4:	0a0a      	lsrs	r2, r1, #8
 80082a6:	71e2      	strb	r2, [r4, #7]
			++shift;
 80082a8:	2201      	movs	r2, #1
 80082aa:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80082ac:	2d2e      	cmp	r5, #46	; 0x2e
 80082ae:	d900      	bls.n	80082b2 <SendMessageFromPort.part.0+0x326>
 80082b0:	e72f      	b.n	8008112 <SendMessageFromPort.part.0+0x186>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80082b2:	4653      	mov	r3, sl
 80082b4:	1dd8      	adds	r0, r3, #7
 80082b6:	4b1f      	ldr	r3, [pc, #124]	; (8008334 <SendMessageFromPort.part.0+0x3a8>)
			length =numberOfParams + shift + 4;
 80082b8:	1d2f      	adds	r7, r5, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80082ba:	8819      	ldrh	r1, [r3, #0]
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <SendMessageFromPort.part.0+0x3ac>)
 80082be:	002a      	movs	r2, r5
 80082c0:	1820      	adds	r0, r4, r0
 80082c2:	18c9      	adds	r1, r1, r3
			length =numberOfParams + shift + 4;
 80082c4:	4457      	add	r7, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80082c6:	f00b fc5f 	bl	8013b88 <memcpy>
			length =numberOfParams + shift + 4;
 80082ca:	b2ff      	uxtb	r7, r7
 80082cc:	e754      	b.n	8008178 <SendMessageFromPort.part.0+0x1ec>
			src =message[4];
 80082ce:	7923      	ldrb	r3, [r4, #4]
 80082d0:	4698      	mov	r8, r3
 80082d2:	e7a5      	b.n	8008220 <SendMessageFromPort.part.0+0x294>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 80082d4:	465b      	mov	r3, fp
 80082d6:	9d05      	ldr	r5, [sp, #20]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	3504      	adds	r5, #4
 80082dc:	2332      	movs	r3, #50	; 0x32
 80082de:	0021      	movs	r1, r4
 80082e0:	0030      	movs	r0, r6
 80082e2:	b2aa      	uxth	r2, r5
 80082e4:	f7fa feae 	bl	8003044 <Send_BOS_Message>
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <SendMessageFromPort.part.0+0x3a0>)
 80082ea:	4f0f      	ldr	r7, [pc, #60]	; (8008328 <SendMessageFromPort.part.0+0x39c>)
 80082ec:	469a      	mov	sl, r3
 80082ee:	e6d5      	b.n	800809c <SendMessageFromPort.part.0+0x110>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80082f0:	2069      	movs	r0, #105	; 0x69
 80082f2:	e6df      	b.n	80080b4 <SendMessageFromPort.part.0+0x128>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80082f4:	2d2c      	cmp	r5, #44	; 0x2c
 80082f6:	d8fb      	bhi.n	80082f0 <SendMessageFromPort.part.0+0x364>
				message[7 + shift + numberOfParams] =++bcastID;
 80082f8:	4a14      	ldr	r2, [pc, #80]	; (800834c <SendMessageFromPort.part.0+0x3c0>)
 80082fa:	1965      	adds	r5, r4, r5
 80082fc:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80082fe:	3701      	adds	r7, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8008300:	3301      	adds	r3, #1
 8008302:	b2db      	uxtb	r3, r3
 8008304:	7013      	strb	r3, [r2, #0]
 8008306:	4652      	mov	r2, sl
 8008308:	3207      	adds	r2, #7
 800830a:	54ab      	strb	r3, [r5, r2]
				length +=1;		// + bcastID
 800830c:	b2ff      	uxtb	r7, r7
 800830e:	e66b      	b.n	8007fe8 <SendMessageFromPort.part.0+0x5c>
 8008310:	20000d08 	.word	0x20000d08
 8008314:	20000d00 	.word	0x20000d00
 8008318:	20000d40 	.word	0x20000d40
 800831c:	20000d0b 	.word	0x20000d0b
 8008320:	200019d8 	.word	0x200019d8
 8008324:	20000b4c 	.word	0x20000b4c
 8008328:	200011ed 	.word	0x200011ed
 800832c:	200011ee 	.word	0x200011ee
 8008330:	20000c74 	.word	0x20000c74
 8008334:	20001f28 	.word	0x20001f28
 8008338:	20000b74 	.word	0x20000b74
 800833c:	200011c0 	.word	0x200011c0
 8008340:	20000050 	.word	0x20000050
 8008344:	20000008 	.word	0x20000008
 8008348:	20000aac 	.word	0x20000aac
 800834c:	20000cf8 	.word	0x20000cf8
 8008350:	20000aa8 	.word	0x20000aa8
 8008354:	20000ba4 	.word	0x20000ba4
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8008358:	002a      	movs	r2, r5
 800835a:	2100      	movs	r1, #0
 800835c:	e748      	b.n	80081f0 <SendMessageFromPort.part.0+0x264>
 800835e:	2700      	movs	r7, #0
 8008360:	352e      	adds	r5, #46	; 0x2e
 8008362:	e709      	b.n	8008178 <SendMessageFromPort.part.0+0x1ec>

08008364 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008364:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008366:	b500      	push	{lr}
	AddBcastPayload = false;
 8008368:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800836a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800836c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800836e:	4b0b      	ldr	r3, [pc, #44]	; (800839c <BroadcastReceivedMessage+0x38>)
 8008370:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008372:	2300      	movs	r3, #0
 8008374:	9100      	str	r1, [sp, #0]
 8008376:	28ff      	cmp	r0, #255	; 0xff
 8008378:	d007      	beq.n	800838a <BroadcastReceivedMessage+0x26>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800837a:	22fe      	movs	r2, #254	; 0xfe
 800837c:	2100      	movs	r1, #0
 800837e:	2000      	movs	r0, #0
 8008380:	f7ff fe04 	bl	8007f8c <SendMessageFromPort.part.0>
}
 8008384:	2000      	movs	r0, #0
 8008386:	b003      	add	sp, #12
 8008388:	bd00      	pop	{pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800838a:	2100      	movs	r1, #0
 800838c:	32ff      	adds	r2, #255	; 0xff
 800838e:	2000      	movs	r0, #0
 8008390:	f7ff fdfc 	bl	8007f8c <SendMessageFromPort.part.0>
 8008394:	e7f6      	b.n	8008384 <BroadcastReceivedMessage+0x20>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	200011c0 	.word	0x200011c0
 800839c:	20000050 	.word	0x20000050

080083a0 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80083a0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80083a2:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80083a4:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80083a8:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80083aa:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <BroadcastMessage+0x44>)
 80083ae:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80083b0:	0013      	movs	r3, r2
 80083b2:	9400      	str	r4, [sp, #0]
 80083b4:	29ff      	cmp	r1, #255	; 0xff
 80083b6:	d00c      	beq.n	80083d2 <BroadcastMessage+0x32>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80083b8:	0001      	movs	r1, r0
 80083ba:	22fe      	movs	r2, #254	; 0xfe
 80083bc:	2000      	movs	r0, #0
 80083be:	f7ff fde5 	bl	8007f8c <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80083c2:	0022      	movs	r2, r4
 80083c4:	2100      	movs	r1, #0
 80083c6:	4808      	ldr	r0, [pc, #32]	; (80083e8 <BroadcastMessage+0x48>)
 80083c8:	f00b fbe7 	bl	8013b9a <memset>
}
 80083cc:	2000      	movs	r0, #0
 80083ce:	b003      	add	sp, #12
 80083d0:	bd30      	pop	{r4, r5, pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80083d2:	0001      	movs	r1, r0
 80083d4:	22ff      	movs	r2, #255	; 0xff
 80083d6:	2000      	movs	r0, #0
 80083d8:	f7ff fdd8 	bl	8007f8c <SendMessageFromPort.part.0>
 80083dc:	e7f1      	b.n	80083c2 <BroadcastMessage+0x22>
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	200011c0 	.word	0x200011c0
 80083e4:	20000050 	.word	0x20000050
 80083e8:	20000b74 	.word	0x20000b74

080083ec <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80083ec:	2200      	movs	r2, #0
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <ForwardReceivedMessage+0x48>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80083f0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = false;
 80083f2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80083f4:	1e42      	subs	r2, r0, #1
 80083f6:	00d3      	lsls	r3, r2, #3
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	4a0f      	ldr	r2, [pc, #60]	; (8008438 <ForwardReceivedMessage+0x4c>)
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	5c9d      	ldrb	r5, [r3, r2]
		port =FindRoute(myID,dst);
 8008400:	4b0e      	ldr	r3, [pc, #56]	; (800843c <ForwardReceivedMessage+0x50>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008402:	0004      	movs	r4, r0
		port =FindRoute(myID,dst);
 8008404:	0029      	movs	r1, r5
 8008406:	7818      	ldrb	r0, [r3, #0]
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008408:	b083      	sub	sp, #12
		port =FindRoute(myID,dst);
 800840a:	f7fb fce7 	bl	8003ddc <FindRoute>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800840e:	002b      	movs	r3, r5
 8008410:	4303      	orrs	r3, r0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <ForwardReceivedMessage+0x3c>
 8008418:	2800      	cmp	r0, #0
 800841a:	d008      	beq.n	800842e <ForwardReceivedMessage+0x42>
 800841c:	2300      	movs	r3, #0
 800841e:	002a      	movs	r2, r5
 8008420:	2100      	movs	r1, #0
 8008422:	9400      	str	r4, [sp, #0]
 8008424:	f7ff fdb2 	bl	8007f8c <SendMessageFromPort.part.0>
}
 8008428:	2000      	movs	r0, #0
 800842a:	b003      	add	sp, #12
 800842c:	bd30      	pop	{r4, r5, pc}
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800842e:	2dfd      	cmp	r5, #253	; 0xfd
 8008430:	d8f4      	bhi.n	800841c <ForwardReceivedMessage+0x30>
 8008432:	e7f9      	b.n	8008428 <ForwardReceivedMessage+0x3c>
 8008434:	200011c0 	.word	0x200011c0
 8008438:	20000d40 	.word	0x20000d40
 800843c:	20000aa8 	.word	0x20000aa8

08008440 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008442:	0004      	movs	r4, r0
 8008444:	000e      	movs	r6, r1
 8008446:	0015      	movs	r5, r2
 8008448:	b083      	sub	sp, #12
	if(dst != BOS_BROADCAST){
 800844a:	28ff      	cmp	r0, #255	; 0xff
 800844c:	d012      	beq.n	8008474 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800844e:	4f13      	ldr	r7, [pc, #76]	; (800849c <SendMessageToModule+0x5c>)
 8008450:	0021      	movs	r1, r4
 8008452:	7838      	ldrb	r0, [r7, #0]
 8008454:	f7fb fcc2 	bl	8003ddc <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008458:	7839      	ldrb	r1, [r7, #0]
 800845a:	0022      	movs	r2, r4
 800845c:	0033      	movs	r3, r6
 800845e:	9500      	str	r5, [sp, #0]
 8008460:	f7ff fd7e 	bl	8007f60 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008464:	002a      	movs	r2, r5
 8008466:	2100      	movs	r1, #0
 8008468:	480d      	ldr	r0, [pc, #52]	; (80084a0 <SendMessageToModule+0x60>)
 800846a:	f00b fb96 	bl	8013b9a <memset>
}
 800846e:	2000      	movs	r0, #0
 8008470:	b003      	add	sp, #12
 8008472:	bdf0      	pop	{r4, r5, r6, r7, pc}
	AddBcastPayload = true;
 8008474:	2201      	movs	r2, #1
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <SendMessageToModule+0x5c>)
 8008478:	7819      	ldrb	r1, [r3, #0]
	AddBcastPayload = true;
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <SendMessageToModule+0x64>)
 800847c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800847e:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <SendMessageToModule+0x68>)
 8008480:	32fe      	adds	r2, #254	; 0xfe
 8008482:	7018      	strb	r0, [r3, #0]
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008484:	0033      	movs	r3, r6
 8008486:	9500      	str	r5, [sp, #0]
 8008488:	2000      	movs	r0, #0
 800848a:	f7ff fd7f 	bl	8007f8c <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 800848e:	002a      	movs	r2, r5
 8008490:	2100      	movs	r1, #0
 8008492:	4803      	ldr	r0, [pc, #12]	; (80084a0 <SendMessageToModule+0x60>)
 8008494:	f00b fb81 	bl	8013b9a <memset>
	return BOS_OK;
 8008498:	e7e9      	b.n	800846e <SendMessageToModule+0x2e>
 800849a:	46c0      	nop			; (mov r8, r8)
 800849c:	20000aa8 	.word	0x20000aa8
 80084a0:	20000b74 	.word	0x20000b74
 80084a4:	200011c0 	.word	0x200011c0
 80084a8:	20000050 	.word	0x20000050

080084ac <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80084ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ae:	4657      	mov	r7, sl
 80084b0:	46de      	mov	lr, fp
 80084b2:	464e      	mov	r6, r9
 80084b4:	4645      	mov	r5, r8
 80084b6:	b5e0      	push	{r5, r6, r7, lr}
 80084b8:	b08f      	sub	sp, #60	; 0x3c
 80084ba:	001e      	movs	r6, r3
 80084bc:	ab18      	add	r3, sp, #96	; 0x60
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	000f      	movs	r7, r1
 80084c2:	469b      	mov	fp, r3
 80084c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4692      	mov	sl, r2
 80084ca:	9306      	str	r3, [sp, #24]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80084cc:	4b57      	ldr	r3, [pc, #348]	; (800862c <StartScastDMAStream+0x180>)
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80084ce:	900d      	str	r0, [sp, #52]	; 0x34
	if(srcM != myID){
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	428b      	cmp	r3, r1
 80084d4:	d000      	beq.n	80084d8 <StartScastDMAStream+0x2c>
 80084d6:	e084      	b.n	80085e2 <StartScastDMAStream+0x136>
 80084d8:	221d      	movs	r2, #29
 80084da:	4691      	mov	r9, r2
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80084dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084de:	4c54      	ldr	r4, [pc, #336]	; (8008630 <StartScastDMAStream+0x184>)
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	9307      	str	r3, [sp, #28]
			messageParams[1] =(uint8_t )(count >> 16);
 80084e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	9308      	str	r3, [sp, #32]
			messageParams[2] =(uint8_t )(count >> 8);
 80084ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80084f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084f6:	0e1b      	lsrs	r3, r3, #24
 80084f8:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[5] =(uint8_t )(timeout >> 16);
 80084fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008502:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008504:	0a1b      	lsrs	r3, r3, #8
 8008506:	b2db      	uxtb	r3, r3
 8008508:	930c      	str	r3, [sp, #48]	; 0x30
 800850a:	4b4a      	ldr	r3, [pc, #296]	; (8008634 <StartScastDMAStream+0x188>)
 800850c:	1cdd      	adds	r5, r3, #3
 800850e:	4499      	add	r9, r3
		FindRoute(srcM,dstM);
 8008510:	0031      	movs	r1, r6
 8008512:	0038      	movs	r0, r7
 8008514:	f7fb fc62 	bl	8003ddc <FindRoute>
		if(route[i]){
 8008518:	7868      	ldrb	r0, [r5, #1]
 800851a:	2800      	cmp	r0, #0
 800851c:	d035      	beq.n	800858a <StartScastDMAStream+0xde>
			if(route[i + 1]){
 800851e:	78a9      	ldrb	r1, [r5, #2]
 8008520:	2900      	cmp	r1, #0
 8008522:	d100      	bne.n	8008526 <StartScastDMAStream+0x7a>
				temp1 =FindRoute(route[i],srcM);
 8008524:	0039      	movs	r1, r7
 8008526:	f7fb fc59 	bl	8003ddc <FindRoute>
			FindRoute(srcM,dstM);
 800852a:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 800852c:	4680      	mov	r8, r0
			FindRoute(srcM,dstM);
 800852e:	0038      	movs	r0, r7
 8008530:	f7fb fc54 	bl	8003ddc <FindRoute>
			if(route[i] == dstM){
 8008534:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8008536:	4653      	mov	r3, sl
			if(route[i] == dstM){
 8008538:	42b0      	cmp	r0, r6
 800853a:	d003      	beq.n	8008544 <StartScastDMAStream+0x98>
				temp2 =FindRoute(route[i],route[i - 1]);
 800853c:	7829      	ldrb	r1, [r5, #0]
 800853e:	f7fb fc4d 	bl	8003ddc <FindRoute>
 8008542:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008544:	9a07      	ldr	r2, [sp, #28]
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8008546:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008548:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 800854a:	9a08      	ldr	r2, [sp, #32]
			messageParams[11] =stored; /* EEPROM storage */
 800854c:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 800854e:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008550:	9a09      	ldr	r2, [sp, #36]	; 0x24
			FindRoute(srcM,dstM);
 8008552:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8008554:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008556:	9a19      	ldr	r2, [sp, #100]	; 0x64
			messageParams[11] =stored; /* EEPROM storage */
 8008558:	72e3      	strb	r3, [r4, #11]
			messageParams[3] =(uint8_t )count;
 800855a:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800855c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			FindRoute(srcM,dstM);
 800855e:	0038      	movs	r0, r7
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008560:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008564:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008568:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 800856a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800856c:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 800856e:	465a      	mov	r2, fp
 8008570:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008572:	4642      	mov	r2, r8
 8008574:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8008576:	f7fb fc31 	bl	8003ddc <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800857a:	220c      	movs	r2, #12
 800857c:	211b      	movs	r1, #27
 800857e:	7868      	ldrb	r0, [r5, #1]
 8008580:	f7ff ff5e 	bl	8008440 <SendMessageToModule>
			osDelay(10);
 8008584:	200a      	movs	r0, #10
 8008586:	f005 fc53 	bl	800de30 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 800858a:	3501      	adds	r5, #1
 800858c:	454d      	cmp	r5, r9
 800858e:	d1bf      	bne.n	8008510 <StartScastDMAStream+0x64>
		}
	}
	
	if(srcM == dstM)
 8008590:	42b7      	cmp	r7, r6
 8008592:	d112      	bne.n	80085ba <StartScastDMAStream+0x10e>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008594:	4653      	mov	r3, sl
 8008596:	4658      	mov	r0, fp
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800859c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800859e:	9919      	ldr	r1, [sp, #100]	; 0x64
 80085a0:	f7ff fbec 	bl	8007d7c <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 80085a4:	9b06      	ldr	r3, [sp, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <StartScastDMAStream+0x11a>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80085aa:	2000      	movs	r0, #0
 80085ac:	b00f      	add	sp, #60	; 0x3c
 80085ae:	bcf0      	pop	{r4, r5, r6, r7}
 80085b0:	46bb      	mov	fp, r7
 80085b2:	46b2      	mov	sl, r6
 80085b4:	46a9      	mov	r9, r5
 80085b6:	46a0      	mov	r8, r4
 80085b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 80085ba:	0031      	movs	r1, r6
 80085bc:	0038      	movs	r0, r7
 80085be:	f7fb fc0d 	bl	8003ddc <FindRoute>
 80085c2:	4682      	mov	sl, r0
 80085c4:	e7e6      	b.n	8008594 <StartScastDMAStream+0xe8>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80085c6:	2300      	movs	r3, #0
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	4653      	mov	r3, sl
 80085d2:	4658      	mov	r0, fp
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80085d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085da:	9919      	ldr	r1, [sp, #100]	; 0x64
 80085dc:	f7fb f936 	bl	800384c <SaveEEstreams>
 80085e0:	e7e3      	b.n	80085aa <StartScastDMAStream+0xfe>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80085e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085e4:	4b12      	ldr	r3, [pc, #72]	; (8008630 <StartScastDMAStream+0x184>)
 80085e6:	0e12      	lsrs	r2, r2, #24
 80085e8:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 80085ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
		messageParams[9] =srcP; /* Source port */
 80085ec:	7258      	strb	r0, [r3, #9]
		messageParams[1] =(uint8_t )(count >> 16);
 80085ee:	0c12      	lsrs	r2, r2, #16
 80085f0:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 80085f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80085f4:	211c      	movs	r1, #28
		messageParams[2] =(uint8_t )(count >> 8);
 80085f6:	0a12      	lsrs	r2, r2, #8
 80085f8:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80085fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80085fc:	0038      	movs	r0, r7
		messageParams[3] =(uint8_t )count;
 80085fe:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008600:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		messageParams[10] =dstM; /* destination module */
 8008602:	729e      	strb	r6, [r3, #10]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008604:	0e12      	lsrs	r2, r2, #24
 8008606:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8008608:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800860a:	0c12      	lsrs	r2, r2, #16
 800860c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800860e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008610:	0a12      	lsrs	r2, r2, #8
 8008612:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008614:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008616:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8008618:	465a      	mov	r2, fp
 800861a:	721a      	strb	r2, [r3, #8]
		messageParams[11] =dstP; /* destination port */
 800861c:	4652      	mov	r2, sl
 800861e:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008624:	220d      	movs	r2, #13
 8008626:	f7ff ff0b 	bl	8008440 <SendMessageToModule>
		return result;
 800862a:	e7be      	b.n	80085aa <StartScastDMAStream+0xfe>
 800862c:	20000aa8 	.word	0x20000aa8
 8008630:	20000b74 	.word	0x20000b74
 8008634:	20001f28 	.word	0x20001f28

08008638 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863a:	464e      	mov	r6, r9
 800863c:	4645      	mov	r5, r8
 800863e:	46de      	mov	lr, fp
 8008640:	4657      	mov	r7, sl

	uint8_t calculated_crc,port_number,length,port_index;

			uint8_t temp_length[NumOfPorts] = {0};
 8008642:	2300      	movs	r3, #0
void BackEndTask(void *argument){
 8008644:	b5e0      	push	{r5, r6, r7, lr}
 8008646:	b087      	sub	sp, #28
			uint8_t temp_length[NumOfPorts] = {0};
 8008648:	aa02      	add	r2, sp, #8
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	7113      	strb	r3, [r2, #4]
			uint8_t temp_index[NumOfPorts] = {0};
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	7313      	strb	r3, [r2, #12]
 8008652:	4bcd      	ldr	r3, [pc, #820]	; (8008988 <BackEndTask+0x350>)
 8008654:	4ecd      	ldr	r6, [pc, #820]	; (800898c <BackEndTask+0x354>)
 8008656:	4699      	mov	r9, r3
 8008658:	4bcd      	ldr	r3, [pc, #820]	; (8008990 <BackEndTask+0x358>)
 800865a:	4dce      	ldr	r5, [pc, #824]	; (8008994 <BackEndTask+0x35c>)
 800865c:	4698      	mov	r8, r3
 800865e:	4bce      	ldr	r3, [pc, #824]	; (8008998 <BackEndTask+0x360>)
 8008660:	469b      	mov	fp, r3
 8008662:	4bce      	ldr	r3, [pc, #824]	; (800899c <BackEndTask+0x364>)
 8008664:	469a      	mov	sl, r3

	for(;;)
	{
       for(port_DMA=0;port_DMA<NumOfPorts;)
 8008666:	2300      	movs	r3, #0
 8008668:	2700      	movs	r7, #0
 800866a:	7033      	strb	r3, [r6, #0]
       {port_index=port_DMA;
		index_input[port_DMA]=MSG_RX_BUF_SIZE-(*index_dma[port_DMA]);
 800866c:	464b      	mov	r3, r9
 800866e:	2140      	movs	r1, #64	; 0x40
 8008670:	00ba      	lsls	r2, r7, #2
 8008672:	589b      	ldr	r3, [r3, r2]
 8008674:	4249      	negs	r1, r1
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	1acb      	subs	r3, r1, r3
 800867a:	49c9      	ldr	r1, [pc, #804]	; (80089a0 <BackEndTask+0x368>)
 800867c:	b2db      	uxtb	r3, r3
 800867e:	55cb      	strb	r3, [r1, r7]

		if(index_input[port_DMA] !=index_process[port_DMA])
 8008680:	4641      	mov	r1, r8
 8008682:	5dc8      	ldrb	r0, [r1, r7]
 8008684:	4283      	cmp	r3, r0
 8008686:	d100      	bne.n	800868a <BackEndTask+0x52>
 8008688:	e081      	b.n	800878e <BackEndTask+0x156>
		{ port_number =port_DMA+1;
 800868a:	1c7b      	adds	r3, r7, #1
 800868c:	b2db      	uxtb	r3, r3
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 800868e:	1e5c      	subs	r4, r3, #1
 8008690:	0061      	lsls	r1, r4, #1
 8008692:	1909      	adds	r1, r1, r4
 8008694:	4cc3      	ldr	r4, [pc, #780]	; (80089a4 <BackEndTask+0x36c>)
 8008696:	0189      	lsls	r1, r1, #6
 8008698:	46a4      	mov	ip, r4
 800869a:	4461      	add	r1, ip
 800869c:	5c09      	ldrb	r1, [r1, r0]
 800869e:	48c2      	ldr	r0, [pc, #776]	; (80089a8 <BackEndTask+0x370>)
 80086a0:	5cc0      	ldrb	r0, [r0, r3]
 80086a2:	290d      	cmp	r1, #13
 80086a4:	d07c      	beq.n	80087a0 <BackEndTask+0x168>

				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
				Activate_CLI_For_First_Time_Flag = 1;

			}
			else if(portStatus[port_number] == CLI)
 80086a6:	2803      	cmp	r0, #3
 80086a8:	d100      	bne.n	80086ac <BackEndTask+0x74>
 80086aa:	e085      	b.n	80087b8 <BackEndTask+0x180>
			{
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
				Read_In_CLI_Task_Flag = 1;
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80086ac:	2948      	cmp	r1, #72	; 0x48
 80086ae:	d100      	bne.n	80086b2 <BackEndTask+0x7a>
 80086b0:	e097      	b.n	80087e2 <BackEndTask+0x1aa>
			{
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 80086b2:	295a      	cmp	r1, #90	; 0x5a
 80086b4:	d178      	bne.n	80087a8 <BackEndTask+0x170>
 80086b6:	2807      	cmp	r0, #7
 80086b8:	d100      	bne.n	80086bc <BackEndTask+0x84>
 80086ba:	e11e      	b.n	80088fa <BackEndTask+0x2c2>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
			{
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
			}

			else if(portStatus[port_number] == Z_Status)
 80086bc:	2808      	cmp	r0, #8
 80086be:	d100      	bne.n	80086c2 <BackEndTask+0x8a>
 80086c0:	e0b8      	b.n	8008834 <BackEndTask+0x1fc>
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
				temp_index[port_index] = 3;
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
			}

			else if(portStatus[port_number] == MSG)
 80086c2:	2801      	cmp	r0, #1
 80086c4:	d100      	bne.n	80086c8 <BackEndTask+0x90>
 80086c6:	e0fa      	b.n	80088be <BackEndTask+0x286>
		else if(index_input[port_DMA] ==index_process[port_DMA])
		   {
			port_DMA++;
			}

		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80086c8:	4bb8      	ldr	r3, [pc, #736]	; (80089ac <BackEndTask+0x374>)
 80086ca:	781a      	ldrb	r2, [r3, #0]
			index_process[port_DMA]++;
 80086cc:	4643      	mov	r3, r8
 80086ce:	7831      	ldrb	r1, [r6, #0]
 80086d0:	5c5b      	ldrb	r3, [r3, r1]
 80086d2:	3301      	adds	r3, #1
 80086d4:	b2db      	uxtb	r3, r3
			if(index_process[port_DMA]==MSG_RX_BUF_SIZE)
 80086d6:	2bc0      	cmp	r3, #192	; 0xc0
 80086d8:	d05e      	beq.n	8008798 <BackEndTask+0x160>
			index_process[port_DMA]++;
 80086da:	4640      	mov	r0, r8
 80086dc:	5443      	strb	r3, [r0, r1]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80086de:	4653      	mov	r3, sl
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d105      	bne.n	80086f2 <BackEndTask+0xba>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
		}

		taskYIELD();
 80086e6:	f007 f925 	bl	800f934 <vPortYield>
       for(port_DMA=0;port_DMA<NumOfPorts;)
 80086ea:	7837      	ldrb	r7, [r6, #0]
 80086ec:	2f04      	cmp	r7, #4
 80086ee:	d9bd      	bls.n	800866c <BackEndTask+0x34>
 80086f0:	e7b9      	b.n	8008666 <BackEndTask+0x2e>
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80086f2:	2048      	movs	r0, #72	; 0x48
 80086f4:	465f      	mov	r7, fp
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 80086f6:	4aae      	ldr	r2, [pc, #696]	; (80089b0 <BackEndTask+0x378>)
 80086f8:	5cd3      	ldrb	r3, [r2, r3]
			port_index = port_number - 1;
 80086fa:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 80086fc:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80086fe:	4bad      	ldr	r3, [pc, #692]	; (80089b4 <BackEndTask+0x37c>)
			port_index = port_number - 1;
 8008700:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008702:	5d1b      	ldrb	r3, [r3, r4]
 8008704:	00a2      	lsls	r2, r4, #2
 8008706:	00d9      	lsls	r1, r3, #3
 8008708:	9200      	str	r2, [sp, #0]
 800870a:	1912      	adds	r2, r2, r4
 800870c:	1acb      	subs	r3, r1, r3
 800870e:	00d1      	lsls	r1, r2, #3
 8008710:	1a89      	subs	r1, r1, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	00c9      	lsls	r1, r1, #3
 8008716:	185a      	adds	r2, r3, r1
 8008718:	54b8      	strb	r0, [r7, r2]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800871a:	445a      	add	r2, fp
 800871c:	3012      	adds	r0, #18
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800871e:	7897      	ldrb	r7, [r2, #2]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008720:	7050      	strb	r0, [r2, #1]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008722:	4aa5      	ldr	r2, [pc, #660]	; (80089b8 <BackEndTask+0x380>)
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008724:	70af      	strb	r7, [r5, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008726:	802a      	strh	r2, [r5, #0]
			for(int i=0;i<length;i++)
 8008728:	2f00      	cmp	r7, #0
 800872a:	d006      	beq.n	800873a <BackEndTask+0x102>
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 800872c:	3103      	adds	r1, #3
 800872e:	18c9      	adds	r1, r1, r3
 8008730:	003a      	movs	r2, r7
 8008732:	1ce8      	adds	r0, r5, #3
 8008734:	4459      	add	r1, fp
 8008736:	f00b fa27 	bl	8013b88 <memcpy>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,length + 3);
 800873a:	1cf9      	adds	r1, r7, #3
 800873c:	0028      	movs	r0, r5
 800873e:	f003 f871 	bl	800b824 <CalculateCRC8>
 8008742:	4684      	mov	ip, r0
			Message_counter++;
 8008744:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008746:	9900      	ldr	r1, [sp, #0]
			Message_counter++;
 8008748:	3301      	adds	r3, #1
 800874a:	872b      	strh	r3, [r5, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800874c:	4b99      	ldr	r3, [pc, #612]	; (80089b4 <BackEndTask+0x37c>)
 800874e:	1908      	adds	r0, r1, r4
 8008750:	5d1b      	ldrb	r3, [r3, r4]
 8008752:	00c1      	lsls	r1, r0, #3
 8008754:	00da      	lsls	r2, r3, #3
 8008756:	1a09      	subs	r1, r1, r0
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	00d2      	lsls	r2, r2, #3
 800875c:	00c9      	lsls	r1, r1, #3
 800875e:	1850      	adds	r0, r2, r1
 8008760:	4458      	add	r0, fp
 8008762:	19c0      	adds	r0, r0, r7
 8008764:	78c0      	ldrb	r0, [r0, #3]
 8008766:	4560      	cmp	r0, ip
 8008768:	d043      	beq.n	80087f2 <BackEndTask+0x1ba>
				Rejected_Messages++;
 800876a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 800876c:	3201      	adds	r2, #1
 800876e:	87aa      	strh	r2, [r5, #60]	; 0x3c
			MSG_Buffer_Index_Start[port_index]++;
 8008770:	3301      	adds	r3, #1
 8008772:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008774:	2b05      	cmp	r3, #5
 8008776:	d027      	beq.n	80087c8 <BackEndTask+0x190>
			MSG_Buffer_Index_Start[port_index]++;
 8008778:	4a8e      	ldr	r2, [pc, #568]	; (80089b4 <BackEndTask+0x37c>)
 800877a:	5513      	strb	r3, [r2, r4]
			Process_Message_Buffer_Index_Start++;
 800877c:	4653      	mov	r3, sl
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008784:	2b05      	cmp	r3, #5
 8008786:	d028      	beq.n	80087da <BackEndTask+0x1a2>
			Process_Message_Buffer_Index_Start++;
 8008788:	4652      	mov	r2, sl
 800878a:	7013      	strb	r3, [r2, #0]
 800878c:	e7ab      	b.n	80086e6 <BackEndTask+0xae>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800878e:	4b87      	ldr	r3, [pc, #540]	; (80089ac <BackEndTask+0x374>)
			port_DMA++;
 8008790:	3701      	adds	r7, #1
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008792:	781a      	ldrb	r2, [r3, #0]
			port_DMA++;
 8008794:	7037      	strb	r7, [r6, #0]
 8008796:	e7a2      	b.n	80086de <BackEndTask+0xa6>
				{index_process[port_DMA]=0;}
 8008798:	4643      	mov	r3, r8
 800879a:	2000      	movs	r0, #0
 800879c:	5458      	strb	r0, [r3, r1]
 800879e:	e79e      	b.n	80086de <BackEndTask+0xa6>
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d065      	beq.n	8008870 <BackEndTask+0x238>
			else if(portStatus[port_number] == CLI)
 80087a4:	2803      	cmp	r0, #3
 80087a6:	d007      	beq.n	80087b8 <BackEndTask+0x180>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
 80087a8:	2807      	cmp	r0, #7
 80087aa:	d187      	bne.n	80086bc <BackEndTask+0x84>
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 80087ac:	2100      	movs	r1, #0
 80087ae:	4a7e      	ldr	r2, [pc, #504]	; (80089a8 <BackEndTask+0x370>)
 80087b0:	54d1      	strb	r1, [r2, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80087b2:	4b7e      	ldr	r3, [pc, #504]	; (80089ac <BackEndTask+0x374>)
 80087b4:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 80087b6:	e789      	b.n	80086cc <BackEndTask+0x94>
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 80087b8:	4b80      	ldr	r3, [pc, #512]	; (80089bc <BackEndTask+0x384>)
				Read_In_CLI_Task_Flag = 1;
 80087ba:	4a81      	ldr	r2, [pc, #516]	; (80089c0 <BackEndTask+0x388>)
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 80087bc:	7019      	strb	r1, [r3, #0]
				Read_In_CLI_Task_Flag = 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	7013      	strb	r3, [r2, #0]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80087c2:	4b7a      	ldr	r3, [pc, #488]	; (80089ac <BackEndTask+0x374>)
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	e781      	b.n	80086cc <BackEndTask+0x94>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b7a      	ldr	r3, [pc, #488]	; (80089b4 <BackEndTask+0x37c>)
 80087cc:	551a      	strb	r2, [r3, r4]
			Process_Message_Buffer_Index_Start++;
 80087ce:	4653      	mov	r3, sl
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d1d6      	bne.n	8008788 <BackEndTask+0x150>
 80087da:	4653      	mov	r3, sl
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e781      	b.n	80086e6 <BackEndTask+0xae>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1e0      	bne.n	80087a8 <BackEndTask+0x170>
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 80087e6:	2207      	movs	r2, #7
 80087e8:	496f      	ldr	r1, [pc, #444]	; (80089a8 <BackEndTask+0x370>)
 80087ea:	54ca      	strb	r2, [r1, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80087ec:	4b6f      	ldr	r3, [pc, #444]	; (80089ac <BackEndTask+0x374>)
 80087ee:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 80087f0:	e76c      	b.n	80086cc <BackEndTask+0x94>
				Accepted_Messages++;
 80087f2:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80087f4:	4873      	ldr	r0, [pc, #460]	; (80089c4 <BackEndTask+0x38c>)
				Accepted_Messages++;
 80087f6:	3301      	adds	r3, #1
 80087f8:	876b      	strh	r3, [r5, #58]	; 0x3a
				messageLength[port_index] =length;
 80087fa:	4b73      	ldr	r3, [pc, #460]	; (80089c8 <BackEndTask+0x390>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80087fc:	3103      	adds	r1, #3
				messageLength[port_index] =length;
 80087fe:	551f      	strb	r7, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008800:	00e3      	lsls	r3, r4, #3
 8008802:	1b1b      	subs	r3, r3, r4
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	469c      	mov	ip, r3
 8008808:	1889      	adds	r1, r1, r2
 800880a:	4460      	add	r0, ip
 800880c:	003a      	movs	r2, r7
 800880e:	4459      	add	r1, fp
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	f00b f9b9 	bl	8013b88 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008816:	4a6b      	ldr	r2, [pc, #428]	; (80089c4 <BackEndTask+0x38c>)
 8008818:	9b00      	ldr	r3, [sp, #0]
					NotifyMessagingTask(port_number);
 800881a:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 800881c:	5cd3      	ldrb	r3, [r2, r3]
 800881e:	4a6b      	ldr	r2, [pc, #428]	; (80089cc <BackEndTask+0x394>)
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d01f      	beq.n	8008866 <BackEndTask+0x22e>
 8008826:	2bfd      	cmp	r3, #253	; 0xfd
 8008828:	d81d      	bhi.n	8008866 <BackEndTask+0x22e>
					ForwardReceivedMessage(port_number);
 800882a:	f7ff fddf 	bl	80083ec <ForwardReceivedMessage>
			MSG_Buffer_Index_Start[port_index]++;
 800882e:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <BackEndTask+0x37c>)
 8008830:	5d1b      	ldrb	r3, [r3, r4]
 8008832:	e79d      	b.n	8008770 <BackEndTask+0x138>
				portStatus[port_number] =MSG; // Receive length byte.
 8008834:	4c5c      	ldr	r4, [pc, #368]	; (80089a8 <BackEndTask+0x370>)
 8008836:	3807      	subs	r0, #7
 8008838:	54e0      	strb	r0, [r4, r3]
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 800883a:	4b65      	ldr	r3, [pc, #404]	; (80089d0 <BackEndTask+0x398>)
 800883c:	19d2      	adds	r2, r2, r7
 800883e:	5ddc      	ldrb	r4, [r3, r7]
				temp_index[port_index] = 3;
 8008840:	3007      	adds	r0, #7
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 8008842:	00e3      	lsls	r3, r4, #3
 8008844:	1b1c      	subs	r4, r3, r4
 8008846:	00d3      	lsls	r3, r2, #3
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	191b      	adds	r3, r3, r4
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	445b      	add	r3, fp
 8008850:	7099      	strb	r1, [r3, #2]
				temp_index[port_index] = 3;
 8008852:	2303      	movs	r3, #3
 8008854:	aa02      	add	r2, sp, #8
 8008856:	1812      	adds	r2, r2, r0
 8008858:	55d3      	strb	r3, [r2, r7]
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
 800885a:	3101      	adds	r1, #1
 800885c:	ab02      	add	r3, sp, #8
 800885e:	55d9      	strb	r1, [r3, r7]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008860:	4b52      	ldr	r3, [pc, #328]	; (80089ac <BackEndTask+0x374>)
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	e732      	b.n	80086cc <BackEndTask+0x94>
					NotifyMessagingTask(port_number);
 8008866:	f7ff fb57 	bl	8007f18 <NotifyMessagingTask>
			MSG_Buffer_Index_Start[port_index]++;
 800886a:	4b52      	ldr	r3, [pc, #328]	; (80089b4 <BackEndTask+0x37c>)
 800886c:	5d1b      	ldrb	r3, [r3, r4]
					NotifyMessagingTask(port_number);
 800886e:	e77f      	b.n	8008770 <BackEndTask+0x138>
 8008870:	4a4d      	ldr	r2, [pc, #308]	; (80089a8 <BackEndTask+0x370>)
 8008872:	1d90      	adds	r0, r2, #6
					if(portStatus[i] == CLI)
 8008874:	7811      	ldrb	r1, [r2, #0]
 8008876:	2903      	cmp	r1, #3
 8008878:	d101      	bne.n	800887e <BackEndTask+0x246>
						portStatus[i] = FREE;
 800887a:	2100      	movs	r1, #0
 800887c:	7011      	strb	r1, [r2, #0]
				for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800887e:	3201      	adds	r2, #1
 8008880:	4290      	cmp	r0, r2
 8008882:	d1f7      	bne.n	8008874 <BackEndTask+0x23c>
				portStatus[port_number] =CLI; // Continue the CLI session on this port
 8008884:	2203      	movs	r2, #3
 8008886:	4948      	ldr	r1, [pc, #288]	; (80089a8 <BackEndTask+0x370>)
 8008888:	54ca      	strb	r2, [r1, r3]
				PcPort = port_number;
 800888a:	4a52      	ldr	r2, [pc, #328]	; (80089d4 <BackEndTask+0x39c>)
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 800888c:	2100      	movs	r1, #0
				PcPort = port_number;
 800888e:	7013      	strb	r3, [r2, #0]
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008890:	230d      	movs	r3, #13
 8008892:	4a4a      	ldr	r2, [pc, #296]	; (80089bc <BackEndTask+0x384>)
 8008894:	7013      	strb	r3, [r2, #0]
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008896:	4b50      	ldr	r3, [pc, #320]	; (80089d8 <BackEndTask+0x3a0>)
 8008898:	2202      	movs	r2, #2
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	9800      	ldr	r0, [sp, #0]
 80088a0:	2300      	movs	r3, #0
 80088a2:	f006 fdf3 	bl	800f48c <xTaskGenericNotify>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 80088a6:	4b4d      	ldr	r3, [pc, #308]	; (80089dc <BackEndTask+0x3a4>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <BackEndTask+0x27a>
 80088ae:	4a44      	ldr	r2, [pc, #272]	; (80089c0 <BackEndTask+0x388>)
 80088b0:	7013      	strb	r3, [r2, #0]
				Activate_CLI_For_First_Time_Flag = 1;
 80088b2:	2301      	movs	r3, #1
 80088b4:	4a49      	ldr	r2, [pc, #292]	; (80089dc <BackEndTask+0x3a4>)
 80088b6:	7013      	strb	r3, [r2, #0]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80088b8:	4b3c      	ldr	r3, [pc, #240]	; (80089ac <BackEndTask+0x374>)
 80088ba:	781a      	ldrb	r2, [r3, #0]
				Activate_CLI_For_First_Time_Flag = 1;
 80088bc:	e706      	b.n	80086cc <BackEndTask+0x94>
				if(temp_length[port_index] > 1)
 80088be:	a802      	add	r0, sp, #8
 80088c0:	5dc0      	ldrb	r0, [r0, r7]
 80088c2:	9000      	str	r0, [sp, #0]
 80088c4:	2801      	cmp	r0, #1
 80088c6:	d91e      	bls.n	8008906 <BackEndTask+0x2ce>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80088c8:	2308      	movs	r3, #8
 80088ca:	ac02      	add	r4, sp, #8
 80088cc:	18e4      	adds	r4, r4, r3
 80088ce:	4b40      	ldr	r3, [pc, #256]	; (80089d0 <BackEndTask+0x398>)
 80088d0:	19d2      	adds	r2, r2, r7
 80088d2:	5ddb      	ldrb	r3, [r3, r7]
 80088d4:	5de4      	ldrb	r4, [r4, r7]
 80088d6:	00d8      	lsls	r0, r3, #3
 80088d8:	1ac0      	subs	r0, r0, r3
 80088da:	4684      	mov	ip, r0
 80088dc:	00d3      	lsls	r3, r2, #3
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	4463      	add	r3, ip
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	445b      	add	r3, fp
 80088e6:	5519      	strb	r1, [r3, r4]
					temp_index[port_index]++;
 80088e8:	2308      	movs	r3, #8
					temp_length[port_index]--;
 80088ea:	9800      	ldr	r0, [sp, #0]
					temp_index[port_index]++;
 80088ec:	aa02      	add	r2, sp, #8
 80088ee:	3401      	adds	r4, #1
 80088f0:	18d3      	adds	r3, r2, r3
					temp_length[port_index]--;
 80088f2:	3801      	subs	r0, #1
					temp_index[port_index]++;
 80088f4:	55dc      	strb	r4, [r3, r7]
					temp_length[port_index]--;
 80088f6:	55d0      	strb	r0, [r2, r7]
 80088f8:	e6e6      	b.n	80086c8 <BackEndTask+0x90>
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 80088fa:	2208      	movs	r2, #8
 80088fc:	492a      	ldr	r1, [pc, #168]	; (80089a8 <BackEndTask+0x370>)
 80088fe:	54ca      	strb	r2, [r1, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008900:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <BackEndTask+0x374>)
 8008902:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 8008904:	e6e2      	b.n	80086cc <BackEndTask+0x94>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 8008906:	4832      	ldr	r0, [pc, #200]	; (80089d0 <BackEndTask+0x398>)
 8008908:	2408      	movs	r4, #8
 800890a:	5dc0      	ldrb	r0, [r0, r7]
 800890c:	19d2      	adds	r2, r2, r7
 800890e:	4684      	mov	ip, r0
 8008910:	a802      	add	r0, sp, #8
 8008912:	1900      	adds	r0, r0, r4
 8008914:	5dc4      	ldrb	r4, [r0, r7]
 8008916:	4660      	mov	r0, ip
 8008918:	9401      	str	r4, [sp, #4]
 800891a:	00c4      	lsls	r4, r0, #3
 800891c:	1a24      	subs	r4, r4, r0
 800891e:	00d0      	lsls	r0, r2, #3
 8008920:	1a82      	subs	r2, r0, r2
 8008922:	1912      	adds	r2, r2, r4
 8008924:	00d2      	lsls	r2, r2, #3
 8008926:	9c01      	ldr	r4, [sp, #4]
 8008928:	445a      	add	r2, fp
 800892a:	5511      	strb	r1, [r2, r4]
					temp_index[port_index]++;
 800892c:	1c62      	adds	r2, r4, #1
 800892e:	2408      	movs	r4, #8
					temp_length[port_index]--;
 8008930:	9800      	ldr	r0, [sp, #0]
					temp_index[port_index]++;
 8008932:	a902      	add	r1, sp, #8
 8008934:	1909      	adds	r1, r1, r4
 8008936:	55ca      	strb	r2, [r1, r7]
					temp_length[port_index]--;
 8008938:	3801      	subs	r0, #1
 800893a:	aa02      	add	r2, sp, #8
 800893c:	55d0      	strb	r0, [r2, r7]
					MSG_Buffer_Index_End[port_index]++;
 800893e:	4662      	mov	r2, ip
 8008940:	3201      	adds	r2, #1
 8008942:	b2d2      	uxtb	r2, r2
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 8008944:	2a05      	cmp	r2, #5
 8008946:	d00f      	beq.n	8008968 <BackEndTask+0x330>
					MSG_Buffer_Index_End[port_index]++;
 8008948:	4921      	ldr	r1, [pc, #132]	; (80089d0 <BackEndTask+0x398>)
 800894a:	55ca      	strb	r2, [r1, r7]
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800894c:	4a17      	ldr	r2, [pc, #92]	; (80089ac <BackEndTask+0x374>)
 800894e:	4918      	ldr	r1, [pc, #96]	; (80089b0 <BackEndTask+0x378>)
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	548b      	strb	r3, [r1, r2]
					Process_Message_Buffer_Index_End++;
 8008954:	3201      	adds	r2, #1
 8008956:	b2d2      	uxtb	r2, r2
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008958:	2a05      	cmp	r2, #5
 800895a:	d010      	beq.n	800897e <BackEndTask+0x346>
					Process_Message_Buffer_Index_End++;
 800895c:	4913      	ldr	r1, [pc, #76]	; (80089ac <BackEndTask+0x374>)
 800895e:	700a      	strb	r2, [r1, #0]
					portStatus[port_number] =FREE; // End of receiving message.
 8008960:	2000      	movs	r0, #0
 8008962:	4911      	ldr	r1, [pc, #68]	; (80089a8 <BackEndTask+0x370>)
 8008964:	54c8      	strb	r0, [r1, r3]
 8008966:	e6b1      	b.n	80086cc <BackEndTask+0x94>
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 8008968:	2100      	movs	r1, #0
 800896a:	4a19      	ldr	r2, [pc, #100]	; (80089d0 <BackEndTask+0x398>)
 800896c:	55d1      	strb	r1, [r2, r7]
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800896e:	4a0f      	ldr	r2, [pc, #60]	; (80089ac <BackEndTask+0x374>)
 8008970:	490f      	ldr	r1, [pc, #60]	; (80089b0 <BackEndTask+0x378>)
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	548b      	strb	r3, [r1, r2]
					Process_Message_Buffer_Index_End++;
 8008976:	3201      	adds	r2, #1
 8008978:	b2d2      	uxtb	r2, r2
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800897a:	2a05      	cmp	r2, #5
 800897c:	d1ee      	bne.n	800895c <BackEndTask+0x324>
 800897e:	2100      	movs	r1, #0
 8008980:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <BackEndTask+0x374>)
 8008982:	7011      	strb	r1, [r2, #0]
 8008984:	2200      	movs	r2, #0
 8008986:	e7eb      	b.n	8008960 <BackEndTask+0x328>
 8008988:	200011f4 	.word	0x200011f4
 800898c:	200011f0 	.word	0x200011f0
 8008990:	2000120c 	.word	0x2000120c
 8008994:	20001f4c 	.word	0x20001f4c
 8008998:	20001224 	.word	0x20001224
 800899c:	2000121b 	.word	0x2000121b
 80089a0:	20001214 	.word	0x20001214
 80089a4:	20001a10 	.word	0x20001a10
 80089a8:	20000c64 	.word	0x20000c64
 80089ac:	2000121a 	.word	0x2000121a
 80089b0:	2000121c 	.word	0x2000121c
 80089b4:	200017a4 	.word	0x200017a4
 80089b8:	00005a48 	.word	0x00005a48
 80089bc:	200011f1 	.word	0x200011f1
 80089c0:	200017a9 	.word	0x200017a9
 80089c4:	20000d40 	.word	0x20000d40
 80089c8:	20000d00 	.word	0x20000d00
 80089cc:	20000aa8 	.word	0x20000aa8
 80089d0:	2000179c 	.word	0x2000179c
 80089d4:	20000c60 	.word	0x20000c60
 80089d8:	20001ed4 	.word	0x20001ed4
 80089dc:	200017aa 	.word	0x200017aa

080089e0 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 80089e0:	2001      	movs	r0, #1
 80089e2:	4770      	bx	lr

080089e4 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	4657      	mov	r7, sl
 80089e8:	46de      	mov	lr, fp
 80089ea:	464e      	mov	r6, r9
 80089ec:	4645      	mov	r5, r8
 80089ee:	2300      	movs	r3, #0
 80089f0:	b5e0      	push	{r5, r6, r7, lr}
 80089f2:	b095      	sub	sp, #84	; 0x54
 80089f4:	930c      	str	r3, [sp, #48]	; 0x30
	port =(int8_t )(unsigned )argument;
 80089f6:	b2c3      	uxtb	r3, r0
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	23ff      	movs	r3, #255	; 0xff
 80089fc:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 80089fe:	1e5f      	subs	r7, r3, #1
 8008a00:	9306      	str	r3, [sp, #24]
 8008a02:	00fb      	lsls	r3, r7, #3
 8008a04:	9307      	str	r3, [sp, #28]
 8008a06:	1bdb      	subs	r3, r3, r7
 8008a08:	00db      	lsls	r3, r3, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008a0a:	469c      	mov	ip, r3
 8008a0c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_StatusTypeDef status =HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9312      	str	r3, [sp, #72]	; 0x48
	BOS_Status result =BOS_OK;
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	4bc6      	ldr	r3, [pc, #792]	; (8008d30 <PxMessagingTask+0x34c>)
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008a16:	4ac7      	ldr	r2, [pc, #796]	; (8008d34 <PxMessagingTask+0x350>)
 8008a18:	469a      	mov	sl, r3
 8008a1a:	4bc7      	ldr	r3, [pc, #796]	; (8008d38 <PxMessagingTask+0x354>)
 8008a1c:	4462      	add	r2, ip
 8008a1e:	4699      	mov	r9, r3
 8008a20:	00bb      	lsls	r3, r7, #2
 8008a22:	9311      	str	r3, [sp, #68]	; 0x44
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008a24:	2338      	movs	r3, #56	; 0x38
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008a26:	4693      	mov	fp, r2
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008a28:	4ac2      	ldr	r2, [pc, #776]	; (8008d34 <PxMessagingTask+0x350>)
 8008a2a:	437b      	muls	r3, r7
 8008a2c:	4694      	mov	ip, r2
 8008a2e:	4463      	add	r3, ip
 8008a30:	930b      	str	r3, [sp, #44]	; 0x2c
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008a32:	2101      	movs	r1, #1
 8008a34:	2001      	movs	r0, #1
 8008a36:	4249      	negs	r1, r1
 8008a38:	f006 fce8 	bl	800f40c <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008a3c:	4653      	mov	r3, sl
 8008a3e:	5dda      	ldrb	r2, [r3, r7]
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d100      	bne.n	8008a46 <PxMessagingTask+0x62>
 8008a44:	e0c7      	b.n	8008bd6 <PxMessagingTask+0x1f2>
			if(cMessage[port - 1][2] >> 7){
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	4aba      	ldr	r2, [pc, #744]	; (8008d34 <PxMessagingTask+0x350>)
 8008a4a:	1bdb      	subs	r3, r3, r7
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	18d1      	adds	r1, r2, r3
 8008a50:	788a      	ldrb	r2, [r1, #2]
 8008a52:	4cba      	ldr	r4, [pc, #744]	; (8008d3c <PxMessagingTask+0x358>)
 8008a54:	09d0      	lsrs	r0, r2, #7
 8008a56:	7020      	strb	r0, [r4, #0]
			dst =cMessage[port - 1][0];
 8008a58:	48b6      	ldr	r0, [pc, #728]	; (8008d34 <PxMessagingTask+0x350>)
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008a5a:	464d      	mov	r5, r9
			dst =cMessage[port - 1][0];
 8008a5c:	5cc6      	ldrb	r6, [r0, r3]
			src =cMessage[port - 1][1];
 8008a5e:	784b      	ldrb	r3, [r1, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008a60:	0710      	lsls	r0, r2, #28
			src =cMessage[port - 1][1];
 8008a62:	4698      	mov	r8, r3
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008a64:	2301      	movs	r3, #1
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008a66:	0f80      	lsrs	r0, r0, #30
 8008a68:	7068      	strb	r0, [r5, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008a6a:	0910      	lsrs	r0, r2, #4
 8008a6c:	001c      	movs	r4, r3
 8008a6e:	4003      	ands	r3, r0
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008a70:	2060      	movs	r0, #96	; 0x60
 8008a72:	4010      	ands	r0, r2
 8008a74:	4014      	ands	r4, r2
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008a76:	70eb      	strb	r3, [r5, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008a78:	7028      	strb	r0, [r5, #0]
			if(extendCode == true){
 8008a7a:	0792      	lsls	r2, r2, #30
 8008a7c:	d400      	bmi.n	8008a80 <PxMessagingTask+0x9c>
 8008a7e:	e12b      	b.n	8008cd8 <PxMessagingTask+0x2f4>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008a80:	1d22      	adds	r2, r4, #4
 8008a82:	1ce0      	adds	r0, r4, #3
 8008a84:	5c8a      	ldrb	r2, [r1, r2]
 8008a86:	5c0d      	ldrb	r5, [r1, r0]
 8008a88:	0212      	lsls	r2, r2, #8
 8008a8a:	18ad      	adds	r5, r5, r2
 8008a8c:	b2ad      	uxth	r5, r5
				++shift;
 8008a8e:	3401      	adds	r4, #1
			if(true == BOSMessaging.received_Acknowledgment){
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d000      	beq.n	8008a96 <PxMessagingTask+0xb2>
 8008a94:	e125      	b.n	8008ce2 <PxMessagingTask+0x2fe>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008a96:	1e73      	subs	r3, r6, #1
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2bfc      	cmp	r3, #252	; 0xfc
 8008a9c:	d800      	bhi.n	8008aa0 <PxMessagingTask+0xbc>
 8008a9e:	e12d      	b.n	8008cfc <PxMessagingTask+0x318>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008aa0:	2eff      	cmp	r6, #255	; 0xff
 8008aa2:	d000      	beq.n	8008aa6 <PxMessagingTask+0xc2>
 8008aa4:	e1fd      	b.n	8008ea2 <PxMessagingTask+0x4be>
 8008aa6:	4653      	mov	r3, sl
 8008aa8:	49a2      	ldr	r1, [pc, #648]	; (8008d34 <PxMessagingTask+0x350>)
 8008aaa:	5dda      	ldrb	r2, [r3, r7]
 8008aac:	468c      	mov	ip, r1
 8008aae:	213e      	movs	r1, #62	; 0x3e
 8008ab0:	9b07      	ldr	r3, [sp, #28]
 8008ab2:	48a3      	ldr	r0, [pc, #652]	; (8008d40 <PxMessagingTask+0x35c>)
 8008ab4:	1bdb      	subs	r3, r3, r7
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	4463      	add	r3, ip
 8008aba:	9309      	str	r3, [sp, #36]	; 0x24
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	5c40      	ldrb	r0, [r0, r1]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	468c      	mov	ip, r1
					result =BOS_ERR_MSG_Reflection;
 8008ac6:	393b      	subs	r1, #59	; 0x3b
 8008ac8:	9104      	str	r1, [sp, #16]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008aca:	4298      	cmp	r0, r3
 8008acc:	d100      	bne.n	8008ad0 <PxMessagingTask+0xec>
 8008ace:	e082      	b.n	8008bd6 <PxMessagingTask+0x1f2>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ad0:	4661      	mov	r1, ip
 8008ad2:	4a9b      	ldr	r2, [pc, #620]	; (8008d40 <PxMessagingTask+0x35c>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008ad4:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ad6:	5453      	strb	r3, [r2, r1]
 8008ad8:	4a9a      	ldr	r2, [pc, #616]	; (8008d44 <PxMessagingTask+0x360>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008ada:	9908      	ldr	r1, [sp, #32]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008adc:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008ade:	f7ff fc41 	bl	8008364 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	5dd2      	ldrb	r2, [r2, r7]
 8008ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	3b01      	subs	r3, #1
 8008aee:	7019      	strb	r1, [r3, #0]
				shift +=4;
 8008af0:	1d23      	adds	r3, r4, #4
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
				numOfParams =messageLength[port - 1] - shift;
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	930a      	str	r3, [sp, #40]	; 0x28
					switch(code){
 8008afa:	2d2d      	cmp	r5, #45	; 0x2d
 8008afc:	d900      	bls.n	8008b00 <PxMessagingTask+0x11c>
 8008afe:	e143      	b.n	8008d88 <PxMessagingTask+0x3a4>
 8008b00:	4991      	ldr	r1, [pc, #580]	; (8008d48 <PxMessagingTask+0x364>)
 8008b02:	00ab      	lsls	r3, r5, #2
 8008b04:	58cb      	ldr	r3, [r1, r3]
 8008b06:	469f      	mov	pc, r3
 8008b08:	2309      	movs	r3, #9
 8008b0a:	469c      	mov	ip, r3
 8008b0c:	44a4      	add	ip, r4
 8008b0e:	4663      	mov	r3, ip
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	230a      	movs	r3, #10
 8008b14:	469c      	mov	ip, r3
 8008b16:	44a4      	add	ip, r4
 8008b18:	4663      	mov	r3, ip
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	230c      	movs	r3, #12
 8008b1e:	4698      	mov	r8, r3
 8008b20:	3301      	adds	r3, #1
 8008b22:	469c      	mov	ip, r3
 8008b24:	44a4      	add	ip, r4
 8008b26:	4663      	mov	r3, ip
 8008b28:	930e      	str	r3, [sp, #56]	; 0x38
 8008b2a:	230e      	movs	r3, #14
 8008b2c:	469c      	mov	ip, r3
 8008b2e:	44a4      	add	ip, r4
 8008b30:	4663      	mov	r3, ip
 8008b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b34:	230f      	movs	r3, #15
 8008b36:	469c      	mov	ip, r3
 8008b38:	44a4      	add	ip, r4
 8008b3a:	0026      	movs	r6, r4
 8008b3c:	4663      	mov	r3, ip
 8008b3e:	44a0      	add	r8, r4
 8008b40:	360b      	adds	r6, #11
 8008b42:	9310      	str	r3, [sp, #64]	; 0x40
 8008b44:	3410      	adds	r4, #16
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008b46:	4981      	ldr	r1, [pc, #516]	; (8008d4c <PxMessagingTask+0x368>)
 8008b48:	4880      	ldr	r0, [pc, #512]	; (8008d4c <PxMessagingTask+0x368>)
 8008b4a:	3110      	adds	r1, #16
 8008b4c:	3014      	adds	r0, #20
 8008b4e:	f003 fd65 	bl	800c61c <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8008b52:	9b07      	ldr	r3, [sp, #28]
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008b54:	b2f6      	uxtb	r6, r6
							ADCPort =cMessage[port - 1][shift];
 8008b56:	1bdd      	subs	r5, r3, r7
 8008b58:	4b76      	ldr	r3, [pc, #472]	; (8008d34 <PxMessagingTask+0x350>)
 8008b5a:	00ed      	lsls	r5, r5, #3
 8008b5c:	469c      	mov	ip, r3
 8008b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b60:	4465      	add	r5, ip
 8008b62:	5ce8      	ldrb	r0, [r5, r3]
 8008b64:	4b79      	ldr	r3, [pc, #484]	; (8008d4c <PxMessagingTask+0x368>)
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008b66:	b2e4      	uxtb	r4, r4
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008b68:	0019      	movs	r1, r3
 8008b6a:	3118      	adds	r1, #24
							ADCPort =cMessage[port - 1][shift];
 8008b6c:	8118      	strh	r0, [r3, #8]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008b6e:	f003 fe21 	bl	800c7b4 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008b72:	2228      	movs	r2, #40	; 0x28
 8008b74:	466b      	mov	r3, sp
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	5daa      	ldrb	r2, [r5, r6]
 8008b7c:	5ceb      	ldrb	r3, [r5, r3]
 8008b7e:	0412      	lsls	r2, r2, #16
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	189b      	adds	r3, r3, r2
 8008b84:	466a      	mov	r2, sp
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	4971      	ldr	r1, [pc, #452]	; (8008d50 <PxMessagingTask+0x36c>)
 8008b8a:	5caa      	ldrb	r2, [r5, r2]
 8008b8c:	189b      	adds	r3, r3, r2
 8008b8e:	4642      	mov	r2, r8
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	5caa      	ldrb	r2, [r5, r2]
 8008b94:	0612      	lsls	r2, r2, #24
 8008b96:	189b      	adds	r3, r3, r2
 8008b98:	2280      	movs	r2, #128	; 0x80
 8008b9a:	508b      	str	r3, [r1, r2]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008b9c:	466b      	mov	r3, sp
 8008b9e:	3a44      	subs	r2, #68	; 0x44
 8008ba0:	2140      	movs	r1, #64	; 0x40
 8008ba2:	189b      	adds	r3, r3, r2
 8008ba4:	466a      	mov	r2, sp
 8008ba6:	1852      	adds	r2, r2, r1
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	5ceb      	ldrb	r3, [r5, r3]
 8008bae:	5caa      	ldrb	r2, [r5, r2]
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	0412      	lsls	r2, r2, #16
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	466a      	mov	r2, sp
 8008bb8:	3908      	subs	r1, #8
 8008bba:	1852      	adds	r2, r2, r1
 8008bbc:	7812      	ldrb	r2, [r2, #0]
 8008bbe:	4964      	ldr	r1, [pc, #400]	; (8008d50 <PxMessagingTask+0x36c>)
 8008bc0:	5caa      	ldrb	r2, [r5, r2]
 8008bc2:	189b      	adds	r3, r3, r2
 8008bc4:	5d2a      	ldrb	r2, [r5, r4]
 8008bc6:	0612      	lsls	r2, r2, #24
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	2284      	movs	r2, #132	; 0x84
 8008bcc:	508b      	str	r3, [r1, r2]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008bce:	4653      	mov	r3, sl
 8008bd0:	5dda      	ldrb	r2, [r3, r7]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f00a ffde 	bl	8013b9a <memset>
		messageLength[port - 1] =0;
 8008bde:	4653      	mov	r3, sl
 8008be0:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008be2:	9906      	ldr	r1, [sp, #24]
		messageLength[port - 1] =0;
 8008be4:	55da      	strb	r2, [r3, r7]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008be6:	4b5b      	ldr	r3, [pc, #364]	; (8008d54 <PxMessagingTask+0x370>)
 8008be8:	5c5b      	ldrb	r3, [r3, r1]
 8008bea:	3b02      	subs	r3, #2
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <PxMessagingTask+0x210>
			portStatus[port] =FREE;
 8008bf0:	4b58      	ldr	r3, [pc, #352]	; (8008d54 <PxMessagingTask+0x370>)
 8008bf2:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008bf4:	f006 fe9e 	bl	800f934 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008bf8:	e71b      	b.n	8008a32 <PxMessagingTask+0x4e>
							ExploreNeighbors(port);
 8008bfa:	9808      	ldr	r0, [sp, #32]
 8008bfc:	f7fb f81e 	bl	8003c3c <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008c00:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c02:	2401      	movs	r4, #1
							temp =0;
 8008c04:	2600      	movs	r6, #0
							indMode =IND_TOPOLOGY;
 8008c06:	4a54      	ldr	r2, [pc, #336]	; (8008d58 <PxMessagingTask+0x374>)
							osDelay(10);
 8008c08:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008c0a:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008c0c:	f005 f910 	bl	800de30 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c10:	4d52      	ldr	r5, [pc, #328]	; (8008d5c <PxMessagingTask+0x378>)
								if(neighbors[p - 1][0]){
 8008c12:	882b      	ldrh	r3, [r5, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <PxMessagingTask+0x238>
 8008c18:	f000 fd6e 	bl	80096f8 <PxMessagingTask+0xd14>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	b2e4      	uxtb	r4, r4
 8008c20:	3504      	adds	r5, #4
 8008c22:	2c06      	cmp	r4, #6
 8008c24:	d1f5      	bne.n	8008c12 <PxMessagingTask+0x22e>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008c26:	210d      	movs	r1, #13
 8008c28:	960c      	str	r6, [sp, #48]	; 0x30
 8008c2a:	b2b2      	uxth	r2, r6
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	f7ff fc07 	bl	8008440 <SendMessageToModule>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008c32:	4653      	mov	r3, sl
 8008c34:	5dda      	ldrb	r2, [r3, r7]
 8008c36:	2300      	movs	r3, #0
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	e7cc      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							switch(cMessage[port - 1][0 + shift]){
 8008c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c40:	5c9b      	ldrb	r3, [r3, r2]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <PxMessagingTask+0x266>
 8008c46:	f000 ff42 	bl	8009ace <PxMessagingTask+0x10ea>
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d101      	bne.n	8008c52 <PxMessagingTask+0x26e>
 8008c4e:	f000 ffd1 	bl	8009bf4 <PxMessagingTask+0x1210>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <PxMessagingTask+0x276>
 8008c56:	f000 fe32 	bl	80098be <PxMessagingTask+0xeda>
 8008c5a:	1d62      	adds	r2, r4, #5
 8008c5c:	2309      	movs	r3, #9
 8008c5e:	469c      	mov	ip, r3
 8008c60:	44a4      	add	ip, r4
 8008c62:	4663      	mov	r3, ip
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	230a      	movs	r3, #10
 8008c68:	469c      	mov	ip, r3
 8008c6a:	44a4      	add	ip, r4
 8008c6c:	4663      	mov	r3, ip
 8008c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c70:	230c      	movs	r3, #12
 8008c72:	4698      	mov	r8, r3
 8008c74:	3301      	adds	r3, #1
 8008c76:	469c      	mov	ip, r3
 8008c78:	44a4      	add	ip, r4
 8008c7a:	4663      	mov	r3, ip
 8008c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c7e:	230e      	movs	r3, #14
 8008c80:	469c      	mov	ip, r3
 8008c82:	44a4      	add	ip, r4
 8008c84:	4663      	mov	r3, ip
 8008c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c88:	230f      	movs	r3, #15
 8008c8a:	469c      	mov	ip, r3
 8008c8c:	44a4      	add	ip, r4
 8008c8e:	0026      	movs	r6, r4
 8008c90:	4663      	mov	r3, ip
 8008c92:	44a0      	add	r8, r4
 8008c94:	360b      	adds	r6, #11
 8008c96:	9310      	str	r3, [sp, #64]	; 0x40
 8008c98:	3410      	adds	r4, #16
							ADCPort =cMessage[port - 1][shift];
 8008c9a:	4926      	ldr	r1, [pc, #152]	; (8008d34 <PxMessagingTask+0x350>)
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	468c      	mov	ip, r1
 8008ca0:	1bdb      	subs	r3, r3, r7
 8008ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4463      	add	r3, ip
							ADCSide =cMessage[port - 1][shift + 1];
 8008ca8:	b2d2      	uxtb	r2, r2
							ADCPort =cMessage[port - 1][shift];
 8008caa:	5c58      	ldrb	r0, [r3, r1]
 8008cac:	4927      	ldr	r1, [pc, #156]	; (8008d4c <PxMessagingTask+0x368>)
							ADCSide =cMessage[port - 1][shift + 1];
 8008cae:	5c9b      	ldrb	r3, [r3, r2]
							ADCPort =cMessage[port - 1][shift];
 8008cb0:	8108      	strh	r0, [r1, #8]
							ADCSide =cMessage[port - 1][shift + 1];
 8008cb2:	814b      	strh	r3, [r1, #10]
							if(0 == ADCSide){
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <PxMessagingTask+0x2d8>
 8008cb8:	f000 fd2b 	bl	8009712 <PxMessagingTask+0xd2e>
							else if(1 == ADCSide){
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d000      	beq.n	8008cc2 <PxMessagingTask+0x2de>
 8008cc0:	e741      	b.n	8008b46 <PxMessagingTask+0x162>
								ADCSelectChannel(ADCPort,"bottom");
 8008cc2:	4927      	ldr	r1, [pc, #156]	; (8008d60 <PxMessagingTask+0x37c>)
 8008cc4:	f003 fe6a 	bl	800c99c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8008cc8:	4b20      	ldr	r3, [pc, #128]	; (8008d4c <PxMessagingTask+0x368>)
 8008cca:	4a20      	ldr	r2, [pc, #128]	; (8008d4c <PxMessagingTask+0x368>)
 8008ccc:	7a18      	ldrb	r0, [r3, #8]
 8008cce:	4924      	ldr	r1, [pc, #144]	; (8008d60 <PxMessagingTask+0x37c>)
 8008cd0:	320c      	adds	r2, #12
 8008cd2:	f003 feb1 	bl	800ca38 <ReadADCChannel>
 8008cd6:	e736      	b.n	8008b46 <PxMessagingTask+0x162>
				code =cMessage[port - 1][3 + shift];
 8008cd8:	1ce2      	adds	r2, r4, #3
 8008cda:	5c8d      	ldrb	r5, [r1, r2]
			if(true == BOSMessaging.received_Acknowledgment){
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d100      	bne.n	8008ce2 <PxMessagingTask+0x2fe>
 8008ce0:	e6d9      	b.n	8008a96 <PxMessagingTask+0xb2>
				BOSMessaging.Acknowledgment =false;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	464a      	mov	r2, r9
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008ce6:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 8008ce8:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008cea:	4640      	mov	r0, r8
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7ff fba7 	bl	8008440 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008cf2:	1e73      	subs	r3, r6, #1
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2bfc      	cmp	r3, #252	; 0xfc
 8008cf8:	d900      	bls.n	8008cfc <PxMessagingTask+0x318>
 8008cfa:	e6d1      	b.n	8008aa0 <PxMessagingTask+0xbc>
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <PxMessagingTask+0x380>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	42b3      	cmp	r3, r6
 8008d02:	d033      	beq.n	8008d6c <PxMessagingTask+0x388>
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d02f      	beq.n	8008d68 <PxMessagingTask+0x384>
				ForwardReceivedMessage(port);
 8008d08:	9808      	ldr	r0, [sp, #32]
 8008d0a:	f7ff fb6f 	bl	80083ec <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008d0e:	464b      	mov	r3, r9
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <PxMessagingTask+0x338>
					indMode =IND_SHORT_BLINK;
 8008d16:	2303      	movs	r3, #3
 8008d18:	4a0f      	ldr	r2, [pc, #60]	; (8008d58 <PxMessagingTask+0x374>)
 8008d1a:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008d1c:	2d19      	cmp	r5, #25
 8008d1e:	d100      	bne.n	8008d22 <PxMessagingTask+0x33e>
 8008d20:	e109      	b.n	8008f36 <PxMessagingTask+0x552>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008d22:	2d1a      	cmp	r5, #26
 8008d24:	d100      	bne.n	8008d28 <PxMessagingTask+0x344>
 8008d26:	e110      	b.n	8008f4a <PxMessagingTask+0x566>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008d28:	4653      	mov	r3, sl
 8008d2a:	5dda      	ldrb	r2, [r3, r7]
 8008d2c:	e753      	b.n	8008bd6 <PxMessagingTask+0x1f2>
 8008d2e:	46c0      	nop			; (mov r8, r8)
 8008d30:	20000d00 	.word	0x20000d00
 8008d34:	20000d40 	.word	0x20000d40
 8008d38:	20000b4c 	.word	0x20000b4c
 8008d3c:	20000cfc 	.word	0x20000cfc
 8008d40:	20001f4c 	.word	0x20001f4c
 8008d44:	20000cf8 	.word	0x20000cf8
 8008d48:	0801a0cc 	.word	0x0801a0cc
 8008d4c:	2000204c 	.word	0x2000204c
 8008d50:	20001fcc 	.word	0x20001fcc
 8008d54:	20000c64 	.word	0x20000c64
 8008d58:	200011ef 	.word	0x200011ef
 8008d5c:	200011d8 	.word	0x200011d8
 8008d60:	0801b138 	.word	0x0801b138
 8008d64:	20000aa8 	.word	0x20000aa8
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008d68:	2d10      	cmp	r5, #16
 8008d6a:	d1cd      	bne.n	8008d08 <PxMessagingTask+0x324>
				numOfParams =messageLength[port - 1] - shift;
 8008d6c:	4653      	mov	r3, sl
 8008d6e:	5dda      	ldrb	r2, [r3, r7]
				if(result == BOS_OK){
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d000      	beq.n	8008d78 <PxMessagingTask+0x394>
 8008d76:	e72e      	b.n	8008bd6 <PxMessagingTask+0x1f2>
				shift +=4;
 8008d78:	1d23      	adds	r3, r4, #4
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
				numOfParams =messageLength[port - 1] - shift;
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	930a      	str	r3, [sp, #40]	; 0x28
					switch(code){
 8008d82:	2d2d      	cmp	r5, #45	; 0x2d
 8008d84:	d800      	bhi.n	8008d88 <PxMessagingTask+0x3a4>
 8008d86:	e6bb      	b.n	8008b00 <PxMessagingTask+0x11c>
 8008d88:	4bca      	ldr	r3, [pc, #808]	; (80090b4 <PxMessagingTask+0x6d0>)
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	d000      	beq.n	8008d90 <PxMessagingTask+0x3ac>
 8008d8e:	e0ea      	b.n	8008f66 <PxMessagingTask+0x582>
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d94:	4ac8      	ldr	r2, [pc, #800]	; (80090b8 <PxMessagingTask+0x6d4>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	7413      	strb	r3, [r2, #16]
							defalt_data.Local_mac_addr[1]= cMessage[port - 1][1 + shift];
 8008d9a:	1d63      	adds	r3, r4, #5
 8008d9c:	5ccb      	ldrb	r3, [r1, r3]
 8008d9e:	7453      	strb	r3, [r2, #17]
							defalt_data.Local_mac_addr[2]= cMessage[port - 1][2 + shift];
 8008da0:	1da3      	adds	r3, r4, #6
 8008da2:	5ccb      	ldrb	r3, [r1, r3]
 8008da4:	7493      	strb	r3, [r2, #18]
							defalt_data.Local_mac_addr[3]= cMessage[port - 1][3 + shift];
 8008da6:	1de3      	adds	r3, r4, #7
 8008da8:	5ccb      	ldrb	r3, [r1, r3]
 8008daa:	74d3      	strb	r3, [r2, #19]
							defalt_data.Local_mac_addr[4]= cMessage[port - 1][4 + shift];
 8008dac:	0023      	movs	r3, r4
 8008dae:	3308      	adds	r3, #8
 8008db0:	5ccb      	ldrb	r3, [r1, r3]
 8008db2:	7513      	strb	r3, [r2, #20]
							defalt_data.Local_mac_addr[5]= cMessage[port - 1][5 + shift];
 8008db4:	0023      	movs	r3, r4
 8008db6:	3309      	adds	r3, #9
 8008db8:	5ccb      	ldrb	r3, [r1, r3]
 8008dba:	7553      	strb	r3, [r2, #21]
							defalt_data.Remote_mac_addr[0]= cMessage[port - 1][6 + shift];
 8008dbc:	0023      	movs	r3, r4
 8008dbe:	330a      	adds	r3, #10
 8008dc0:	5ccb      	ldrb	r3, [r1, r3]
 8008dc2:	7593      	strb	r3, [r2, #22]
							defalt_data.Remote_mac_addr[1]= cMessage[port - 1][7 + shift];
 8008dc4:	0023      	movs	r3, r4
 8008dc6:	330b      	adds	r3, #11
 8008dc8:	5ccb      	ldrb	r3, [r1, r3]
 8008dca:	75d3      	strb	r3, [r2, #23]
							defalt_data.Remote_mac_addr[2]= cMessage[port - 1][8 + shift];
 8008dcc:	0023      	movs	r3, r4
 8008dce:	330c      	adds	r3, #12
 8008dd0:	5ccb      	ldrb	r3, [r1, r3]
 8008dd2:	7613      	strb	r3, [r2, #24]
							defalt_data.Remote_mac_addr[3]= cMessage[port - 1][9 + shift];
 8008dd4:	0023      	movs	r3, r4
 8008dd6:	330d      	adds	r3, #13
 8008dd8:	5ccb      	ldrb	r3, [r1, r3]
 8008dda:	7653      	strb	r3, [r2, #25]
							defalt_data.Remote_mac_addr[4]= cMessage[port - 1][10 + shift];
 8008ddc:	0023      	movs	r3, r4
 8008dde:	330e      	adds	r3, #14
 8008de0:	5ccb      	ldrb	r3, [r1, r3]
 8008de2:	7693      	strb	r3, [r2, #26]
							defalt_data.Remote_mac_addr[5]= cMessage[port - 1][11 + shift];
 8008de4:	0023      	movs	r3, r4
 8008de6:	330f      	adds	r3, #15
 8008de8:	5ccb      	ldrb	r3, [r1, r3]
 8008dea:	76d3      	strb	r3, [r2, #27]
							defalt_data.Local_IP[0]= cMessage[port - 1][12 + shift];
 8008dec:	0023      	movs	r3, r4
 8008dee:	3310      	adds	r3, #16
 8008df0:	5ccb      	ldrb	r3, [r1, r3]
 8008df2:	7713      	strb	r3, [r2, #28]
							defalt_data.Local_IP[1]= cMessage[port - 1][13 + shift];
 8008df4:	0023      	movs	r3, r4
 8008df6:	3311      	adds	r3, #17
 8008df8:	5ccb      	ldrb	r3, [r1, r3]
 8008dfa:	7753      	strb	r3, [r2, #29]
							defalt_data.Local_IP[2]= cMessage[port - 1][14 + shift];
 8008dfc:	0023      	movs	r3, r4
 8008dfe:	3312      	adds	r3, #18
 8008e00:	5ccb      	ldrb	r3, [r1, r3]
 8008e02:	7793      	strb	r3, [r2, #30]
							defalt_data.Local_IP[3]= cMessage[port - 1][15 + shift];
 8008e04:	0023      	movs	r3, r4
 8008e06:	3313      	adds	r3, #19
 8008e08:	5ccb      	ldrb	r3, [r1, r3]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008e0a:	48ab      	ldr	r0, [pc, #684]	; (80090b8 <PxMessagingTask+0x6d4>)
							defalt_data.Local_IP[3]= cMessage[port - 1][15 + shift];
 8008e0c:	77d3      	strb	r3, [r2, #31]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008e0e:	0023      	movs	r3, r4
 8008e10:	3314      	adds	r3, #20
 8008e12:	5cca      	ldrb	r2, [r1, r3]
 8008e14:	2320      	movs	r3, #32
 8008e16:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_IP[1]= cMessage[port - 1][17 + shift];
 8008e18:	0023      	movs	r3, r4
 8008e1a:	3315      	adds	r3, #21
 8008e1c:	5cca      	ldrb	r2, [r1, r3]
 8008e1e:	2321      	movs	r3, #33	; 0x21
 8008e20:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_IP[2]= cMessage[port - 1][18 + shift];
 8008e22:	0023      	movs	r3, r4
 8008e24:	3316      	adds	r3, #22
 8008e26:	5cca      	ldrb	r2, [r1, r3]
 8008e28:	2322      	movs	r3, #34	; 0x22
 8008e2a:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_IP[3]= cMessage[port - 1][19 + shift];
 8008e2c:	0023      	movs	r3, r4
 8008e2e:	3317      	adds	r3, #23
 8008e30:	5cca      	ldrb	r2, [r1, r3]
 8008e32:	2323      	movs	r3, #35	; 0x23
 8008e34:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[0]= cMessage[port - 1][20 + shift];
 8008e36:	0023      	movs	r3, r4
 8008e38:	3318      	adds	r3, #24
 8008e3a:	5cca      	ldrb	r2, [r1, r3]
 8008e3c:	2324      	movs	r3, #36	; 0x24
 8008e3e:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[1]= cMessage[port - 1][21 + shift];
 8008e40:	0023      	movs	r3, r4
 8008e42:	3319      	adds	r3, #25
 8008e44:	5cca      	ldrb	r2, [r1, r3]
 8008e46:	2325      	movs	r3, #37	; 0x25
 8008e48:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[2]= cMessage[port - 1][22 + shift];
 8008e4a:	0023      	movs	r3, r4
 8008e4c:	331a      	adds	r3, #26
 8008e4e:	5cca      	ldrb	r2, [r1, r3]
 8008e50:	2326      	movs	r3, #38	; 0x26
 8008e52:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[3]= cMessage[port - 1][23 + shift];
 8008e54:	0023      	movs	r3, r4
 8008e56:	331b      	adds	r3, #27
 8008e58:	5cca      	ldrb	r2, [r1, r3]
 8008e5a:	2327      	movs	r3, #39	; 0x27
 8008e5c:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[0]= cMessage[port - 1][24 + shift];
 8008e5e:	0023      	movs	r3, r4
 8008e60:	331c      	adds	r3, #28
 8008e62:	5cca      	ldrb	r2, [r1, r3]
 8008e64:	2328      	movs	r3, #40	; 0x28
 8008e66:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[1]= cMessage[port - 1][25 + shift];
 8008e68:	0023      	movs	r3, r4
 8008e6a:	331d      	adds	r3, #29
 8008e6c:	5cca      	ldrb	r2, [r1, r3]
 8008e6e:	2329      	movs	r3, #41	; 0x29
 8008e70:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[2]= cMessage[port - 1][26 + shift];
 8008e72:	0023      	movs	r3, r4
 8008e74:	331e      	adds	r3, #30
 8008e76:	5cca      	ldrb	r2, [r1, r3]
 8008e78:	232a      	movs	r3, #42	; 0x2a
 8008e7a:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[3]= cMessage[port - 1][27 + shift];
 8008e7c:	0023      	movs	r3, r4
 8008e7e:	331f      	adds	r3, #31
 8008e80:	5cca      	ldrb	r2, [r1, r3]
 8008e82:	232b      	movs	r3, #43	; 0x2b
 8008e84:	54c2      	strb	r2, [r0, r3]
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008e86:	0023      	movs	r3, r4
 8008e88:	3320      	adds	r3, #32
 8008e8a:	5cca      	ldrb	r2, [r1, r3]
 8008e8c:	232c      	movs	r3, #44	; 0x2c
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008e8e:	3421      	adds	r4, #33	; 0x21
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008e90:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008e92:	5d0a      	ldrb	r2, [r1, r4]
 8008e94:	3301      	adds	r3, #1
 8008e96:	54c2      	strb	r2, [r0, r3]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008e98:	4653      	mov	r3, sl
 8008e9a:	5dda      	ldrb	r2, [r3, r7]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	e699      	b.n	8008bd6 <PxMessagingTask+0x1f2>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ea2:	2efe      	cmp	r6, #254	; 0xfe
 8008ea4:	d000      	beq.n	8008ea8 <PxMessagingTask+0x4c4>
 8008ea6:	e761      	b.n	8008d6c <PxMessagingTask+0x388>
 8008ea8:	4653      	mov	r3, sl
 8008eaa:	4984      	ldr	r1, [pc, #528]	; (80090bc <PxMessagingTask+0x6d8>)
 8008eac:	5dda      	ldrb	r2, [r3, r7]
 8008eae:	468c      	mov	ip, r1
 8008eb0:	213e      	movs	r1, #62	; 0x3e
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	4882      	ldr	r0, [pc, #520]	; (80090c0 <PxMessagingTask+0x6dc>)
 8008eb6:	1bdb      	subs	r3, r3, r7
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	4463      	add	r3, ip
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	5c40      	ldrb	r0, [r0, r1]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	468c      	mov	ip, r1
					result =BOS_ERR_MSG_Reflection;
 8008ec8:	393b      	subs	r1, #59	; 0x3b
 8008eca:	9104      	str	r1, [sp, #16]
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ecc:	4298      	cmp	r0, r3
 8008ece:	d100      	bne.n	8008ed2 <PxMessagingTask+0x4ee>
 8008ed0:	e681      	b.n	8008bd6 <PxMessagingTask+0x1f2>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ed2:	4661      	mov	r1, ip
 8008ed4:	4a7a      	ldr	r2, [pc, #488]	; (80090c0 <PxMessagingTask+0x6dc>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ed6:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ed8:	5453      	strb	r3, [r2, r1]
 8008eda:	4a7a      	ldr	r2, [pc, #488]	; (80090c4 <PxMessagingTask+0x6e0>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008edc:	9908      	ldr	r1, [sp, #32]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ede:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ee0:	f7ff fa40 	bl	8008364 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008ee4:	4653      	mov	r3, sl
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	5dda      	ldrb	r2, [r3, r7]
 8008eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008eec:	1e90      	subs	r0, r2, #2
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008eee:	189b      	adds	r3, r3, r2
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	7019      	strb	r1, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef6:	5c19      	ldrb	r1, [r3, r0]
 8008ef8:	910c      	str	r1, [sp, #48]	; 0x30
					for(i =0; i < temp; i++){
 8008efa:	2900      	cmp	r1, #0
 8008efc:	d030      	beq.n	8008f60 <PxMessagingTask+0x57c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008efe:	4b72      	ldr	r3, [pc, #456]	; (80090c8 <PxMessagingTask+0x6e4>)
 8008f00:	1a40      	subs	r0, r0, r1
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	9509      	str	r5, [sp, #36]	; 0x24
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0a:	000d      	movs	r5, r1
 8008f0c:	469c      	mov	ip, r3
 8008f0e:	4b6b      	ldr	r3, [pc, #428]	; (80090bc <PxMessagingTask+0x6d8>)
 8008f10:	4460      	add	r0, ip
 8008f12:	469c      	mov	ip, r3
 8008f14:	4460      	add	r0, ip
 8008f16:	0001      	movs	r1, r0
 8008f18:	46a4      	mov	ip, r4
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	000c      	movs	r4, r1
 8008f1e:	9804      	ldr	r0, [sp, #16]
 8008f20:	e003      	b.n	8008f2a <PxMessagingTask+0x546>
					for(i =0; i < temp; i++){
 8008f22:	3301      	adds	r3, #1
 8008f24:	b2d9      	uxtb	r1, r3
 8008f26:	428d      	cmp	r5, r1
 8008f28:	d91a      	bls.n	8008f60 <PxMessagingTask+0x57c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008f2a:	5ce1      	ldrb	r1, [r4, r3]
 8008f2c:	4281      	cmp	r1, r0
 8008f2e:	d1f8      	bne.n	8008f22 <PxMessagingTask+0x53e>
				shift +=4;
 8008f30:	4664      	mov	r4, ip
 8008f32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f34:	e5dc      	b.n	8008af0 <PxMessagingTask+0x10c>
					Delay_ms(100);
 8008f36:	2064      	movs	r0, #100	; 0x64
 8008f38:	f006 fe4c 	bl	800fbd4 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008f3c:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f3e:	0031      	movs	r1, r6
 8008f40:	4640      	mov	r0, r8
 8008f42:	9a08      	ldr	r2, [sp, #32]
 8008f44:	f001 fb36 	bl	800a5b4 <remoteBootloaderUpdate>
 8008f48:	e6ee      	b.n	8008d28 <PxMessagingTask+0x344>
					Delay_ms(100);
 8008f4a:	2064      	movs	r0, #100	; 0x64
 8008f4c:	f006 fe42 	bl	800fbd4 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f50:	4a5a      	ldr	r2, [pc, #360]	; (80090bc <PxMessagingTask+0x6d8>)
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	4694      	mov	ip, r2
 8008f56:	1bdb      	subs	r3, r3, r7
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4463      	add	r3, ip
 8008f5c:	5d1b      	ldrb	r3, [r3, r4]
 8008f5e:	e7ee      	b.n	8008f3e <PxMessagingTask+0x55a>
					result =BOS_ERR_WrongID;
 8008f60:	2366      	movs	r3, #102	; 0x66
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	e637      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	4642      	mov	r2, r8
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	0028      	movs	r0, r5
 8008f6e:	0033      	movs	r3, r6
 8008f70:	9908      	ldr	r1, [sp, #32]
 8008f72:	f7ff fd35 	bl	80089e0 <User_MessagingParser>
 8008f76:	9004      	str	r0, [sp, #16]
							if(result == BOS_ERR_UnknownMessage){
 8008f78:	2801      	cmp	r0, #1
 8008f7a:	d000      	beq.n	8008f7e <PxMessagingTask+0x59a>
 8008f7c:	e6d4      	b.n	8008d28 <PxMessagingTask+0x344>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	4642      	mov	r2, r8
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	0028      	movs	r0, r5
 8008f88:	0033      	movs	r3, r6
 8008f8a:	f001 fda9 	bl	800aae0 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2100      	movs	r1, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008f92:	9004      	str	r0, [sp, #16]
		if(result == BOS_ERR_UnknownMessage){
 8008f94:	2801      	cmp	r0, #1
 8008f96:	d100      	bne.n	8008f9a <PxMessagingTask+0x5b6>
 8008f98:	e648      	b.n	8008c2c <PxMessagingTask+0x248>
 8008f9a:	e6c5      	b.n	8008d28 <PxMessagingTask+0x344>
							responseStatus =BOS_OK; // Initialize response
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4a4b      	ldr	r2, [pc, #300]	; (80090cc <PxMessagingTask+0x6e8>)
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008fa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
							responseStatus =BOS_OK; // Initialize response
 8008fa2:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	5ccb      	ldrb	r3, [r1, r3]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <PxMessagingTask+0x5cc>
 8008fac:	f000 fc2e 	bl	800980c <PxMessagingTask+0xe28>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008fb0:	2b1e      	cmp	r3, #30
 8008fb2:	d801      	bhi.n	8008fb8 <PxMessagingTask+0x5d4>
 8008fb4:	f000 fd02 	bl	80099bc <PxMessagingTask+0xfd8>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8008fb8:	2313      	movs	r3, #19
 8008fba:	4a44      	ldr	r2, [pc, #272]	; (80090cc <PxMessagingTask+0x6e8>)
 8008fbc:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	2240      	movs	r2, #64	; 0x40
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4393      	bics	r3, r2
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d000      	beq.n	8008fcc <PxMessagingTask+0x5e8>
 8008fca:	e632      	b.n	8008c32 <PxMessagingTask+0x24e>
								messageParams[0] =responseStatus;
 8008fcc:	4b3f      	ldr	r3, [pc, #252]	; (80090cc <PxMessagingTask+0x6e8>)
 8008fce:	4a40      	ldr	r2, [pc, #256]	; (80090d0 <PxMessagingTask+0x6ec>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008fd2:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 8008fd4:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	e628      	b.n	8008c2c <PxMessagingTask+0x248>
							SaveToRO();
 8008fda:	f001 f9d1 	bl	800a380 <SaveToRO>
							SaveEEportsDir();
 8008fde:	f7fa fbc9 	bl	8003774 <SaveEEportsDir>
							indMode =IND_PING;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4a3b      	ldr	r2, [pc, #236]	; (80090d4 <PxMessagingTask+0x6f0>)
							ACK_FLAG =1;
 8008fe6:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008fe8:	4653      	mov	r3, sl
 8008fea:	5dda      	ldrb	r2, [r3, r7]
 8008fec:	2300      	movs	r3, #0
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	e5f1      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	5ccb      	ldrb	r3, [r1, r3]
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d000      	beq.n	8009000 <PxMessagingTask+0x61c>
 8008ffe:	e394      	b.n	800972a <PxMessagingTask+0xd46>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009000:	1da3      	adds	r3, r4, #6
 8009002:	1de2      	adds	r2, r4, #7
 8009004:	5ccb      	ldrb	r3, [r1, r3]
 8009006:	5c8a      	ldrb	r2, [r1, r2]
 8009008:	061b      	lsls	r3, r3, #24
 800900a:	0412      	lsls	r2, r2, #16
 800900c:	189b      	adds	r3, r3, r2
 800900e:	0022      	movs	r2, r4
 8009010:	3209      	adds	r2, #9
 8009012:	5c8a      	ldrb	r2, [r1, r2]
 8009014:	189b      	adds	r3, r3, r2
 8009016:	0022      	movs	r2, r4
 8009018:	3208      	adds	r2, #8
 800901a:	5c8a      	ldrb	r2, [r1, r2]
								switch(cMessage[port - 1][1 + shift]) // requested format
 800901c:	3405      	adds	r4, #5
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800901e:	0212      	lsls	r2, r2, #8
 8009020:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009022:	5d0a      	ldrb	r2, [r1, r4]
 8009024:	3a01      	subs	r2, #1
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	2a07      	cmp	r2, #7
 800902a:	d900      	bls.n	800902e <PxMessagingTask+0x64a>
 800902c:	e67c      	b.n	8008d28 <PxMessagingTask+0x344>
 800902e:	492a      	ldr	r1, [pc, #168]	; (80090d8 <PxMessagingTask+0x6f4>)
 8009030:	0092      	lsls	r2, r2, #2
 8009032:	588a      	ldr	r2, [r1, r2]
 8009034:	4697      	mov	pc, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8009036:	0023      	movs	r3, r4
 8009038:	0020      	movs	r0, r4
 800903a:	0022      	movs	r2, r4
 800903c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800903e:	330e      	adds	r3, #14
 8009040:	5ceb      	ldrb	r3, [r5, r3]
 8009042:	300d      	adds	r0, #13
 8009044:	5c2e      	ldrb	r6, [r5, r0]
 8009046:	3003      	adds	r0, #3
 8009048:	5c28      	ldrb	r0, [r5, r0]
 800904a:	469c      	mov	ip, r3
 800904c:	4b1e      	ldr	r3, [pc, #120]	; (80090c8 <PxMessagingTask+0x6e4>)
 800904e:	320f      	adds	r2, #15
 8009050:	5caa      	ldrb	r2, [r5, r2]
 8009052:	7819      	ldrb	r1, [r3, #0]
 8009054:	002b      	movs	r3, r5
 8009056:	1e45      	subs	r5, r0, #1
 8009058:	41a8      	sbcs	r0, r5
 800905a:	9003      	str	r0, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800905c:	0020      	movs	r0, r4
 800905e:	3008      	adds	r0, #8
 8009060:	5c1d      	ldrb	r5, [r3, r0]
 8009062:	3001      	adds	r0, #1
 8009064:	5c18      	ldrb	r0, [r3, r0]
 8009066:	062d      	lsls	r5, r5, #24
 8009068:	0400      	lsls	r0, r0, #16
 800906a:	1828      	adds	r0, r5, r0
 800906c:	0025      	movs	r5, r4
 800906e:	350b      	adds	r5, #11
 8009070:	5d5d      	ldrb	r5, [r3, r5]
 8009072:	1940      	adds	r0, r0, r5
 8009074:	0025      	movs	r5, r4
 8009076:	350a      	adds	r5, #10
 8009078:	5d5d      	ldrb	r5, [r3, r5]
 800907a:	022d      	lsls	r5, r5, #8
 800907c:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800907e:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009080:	1d60      	adds	r0, r4, #5
 8009082:	5c1d      	ldrb	r5, [r3, r0]
 8009084:	1da0      	adds	r0, r4, #6
 8009086:	5c18      	ldrb	r0, [r3, r0]
 8009088:	042d      	lsls	r5, r5, #16
 800908a:	0200      	lsls	r0, r0, #8
 800908c:	1828      	adds	r0, r5, r0
 800908e:	1de5      	adds	r5, r4, #7
 8009090:	5d5d      	ldrb	r5, [r3, r5]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8009092:	340c      	adds	r4, #12
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009094:	1940      	adds	r0, r0, r5
 8009096:	001d      	movs	r5, r3
 8009098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909a:	5ced      	ldrb	r5, [r5, r3]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800909c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800909e:	062d      	lsls	r5, r5, #24
 80090a0:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80090a2:	9001      	str	r0, [sp, #4]
 80090a4:	5d18      	ldrb	r0, [r3, r4]
 80090a6:	4663      	mov	r3, ip
 80090a8:	9000      	str	r0, [sp, #0]
 80090aa:	0030      	movs	r0, r6
 80090ac:	f7ff f9fe 	bl	80084ac <StartScastDMAStream>
		if(result == BOS_ERR_UnknownMessage){
 80090b0:	e5bf      	b.n	8008c32 <PxMessagingTask+0x24e>
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	000005b3 	.word	0x000005b3
 80090b8:	20001fcc 	.word	0x20001fcc
 80090bc:	20000d40 	.word	0x20000d40
 80090c0:	20001f4c 	.word	0x20001f4c
 80090c4:	20000cf8 	.word	0x20000cf8
 80090c8:	20000aa8 	.word	0x20000aa8
 80090cc:	20000c74 	.word	0x20000c74
 80090d0:	20000b74 	.word	0x20000b74
 80090d4:	200011ef 	.word	0x200011ef
 80090d8:	0801a184 	.word	0x0801a184
							temp =cMessage[port - 1][11 + shift];
 80090dc:	230f      	movs	r3, #15
 80090de:	4698      	mov	r8, r3
							if(numOfParams == 15)
 80090e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
							temp =cMessage[port - 1][11 + shift];
 80090e2:	44a0      	add	r8, r4
							if(numOfParams == 15)
 80090e4:	2b0f      	cmp	r3, #15
 80090e6:	d101      	bne.n	80090ec <PxMessagingTask+0x708>
 80090e8:	f000 fcd9 	bl	8009a9e <PxMessagingTask+0x10ba>
 80090ec:	2111      	movs	r1, #17
 80090ee:	468c      	mov	ip, r1
 80090f0:	44a4      	add	ip, r4
 80090f2:	4661      	mov	r1, ip
							temp =cMessage[port - 1][11 + shift];
 80090f4:	4643      	mov	r3, r8
 80090f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f8:	9104      	str	r1, [sp, #16]
							if(numOfParams == 17)
 80090fa:	990a      	ldr	r1, [sp, #40]	; 0x28
							temp =cMessage[port - 1][11 + shift];
 80090fc:	5cd3      	ldrb	r3, [r2, r3]
							if(numOfParams == 17)
 80090fe:	2911      	cmp	r1, #17
 8009100:	d102      	bne.n	8009108 <PxMessagingTask+0x724>
								temp =cMessage[port - 1][15 + shift];
 8009102:	0023      	movs	r3, r4
 8009104:	3313      	adds	r3, #19
 8009106:	5cd3      	ldrb	r3, [r2, r3]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009108:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800910a:	1da1      	adds	r1, r4, #6
 800910c:	1d62      	adds	r2, r4, #5
 800910e:	5c46      	ldrb	r6, [r0, r1]
 8009110:	920c      	str	r2, [sp, #48]	; 0x30
 8009112:	5c82      	ldrb	r2, [r0, r2]
 8009114:	1de5      	adds	r5, r4, #7
 8009116:	0412      	lsls	r2, r2, #16
 8009118:	0236      	lsls	r6, r6, #8
 800911a:	1996      	adds	r6, r2, r6
 800911c:	5d42      	ldrb	r2, [r0, r5]
 800911e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009120:	18b6      	adds	r6, r6, r2
 8009122:	9a09      	ldr	r2, [sp, #36]	; 0x24
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8009124:	2109      	movs	r1, #9
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009126:	5c82      	ldrb	r2, [r0, r2]
 8009128:	9510      	str	r5, [sp, #64]	; 0x40
 800912a:	0612      	lsls	r2, r2, #24
 800912c:	18b2      	adds	r2, r6, r2
 800912e:	920e      	str	r2, [sp, #56]	; 0x38
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8009130:	2208      	movs	r2, #8
 8009132:	4694      	mov	ip, r2
 8009134:	44a4      	add	ip, r4
 8009136:	4662      	mov	r2, ip
 8009138:	4666      	mov	r6, ip
 800913a:	468c      	mov	ip, r1
 800913c:	44a4      	add	ip, r4
 800913e:	0005      	movs	r5, r0
 8009140:	5d80      	ldrb	r0, [r0, r6]
 8009142:	4666      	mov	r6, ip
 8009144:	0021      	movs	r1, r4
 8009146:	5dad      	ldrb	r5, [r5, r6]
 8009148:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800914a:	0600      	lsls	r0, r0, #24
 800914c:	310b      	adds	r1, #11
 800914e:	042d      	lsls	r5, r5, #16
 8009150:	1945      	adds	r5, r0, r5
 8009152:	5c70      	ldrb	r0, [r6, r1]
 8009154:	9213      	str	r2, [sp, #76]	; 0x4c
 8009156:	3202      	adds	r2, #2
 8009158:	182d      	adds	r5, r5, r0
 800915a:	5cb0      	ldrb	r0, [r6, r2]
 800915c:	0200      	lsls	r0, r0, #8
 800915e:	182d      	adds	r5, r5, r0
							if(temp == false){
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <PxMessagingTask+0x784>
 8009164:	f000 ff50 	bl	800a008 <PxMessagingTask+0x1624>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8009168:	0023      	movs	r3, r4
 800916a:	330d      	adds	r3, #13
 800916c:	5cf3      	ldrb	r3, [r6, r3]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <PxMessagingTask+0x79a>
 8009172:	3204      	adds	r2, #4
 8009174:	5cb2      	ldrb	r2, [r6, r2]
 8009176:	2a00      	cmp	r2, #0
 8009178:	d001      	beq.n	800917e <PxMessagingTask+0x79a>
 800917a:	f000 fc55 	bl	8009a28 <PxMessagingTask+0x1044>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800917e:	4643      	mov	r3, r8
 8009180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009182:	5ccb      	ldrb	r3, [r1, r3]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d006      	beq.n	8009196 <PxMessagingTask+0x7b2>
 8009188:	0022      	movs	r2, r4
 800918a:	3210      	adds	r2, #16
 800918c:	5c8a      	ldrb	r2, [r1, r2]
 800918e:	2a00      	cmp	r2, #0
 8009190:	d001      	beq.n	8009196 <PxMessagingTask+0x7b2>
 8009192:	f000 fc3e 	bl	8009a12 <PxMessagingTask+0x102e>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8009196:	466b      	mov	r3, sp
 8009198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800919a:	7c1b      	ldrb	r3, [r3, #16]
 800919c:	5cd3      	ldrb	r3, [r2, r3]
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d000      	beq.n	80091a6 <PxMessagingTask+0x7c2>
 80091a4:	e372      	b.n	800988c <PxMessagingTask+0xea8>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80091a6:	4652      	mov	r2, sl
 80091a8:	930c      	str	r3, [sp, #48]	; 0x30
 80091aa:	5dd2      	ldrb	r2, [r2, r7]
 80091ac:	e513      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 80091ae:	2400      	movs	r4, #0
 80091b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80091b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091b4:	2319      	movs	r3, #25
 80091b6:	0022      	movs	r2, r4
 80091b8:	0021      	movs	r1, r4
 80091ba:	5da8      	ldrb	r0, [r5, r6]
 80091bc:	9400      	str	r4, [sp, #0]
 80091be:	f7fe fecf 	bl	8007f60 <SendMessageFromPort>
							osDelay(100);
 80091c2:	2064      	movs	r0, #100	; 0x64
 80091c4:	f004 fe34 	bl	800de30 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 80091c8:	4add      	ldr	r2, [pc, #884]	; (8009540 <PxMessagingTask+0xb5c>)
 80091ca:	5dab      	ldrb	r3, [r5, r6]
 80091cc:	7811      	ldrb	r1, [r2, #0]
 80091ce:	4640      	mov	r0, r8
 80091d0:	9a08      	ldr	r2, [sp, #32]
 80091d2:	f001 f9ef 	bl	800a5b4 <remoteBootloaderUpdate>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80091d6:	4653      	mov	r3, sl
 80091d8:	9404      	str	r4, [sp, #16]
 80091da:	5dda      	ldrb	r2, [r3, r7]
 80091dc:	e4fb      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 80091de:	4642      	mov	r2, r8
 80091e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091e2:	1da3      	adds	r3, r4, #6
 80091e4:	5ccb      	ldrb	r3, [r1, r3]
 80091e6:	0212      	lsls	r2, r2, #8
 80091e8:	189b      	adds	r3, r3, r2
 80091ea:	48d6      	ldr	r0, [pc, #856]	; (8009544 <PxMessagingTask+0xb60>)
 80091ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 80091ee:	3405      	adds	r4, #5
 80091f0:	4694      	mov	ip, r2
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 80091f2:	5213      	strh	r3, [r2, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 80091f4:	000a      	movs	r2, r1
 80091f6:	0003      	movs	r3, r0
 80091f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091fa:	4463      	add	r3, ip
 80091fc:	5c51      	ldrb	r1, [r2, r1]
 80091fe:	5d12      	ldrb	r2, [r2, r4]
 8009200:	0209      	lsls	r1, r1, #8
 8009202:	1852      	adds	r2, r2, r1
 8009204:	805a      	strh	r2, [r3, #2]
								responseStatus =BOS_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	4acf      	ldr	r2, [pc, #828]	; (8009548 <PxMessagingTask+0xb64>)
 800920a:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800920c:	4652      	mov	r2, sl
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	5dd2      	ldrb	r2, [r2, r7]
 8009212:	e4e0      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009214:	4642      	mov	r2, r8
 8009216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009218:	1da3      	adds	r3, r4, #6
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	0212      	lsls	r2, r2, #8
 800921e:	48c9      	ldr	r0, [pc, #804]	; (8009544 <PxMessagingTask+0xb60>)
 8009220:	189b      	adds	r3, r3, r2
 8009222:	9a11      	ldr	r2, [sp, #68]	; 0x44
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009224:	3405      	adds	r4, #5
 8009226:	4694      	mov	ip, r2
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009228:	5213      	strh	r3, [r2, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800922a:	000a      	movs	r2, r1
 800922c:	0003      	movs	r3, r0
 800922e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009230:	4463      	add	r3, ip
 8009232:	5c51      	ldrb	r1, [r2, r1]
 8009234:	5d12      	ldrb	r2, [r2, r4]
 8009236:	0209      	lsls	r1, r1, #8
 8009238:	1852      	adds	r2, r2, r1
 800923a:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800923c:	4bc3      	ldr	r3, [pc, #780]	; (800954c <PxMessagingTask+0xb68>)
 800923e:	4ac4      	ldr	r2, [pc, #784]	; (8009550 <PxMessagingTask+0xb6c>)
 8009240:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8009242:	9c08      	ldr	r4, [sp, #32]
							messageParams[1] =(uint8_t )myPN;
 8009244:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800924a:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800924c:	2002      	movs	r0, #2
 800924e:	f004 fdef 	bl	800de30 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009252:	2200      	movs	r2, #0
 8009254:	2303      	movs	r3, #3
 8009256:	0011      	movs	r1, r2
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	0020      	movs	r0, r4
 800925c:	3308      	adds	r3, #8
 800925e:	f7fe fe7f 	bl	8007f60 <SendMessageFromPort>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009262:	4653      	mov	r3, sl
 8009264:	5dda      	ldrb	r2, [r3, r7]
 8009266:	2300      	movs	r3, #0
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	e4b4      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							IND_toggle();
 800926c:	2180      	movs	r1, #128	; 0x80
 800926e:	48b9      	ldr	r0, [pc, #740]	; (8009554 <PxMessagingTask+0xb70>)
 8009270:	01c9      	lsls	r1, r1, #7
 8009272:	f008 fa19 	bl	80116a8 <HAL_GPIO_TogglePin>
		if(result == BOS_ERR_UnknownMessage){
 8009276:	e4dc      	b.n	8008c32 <PxMessagingTask+0x24e>
							IND_OFF();
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	48b5      	ldr	r0, [pc, #724]	; (8009554 <PxMessagingTask+0xb70>)
 800927e:	01c9      	lsls	r1, r1, #7
 8009280:	f008 fa0c 	bl	801169c <HAL_GPIO_WritePin>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009284:	4653      	mov	r3, sl
 8009286:	5dda      	ldrb	r2, [r3, r7]
 8009288:	2300      	movs	r3, #0
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	e4a3      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							IND_ON();
 800928e:	2201      	movs	r2, #1
 8009290:	e7f3      	b.n	800927a <PxMessagingTask+0x896>
							if(!moduleAlias[myID][0])
 8009292:	4bab      	ldr	r3, [pc, #684]	; (8009540 <PxMessagingTask+0xb5c>)
 8009294:	49b0      	ldr	r1, [pc, #704]	; (8009558 <PxMessagingTask+0xb74>)
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	230a      	movs	r3, #10
 800929a:	435a      	muls	r2, r3
 800929c:	5c8a      	ldrb	r2, [r1, r2]
 800929e:	2a00      	cmp	r2, #0
 80092a0:	d000      	beq.n	80092a4 <PxMessagingTask+0x8c0>
 80092a2:	e2a7      	b.n	80097f4 <PxMessagingTask+0xe10>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 80092a4:	48ad      	ldr	r0, [pc, #692]	; (800955c <PxMessagingTask+0xb78>)
 80092a6:	4642      	mov	r2, r8
 80092a8:	49ad      	ldr	r1, [pc, #692]	; (8009560 <PxMessagingTask+0xb7c>)
 80092aa:	3040      	adds	r0, #64	; 0x40
 80092ac:	f00a fe66 	bl	8013f7c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 80092b0:	4caa      	ldr	r4, [pc, #680]	; (800955c <PxMessagingTask+0xb78>)
 80092b2:	3440      	adds	r4, #64	; 0x40
 80092b4:	0020      	movs	r0, r4
 80092b6:	f7f6 ff2f 	bl	8000118 <strlen>
 80092ba:	4baa      	ldr	r3, [pc, #680]	; (8009564 <PxMessagingTask+0xb80>)
 80092bc:	b282      	uxth	r2, r0
 80092be:	7818      	ldrb	r0, [r3, #0]
 80092c0:	2301      	movs	r3, #1
 80092c2:	425b      	negs	r3, r3
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	0021      	movs	r1, r4
 80092c8:	3333      	adds	r3, #51	; 0x33
 80092ca:	f004 fbd1 	bl	800da70 <writePxMutex>
							responseStatus =BOS_OK;
 80092ce:	e79a      	b.n	8009206 <PxMessagingTask+0x822>
							indMode =IND_PING;
 80092d0:	2301      	movs	r3, #1
 80092d2:	4aa5      	ldr	r2, [pc, #660]	; (8009568 <PxMessagingTask+0xb84>)
							osDelay(10);
 80092d4:	200a      	movs	r0, #10
							indMode =IND_PING;
 80092d6:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 80092d8:	f004 fdaa 	bl	800de30 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 80092dc:	464b      	mov	r3, r9
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	4393      	bics	r3, r2
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d000      	beq.n	80092ea <PxMessagingTask+0x906>
 80092e8:	e4a3      	b.n	8008c32 <PxMessagingTask+0x24e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 80092ea:	2200      	movs	r2, #0
 80092ec:	2102      	movs	r1, #2
 80092ee:	e49d      	b.n	8008c2c <PxMessagingTask+0x248>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80092f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	5cd3      	ldrb	r3, [r2, r3]
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d000      	beq.n	80092fe <PxMessagingTask+0x91a>
 80092fc:	e2ab      	b.n	8009856 <PxMessagingTask+0xe72>
								myID =cMessage[port - 1][1 + shift];
 80092fe:	3405      	adds	r4, #5
 8009300:	5d13      	ldrb	r3, [r2, r4]
 8009302:	4a8f      	ldr	r2, [pc, #572]	; (8009540 <PxMessagingTask+0xb5c>)
 8009304:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009306:	4653      	mov	r3, sl
 8009308:	5dda      	ldrb	r2, [r3, r7]
 800930a:	e464      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							ReadPortsDirMSG(src);
 800930c:	4640      	mov	r0, r8
 800930e:	f004 fc89 	bl	800dc24 <ReadPortsDirMSG>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009312:	4653      	mov	r3, sl
 8009314:	5dda      	ldrb	r2, [r3, r7]
 8009316:	2300      	movs	r3, #0
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	e45c      	b.n	8008bd6 <PxMessagingTask+0x1f2>
 800931c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009320:	469c      	mov	ip, r3
 8009322:	4b92      	ldr	r3, [pc, #584]	; (800956c <PxMessagingTask+0xb88>)
 8009324:	4466      	add	r6, ip
 8009326:	469c      	mov	ip, r3
					switch(code){
 8009328:	2501      	movs	r5, #1
 800932a:	3e01      	subs	r6, #1
 800932c:	4466      	add	r6, ip
 800932e:	46a0      	mov	r8, r4
 8009330:	0034      	movs	r4, r6
 8009332:	9e08      	ldr	r6, [sp, #32]
 8009334:	b2e8      	uxtb	r0, r5
								if(p != port)
 8009336:	4286      	cmp	r6, r0
 8009338:	d004      	beq.n	8009344 <PxMessagingTask+0x960>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800933a:	f004 fc01 	bl	800db40 <GetUart>
 800933e:	5d61      	ldrb	r1, [r4, r5]
 8009340:	f004 fc0a 	bl	800db58 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009344:	3501      	adds	r5, #1
 8009346:	2d06      	cmp	r5, #6
 8009348:	d1f4      	bne.n	8009334 <PxMessagingTask+0x950>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800934a:	4644      	mov	r4, r8
 800934c:	9808      	ldr	r0, [sp, #32]
 800934e:	f004 fbf7 	bl	800db40 <GetUart>
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	340e      	adds	r4, #14
 8009356:	5d19      	ldrb	r1, [r3, r4]
 8009358:	f004 fbfe 	bl	800db58 <SwapUartPins>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800935c:	4653      	mov	r3, sl
 800935e:	5dda      	ldrb	r2, [r3, r7]
 8009360:	2300      	movs	r3, #0
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	e437      	b.n	8008bd6 <PxMessagingTask+0x1f2>
							temp =numOfParams / 5;
 8009366:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009368:	2105      	movs	r1, #5
 800936a:	0028      	movs	r0, r5
 800936c:	f7f6 fef0 	bl	8000150 <__udivsi3>
 8009370:	b2c3      	uxtb	r3, r0
 8009372:	930c      	str	r3, [sp, #48]	; 0x30
							for(uint8_t k =0; k < temp; k++){
 8009374:	2d04      	cmp	r5, #4
 8009376:	d800      	bhi.n	800937a <PxMessagingTask+0x996>
 8009378:	e745      	b.n	8009206 <PxMessagingTask+0x822>
 800937a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937c:	4a7b      	ldr	r2, [pc, #492]	; (800956c <PxMessagingTask+0xb88>)
 800937e:	469c      	mov	ip, r3
 8009380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009382:	3405      	adds	r4, #5
 8009384:	4466      	add	r6, ip
 8009386:	4694      	mov	ip, r2
 8009388:	4466      	add	r6, ip
 800938a:	469c      	mov	ip, r3
 800938c:	4464      	add	r4, ip
 800938e:	4694      	mov	ip, r2
 8009390:	2500      	movs	r5, #0
 8009392:	46b8      	mov	r8, r7
 8009394:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009396:	4464      	add	r4, ip
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8009398:	4b75      	ldr	r3, [pc, #468]	; (8009570 <PxMessagingTask+0xb8c>)
 800939a:	7830      	ldrb	r0, [r6, #0]
 800939c:	469c      	mov	ip, r3
 800939e:	3801      	subs	r0, #1
 80093a0:	0080      	lsls	r0, r0, #2
							for(uint8_t k =0; k < temp; k++){
 80093a2:	3501      	adds	r5, #1
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 80093a4:	0021      	movs	r1, r4
 80093a6:	2204      	movs	r2, #4
 80093a8:	4460      	add	r0, ip
							for(uint8_t k =0; k < temp; k++){
 80093aa:	b2ed      	uxtb	r5, r5
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 80093ac:	f00a fbec 	bl	8013b88 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 80093b0:	3605      	adds	r6, #5
 80093b2:	3405      	adds	r4, #5
 80093b4:	42af      	cmp	r7, r5
 80093b6:	d8ef      	bhi.n	8009398 <PxMessagingTask+0x9b4>
 80093b8:	4647      	mov	r7, r8
 80093ba:	e724      	b.n	8009206 <PxMessagingTask+0x822>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80093bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093be:	1d63      	adds	r3, r4, #5
 80093c0:	5cd5      	ldrb	r5, [r2, r3]
 80093c2:	1da3      	adds	r3, r4, #6
 80093c4:	5cd3      	ldrb	r3, [r2, r3]
 80093c6:	042d      	lsls	r5, r5, #16
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	18ed      	adds	r5, r5, r3
 80093cc:	1de3      	adds	r3, r4, #7
 80093ce:	5cd3      	ldrb	r3, [r2, r3]
 80093d0:	3408      	adds	r4, #8
 80093d2:	18ed      	adds	r5, r5, r3
 80093d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d6:	5cd3      	ldrb	r3, [r2, r3]
 80093d8:	061b      	lsls	r3, r3, #24
 80093da:	18ed      	adds	r5, r5, r3
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80093dc:	5d13      	ldrb	r3, [r2, r4]
 80093de:	2bff      	cmp	r3, #255	; 0xff
 80093e0:	d100      	bne.n	80093e4 <PxMessagingTask+0xa00>
 80093e2:	e352      	b.n	8009a8a <PxMessagingTask+0x10a6>
								for(p =0; p < numOfParams; p++){
 80093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <PxMessagingTask+0xa0a>
 80093ea:	f000 fdc2 	bl	8009f72 <PxMessagingTask+0x158e>
 80093ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f0:	46b8      	mov	r8, r7
 80093f2:	469c      	mov	ip, r3
 80093f4:	4b5d      	ldr	r3, [pc, #372]	; (800956c <PxMessagingTask+0xb88>)
 80093f6:	4464      	add	r4, ip
 80093f8:	191e      	adds	r6, r3, r4
 80093fa:	002f      	movs	r7, r5
 80093fc:	2400      	movs	r4, #0
 80093fe:	e004      	b.n	800940a <PxMessagingTask+0xa26>
 8009400:	3401      	adds	r4, #1
 8009402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009404:	b2e3      	uxtb	r3, r4
 8009406:	4293      	cmp	r3, r2
 8009408:	d20c      	bcs.n	8009424 <PxMessagingTask+0xa40>
									temp =cMessage[port - 1][4 + shift + p];
 800940a:	5d35      	ldrb	r5, [r6, r4]
									if(temp > 0 && temp <= NumOfPorts){
 800940c:	1e6b      	subs	r3, r5, #1
 800940e:	2b04      	cmp	r3, #4
 8009410:	d8f6      	bhi.n	8009400 <PxMessagingTask+0xa1c>
										UpdateBaudrate(temp,temp32);
 8009412:	0039      	movs	r1, r7
 8009414:	0028      	movs	r0, r5
 8009416:	f004 fb81 	bl	800db1c <UpdateBaudrate>
								for(p =0; p < numOfParams; p++){
 800941a:	3401      	adds	r4, #1
 800941c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800941e:	b2e3      	uxtb	r3, r4
 8009420:	4293      	cmp	r3, r2
 8009422:	d3f2      	bcc.n	800940a <PxMessagingTask+0xa26>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009424:	4653      	mov	r3, sl
 8009426:	4647      	mov	r7, r8
 8009428:	5dda      	ldrb	r2, [r3, r7]
 800942a:	2300      	movs	r3, #0
 800942c:	950c      	str	r5, [sp, #48]	; 0x30
 800942e:	9304      	str	r3, [sp, #16]
 8009430:	f7ff fbd1 	bl	8008bd6 <PxMessagingTask+0x1f2>
							for(p =0; p < numOfParams; p++){
 8009434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d100      	bne.n	800943c <PxMessagingTask+0xa58>
 800943a:	e6e4      	b.n	8009206 <PxMessagingTask+0x822>
 800943c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800943e:	4644      	mov	r4, r8
 8009440:	4694      	mov	ip, r2
 8009442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009444:	4a49      	ldr	r2, [pc, #292]	; (800956c <PxMessagingTask+0xb88>)
 8009446:	4460      	add	r0, ip
 8009448:	4694      	mov	ip, r2
 800944a:	4b4a      	ldr	r3, [pc, #296]	; (8009574 <PxMessagingTask+0xb90>)
 800944c:	3c01      	subs	r4, #1
 800944e:	0064      	lsls	r4, r4, #1
 8009450:	5b1b      	ldrh	r3, [r3, r4]
 8009452:	2580      	movs	r5, #128	; 0x80
 8009454:	4460      	add	r0, ip
 8009456:	2200      	movs	r2, #0
 8009458:	46a4      	mov	ip, r4
 800945a:	001c      	movs	r4, r3
 800945c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800945e:	022d      	lsls	r5, r5, #8
 8009460:	002b      	movs	r3, r5
 8009462:	5c81      	ldrb	r1, [r0, r2]
							for(p =0; p < numOfParams; p++){
 8009464:	3201      	adds	r2, #1
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009466:	3901      	subs	r1, #1
 8009468:	410b      	asrs	r3, r1
 800946a:	431c      	orrs	r4, r3
							for(p =0; p < numOfParams; p++){
 800946c:	b2d3      	uxtb	r3, r2
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800946e:	b2a4      	uxth	r4, r4
							for(p =0; p < numOfParams; p++){
 8009470:	42b3      	cmp	r3, r6
 8009472:	d3f5      	bcc.n	8009460 <PxMessagingTask+0xa7c>
 8009474:	0023      	movs	r3, r4
 8009476:	4664      	mov	r4, ip
 8009478:	4a3e      	ldr	r2, [pc, #248]	; (8009574 <PxMessagingTask+0xb90>)
 800947a:	5313      	strh	r3, [r2, r4]
							responseStatus =BOS_OK;
 800947c:	e6c3      	b.n	8009206 <PxMessagingTask+0x822>
							if(longMessage){
 800947e:	4b3e      	ldr	r3, [pc, #248]	; (8009578 <PxMessagingTask+0xb94>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d100      	bne.n	800948a <PxMessagingTask+0xaa6>
 8009488:	e190      	b.n	80097ac <PxMessagingTask+0xdc8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800948a:	4b3c      	ldr	r3, [pc, #240]	; (800957c <PxMessagingTask+0xb98>)
 800948c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800948e:	881c      	ldrh	r4, [r3, #0]
 8009490:	4b3b      	ldr	r3, [pc, #236]	; (8009580 <PxMessagingTask+0xb9c>)
 8009492:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009494:	1918      	adds	r0, r3, r4
 8009496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009498:	002a      	movs	r2, r5
 800949a:	469c      	mov	ip, r3
 800949c:	4b33      	ldr	r3, [pc, #204]	; (800956c <PxMessagingTask+0xb88>)
 800949e:	4461      	add	r1, ip
 80094a0:	469c      	mov	ip, r3
 80094a2:	4461      	add	r1, ip
 80094a4:	f00a fb70 	bl	8013b88 <memcpy>
								longMessageLastPtr +=numOfParams;
 80094a8:	46ac      	mov	ip, r5
 80094aa:	4b34      	ldr	r3, [pc, #208]	; (800957c <PxMessagingTask+0xb98>)
 80094ac:	4464      	add	r4, ip
 80094ae:	801c      	strh	r4, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80094b0:	4653      	mov	r3, sl
 80094b2:	5dda      	ldrb	r2, [r3, r7]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	f7ff fb8d 	bl	8008bd6 <PxMessagingTask+0x1f2>
							rejected_FLAG =1;
 80094bc:	2301      	movs	r3, #1
 80094be:	4a31      	ldr	r2, [pc, #196]	; (8009584 <PxMessagingTask+0xba0>)
 80094c0:	7013      	strb	r3, [r2, #0]
		if(result == BOS_ERR_UnknownMessage){
 80094c2:	f7ff fbb6 	bl	8008c32 <PxMessagingTask+0x24e>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80094c6:	4b30      	ldr	r3, [pc, #192]	; (8009588 <PxMessagingTask+0xba4>)
 80094c8:	4a30      	ldr	r2, [pc, #192]	; (800958c <PxMessagingTask+0xba8>)
							osDelay(10);
 80094ca:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80094cc:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 80094ce:	2301      	movs	r3, #1
 80094d0:	4a25      	ldr	r2, [pc, #148]	; (8009568 <PxMessagingTask+0xb84>)
 80094d2:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 80094d4:	f004 fcac 	bl	800de30 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	4b2c      	ldr	r3, [pc, #176]	; (8009590 <PxMessagingTask+0xbac>)
 80094de:	4a2d      	ldr	r2, [pc, #180]	; (8009594 <PxMessagingTask+0xbb0>)
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	e7fd      	b.n	80094e6 <PxMessagingTask+0xb02>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80094ea:	f004 fe49 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
 80094ee:	0004      	movs	r4, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80094f0:	f7f6 fe12 	bl	8000118 <strlen>
 80094f4:	2100      	movs	r1, #0
 80094f6:	0002      	movs	r2, r0
 80094f8:	0020      	movs	r0, r4
 80094fa:	f00a fb4e 	bl	8013b9a <memset>
							if(longMessage){
 80094fe:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <PxMessagingTask+0xb94>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d100      	bne.n	800950a <PxMessagingTask+0xb26>
 8009508:	e134      	b.n	8009774 <PxMessagingTask+0xd90>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <PxMessagingTask+0xb98>)
 800950c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800950e:	8818      	ldrh	r0, [r3, #0]
 8009510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009512:	1820      	adds	r0, r4, r0
 8009514:	469c      	mov	ip, r3
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <PxMessagingTask+0xb88>)
 8009518:	4461      	add	r1, ip
 800951a:	469c      	mov	ip, r3
 800951c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800951e:	4461      	add	r1, ip
 8009520:	0022      	movs	r2, r4
 8009522:	f00a fb31 	bl	8013b88 <memcpy>
								longMessageLastPtr +=numOfParams;
 8009526:	46a4      	mov	ip, r4
 8009528:	4b14      	ldr	r3, [pc, #80]	; (800957c <PxMessagingTask+0xb98>)
 800952a:	881a      	ldrh	r2, [r3, #0]
 800952c:	4b13      	ldr	r3, [pc, #76]	; (800957c <PxMessagingTask+0xb98>)
 800952e:	4462      	add	r2, ip
 8009530:	801a      	strh	r2, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009532:	4653      	mov	r3, sl
 8009534:	5dda      	ldrb	r2, [r3, r7]
 8009536:	2300      	movs	r3, #0
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	f7ff fb4c 	bl	8008bd6 <PxMessagingTask+0x1f2>
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	20000aa8 	.word	0x20000aa8
 8009544:	200011d8 	.word	0x200011d8
 8009548:	20000c74 	.word	0x20000c74
 800954c:	20000030 	.word	0x20000030
 8009550:	20000b74 	.word	0x20000b74
 8009554:	48000800 	.word	0x48000800
 8009558:	20000e74 	.word	0x20000e74
 800955c:	20001f4c 	.word	0x20001f4c
 8009560:	0801bbf8 	.word	0x0801bbf8
 8009564:	20000c60 	.word	0x20000c60
 8009568:	200011ef 	.word	0x200011ef
 800956c:	20000d40 	.word	0x20000d40
 8009570:	200011c4 	.word	0x200011c4
 8009574:	200029e4 	.word	0x200029e4
 8009578:	20000cfc 	.word	0x20000cfc
 800957c:	20000cfa 	.word	0x20000cfa
 8009580:	20002068 	.word	0x20002068
 8009584:	200011ed 	.word	0x200011ed
 8009588:	20007ff0 	.word	0x20007ff0
 800958c:	deadbeef 	.word	0xdeadbeef
 8009590:	e000ed00 	.word	0xe000ed00
 8009594:	05fa0004 	.word	0x05fa0004
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009598:	f004 fdf2 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
 800959c:	0004      	movs	r4, r0
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800959e:	48f2      	ldr	r0, [pc, #968]	; (8009968 <PxMessagingTask+0xf84>)
 80095a0:	3030      	adds	r0, #48	; 0x30
							if(dst == BOS_BROADCAST)
 80095a2:	2eff      	cmp	r6, #255	; 0xff
 80095a4:	d100      	bne.n	80095a8 <PxMessagingTask+0xbc4>
 80095a6:	e33a      	b.n	8009c1e <PxMessagingTask+0x123a>
							else if(dst == BOS_MULTICAST)
 80095a8:	2efe      	cmp	r6, #254	; 0xfe
 80095aa:	d100      	bne.n	80095ae <PxMessagingTask+0xbca>
 80095ac:	e281      	b.n	8009ab2 <PxMessagingTask+0x10ce>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 80095ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095b2:	469c      	mov	ip, r3
 80095b4:	4bed      	ldr	r3, [pc, #948]	; (800996c <PxMessagingTask+0xf88>)
 80095b6:	4461      	add	r1, ip
 80095b8:	469c      	mov	ip, r3
 80095ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095bc:	4461      	add	r1, ip
 80095be:	f00a fae3 	bl	8013b88 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80095c2:	4ee9      	ldr	r6, [pc, #932]	; (8009968 <PxMessagingTask+0xf84>)
 80095c4:	9704      	str	r7, [sp, #16]
 80095c6:	3630      	adds	r6, #48	; 0x30
 80095c8:	e001      	b.n	80095ce <PxMessagingTask+0xbea>
							} while(xReturned != pdFALSE);
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	d025      	beq.n	800961a <PxMessagingTask+0xc36>
								temp =PcPort;
 80095ce:	4be8      	ldr	r3, [pc, #928]	; (8009970 <PxMessagingTask+0xf8c>)
								PcPort =port;
 80095d0:	9a08      	ldr	r2, [sp, #32]
								temp =PcPort;
 80095d2:	781f      	ldrb	r7, [r3, #0]
								PcPort =port;
 80095d4:	701a      	strb	r2, [r3, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80095d6:	2299      	movs	r2, #153	; 0x99
 80095d8:	0021      	movs	r1, r4
 80095da:	0030      	movs	r0, r6
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	f004 fd4d 	bl	800e07c <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 80095e2:	4be3      	ldr	r3, [pc, #908]	; (8009970 <PxMessagingTask+0xf8c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80095e4:	0005      	movs	r5, r0
								PcPort =temp;
 80095e6:	701f      	strb	r7, [r3, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80095e8:	464b      	mov	r3, r9
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b60      	cmp	r3, #96	; 0x60
 80095ee:	d1ec      	bne.n	80095ca <PxMessagingTask+0xbe6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 80095f0:	0020      	movs	r0, r4
 80095f2:	f7f6 fd91 	bl	8000118 <strlen>
 80095f6:	0021      	movs	r1, r4
 80095f8:	0002      	movs	r2, r0
 80095fa:	48de      	ldr	r0, [pc, #888]	; (8009974 <PxMessagingTask+0xf90>)
 80095fc:	f00a fac4 	bl	8013b88 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8009600:	0020      	movs	r0, r4
 8009602:	f7f6 fd89 	bl	8000118 <strlen>
 8009606:	2118      	movs	r1, #24
 8009608:	b282      	uxth	r2, r0
 800960a:	4640      	mov	r0, r8
 800960c:	f7fe ff18 	bl	8008440 <SendMessageToModule>
									osDelay(10);
 8009610:	200a      	movs	r0, #10
 8009612:	f004 fc0d 	bl	800de30 <osDelay>
							} while(xReturned != pdFALSE);
 8009616:	2d00      	cmp	r5, #0
 8009618:	d1d9      	bne.n	80095ce <PxMessagingTask+0xbea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800961a:	48d3      	ldr	r0, [pc, #844]	; (8009968 <PxMessagingTask+0xf84>)
 800961c:	2232      	movs	r2, #50	; 0x32
 800961e:	2100      	movs	r1, #0
 8009620:	3030      	adds	r0, #48	; 0x30
 8009622:	970c      	str	r7, [sp, #48]	; 0x30
 8009624:	9f04      	ldr	r7, [sp, #16]
 8009626:	f00a fab8 	bl	8013b9a <memset>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800962a:	4653      	mov	r3, sl
 800962c:	5dda      	ldrb	r2, [r3, r7]
 800962e:	2300      	movs	r3, #0
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	f7ff fad0 	bl	8008bd6 <PxMessagingTask+0x1f2>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009638:	1d61      	adds	r1, r4, #5
 800963a:	469c      	mov	ip, r3
 800963c:	4bcb      	ldr	r3, [pc, #812]	; (800996c <PxMessagingTask+0xf88>)
 800963e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009640:	4461      	add	r1, ip
 8009642:	469c      	mov	ip, r3
 8009644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009648:	5c18      	ldrb	r0, [r3, r0]
 800964a:	230a      	movs	r3, #10
 800964c:	3a01      	subs	r2, #1
 800964e:	b292      	uxth	r2, r2
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4461      	add	r1, ip
 8009654:	f004 fa0c 	bl	800da70 <writePxMutex>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009658:	4653      	mov	r3, sl
 800965a:	5dda      	ldrb	r2, [r3, r7]
 800965c:	2300      	movs	r3, #0
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	f7ff fab9 	bl	8008bd6 <PxMessagingTask+0x1f2>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009668:	5c9b      	ldrb	r3, [r3, r2]
 800966a:	4ac3      	ldr	r2, [pc, #780]	; (8009978 <PxMessagingTask+0xf94>)
							ACK_FLAG =1;
 800966c:	7013      	strb	r3, [r2, #0]
 800966e:	e4bb      	b.n	8008fe8 <PxMessagingTask+0x604>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009670:	2002      	movs	r0, #2
 8009672:	4240      	negs	r0, r0
 8009674:	17c1      	asrs	r1, r0, #31
 8009676:	4bc1      	ldr	r3, [pc, #772]	; (800997c <PxMessagingTask+0xf98>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	9204      	str	r2, [sp, #16]
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	1812      	adds	r2, r2, r0
 8009682:	414b      	adcs	r3, r1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d100      	bne.n	800968a <PxMessagingTask+0xca6>
 8009688:	e2a4      	b.n	8009bd4 <PxMessagingTask+0x11f0>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800968a:	4bbb      	ldr	r3, [pc, #748]	; (8009978 <PxMessagingTask+0xf94>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b10      	cmp	r3, #16
 8009690:	d000      	beq.n	8009694 <PxMessagingTask+0xcb0>
 8009692:	e5b8      	b.n	8009206 <PxMessagingTask+0x822>
 8009694:	f7ff facd 	bl	8008c32 <PxMessagingTask+0x24e>
							ClearEEportsDir();
 8009698:	f7fa f968 	bl	800396c <ClearEEportsDir>
							ClearROtopology();
 800969c:	f000 ff74 	bl	800a588 <ClearROtopology>
							osDelay(100);
 80096a0:	2064      	movs	r0, #100	; 0x64
 80096a2:	f004 fbc5 	bl	800de30 <osDelay>
							indMode =IND_TOPOLOGY;
 80096a6:	2302      	movs	r3, #2
 80096a8:	4ab5      	ldr	r2, [pc, #724]	; (8009980 <PxMessagingTask+0xf9c>)
							ACK_FLAG =1;
 80096aa:	7013      	strb	r3, [r2, #0]
 80096ac:	e49c      	b.n	8008fe8 <PxMessagingTask+0x604>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4ab4      	ldr	r2, [pc, #720]	; (8009984 <PxMessagingTask+0xfa0>)
 80096b2:	7013      	strb	r3, [r2, #0]
 80096b4:	e498      	b.n	8008fe8 <PxMessagingTask+0x604>
 80096b6:	2309      	movs	r3, #9
 80096b8:	469c      	mov	ip, r3
 80096ba:	44a4      	add	ip, r4
 80096bc:	4663      	mov	r3, ip
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	230a      	movs	r3, #10
 80096c2:	469c      	mov	ip, r3
 80096c4:	44a4      	add	ip, r4
 80096c6:	4663      	mov	r3, ip
 80096c8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ca:	230c      	movs	r3, #12
 80096cc:	4698      	mov	r8, r3
 80096ce:	3301      	adds	r3, #1
 80096d0:	469c      	mov	ip, r3
 80096d2:	44a4      	add	ip, r4
 80096d4:	4663      	mov	r3, ip
 80096d6:	930e      	str	r3, [sp, #56]	; 0x38
 80096d8:	230e      	movs	r3, #14
 80096da:	469c      	mov	ip, r3
 80096dc:	44a4      	add	ip, r4
 80096de:	4663      	mov	r3, ip
 80096e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80096e2:	230f      	movs	r3, #15
 80096e4:	469c      	mov	ip, r3
 80096e6:	44a4      	add	ip, r4
 80096e8:	0026      	movs	r6, r4
 80096ea:	4663      	mov	r3, ip
 80096ec:	44a0      	add	r8, r4
 80096ee:	360b      	adds	r6, #11
 80096f0:	9310      	str	r3, [sp, #64]	; 0x40
 80096f2:	3410      	adds	r4, #16
 80096f4:	f7ff fa2d 	bl	8008b52 <PxMessagingTask+0x16e>
									messageParams[temp] =p;
 80096f8:	4b9e      	ldr	r3, [pc, #632]	; (8009974 <PxMessagingTask+0xf90>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80096fa:	1c70      	adds	r0, r6, #1
 80096fc:	469c      	mov	ip, r3
									messageParams[temp] =p;
 80096fe:	559c      	strb	r4, [r3, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009700:	2204      	movs	r2, #4
 8009702:	0029      	movs	r1, r5
 8009704:	4460      	add	r0, ip
									temp +=5;
 8009706:	3605      	adds	r6, #5
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009708:	f00a fa3e 	bl	8013b88 <memcpy>
									temp +=5;
 800970c:	b2f6      	uxtb	r6, r6
 800970e:	f7ff fa85 	bl	8008c1c <PxMessagingTask+0x238>
								ADCSelectChannel(ADCPort,"top");
 8009712:	499d      	ldr	r1, [pc, #628]	; (8009988 <PxMessagingTask+0xfa4>)
 8009714:	f003 f942 	bl	800c99c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009718:	4b9c      	ldr	r3, [pc, #624]	; (800998c <PxMessagingTask+0xfa8>)
 800971a:	4a9c      	ldr	r2, [pc, #624]	; (800998c <PxMessagingTask+0xfa8>)
 800971c:	7a18      	ldrb	r0, [r3, #8]
 800971e:	499a      	ldr	r1, [pc, #616]	; (8009988 <PxMessagingTask+0xfa4>)
 8009720:	320c      	adds	r2, #12
 8009722:	f003 f989 	bl	800ca38 <ReadADCChannel>
 8009726:	f7ff fa0e 	bl	8008b46 <PxMessagingTask+0x162>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800972a:	9b04      	ldr	r3, [sp, #16]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d100      	bne.n	8009732 <PxMessagingTask+0xd4e>
 8009730:	e183      	b.n	8009a3a <PxMessagingTask+0x1056>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d801      	bhi.n	800973c <PxMessagingTask+0xd58>
 8009738:	f7ff fa7b 	bl	8008c32 <PxMessagingTask+0x24e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	4a94      	ldr	r2, [pc, #592]	; (8009990 <PxMessagingTask+0xfac>)
 8009740:	3b04      	subs	r3, #4
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	58d2      	ldr	r2, [r2, r3]
 8009746:	230f      	movs	r3, #15
 8009748:	498a      	ldr	r1, [pc, #552]	; (8009974 <PxMessagingTask+0xf90>)
 800974a:	4013      	ands	r3, r2
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	700b      	strb	r3, [r1, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8009750:	d101      	bne.n	8009756 <PxMessagingTask+0xd72>
 8009752:	f000 fca5 	bl	800a0a0 <PxMessagingTask+0x16bc>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009756:	2380      	movs	r3, #128	; 0x80
 8009758:	9904      	ldr	r1, [sp, #16]
 800975a:	0c12      	lsrs	r2, r2, #16
 800975c:	3901      	subs	r1, #1
 800975e:	059b      	lsls	r3, r3, #22
 8009760:	b2c9      	uxtb	r1, r1
 8009762:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 8009764:	2907      	cmp	r1, #7
 8009766:	d901      	bls.n	800976c <PxMessagingTask+0xd88>
 8009768:	f7ff fa63 	bl	8008c32 <PxMessagingTask+0x24e>
 800976c:	4889      	ldr	r0, [pc, #548]	; (8009994 <PxMessagingTask+0xfb0>)
 800976e:	0089      	lsls	r1, r1, #2
 8009770:	5841      	ldr	r1, [r0, r1]
 8009772:	468f      	mov	pc, r1
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009774:	4b88      	ldr	r3, [pc, #544]	; (8009998 <PxMessagingTask+0xfb4>)
 8009776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009778:	8818      	ldrh	r0, [r3, #0]
 800977a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800977c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800977e:	469c      	mov	ip, r3
 8009780:	4b7a      	ldr	r3, [pc, #488]	; (800996c <PxMessagingTask+0xf88>)
 8009782:	4461      	add	r1, ip
 8009784:	469c      	mov	ip, r3
 8009786:	1820      	adds	r0, r4, r0
 8009788:	4461      	add	r1, ip
 800978a:	f00a f9fd 	bl	8013b88 <memcpy>
								longMessageLastPtr =0;
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	4a81      	ldr	r2, [pc, #516]	; (8009998 <PxMessagingTask+0xfb4>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8009792:	4882      	ldr	r0, [pc, #520]	; (800999c <PxMessagingTask+0xfb8>)
								longMessageLastPtr =0;
 8009794:	8013      	strh	r3, [r2, #0]
								responseStatus =BOS_OK;
 8009796:	4a78      	ldr	r2, [pc, #480]	; (8009978 <PxMessagingTask+0xf94>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8009798:	0019      	movs	r1, r3
								responseStatus =BOS_OK;
 800979a:	7013      	strb	r3, [r2, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	001a      	movs	r2, r3
 80097a0:	f005 fe74 	bl	800f48c <xTaskGenericNotify>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80097a4:	4653      	mov	r3, sl
 80097a6:	5dda      	ldrb	r2, [r3, r7]
 80097a8:	f7ff fa15 	bl	8008bd6 <PxMessagingTask+0x1f2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80097ac:	4b7a      	ldr	r3, [pc, #488]	; (8009998 <PxMessagingTask+0xfb4>)
 80097ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097b0:	881c      	ldrh	r4, [r3, #0]
 80097b2:	4b7b      	ldr	r3, [pc, #492]	; (80099a0 <PxMessagingTask+0xfbc>)
 80097b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80097b6:	1918      	adds	r0, r3, r4
 80097b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ba:	002a      	movs	r2, r5
 80097bc:	469c      	mov	ip, r3
 80097be:	4b6b      	ldr	r3, [pc, #428]	; (800996c <PxMessagingTask+0xf88>)
 80097c0:	4461      	add	r1, ip
 80097c2:	469c      	mov	ip, r3
 80097c4:	4461      	add	r1, ip
 80097c6:	f00a f9df 	bl	8013b88 <memcpy>
								longMessageLastPtr +=numOfParams;
 80097ca:	46ac      	mov	ip, r5
 80097cc:	4464      	add	r4, ip
 80097ce:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80097d0:	2116      	movs	r1, #22
 80097d2:	0020      	movs	r0, r4
 80097d4:	f7f6 fcbc 	bl	8000150 <__udivsi3>
 80097d8:	4b72      	ldr	r3, [pc, #456]	; (80099a4 <PxMessagingTask+0xfc0>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 80097da:	0022      	movs	r2, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80097dc:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 80097de:	4970      	ldr	r1, [pc, #448]	; (80099a0 <PxMessagingTask+0xfbc>)
 80097e0:	4871      	ldr	r0, [pc, #452]	; (80099a8 <PxMessagingTask+0xfc4>)
 80097e2:	f00a f9d1 	bl	8013b88 <memcpy>
								longMessageLastPtr =0;
 80097e6:	4b6c      	ldr	r3, [pc, #432]	; (8009998 <PxMessagingTask+0xfb4>)
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	801a      	strh	r2, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80097ec:	4653      	mov	r3, sl
 80097ee:	5dda      	ldrb	r2, [r3, r7]
 80097f0:	f7ff f9f1 	bl	8008bd6 <PxMessagingTask+0x1f2>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80097f4:	4642      	mov	r2, r8
 80097f6:	4353      	muls	r3, r2
 80097f8:	4a6c      	ldr	r2, [pc, #432]	; (80099ac <PxMessagingTask+0xfc8>)
 80097fa:	486d      	ldr	r0, [pc, #436]	; (80099b0 <PxMessagingTask+0xfcc>)
 80097fc:	4694      	mov	ip, r2
 80097fe:	496d      	ldr	r1, [pc, #436]	; (80099b4 <PxMessagingTask+0xfd0>)
 8009800:	4642      	mov	r2, r8
 8009802:	4463      	add	r3, ip
 8009804:	3040      	adds	r0, #64	; 0x40
 8009806:	f00a fbb9 	bl	8013f7c <sprintf>
 800980a:	e551      	b.n	80092b0 <PxMessagingTask+0x8cc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800980c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800980e:	1da3      	adds	r3, r4, #6
 8009810:	5cce      	ldrb	r6, [r1, r3]
 8009812:	1de3      	adds	r3, r4, #7
 8009814:	5ccb      	ldrb	r3, [r1, r3]
 8009816:	0636      	lsls	r6, r6, #24
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	18f6      	adds	r6, r6, r3
 800981c:	0023      	movs	r3, r4
 800981e:	3309      	adds	r3, #9
 8009820:	5ccb      	ldrb	r3, [r1, r3]
 8009822:	18f6      	adds	r6, r6, r3
 8009824:	0023      	movs	r3, r4
 8009826:	3308      	adds	r3, #8
 8009828:	5ccb      	ldrb	r3, [r1, r3]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	18f6      	adds	r6, r6, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800982e:	23e0      	movs	r3, #224	; 0xe0
 8009830:	061b      	lsls	r3, r3, #24
 8009832:	18f2      	adds	r2, r6, r3
 8009834:	2380      	movs	r3, #128	; 0x80
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	429a      	cmp	r2, r3
 800983a:	d300      	bcc.n	800983e <PxMessagingTask+0xe5a>
 800983c:	e0d2      	b.n	80099e4 <PxMessagingTask+0x1000>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800983e:	1d63      	adds	r3, r4, #5
 8009840:	5ccb      	ldrb	r3, [r1, r3]
 8009842:	3b01      	subs	r3, #1
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b07      	cmp	r3, #7
 8009848:	d901      	bls.n	800984e <PxMessagingTask+0xe6a>
 800984a:	f7ff fbb8 	bl	8008fbe <PxMessagingTask+0x5da>
 800984e:	4a5a      	ldr	r2, [pc, #360]	; (80099b8 <PxMessagingTask+0xfd4>)
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	58d3      	ldr	r3, [r2, r3]
 8009854:	469f      	mov	pc, r3
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d001      	beq.n	8009860 <PxMessagingTask+0xe7c>
 800985c:	f7ff f9e9 	bl	8008c32 <PxMessagingTask+0x24e>
								messageParams[0] =0; /* change own ID */
 8009860:	2500      	movs	r5, #0
 8009862:	4b44      	ldr	r3, [pc, #272]	; (8009974 <PxMessagingTask+0xf90>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
								messageParams[0] =0; /* change own ID */
 8009866:	701d      	strb	r5, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009868:	1d63      	adds	r3, r4, #5
 800986a:	5cd3      	ldrb	r3, [r2, r3]
 800986c:	4941      	ldr	r1, [pc, #260]	; (8009974 <PxMessagingTask+0xf90>)
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800986e:	3406      	adds	r4, #6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009870:	704b      	strb	r3, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009872:	2303      	movs	r3, #3
 8009874:	5d10      	ldrb	r0, [r2, r4]
 8009876:	0029      	movs	r1, r5
 8009878:	002a      	movs	r2, r5
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	330d      	adds	r3, #13
 800987e:	f7fe fb6f 	bl	8007f60 <SendMessageFromPort>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009882:	4653      	mov	r3, sl
 8009884:	9504      	str	r5, [sp, #16]
 8009886:	5dda      	ldrb	r2, [r3, r7]
 8009888:	f7ff f9a5 	bl	8008bd6 <PxMessagingTask+0x1f2>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800988c:	0023      	movs	r3, r4
 800988e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009890:	3312      	adds	r3, #18
 8009892:	5cd3      	ldrb	r3, [r2, r3]
 8009894:	930c      	str	r3, [sp, #48]	; 0x30
 8009896:	2b00      	cmp	r3, #0
 8009898:	d100      	bne.n	800989c <PxMessagingTask+0xeb8>
 800989a:	e4b7      	b.n	800920c <PxMessagingTask+0x828>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800989c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989e:	340c      	adds	r4, #12
 80098a0:	5d18      	ldrb	r0, [r3, r4]
 80098a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098a4:	002a      	movs	r2, r5
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	f7fe fa66 	bl	8007d7c <SetupDMAStreams>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80098b0:	4653      	mov	r3, sl
 80098b2:	5dda      	ldrb	r2, [r3, r7]
 80098b4:	2300      	movs	r3, #0
 80098b6:	930c      	str	r3, [sp, #48]	; 0x30
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	f7ff f98c 	bl	8008bd6 <PxMessagingTask+0x1f2>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098c0:	1da3      	adds	r3, r4, #6
 80098c2:	1de2      	adds	r2, r4, #7
 80098c4:	5cc3      	ldrb	r3, [r0, r3]
 80098c6:	5c82      	ldrb	r2, [r0, r2]
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	0412      	lsls	r2, r2, #16
 80098cc:	189b      	adds	r3, r3, r2
 80098ce:	1d62      	adds	r2, r4, #5
 80098d0:	b2d1      	uxtb	r1, r2
 80098d2:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098d4:	0026      	movs	r6, r4
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098d6:	185b      	adds	r3, r3, r1
 80098d8:	0021      	movs	r1, r4
 80098da:	3108      	adds	r1, #8
 80098dc:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098de:	360b      	adds	r6, #11
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098e0:	0609      	lsls	r1, r1, #24
 80098e2:	185b      	adds	r3, r3, r1
 80098e4:	4920      	ldr	r1, [pc, #128]	; (8009968 <PxMessagingTask+0xf84>)
 80098e6:	664b      	str	r3, [r1, #100]	; 0x64
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098e8:	230a      	movs	r3, #10
 80098ea:	469c      	mov	ip, r3
 80098ec:	44a4      	add	ip, r4
 80098ee:	4663      	mov	r3, ip
 80098f0:	b2f1      	uxtb	r1, r6
 80098f2:	930a      	str	r3, [sp, #40]	; 0x28
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	5cc3      	ldrb	r3, [r0, r3]
 80098f8:	5c41      	ldrb	r1, [r0, r1]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	0409      	lsls	r1, r1, #16
 80098fe:	185b      	adds	r3, r3, r1
 8009900:	2109      	movs	r1, #9
 8009902:	468c      	mov	ip, r1
 8009904:	44a4      	add	ip, r4
 8009906:	4661      	mov	r1, ip
 8009908:	9104      	str	r1, [sp, #16]
 800990a:	b2c9      	uxtb	r1, r1
 800990c:	5c41      	ldrb	r1, [r0, r1]
 800990e:	185b      	adds	r3, r3, r1
 8009910:	210c      	movs	r1, #12
 8009912:	4688      	mov	r8, r1
 8009914:	44a0      	add	r8, r4
 8009916:	4641      	mov	r1, r8
 8009918:	b2c9      	uxtb	r1, r1
 800991a:	5c41      	ldrb	r1, [r0, r1]
 800991c:	0609      	lsls	r1, r1, #24
 800991e:	185b      	adds	r3, r3, r1
 8009920:	4911      	ldr	r1, [pc, #68]	; (8009968 <PxMessagingTask+0xf84>)
 8009922:	668b      	str	r3, [r1, #104]	; 0x68
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009924:	230e      	movs	r3, #14
 8009926:	469c      	mov	ip, r3
 8009928:	210f      	movs	r1, #15
 800992a:	44a4      	add	ip, r4
 800992c:	4663      	mov	r3, ip
 800992e:	468c      	mov	ip, r1
 8009930:	44a4      	add	ip, r4
 8009932:	4661      	mov	r1, ip
 8009934:	930f      	str	r3, [sp, #60]	; 0x3c
 8009936:	9110      	str	r1, [sp, #64]	; 0x40
 8009938:	b2db      	uxtb	r3, r3
 800993a:	b2c9      	uxtb	r1, r1
 800993c:	5cc3      	ldrb	r3, [r0, r3]
 800993e:	5c41      	ldrb	r1, [r0, r1]
 8009940:	021b      	lsls	r3, r3, #8
 8009942:	0409      	lsls	r1, r1, #16
 8009944:	185b      	adds	r3, r3, r1
 8009946:	210d      	movs	r1, #13
 8009948:	468c      	mov	ip, r1
 800994a:	44a4      	add	ip, r4
 800994c:	4661      	mov	r1, ip
 800994e:	910e      	str	r1, [sp, #56]	; 0x38
 8009950:	b2c9      	uxtb	r1, r1
 8009952:	5c41      	ldrb	r1, [r0, r1]
 8009954:	3410      	adds	r4, #16
 8009956:	185b      	adds	r3, r3, r1
 8009958:	b2e1      	uxtb	r1, r4
 800995a:	5c41      	ldrb	r1, [r0, r1]
 800995c:	0609      	lsls	r1, r1, #24
 800995e:	185b      	adds	r3, r3, r1
 8009960:	4901      	ldr	r1, [pc, #4]	; (8009968 <PxMessagingTask+0xf84>)
 8009962:	66cb      	str	r3, [r1, #108]	; 0x6c
									break;
 8009964:	f7ff f999 	bl	8008c9a <PxMessagingTask+0x2b6>
 8009968:	20001fcc 	.word	0x20001fcc
 800996c:	20000d40 	.word	0x20000d40
 8009970:	20000c60 	.word	0x20000c60
 8009974:	20000b74 	.word	0x20000b74
 8009978:	20000c74 	.word	0x20000c74
 800997c:	20000c78 	.word	0x20000c78
 8009980:	200011ef 	.word	0x200011ef
 8009984:	200011ee 	.word	0x200011ee
 8009988:	0801b134 	.word	0x0801b134
 800998c:	2000204c 	.word	0x2000204c
 8009990:	20000c80 	.word	0x20000c80
 8009994:	0801a1a4 	.word	0x0801a1a4
 8009998:	20000cfa 	.word	0x20000cfa
 800999c:	20001ed4 	.word	0x20001ed4
 80099a0:	20002068 	.word	0x20002068
 80099a4:	20000008 	.word	0x20000008
 80099a8:	20000f84 	.word	0x20000f84
 80099ac:	20000e74 	.word	0x20000e74
 80099b0:	20001f4c 	.word	0x20001f4c
 80099b4:	0801bc0c 	.word	0x0801bc0c
 80099b8:	0801a1c4 	.word	0x0801a1c4
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 80099bc:	1e5d      	subs	r5, r3, #1
 80099be:	4bef      	ldr	r3, [pc, #956]	; (8009d7c <PxMessagingTask+0x1398>)
 80099c0:	00ad      	lsls	r5, r5, #2
 80099c2:	595a      	ldr	r2, [r3, r5]
 80099c4:	4bee      	ldr	r3, [pc, #952]	; (8009d80 <PxMessagingTask+0x139c>)
 80099c6:	0c10      	lsrs	r0, r2, #16
 80099c8:	469c      	mov	ip, r3
									switch(cMessage[port - 1][1 + shift]) // requested format
 80099ca:	1d63      	adds	r3, r4, #5
 80099cc:	5cce      	ldrb	r6, [r1, r3]
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	1e73      	subs	r3, r6, #1
 80099d2:	b2db      	uxtb	r3, r3
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 80099d4:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	d900      	bls.n	80099dc <PxMessagingTask+0xff8>
 80099da:	e0e1      	b.n	8009ba0 <PxMessagingTask+0x11bc>
 80099dc:	49e9      	ldr	r1, [pc, #932]	; (8009d84 <PxMessagingTask+0x13a0>)
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	58cb      	ldr	r3, [r1, r3]
 80099e2:	469f      	mov	pc, r3
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80099e4:	23f8      	movs	r3, #248	; 0xf8
 80099e6:	2280      	movs	r2, #128	; 0x80
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	18f3      	adds	r3, r6, r3
 80099ec:	0292      	lsls	r2, r2, #10
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d200      	bcs.n	80099f4 <PxMessagingTask+0x1010>
 80099f2:	e2c5      	b.n	8009f80 <PxMessagingTask+0x159c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80099f4:	2315      	movs	r3, #21
 80099f6:	4ae4      	ldr	r2, [pc, #912]	; (8009d88 <PxMessagingTask+0x13a4>)
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	f7ff fae0 	bl	8008fbe <PxMessagingTask+0x5da>
										messageParams[0] =*(__IO int8_t* )temp32;
 80099fe:	4ae3      	ldr	r2, [pc, #908]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 8009a04:	2201      	movs	r2, #1
									SendMessageToModule(src,
 8009a06:	211f      	movs	r1, #31
 8009a08:	4640      	mov	r0, r8
 8009a0a:	f7fe fd19 	bl	8008440 <SendMessageToModule>
 8009a0e:	f7ff f98b 	bl	8008d28 <PxMessagingTask+0x344>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8009a12:	0021      	movs	r1, r4
 8009a14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a16:	310c      	adds	r1, #12
 8009a18:	5c40      	ldrb	r0, [r0, r1]
 8009a1a:	9200      	str	r2, [sp, #0]
 8009a1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a1e:	002a      	movs	r2, r5
 8009a20:	f7fe f9ac 	bl	8007d7c <SetupDMAStreams>
 8009a24:	f7ff fbb7 	bl	8009196 <PxMessagingTask+0x7b2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8009a28:	3101      	adds	r1, #1
 8009a2a:	5c70      	ldrb	r0, [r6, r1]
 8009a2c:	9200      	str	r2, [sp, #0]
 8009a2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a30:	002a      	movs	r2, r5
 8009a32:	f7fe f9a3 	bl	8007d7c <SetupDMAStreams>
 8009a36:	f7ff fba2 	bl	800917e <PxMessagingTask+0x79a>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009a3c:	1d60      	adds	r0, r4, #5
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009a3e:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009a42:	4462      	add	r2, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009a44:	469c      	mov	ip, r3
 8009a46:	4bd2      	ldr	r3, [pc, #840]	; (8009d90 <PxMessagingTask+0x13ac>)
 8009a48:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009a4a:	2500      	movs	r5, #0
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009a4c:	469c      	mov	ip, r3
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	7015      	strb	r5, [r2, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009a52:	4460      	add	r0, ip
 8009a54:	f7fa f804 	bl	8003a60 <IsModuleParameter>
 8009a58:	900c      	str	r0, [sp, #48]	; 0x30
								if(temp == 0){ // Parameter does not exist
 8009a5a:	42a8      	cmp	r0, r5
 8009a5c:	d100      	bne.n	8009a60 <PxMessagingTask+0x107c>
 8009a5e:	e16d      	b.n	8009d3c <PxMessagingTask+0x1358>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009a60:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009a62:	49cc      	ldr	r1, [pc, #816]	; (8009d94 <PxMessagingTask+0x13b0>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009a66:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	435a      	muls	r2, r3
 8009a6c:	4bc9      	ldr	r3, [pc, #804]	; (8009d94 <PxMessagingTask+0x13b0>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009a6e:	49c7      	ldr	r1, [pc, #796]	; (8009d8c <PxMessagingTask+0x13a8>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009a70:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009a72:	4462      	add	r2, ip
 8009a74:	7912      	ldrb	r2, [r2, #4]
 8009a76:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009a78:	3a01      	subs	r2, #1
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	2a07      	cmp	r2, #7
 8009a7e:	d900      	bls.n	8009a82 <PxMessagingTask+0x109e>
 8009a80:	e384      	b.n	800a18c <PxMessagingTask+0x17a8>
 8009a82:	49c5      	ldr	r1, [pc, #788]	; (8009d98 <PxMessagingTask+0x13b4>)
 8009a84:	0092      	lsls	r2, r2, #2
 8009a86:	588a      	ldr	r2, [r1, r2]
 8009a88:	4697      	mov	pc, r2
								for(p =1; p <= NumOfPorts; p++){
 8009a8a:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 8009a8c:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 8009a8e:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 8009a90:	0029      	movs	r1, r5
								for(p =1; p <= NumOfPorts; p++){
 8009a92:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 8009a94:	f004 f842 	bl	800db1c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009a98:	2c06      	cmp	r4, #6
 8009a9a:	d1f7      	bne.n	8009a8c <PxMessagingTask+0x10a8>
 8009a9c:	e708      	b.n	80098b0 <PxMessagingTask+0xecc>
								temp =cMessage[port - 1][13 + shift];
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	469c      	mov	ip, r3
 8009aa2:	44a4      	add	ip, r4
 8009aa4:	4663      	mov	r3, ip
 8009aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	5cd3      	ldrb	r3, [r2, r3]
							if(numOfParams == 17)
 8009aae:	f7ff fb2b 	bl	8009108 <PxMessagingTask+0x724>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ab6:	1a9a      	subs	r2, r3, r2
 8009ab8:	3a02      	subs	r2, #2
 8009aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009abe:	469c      	mov	ip, r3
 8009ac0:	4bb3      	ldr	r3, [pc, #716]	; (8009d90 <PxMessagingTask+0x13ac>)
 8009ac2:	4461      	add	r1, ip
 8009ac4:	469c      	mov	ip, r3
 8009ac6:	4461      	add	r1, ip
 8009ac8:	f00a f85e 	bl	8013b88 <memcpy>
 8009acc:	e579      	b.n	80095c2 <PxMessagingTask+0xbde>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009ace:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ad0:	1da3      	adds	r3, r4, #6
 8009ad2:	1de2      	adds	r2, r4, #7
 8009ad4:	5cc3      	ldrb	r3, [r0, r3]
 8009ad6:	5c82      	ldrb	r2, [r0, r2]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	0412      	lsls	r2, r2, #16
 8009adc:	189b      	adds	r3, r3, r2
 8009ade:	1d62      	adds	r2, r4, #5
 8009ae0:	b2d1      	uxtb	r1, r2
 8009ae2:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009ae4:	0026      	movs	r6, r4
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009ae6:	185b      	adds	r3, r3, r1
 8009ae8:	0021      	movs	r1, r4
 8009aea:	3108      	adds	r1, #8
 8009aec:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009aee:	360b      	adds	r6, #11
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009af0:	0609      	lsls	r1, r1, #24
 8009af2:	185b      	adds	r3, r3, r1
 8009af4:	49a9      	ldr	r1, [pc, #676]	; (8009d9c <PxMessagingTask+0x13b8>)
 8009af6:	670b      	str	r3, [r1, #112]	; 0x70
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009af8:	230a      	movs	r3, #10
 8009afa:	469c      	mov	ip, r3
 8009afc:	44a4      	add	ip, r4
 8009afe:	4663      	mov	r3, ip
 8009b00:	b2f1      	uxtb	r1, r6
 8009b02:	930a      	str	r3, [sp, #40]	; 0x28
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	5cc3      	ldrb	r3, [r0, r3]
 8009b08:	5c41      	ldrb	r1, [r0, r1]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	0409      	lsls	r1, r1, #16
 8009b0e:	185b      	adds	r3, r3, r1
 8009b10:	2109      	movs	r1, #9
 8009b12:	468c      	mov	ip, r1
 8009b14:	44a4      	add	ip, r4
 8009b16:	4661      	mov	r1, ip
 8009b18:	9104      	str	r1, [sp, #16]
 8009b1a:	b2c9      	uxtb	r1, r1
 8009b1c:	5c41      	ldrb	r1, [r0, r1]
 8009b1e:	185b      	adds	r3, r3, r1
 8009b20:	210c      	movs	r1, #12
 8009b22:	4688      	mov	r8, r1
 8009b24:	44a0      	add	r8, r4
 8009b26:	4641      	mov	r1, r8
 8009b28:	b2c9      	uxtb	r1, r1
 8009b2a:	5c41      	ldrb	r1, [r0, r1]
 8009b2c:	0609      	lsls	r1, r1, #24
 8009b2e:	185b      	adds	r3, r3, r1
 8009b30:	499a      	ldr	r1, [pc, #616]	; (8009d9c <PxMessagingTask+0x13b8>)
 8009b32:	674b      	str	r3, [r1, #116]	; 0x74
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009b34:	230e      	movs	r3, #14
 8009b36:	469c      	mov	ip, r3
 8009b38:	210f      	movs	r1, #15
 8009b3a:	44a4      	add	ip, r4
 8009b3c:	4663      	mov	r3, ip
 8009b3e:	468c      	mov	ip, r1
 8009b40:	44a4      	add	ip, r4
 8009b42:	4661      	mov	r1, ip
 8009b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b46:	9110      	str	r1, [sp, #64]	; 0x40
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	b2c9      	uxtb	r1, r1
 8009b4c:	5cc3      	ldrb	r3, [r0, r3]
 8009b4e:	5c41      	ldrb	r1, [r0, r1]
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	0409      	lsls	r1, r1, #16
 8009b54:	185b      	adds	r3, r3, r1
 8009b56:	210d      	movs	r1, #13
 8009b58:	468c      	mov	ip, r1
 8009b5a:	44a4      	add	ip, r4
 8009b5c:	4661      	mov	r1, ip
 8009b5e:	910e      	str	r1, [sp, #56]	; 0x38
 8009b60:	b2c9      	uxtb	r1, r1
 8009b62:	5c41      	ldrb	r1, [r0, r1]
 8009b64:	3410      	adds	r4, #16
 8009b66:	185b      	adds	r3, r3, r1
 8009b68:	b2e1      	uxtb	r1, r4
 8009b6a:	5c41      	ldrb	r1, [r0, r1]
 8009b6c:	0609      	lsls	r1, r1, #24
 8009b6e:	185b      	adds	r3, r3, r1
 8009b70:	498a      	ldr	r1, [pc, #552]	; (8009d9c <PxMessagingTask+0x13b8>)
 8009b72:	678b      	str	r3, [r1, #120]	; 0x78
									break;
 8009b74:	f7ff f891 	bl	8008c9a <PxMessagingTask+0x2b6>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009b78:	0713      	lsls	r3, r2, #28
 8009b7a:	d100      	bne.n	8009b7e <PxMessagingTask+0x119a>
 8009b7c:	e292      	b.n	800a0a4 <PxMessagingTask+0x16c0>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b80:	1de3      	adds	r3, r4, #7
 8009b82:	5ccb      	ldrb	r3, [r1, r3]
 8009b84:	1da2      	adds	r2, r4, #6
 8009b86:	5c8a      	ldrb	r2, [r1, r2]
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	189b      	adds	r3, r3, r2
 8009b8c:	0022      	movs	r2, r4
 8009b8e:	3208      	adds	r2, #8
 8009b90:	5c8a      	ldrb	r2, [r1, r2]
 8009b92:	0412      	lsls	r2, r2, #16
 8009b94:	3409      	adds	r4, #9
 8009b96:	189b      	adds	r3, r3, r2
 8009b98:	5d0a      	ldrb	r2, [r1, r4]
 8009b9a:	0612      	lsls	r2, r2, #24
 8009b9c:	189b      	adds	r3, r3, r2
 8009b9e:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ba2:	9804      	ldr	r0, [sp, #16]
 8009ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba6:	4a75      	ldr	r2, [pc, #468]	; (8009d7c <PxMessagingTask+0x1398>)
 8009ba8:	5ccb      	ldrb	r3, [r1, r3]
 8009baa:	5c09      	ldrb	r1, [r1, r0]
 8009bac:	200f      	movs	r0, #15
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d2      	ldr	r2, [r2, r3]
 8009bb4:	4010      	ands	r0, r2
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d101      	bne.n	8009bbe <PxMessagingTask+0x11da>
 8009bba:	f7ff fa00 	bl	8008fbe <PxMessagingTask+0x5da>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009bbe:	4878      	ldr	r0, [pc, #480]	; (8009da0 <PxMessagingTask+0x13bc>)
 8009bc0:	4684      	mov	ip, r0
 8009bc2:	4461      	add	r1, ip
 8009bc4:	400a      	ands	r2, r1
 8009bc6:	496d      	ldr	r1, [pc, #436]	; (8009d7c <PxMessagingTask+0x1398>)
 8009bc8:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009bca:	2314      	movs	r3, #20
 8009bcc:	4a6e      	ldr	r2, [pc, #440]	; (8009d88 <PxMessagingTask+0x13a4>)
 8009bce:	7013      	strb	r3, [r2, #0]
 8009bd0:	f7ff f9f5 	bl	8008fbe <PxMessagingTask+0x5da>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009bd4:	2a01      	cmp	r2, #1
 8009bd6:	d900      	bls.n	8009bda <PxMessagingTask+0x11f6>
 8009bd8:	e557      	b.n	800968a <PxMessagingTask+0xca6>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bde:	5c9b      	ldrb	r3, [r3, r2]
 8009be0:	4a70      	ldr	r2, [pc, #448]	; (8009da4 <PxMessagingTask+0x13c0>)
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d900      	bls.n	8009bec <PxMessagingTask+0x1208>
 8009bea:	e54e      	b.n	800968a <PxMessagingTask+0xca6>
 8009bec:	4a6e      	ldr	r2, [pc, #440]	; (8009da8 <PxMessagingTask+0x13c4>)
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	58d3      	ldr	r3, [r2, r3]
 8009bf2:	469f      	mov	pc, r3
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009bf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009bf6:	1da3      	adds	r3, r4, #6
 8009bf8:	1de2      	adds	r2, r4, #7
 8009bfa:	5cc3      	ldrb	r3, [r0, r3]
 8009bfc:	5c82      	ldrb	r2, [r0, r2]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	0412      	lsls	r2, r2, #16
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	1d62      	adds	r2, r4, #5
 8009c06:	b2d1      	uxtb	r1, r2
 8009c08:	5c41      	ldrb	r1, [r0, r1]
 8009c0a:	185b      	adds	r3, r3, r1
 8009c0c:	0021      	movs	r1, r4
 8009c0e:	3108      	adds	r1, #8
 8009c10:	5c41      	ldrb	r1, [r0, r1]
 8009c12:	0609      	lsls	r1, r1, #24
 8009c14:	185b      	adds	r3, r3, r1
 8009c16:	4961      	ldr	r1, [pc, #388]	; (8009d9c <PxMessagingTask+0x13b8>)
 8009c18:	67cb      	str	r3, [r1, #124]	; 0x7c
 8009c1a:	f7ff f81f 	bl	8008c5c <PxMessagingTask+0x278>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8009c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c20:	3a01      	subs	r2, #1
 8009c22:	e74a      	b.n	8009aba <PxMessagingTask+0x10d6>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c26:	1da3      	adds	r3, r4, #6
 8009c28:	5cd3      	ldrb	r3, [r2, r3]
 8009c2a:	3405      	adds	r4, #5
 8009c2c:	5d12      	ldrb	r2, [r2, r4]
 8009c2e:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009c30:	189b      	adds	r3, r3, r2
 8009c32:	4a5e      	ldr	r2, [pc, #376]	; (8009dac <PxMessagingTask+0x13c8>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	17db      	asrs	r3, r3, #31
 8009c38:	6053      	str	r3, [r2, #4]
										break;
 8009c3a:	e526      	b.n	800968a <PxMessagingTask+0xca6>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c3e:	1da3      	adds	r3, r4, #6
 8009c40:	1de2      	adds	r2, r4, #7
 8009c42:	5ccb      	ldrb	r3, [r1, r3]
 8009c44:	5c8a      	ldrb	r2, [r1, r2]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	0412      	lsls	r2, r2, #16
 8009c4a:	189b      	adds	r3, r3, r2
 8009c4c:	1d62      	adds	r2, r4, #5
 8009c4e:	5c8a      	ldrb	r2, [r1, r2]
 8009c50:	3408      	adds	r4, #8
 8009c52:	189b      	adds	r3, r3, r2
 8009c54:	5d0a      	ldrb	r2, [r1, r4]
 8009c56:	0612      	lsls	r2, r2, #24
 8009c58:	189b      	adds	r3, r3, r2
 8009c5a:	4a54      	ldr	r2, [pc, #336]	; (8009dac <PxMessagingTask+0x13c8>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6053      	str	r3, [r2, #4]
										break;
 8009c62:	e512      	b.n	800968a <PxMessagingTask+0xca6>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c66:	3405      	adds	r4, #5
 8009c68:	5d1b      	ldrb	r3, [r3, r4]
 8009c6a:	4a50      	ldr	r2, [pc, #320]	; (8009dac <PxMessagingTask+0x13c8>)
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6053      	str	r3, [r2, #4]
										break;
 8009c72:	e50a      	b.n	800968a <PxMessagingTask+0xca6>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009c74:	881a      	ldrh	r2, [r3, #0]
 8009c76:	4945      	ldr	r1, [pc, #276]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009c78:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009c7a:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009c7c:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	704b      	strb	r3, [r1, #1]
										SendMessageToModule(src,
 8009c82:	e6c0      	b.n	8009a06 <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009c84:	881a      	ldrh	r2, [r3, #0]
 8009c86:	4941      	ldr	r1, [pc, #260]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009c88:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009c8a:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009c8c:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	121b      	asrs	r3, r3, #8
 8009c92:	704b      	strb	r3, [r1, #1]
										SendMessageToModule(src,
 8009c94:	e6b7      	b.n	8009a06 <PxMessagingTask+0x1022>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	493c      	ldr	r1, [pc, #240]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009c9a:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009c9c:	785a      	ldrb	r2, [r3, #1]
 8009c9e:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009ca0:	789a      	ldrb	r2, [r3, #2]
 8009ca2:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009ca4:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 8009ca6:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009ca8:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009caa:	e6ac      	b.n	8009a06 <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4937      	ldr	r1, [pc, #220]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009cb0:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	1212      	asrs	r2, r2, #8
 8009cb6:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	1412      	asrs	r2, r2, #16
 8009cbc:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009cbe:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009cc0:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009cc2:	161b      	asrs	r3, r3, #24
 8009cc4:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009cc6:	e69e      	b.n	8009a06 <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4930      	ldr	r1, [pc, #192]	; (8009d8c <PxMessagingTask+0x13a8>)
 8009ccc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	0a12      	lsrs	r2, r2, #8
 8009cd2:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	0c12      	lsrs	r2, r2, #16
 8009cd8:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009cda:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009cdc:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009cde:	0e1b      	lsrs	r3, r3, #24
 8009ce0:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009ce2:	e690      	b.n	8009a06 <PxMessagingTask+0x1022>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce6:	340a      	adds	r4, #10
 8009ce8:	5d1b      	ldrb	r3, [r3, r4]
 8009cea:	7033      	strb	r3, [r6, #0]
											break;
 8009cec:	f7ff f967 	bl	8008fbe <PxMessagingTask+0x5da>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009cf0:	0713      	lsls	r3, r2, #28
 8009cf2:	d100      	bne.n	8009cf6 <PxMessagingTask+0x1312>
 8009cf4:	e1ee      	b.n	800a0d4 <PxMessagingTask+0x16f0>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cf8:	3406      	adds	r4, #6
 8009cfa:	5d1b      	ldrb	r3, [r3, r4]
 8009cfc:	7003      	strb	r3, [r0, #0]
 8009cfe:	e74f      	b.n	8009ba0 <PxMessagingTask+0x11bc>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009d00:	2310      	movs	r3, #16
 8009d02:	4a21      	ldr	r2, [pc, #132]	; (8009d88 <PxMessagingTask+0x13a4>)
 8009d04:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009d06:	4653      	mov	r3, sl
 8009d08:	5dda      	ldrb	r2, [r3, r7]
 8009d0a:	f7fe ff64 	bl	8008bd6 <PxMessagingTask+0x1f2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d10:	1da3      	adds	r3, r4, #6
 8009d12:	1d62      	adds	r2, r4, #5
 8009d14:	5ccb      	ldrb	r3, [r1, r3]
 8009d16:	5c8a      	ldrb	r2, [r1, r2]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	1de2      	adds	r2, r4, #7
 8009d1e:	5c8a      	ldrb	r2, [r1, r2]
 8009d20:	3408      	adds	r4, #8
 8009d22:	0412      	lsls	r2, r2, #16
 8009d24:	189b      	adds	r3, r3, r2
 8009d26:	5d0a      	ldrb	r2, [r1, r4]
 8009d28:	0612      	lsls	r2, r2, #24
 8009d2a:	e781      	b.n	8009c30 <PxMessagingTask+0x124c>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2e:	3405      	adds	r4, #5
 8009d30:	571b      	ldrsb	r3, [r3, r4]
 8009d32:	4a1e      	ldr	r2, [pc, #120]	; (8009dac <PxMessagingTask+0x13c8>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	17db      	asrs	r3, r3, #31
 8009d38:	6053      	str	r3, [r2, #4]
										break;
 8009d3a:	e4a6      	b.n	800968a <PxMessagingTask+0xca6>
									SendMessageToModule(src,
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	211f      	movs	r1, #31
 8009d40:	4640      	mov	r0, r8
 8009d42:	f7fe fb7d 	bl	8008440 <SendMessageToModule>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009d46:	4653      	mov	r3, sl
 8009d48:	5dda      	ldrb	r2, [r3, r7]
 8009d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	f7fe ff42 	bl	8008bd6 <PxMessagingTask+0x1f2>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009d52:	0023      	movs	r3, r4
 8009d54:	0022      	movs	r2, r4
 8009d56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d58:	330b      	adds	r3, #11
 8009d5a:	5ccb      	ldrb	r3, [r1, r3]
 8009d5c:	320a      	adds	r2, #10
 8009d5e:	5c8a      	ldrb	r2, [r1, r2]
 8009d60:	021b      	lsls	r3, r3, #8
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	0022      	movs	r2, r4
 8009d66:	320c      	adds	r2, #12
 8009d68:	5c8a      	ldrb	r2, [r1, r2]
 8009d6a:	0412      	lsls	r2, r2, #16
 8009d6c:	340d      	adds	r4, #13
 8009d6e:	189b      	adds	r3, r3, r2
 8009d70:	5d0a      	ldrb	r2, [r1, r4]
 8009d72:	0612      	lsls	r2, r2, #24
 8009d74:	189b      	adds	r3, r3, r2
 8009d76:	6033      	str	r3, [r6, #0]
											break;
 8009d78:	f7ff f921 	bl	8008fbe <PxMessagingTask+0x5da>
 8009d7c:	20000c80 	.word	0x20000c80
 8009d80:	20010000 	.word	0x20010000
 8009d84:	0801a1e4 	.word	0x0801a1e4
 8009d88:	20000c74 	.word	0x20000c74
 8009d8c:	20000b74 	.word	0x20000b74
 8009d90:	20000d40 	.word	0x20000d40
 8009d94:	20000098 	.word	0x20000098
 8009d98:	0801a204 	.word	0x0801a204
 8009d9c:	20001fcc 	.word	0x20001fcc
 8009da0:	0000fff0 	.word	0x0000fff0
 8009da4:	20000032 	.word	0x20000032
 8009da8:	0801a224 	.word	0x0801a224
 8009dac:	20000c78 	.word	0x20000c78
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009db0:	0023      	movs	r3, r4
 8009db2:	0022      	movs	r2, r4
 8009db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009db6:	330b      	adds	r3, #11
 8009db8:	320c      	adds	r2, #12
 8009dba:	5ccb      	ldrb	r3, [r1, r3]
 8009dbc:	5c8a      	ldrb	r2, [r1, r2]
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	0412      	lsls	r2, r2, #16
 8009dc2:	189b      	adds	r3, r3, r2
 8009dc4:	0022      	movs	r2, r4
 8009dc6:	320a      	adds	r2, #10
 8009dc8:	5c8a      	ldrb	r2, [r1, r2]
 8009dca:	e7cf      	b.n	8009d6c <PxMessagingTask+0x1388>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009dcc:	0023      	movs	r3, r4
 8009dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd0:	330b      	adds	r3, #11
 8009dd2:	5cca      	ldrb	r2, [r1, r3]
 8009dd4:	340a      	adds	r4, #10
 8009dd6:	5d0b      	ldrb	r3, [r1, r4]
 8009dd8:	0212      	lsls	r2, r2, #8
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	8033      	strh	r3, [r6, #0]
											break;
 8009de0:	f7ff f8ed 	bl	8008fbe <PxMessagingTask+0x5da>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009de4:	0023      	movs	r3, r4
 8009de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009de8:	330b      	adds	r3, #11
 8009dea:	5cca      	ldrb	r2, [r1, r3]
 8009dec:	340a      	adds	r4, #10
 8009dee:	5d0b      	ldrb	r3, [r1, r4]
 8009df0:	0212      	lsls	r2, r2, #8
 8009df2:	189b      	adds	r3, r3, r2
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	8033      	strh	r3, [r6, #0]
											break;
 8009df8:	f7ff f8e1 	bl	8008fbe <PxMessagingTask+0x5da>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009dfc:	0023      	movs	r3, r4
 8009dfe:	0022      	movs	r2, r4
 8009e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e02:	330b      	adds	r3, #11
 8009e04:	320c      	adds	r2, #12
 8009e06:	5ccb      	ldrb	r3, [r1, r3]
 8009e08:	5c8a      	ldrb	r2, [r1, r2]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	0412      	lsls	r2, r2, #16
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	0022      	movs	r2, r4
 8009e12:	320a      	adds	r2, #10
 8009e14:	5c8a      	ldrb	r2, [r1, r2]
 8009e16:	340d      	adds	r4, #13
 8009e18:	189b      	adds	r3, r3, r2
 8009e1a:	5d0a      	ldrb	r2, [r1, r4]
 8009e1c:	49de      	ldr	r1, [pc, #888]	; (800a198 <PxMessagingTask+0x17b4>)
 8009e1e:	0612      	lsls	r2, r2, #24
 8009e20:	189b      	adds	r3, r3, r2
 8009e22:	4add      	ldr	r2, [pc, #884]	; (800a198 <PxMessagingTask+0x17b4>)
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	2200      	movs	r2, #0
 8009e28:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009e2a:	6033      	str	r3, [r6, #0]
											break;
 8009e2c:	f7ff f8c7 	bl	8008fbe <PxMessagingTask+0x5da>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e32:	340a      	adds	r4, #10
 8009e34:	571b      	ldrsb	r3, [r3, r4]
 8009e36:	7033      	strb	r3, [r6, #0]
											break;
 8009e38:	f7ff f8c1 	bl	8008fbe <PxMessagingTask+0x5da>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e3c:	0713      	lsls	r3, r2, #28
 8009e3e:	d100      	bne.n	8009e42 <PxMessagingTask+0x145e>
 8009e40:	e15c      	b.n	800a0fc <PxMessagingTask+0x1718>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e44:	3406      	adds	r4, #6
 8009e46:	571b      	ldrsb	r3, [r3, r4]
 8009e48:	7003      	strb	r3, [r0, #0]
 8009e4a:	e6a9      	b.n	8009ba0 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e4c:	0713      	lsls	r3, r2, #28
 8009e4e:	d100      	bne.n	8009e52 <PxMessagingTask+0x146e>
 8009e50:	e15e      	b.n	800a110 <PxMessagingTask+0x172c>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009e52:	0022      	movs	r2, r4
 8009e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e56:	1de3      	adds	r3, r4, #7
 8009e58:	3208      	adds	r2, #8
 8009e5a:	5ccb      	ldrb	r3, [r1, r3]
 8009e5c:	5c8a      	ldrb	r2, [r1, r2]
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	0412      	lsls	r2, r2, #16
 8009e62:	189b      	adds	r3, r3, r2
 8009e64:	1da2      	adds	r2, r4, #6
 8009e66:	5c8a      	ldrb	r2, [r1, r2]
 8009e68:	3409      	adds	r4, #9
 8009e6a:	189b      	adds	r3, r3, r2
 8009e6c:	5d0a      	ldrb	r2, [r1, r4]
 8009e6e:	49ca      	ldr	r1, [pc, #808]	; (800a198 <PxMessagingTask+0x17b4>)
 8009e70:	0612      	lsls	r2, r2, #24
 8009e72:	189b      	adds	r3, r3, r2
 8009e74:	4ac8      	ldr	r2, [pc, #800]	; (800a198 <PxMessagingTask+0x17b4>)
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	e68f      	b.n	8009ba0 <PxMessagingTask+0x11bc>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009e80:	4ac6      	ldr	r2, [pc, #792]	; (800a19c <PxMessagingTask+0x17b8>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 8009e84:	211f      	movs	r1, #31
											messageParams[1] =*(__IO int8_t* )temp32;
 8009e86:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009e88:	2202      	movs	r2, #2
 8009e8a:	f7fe fecf 	bl	8008c2c <PxMessagingTask+0x248>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e8e:	0713      	lsls	r3, r2, #28
 8009e90:	d100      	bne.n	8009e94 <PxMessagingTask+0x14b0>
 8009e92:	e129      	b.n	800a0e8 <PxMessagingTask+0x1704>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e96:	1de3      	adds	r3, r4, #7
 8009e98:	5cca      	ldrb	r2, [r1, r3]
 8009e9a:	3406      	adds	r4, #6
 8009e9c:	5d0b      	ldrb	r3, [r1, r4]
 8009e9e:	0212      	lsls	r2, r2, #8
 8009ea0:	189b      	adds	r3, r3, r2
 8009ea2:	b21b      	sxth	r3, r3
 8009ea4:	8003      	strh	r3, [r0, #0]
 8009ea6:	e67b      	b.n	8009ba0 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009ea8:	0713      	lsls	r3, r2, #28
 8009eaa:	d100      	bne.n	8009eae <PxMessagingTask+0x14ca>
 8009eac:	e13a      	b.n	800a124 <PxMessagingTask+0x1740>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009eae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eb0:	1de3      	adds	r3, r4, #7
 8009eb2:	5cca      	ldrb	r2, [r1, r3]
 8009eb4:	3406      	adds	r4, #6
 8009eb6:	5d0b      	ldrb	r3, [r1, r4]
 8009eb8:	0212      	lsls	r2, r2, #8
 8009eba:	189b      	adds	r3, r3, r2
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	8003      	strh	r3, [r0, #0]
 8009ec0:	e66e      	b.n	8009ba0 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009ec2:	0713      	lsls	r3, r2, #28
 8009ec4:	d100      	bne.n	8009ec8 <PxMessagingTask+0x14e4>
 8009ec6:	e0f7      	b.n	800a0b8 <PxMessagingTask+0x16d4>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009ec8:	0022      	movs	r2, r4
 8009eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ecc:	1de3      	adds	r3, r4, #7
 8009ece:	3208      	adds	r2, #8
 8009ed0:	5ccb      	ldrb	r3, [r1, r3]
 8009ed2:	5c8a      	ldrb	r2, [r1, r2]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	0412      	lsls	r2, r2, #16
 8009ed8:	189b      	adds	r3, r3, r2
 8009eda:	1da2      	adds	r2, r4, #6
 8009edc:	5c8a      	ldrb	r2, [r1, r2]
 8009ede:	e659      	b.n	8009b94 <PxMessagingTask+0x11b0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	49ae      	ldr	r1, [pc, #696]	; (800a19c <PxMessagingTask+0x17b8>)
 8009ee4:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009ee6:	4bae      	ldr	r3, [pc, #696]	; (800a1a0 <PxMessagingTask+0x17bc>)
 8009ee8:	18d3      	adds	r3, r2, r3
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009eee:	4bad      	ldr	r3, [pc, #692]	; (800a1a4 <PxMessagingTask+0x17c0>)
 8009ef0:	18d3      	adds	r3, r2, r3
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009ef6:	4bac      	ldr	r3, [pc, #688]	; (800a1a8 <PxMessagingTask+0x17c4>)
 8009ef8:	469c      	mov	ip, r3
 8009efa:	4462      	add	r2, ip
 8009efc:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 8009efe:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009f00:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009f02:	211f      	movs	r1, #31
 8009f04:	f7fe fe92 	bl	8008c2c <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	49a4      	ldr	r1, [pc, #656]	; (800a19c <PxMessagingTask+0x17b8>)
 8009f0c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	0a12      	lsrs	r2, r2, #8
 8009f12:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	0c12      	lsrs	r2, r2, #16
 8009f18:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009f1a:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009f1c:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009f1e:	0e1b      	lsrs	r3, r3, #24
 8009f20:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009f22:	211f      	movs	r1, #31
 8009f24:	f7fe fe82 	bl	8008c2c <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009f28:	881a      	ldrh	r2, [r3, #0]
 8009f2a:	499c      	ldr	r1, [pc, #624]	; (800a19c <PxMessagingTask+0x17b8>)
 8009f2c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009f2e:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 8009f30:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	121b      	asrs	r3, r3, #8
 8009f36:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 8009f38:	211f      	movs	r1, #31
 8009f3a:	f7fe fe77 	bl	8008c2c <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009f3e:	881a      	ldrh	r2, [r3, #0]
 8009f40:	4996      	ldr	r1, [pc, #600]	; (800a19c <PxMessagingTask+0x17b8>)
 8009f42:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009f44:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 8009f46:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 8009f4c:	211f      	movs	r1, #31
 8009f4e:	f7fe fe6d 	bl	8008c2c <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	4991      	ldr	r1, [pc, #580]	; (800a19c <PxMessagingTask+0x17b8>)
 8009f56:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	1212      	asrs	r2, r2, #8
 8009f5c:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	1412      	asrs	r2, r2, #16
 8009f62:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009f64:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009f66:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009f68:	161b      	asrs	r3, r3, #24
 8009f6a:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009f6c:	211f      	movs	r1, #31
 8009f6e:	f7fe fe5d 	bl	8008c2c <PxMessagingTask+0x248>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f72:	4653      	mov	r3, sl
 8009f74:	5dda      	ldrb	r2, [r3, r7]
							temp =temp32 =0;
 8009f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f78:	930c      	str	r3, [sp, #48]	; 0x30
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	f7fe fe2b 	bl	8008bd6 <PxMessagingTask+0x1f2>
									HAL_FLASH_Unlock();
 8009f80:	f007 f896 	bl	80110b0 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009f84:	2d22      	cmp	r5, #34	; 0x22
 8009f86:	d100      	bne.n	8009f8a <PxMessagingTask+0x15a6>
 8009f88:	e0a0      	b.n	800a0cc <PxMessagingTask+0x16e8>
									if(responseStatus == BOS_OK){
 8009f8a:	4b88      	ldr	r3, [pc, #544]	; (800a1ac <PxMessagingTask+0x17c8>)
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d111      	bne.n	8009fb6 <PxMessagingTask+0x15d2>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009f92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f94:	1d63      	adds	r3, r4, #5
 8009f96:	5cd3      	ldrb	r3, [r2, r3]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b07      	cmp	r3, #7
 8009f9e:	d80a      	bhi.n	8009fb6 <PxMessagingTask+0x15d2>
 8009fa0:	4a83      	ldr	r2, [pc, #524]	; (800a1b0 <PxMessagingTask+0x17cc>)
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	58d3      	ldr	r3, [r2, r3]
 8009fa6:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009fa8:	6833      	ldr	r3, [r6, #0]
 8009faa:	3301      	adds	r3, #1
 8009fac:	d100      	bne.n	8009fb0 <PxMessagingTask+0x15cc>
 8009fae:	e109      	b.n	800a1c4 <PxMessagingTask+0x17e0>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009fb0:	2316      	movs	r3, #22
 8009fb2:	4a7e      	ldr	r2, [pc, #504]	; (800a1ac <PxMessagingTask+0x17c8>)
 8009fb4:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 8009fb6:	f007 f88d 	bl	80110d4 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <PxMessagingTask+0x15e0>
 8009fc0:	f7fe fffd 	bl	8008fbe <PxMessagingTask+0x5da>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009fc4:	2316      	movs	r3, #22
 8009fc6:	4a79      	ldr	r2, [pc, #484]	; (800a1ac <PxMessagingTask+0x17c8>)
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	f7fe fff8 	bl	8008fbe <PxMessagingTask+0x5da>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009fce:	8832      	ldrh	r2, [r6, #0]
 8009fd0:	4b78      	ldr	r3, [pc, #480]	; (800a1b4 <PxMessagingTask+0x17d0>)
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d1ec      	bne.n	8009fb0 <PxMessagingTask+0x15cc>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009fd6:	0023      	movs	r3, r4
 8009fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fda:	330b      	adds	r3, #11
 8009fdc:	5cca      	ldrb	r2, [r1, r3]
 8009fde:	340a      	adds	r4, #10
 8009fe0:	5d0b      	ldrb	r3, [r1, r4]
 8009fe2:	0212      	lsls	r2, r2, #8
 8009fe4:	18d2      	adds	r2, r2, r3
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	496b      	ldr	r1, [pc, #428]	; (800a198 <PxMessagingTask+0x17b4>)
													status =HAL_FLASH_Program(
 8009fea:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009fec:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009fee:	0031      	movs	r1, r6
 8009ff0:	f007 f8be 	bl	8011170 <HAL_FLASH_Program>
 8009ff4:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 8009ff6:	e7de      	b.n	8009fb6 <PxMessagingTask+0x15d2>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009ff8:	8832      	ldrh	r2, [r6, #0]
 8009ffa:	4b6e      	ldr	r3, [pc, #440]	; (800a1b4 <PxMessagingTask+0x17d0>)
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d1d7      	bne.n	8009fb0 <PxMessagingTask+0x15cc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800a000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a002:	340a      	adds	r4, #10
 800a004:	5d1a      	ldrb	r2, [r3, r4]
 800a006:	e7ee      	b.n	8009fe6 <PxMessagingTask+0x1602>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a008:	0023      	movs	r3, r4
 800a00a:	4666      	mov	r6, ip
 800a00c:	46c1      	mov	r9, r8
 800a00e:	4688      	mov	r8, r1
 800a010:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a012:	330c      	adds	r3, #12
 800a014:	5ce9      	ldrb	r1, [r5, r3]
 800a016:	20e4      	movs	r0, #228	; 0xe4
 800a018:	0017      	movs	r7, r2
 800a01a:	f001 fcd3 	bl	800b9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a020:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a022:	5ceb      	ldrb	r3, [r5, r3]
 800a024:	5c69      	ldrb	r1, [r5, r1]
 800a026:	021b      	lsls	r3, r3, #8
 800a028:	18c9      	adds	r1, r1, r3
 800a02a:	b289      	uxth	r1, r1
 800a02c:	20e5      	movs	r0, #229	; 0xe5
 800a02e:	f001 fcc9 	bl	800b9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a034:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a036:	5ceb      	ldrb	r3, [r5, r3]
 800a038:	5c69      	ldrb	r1, [r5, r1]
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	18c9      	adds	r1, r1, r3
 800a03e:	b289      	uxth	r1, r1
 800a040:	20e6      	movs	r0, #230	; 0xe6
 800a042:	f001 fcbf 	bl	800b9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a048:	5da9      	ldrb	r1, [r5, r6]
 800a04a:	5ceb      	ldrb	r3, [r5, r3]
 800a04c:	20e7      	movs	r0, #231	; 0xe7
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	18c9      	adds	r1, r1, r3
 800a052:	b289      	uxth	r1, r1
 800a054:	f001 fcb6 	bl	800b9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a058:	4642      	mov	r2, r8
 800a05a:	5deb      	ldrb	r3, [r5, r7]
 800a05c:	5ca9      	ldrb	r1, [r5, r2]
 800a05e:	021b      	lsls	r3, r3, #8
 800a060:	18c9      	adds	r1, r1, r3
 800a062:	b289      	uxth	r1, r1
 800a064:	20e8      	movs	r0, #232	; 0xe8
 800a066:	f001 fcad 	bl	800b9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a06a:	0023      	movs	r3, r4
 800a06c:	0022      	movs	r2, r4
 800a06e:	330d      	adds	r3, #13
 800a070:	5ceb      	ldrb	r3, [r5, r3]
 800a072:	320e      	adds	r2, #14
 800a074:	5ca9      	ldrb	r1, [r5, r2]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	18c9      	adds	r1, r1, r3
 800a07a:	20e9      	movs	r0, #233	; 0xe9
 800a07c:	b289      	uxth	r1, r1
 800a07e:	f001 fca1 	bl	800b9c4 <EE_WriteVariable>
								if(numOfParams == 19)
 800a082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a084:	2b13      	cmp	r3, #19
 800a086:	d064      	beq.n	800a152 <PxMessagingTask+0x176e>
								if(numOfParams == 21)
 800a088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08a:	2b15      	cmp	r3, #21
 800a08c:	d054      	beq.n	800a138 <PxMessagingTask+0x1754>
  __ASM volatile ("dsb 0xF":::"memory");
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	4b49      	ldr	r3, [pc, #292]	; (800a1b8 <PxMessagingTask+0x17d4>)
 800a094:	4a49      	ldr	r2, [pc, #292]	; (800a1bc <PxMessagingTask+0x17d8>)
 800a096:	60da      	str	r2, [r3, #12]
 800a098:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a09c:	46c0      	nop			; (mov r8, r8)
 800a09e:	e7fd      	b.n	800a09c <PxMessagingTask+0x16b8>
									SendMessageToModule(src,
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	e4b0      	b.n	8009a06 <PxMessagingTask+0x1022>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800a0a4:	2004      	movs	r0, #4
 800a0a6:	f009 fb3b 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d05d      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a0ae:	4a44      	ldr	r2, [pc, #272]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a0b0:	0403      	lsls	r3, r0, #16
 800a0b2:	3306      	adds	r3, #6
 800a0b4:	5153      	str	r3, [r2, r5]
 800a0b6:	e562      	b.n	8009b7e <PxMessagingTask+0x119a>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800a0b8:	2004      	movs	r0, #4
 800a0ba:	f009 fb31 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d053      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a0c2:	4a3f      	ldr	r2, [pc, #252]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a0c4:	0403      	lsls	r3, r0, #16
 800a0c6:	3305      	adds	r3, #5
 800a0c8:	5153      	str	r3, [r2, r5]
 800a0ca:	e6fd      	b.n	8009ec8 <PxMessagingTask+0x14e4>
										EraseSector(temp32);
 800a0cc:	0030      	movs	r0, r6
 800a0ce:	f001 febd 	bl	800be4c <EraseSector>
 800a0d2:	e75a      	b.n	8009f8a <PxMessagingTask+0x15a6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f009 fb23 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d045      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a0de:	0403      	lsls	r3, r0, #16
 800a0e0:	199e      	adds	r6, r3, r6
 800a0e2:	4b37      	ldr	r3, [pc, #220]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a0e4:	515e      	str	r6, [r3, r5]
 800a0e6:	e606      	b.n	8009cf6 <PxMessagingTask+0x1312>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800a0e8:	2002      	movs	r0, #2
 800a0ea:	f009 fb19 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d03b      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a0f2:	4a33      	ldr	r2, [pc, #204]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a0f4:	0403      	lsls	r3, r0, #16
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	5153      	str	r3, [r2, r5]
 800a0fa:	e6cb      	b.n	8009e94 <PxMessagingTask+0x14b0>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f009 fb0f 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a102:	2800      	cmp	r0, #0
 800a104:	d031      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a106:	4a2e      	ldr	r2, [pc, #184]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a108:	0403      	lsls	r3, r0, #16
 800a10a:	3302      	adds	r3, #2
 800a10c:	5153      	str	r3, [r2, r5]
 800a10e:	e698      	b.n	8009e42 <PxMessagingTask+0x145e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800a110:	2004      	movs	r0, #4
 800a112:	f009 fb05 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a116:	2800      	cmp	r0, #0
 800a118:	d027      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a11a:	4a29      	ldr	r2, [pc, #164]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a11c:	0403      	lsls	r3, r0, #16
 800a11e:	3307      	adds	r3, #7
 800a120:	5153      	str	r3, [r2, r5]
 800a122:	e696      	b.n	8009e52 <PxMessagingTask+0x146e>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800a124:	2002      	movs	r0, #2
 800a126:	f009 fafb 	bl	8013720 <malloc>
												if(temp32 != 0){
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d01d      	beq.n	800a16a <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a12e:	4a24      	ldr	r2, [pc, #144]	; (800a1c0 <PxMessagingTask+0x17dc>)
 800a130:	0403      	lsls	r3, r0, #16
 800a132:	3303      	adds	r3, #3
 800a134:	5153      	str	r3, [r2, r5]
 800a136:	e6ba      	b.n	8009eae <PxMessagingTask+0x14ca>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a138:	466b      	mov	r3, sp
 800a13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a13c:	7c1b      	ldrb	r3, [r3, #16]
 800a13e:	3412      	adds	r4, #18
 800a140:	5cd3      	ldrb	r3, [r2, r3]
 800a142:	5d11      	ldrb	r1, [r2, r4]
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	18c9      	adds	r1, r1, r3
 800a148:	b289      	uxth	r1, r1
 800a14a:	20eb      	movs	r0, #235	; 0xeb
 800a14c:	f001 fc3a 	bl	800b9c4 <EE_WriteVariable>
 800a150:	e79d      	b.n	800a08e <PxMessagingTask+0x16aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a152:	464b      	mov	r3, r9
 800a154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a156:	3410      	adds	r4, #16
 800a158:	5cd3      	ldrb	r3, [r2, r3]
 800a15a:	5d11      	ldrb	r1, [r2, r4]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	18c9      	adds	r1, r1, r3
 800a160:	b289      	uxth	r1, r1
 800a162:	20ea      	movs	r0, #234	; 0xea
 800a164:	f001 fc2e 	bl	800b9c4 <EE_WriteVariable>
								if(numOfParams == 21)
 800a168:	e791      	b.n	800a08e <PxMessagingTask+0x16aa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a16a:	2312      	movs	r3, #18
 800a16c:	4a0f      	ldr	r2, [pc, #60]	; (800a1ac <PxMessagingTask+0x17c8>)
 800a16e:	7013      	strb	r3, [r2, #0]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800a170:	e516      	b.n	8009ba0 <PxMessagingTask+0x11bc>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	4909      	ldr	r1, [pc, #36]	; (800a19c <PxMessagingTask+0x17b8>)
 800a176:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a178:	785a      	ldrb	r2, [r3, #1]
 800a17a:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a17c:	789a      	ldrb	r2, [r3, #2]
 800a17e:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a180:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800a182:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a184:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 800a186:	211f      	movs	r1, #31
 800a188:	f7fe fd50 	bl	8008c2c <PxMessagingTask+0x248>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a18c:	4653      	mov	r3, sl
 800a18e:	9504      	str	r5, [sp, #16]
 800a190:	5dda      	ldrb	r2, [r3, r7]
 800a192:	f7fe fd20 	bl	8008bd6 <PxMessagingTask+0x1f2>
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	20000c78 	.word	0x20000c78
 800a19c:	20000b74 	.word	0x20000b74
 800a1a0:	20000001 	.word	0x20000001
 800a1a4:	20000002 	.word	0x20000002
 800a1a8:	20000003 	.word	0x20000003
 800a1ac:	20000c74 	.word	0x20000c74
 800a1b0:	0801a248 	.word	0x0801a248
 800a1b4:	0000ffff 	.word	0x0000ffff
 800a1b8:	e000ed00 	.word	0xe000ed00
 800a1bc:	05fa0004 	.word	0x05fa0004
 800a1c0:	20000c80 	.word	0x20000c80
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 800a1c4:	0023      	movs	r3, r4
 800a1c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1c8:	330b      	adds	r3, #11
 800a1ca:	5cca      	ldrb	r2, [r1, r3]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	5ccb      	ldrb	r3, [r1, r3]
 800a1d0:	0212      	lsls	r2, r2, #8
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	18d2      	adds	r2, r2, r3
 800a1d6:	0023      	movs	r3, r4
 800a1d8:	330a      	adds	r3, #10
 800a1da:	5ccb      	ldrb	r3, [r1, r3]
 800a1dc:	340d      	adds	r4, #13
 800a1de:	18d2      	adds	r2, r2, r3
 800a1e0:	5d0b      	ldrb	r3, [r1, r4]
 800a1e2:	4914      	ldr	r1, [pc, #80]	; (800a234 <PxMessagingTask+0x1850>)
 800a1e4:	061b      	lsls	r3, r3, #24
 800a1e6:	18d2      	adds	r2, r2, r3
 800a1e8:	2300      	movs	r3, #0
													status =HAL_FLASH_Program(
 800a1ea:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 800a1ec:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800a1ee:	0031      	movs	r1, r6
 800a1f0:	f006 ffbe 	bl	8011170 <HAL_FLASH_Program>
 800a1f4:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 800a1f6:	e6de      	b.n	8009fb6 <PxMessagingTask+0x15d2>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800a1f8:	6833      	ldr	r3, [r6, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	d000      	beq.n	800a200 <PxMessagingTask+0x181c>
 800a1fe:	e6d7      	b.n	8009fb0 <PxMessagingTask+0x15cc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a200:	0023      	movs	r3, r4
 800a202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a204:	330b      	adds	r3, #11
 800a206:	5cca      	ldrb	r2, [r1, r3]
 800a208:	3301      	adds	r3, #1
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	0212      	lsls	r2, r2, #8
 800a20e:	041b      	lsls	r3, r3, #16
 800a210:	18d2      	adds	r2, r2, r3
 800a212:	0023      	movs	r3, r4
 800a214:	330a      	adds	r3, #10
 800a216:	5ccb      	ldrb	r3, [r1, r3]
 800a218:	340d      	adds	r4, #13
 800a21a:	18d2      	adds	r2, r2, r3
 800a21c:	5d0b      	ldrb	r3, [r1, r4]
 800a21e:	4905      	ldr	r1, [pc, #20]	; (800a234 <PxMessagingTask+0x1850>)
 800a220:	061b      	lsls	r3, r3, #24
 800a222:	18d2      	adds	r2, r2, r3
 800a224:	2300      	movs	r3, #0
													status =HAL_FLASH_Program(
 800a226:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a228:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800a22a:	0031      	movs	r1, r6
 800a22c:	f006 ffa0 	bl	8011170 <HAL_FLASH_Program>
 800a230:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 800a232:	e6c0      	b.n	8009fb6 <PxMessagingTask+0x15d2>
 800a234:	20000c78 	.word	0x20000c78

0800a238 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800a238:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a23a:	b530      	push	{r4, r5, lr}
 800a23c:	b083      	sub	sp, #12
 800a23e:	0005      	movs	r5, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a240:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a242:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a244:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a246:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a248:	f003 ff9e 	bl	800e188 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 800a24c:	7803      	ldrb	r3, [r0, #0]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a24e:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 800a250:	2b6f      	cmp	r3, #111	; 0x6f
 800a252:	d110      	bne.n	800a276 <ledModeCommand+0x3e>
 800a254:	7842      	ldrb	r2, [r0, #1]
 800a256:	2a6e      	cmp	r2, #110	; 0x6e
 800a258:	d10d      	bne.n	800a276 <ledModeCommand+0x3e>
 800a25a:	7882      	ldrb	r2, [r0, #2]
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	d10a      	bne.n	800a276 <ledModeCommand+0x3e>
			|| !strcmp((char*) pcParameterString1, "ON"))

		SwitchindMode = 1;
 800a260:	2201      	movs	r2, #1
 800a262:	4b16      	ldr	r3, [pc, #88]	; (800a2bc <ledModeCommand+0x84>)
 800a264:	701a      	strb	r2, [r3, #0]
		SwitchindMode = 0;


	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a266:	222e      	movs	r2, #46	; 0x2e
 800a268:	0028      	movs	r0, r5
 800a26a:	4915      	ldr	r1, [pc, #84]	; (800a2c0 <ledModeCommand+0x88>)
 800a26c:	f009 fc8c 	bl	8013b88 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a270:	2000      	movs	r0, #0
 800a272:	b003      	add	sp, #12
 800a274:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "ON"))
 800a276:	2b4f      	cmp	r3, #79	; 0x4f
 800a278:	d00e      	beq.n	800a298 <ledModeCommand+0x60>
	else if (!strcmp((char*) pcParameterString1, "off")
 800a27a:	0020      	movs	r0, r4
 800a27c:	4911      	ldr	r1, [pc, #68]	; (800a2c4 <ledModeCommand+0x8c>)
 800a27e:	f7f5 ff41 	bl	8000104 <strcmp>
 800a282:	2800      	cmp	r0, #0
 800a284:	d10f      	bne.n	800a2a6 <ledModeCommand+0x6e>
		SwitchindMode = 0;
 800a286:	2200      	movs	r2, #0
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <ledModeCommand+0x84>)
 800a28a:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a28c:	222f      	movs	r2, #47	; 0x2f
 800a28e:	0028      	movs	r0, r5
 800a290:	490d      	ldr	r1, [pc, #52]	; (800a2c8 <ledModeCommand+0x90>)
 800a292:	f009 fc79 	bl	8013b88 <memcpy>
 800a296:	e7eb      	b.n	800a270 <ledModeCommand+0x38>
			|| !strcmp((char*) pcParameterString1, "ON"))
 800a298:	7863      	ldrb	r3, [r4, #1]
 800a29a:	2b4e      	cmp	r3, #78	; 0x4e
 800a29c:	d1ed      	bne.n	800a27a <ledModeCommand+0x42>
 800a29e:	78a3      	ldrb	r3, [r4, #2]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0dd      	beq.n	800a260 <ledModeCommand+0x28>
 800a2a4:	e7e9      	b.n	800a27a <ledModeCommand+0x42>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	4908      	ldr	r1, [pc, #32]	; (800a2cc <ledModeCommand+0x94>)
 800a2aa:	f7f5 ff2b 	bl	8000104 <strcmp>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0e9      	beq.n	800a286 <ledModeCommand+0x4e>
	if (SwitchindMode) {
 800a2b2:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <ledModeCommand+0x84>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0e8      	beq.n	800a28c <ledModeCommand+0x54>
 800a2ba:	e7d4      	b.n	800a266 <ledModeCommand+0x2e>
 800a2bc:	200021a4 	.word	0x200021a4
 800a2c0:	0801ca34 	.word	0x0801ca34
 800a2c4:	0801ca2c 	.word	0x0801ca2c
 800a2c8:	0801ca64 	.word	0x0801ca64
 800a2cc:	0801ca30 	.word	0x0801ca30

0800a2d0 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a2d0:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 800a2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d4:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a2d6:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2d8:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a2da:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a2dc:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2de:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2e0:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2e2:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a2e4:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a2e6:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2e8:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a2ea:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a2ec:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a2ee:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a2f0:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2f2:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2f4:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a2f6:	f007 f9e7 	bl	80116c8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a2fa:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a300:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a302:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a304:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a306:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a308:	f007 fc80 	bl	8011c0c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a30c:	4b1a      	ldr	r3, [pc, #104]	; (800a378 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a30e:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a310:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a312:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a314:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a316:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a318:	f007 fe10 	bl	8011f3c <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800a31c:	2180      	movs	r1, #128	; 0x80
 800a31e:	4d17      	ldr	r5, [pc, #92]	; (800a37c <SystemClock_Config+0xac>)
 800a320:	0549      	lsls	r1, r1, #21
 800a322:	69ea      	ldr	r2, [r5, #28]
 800a324:	430a      	orrs	r2, r1
 800a326:	61ea      	str	r2, [r5, #28]
 800a328:	69eb      	ldr	r3, [r5, #28]
 800a32a:	400b      	ands	r3, r1
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800a330:	f007 f9c0 	bl	80116b4 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a334:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a336:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a33c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a33e:	f007 fdfd 	bl	8011f3c <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800a342:	f007 fdcf 	bl	8011ee4 <HAL_RCC_GetHCLKFreq>
 800a346:	21fa      	movs	r1, #250	; 0xfa
 800a348:	0089      	lsls	r1, r1, #2
 800a34a:	f7f5 ff01 	bl	8000150 <__udivsi3>
 800a34e:	f005 ffb9 	bl	80102c4 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a352:	2004      	movs	r0, #4
 800a354:	f005 ffd0 	bl	80102f8 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a358:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 800a35a:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a35c:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 800a35e:	4323      	orrs	r3, r4
 800a360:	61ab      	str	r3, [r5, #24]
 800a362:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a364:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 800a366:	401c      	ands	r4, r3
 800a368:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a36a:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 800a36c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a36e:	f005 ff63 	bl	8010238 <HAL_NVIC_SetPriority>
}
 800a372:	b01b      	add	sp, #108	; 0x6c
 800a374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	00040003 	.word	0x00040003
 800a37c:	40021000 	.word	0x40021000

0800a380 <SaveToRO>:
uint8_t SaveToRO(void) {
 800a380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a382:	46de      	mov	lr, fp
 800a384:	4657      	mov	r7, sl
 800a386:	464e      	mov	r6, r9
 800a388:	4645      	mov	r5, r8
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a38a:	2300      	movs	r3, #0
uint8_t SaveToRO(void) {
 800a38c:	b5e0      	push	{r5, r6, r7, lr}
 800a38e:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a390:	2211      	movs	r2, #17
 800a392:	2100      	movs	r1, #0
 800a394:	a803      	add	r0, sp, #12
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	f009 fbff 	bl	8013b9a <memset>
	HAL_FLASH_Unlock();
 800a39c:	f006 fe88 	bl	80110b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800a3a0:	486f      	ldr	r0, [pc, #444]	; (800a560 <SaveToRO+0x1e0>)
 800a3a2:	f006 ffb5 	bl	8011310 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800a3a6:	486f      	ldr	r0, [pc, #444]	; (800a564 <SaveToRO+0x1e4>)
 800a3a8:	f006 fe9e 	bl	80110e8 <FLASH_WaitForLastOperation>
 800a3ac:	4683      	mov	fp, r0
	if (FlashStatus != HAL_OK) {
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d000      	beq.n	800a3b4 <SaveToRO+0x34>
 800a3b2:	e088      	b.n	800a4c6 <SaveToRO+0x146>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a3b4:	4b6c      	ldr	r3, [pc, #432]	; (800a568 <SaveToRO+0x1e8>)
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	4699      	mov	r9, r3
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	4393      	bics	r3, r2
 800a3be:	464a      	mov	r2, r9
 800a3c0:	6113      	str	r3, [r2, #16]
	if (myID) {
 800a3c2:	4b6a      	ldr	r3, [pc, #424]	; (800a56c <SaveToRO+0x1ec>)
 800a3c4:	7819      	ldrb	r1, [r3, #0]
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d16e      	bne.n	800a4a8 <SaveToRO+0x128>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a3ca:	4b69      	ldr	r3, [pc, #420]	; (800a570 <SaveToRO+0x1f0>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d067      	beq.n	800a4a2 <SaveToRO+0x122>
 800a3d2:	4b68      	ldr	r3, [pc, #416]	; (800a574 <SaveToRO+0x1f4>)
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a3d8:	465b      	mov	r3, fp
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a3da:	4d67      	ldr	r5, [pc, #412]	; (800a578 <SaveToRO+0x1f8>)
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a3dc:	4f62      	ldr	r7, [pc, #392]	; (800a568 <SaveToRO+0x1e8>)
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	e005      	b.n	800a3ee <SaveToRO+0x6e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a3e2:	4b63      	ldr	r3, [pc, #396]	; (800a570 <SaveToRO+0x1f0>)
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b2f6      	uxtb	r6, r6
 800a3ea:	42b3      	cmp	r3, r6
 800a3ec:	d957      	bls.n	800a49e <SaveToRO+0x11e>
		if (snippets[s].cond.conditionType) {
 800a3ee:	00b3      	lsls	r3, r6, #2
 800a3f0:	1999      	adds	r1, r3, r6
 800a3f2:	4698      	mov	r8, r3
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	0089      	lsls	r1, r1, #2
 800a3f8:	5c5b      	ldrb	r3, [r3, r1]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0f1      	beq.n	800a3e2 <SaveToRO+0x62>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a3fe:	23fe      	movs	r3, #254	; 0xfe
 800a400:	aa02      	add	r2, sp, #8
 800a402:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800a404:	ab02      	add	r3, sp, #8
 800a406:	1c58      	adds	r0, r3, #1
 800a408:	2214      	movs	r2, #20
 800a40a:	4449      	add	r1, r9
 800a40c:	f009 fbbc 	bl	8013b88 <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a410:	2314      	movs	r3, #20
 800a412:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 800a414:	ab02      	add	r3, sp, #8
 800a416:	44ab      	add	fp, r5
 800a418:	1b5b      	subs	r3, r3, r5
 800a41a:	46b2      	mov	sl, r6
 800a41c:	001c      	movs	r4, r3
 800a41e:	465e      	mov	r6, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a420:	2300      	movs	r3, #0
 800a422:	0029      	movs	r1, r5
 800a424:	2001      	movs	r0, #1
 800a426:	5b62      	ldrh	r2, [r4, r5]
 800a428:	f006 fea2 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a42c:	484d      	ldr	r0, [pc, #308]	; (800a564 <SaveToRO+0x1e4>)
 800a42e:	f006 fe5b 	bl	80110e8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a432:	2800      	cmp	r0, #0
 800a434:	d147      	bne.n	800a4c6 <SaveToRO+0x146>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a436:	2201      	movs	r2, #1
 800a438:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800a43a:	3502      	adds	r5, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a43c:	4393      	bics	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a440:	42ae      	cmp	r6, r5
 800a442:	d1ed      	bne.n	800a420 <SaveToRO+0xa0>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a444:	4656      	mov	r6, sl
 800a446:	4643      	mov	r3, r8
 800a448:	199b      	adds	r3, r3, r6
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	444b      	add	r3, r9
 800a44e:	0004      	movs	r4, r0
 800a450:	4698      	mov	r8, r3
 800a452:	002e      	movs	r6, r5
 800a454:	e012      	b.n	800a47c <SaveToRO+0xfc>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800a456:	0063      	lsls	r3, r4, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a458:	5aea      	ldrh	r2, [r5, r3]
 800a45a:	0031      	movs	r1, r6
 800a45c:	2300      	movs	r3, #0
 800a45e:	2001      	movs	r0, #1
 800a460:	f006 fe86 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a464:	483f      	ldr	r0, [pc, #252]	; (800a564 <SaveToRO+0x1e4>)
 800a466:	f006 fe3f 	bl	80110e8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d12b      	bne.n	800a4c6 <SaveToRO+0x146>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a46e:	2201      	movs	r2, #1
 800a470:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a472:	3401      	adds	r4, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a474:	4393      	bics	r3, r2
 800a476:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a478:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a47a:	b2e4      	uxtb	r4, r4
 800a47c:	4643      	mov	r3, r8
 800a47e:	68dd      	ldr	r5, [r3, #12]
 800a480:	0028      	movs	r0, r5
 800a482:	f7f5 fe49 	bl	8000118 <strlen>
 800a486:	3001      	adds	r0, #1
 800a488:	0840      	lsrs	r0, r0, #1
 800a48a:	4284      	cmp	r4, r0
 800a48c:	d3e3      	bcc.n	800a456 <SaveToRO+0xd6>
 800a48e:	0035      	movs	r5, r6
 800a490:	4656      	mov	r6, sl
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a492:	4b37      	ldr	r3, [pc, #220]	; (800a570 <SaveToRO+0x1f0>)
 800a494:	3601      	adds	r6, #1
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	b2f6      	uxtb	r6, r6
 800a49a:	42b3      	cmp	r3, r6
 800a49c:	d8a7      	bhi.n	800a3ee <SaveToRO+0x6e>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	469b      	mov	fp, r3
	HAL_FLASH_Lock();
 800a4a2:	f006 fe17 	bl	80110d4 <HAL_FLASH_Lock>
	return result;
 800a4a6:	e012      	b.n	800a4ce <SaveToRO+0x14e>
		temp = (uint16_t) (N << 8) + myID;
 800a4a8:	4b34      	ldr	r3, [pc, #208]	; (800a57c <SaveToRO+0x1fc>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a4aa:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 800a4ac:	781a      	ldrb	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a4ae:	2300      	movs	r3, #0
		temp = (uint16_t) (N << 8) + myID;
 800a4b0:	0212      	lsls	r2, r2, #8
 800a4b2:	1852      	adds	r2, r2, r1
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	492a      	ldr	r1, [pc, #168]	; (800a560 <SaveToRO+0x1e0>)
 800a4b8:	f006 fe5a 	bl	8011170 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800a4bc:	4829      	ldr	r0, [pc, #164]	; (800a564 <SaveToRO+0x1e4>)
 800a4be:	f006 fe13 	bl	80110e8 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d00b      	beq.n	800a4de <SaveToRO+0x15e>
					return pFlash.ErrorCode;
 800a4c6:	4b2e      	ldr	r3, [pc, #184]	; (800a580 <SaveToRO+0x200>)
 800a4c8:	69d8      	ldr	r0, [r3, #28]
 800a4ca:	b2c3      	uxtb	r3, r0
 800a4cc:	469b      	mov	fp, r3
}
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	b009      	add	sp, #36	; 0x24
 800a4d2:	bcf0      	pop	{r4, r5, r6, r7}
 800a4d4:	46bb      	mov	fp, r7
 800a4d6:	46b2      	mov	sl, r6
 800a4d8:	46a9      	mov	r9, r5
 800a4da:	46a0      	mov	r8, r4
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a4de:	464b      	mov	r3, r9
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	4393      	bics	r3, r2
 800a4e6:	464a      	mov	r2, r9
 800a4e8:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800a4ea:	4b24      	ldr	r3, [pc, #144]	; (800a57c <SaveToRO+0x1fc>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d100      	bne.n	800a4f4 <SaveToRO+0x174>
 800a4f2:	e76a      	b.n	800a3ca <SaveToRO+0x4a>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	469a      	mov	sl, r3
 800a4f8:	4b22      	ldr	r3, [pc, #136]	; (800a584 <SaveToRO+0x204>)
	uint16_t add = 2, temp = 0;
 800a4fa:	2502      	movs	r5, #2
 800a4fc:	4698      	mov	r8, r3
				if (array[i - 1][0]) {
 800a4fe:	4653      	mov	r3, sl
 800a500:	1e5e      	subs	r6, r3, #1
 800a502:	2316      	movs	r3, #22
 800a504:	4647      	mov	r7, r8
 800a506:	435e      	muls	r6, r3
 800a508:	4643      	mov	r3, r8
 800a50a:	3716      	adds	r7, #22
 800a50c:	199c      	adds	r4, r3, r6
 800a50e:	19bf      	adds	r7, r7, r6
 800a510:	e002      	b.n	800a518 <SaveToRO+0x198>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a512:	3402      	adds	r4, #2
 800a514:	42bc      	cmp	r4, r7
 800a516:	d01a      	beq.n	800a54e <SaveToRO+0x1ce>
				if (array[i - 1][0]) {
 800a518:	4643      	mov	r3, r8
 800a51a:	5b9b      	ldrh	r3, [r3, r6]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0f8      	beq.n	800a512 <SaveToRO+0x192>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <SaveToRO+0x1e0>)
 800a522:	2001      	movs	r0, #1
 800a524:	18e9      	adds	r1, r5, r3
 800a526:	8822      	ldrh	r2, [r4, #0]
 800a528:	2300      	movs	r3, #0
 800a52a:	f006 fe21 	bl	8011170 <HAL_FLASH_Program>
					add += 2;
 800a52e:	3502      	adds	r5, #2
					FlashStatus = FLASH_WaitForLastOperation(
 800a530:	480c      	ldr	r0, [pc, #48]	; (800a564 <SaveToRO+0x1e4>)
					add += 2;
 800a532:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800a534:	f006 fdd8 	bl	80110e8 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1c4      	bne.n	800a4c6 <SaveToRO+0x146>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a53c:	464b      	mov	r3, r9
 800a53e:	2201      	movs	r2, #1
 800a540:	691b      	ldr	r3, [r3, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a542:	3402      	adds	r4, #2
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a544:	4393      	bics	r3, r2
 800a546:	464a      	mov	r2, r9
 800a548:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a54a:	42bc      	cmp	r4, r7
 800a54c:	d1e4      	bne.n	800a518 <SaveToRO+0x198>
		for (uint8_t i = 1; i <= N; i++) {
 800a54e:	4653      	mov	r3, sl
 800a550:	3301      	adds	r3, #1
 800a552:	b2db      	uxtb	r3, r3
 800a554:	469a      	mov	sl, r3
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <SaveToRO+0x1fc>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	4553      	cmp	r3, sl
 800a55c:	d2cf      	bcs.n	800a4fe <SaveToRO+0x17e>
 800a55e:	e734      	b.n	800a3ca <SaveToRO+0x4a>
 800a560:	0801d800 	.word	0x0801d800
 800a564:	0000c350 	.word	0x0000c350
 800a568:	40022000 	.word	0x40022000
 800a56c:	20000aa8 	.word	0x20000aa8
 800a570:	200017ac 	.word	0x200017ac
 800a574:	200017b0 	.word	0x200017b0
 800a578:	0801dc00 	.word	0x0801dc00
 800a57c:	20000008 	.word	0x20000008
 800a580:	20006d90 	.word	0x20006d90
 800a584:	20000f84 	.word	0x20000f84

0800a588 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 800a588:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 800a58a:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800a58c:	2100      	movs	r1, #0
 800a58e:	0092      	lsls	r2, r2, #2
 800a590:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <ClearROtopology+0x20>)
 800a592:	f009 fb02 	bl	8013b9a <memset>
	N = 1;
 800a596:	2201      	movs	r2, #1
 800a598:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <ClearROtopology+0x24>)
 800a59a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800a59c:	2200      	movs	r2, #0
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <ClearROtopology+0x28>)
 800a5a0:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800a5a2:	f7ff feed 	bl	800a380 <SaveToRO>
}
 800a5a6:	bd10      	pop	{r4, pc}
 800a5a8:	20000f84 	.word	0x20000f84
 800a5ac:	20000008 	.word	0x20000008
 800a5b0:	20000aa8 	.word	0x20000aa8

0800a5b4 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b6:	464e      	mov	r6, r9
 800a5b8:	4645      	mov	r5, r8
 800a5ba:	46de      	mov	lr, fp
 800a5bc:	4657      	mov	r7, sl
 800a5be:	4698      	mov	r8, r3
 800a5c0:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 800a5c2:	4f3c      	ldr	r7, [pc, #240]	; (800a6b4 <remoteBootloaderUpdate+0x100>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	b085      	sub	sp, #20
	myOutport =FindRoute(myID,dst);
 800a5c8:	7838      	ldrb	r0, [r7, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a5ca:	000c      	movs	r4, r1
 800a5cc:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 800a5ce:	f7f9 fc05 	bl	8003ddc <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a5d2:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 800a5d4:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d13f      	bne.n	800a65a <remoteBootloaderUpdate+0xa6>
	if(src == myID){
 800a5da:	783b      	ldrb	r3, [r7, #0]
 800a5dc:	454b      	cmp	r3, r9
 800a5de:	d060      	beq.n	800a6a2 <remoteBootloaderUpdate+0xee>
	UART_HandleTypeDef *huart =GetUart(port);
 800a5e0:	0028      	movs	r0, r5
 800a5e2:	f003 faad 	bl	800db40 <GetUart>
	huart->Init.BaudRate =57600;
 800a5e6:	23e1      	movs	r3, #225	; 0xe1
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	469b      	mov	fp, r3
 800a5ec:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a5ee:	2380      	movs	r3, #128	; 0x80
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	469a      	mov	sl, r3
 800a5f4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a5f6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 800a5f8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a5fa:	015b      	lsls	r3, r3, #5
 800a5fc:	6083      	str	r3, [r0, #8]
 800a5fe:	4699      	mov	r9, r3
	HAL_UART_Init(huart);
 800a600:	f008 fea0 	bl	8013344 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a604:	2120      	movs	r1, #32
 800a606:	6822      	ldr	r2, [r4, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 800a608:	0030      	movs	r0, r6
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a60a:	6813      	ldr	r3, [r2, #0]
 800a60c:	4688      	mov	r8, r1
 800a60e:	430b      	orrs	r3, r1
 800a610:	6013      	str	r3, [r2, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 800a612:	f003 fa95 	bl	800db40 <GetUart>
	huart->Init.BaudRate =57600;
 800a616:	465b      	mov	r3, fp
 800a618:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a61a:	4653      	mov	r3, sl
 800a61c:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a61e:	464b      	mov	r3, r9
	UART_HandleTypeDef *huart =GetUart(port);
 800a620:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a622:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a624:	f008 fe8e 	bl	8013344 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a628:	4641      	mov	r1, r8
 800a62a:	6822      	ldr	r2, [r4, #0]
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a62c:	0028      	movs	r0, r5
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	430b      	orrs	r3, r1
 800a632:	6013      	str	r3, [r2, #0]
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a634:	2300      	movs	r3, #0
 800a636:	7839      	ldrb	r1, [r7, #0]
 800a638:	9303      	str	r3, [sp, #12]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	9302      	str	r3, [sp, #8]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	3303      	adds	r3, #3
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	0032      	movs	r2, r6
 800a646:	000b      	movs	r3, r1
 800a648:	f7fd ff30 	bl	80084ac <StartScastDMAStream>
}
 800a64c:	b005      	add	sp, #20
 800a64e:	bcf0      	pop	{r4, r5, r6, r7}
 800a650:	46bb      	mov	fp, r7
 800a652:	46b2      	mov	sl, r6
 800a654:	46a9      	mov	r9, r5
 800a656:	46a0      	mov	r8, r4
 800a658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a65a:	783b      	ldrb	r3, [r7, #0]
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	d01c      	beq.n	800a69a <remoteBootloaderUpdate+0xe6>
	if(src == myID){
 800a660:	454b      	cmp	r3, r9
 800a662:	d1bd      	bne.n	800a5e0 <remoteBootloaderUpdate+0x2c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a664:	f003 fd8c 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a668:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <remoteBootloaderUpdate+0x104>)
 800a66a:	0022      	movs	r2, r4
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a670:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a672:	f009 fc83 	bl	8013f7c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a676:	4b11      	ldr	r3, [pc, #68]	; (800a6bc <remoteBootloaderUpdate+0x108>)
 800a678:	4648      	mov	r0, r9
 800a67a:	6819      	ldr	r1, [r3, #0]
 800a67c:	f009 fc9e 	bl	8013fbc <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a680:	4648      	mov	r0, r9
 800a682:	f7f5 fd49 	bl	8000118 <strlen>
 800a686:	2332      	movs	r3, #50	; 0x32
 800a688:	b282      	uxth	r2, r0
 800a68a:	4649      	mov	r1, r9
 800a68c:	0028      	movs	r0, r5
 800a68e:	f003 fa25 	bl	800dadc <writePxITMutex>
		Delay_ms(100);
 800a692:	2064      	movs	r0, #100	; 0x64
 800a694:	f005 fa9e 	bl	800fbd4 <HAL_Delay>
 800a698:	e7a2      	b.n	800a5e0 <remoteBootloaderUpdate+0x2c>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a69a:	4646      	mov	r6, r8
	if(src == myID){
 800a69c:	454b      	cmp	r3, r9
 800a69e:	d19f      	bne.n	800a5e0 <remoteBootloaderUpdate+0x2c>
 800a6a0:	e7e0      	b.n	800a664 <remoteBootloaderUpdate+0xb0>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a6a2:	f003 fd6d 	bl	800e180 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a6a6:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <remoteBootloaderUpdate+0x10c>)
 800a6a8:	0022      	movs	r2, r4
 800a6aa:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a6ac:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a6ae:	f009 fc65 	bl	8013f7c <sprintf>
 800a6b2:	e7e0      	b.n	800a676 <remoteBootloaderUpdate+0xc2>
 800a6b4:	20000aa8 	.word	0x20000aa8
 800a6b8:	20000058 	.word	0x20000058
 800a6bc:	20000054 	.word	0x20000054
 800a6c0:	2000005c 	.word	0x2000005c

0800a6c4 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a6c4:	b500      	push	{lr}
 800a6c6:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 800a6c8:	f003 f868 	bl	800d79c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a6cc:	f003 f87e 	bl	800d7cc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a6d0:	f003 f894 	bl	800d7fc <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800a6d4:	f003 f8aa 	bl	800d82c <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800a6d8:	f003 f8c0 	bl	800d85c <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800a6dc:	21fa      	movs	r1, #250	; 0xfa
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <Module_Peripheral_Init+0x38>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	0089      	lsls	r1, r1, #2
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	4805      	ldr	r0, [pc, #20]	; (800a700 <Module_Peripheral_Init+0x3c>)
 800a6ea:	f004 ff5f 	bl	800f5ac <xTimerCreate>
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <Module_Peripheral_Init+0x40>)
 800a6f0:	6058      	str	r0, [r3, #4]
	Switch_Init();
 800a6f2:	f001 fc07 	bl	800bf04 <Switch_Init>
}
 800a6f6:	b003      	add	sp, #12
 800a6f8:	bd00      	pop	{pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	0800a9e5 	.word	0x0800a9e5
 800a700:	0801ca94 	.word	0x0801ca94
 800a704:	200021a4 	.word	0x200021a4

0800a708 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a708:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800a70a:	4c0a      	ldr	r4, [pc, #40]	; (800a734 <RegisterModuleCLICommands+0x2c>)
 800a70c:	0020      	movs	r0, r4
 800a70e:	f003 fc9d 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800a712:	0020      	movs	r0, r4
 800a714:	3010      	adds	r0, #16
 800a716:	f003 fc99 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800a71a:	0020      	movs	r0, r4
 800a71c:	3020      	adds	r0, #32
 800a71e:	f003 fc95 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800a722:	0020      	movs	r0, r4
 800a724:	3030      	adds	r0, #48	; 0x30
 800a726:	f003 fc91 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pwmCommandDefinition);
 800a72a:	0020      	movs	r0, r4
 800a72c:	3040      	adds	r0, #64	; 0x40
 800a72e:	f003 fc8d 	bl	800e04c <FreeRTOS_CLIRegisterCommand>
}
 800a732:	bd10      	pop	{r4, pc}
 800a734:	0801a268 	.word	0x0801a268

0800a738 <GetPort>:
	if (huart->Instance == USART5)
 800a738:	6800      	ldr	r0, [r0, #0]
 800a73a:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <GetPort+0x40>)
 800a73c:	4298      	cmp	r0, r3
 800a73e:	d012      	beq.n	800a766 <GetPort+0x2e>
	else if (huart->Instance == USART2)
 800a740:	4b0e      	ldr	r3, [pc, #56]	; (800a77c <GetPort+0x44>)
 800a742:	4298      	cmp	r0, r3
 800a744:	d011      	beq.n	800a76a <GetPort+0x32>
	else if (huart->Instance == USART6)
 800a746:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <GetPort+0x48>)
 800a748:	4298      	cmp	r0, r3
 800a74a:	d010      	beq.n	800a76e <GetPort+0x36>
	else if (huart->Instance == USART3)
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <GetPort+0x4c>)
 800a74e:	4298      	cmp	r0, r3
 800a750:	d00f      	beq.n	800a772 <GetPort+0x3a>
		return P5;
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <GetPort+0x50>)
 800a754:	469c      	mov	ip, r3
 800a756:	4460      	add	r0, ip
 800a758:	1e43      	subs	r3, r0, #1
 800a75a:	4198      	sbcs	r0, r3
 800a75c:	2304      	movs	r3, #4
 800a75e:	4240      	negs	r0, r0
 800a760:	4398      	bics	r0, r3
 800a762:	3005      	adds	r0, #5
}
 800a764:	4770      	bx	lr
		return P1;
 800a766:	2001      	movs	r0, #1
 800a768:	e7fc      	b.n	800a764 <GetPort+0x2c>
		return P2;
 800a76a:	2002      	movs	r0, #2
 800a76c:	e7fa      	b.n	800a764 <GetPort+0x2c>
		return P3;
 800a76e:	2003      	movs	r0, #3
 800a770:	e7f8      	b.n	800a764 <GetPort+0x2c>
		return P4;
 800a772:	2004      	movs	r0, #4
 800a774:	e7f6      	b.n	800a764 <GetPort+0x2c>
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	40005000 	.word	0x40005000
 800a77c:	40004400 	.word	0x40004400
 800a780:	40011400 	.word	0x40011400
 800a784:	40004800 	.word	0x40004800
 800a788:	bffec800 	.word	0xbffec800

0800a78c <TIM3_Init>:
	__TIM3_CLK_ENABLE()
 800a78c:	2302      	movs	r3, #2
void TIM3_Init(void) {
 800a78e:	b530      	push	{r4, r5, lr}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a790:	2500      	movs	r5, #0
	__TIM3_CLK_ENABLE()
 800a792:	4a24      	ldr	r2, [pc, #144]	; (800a824 <TIM3_Init+0x98>)
void TIM3_Init(void) {
 800a794:	b095      	sub	sp, #84	; 0x54
	__TIM3_CLK_ENABLE()
 800a796:	69d1      	ldr	r1, [r2, #28]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a798:	4823      	ldr	r0, [pc, #140]	; (800a828 <TIM3_Init+0x9c>)
	__TIM3_CLK_ENABLE()
 800a79a:	4319      	orrs	r1, r3
 800a79c:	61d1      	str	r1, [r2, #28]
 800a79e:	69d2      	ldr	r2, [r2, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a0:	9309      	str	r3, [sp, #36]	; 0x24
	__TIM3_CLK_ENABLE()
 800a7a2:	401a      	ands	r2, r3
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a7a4:	3301      	adds	r3, #1
	__TIM3_CLK_ENABLE()
 800a7a6:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a7a8:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a7aa:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Pin = _Switch_PIN;
 800a7ac:	3b02      	subs	r3, #2
 800a7ae:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800a7b0:	930c      	str	r3, [sp, #48]	; 0x30
	__TIM3_CLK_ENABLE()
 800a7b2:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b4:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a7b6:	f006 fdbd 	bl	8011334 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	2010      	movs	r0, #16
 800a7c0:	f005 fd3a 	bl	8010238 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a7c4:	2010      	movs	r0, #16
 800a7c6:	f005 fd69 	bl	801029c <HAL_NVIC_EnableIRQ>
	htim3.Instance = TIM3;
 800a7ca:	4c18      	ldr	r4, [pc, #96]	; (800a82c <TIM3_Init+0xa0>)
 800a7cc:	4b18      	ldr	r3, [pc, #96]	; (800a830 <TIM3_Init+0xa4>)
	HAL_TIM_Base_Init(&htim3);
 800a7ce:	3408      	adds	r4, #8
	htim3.Instance = TIM3;
 800a7d0:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a7d2:	f007 fb3f 	bl	8011e54 <HAL_RCC_GetSysClockFreq>
 800a7d6:	4917      	ldr	r1, [pc, #92]	; (800a834 <TIM3_Init+0xa8>)
 800a7d8:	f7f5 fcba 	bl	8000150 <__udivsi3>
			/ PWM_TIMER_CLOCK) - 1;
 800a7dc:	3801      	subs	r0, #1
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a7de:	6060      	str	r0, [r4, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7e0:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = 0;
 800a7e2:	60e5      	str	r5, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7e4:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim3);
 800a7e6:	0020      	movs	r0, r4
 800a7e8:	f008 f914 	bl	8012a14 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7ec:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a7ee:	a904      	add	r1, sp, #16
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7f0:	015b      	lsls	r3, r3, #5
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a7f2:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7f4:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a7f6:	f007 fffb 	bl	80127f0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800a7fa:	0020      	movs	r0, r4
 800a7fc:	f008 f924 	bl	8012a48 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a800:	a902      	add	r1, sp, #8
 800a802:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a804:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a806:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a808:	f008 f9e0 	bl	8012bcc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a80c:	2360      	movs	r3, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a80e:	2208      	movs	r2, #8
 800a810:	0020      	movs	r0, r4
 800a812:	a90d      	add	r1, sp, #52	; 0x34
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a814:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 800a816:	950e      	str	r5, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a818:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a81a:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a81c:	f008 f96e 	bl	8012afc <HAL_TIM_PWM_ConfigChannel>
}
 800a820:	b015      	add	sp, #84	; 0x54
 800a822:	bd30      	pop	{r4, r5, pc}
 800a824:	40021000 	.word	0x40021000
 800a828:	48000400 	.word	0x48000400
 800a82c:	200021a4 	.word	0x200021a4
 800a830:	40000400 	.word	0x40000400
 800a834:	00f42400 	.word	0x00f42400

0800a838 <Output_on>:
	if (Switch_state == STATE_PWM) {
 800a838:	2344      	movs	r3, #68	; 0x44
Module_Status Output_on(uint32_t timeout) {
 800a83a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (Switch_state == STATE_PWM) {
 800a83c:	4d2a      	ldr	r5, [pc, #168]	; (800a8e8 <Output_on+0xb0>)
Module_Status Output_on(uint32_t timeout) {
 800a83e:	0004      	movs	r4, r0
	if (Switch_state == STATE_PWM) {
 800a840:	5cee      	ldrb	r6, [r5, r3]
Module_Status Output_on(uint32_t timeout) {
 800a842:	b083      	sub	sp, #12
	if (Switch_state == STATE_PWM) {
 800a844:	2e02      	cmp	r6, #2
 800a846:	d02f      	beq.n	800a8a8 <Output_on+0x70>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a848:	2201      	movs	r2, #1
 800a84a:	2101      	movs	r1, #1
 800a84c:	4827      	ldr	r0, [pc, #156]	; (800a8ec <Output_on+0xb4>)
 800a84e:	f006 ff25 	bl	801169c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a852:	782b      	ldrb	r3, [r5, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d120      	bne.n	800a89a <Output_on+0x62>
	if (timeout != portMAX_DELAY) {
 800a858:	1c63      	adds	r3, r4, #1
 800a85a:	d107      	bne.n	800a86c <Output_on+0x34>
	Switch_state = STATE_ON;
 800a85c:	2301      	movs	r3, #1
 800a85e:	2244      	movs	r2, #68	; 0x44
}
 800a860:	2000      	movs	r0, #0
	Switch_state = STATE_ON;
 800a862:	54ab      	strb	r3, [r5, r2]
	Switch_Oldstate = Switch_state;
 800a864:	4a22      	ldr	r2, [pc, #136]	; (800a8f0 <Output_on+0xb8>)
 800a866:	7013      	strb	r3, [r2, #0]
}
 800a868:	b003      	add	sp, #12
 800a86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (xTimerIsTimerActive(xTimerSwitch))
 800a86c:	6868      	ldr	r0, [r5, #4]
 800a86e:	f004 fffd 	bl	800f86c <xTimerIsTimerActive>
 800a872:	2800      	cmp	r0, #0
 800a874:	d12e      	bne.n	800a8d4 <Output_on+0x9c>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800a876:	21fa      	movs	r1, #250	; 0xfa
 800a878:	0160      	lsls	r0, r4, #5
 800a87a:	1b00      	subs	r0, r0, r4
 800a87c:	0080      	lsls	r0, r0, #2
 800a87e:	1900      	adds	r0, r0, r4
 800a880:	0089      	lsls	r1, r1, #2
 800a882:	00c0      	lsls	r0, r0, #3
 800a884:	f7f5 fc64 	bl	8000150 <__udivsi3>
 800a888:	2364      	movs	r3, #100	; 0x64
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	0002      	movs	r2, r0
 800a88e:	2300      	movs	r3, #0
 800a890:	2104      	movs	r1, #4
 800a892:	6868      	ldr	r0, [r5, #4]
 800a894:	f004 feaa 	bl	800f5ec <xTimerGenericCommand>
 800a898:	e7e0      	b.n	800a85c <Output_on+0x24>
		IND_ON();
 800a89a:	2180      	movs	r1, #128	; 0x80
 800a89c:	2201      	movs	r2, #1
 800a89e:	4815      	ldr	r0, [pc, #84]	; (800a8f4 <Output_on+0xbc>)
 800a8a0:	01c9      	lsls	r1, r1, #7
 800a8a2:	f006 fefb 	bl	801169c <HAL_GPIO_WritePin>
 800a8a6:	e7d7      	b.n	800a858 <Output_on+0x20>
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a8a8:	002f      	movs	r7, r5
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	2108      	movs	r1, #8
 800a8ae:	0038      	movs	r0, r7
 800a8b0:	f007 ff5c 	bl	801276c <HAL_TIM_PWM_Stop>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800a8b4:	2010      	movs	r0, #16
 800a8b6:	f005 fcfb 	bl	80102b0 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800a8ba:	0038      	movs	r0, r7
 800a8bc:	f007 fede 	bl	801267c <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800a8c0:	0038      	movs	r0, r7
 800a8c2:	f007 ff0b 	bl	80126dc <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800a8c6:	4a0c      	ldr	r2, [pc, #48]	; (800a8f8 <Output_on+0xc0>)
 800a8c8:	69d3      	ldr	r3, [r2, #28]
 800a8ca:	43b3      	bics	r3, r6
 800a8cc:	61d3      	str	r3, [r2, #28]
		Switch_Init();
 800a8ce:	f001 fb19 	bl	800bf04 <Switch_Init>
 800a8d2:	e7b9      	b.n	800a848 <Output_on+0x10>
			xTimerStop(xTimerSwitch, 100);
 800a8d4:	2364      	movs	r3, #100	; 0x64
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2103      	movs	r1, #3
 800a8de:	6868      	ldr	r0, [r5, #4]
 800a8e0:	f004 fe84 	bl	800f5ec <xTimerGenericCommand>
 800a8e4:	e7c7      	b.n	800a876 <Output_on+0x3e>
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	200021a4 	.word	0x200021a4
 800a8ec:	48000400 	.word	0x48000400
 800a8f0:	20000094 	.word	0x20000094
 800a8f4:	48000800 	.word	0x48000800
 800a8f8:	40021000 	.word	0x40021000

0800a8fc <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800a8fc:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a8fe:	b530      	push	{r4, r5, lr}
 800a900:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a902:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a904:	0005      	movs	r5, r0
 800a906:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a908:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a90a:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a90c:	f003 fc3c 	bl	800e188 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800a910:	4914      	ldr	r1, [pc, #80]	; (800a964 <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a912:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800a914:	f7f5 fbf6 	bl	8000104 <strcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d005      	beq.n	800a928 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800a91c:	0020      	movs	r0, r4
 800a91e:	4912      	ldr	r1, [pc, #72]	; (800a968 <onCommand+0x6c>)
 800a920:	f7f5 fbf0 	bl	8000104 <strcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	d10d      	bne.n	800a944 <onCommand+0x48>
	result = Output_on(timeout);
 800a928:	2001      	movs	r0, #1
 800a92a:	4240      	negs	r0, r0
 800a92c:	f7ff ff84 	bl	800a838 <Output_on>
	if (result == H0FR6_OK) {
 800a930:	2800      	cmp	r0, #0
 800a932:	d104      	bne.n	800a93e <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800a934:	2232      	movs	r2, #50	; 0x32
 800a936:	0028      	movs	r0, r5
 800a938:	490c      	ldr	r1, [pc, #48]	; (800a96c <onCommand+0x70>)
 800a93a:	f009 f925 	bl	8013b88 <memcpy>
}
 800a93e:	2000      	movs	r0, #0
 800a940:	b003      	add	sp, #12
 800a942:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800a944:	0020      	movs	r0, r4
 800a946:	f008 fe60 	bl	801360a <atol>
 800a94a:	0004      	movs	r4, r0
	result = Output_on(timeout);
 800a94c:	f7ff ff74 	bl	800a838 <Output_on>
	if (result == H0FR6_OK) {
 800a950:	2800      	cmp	r0, #0
 800a952:	d1f4      	bne.n	800a93e <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 800a954:	1c63      	adds	r3, r4, #1
 800a956:	d0ed      	beq.n	800a934 <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800a958:	0022      	movs	r2, r4
 800a95a:	0028      	movs	r0, r5
 800a95c:	4904      	ldr	r1, [pc, #16]	; (800a970 <onCommand+0x74>)
 800a95e:	f009 fb0d 	bl	8013f7c <sprintf>
 800a962:	e7ec      	b.n	800a93e <onCommand+0x42>
 800a964:	0801caa0 	.word	0x0801caa0
 800a968:	0801caa4 	.word	0x0801caa4
 800a96c:	0801cae0 	.word	0x0801cae0
 800a970:	0801caa8 	.word	0x0801caa8

0800a974 <Output_off>:
	if (Switch_state == STATE_PWM) {
 800a974:	2344      	movs	r3, #68	; 0x44
Module_Status Output_off(void) {
 800a976:	b570      	push	{r4, r5, r6, lr}
	if (Switch_state == STATE_PWM) {
 800a978:	4c16      	ldr	r4, [pc, #88]	; (800a9d4 <Output_off+0x60>)
 800a97a:	5ce5      	ldrb	r5, [r4, r3]
 800a97c:	2d02      	cmp	r5, #2
 800a97e:	d013      	beq.n	800a9a8 <Output_off+0x34>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a980:	2200      	movs	r2, #0
 800a982:	2101      	movs	r1, #1
 800a984:	4814      	ldr	r0, [pc, #80]	; (800a9d8 <Output_off+0x64>)
 800a986:	f006 fe89 	bl	801169c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a98a:	7823      	ldrb	r3, [r4, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <Output_off+0x26>
	Switch_state = STATE_OFF;
 800a990:	2344      	movs	r3, #68	; 0x44
 800a992:	2200      	movs	r2, #0
}
 800a994:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800a996:	54e2      	strb	r2, [r4, r3]
}
 800a998:	bd70      	pop	{r4, r5, r6, pc}
		IND_OFF();
 800a99a:	2180      	movs	r1, #128	; 0x80
 800a99c:	2200      	movs	r2, #0
 800a99e:	480f      	ldr	r0, [pc, #60]	; (800a9dc <Output_off+0x68>)
 800a9a0:	01c9      	lsls	r1, r1, #7
 800a9a2:	f006 fe7b 	bl	801169c <HAL_GPIO_WritePin>
 800a9a6:	e7f3      	b.n	800a990 <Output_off+0x1c>
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a9a8:	0026      	movs	r6, r4
 800a9aa:	3608      	adds	r6, #8
 800a9ac:	2108      	movs	r1, #8
 800a9ae:	0030      	movs	r0, r6
 800a9b0:	f007 fedc 	bl	801276c <HAL_TIM_PWM_Stop>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800a9b4:	2010      	movs	r0, #16
 800a9b6:	f005 fc7b 	bl	80102b0 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800a9ba:	0030      	movs	r0, r6
 800a9bc:	f007 fe5e 	bl	801267c <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800a9c0:	0030      	movs	r0, r6
 800a9c2:	f007 fe8b 	bl	80126dc <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800a9c6:	4a06      	ldr	r2, [pc, #24]	; (800a9e0 <Output_off+0x6c>)
 800a9c8:	69d3      	ldr	r3, [r2, #28]
 800a9ca:	43ab      	bics	r3, r5
 800a9cc:	61d3      	str	r3, [r2, #28]
		Switch_Init();
 800a9ce:	f001 fa99 	bl	800bf04 <Switch_Init>
 800a9d2:	e7d5      	b.n	800a980 <Output_off+0xc>
 800a9d4:	200021a4 	.word	0x200021a4
 800a9d8:	48000400 	.word	0x48000400
 800a9dc:	48000800 	.word	0x48000800
 800a9e0:	40021000 	.word	0x40021000

0800a9e4 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800a9e4:	b510      	push	{r4, lr}
	Output_off();
 800a9e6:	f7ff ffc5 	bl	800a974 <Output_off>
}
 800a9ea:	bd10      	pop	{r4, pc}

0800a9ec <offCommand>:
		const int8_t *pcCommandString) {
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	0004      	movs	r4, r0
	result = Output_off();
 800a9f0:	f7ff ffc0 	bl	800a974 <Output_off>
	if (result == H0FR6_OK) {
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d001      	beq.n	800a9fc <offCommand+0x10>
}
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	bd10      	pop	{r4, pc}
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a9fc:	2223      	movs	r2, #35	; 0x23
 800a9fe:	0020      	movs	r0, r4
 800aa00:	4901      	ldr	r1, [pc, #4]	; (800aa08 <offCommand+0x1c>)
 800aa02:	f009 f8c1 	bl	8013b88 <memcpy>
 800aa06:	e7f7      	b.n	800a9f8 <offCommand+0xc>
 800aa08:	0801cb14 	.word	0x0801cb14

0800aa0c <Output_PWM>:
Module_Status Output_PWM(float dutyCycle) {
 800aa0c:	b570      	push	{r4, r5, r6, lr}
	if (dutyCycle < 0 || dutyCycle > 100)
 800aa0e:	2100      	movs	r1, #0
Module_Status Output_PWM(float dutyCycle) {
 800aa10:	1c04      	adds	r4, r0, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800aa12:	f7f5 fd63 	bl	80004dc <__aeabi_fcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d12b      	bne.n	800aa72 <Output_PWM+0x66>
 800aa1a:	491c      	ldr	r1, [pc, #112]	; (800aa8c <Output_PWM+0x80>)
 800aa1c:	1c20      	adds	r0, r4, #0
 800aa1e:	f7f5 fd71 	bl	8000504 <__aeabi_fcmpgt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d125      	bne.n	800aa72 <Output_PWM+0x66>
	if (Switch_state != STATE_PWM)
 800aa26:	2344      	movs	r3, #68	; 0x44
 800aa28:	4d19      	ldr	r5, [pc, #100]	; (800aa90 <Output_PWM+0x84>)
 800aa2a:	5ceb      	ldrb	r3, [r5, r3]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d11d      	bne.n	800aa6c <Output_PWM+0x60>
	htim3.Instance->ARR = ARR - 1;
 800aa30:	4b18      	ldr	r3, [pc, #96]	; (800aa94 <Output_PWM+0x88>)
 800aa32:	68ae      	ldr	r6, [r5, #8]
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800aa34:	4915      	ldr	r1, [pc, #84]	; (800aa8c <Output_PWM+0x80>)
	htim3.Instance->ARR = ARR - 1;
 800aa36:	62f3      	str	r3, [r6, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800aa38:	1c20      	adds	r0, r4, #0
 800aa3a:	f7f5 ff19 	bl	8000870 <__aeabi_fdiv>
 800aa3e:	4916      	ldr	r1, [pc, #88]	; (800aa98 <Output_PWM+0x8c>)
 800aa40:	f7f6 f8de 	bl	8000c00 <__aeabi_fmul>
 800aa44:	f7f5 fdc0 	bl	80005c8 <__aeabi_f2uiz>
 800aa48:	63f0      	str	r0, [r6, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800aa4a:	0028      	movs	r0, r5
 800aa4c:	2108      	movs	r1, #8
 800aa4e:	3008      	adds	r0, #8
 800aa50:	f007 fe64 	bl	801271c <HAL_TIM_PWM_Start>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d10e      	bne.n	800aa76 <Output_PWM+0x6a>
		Switch_state = STATE_PWM;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	2244      	movs	r2, #68	; 0x44
		if (SwitchindMode)
 800aa5c:	7828      	ldrb	r0, [r5, #0]
		Switch_state = STATE_PWM;
 800aa5e:	54ab      	strb	r3, [r5, r2]
		Switch_Oldstate = Switch_state;
 800aa60:	4a0e      	ldr	r2, [pc, #56]	; (800aa9c <Output_PWM+0x90>)
		Switch_OldDC = dutyCycle;
 800aa62:	64ac      	str	r4, [r5, #72]	; 0x48
		Switch_Oldstate = Switch_state;
 800aa64:	7013      	strb	r3, [r2, #0]
		if (SwitchindMode)
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d107      	bne.n	800aa7a <Output_PWM+0x6e>
}
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
		TIM3_Init();
 800aa6c:	f7ff fe8e 	bl	800a78c <TIM3_Init>
 800aa70:	e7de      	b.n	800aa30 <Output_PWM+0x24>
		return H0FR6_ERR_Wrong_Value;
 800aa72:	2002      	movs	r0, #2
 800aa74:	e7f9      	b.n	800aa6a <Output_PWM+0x5e>
		return H0FR6_ERROR;
 800aa76:	20ff      	movs	r0, #255	; 0xff
 800aa78:	e7f7      	b.n	800aa6a <Output_PWM+0x5e>
			IND_ON();
 800aa7a:	2180      	movs	r1, #128	; 0x80
 800aa7c:	4808      	ldr	r0, [pc, #32]	; (800aaa0 <Output_PWM+0x94>)
 800aa7e:	2201      	movs	r2, #1
 800aa80:	01c9      	lsls	r1, r1, #7
 800aa82:	f006 fe0b 	bl	801169c <HAL_GPIO_WritePin>
	return result;
 800aa86:	2000      	movs	r0, #0
 800aa88:	e7ef      	b.n	800aa6a <Output_PWM+0x5e>
 800aa8a:	46c0      	nop			; (mov r8, r8)
 800aa8c:	42c80000 	.word	0x42c80000
 800aa90:	200021a4 	.word	0x200021a4
 800aa94:	00003fc5 	.word	0x00003fc5
 800aa98:	467f1800 	.word	0x467f1800
 800aa9c:	20000094 	.word	0x20000094
 800aaa0:	48000800 	.word	0x48000800

0800aaa4 <Output_toggle>:
	if (Switch_state) {
 800aaa4:	2244      	movs	r2, #68	; 0x44
Module_Status Output_toggle(void) {
 800aaa6:	b510      	push	{r4, lr}
	if (Switch_state) {
 800aaa8:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <Output_toggle+0x34>)
 800aaaa:	5c98      	ldrb	r0, [r3, r2]
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d106      	bne.n	800aabe <Output_toggle+0x1a>
		if (Switch_Oldstate == STATE_ON)
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <Output_toggle+0x38>)
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	2a01      	cmp	r2, #1
 800aab6:	d009      	beq.n	800aacc <Output_toggle+0x28>
		else if (Switch_Oldstate == STATE_PWM)
 800aab8:	2a02      	cmp	r2, #2
 800aaba:	d003      	beq.n	800aac4 <Output_toggle+0x20>
}
 800aabc:	bd10      	pop	{r4, pc}
		result = Output_off();
 800aabe:	f7ff ff59 	bl	800a974 <Output_off>
 800aac2:	e7fb      	b.n	800aabc <Output_toggle+0x18>
			result = Output_PWM(Switch_OldDC);
 800aac4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aac6:	f7ff ffa1 	bl	800aa0c <Output_PWM>
	return result;
 800aaca:	e7f7      	b.n	800aabc <Output_toggle+0x18>
			result = Output_on(portMAX_DELAY);
 800aacc:	2001      	movs	r0, #1
 800aace:	4240      	negs	r0, r0
 800aad0:	f7ff feb2 	bl	800a838 <Output_on>
 800aad4:	e7f2      	b.n	800aabc <Output_toggle+0x18>
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	200021a4 	.word	0x200021a4
 800aadc:	20000094 	.word	0x20000094

0800aae0 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800aae0:	b510      	push	{r4, lr}
 800aae2:	ab02      	add	r3, sp, #8
 800aae4:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 800aae6:	4b1e      	ldr	r3, [pc, #120]	; (800ab60 <Module_MessagingTask+0x80>)
 800aae8:	4298      	cmp	r0, r3
 800aaea:	d035      	beq.n	800ab58 <Module_MessagingTask+0x78>
 800aaec:	d809      	bhi.n	800ab02 <Module_MessagingTask+0x22>
 800aaee:	3b02      	subs	r3, #2
 800aaf0:	4298      	cmp	r0, r3
 800aaf2:	d01a      	beq.n	800ab2a <Module_MessagingTask+0x4a>
 800aaf4:	4b1b      	ldr	r3, [pc, #108]	; (800ab64 <Module_MessagingTask+0x84>)
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	d115      	bne.n	800ab26 <Module_MessagingTask+0x46>
		Output_off();
 800aafa:	f7ff ff3b 	bl	800a974 <Output_off>
	Module_Status result = H0FR6_OK;
 800aafe:	2000      	movs	r0, #0
}
 800ab00:	bd10      	pop	{r4, pc}
	switch (code) {
 800ab02:	4b19      	ldr	r3, [pc, #100]	; (800ab68 <Module_MessagingTask+0x88>)
 800ab04:	4298      	cmp	r0, r3
 800ab06:	d10e      	bne.n	800ab26 <Module_MessagingTask+0x46>
		tempFloat = (float)cMessage[port - 1][shift];
 800ab08:	3901      	subs	r1, #1
 800ab0a:	00cb      	lsls	r3, r1, #3
 800ab0c:	1a59      	subs	r1, r3, r1
 800ab0e:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <Module_MessagingTask+0x8c>)
 800ab10:	00c9      	lsls	r1, r1, #3
 800ab12:	1859      	adds	r1, r3, r1
 800ab14:	5c88      	ldrb	r0, [r1, r2]
 800ab16:	f7f6 fb67 	bl	80011e8 <__aeabi_ui2f>
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <Module_MessagingTask+0x90>)
 800ab1c:	6518      	str	r0, [r3, #80]	; 0x50
		Output_PWM(tempFloat);
 800ab1e:	f7ff ff75 	bl	800aa0c <Output_PWM>
	Module_Status result = H0FR6_OK;
 800ab22:	2000      	movs	r0, #0
		break;
 800ab24:	e7ec      	b.n	800ab00 <Module_MessagingTask+0x20>
	switch (code) {
 800ab26:	2001      	movs	r0, #1
 800ab28:	e7ea      	b.n	800ab00 <Module_MessagingTask+0x20>
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800ab2a:	3901      	subs	r1, #1
 800ab2c:	00cb      	lsls	r3, r1, #3
 800ab2e:	1a59      	subs	r1, r3, r1
 800ab30:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <Module_MessagingTask+0x8c>)
 800ab32:	00c9      	lsls	r1, r1, #3
 800ab34:	1859      	adds	r1, r3, r1
 800ab36:	188b      	adds	r3, r1, r2
 800ab38:	7858      	ldrb	r0, [r3, #1]
 800ab3a:	789c      	ldrb	r4, [r3, #2]
 800ab3c:	5c8a      	ldrb	r2, [r1, r2]
 800ab3e:	78db      	ldrb	r3, [r3, #3]
 800ab40:	0200      	lsls	r0, r0, #8
 800ab42:	0424      	lsls	r4, r4, #16
 800ab44:	1900      	adds	r0, r0, r4
 800ab46:	1880      	adds	r0, r0, r2
 800ab48:	061b      	lsls	r3, r3, #24
 800ab4a:	18c0      	adds	r0, r0, r3
 800ab4c:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <Module_MessagingTask+0x90>)
 800ab4e:	64d8      	str	r0, [r3, #76]	; 0x4c
		Output_on(temp32);
 800ab50:	f7ff fe72 	bl	800a838 <Output_on>
	Module_Status result = H0FR6_OK;
 800ab54:	2000      	movs	r0, #0
		break;
 800ab56:	e7d3      	b.n	800ab00 <Module_MessagingTask+0x20>
		Output_toggle();
 800ab58:	f7ff ffa4 	bl	800aaa4 <Output_toggle>
	Module_Status result = H0FR6_OK;
 800ab5c:	2000      	movs	r0, #0
		break;
 800ab5e:	e7cf      	b.n	800ab00 <Module_MessagingTask+0x20>
 800ab60:	000002fa 	.word	0x000002fa
 800ab64:	000002f9 	.word	0x000002f9
 800ab68:	000002fb 	.word	0x000002fb
 800ab6c:	20000d40 	.word	0x20000d40
 800ab70:	200021a4 	.word	0x200021a4

0800ab74 <pwmCommand>:
portBASE_TYPE pwmCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	Module_Status result = H0FR6_OK;

	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800ab74:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800ab76:	b530      	push	{r4, r5, lr}
 800ab78:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800ab7a:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800ab7c:	0005      	movs	r5, r0
 800ab7e:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800ab80:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800ab82:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800ab84:	f003 fb00 	bl	800e188 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);

	dutycycle = (float) atof((char*) pcParameterString1);
 800ab88:	f008 fd34 	bl	80135f4 <atof>
 800ab8c:	f7f8 f99c 	bl	8002ec8 <__aeabi_d2f>

	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800ab90:	2100      	movs	r1, #0
	dutycycle = (float) atof((char*) pcParameterString1);
 800ab92:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800ab94:	f7f5 fca2 	bl	80004dc <__aeabi_fcmplt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d105      	bne.n	800aba8 <pwmCommand+0x34>
 800ab9c:	490f      	ldr	r1, [pc, #60]	; (800abdc <pwmCommand+0x68>)
 800ab9e:	1c20      	adds	r0, r4, #0
 800aba0:	f7f5 fcb0 	bl	8000504 <__aeabi_fcmpgt>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d007      	beq.n	800abb8 <pwmCommand+0x44>

	/* Respond to the command */
	if (result == H0FR6_OK) {
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
	} else if (result == H0FR6_ERR_Wrong_Value) {
		strcpy((char*) pcWriteBuffer, (char*) pcWrongValue);
 800aba8:	2237      	movs	r2, #55	; 0x37
 800abaa:	0028      	movs	r0, r5
 800abac:	490c      	ldr	r1, [pc, #48]	; (800abe0 <pwmCommand+0x6c>)
 800abae:	f008 ffeb 	bl	8013b88 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800abb2:	2000      	movs	r0, #0
 800abb4:	b003      	add	sp, #12
 800abb6:	bd30      	pop	{r4, r5, pc}
		result = Output_PWM(dutycycle);
 800abb8:	1c20      	adds	r0, r4, #0
 800abba:	f7ff ff27 	bl	800aa0c <Output_PWM>
	if (result == H0FR6_OK) {
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d002      	beq.n	800abc8 <pwmCommand+0x54>
	} else if (result == H0FR6_ERR_Wrong_Value) {
 800abc2:	2802      	cmp	r0, #2
 800abc4:	d1f5      	bne.n	800abb2 <pwmCommand+0x3e>
 800abc6:	e7ef      	b.n	800aba8 <pwmCommand+0x34>
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
 800abc8:	1c20      	adds	r0, r4, #0
 800abca:	f7f8 f935 	bl	8002e38 <__aeabi_f2d>
 800abce:	0002      	movs	r2, r0
 800abd0:	000b      	movs	r3, r1
 800abd2:	0028      	movs	r0, r5
 800abd4:	4903      	ldr	r1, [pc, #12]	; (800abe4 <pwmCommand+0x70>)
 800abd6:	f009 f9d1 	bl	8013f7c <sprintf>
 800abda:	e7ea      	b.n	800abb2 <pwmCommand+0x3e>
 800abdc:	42c80000 	.word	0x42c80000
 800abe0:	0801cb38 	.word	0x0801cb38
 800abe4:	0801cb70 	.word	0x0801cb70

0800abe8 <toggleCommand>:
	if (Switch_state) {
 800abe8:	2344      	movs	r3, #68	; 0x44
		const int8_t *pcCommandString) {
 800abea:	b570      	push	{r4, r5, r6, lr}
	if (Switch_state) {
 800abec:	4d14      	ldr	r5, [pc, #80]	; (800ac40 <toggleCommand+0x58>)
		const int8_t *pcCommandString) {
 800abee:	0004      	movs	r4, r0
	if (Switch_state) {
 800abf0:	5ceb      	ldrb	r3, [r5, r3]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10c      	bne.n	800ac10 <toggleCommand+0x28>
		if (Switch_Oldstate == STATE_ON)
 800abf6:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <toggleCommand+0x5c>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d01a      	beq.n	800ac34 <toggleCommand+0x4c>
		else if (Switch_Oldstate == STATE_PWM)
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d014      	beq.n	800ac2c <toggleCommand+0x44>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800ac02:	2223      	movs	r2, #35	; 0x23
 800ac04:	0020      	movs	r0, r4
 800ac06:	4910      	ldr	r1, [pc, #64]	; (800ac48 <toggleCommand+0x60>)
 800ac08:	f008 ffbe 	bl	8013b88 <memcpy>
}
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
		result = Output_off();
 800ac10:	f7ff feb0 	bl	800a974 <Output_off>
	if (result == H0FR6_OK) {
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d1f9      	bne.n	800ac0c <toggleCommand+0x24>
		if (Switch_state) {
 800ac18:	2344      	movs	r3, #68	; 0x44
 800ac1a:	5ceb      	ldrb	r3, [r5, r3]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0f0      	beq.n	800ac02 <toggleCommand+0x1a>
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800ac20:	2222      	movs	r2, #34	; 0x22
 800ac22:	0020      	movs	r0, r4
 800ac24:	4909      	ldr	r1, [pc, #36]	; (800ac4c <toggleCommand+0x64>)
 800ac26:	f008 ffaf 	bl	8013b88 <memcpy>
 800ac2a:	e7ef      	b.n	800ac0c <toggleCommand+0x24>
			result = Output_PWM(Switch_OldDC);
 800ac2c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ac2e:	f7ff feed 	bl	800aa0c <Output_PWM>
	return result;
 800ac32:	e7ef      	b.n	800ac14 <toggleCommand+0x2c>
			result = Output_on(portMAX_DELAY);
 800ac34:	2001      	movs	r0, #1
 800ac36:	4240      	negs	r0, r0
 800ac38:	f7ff fdfe 	bl	800a838 <Output_on>
 800ac3c:	e7ea      	b.n	800ac14 <toggleCommand+0x2c>
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	200021a4 	.word	0x200021a4
 800ac44:	20000094 	.word	0x20000094
 800ac48:	0801cb14 	.word	0x0801cb14
 800ac4c:	0801cbb8 	.word	0x0801cbb8

0800ac50 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac52:	46de      	mov	lr, fp
 800ac54:	4657      	mov	r7, sl
 800ac56:	464e      	mov	r6, r9
 800ac58:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	4b53      	ldr	r3, [pc, #332]	; (800adac <DMA_Init+0x15c>)
{
 800ac5e:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800ac60:	6959      	ldr	r1, [r3, #20]
{
 800ac62:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800ac64:	4311      	orrs	r1, r2
 800ac66:	6159      	str	r1, [r3, #20]
 800ac68:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800ac6a:	4c51      	ldr	r4, [pc, #324]	; (800adb0 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800ac6c:	400a      	ands	r2, r1
 800ac6e:	9200      	str	r2, [sp, #0]
 800ac70:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ac72:	2202      	movs	r2, #2
 800ac74:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac76:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800ac78:	4311      	orrs	r1, r2
 800ac7a:	6159      	str	r1, [r3, #20]
 800ac7c:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac7e:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800ac80:	401a      	ands	r2, r3
 800ac82:	9201      	str	r2, [sp, #4]
 800ac84:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800ac86:	4b4b      	ldr	r3, [pc, #300]	; (800adb4 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac88:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800ac8a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac90:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac92:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ac94:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac96:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac98:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac9a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ac9c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac9e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800aca0:	0020      	movs	r0, r4
 800aca2:	f005 fc4d 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800aca6:	4b44      	ldr	r3, [pc, #272]	; (800adb8 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800aca8:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800acaa:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acac:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acae:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800acb0:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800acb2:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acb4:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acb6:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acb8:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800acba:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800acbc:	3038      	adds	r0, #56	; 0x38
 800acbe:	f005 fc3f 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800acc2:	4b3e      	ldr	r3, [pc, #248]	; (800adbc <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acc4:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800acc6:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acc8:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800acca:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800accc:	50e5      	str	r5, [r4, r3]
 800acce:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acd0:	3304      	adds	r3, #4
 800acd2:	50e2      	str	r2, [r4, r3]
 800acd4:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800acd6:	3304      	adds	r3, #4
 800acd8:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acda:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800acdc:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800acde:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ace0:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800ace2:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ace4:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800ace6:	f005 fc2b 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800acea:	23a8      	movs	r3, #168	; 0xa8
 800acec:	4a34      	ldr	r2, [pc, #208]	; (800adc0 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800acee:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800acf0:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acf2:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acf4:	3304      	adds	r3, #4
 800acf6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800acf8:	3304      	adds	r3, #4
 800acfa:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800acfc:	3304      	adds	r3, #4
 800acfe:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad00:	3304      	adds	r3, #4
 800ad02:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad04:	3304      	adds	r3, #4
 800ad06:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ad08:	3304      	adds	r3, #4
 800ad0a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800ad10:	30a8      	adds	r0, #168	; 0xa8
 800ad12:	f005 fc15 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ad16:	23e0      	movs	r3, #224	; 0xe0
 800ad18:	4a2a      	ldr	r2, [pc, #168]	; (800adc4 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800ad1a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ad1c:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ad1e:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad20:	3304      	adds	r3, #4
 800ad22:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ad24:	3304      	adds	r3, #4
 800ad26:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ad28:	3304      	adds	r3, #4
 800ad2a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad30:	3304      	adds	r3, #4
 800ad32:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ad34:	3304      	adds	r3, #4
 800ad36:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad38:	3304      	adds	r3, #4
 800ad3a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800ad3c:	30e0      	adds	r0, #224	; 0xe0
 800ad3e:	f005 fbff 	bl	8010540 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800ad42:	4c21      	ldr	r4, [pc, #132]	; (800adc8 <DMA_Init+0x178>)
 800ad44:	4b21      	ldr	r3, [pc, #132]	; (800adcc <DMA_Init+0x17c>)
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_NORMAL; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
	
	HAL_DMA_Init(hDMA);		
 800ad46:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ad48:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad4a:	2310      	movs	r3, #16
 800ad4c:	469b      	mov	fp, r3
 800ad4e:	6063      	str	r3, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ad50:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ad52:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad54:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad56:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ad58:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad5a:	61e7      	str	r7, [r4, #28]
	HAL_DMA_Init(hDMA);		
 800ad5c:	f005 fbf0 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ad60:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800ad62:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ad64:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad66:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ad68:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ad6c:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad6e:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad70:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800ad72:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad74:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800ad76:	3038      	adds	r0, #56	; 0x38
 800ad78:	f005 fbe2 	bl	8010540 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ad7c:	4b15      	ldr	r3, [pc, #84]	; (800add4 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800ad7e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ad80:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad82:	465b      	mov	r3, fp
 800ad84:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad86:	4653      	mov	r3, sl
 800ad88:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad8e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ad90:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ad92:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad94:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ad96:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800ad98:	3070      	adds	r0, #112	; 0x70
 800ad9a:	f005 fbd1 	bl	8010540 <HAL_DMA_Init>
}
 800ad9e:	b003      	add	sp, #12
 800ada0:	bcf0      	pop	{r4, r5, r6, r7}
 800ada2:	46bb      	mov	fp, r7
 800ada4:	46b2      	mov	sl, r6
 800ada6:	46a9      	mov	r9, r5
 800ada8:	46a0      	mov	r8, r4
 800adaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adac:	40021000 	.word	0x40021000
 800adb0:	200026f8 	.word	0x200026f8
 800adb4:	40020008 	.word	0x40020008
 800adb8:	40020030 	.word	0x40020030
 800adbc:	40020058 	.word	0x40020058
 800adc0:	4002006c 	.word	0x4002006c
 800adc4:	4002041c 	.word	0x4002041c
 800adc8:	20002650 	.word	0x20002650
 800adcc:	4002001c 	.word	0x4002001c
 800add0:	40020044 	.word	0x40020044
 800add4:	40020080 	.word	0x40020080

0800add8 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800add8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800adda:	1e44      	subs	r4, r0, #1
 800addc:	00e5      	lsls	r5, r4, #3
 800adde:	4e07      	ldr	r6, [pc, #28]	; (800adfc <StopStreamDMA+0x24>)
 800ade0:	1b2d      	subs	r5, r5, r4
 800ade2:	00ed      	lsls	r5, r5, #3
 800ade4:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800ade6:	f005 fc03 	bl	80105f0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800adee:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800adf0:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800adf2:	4a03      	ldr	r2, [pc, #12]	; (800ae00 <StopStreamDMA+0x28>)
 800adf4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800adf6:	4a03      	ldr	r2, [pc, #12]	; (800ae04 <StopStreamDMA+0x2c>)
 800adf8:	50a3      	str	r3, [r4, r2]

}
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	20002500 	.word	0x20002500
 800ae00:	200019a0 	.word	0x200019a0
 800ae04:	200019b4 	.word	0x200019b4

0800ae08 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800ae08:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800ae0a:	b570      	push	{r4, r5, r6, lr}
 800ae0c:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800ae0e:	4d0c      	ldr	r5, [pc, #48]	; (800ae40 <SwitchMsgDMAToStream+0x38>)
 800ae10:	1a24      	subs	r4, r4, r0
 800ae12:	00e4      	lsls	r4, r4, #3
 800ae14:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800ae16:	f005 fbeb 	bl	80105f0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800ae1e:	4809      	ldr	r0, [pc, #36]	; (800ae44 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800ae20:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800ae22:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae24:	1900      	adds	r0, r0, r4
 800ae26:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae28:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ae2a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae2c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae2e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae30:	3320      	adds	r3, #32
 800ae32:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ae34:	2380      	movs	r3, #128	; 0x80
 800ae36:	015b      	lsls	r3, r3, #5
 800ae38:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800ae3a:	f005 fb81 	bl	8010540 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	200026f8 	.word	0x200026f8
 800ae44:	20002500 	.word	0x20002500

0800ae48 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800ae48:	6803      	ldr	r3, [r0, #0]
 800ae4a:	4a22      	ldr	r2, [pc, #136]	; (800aed4 <SetupDMAInterrupts+0x8c>)
{
 800ae4c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d019      	beq.n	800ae86 <SetupDMAInterrupts+0x3e>
 800ae52:	d928      	bls.n	800aea6 <SetupDMAInterrupts+0x5e>
 800ae54:	4a20      	ldr	r2, [pc, #128]	; (800aed8 <SetupDMAInterrupts+0x90>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d015      	beq.n	800ae86 <SetupDMAInterrupts+0x3e>
 800ae5a:	d91c      	bls.n	800ae96 <SetupDMAInterrupts+0x4e>
 800ae5c:	4a1f      	ldr	r2, [pc, #124]	; (800aedc <SetupDMAInterrupts+0x94>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d006      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800ae62:	d90d      	bls.n	800ae80 <SetupDMAInterrupts+0x38>
 800ae64:	4a1e      	ldr	r2, [pc, #120]	; (800aee0 <SetupDMAInterrupts+0x98>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d002      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	; (800aee4 <SetupDMAInterrupts+0x9c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d106      	bne.n	800ae7e <SetupDMAInterrupts+0x36>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ae70:	200b      	movs	r0, #11
 800ae72:	2200      	movs	r2, #0
 800ae74:	f005 f9e0 	bl	8010238 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ae78:	200b      	movs	r0, #11
 800ae7a:	f005 fa0f 	bl	801029c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ae7e:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ae80:	4a19      	ldr	r2, [pc, #100]	; (800aee8 <SetupDMAInterrupts+0xa0>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d1fb      	bne.n	800ae7e <SetupDMAInterrupts+0x36>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ae86:	2200      	movs	r2, #0
 800ae88:	200a      	movs	r0, #10
 800ae8a:	f005 f9d5 	bl	8010238 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ae8e:	200a      	movs	r0, #10
 800ae90:	f005 fa04 	bl	801029c <HAL_NVIC_EnableIRQ>
			break;
 800ae94:	e7f3      	b.n	800ae7e <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <SetupDMAInterrupts+0xa4>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d0e9      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800ae9c:	d90e      	bls.n	800aebc <SetupDMAInterrupts+0x74>
 800ae9e:	4a14      	ldr	r2, [pc, #80]	; (800aef0 <SetupDMAInterrupts+0xa8>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d0e5      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800aea4:	e7eb      	b.n	800ae7e <SetupDMAInterrupts+0x36>
 800aea6:	4a13      	ldr	r2, [pc, #76]	; (800aef4 <SetupDMAInterrupts+0xac>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d10e      	bne.n	800aeca <SetupDMAInterrupts+0x82>
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800aeac:	2200      	movs	r2, #0
 800aeae:	2009      	movs	r0, #9
 800aeb0:	f005 f9c2 	bl	8010238 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800aeb4:	2009      	movs	r0, #9
 800aeb6:	f005 f9f1 	bl	801029c <HAL_NVIC_EnableIRQ>
			break;
 800aeba:	e7e0      	b.n	800ae7e <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800aebc:	4a0e      	ldr	r2, [pc, #56]	; (800aef8 <SetupDMAInterrupts+0xb0>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d0d6      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800aec2:	4a0e      	ldr	r2, [pc, #56]	; (800aefc <SetupDMAInterrupts+0xb4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d0d3      	beq.n	800ae70 <SetupDMAInterrupts+0x28>
 800aec8:	e7d9      	b.n	800ae7e <SetupDMAInterrupts+0x36>
 800aeca:	4a0d      	ldr	r2, [pc, #52]	; (800af00 <SetupDMAInterrupts+0xb8>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d0da      	beq.n	800ae86 <SetupDMAInterrupts+0x3e>
 800aed0:	e7d5      	b.n	800ae7e <SetupDMAInterrupts+0x36>
 800aed2:	46c0      	nop			; (mov r8, r8)
 800aed4:	40020030 	.word	0x40020030
 800aed8:	40020408 	.word	0x40020408
 800aedc:	40020430 	.word	0x40020430
 800aee0:	40020444 	.word	0x40020444
 800aee4:	40020458 	.word	0x40020458
 800aee8:	4002041c 	.word	0x4002041c
 800aeec:	4002006c 	.word	0x4002006c
 800aef0:	40020080 	.word	0x40020080
 800aef4:	40020008 	.word	0x40020008
 800aef8:	40020044 	.word	0x40020044
 800aefc:	40020058 	.word	0x40020058
 800af00:	4002001c 	.word	0x4002001c

0800af04 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800af04:	6803      	ldr	r3, [r0, #0]
 800af06:	4a1c      	ldr	r2, [pc, #112]	; (800af78 <UnSetupDMAInterrupts+0x74>)
{
 800af08:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d015      	beq.n	800af3a <UnSetupDMAInterrupts+0x36>
 800af0e:	d920      	bls.n	800af52 <UnSetupDMAInterrupts+0x4e>
 800af10:	4a1a      	ldr	r2, [pc, #104]	; (800af7c <UnSetupDMAInterrupts+0x78>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d011      	beq.n	800af3a <UnSetupDMAInterrupts+0x36>
 800af16:	d914      	bls.n	800af42 <UnSetupDMAInterrupts+0x3e>
 800af18:	4a19      	ldr	r2, [pc, #100]	; (800af80 <UnSetupDMAInterrupts+0x7c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d006      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af1e:	d909      	bls.n	800af34 <UnSetupDMAInterrupts+0x30>
 800af20:	4a18      	ldr	r2, [pc, #96]	; (800af84 <UnSetupDMAInterrupts+0x80>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d002      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af26:	4a18      	ldr	r2, [pc, #96]	; (800af88 <UnSetupDMAInterrupts+0x84>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d102      	bne.n	800af32 <UnSetupDMAInterrupts+0x2e>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800af2c:	200b      	movs	r0, #11
 800af2e:	f005 f9bf 	bl	80102b0 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800af32:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800af34:	4a15      	ldr	r2, [pc, #84]	; (800af8c <UnSetupDMAInterrupts+0x88>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d1fb      	bne.n	800af32 <UnSetupDMAInterrupts+0x2e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800af3a:	200a      	movs	r0, #10
 800af3c:	f005 f9b8 	bl	80102b0 <HAL_NVIC_DisableIRQ>
			break;
 800af40:	e7f7      	b.n	800af32 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800af42:	4a13      	ldr	r2, [pc, #76]	; (800af90 <UnSetupDMAInterrupts+0x8c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d0f1      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af48:	d90a      	bls.n	800af60 <UnSetupDMAInterrupts+0x5c>
 800af4a:	4a12      	ldr	r2, [pc, #72]	; (800af94 <UnSetupDMAInterrupts+0x90>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d0ed      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af50:	e7ef      	b.n	800af32 <UnSetupDMAInterrupts+0x2e>
 800af52:	4a11      	ldr	r2, [pc, #68]	; (800af98 <UnSetupDMAInterrupts+0x94>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d10a      	bne.n	800af6e <UnSetupDMAInterrupts+0x6a>
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800af58:	2009      	movs	r0, #9
 800af5a:	f005 f9a9 	bl	80102b0 <HAL_NVIC_DisableIRQ>
			break;
 800af5e:	e7e8      	b.n	800af32 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800af60:	4a0e      	ldr	r2, [pc, #56]	; (800af9c <UnSetupDMAInterrupts+0x98>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d0e2      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af66:	4a0e      	ldr	r2, [pc, #56]	; (800afa0 <UnSetupDMAInterrupts+0x9c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d0df      	beq.n	800af2c <UnSetupDMAInterrupts+0x28>
 800af6c:	e7e1      	b.n	800af32 <UnSetupDMAInterrupts+0x2e>
 800af6e:	4a0d      	ldr	r2, [pc, #52]	; (800afa4 <UnSetupDMAInterrupts+0xa0>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d0e2      	beq.n	800af3a <UnSetupDMAInterrupts+0x36>
 800af74:	e7dd      	b.n	800af32 <UnSetupDMAInterrupts+0x2e>
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	40020030 	.word	0x40020030
 800af7c:	40020408 	.word	0x40020408
 800af80:	40020430 	.word	0x40020430
 800af84:	40020444 	.word	0x40020444
 800af88:	40020458 	.word	0x40020458
 800af8c:	4002041c 	.word	0x4002041c
 800af90:	4002006c 	.word	0x4002006c
 800af94:	40020080 	.word	0x40020080
 800af98:	40020008 	.word	0x40020008
 800af9c:	40020044 	.word	0x40020044
 800afa0:	40020058 	.word	0x40020058
 800afa4:	4002001c 	.word	0x4002001c

0800afa8 <DMA_MSG_TX_UnSetup>:
{	
 800afa8:	b510      	push	{r4, lr}
 800afaa:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800afac:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800afae:	f7ff ffa9 	bl	800af04 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800afb6:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800afb8:	6623      	str	r3, [r4, #96]	; 0x60
}
 800afba:	bd10      	pop	{r4, pc}

0800afbc <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800afbc:	6803      	ldr	r3, [r0, #0]
 800afbe:	4ac9      	ldr	r2, [pc, #804]	; (800b2e4 <RemapAndLinkDMAtoUARTRx+0x328>)
{
 800afc0:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d03d      	beq.n	800b042 <RemapAndLinkDMAtoUARTRx+0x86>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800afc6:	4ac8      	ldr	r2, [pc, #800]	; (800b2e8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d05a      	beq.n	800b082 <RemapAndLinkDMAtoUARTRx+0xc6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800afcc:	4ac7      	ldr	r2, [pc, #796]	; (800b2ec <RemapAndLinkDMAtoUARTRx+0x330>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d100      	bne.n	800afd4 <RemapAndLinkDMAtoUARTRx+0x18>
 800afd2:	e072      	b.n	800b0ba <RemapAndLinkDMAtoUARTRx+0xfe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800afd4:	4ac6      	ldr	r2, [pc, #792]	; (800b2f0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d100      	bne.n	800afdc <RemapAndLinkDMAtoUARTRx+0x20>
 800afda:	e0c2      	b.n	800b162 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800afdc:	4ac5      	ldr	r2, [pc, #788]	; (800b2f4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d100      	bne.n	800afe4 <RemapAndLinkDMAtoUARTRx+0x28>
 800afe2:	e0ed      	b.n	800b1c0 <RemapAndLinkDMAtoUARTRx+0x204>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800afe4:	4ac4      	ldr	r2, [pc, #784]	; (800b2f8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d100      	bne.n	800afec <RemapAndLinkDMAtoUARTRx+0x30>
 800afea:	e1a1      	b.n	800b330 <RemapAndLinkDMAtoUARTRx+0x374>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800afec:	4ac3      	ldr	r2, [pc, #780]	; (800b2fc <RemapAndLinkDMAtoUARTRx+0x340>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d100      	bne.n	800aff4 <RemapAndLinkDMAtoUARTRx+0x38>
 800aff2:	e1e7      	b.n	800b3c4 <RemapAndLinkDMAtoUARTRx+0x408>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800aff4:	4ac2      	ldr	r2, [pc, #776]	; (800b300 <RemapAndLinkDMAtoUARTRx+0x344>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d15c      	bne.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800affa:	680b      	ldr	r3, [r1, #0]
 800affc:	4ac1      	ldr	r2, [pc, #772]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d100      	bne.n	800b004 <RemapAndLinkDMAtoUARTRx+0x48>
 800b002:	e293      	b.n	800b52c <RemapAndLinkDMAtoUARTRx+0x570>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b004:	4ac0      	ldr	r2, [pc, #768]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d100      	bne.n	800b00c <RemapAndLinkDMAtoUARTRx+0x50>
 800b00a:	e299      	b.n	800b540 <RemapAndLinkDMAtoUARTRx+0x584>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b00c:	4abf      	ldr	r2, [pc, #764]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d100      	bne.n	800b014 <RemapAndLinkDMAtoUARTRx+0x58>
 800b012:	e297      	b.n	800b544 <RemapAndLinkDMAtoUARTRx+0x588>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b014:	4abe      	ldr	r2, [pc, #760]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d100      	bne.n	800b01c <RemapAndLinkDMAtoUARTRx+0x60>
 800b01a:	e29f      	b.n	800b55c <RemapAndLinkDMAtoUARTRx+0x5a0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b01c:	4abd      	ldr	r2, [pc, #756]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d100      	bne.n	800b024 <RemapAndLinkDMAtoUARTRx+0x68>
 800b022:	e2a7      	b.n	800b574 <RemapAndLinkDMAtoUARTRx+0x5b8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b024:	4abc      	ldr	r2, [pc, #752]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d144      	bne.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b02a:	4abc      	ldr	r2, [pc, #752]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b02c:	23a8      	movs	r3, #168	; 0xa8
 800b02e:	4dbc      	ldr	r5, [pc, #752]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b030:	58d4      	ldr	r4, [r2, r3]
 800b032:	402c      	ands	r4, r5
 800b034:	50d4      	str	r4, [r2, r3]
 800b036:	24f0      	movs	r4, #240	; 0xf0
 800b038:	58d5      	ldr	r5, [r2, r3]
 800b03a:	0124      	lsls	r4, r4, #4
 800b03c:	432c      	orrs	r4, r5
 800b03e:	50d4      	str	r4, [r2, r3]
 800b040:	e038      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b042:	680b      	ldr	r3, [r1, #0]
 800b044:	4aaf      	ldr	r2, [pc, #700]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d100      	bne.n	800b04c <RemapAndLinkDMAtoUARTRx+0x90>
 800b04a:	e07f      	b.n	800b14c <RemapAndLinkDMAtoUARTRx+0x190>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b04c:	4aae      	ldr	r2, [pc, #696]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d057      	beq.n	800b102 <RemapAndLinkDMAtoUARTRx+0x146>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b052:	4aae      	ldr	r2, [pc, #696]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d056      	beq.n	800b106 <RemapAndLinkDMAtoUARTRx+0x14a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b058:	4aad      	ldr	r2, [pc, #692]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d05f      	beq.n	800b11e <RemapAndLinkDMAtoUARTRx+0x162>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b05e:	4aad      	ldr	r2, [pc, #692]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d068      	beq.n	800b136 <RemapAndLinkDMAtoUARTRx+0x17a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b064:	4aac      	ldr	r2, [pc, #688]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d124      	bne.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b06a:	4aac      	ldr	r2, [pc, #688]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b06c:	23a8      	movs	r3, #168	; 0xa8
 800b06e:	4dac      	ldr	r5, [pc, #688]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b070:	58d4      	ldr	r4, [r2, r3]
 800b072:	402c      	ands	r4, r5
 800b074:	50d4      	str	r4, [r2, r3]
 800b076:	2480      	movs	r4, #128	; 0x80
 800b078:	58d5      	ldr	r5, [r2, r3]
 800b07a:	0124      	lsls	r4, r4, #4
 800b07c:	432c      	orrs	r4, r5
 800b07e:	50d4      	str	r4, [r2, r3]
 800b080:	e018      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b082:	680b      	ldr	r3, [r1, #0]
 800b084:	4a9f      	ldr	r2, [pc, #636]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d100      	bne.n	800b08c <RemapAndLinkDMAtoUARTRx+0xd0>
 800b08a:	e08e      	b.n	800b1aa <RemapAndLinkDMAtoUARTRx+0x1ee>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b08c:	4a9e      	ldr	r2, [pc, #632]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d100      	bne.n	800b094 <RemapAndLinkDMAtoUARTRx+0xd8>
 800b092:	e0d0      	b.n	800b236 <RemapAndLinkDMAtoUARTRx+0x27a>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b094:	4a9d      	ldr	r2, [pc, #628]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d100      	bne.n	800b09c <RemapAndLinkDMAtoUARTRx+0xe0>
 800b09a:	e0d8      	b.n	800b24e <RemapAndLinkDMAtoUARTRx+0x292>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b09c:	4a9c      	ldr	r2, [pc, #624]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d100      	bne.n	800b0a4 <RemapAndLinkDMAtoUARTRx+0xe8>
 800b0a2:	e0e0      	b.n	800b266 <RemapAndLinkDMAtoUARTRx+0x2aa>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b0a4:	4a9b      	ldr	r2, [pc, #620]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d100      	bne.n	800b0ac <RemapAndLinkDMAtoUARTRx+0xf0>
 800b0aa:	e0e8      	b.n	800b27e <RemapAndLinkDMAtoUARTRx+0x2c2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b0ac:	4a9a      	ldr	r2, [pc, #616]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d100      	bne.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800b0b2:	e0ef      	b.n	800b294 <RemapAndLinkDMAtoUARTRx+0x2d8>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b0b4:	6641      	str	r1, [r0, #100]	; 0x64
 800b0b6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b0b8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b0ba:	680b      	ldr	r3, [r1, #0]
 800b0bc:	4a91      	ldr	r2, [pc, #580]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d100      	bne.n	800b0c4 <RemapAndLinkDMAtoUARTRx+0x108>
 800b0c2:	e0e9      	b.n	800b298 <RemapAndLinkDMAtoUARTRx+0x2dc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b0c4:	4a90      	ldr	r2, [pc, #576]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d100      	bne.n	800b0cc <RemapAndLinkDMAtoUARTRx+0x110>
 800b0ca:	e0f0      	b.n	800b2ae <RemapAndLinkDMAtoUARTRx+0x2f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b0cc:	4a8f      	ldr	r2, [pc, #572]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d100      	bne.n	800b0d4 <RemapAndLinkDMAtoUARTRx+0x118>
 800b0d2:	e0ee      	b.n	800b2b2 <RemapAndLinkDMAtoUARTRx+0x2f6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b0d4:	4a8e      	ldr	r2, [pc, #568]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d100      	bne.n	800b0dc <RemapAndLinkDMAtoUARTRx+0x120>
 800b0da:	e0f6      	b.n	800b2ca <RemapAndLinkDMAtoUARTRx+0x30e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b0dc:	4a8d      	ldr	r2, [pc, #564]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d100      	bne.n	800b0e4 <RemapAndLinkDMAtoUARTRx+0x128>
 800b0e2:	e092      	b.n	800b20a <RemapAndLinkDMAtoUARTRx+0x24e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b0e4:	4a8c      	ldr	r2, [pc, #560]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d1e4      	bne.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b0ea:	4a8c      	ldr	r2, [pc, #560]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b0ec:	23a8      	movs	r3, #168	; 0xa8
 800b0ee:	4d8c      	ldr	r5, [pc, #560]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b0f0:	58d4      	ldr	r4, [r2, r3]
 800b0f2:	402c      	ands	r4, r5
 800b0f4:	50d4      	str	r4, [r2, r3]
 800b0f6:	24a0      	movs	r4, #160	; 0xa0
 800b0f8:	58d5      	ldr	r5, [r2, r3]
 800b0fa:	0124      	lsls	r4, r4, #4
 800b0fc:	432c      	orrs	r4, r5
 800b0fe:	50d4      	str	r4, [r2, r3]
 800b100:	e7d8      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b102:	4a88      	ldr	r2, [pc, #544]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b104:	e7b2      	b.n	800b06c <RemapAndLinkDMAtoUARTRx+0xb0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b106:	23a8      	movs	r3, #168	; 0xa8
 800b108:	4a86      	ldr	r2, [pc, #536]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b10a:	4d87      	ldr	r5, [pc, #540]	; (800b328 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b10c:	58d4      	ldr	r4, [r2, r3]
 800b10e:	402c      	ands	r4, r5
 800b110:	50d4      	str	r4, [r2, r3]
 800b112:	2480      	movs	r4, #128	; 0x80
 800b114:	58d5      	ldr	r5, [r2, r3]
 800b116:	0324      	lsls	r4, r4, #12
 800b118:	432c      	orrs	r4, r5
 800b11a:	50d4      	str	r4, [r2, r3]
 800b11c:	e7ca      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b11e:	23a8      	movs	r3, #168	; 0xa8
 800b120:	4a80      	ldr	r2, [pc, #512]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b122:	4d82      	ldr	r5, [pc, #520]	; (800b32c <RemapAndLinkDMAtoUARTRx+0x370>)
 800b124:	58d4      	ldr	r4, [r2, r3]
 800b126:	402c      	ands	r4, r5
 800b128:	50d4      	str	r4, [r2, r3]
 800b12a:	2480      	movs	r4, #128	; 0x80
 800b12c:	58d5      	ldr	r5, [r2, r3]
 800b12e:	0424      	lsls	r4, r4, #16
 800b130:	432c      	orrs	r4, r5
 800b132:	50d4      	str	r4, [r2, r3]
 800b134:	e7be      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b136:	23a8      	movs	r3, #168	; 0xa8
 800b138:	25f0      	movs	r5, #240	; 0xf0
 800b13a:	4a78      	ldr	r2, [pc, #480]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b13c:	58d4      	ldr	r4, [r2, r3]
 800b13e:	43ac      	bics	r4, r5
 800b140:	50d4      	str	r4, [r2, r3]
 800b142:	58d4      	ldr	r4, [r2, r3]
 800b144:	3d70      	subs	r5, #112	; 0x70
 800b146:	432c      	orrs	r4, r5
 800b148:	50d4      	str	r4, [r2, r3]
 800b14a:	e7b3      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b14c:	23a8      	movs	r3, #168	; 0xa8
 800b14e:	250f      	movs	r5, #15
 800b150:	4a74      	ldr	r2, [pc, #464]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b152:	58d4      	ldr	r4, [r2, r3]
 800b154:	43ac      	bics	r4, r5
 800b156:	50d4      	str	r4, [r2, r3]
 800b158:	58d4      	ldr	r4, [r2, r3]
 800b15a:	3d07      	subs	r5, #7
 800b15c:	432c      	orrs	r4, r5
 800b15e:	50d4      	str	r4, [r2, r3]
 800b160:	e7a8      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b162:	680b      	ldr	r3, [r1, #0]
 800b164:	4a67      	ldr	r2, [pc, #412]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d05a      	beq.n	800b220 <RemapAndLinkDMAtoUARTRx+0x264>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b16a:	4a67      	ldr	r2, [pc, #412]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d100      	bne.n	800b172 <RemapAndLinkDMAtoUARTRx+0x1b6>
 800b170:	e103      	b.n	800b37a <RemapAndLinkDMAtoUARTRx+0x3be>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b172:	4a66      	ldr	r2, [pc, #408]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d100      	bne.n	800b17a <RemapAndLinkDMAtoUARTRx+0x1be>
 800b178:	e101      	b.n	800b37e <RemapAndLinkDMAtoUARTRx+0x3c2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b17a:	4a65      	ldr	r2, [pc, #404]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d100      	bne.n	800b182 <RemapAndLinkDMAtoUARTRx+0x1c6>
 800b180:	e109      	b.n	800b396 <RemapAndLinkDMAtoUARTRx+0x3da>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b182:	4a64      	ldr	r2, [pc, #400]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d100      	bne.n	800b18a <RemapAndLinkDMAtoUARTRx+0x1ce>
 800b188:	e111      	b.n	800b3ae <RemapAndLinkDMAtoUARTRx+0x3f2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b18a:	4a63      	ldr	r2, [pc, #396]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d000      	beq.n	800b192 <RemapAndLinkDMAtoUARTRx+0x1d6>
 800b190:	e790      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b192:	4a62      	ldr	r2, [pc, #392]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b194:	23a8      	movs	r3, #168	; 0xa8
 800b196:	4d62      	ldr	r5, [pc, #392]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b198:	58d4      	ldr	r4, [r2, r3]
 800b19a:	402c      	ands	r4, r5
 800b19c:	50d4      	str	r4, [r2, r3]
 800b19e:	24b0      	movs	r4, #176	; 0xb0
 800b1a0:	58d5      	ldr	r5, [r2, r3]
 800b1a2:	0124      	lsls	r4, r4, #4
 800b1a4:	432c      	orrs	r4, r5
 800b1a6:	50d4      	str	r4, [r2, r3]
 800b1a8:	e784      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b1aa:	23a8      	movs	r3, #168	; 0xa8
 800b1ac:	250f      	movs	r5, #15
 800b1ae:	4a5d      	ldr	r2, [pc, #372]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b1b0:	58d4      	ldr	r4, [r2, r3]
 800b1b2:	43ac      	bics	r4, r5
 800b1b4:	50d4      	str	r4, [r2, r3]
 800b1b6:	58d4      	ldr	r4, [r2, r3]
 800b1b8:	3d06      	subs	r5, #6
 800b1ba:	432c      	orrs	r4, r5
 800b1bc:	50d4      	str	r4, [r2, r3]
 800b1be:	e779      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b1c0:	680b      	ldr	r3, [r1, #0]
 800b1c2:	4a50      	ldr	r2, [pc, #320]	; (800b304 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d100      	bne.n	800b1ca <RemapAndLinkDMAtoUARTRx+0x20e>
 800b1c8:	e120      	b.n	800b40c <RemapAndLinkDMAtoUARTRx+0x450>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b1ca:	4a4f      	ldr	r2, [pc, #316]	; (800b308 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d100      	bne.n	800b1d2 <RemapAndLinkDMAtoUARTRx+0x216>
 800b1d0:	e127      	b.n	800b422 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b1d2:	4a4e      	ldr	r2, [pc, #312]	; (800b30c <RemapAndLinkDMAtoUARTRx+0x350>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d100      	bne.n	800b1da <RemapAndLinkDMAtoUARTRx+0x21e>
 800b1d8:	e125      	b.n	800b426 <RemapAndLinkDMAtoUARTRx+0x46a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b1da:	4a4d      	ldr	r2, [pc, #308]	; (800b310 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d100      	bne.n	800b1e2 <RemapAndLinkDMAtoUARTRx+0x226>
 800b1e0:	e12d      	b.n	800b43e <RemapAndLinkDMAtoUARTRx+0x482>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b1e2:	4a4c      	ldr	r2, [pc, #304]	; (800b314 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d100      	bne.n	800b1ea <RemapAndLinkDMAtoUARTRx+0x22e>
 800b1e8:	e135      	b.n	800b456 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b1ea:	4a4b      	ldr	r2, [pc, #300]	; (800b318 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d000      	beq.n	800b1f2 <RemapAndLinkDMAtoUARTRx+0x236>
 800b1f0:	e760      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b1f2:	4a4a      	ldr	r2, [pc, #296]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b1f4:	23a8      	movs	r3, #168	; 0xa8
 800b1f6:	4d4a      	ldr	r5, [pc, #296]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b1f8:	58d4      	ldr	r4, [r2, r3]
 800b1fa:	402c      	ands	r4, r5
 800b1fc:	50d4      	str	r4, [r2, r3]
 800b1fe:	24c0      	movs	r4, #192	; 0xc0
 800b200:	58d5      	ldr	r5, [r2, r3]
 800b202:	0124      	lsls	r4, r4, #4
 800b204:	432c      	orrs	r4, r5
 800b206:	50d4      	str	r4, [r2, r3]
 800b208:	e754      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b20a:	23a8      	movs	r3, #168	; 0xa8
 800b20c:	25f0      	movs	r5, #240	; 0xf0
 800b20e:	4a43      	ldr	r2, [pc, #268]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b210:	58d4      	ldr	r4, [r2, r3]
 800b212:	43ac      	bics	r4, r5
 800b214:	50d4      	str	r4, [r2, r3]
 800b216:	58d4      	ldr	r4, [r2, r3]
 800b218:	3d50      	subs	r5, #80	; 0x50
 800b21a:	432c      	orrs	r4, r5
 800b21c:	50d4      	str	r4, [r2, r3]
 800b21e:	e749      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b220:	23a8      	movs	r3, #168	; 0xa8
 800b222:	250f      	movs	r5, #15
 800b224:	4a3f      	ldr	r2, [pc, #252]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b226:	58d4      	ldr	r4, [r2, r3]
 800b228:	43ac      	bics	r4, r5
 800b22a:	50d4      	str	r4, [r2, r3]
 800b22c:	58d4      	ldr	r4, [r2, r3]
 800b22e:	3d04      	subs	r5, #4
 800b230:	432c      	orrs	r4, r5
 800b232:	50d4      	str	r4, [r2, r3]
 800b234:	e73e      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b236:	4a3b      	ldr	r2, [pc, #236]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b238:	23a8      	movs	r3, #168	; 0xa8
 800b23a:	4d39      	ldr	r5, [pc, #228]	; (800b320 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b23c:	58d4      	ldr	r4, [r2, r3]
 800b23e:	402c      	ands	r4, r5
 800b240:	50d4      	str	r4, [r2, r3]
 800b242:	2490      	movs	r4, #144	; 0x90
 800b244:	58d5      	ldr	r5, [r2, r3]
 800b246:	0124      	lsls	r4, r4, #4
 800b248:	432c      	orrs	r4, r5
 800b24a:	50d4      	str	r4, [r2, r3]
 800b24c:	e732      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b24e:	23a8      	movs	r3, #168	; 0xa8
 800b250:	4a34      	ldr	r2, [pc, #208]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b252:	4d35      	ldr	r5, [pc, #212]	; (800b328 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b254:	58d4      	ldr	r4, [r2, r3]
 800b256:	402c      	ands	r4, r5
 800b258:	50d4      	str	r4, [r2, r3]
 800b25a:	2490      	movs	r4, #144	; 0x90
 800b25c:	58d5      	ldr	r5, [r2, r3]
 800b25e:	0324      	lsls	r4, r4, #12
 800b260:	432c      	orrs	r4, r5
 800b262:	50d4      	str	r4, [r2, r3]
 800b264:	e726      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b266:	23a8      	movs	r3, #168	; 0xa8
 800b268:	4a2e      	ldr	r2, [pc, #184]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b26a:	4d30      	ldr	r5, [pc, #192]	; (800b32c <RemapAndLinkDMAtoUARTRx+0x370>)
 800b26c:	58d4      	ldr	r4, [r2, r3]
 800b26e:	402c      	ands	r4, r5
 800b270:	50d4      	str	r4, [r2, r3]
 800b272:	2490      	movs	r4, #144	; 0x90
 800b274:	58d5      	ldr	r5, [r2, r3]
 800b276:	0424      	lsls	r4, r4, #16
 800b278:	432c      	orrs	r4, r5
 800b27a:	50d4      	str	r4, [r2, r3]
 800b27c:	e71a      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b27e:	23a8      	movs	r3, #168	; 0xa8
 800b280:	25f0      	movs	r5, #240	; 0xf0
 800b282:	4a26      	ldr	r2, [pc, #152]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b284:	58d4      	ldr	r4, [r2, r3]
 800b286:	43ac      	bics	r4, r5
 800b288:	50d4      	str	r4, [r2, r3]
 800b28a:	58d4      	ldr	r4, [r2, r3]
 800b28c:	3d60      	subs	r5, #96	; 0x60
 800b28e:	432c      	orrs	r4, r5
 800b290:	50d4      	str	r4, [r2, r3]
 800b292:	e70f      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b294:	4a21      	ldr	r2, [pc, #132]	; (800b31c <RemapAndLinkDMAtoUARTRx+0x360>)
 800b296:	e7cf      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0x27c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b298:	23a8      	movs	r3, #168	; 0xa8
 800b29a:	250f      	movs	r5, #15
 800b29c:	4a21      	ldr	r2, [pc, #132]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b29e:	58d4      	ldr	r4, [r2, r3]
 800b2a0:	43ac      	bics	r4, r5
 800b2a2:	50d4      	str	r4, [r2, r3]
 800b2a4:	58d4      	ldr	r4, [r2, r3]
 800b2a6:	3d05      	subs	r5, #5
 800b2a8:	432c      	orrs	r4, r5
 800b2aa:	50d4      	str	r4, [r2, r3]
 800b2ac:	e702      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b2ae:	4a1d      	ldr	r2, [pc, #116]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b2b0:	e71c      	b.n	800b0ec <RemapAndLinkDMAtoUARTRx+0x130>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b2b2:	23a8      	movs	r3, #168	; 0xa8
 800b2b4:	4a1b      	ldr	r2, [pc, #108]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b2b6:	4d1c      	ldr	r5, [pc, #112]	; (800b328 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b2b8:	58d4      	ldr	r4, [r2, r3]
 800b2ba:	402c      	ands	r4, r5
 800b2bc:	50d4      	str	r4, [r2, r3]
 800b2be:	24a0      	movs	r4, #160	; 0xa0
 800b2c0:	58d5      	ldr	r5, [r2, r3]
 800b2c2:	0324      	lsls	r4, r4, #12
 800b2c4:	432c      	orrs	r4, r5
 800b2c6:	50d4      	str	r4, [r2, r3]
 800b2c8:	e6f4      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b2ca:	23a8      	movs	r3, #168	; 0xa8
 800b2cc:	4a15      	ldr	r2, [pc, #84]	; (800b324 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b2ce:	4d17      	ldr	r5, [pc, #92]	; (800b32c <RemapAndLinkDMAtoUARTRx+0x370>)
 800b2d0:	58d4      	ldr	r4, [r2, r3]
 800b2d2:	402c      	ands	r4, r5
 800b2d4:	50d4      	str	r4, [r2, r3]
 800b2d6:	24a0      	movs	r4, #160	; 0xa0
 800b2d8:	58d5      	ldr	r5, [r2, r3]
 800b2da:	0424      	lsls	r4, r4, #16
 800b2dc:	432c      	orrs	r4, r5
 800b2de:	50d4      	str	r4, [r2, r3]
 800b2e0:	e6e8      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	40013800 	.word	0x40013800
 800b2e8:	40004400 	.word	0x40004400
 800b2ec:	40004800 	.word	0x40004800
 800b2f0:	40004c00 	.word	0x40004c00
 800b2f4:	40005000 	.word	0x40005000
 800b2f8:	40011400 	.word	0x40011400
 800b2fc:	40011800 	.word	0x40011800
 800b300:	40011c00 	.word	0x40011c00
 800b304:	40020008 	.word	0x40020008
 800b308:	40020030 	.word	0x40020030
 800b30c:	40020058 	.word	0x40020058
 800b310:	4002006c 	.word	0x4002006c
 800b314:	4002041c 	.word	0x4002041c
 800b318:	40020430 	.word	0x40020430
 800b31c:	40020400 	.word	0x40020400
 800b320:	fffff0ff 	.word	0xfffff0ff
 800b324:	40020000 	.word	0x40020000
 800b328:	fff0ffff 	.word	0xfff0ffff
 800b32c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b330:	680b      	ldr	r3, [r1, #0]
 800b332:	4a93      	ldr	r2, [pc, #588]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d100      	bne.n	800b33a <RemapAndLinkDMAtoUARTRx+0x37e>
 800b338:	e098      	b.n	800b46c <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b33a:	4a92      	ldr	r2, [pc, #584]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d100      	bne.n	800b342 <RemapAndLinkDMAtoUARTRx+0x386>
 800b340:	e09f      	b.n	800b482 <RemapAndLinkDMAtoUARTRx+0x4c6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b342:	4a91      	ldr	r2, [pc, #580]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d100      	bne.n	800b34a <RemapAndLinkDMAtoUARTRx+0x38e>
 800b348:	e09d      	b.n	800b486 <RemapAndLinkDMAtoUARTRx+0x4ca>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b34a:	4a90      	ldr	r2, [pc, #576]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d100      	bne.n	800b352 <RemapAndLinkDMAtoUARTRx+0x396>
 800b350:	e0a5      	b.n	800b49e <RemapAndLinkDMAtoUARTRx+0x4e2>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b352:	4a8f      	ldr	r2, [pc, #572]	; (800b590 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d100      	bne.n	800b35a <RemapAndLinkDMAtoUARTRx+0x39e>
 800b358:	e0ad      	b.n	800b4b6 <RemapAndLinkDMAtoUARTRx+0x4fa>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b35a:	4a8e      	ldr	r2, [pc, #568]	; (800b594 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d000      	beq.n	800b362 <RemapAndLinkDMAtoUARTRx+0x3a6>
 800b360:	e6a8      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b362:	4a8d      	ldr	r2, [pc, #564]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b364:	23a8      	movs	r3, #168	; 0xa8
 800b366:	4d8d      	ldr	r5, [pc, #564]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800b368:	58d4      	ldr	r4, [r2, r3]
 800b36a:	402c      	ands	r4, r5
 800b36c:	50d4      	str	r4, [r2, r3]
 800b36e:	24d0      	movs	r4, #208	; 0xd0
 800b370:	58d5      	ldr	r5, [r2, r3]
 800b372:	0124      	lsls	r4, r4, #4
 800b374:	432c      	orrs	r4, r5
 800b376:	50d4      	str	r4, [r2, r3]
 800b378:	e69c      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b37a:	4a89      	ldr	r2, [pc, #548]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b37c:	e70a      	b.n	800b194 <RemapAndLinkDMAtoUARTRx+0x1d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b37e:	23a8      	movs	r3, #168	; 0xa8
 800b380:	4a87      	ldr	r2, [pc, #540]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b382:	4d88      	ldr	r5, [pc, #544]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b384:	58d4      	ldr	r4, [r2, r3]
 800b386:	402c      	ands	r4, r5
 800b388:	50d4      	str	r4, [r2, r3]
 800b38a:	24b0      	movs	r4, #176	; 0xb0
 800b38c:	58d5      	ldr	r5, [r2, r3]
 800b38e:	0324      	lsls	r4, r4, #12
 800b390:	432c      	orrs	r4, r5
 800b392:	50d4      	str	r4, [r2, r3]
 800b394:	e68e      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b396:	23a8      	movs	r3, #168	; 0xa8
 800b398:	4a81      	ldr	r2, [pc, #516]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b39a:	4d83      	ldr	r5, [pc, #524]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b39c:	58d4      	ldr	r4, [r2, r3]
 800b39e:	402c      	ands	r4, r5
 800b3a0:	50d4      	str	r4, [r2, r3]
 800b3a2:	24b0      	movs	r4, #176	; 0xb0
 800b3a4:	58d5      	ldr	r5, [r2, r3]
 800b3a6:	0424      	lsls	r4, r4, #16
 800b3a8:	432c      	orrs	r4, r5
 800b3aa:	50d4      	str	r4, [r2, r3]
 800b3ac:	e682      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b3ae:	23a8      	movs	r3, #168	; 0xa8
 800b3b0:	25f0      	movs	r5, #240	; 0xf0
 800b3b2:	4a79      	ldr	r2, [pc, #484]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b3b4:	58d4      	ldr	r4, [r2, r3]
 800b3b6:	43ac      	bics	r4, r5
 800b3b8:	50d4      	str	r4, [r2, r3]
 800b3ba:	58d4      	ldr	r4, [r2, r3]
 800b3bc:	3d40      	subs	r5, #64	; 0x40
 800b3be:	432c      	orrs	r4, r5
 800b3c0:	50d4      	str	r4, [r2, r3]
 800b3c2:	e677      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b3c4:	680b      	ldr	r3, [r1, #0]
 800b3c6:	4a6e      	ldr	r2, [pc, #440]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d07f      	beq.n	800b4cc <RemapAndLinkDMAtoUARTRx+0x510>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b3cc:	4a6d      	ldr	r2, [pc, #436]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d100      	bne.n	800b3d4 <RemapAndLinkDMAtoUARTRx+0x418>
 800b3d2:	e086      	b.n	800b4e2 <RemapAndLinkDMAtoUARTRx+0x526>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b3d4:	4a6c      	ldr	r2, [pc, #432]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d100      	bne.n	800b3dc <RemapAndLinkDMAtoUARTRx+0x420>
 800b3da:	e084      	b.n	800b4e6 <RemapAndLinkDMAtoUARTRx+0x52a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b3dc:	4a6b      	ldr	r2, [pc, #428]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d100      	bne.n	800b3e4 <RemapAndLinkDMAtoUARTRx+0x428>
 800b3e2:	e08c      	b.n	800b4fe <RemapAndLinkDMAtoUARTRx+0x542>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b3e4:	4a6a      	ldr	r2, [pc, #424]	; (800b590 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d100      	bne.n	800b3ec <RemapAndLinkDMAtoUARTRx+0x430>
 800b3ea:	e094      	b.n	800b516 <RemapAndLinkDMAtoUARTRx+0x55a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b3ec:	4a69      	ldr	r2, [pc, #420]	; (800b594 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d000      	beq.n	800b3f4 <RemapAndLinkDMAtoUARTRx+0x438>
 800b3f2:	e65f      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b3f4:	4a68      	ldr	r2, [pc, #416]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b3f6:	23a8      	movs	r3, #168	; 0xa8
 800b3f8:	4d68      	ldr	r5, [pc, #416]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800b3fa:	58d4      	ldr	r4, [r2, r3]
 800b3fc:	402c      	ands	r4, r5
 800b3fe:	50d4      	str	r4, [r2, r3]
 800b400:	24e0      	movs	r4, #224	; 0xe0
 800b402:	58d5      	ldr	r5, [r2, r3]
 800b404:	0124      	lsls	r4, r4, #4
 800b406:	432c      	orrs	r4, r5
 800b408:	50d4      	str	r4, [r2, r3]
 800b40a:	e653      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b40c:	23a8      	movs	r3, #168	; 0xa8
 800b40e:	250f      	movs	r5, #15
 800b410:	4a63      	ldr	r2, [pc, #396]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b412:	58d4      	ldr	r4, [r2, r3]
 800b414:	43ac      	bics	r4, r5
 800b416:	50d4      	str	r4, [r2, r3]
 800b418:	58d4      	ldr	r4, [r2, r3]
 800b41a:	3d03      	subs	r5, #3
 800b41c:	432c      	orrs	r4, r5
 800b41e:	50d4      	str	r4, [r2, r3]
 800b420:	e648      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b422:	4a5f      	ldr	r2, [pc, #380]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b424:	e6e6      	b.n	800b1f4 <RemapAndLinkDMAtoUARTRx+0x238>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b426:	23a8      	movs	r3, #168	; 0xa8
 800b428:	4a5d      	ldr	r2, [pc, #372]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b42a:	4d5e      	ldr	r5, [pc, #376]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b42c:	58d4      	ldr	r4, [r2, r3]
 800b42e:	402c      	ands	r4, r5
 800b430:	50d4      	str	r4, [r2, r3]
 800b432:	24c0      	movs	r4, #192	; 0xc0
 800b434:	58d5      	ldr	r5, [r2, r3]
 800b436:	0324      	lsls	r4, r4, #12
 800b438:	432c      	orrs	r4, r5
 800b43a:	50d4      	str	r4, [r2, r3]
 800b43c:	e63a      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b43e:	23a8      	movs	r3, #168	; 0xa8
 800b440:	4a57      	ldr	r2, [pc, #348]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b442:	4d59      	ldr	r5, [pc, #356]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b444:	58d4      	ldr	r4, [r2, r3]
 800b446:	402c      	ands	r4, r5
 800b448:	50d4      	str	r4, [r2, r3]
 800b44a:	24c0      	movs	r4, #192	; 0xc0
 800b44c:	58d5      	ldr	r5, [r2, r3]
 800b44e:	0424      	lsls	r4, r4, #16
 800b450:	432c      	orrs	r4, r5
 800b452:	50d4      	str	r4, [r2, r3]
 800b454:	e62e      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b456:	23a8      	movs	r3, #168	; 0xa8
 800b458:	25f0      	movs	r5, #240	; 0xf0
 800b45a:	4a4f      	ldr	r2, [pc, #316]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b45c:	58d4      	ldr	r4, [r2, r3]
 800b45e:	43ac      	bics	r4, r5
 800b460:	50d4      	str	r4, [r2, r3]
 800b462:	58d4      	ldr	r4, [r2, r3]
 800b464:	3d30      	subs	r5, #48	; 0x30
 800b466:	432c      	orrs	r4, r5
 800b468:	50d4      	str	r4, [r2, r3]
 800b46a:	e623      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b46c:	23a8      	movs	r3, #168	; 0xa8
 800b46e:	250f      	movs	r5, #15
 800b470:	4a4b      	ldr	r2, [pc, #300]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b472:	58d4      	ldr	r4, [r2, r3]
 800b474:	43ac      	bics	r4, r5
 800b476:	50d4      	str	r4, [r2, r3]
 800b478:	58d4      	ldr	r4, [r2, r3]
 800b47a:	3d02      	subs	r5, #2
 800b47c:	432c      	orrs	r4, r5
 800b47e:	50d4      	str	r4, [r2, r3]
 800b480:	e618      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b482:	4a47      	ldr	r2, [pc, #284]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b484:	e76e      	b.n	800b364 <RemapAndLinkDMAtoUARTRx+0x3a8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b486:	23a8      	movs	r3, #168	; 0xa8
 800b488:	4a45      	ldr	r2, [pc, #276]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b48a:	4d46      	ldr	r5, [pc, #280]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b48c:	58d4      	ldr	r4, [r2, r3]
 800b48e:	402c      	ands	r4, r5
 800b490:	50d4      	str	r4, [r2, r3]
 800b492:	24d0      	movs	r4, #208	; 0xd0
 800b494:	58d5      	ldr	r5, [r2, r3]
 800b496:	0324      	lsls	r4, r4, #12
 800b498:	432c      	orrs	r4, r5
 800b49a:	50d4      	str	r4, [r2, r3]
 800b49c:	e60a      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b49e:	23a8      	movs	r3, #168	; 0xa8
 800b4a0:	4a3f      	ldr	r2, [pc, #252]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b4a2:	4d41      	ldr	r5, [pc, #260]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b4a4:	58d4      	ldr	r4, [r2, r3]
 800b4a6:	402c      	ands	r4, r5
 800b4a8:	50d4      	str	r4, [r2, r3]
 800b4aa:	24d0      	movs	r4, #208	; 0xd0
 800b4ac:	58d5      	ldr	r5, [r2, r3]
 800b4ae:	0424      	lsls	r4, r4, #16
 800b4b0:	432c      	orrs	r4, r5
 800b4b2:	50d4      	str	r4, [r2, r3]
 800b4b4:	e5fe      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b4b6:	23a8      	movs	r3, #168	; 0xa8
 800b4b8:	25f0      	movs	r5, #240	; 0xf0
 800b4ba:	4a37      	ldr	r2, [pc, #220]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b4bc:	58d4      	ldr	r4, [r2, r3]
 800b4be:	43ac      	bics	r4, r5
 800b4c0:	50d4      	str	r4, [r2, r3]
 800b4c2:	58d4      	ldr	r4, [r2, r3]
 800b4c4:	3d20      	subs	r5, #32
 800b4c6:	432c      	orrs	r4, r5
 800b4c8:	50d4      	str	r4, [r2, r3]
 800b4ca:	e5f3      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b4cc:	23a8      	movs	r3, #168	; 0xa8
 800b4ce:	250f      	movs	r5, #15
 800b4d0:	4a33      	ldr	r2, [pc, #204]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b4d2:	58d4      	ldr	r4, [r2, r3]
 800b4d4:	43ac      	bics	r4, r5
 800b4d6:	50d4      	str	r4, [r2, r3]
 800b4d8:	58d4      	ldr	r4, [r2, r3]
 800b4da:	3d01      	subs	r5, #1
 800b4dc:	432c      	orrs	r4, r5
 800b4de:	50d4      	str	r4, [r2, r3]
 800b4e0:	e5e8      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b4e2:	4a2f      	ldr	r2, [pc, #188]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b4e4:	e787      	b.n	800b3f6 <RemapAndLinkDMAtoUARTRx+0x43a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b4e6:	23a8      	movs	r3, #168	; 0xa8
 800b4e8:	4a2d      	ldr	r2, [pc, #180]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b4ea:	4d2e      	ldr	r5, [pc, #184]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b4ec:	58d4      	ldr	r4, [r2, r3]
 800b4ee:	402c      	ands	r4, r5
 800b4f0:	50d4      	str	r4, [r2, r3]
 800b4f2:	24e0      	movs	r4, #224	; 0xe0
 800b4f4:	58d5      	ldr	r5, [r2, r3]
 800b4f6:	0324      	lsls	r4, r4, #12
 800b4f8:	432c      	orrs	r4, r5
 800b4fa:	50d4      	str	r4, [r2, r3]
 800b4fc:	e5da      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b4fe:	23a8      	movs	r3, #168	; 0xa8
 800b500:	4a27      	ldr	r2, [pc, #156]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b502:	4d29      	ldr	r5, [pc, #164]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b504:	58d4      	ldr	r4, [r2, r3]
 800b506:	402c      	ands	r4, r5
 800b508:	50d4      	str	r4, [r2, r3]
 800b50a:	24e0      	movs	r4, #224	; 0xe0
 800b50c:	58d5      	ldr	r5, [r2, r3]
 800b50e:	0424      	lsls	r4, r4, #16
 800b510:	432c      	orrs	r4, r5
 800b512:	50d4      	str	r4, [r2, r3]
 800b514:	e5ce      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b516:	23a8      	movs	r3, #168	; 0xa8
 800b518:	25f0      	movs	r5, #240	; 0xf0
 800b51a:	4a1f      	ldr	r2, [pc, #124]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b51c:	58d4      	ldr	r4, [r2, r3]
 800b51e:	43ac      	bics	r4, r5
 800b520:	50d4      	str	r4, [r2, r3]
 800b522:	58d4      	ldr	r4, [r2, r3]
 800b524:	3d10      	subs	r5, #16
 800b526:	432c      	orrs	r4, r5
 800b528:	50d4      	str	r4, [r2, r3]
 800b52a:	e5c3      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b52c:	23a8      	movs	r3, #168	; 0xa8
 800b52e:	260f      	movs	r6, #15
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b532:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b534:	43b5      	bics	r5, r6
 800b536:	50d5      	str	r5, [r2, r3]
 800b538:	58d4      	ldr	r4, [r2, r3]
 800b53a:	4334      	orrs	r4, r6
 800b53c:	50d4      	str	r4, [r2, r3]
 800b53e:	e5b9      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b540:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b542:	e573      	b.n	800b02c <RemapAndLinkDMAtoUARTRx+0x70>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b544:	23a8      	movs	r3, #168	; 0xa8
 800b546:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b548:	4d16      	ldr	r5, [pc, #88]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b54a:	58d4      	ldr	r4, [r2, r3]
 800b54c:	402c      	ands	r4, r5
 800b54e:	50d4      	str	r4, [r2, r3]
 800b550:	24f0      	movs	r4, #240	; 0xf0
 800b552:	58d5      	ldr	r5, [r2, r3]
 800b554:	0324      	lsls	r4, r4, #12
 800b556:	432c      	orrs	r4, r5
 800b558:	50d4      	str	r4, [r2, r3]
 800b55a:	e5ab      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b55c:	23a8      	movs	r3, #168	; 0xa8
 800b55e:	4a10      	ldr	r2, [pc, #64]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b560:	4d11      	ldr	r5, [pc, #68]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b562:	58d4      	ldr	r4, [r2, r3]
 800b564:	402c      	ands	r4, r5
 800b566:	50d4      	str	r4, [r2, r3]
 800b568:	24f0      	movs	r4, #240	; 0xf0
 800b56a:	58d5      	ldr	r5, [r2, r3]
 800b56c:	0424      	lsls	r4, r4, #16
 800b56e:	432c      	orrs	r4, r5
 800b570:	50d4      	str	r4, [r2, r3]
 800b572:	e59f      	b.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b574:	23a8      	movs	r3, #168	; 0xa8
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b578:	26f0      	movs	r6, #240	; 0xf0
 800b57a:	58d5      	ldr	r5, [r2, r3]
 800b57c:	e7da      	b.n	800b534 <RemapAndLinkDMAtoUARTRx+0x578>
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	40020008 	.word	0x40020008
 800b584:	40020030 	.word	0x40020030
 800b588:	40020058 	.word	0x40020058
 800b58c:	4002006c 	.word	0x4002006c
 800b590:	4002041c 	.word	0x4002041c
 800b594:	40020430 	.word	0x40020430
 800b598:	40020400 	.word	0x40020400
 800b59c:	fffff0ff 	.word	0xfffff0ff
 800b5a0:	40020000 	.word	0x40020000
 800b5a4:	fff0ffff 	.word	0xfff0ffff
 800b5a8:	ff0fffff 	.word	0xff0fffff

0800b5ac <DMA_STREAM_Setup>:
{	
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	0016      	movs	r6, r2
 800b5b0:	0005      	movs	r5, r0
 800b5b2:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800b5b4:	f7ff f8c0 	bl	800a738 <GetPort>
	hDMA = &streamDMA[port-1];
 800b5b8:	3801      	subs	r0, #1
 800b5ba:	00c4      	lsls	r4, r0, #3
 800b5bc:	1a24      	subs	r4, r4, r0
 800b5be:	480a      	ldr	r0, [pc, #40]	; (800b5e8 <DMA_STREAM_Setup+0x3c>)
 800b5c0:	00e4      	lsls	r4, r4, #3
 800b5c2:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b5c4:	0021      	movs	r1, r4
 800b5c6:	0028      	movs	r0, r5
 800b5c8:	f7ff fcf8 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b5cc:	0020      	movs	r0, r4
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	f7ff fc3a 	bl	800ae48 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b5d4:	2369      	movs	r3, #105	; 0x69
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	0032      	movs	r2, r6
 800b5de:	0028      	movs	r0, r5
 800b5e0:	3128      	adds	r1, #40	; 0x28
 800b5e2:	f007 fbc5 	bl	8012d70 <HAL_UART_Receive_DMA>
}
 800b5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e8:	20002500 	.word	0x20002500

0800b5ec <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ee:	46d6      	mov	lr, sl
 800b5f0:	464f      	mov	r7, r9
 800b5f2:	4646      	mov	r6, r8
 800b5f4:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800b5f6:	1e47      	subs	r7, r0, #1
 800b5f8:	00fe      	lsls	r6, r7, #3
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <SwitchStreamDMAToMsg+0xa0>)
 800b5fc:	1bf6      	subs	r6, r6, r7
 800b5fe:	00f6      	lsls	r6, r6, #3
 800b600:	4699      	mov	r9, r3
 800b602:	46b2      	mov	sl, r6
 800b604:	44ca      	add	sl, r9
void SwitchStreamDMAToMsg(uint8_t port) {
 800b606:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 800b608:	4650      	mov	r0, sl
 800b60a:	f004 fff1 	bl	80105f0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b60e:	464b      	mov	r3, r9
 800b610:	2500      	movs	r5, #0
 800b612:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800b614:	4b1e      	ldr	r3, [pc, #120]	; (800b690 <SwitchStreamDMAToMsg+0xa4>)
 800b616:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800b618:	6055      	str	r5, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b61a:	50fd      	str	r5, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800b61c:	4b1d      	ldr	r3, [pc, #116]	; (800b694 <SwitchStreamDMAToMsg+0xa8>)
 800b61e:	50fd      	str	r5, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b620:	4b1d      	ldr	r3, [pc, #116]	; (800b698 <SwitchStreamDMAToMsg+0xac>)
 800b622:	18f4      	adds	r4, r6, r3
	hDMA->Instance = ch;
 800b624:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b626:	2380      	movs	r3, #128	; 0x80
 800b628:	60e3      	str	r3, [r4, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b62a:	3b60      	subs	r3, #96	; 0x60
 800b62c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b62e:	2380      	movs	r3, #128	; 0x80
 800b630:	019b      	lsls	r3, r3, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b632:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b634:	60a5      	str	r5, [r4, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b636:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b638:	6165      	str	r5, [r4, #20]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b63a:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(hDMA);		
 800b63c:	0020      	movs	r0, r4
 800b63e:	f004 ff7f 	bl	8010540 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b642:	4653      	mov	r3, sl
 800b644:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b646:	f7ff f877 	bl	800a738 <GetPort>
 800b64a:	4b14      	ldr	r3, [pc, #80]	; (800b69c <SwitchStreamDMAToMsg+0xb0>)
 800b64c:	541d      	strb	r5, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800b64e:	464b      	mov	r3, r9
 800b650:	50f5      	str	r5, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <SwitchStreamDMAToMsg+0xb4>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b654:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] = 0;
 800b656:	50fd      	str	r5, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b658:	f002 fa72 	bl	800db40 <GetUart>
 800b65c:	0005      	movs	r5, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b65e:	0021      	movs	r1, r4
 800b660:	f7ff fcac 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b664:	2100      	movs	r1, #0
 800b666:	0020      	movs	r0, r4
 800b668:	f7ff fbee 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b66c:	0028      	movs	r0, r5
 800b66e:	f7ff f863 	bl	800a738 <GetPort>
 800b672:	1e41      	subs	r1, r0, #1
 800b674:	480b      	ldr	r0, [pc, #44]	; (800b6a4 <SwitchStreamDMAToMsg+0xb8>)
 800b676:	2201      	movs	r2, #1
 800b678:	1809      	adds	r1, r1, r0
 800b67a:	0028      	movs	r0, r5
 800b67c:	f007 fb18 	bl	8012cb0 <HAL_UART_Receive_IT>
}
 800b680:	bce0      	pop	{r5, r6, r7}
 800b682:	46ba      	mov	sl, r7
 800b684:	46b1      	mov	r9, r6
 800b686:	46a8      	mov	r8, r5
 800b688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68a:	46c0      	nop			; (mov r8, r8)
 800b68c:	20002500 	.word	0x20002500
 800b690:	200019a0 	.word	0x200019a0
 800b694:	200019b4 	.word	0x200019b4
 800b698:	200026f8 	.word	0x200026f8
 800b69c:	20000c64 	.word	0x20000c64
 800b6a0:	2000198c 	.word	0x2000198c
 800b6a4:	20001dd0 	.word	0x20001dd0

0800b6a8 <SetupMessagingRxDMAs>:
{	
 800b6a8:	b570      	push	{r4, r5, r6, lr}
	if (portStatus[P1] == FREE)
 800b6aa:	4c41      	ldr	r4, [pc, #260]	; (800b7b0 <SetupMessagingRxDMAs+0x108>)
 800b6ac:	7863      	ldrb	r3, [r4, #1]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00c      	beq.n	800b6cc <SetupMessagingRxDMAs+0x24>
	if (portStatus[P2] == FREE)	
 800b6b2:	78a3      	ldrb	r3, [r4, #2]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d020      	beq.n	800b6fa <SetupMessagingRxDMAs+0x52>
	if (portStatus[P3] == FREE)
 800b6b8:	78e3      	ldrb	r3, [r4, #3]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d034      	beq.n	800b728 <SetupMessagingRxDMAs+0x80>
	if (portStatus[P4] == FREE)
 800b6be:	7923      	ldrb	r3, [r4, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d048      	beq.n	800b756 <SetupMessagingRxDMAs+0xae>
	if (portStatus[P5] == FREE)
 800b6c4:	7963      	ldrb	r3, [r4, #5]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d05c      	beq.n	800b784 <SetupMessagingRxDMAs+0xdc>
}
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b6cc:	4d39      	ldr	r5, [pc, #228]	; (800b7b4 <SetupMessagingRxDMAs+0x10c>)
 800b6ce:	4e3a      	ldr	r6, [pc, #232]	; (800b7b8 <SetupMessagingRxDMAs+0x110>)
 800b6d0:	0028      	movs	r0, r5
 800b6d2:	0031      	movs	r1, r6
 800b6d4:	f7ff fc72 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b6d8:	2100      	movs	r1, #0
 800b6da:	0030      	movs	r0, r6
 800b6dc:	f7ff fbb4 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b6e0:	0028      	movs	r0, r5
 800b6e2:	f7ff f829 	bl	800a738 <GetPort>
 800b6e6:	1e41      	subs	r1, r0, #1
 800b6e8:	4834      	ldr	r0, [pc, #208]	; (800b7bc <SetupMessagingRxDMAs+0x114>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	1809      	adds	r1, r1, r0
 800b6ee:	0028      	movs	r0, r5
 800b6f0:	f007 fade 	bl	8012cb0 <HAL_UART_Receive_IT>
	if (portStatus[P2] == FREE)	
 800b6f4:	78a3      	ldrb	r3, [r4, #2]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1de      	bne.n	800b6b8 <SetupMessagingRxDMAs+0x10>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b6fa:	4d31      	ldr	r5, [pc, #196]	; (800b7c0 <SetupMessagingRxDMAs+0x118>)
 800b6fc:	4e31      	ldr	r6, [pc, #196]	; (800b7c4 <SetupMessagingRxDMAs+0x11c>)
 800b6fe:	0028      	movs	r0, r5
 800b700:	0031      	movs	r1, r6
 800b702:	f7ff fc5b 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b706:	2100      	movs	r1, #0
 800b708:	0030      	movs	r0, r6
 800b70a:	f7ff fb9d 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b70e:	0028      	movs	r0, r5
 800b710:	f7ff f812 	bl	800a738 <GetPort>
 800b714:	1e41      	subs	r1, r0, #1
 800b716:	4829      	ldr	r0, [pc, #164]	; (800b7bc <SetupMessagingRxDMAs+0x114>)
 800b718:	2201      	movs	r2, #1
 800b71a:	1809      	adds	r1, r1, r0
 800b71c:	0028      	movs	r0, r5
 800b71e:	f007 fac7 	bl	8012cb0 <HAL_UART_Receive_IT>
	if (portStatus[P3] == FREE)
 800b722:	78e3      	ldrb	r3, [r4, #3]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1ca      	bne.n	800b6be <SetupMessagingRxDMAs+0x16>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b728:	4d27      	ldr	r5, [pc, #156]	; (800b7c8 <SetupMessagingRxDMAs+0x120>)
 800b72a:	4e28      	ldr	r6, [pc, #160]	; (800b7cc <SetupMessagingRxDMAs+0x124>)
 800b72c:	0028      	movs	r0, r5
 800b72e:	0031      	movs	r1, r6
 800b730:	f7ff fc44 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b734:	2100      	movs	r1, #0
 800b736:	0030      	movs	r0, r6
 800b738:	f7ff fb86 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b73c:	0028      	movs	r0, r5
 800b73e:	f7fe fffb 	bl	800a738 <GetPort>
 800b742:	1e41      	subs	r1, r0, #1
 800b744:	481d      	ldr	r0, [pc, #116]	; (800b7bc <SetupMessagingRxDMAs+0x114>)
 800b746:	2201      	movs	r2, #1
 800b748:	1809      	adds	r1, r1, r0
 800b74a:	0028      	movs	r0, r5
 800b74c:	f007 fab0 	bl	8012cb0 <HAL_UART_Receive_IT>
	if (portStatus[P4] == FREE)
 800b750:	7923      	ldrb	r3, [r4, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1b6      	bne.n	800b6c4 <SetupMessagingRxDMAs+0x1c>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b756:	4d1e      	ldr	r5, [pc, #120]	; (800b7d0 <SetupMessagingRxDMAs+0x128>)
 800b758:	4e1e      	ldr	r6, [pc, #120]	; (800b7d4 <SetupMessagingRxDMAs+0x12c>)
 800b75a:	0028      	movs	r0, r5
 800b75c:	0031      	movs	r1, r6
 800b75e:	f7ff fc2d 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b762:	2100      	movs	r1, #0
 800b764:	0030      	movs	r0, r6
 800b766:	f7ff fb6f 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b76a:	0028      	movs	r0, r5
 800b76c:	f7fe ffe4 	bl	800a738 <GetPort>
 800b770:	1e41      	subs	r1, r0, #1
 800b772:	4812      	ldr	r0, [pc, #72]	; (800b7bc <SetupMessagingRxDMAs+0x114>)
 800b774:	2201      	movs	r2, #1
 800b776:	1809      	adds	r1, r1, r0
 800b778:	0028      	movs	r0, r5
 800b77a:	f007 fa99 	bl	8012cb0 <HAL_UART_Receive_IT>
	if (portStatus[P5] == FREE)
 800b77e:	7963      	ldrb	r3, [r4, #5]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1a2      	bne.n	800b6ca <SetupMessagingRxDMAs+0x22>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b784:	4c14      	ldr	r4, [pc, #80]	; (800b7d8 <SetupMessagingRxDMAs+0x130>)
 800b786:	4d15      	ldr	r5, [pc, #84]	; (800b7dc <SetupMessagingRxDMAs+0x134>)
 800b788:	0020      	movs	r0, r4
 800b78a:	0029      	movs	r1, r5
 800b78c:	f7ff fc16 	bl	800afbc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b790:	2100      	movs	r1, #0
 800b792:	0028      	movs	r0, r5
 800b794:	f7ff fb58 	bl	800ae48 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b798:	0020      	movs	r0, r4
 800b79a:	f7fe ffcd 	bl	800a738 <GetPort>
 800b79e:	1e41      	subs	r1, r0, #1
 800b7a0:	4806      	ldr	r0, [pc, #24]	; (800b7bc <SetupMessagingRxDMAs+0x114>)
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	1809      	adds	r1, r1, r0
 800b7a6:	0020      	movs	r0, r4
 800b7a8:	f007 fa82 	bl	8012cb0 <HAL_UART_Receive_IT>
}
 800b7ac:	e78d      	b.n	800b6ca <SetupMessagingRxDMAs+0x22>
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	20000c64 	.word	0x20000c64
 800b7b4:	20002274 	.word	0x20002274
 800b7b8:	200026f8 	.word	0x200026f8
 800b7bc:	20001dd0 	.word	0x20001dd0
 800b7c0:	20002354 	.word	0x20002354
 800b7c4:	20002730 	.word	0x20002730
 800b7c8:	20002204 	.word	0x20002204
 800b7cc:	20002768 	.word	0x20002768
 800b7d0:	200022e4 	.word	0x200022e4
 800b7d4:	200027a0 	.word	0x200027a0
 800b7d8:	200023c4 	.word	0x200023c4
 800b7dc:	200027d8 	.word	0x200027d8

0800b7e0 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	4807      	ldr	r0, [pc, #28]	; (800b800 <CRC_Init+0x20>)
{
 800b7e4:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b7e6:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800b7e8:	4b06      	ldr	r3, [pc, #24]	; (800b804 <CRC_Init+0x24>)
 800b7ea:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	8083      	strh	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b7f0:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b7f2:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b7f4:	3303      	adds	r3, #3
 800b7f6:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b7f8:	f004 fdd4 	bl	80103a4 <HAL_CRC_Init>
}
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	46c0      	nop			; (mov r8, r8)
 800b800:	20002434 	.word	0x20002434
 800b804:	40023000 	.word	0x40023000

0800b808 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	4a05      	ldr	r2, [pc, #20]	; (800b820 <HAL_CRC_MspInit+0x18>)
{
 800b80c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800b80e:	6951      	ldr	r1, [r2, #20]
 800b810:	4319      	orrs	r1, r3
 800b812:	6151      	str	r1, [r2, #20]
 800b814:	6952      	ldr	r2, [r2, #20]
 800b816:	4013      	ands	r3, r2
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	9b01      	ldr	r3, [sp, #4]
}
 800b81c:	b002      	add	sp, #8
 800b81e:	4770      	bx	lr
 800b820:	40021000 	.word	0x40021000

0800b824 <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b824:	2300      	movs	r3, #0
{
 800b826:	b570      	push	{r4, r5, r6, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	0005      	movs	r5, r0
 800b82c:	000c      	movs	r4, r1

	return pTemp;
  }
  
else
	return 0;
 800b82e:	2000      	movs	r0, #0
  uint8_t temp_buffer[4] = {0};
 800b830:	9301      	str	r3, [sp, #4]
  if (NULL!=pBuffer && 0!=size)
 800b832:	2d00      	cmp	r5, #0
 800b834:	d017      	beq.n	800b866 <CalculateCRC8+0x42>
 800b836:	2900      	cmp	r1, #0
 800b838:	d015      	beq.n	800b866 <CalculateCRC8+0x42>
	if(size < 4)
 800b83a:	2903      	cmp	r1, #3
 800b83c:	d815      	bhi.n	800b86a <CalculateCRC8+0x46>
			temp_buffer[i] = pBuffer[temp_index++];
 800b83e:	466a      	mov	r2, sp
 800b840:	782b      	ldrb	r3, [r5, #0]
			if(--size == 0) break;
 800b842:	3c01      	subs	r4, #1
 800b844:	b2a4      	uxth	r4, r4
			temp_buffer[i] = pBuffer[temp_index++];
 800b846:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800b848:	2c00      	cmp	r4, #0
 800b84a:	d006      	beq.n	800b85a <CalculateCRC8+0x36>
			temp_buffer[i] = pBuffer[temp_index++];
 800b84c:	4669      	mov	r1, sp
 800b84e:	786a      	ldrb	r2, [r5, #1]
 800b850:	714a      	strb	r2, [r1, #5]
			if(--size == 0) break;
 800b852:	2c01      	cmp	r4, #1
 800b854:	d001      	beq.n	800b85a <CalculateCRC8+0x36>
			temp_buffer[i] = pBuffer[temp_index++];
 800b856:	78aa      	ldrb	r2, [r5, #2]
 800b858:	718a      	strb	r2, [r1, #6]
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b85a:	2201      	movs	r2, #1
 800b85c:	4813      	ldr	r0, [pc, #76]	; (800b8ac <CalculateCRC8+0x88>)
 800b85e:	a901      	add	r1, sp, #4
 800b860:	f004 fdf8 	bl	8010454 <HAL_CRC_Calculate>
 800b864:	b2c0      	uxtb	r0, r0
}
 800b866:	b002      	add	sp, #8
 800b868:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b86a:	4e10      	ldr	r6, [pc, #64]	; (800b8ac <CalculateCRC8+0x88>)
 800b86c:	088a      	lsrs	r2, r1, #2
 800b86e:	0030      	movs	r0, r6
 800b870:	0029      	movs	r1, r5
 800b872:	f004 fdef 	bl	8010454 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b876:	2103      	movs	r1, #3
 800b878:	000a      	movs	r2, r1
 800b87a:	4022      	ands	r2, r4
 800b87c:	4221      	tst	r1, r4
 800b87e:	d013      	beq.n	800b8a8 <CalculateCRC8+0x84>
			temp_index = size - (size%4);
 800b880:	438c      	bics	r4, r1
 800b882:	b2e4      	uxtb	r4, r4
 800b884:	0013      	movs	r3, r2
 800b886:	a901      	add	r1, sp, #4
 800b888:	18a4      	adds	r4, r4, r2
 800b88a:	e000      	b.n	800b88e <CalculateCRC8+0x6a>
			for(int i=0; i<4; i++)
 800b88c:	3101      	adds	r1, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b88e:	1ae2      	subs	r2, r4, r3
 800b890:	b2d2      	uxtb	r2, r2
 800b892:	5caa      	ldrb	r2, [r5, r2]
				if(--size == 0) break;
 800b894:	3b01      	subs	r3, #1
 800b896:	b29b      	uxth	r3, r3
				temp_buffer[i] = pBuffer[temp_index++];
 800b898:	700a      	strb	r2, [r1, #0]
				if(--size == 0) break;
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f6      	bne.n	800b88c <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b89e:	2201      	movs	r2, #1
 800b8a0:	0030      	movs	r0, r6
 800b8a2:	a901      	add	r1, sp, #4
 800b8a4:	f004 fdac 	bl	8010400 <HAL_CRC_Accumulate>
 800b8a8:	b2c0      	uxtb	r0, r0
 800b8aa:	e7dc      	b.n	800b866 <CalculateCRC8+0x42>
 800b8ac:	20002434 	.word	0x20002434

0800b8b0 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	000e      	movs	r6, r1
 800b8b4:	0007      	movs	r7, r0
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b8b6:	4c25      	ldr	r4, [pc, #148]	; (800b94c <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b8b8:	f005 fbfa 	bl	80110b0 <HAL_FLASH_Unlock>
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b8bc:	4924      	ldr	r1, [pc, #144]	; (800b950 <EE_VerifyPageFullWriteVariable+0xa0>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b8be:	8823      	ldrh	r3, [r4, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b8c0:	880a      	ldrh	r2, [r1, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b8c2:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b8c4:	b290      	uxth	r0, r2
			if(PageStatusB == VALID_PAGE){
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	d126      	bne.n	800b918 <EE_VerifyPageFullWriteVariable+0x68>
				if(PageStatusA == RECEIVE_DATA){
 800b8ca:	4a22      	ldr	r2, [pc, #136]	; (800b954 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d028      	beq.n	800b922 <EE_VerifyPageFullWriteVariable+0x72>
				if(PageStatusB == RECEIVE_DATA){
 800b8d0:	000c      	movs	r4, r1
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b8d2:	6823      	ldr	r3, [r4, #0]
				if(PageStatusB == RECEIVE_DATA){
 800b8d4:	4d20      	ldr	r5, [pc, #128]	; (800b958 <EE_VerifyPageFullWriteVariable+0xa8>)
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	d125      	bne.n	800b926 <EE_VerifyPageFullWriteVariable+0x76>
			/* Set variable data */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b8da:	0032      	movs	r2, r6
 800b8dc:	2300      	movs	r3, #0
 800b8de:	0021      	movs	r1, r4
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	f005 fc45 	bl	8011170 <HAL_FLASH_Program>
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8e6:	481d      	ldr	r0, [pc, #116]	; (800b95c <EE_VerifyPageFullWriteVariable+0xac>)
 800b8e8:	f005 fbfe 	bl	80110e8 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d10f      	bne.n	800b910 <EE_VerifyPageFullWriteVariable+0x60>
				return pFlash.ErrorCode;
			}
			else{
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8f0:	2601      	movs	r6, #1
 800b8f2:	4d1b      	ldr	r5, [pc, #108]	; (800b960 <EE_VerifyPageFullWriteVariable+0xb0>)
			}
			
			/* Set variable virtual address */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b8f4:	003a      	movs	r2, r7
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8f6:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b8f8:	2001      	movs	r0, #1
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8fa:	43b3      	bics	r3, r6
 800b8fc:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b8fe:	1ca1      	adds	r1, r4, #2
 800b900:	2300      	movs	r3, #0
 800b902:	f005 fc35 	bl	8011170 <HAL_FLASH_Program>
			
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b906:	4815      	ldr	r0, [pc, #84]	; (800b95c <EE_VerifyPageFullWriteVariable+0xac>)
 800b908:	f005 fbee 	bl	80110e8 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d019      	beq.n	800b944 <EE_VerifyPageFullWriteVariable+0x94>
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
			}
			
			/* Return program operation status */
			return pFlash.ErrorCode;
 800b910:	4b14      	ldr	r3, [pc, #80]	; (800b964 <EE_VerifyPageFullWriteVariable+0xb4>)
 800b912:	69d8      	ldr	r0, [r3, #28]
 800b914:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
}
 800b916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(PageStatusA == VALID_PAGE){
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d111      	bne.n	800b940 <EE_VerifyPageFullWriteVariable+0x90>
				if(PageStatusB == RECEIVE_DATA){
 800b91c:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b91e:	4298      	cmp	r0, r3
 800b920:	d0d6      	beq.n	800b8d0 <EE_VerifyPageFullWriteVariable+0x20>
 800b922:	4d11      	ldr	r5, [pc, #68]	; (800b968 <EE_VerifyPageFullWriteVariable+0xb8>)
	while(Address < PageEndAddress){
 800b924:	e002      	b.n	800b92c <EE_VerifyPageFullWriteVariable+0x7c>
			Address =Address + 4;
 800b926:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b928:	42a5      	cmp	r5, r4
 800b92a:	d905      	bls.n	800b938 <EE_VerifyPageFullWriteVariable+0x88>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	d0d3      	beq.n	800b8da <EE_VerifyPageFullWriteVariable+0x2a>
			Address =Address + 4;
 800b932:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b934:	42a5      	cmp	r5, r4
 800b936:	d8f9      	bhi.n	800b92c <EE_VerifyPageFullWriteVariable+0x7c>
	HAL_FLASH_Lock();
 800b938:	f005 fbcc 	bl	80110d4 <HAL_FLASH_Lock>
	return PAGE_FULL;
 800b93c:	2080      	movs	r0, #128	; 0x80
 800b93e:	e7ea      	b.n	800b916 <EE_VerifyPageFullWriteVariable+0x66>
		return NO_VALID_PAGE;
 800b940:	20ab      	movs	r0, #171	; 0xab
 800b942:	e7e8      	b.n	800b916 <EE_VerifyPageFullWriteVariable+0x66>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b944:	692b      	ldr	r3, [r5, #16]
 800b946:	43b3      	bics	r3, r6
 800b948:	612b      	str	r3, [r5, #16]
 800b94a:	e7e1      	b.n	800b910 <EE_VerifyPageFullWriteVariable+0x60>
 800b94c:	0801e000 	.word	0x0801e000
 800b950:	0801f000 	.word	0x0801f000
 800b954:	0000eeee 	.word	0x0000eeee
 800b958:	0801fffe 	.word	0x0801fffe
 800b95c:	0000c350 	.word	0x0000c350
 800b960:	40022000 	.word	0x40022000
 800b964:	20006d90 	.word	0x20006d90
 800b968:	0801effe 	.word	0x0801effe

0800b96c <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b96c:	4b0f      	ldr	r3, [pc, #60]	; (800b9ac <EE_ReadVariable+0x40>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b96e:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b970:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <EE_ReadVariable+0x44>)
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b978:	2a00      	cmp	r2, #0
 800b97a:	d011      	beq.n	800b9a0 <EE_ReadVariable+0x34>
			else if(PageStatusB == VALID_PAGE){
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10d      	bne.n	800b99c <EE_ReadVariable+0x30>
 800b980:	4c0c      	ldr	r4, [pc, #48]	; (800b9b4 <EE_ReadVariable+0x48>)
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <EE_ReadVariable+0x4c>)
	while(Address > (PageStartAddress + 2)){
 800b984:	e002      	b.n	800b98c <EE_ReadVariable+0x20>
			Address =Address - 4;
 800b986:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800b988:	429c      	cmp	r4, r3
 800b98a:	d20c      	bcs.n	800b9a6 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800b98c:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800b98e:	4282      	cmp	r2, r0
 800b990:	d1f9      	bne.n	800b986 <EE_ReadVariable+0x1a>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b992:	3b02      	subs	r3, #2
 800b994:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800b996:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b998:	800b      	strh	r3, [r1, #0]
			break;
 800b99a:	e000      	b.n	800b99e <EE_ReadVariable+0x32>
		return NO_VALID_PAGE;
 800b99c:	20ab      	movs	r0, #171	; 0xab
}
 800b99e:	bd10      	pop	{r4, pc}
 800b9a0:	4c06      	ldr	r4, [pc, #24]	; (800b9bc <EE_ReadVariable+0x50>)
 800b9a2:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <EE_ReadVariable+0x54>)
 800b9a4:	e7f2      	b.n	800b98c <EE_ReadVariable+0x20>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	e7f9      	b.n	800b99e <EE_ReadVariable+0x32>
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	0801e000 	.word	0x0801e000
 800b9b0:	0801f000 	.word	0x0801f000
 800b9b4:	0801f002 	.word	0x0801f002
 800b9b8:	0801fffe 	.word	0x0801fffe
 800b9bc:	0801e002 	.word	0x0801e002
 800b9c0:	0801effe 	.word	0x0801effe

0800b9c4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c6:	46d6      	mov	lr, sl
 800b9c8:	4646      	mov	r6, r8
 800b9ca:	464f      	mov	r7, r9
 800b9cc:	000c      	movs	r4, r1
 800b9ce:	b5c0      	push	{r6, r7, lr}
 800b9d0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800b9d2:	f005 fb6d 	bl	80110b0 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b9d6:	0021      	movs	r1, r4
 800b9d8:	0030      	movs	r0, r6
 800b9da:	f7ff ff69 	bl	800b8b0 <EE_VerifyPageFullWriteVariable>
 800b9de:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800b9e0:	2880      	cmp	r0, #128	; 0x80
 800b9e2:	d007      	beq.n	800b9f4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800b9e4:	f005 fb76 	bl	80110d4 <HAL_FLASH_Lock>
}
 800b9e8:	0028      	movs	r0, r5
 800b9ea:	bce0      	pop	{r5, r6, r7}
 800b9ec:	46ba      	mov	sl, r7
 800b9ee:	46b1      	mov	r9, r6
 800b9f0:	46a8      	mov	r8, r5
 800b9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b9f4:	f005 fb5c 	bl	80110b0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b9f8:	4934      	ldr	r1, [pc, #208]	; (800bacc <EE_WriteVariable+0x108>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b9fa:	4a35      	ldr	r2, [pc, #212]	; (800bad0 <EE_WriteVariable+0x10c>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b9fc:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b9fe:	8813      	ldrh	r3, [r2, #0]
 800ba00:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d05b      	beq.n	800babe <EE_WriteVariable+0xfa>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800ba06:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1eb      	bne.n	800b9e4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800ba0c:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800ba0e:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800ba10:	2300      	movs	r3, #0
 800ba12:	4641      	mov	r1, r8
 800ba14:	2001      	movs	r0, #1
 800ba16:	4a2f      	ldr	r2, [pc, #188]	; (800bad4 <EE_WriteVariable+0x110>)
 800ba18:	f005 fbaa 	bl	8011170 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba1c:	482e      	ldr	r0, [pc, #184]	; (800bad8 <EE_WriteVariable+0x114>)
 800ba1e:	f005 fb63 	bl	80110e8 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d14e      	bne.n	800bac4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba26:	2101      	movs	r1, #1
 800ba28:	4a2c      	ldr	r2, [pc, #176]	; (800badc <EE_WriteVariable+0x118>)
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ba2a:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba2c:	6913      	ldr	r3, [r2, #16]
 800ba2e:	438b      	bics	r3, r1
 800ba30:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ba32:	0021      	movs	r1, r4
 800ba34:	f7ff ff3c 	bl	800b8b0 <EE_VerifyPageFullWriteVariable>
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800ba38:	1e05      	subs	r5, r0, #0
 800ba3a:	d1d3      	bne.n	800b9e4 <EE_WriteVariable+0x20>
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
		{
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ba3c:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <EE_WriteVariable+0x11c>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ba3e:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ba40:	469a      	mov	sl, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ba42:	4f28      	ldr	r7, [pc, #160]	; (800bae4 <EE_WriteVariable+0x120>)
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	d00c      	beq.n	800ba62 <EE_WriteVariable+0x9e>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ba48:	4651      	mov	r1, sl
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	f7ff ff8e 	bl	800b96c <EE_ReadVariable>
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
 800ba50:	2801      	cmp	r0, #1
 800ba52:	d006      	beq.n	800ba62 <EE_WriteVariable+0x9e>
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ba54:	4653      	mov	r3, sl
 800ba56:	0020      	movs	r0, r4
 800ba58:	8819      	ldrh	r1, [r3, #0]
 800ba5a:	f7ff ff29 	bl	800b8b0 <EE_VerifyPageFullWriteVariable>
 800ba5e:	1e05      	subs	r5, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800ba60:	d1c0      	bne.n	800b9e4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ba62:	3401      	adds	r4, #1
 800ba64:	b2a4      	uxth	r4, r4
 800ba66:	42bc      	cmp	r4, r7
 800ba68:	d1ec      	bne.n	800ba44 <EE_WriteVariable+0x80>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f005 fc50 	bl	8011310 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba70:	4819      	ldr	r0, [pc, #100]	; (800bad8 <EE_WriteVariable+0x114>)
 800ba72:	f005 fb39 	bl	80110e8 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d124      	bne.n	800bac4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800ba7a:	2080      	movs	r0, #128	; 0x80
 800ba7c:	0100      	lsls	r0, r0, #4
 800ba7e:	4448      	add	r0, r9
 800ba80:	f005 fc46 	bl	8011310 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba84:	4814      	ldr	r0, [pc, #80]	; (800bad8 <EE_WriteVariable+0x114>)
 800ba86:	f005 fb2f 	bl	80110e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d11a      	bne.n	800bac4 <EE_WriteVariable+0x100>
			return pFlash.ErrorCode;
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ba8e:	2202      	movs	r2, #2
 800ba90:	4c12      	ldr	r4, [pc, #72]	; (800badc <EE_WriteVariable+0x118>)
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ba92:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ba94:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ba96:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ba98:	4393      	bics	r3, r2
 800ba9a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f005 fb66 	bl	8011170 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800baa4:	480c      	ldr	r0, [pc, #48]	; (800bad8 <EE_WriteVariable+0x114>)
 800baa6:	f005 fb1f 	bl	80110e8 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800baaa:	2800      	cmp	r0, #0
 800baac:	d10a      	bne.n	800bac4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800baae:	2201      	movs	r2, #1
 800bab0:	6923      	ldr	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
 800bab2:	2500      	movs	r5, #0
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bab4:	4393      	bics	r3, r2
 800bab6:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800bab8:	f005 fb0c 	bl	80110d4 <HAL_FLASH_Lock>
	return FlashStatus;
 800babc:	e792      	b.n	800b9e4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800babe:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800bac0:	4690      	mov	r8, r2
 800bac2:	e7a5      	b.n	800ba10 <EE_WriteVariable+0x4c>
		return pFlash.ErrorCode;
 800bac4:	4b08      	ldr	r3, [pc, #32]	; (800bae8 <EE_WriteVariable+0x124>)
 800bac6:	69dd      	ldr	r5, [r3, #28]
 800bac8:	b2ad      	uxth	r5, r5
 800baca:	e78b      	b.n	800b9e4 <EE_WriteVariable+0x20>
 800bacc:	0801e000 	.word	0x0801e000
 800bad0:	0801f000 	.word	0x0801f000
 800bad4:	0000eeee 	.word	0x0000eeee
 800bad8:	0000c350 	.word	0x0000c350
 800badc:	40022000 	.word	0x40022000
 800bae0:	20002848 	.word	0x20002848
 800bae4:	00000401 	.word	0x00000401
 800bae8:	20006d90 	.word	0x20006d90

0800baec <EE_Format>:
uint16_t EE_Format(void){
 800baec:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800baee:	f005 fadf 	bl	80110b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800baf2:	481f      	ldr	r0, [pc, #124]	; (800bb70 <EE_Format+0x84>)
 800baf4:	f005 fc0c 	bl	8011310 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800baf8:	481e      	ldr	r0, [pc, #120]	; (800bb74 <EE_Format+0x88>)
 800bafa:	f005 faf5 	bl	80110e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d003      	beq.n	800bb0a <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800bb02:	4b1d      	ldr	r3, [pc, #116]	; (800bb78 <EE_Format+0x8c>)
 800bb04:	69d8      	ldr	r0, [r3, #28]
 800bb06:	b280      	uxth	r0, r0
}
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bb0a:	481c      	ldr	r0, [pc, #112]	; (800bb7c <EE_Format+0x90>)
 800bb0c:	f005 fc00 	bl	8011310 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb10:	4818      	ldr	r0, [pc, #96]	; (800bb74 <EE_Format+0x88>)
 800bb12:	f005 fae9 	bl	80110e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d1f3      	bne.n	800bb02 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	4c18      	ldr	r4, [pc, #96]	; (800bb80 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bb1e:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb20:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bb22:	4913      	ldr	r1, [pc, #76]	; (800bb70 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb24:	4393      	bics	r3, r2
 800bb26:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f005 fb20 	bl	8011170 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb30:	4810      	ldr	r0, [pc, #64]	; (800bb74 <EE_Format+0x88>)
 800bb32:	f005 fad9 	bl	80110e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d1e3      	bne.n	800bb02 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb3a:	2501      	movs	r5, #1
 800bb3c:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bb3e:	4811      	ldr	r0, [pc, #68]	; (800bb84 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb40:	43ab      	bics	r3, r5
 800bb42:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bb44:	f005 fbe4 	bl	8011310 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb48:	480a      	ldr	r0, [pc, #40]	; (800bb74 <EE_Format+0x88>)
 800bb4a:	f005 facd 	bl	80110e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1d7      	bne.n	800bb02 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bb52:	480d      	ldr	r0, [pc, #52]	; (800bb88 <EE_Format+0x9c>)
 800bb54:	f005 fbdc 	bl	8011310 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb58:	4806      	ldr	r0, [pc, #24]	; (800bb74 <EE_Format+0x88>)
 800bb5a:	f005 fac5 	bl	80110e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d1cf      	bne.n	800bb02 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	43ab      	bics	r3, r5
 800bb66:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800bb68:	f005 fab4 	bl	80110d4 <HAL_FLASH_Lock>
	return FlashStatus;
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e7cb      	b.n	800bb08 <EE_Format+0x1c>
 800bb70:	0801e000 	.word	0x0801e000
 800bb74:	0000c350 	.word	0x0000c350
 800bb78:	20006d90 	.word	0x20006d90
 800bb7c:	0801e800 	.word	0x0801e800
 800bb80:	40022000 	.word	0x40022000
 800bb84:	0801f000 	.word	0x0801f000
 800bb88:	0801f800 	.word	0x0801f800

0800bb8c <EE_Init>:
uint16_t EE_Init(void){
 800bb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8e:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bb90:	4ca1      	ldr	r4, [pc, #644]	; (800be18 <EE_Init+0x28c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bb92:	4da2      	ldr	r5, [pc, #648]	; (800be1c <EE_Init+0x290>)
uint16_t EE_Init(void){
 800bb94:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800bb96:	f005 fa8b 	bl	80110b0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bb9a:	8821      	ldrh	r1, [r4, #0]
	switch(PageStatusA){
 800bb9c:	48a0      	ldr	r0, [pc, #640]	; (800be20 <EE_Init+0x294>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bb9e:	882b      	ldrh	r3, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bba0:	b28a      	uxth	r2, r1
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bba2:	b29b      	uxth	r3, r3
	switch(PageStatusA){
 800bba4:	4281      	cmp	r1, r0
 800bba6:	d04d      	beq.n	800bc44 <EE_Init+0xb8>
 800bba8:	499e      	ldr	r1, [pc, #632]	; (800be24 <EE_Init+0x298>)
 800bbaa:	428a      	cmp	r2, r1
 800bbac:	d03a      	beq.n	800bc24 <EE_Init+0x98>
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d00e      	beq.n	800bbd0 <EE_Init+0x44>
			FlashStatus =EE_Format();
 800bbb2:	f7ff ff9b 	bl	800baec <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbb6:	489c      	ldr	r0, [pc, #624]	; (800be28 <EE_Init+0x29c>)
 800bbb8:	f005 fa96 	bl	80110e8 <FLASH_WaitForLastOperation>
 800bbbc:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800bbbe:	2d00      	cmp	r5, #0
 800bbc0:	d102      	bne.n	800bbc8 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800bbc2:	f005 fa87 	bl	80110d4 <HAL_FLASH_Lock>
	return HAL_OK;
 800bbc6:	2500      	movs	r5, #0
}
 800bbc8:	0028      	movs	r0, r5
 800bbca:	bc80      	pop	{r7}
 800bbcc:	46b8      	mov	r8, r7
 800bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0ee      	beq.n	800bbb2 <EE_Init+0x26>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bbd4:	428b      	cmp	r3, r1
 800bbd6:	d100      	bne.n	800bbda <EE_Init+0x4e>
 800bbd8:	e10b      	b.n	800bdf2 <EE_Init+0x266>
	int16_t x =-1;
 800bbda:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bbdc:	4b93      	ldr	r3, [pc, #588]	; (800be2c <EE_Init+0x2a0>)
 800bbde:	2401      	movs	r4, #1
 800bbe0:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bbe2:	4f93      	ldr	r7, [pc, #588]	; (800be30 <EE_Init+0x2a4>)
	int16_t x =-1;
 800bbe4:	4276      	negs	r6, r6
 800bbe6:	e004      	b.n	800bbf2 <EE_Init+0x66>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bbe8:	4b92      	ldr	r3, [pc, #584]	; (800be34 <EE_Init+0x2a8>)
 800bbea:	3401      	adds	r4, #1
 800bbec:	429c      	cmp	r4, r3
 800bbee:	d100      	bne.n	800bbf2 <EE_Init+0x66>
 800bbf0:	e08d      	b.n	800bd0e <EE_Init+0x182>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bbf2:	883b      	ldrh	r3, [r7, #0]
 800bbf4:	b2a5      	uxth	r5, r4
 800bbf6:	42ab      	cmp	r3, r5
 800bbf8:	d100      	bne.n	800bbfc <EE_Init+0x70>
						x =VarIdx;
 800bbfa:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800bbfc:	42a6      	cmp	r6, r4
 800bbfe:	d0f3      	beq.n	800bbe8 <EE_Init+0x5c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bc00:	4641      	mov	r1, r8
 800bc02:	0028      	movs	r0, r5
 800bc04:	f7ff feb2 	bl	800b96c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bc08:	2801      	cmp	r0, #1
 800bc0a:	d0ed      	beq.n	800bbe8 <EE_Init+0x5c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bc0c:	4643      	mov	r3, r8
 800bc0e:	0028      	movs	r0, r5
 800bc10:	8819      	ldrh	r1, [r3, #0]
 800bc12:	f7ff fe4d 	bl	800b8b0 <EE_VerifyPageFullWriteVariable>
 800bc16:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc18:	4883      	ldr	r0, [pc, #524]	; (800be28 <EE_Init+0x29c>)
 800bc1a:	f005 fa65 	bl	80110e8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d0e2      	beq.n	800bbe8 <EE_Init+0x5c>
 800bc22:	e7d1      	b.n	800bbc8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d05c      	beq.n	800bce2 <EE_Init+0x156>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bc28:	4283      	cmp	r3, r0
 800bc2a:	d100      	bne.n	800bc2e <EE_Init+0xa2>
 800bc2c:	e096      	b.n	800bd5c <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800bc2e:	f7ff ff5d 	bl	800baec <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc32:	487d      	ldr	r0, [pc, #500]	; (800be28 <EE_Init+0x29c>)
 800bc34:	f005 fa58 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d0c2      	beq.n	800bbc2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bc3c:	4b7e      	ldr	r3, [pc, #504]	; (800be38 <EE_Init+0x2ac>)
 800bc3e:	69dd      	ldr	r5, [r3, #28]
 800bc40:	b2ad      	uxth	r5, r5
 800bc42:	e7c1      	b.n	800bbc8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d124      	bne.n	800bc92 <EE_Init+0x106>
	int16_t x =-1;
 800bc48:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bc4a:	4b78      	ldr	r3, [pc, #480]	; (800be2c <EE_Init+0x2a0>)
 800bc4c:	2401      	movs	r4, #1
 800bc4e:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bc50:	4f7a      	ldr	r7, [pc, #488]	; (800be3c <EE_Init+0x2b0>)
	int16_t x =-1;
 800bc52:	4276      	negs	r6, r6
 800bc54:	e004      	b.n	800bc60 <EE_Init+0xd4>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bc56:	4b77      	ldr	r3, [pc, #476]	; (800be34 <EE_Init+0x2a8>)
 800bc58:	3401      	adds	r4, #1
 800bc5a:	429c      	cmp	r4, r3
 800bc5c:	d100      	bne.n	800bc60 <EE_Init+0xd4>
 800bc5e:	e0a5      	b.n	800bdac <EE_Init+0x220>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bc60:	883b      	ldrh	r3, [r7, #0]
 800bc62:	b2a5      	uxth	r5, r4
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	d100      	bne.n	800bc6a <EE_Init+0xde>
						x =VarIdx;
 800bc68:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800bc6a:	42a6      	cmp	r6, r4
 800bc6c:	d0f3      	beq.n	800bc56 <EE_Init+0xca>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bc6e:	4641      	mov	r1, r8
 800bc70:	0028      	movs	r0, r5
 800bc72:	f7ff fe7b 	bl	800b96c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bc76:	2801      	cmp	r0, #1
 800bc78:	d0ed      	beq.n	800bc56 <EE_Init+0xca>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bc7a:	4643      	mov	r3, r8
 800bc7c:	0028      	movs	r0, r5
 800bc7e:	8819      	ldrh	r1, [r3, #0]
 800bc80:	f7ff fe16 	bl	800b8b0 <EE_VerifyPageFullWriteVariable>
 800bc84:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc86:	4868      	ldr	r0, [pc, #416]	; (800be28 <EE_Init+0x29c>)
 800bc88:	f005 fa2e 	bl	80110e8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d0e2      	beq.n	800bc56 <EE_Init+0xca>
 800bc90:	e79a      	b.n	800bbc8 <EE_Init+0x3c>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bc92:	4a64      	ldr	r2, [pc, #400]	; (800be24 <EE_Init+0x298>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d1ca      	bne.n	800bc2e <EE_Init+0xa2>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bc98:	0028      	movs	r0, r5
 800bc9a:	f005 fb39 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc9e:	4862      	ldr	r0, [pc, #392]	; (800be28 <EE_Init+0x29c>)
 800bca0:	f005 fa22 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d1c9      	bne.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bca8:	4865      	ldr	r0, [pc, #404]	; (800be40 <EE_Init+0x2b4>)
 800bcaa:	f005 fb31 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcae:	485e      	ldr	r0, [pc, #376]	; (800be28 <EE_Init+0x29c>)
 800bcb0:	f005 fa1a 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1c1      	bne.n	800bc3c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bcb8:	2202      	movs	r2, #2
 800bcba:	4d62      	ldr	r5, [pc, #392]	; (800be44 <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bcbc:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bcbe:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bcc0:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bcc2:	4393      	bics	r3, r2
 800bcc4:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f005 fa51 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcce:	4856      	ldr	r0, [pc, #344]	; (800be28 <EE_Init+0x29c>)
 800bcd0:	f005 fa0a 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1b1      	bne.n	800bc3c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bcd8:	2201      	movs	r2, #1
 800bcda:	692b      	ldr	r3, [r5, #16]
 800bcdc:	4393      	bics	r3, r2
 800bcde:	612b      	str	r3, [r5, #16]
 800bce0:	e76f      	b.n	800bbc2 <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bce2:	0020      	movs	r0, r4
 800bce4:	f005 fb14 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bce8:	484f      	ldr	r0, [pc, #316]	; (800be28 <EE_Init+0x29c>)
 800bcea:	f005 f9fd 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d1a4      	bne.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bcf2:	4855      	ldr	r0, [pc, #340]	; (800be48 <EE_Init+0x2bc>)
 800bcf4:	f005 fb0c 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcf8:	484b      	ldr	r0, [pc, #300]	; (800be28 <EE_Init+0x29c>)
 800bcfa:	f005 f9f5 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d19c      	bne.n	800bc3c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd02:	2102      	movs	r1, #2
 800bd04:	4a4f      	ldr	r2, [pc, #316]	; (800be44 <EE_Init+0x2b8>)
 800bd06:	6913      	ldr	r3, [r2, #16]
 800bd08:	438b      	bics	r3, r1
 800bd0a:	6113      	str	r3, [r2, #16]
 800bd0c:	e759      	b.n	800bbc2 <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2300      	movs	r3, #0
 800bd12:	2001      	movs	r0, #1
 800bd14:	4941      	ldr	r1, [pc, #260]	; (800be1c <EE_Init+0x290>)
 800bd16:	f005 fa2b 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd1a:	4843      	ldr	r0, [pc, #268]	; (800be28 <EE_Init+0x29c>)
 800bd1c:	f005 f9e4 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d18b      	bne.n	800bc3c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd24:	2201      	movs	r2, #1
 800bd26:	4c47      	ldr	r4, [pc, #284]	; (800be44 <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd28:	483b      	ldr	r0, [pc, #236]	; (800be18 <EE_Init+0x28c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd2a:	6923      	ldr	r3, [r4, #16]
 800bd2c:	4393      	bics	r3, r2
 800bd2e:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd30:	f005 faee 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd34:	483c      	ldr	r0, [pc, #240]	; (800be28 <EE_Init+0x29c>)
 800bd36:	f005 f9d7 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d000      	beq.n	800bd40 <EE_Init+0x1b4>
 800bd3e:	e77d      	b.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd40:	4841      	ldr	r0, [pc, #260]	; (800be48 <EE_Init+0x2bc>)
 800bd42:	f005 fae5 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd46:	4838      	ldr	r0, [pc, #224]	; (800be28 <EE_Init+0x29c>)
 800bd48:	f005 f9ce 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d000      	beq.n	800bd52 <EE_Init+0x1c6>
 800bd50:	e774      	b.n	800bc3c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd52:	2202      	movs	r2, #2
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	4393      	bics	r3, r2
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	e732      	b.n	800bbc2 <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd5c:	0020      	movs	r0, r4
 800bd5e:	f005 fad7 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd62:	4831      	ldr	r0, [pc, #196]	; (800be28 <EE_Init+0x29c>)
 800bd64:	f005 f9c0 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d000      	beq.n	800bd6e <EE_Init+0x1e2>
 800bd6c:	e766      	b.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd6e:	4836      	ldr	r0, [pc, #216]	; (800be48 <EE_Init+0x2bc>)
 800bd70:	f005 face 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd74:	482c      	ldr	r0, [pc, #176]	; (800be28 <EE_Init+0x29c>)
 800bd76:	f005 f9b7 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d000      	beq.n	800bd80 <EE_Init+0x1f4>
 800bd7e:	e75d      	b.n	800bc3c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd80:	2202      	movs	r2, #2
 800bd82:	4c30      	ldr	r4, [pc, #192]	; (800be44 <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd84:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd86:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd88:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd8a:	4393      	bics	r3, r2
 800bd8c:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2300      	movs	r3, #0
 800bd92:	f005 f9ed 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd96:	4824      	ldr	r0, [pc, #144]	; (800be28 <EE_Init+0x29c>)
 800bd98:	f005 f9a6 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d000      	beq.n	800bda2 <EE_Init+0x216>
 800bda0:	e74c      	b.n	800bc3c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bda2:	2201      	movs	r2, #1
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	4393      	bics	r3, r2
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	e70a      	b.n	800bbc2 <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bdac:	2200      	movs	r2, #0
 800bdae:	2300      	movs	r3, #0
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	4919      	ldr	r1, [pc, #100]	; (800be18 <EE_Init+0x28c>)
 800bdb4:	f005 f9dc 	bl	8011170 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdb8:	481b      	ldr	r0, [pc, #108]	; (800be28 <EE_Init+0x29c>)
 800bdba:	f005 f995 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d000      	beq.n	800bdc4 <EE_Init+0x238>
 800bdc2:	e73b      	b.n	800bc3c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4c1f      	ldr	r4, [pc, #124]	; (800be44 <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bdc8:	4814      	ldr	r0, [pc, #80]	; (800be1c <EE_Init+0x290>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	4393      	bics	r3, r2
 800bdce:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bdd0:	f005 fa9e 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdd4:	4814      	ldr	r0, [pc, #80]	; (800be28 <EE_Init+0x29c>)
 800bdd6:	f005 f987 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d000      	beq.n	800bde0 <EE_Init+0x254>
 800bdde:	e72d      	b.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bde0:	4817      	ldr	r0, [pc, #92]	; (800be40 <EE_Init+0x2b4>)
 800bde2:	f005 fa95 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bde6:	4810      	ldr	r0, [pc, #64]	; (800be28 <EE_Init+0x29c>)
 800bde8:	f005 f97e 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d0b0      	beq.n	800bd52 <EE_Init+0x1c6>
 800bdf0:	e724      	b.n	800bc3c <EE_Init+0xb0>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	f005 fa8c 	bl	8011310 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdf8:	480b      	ldr	r0, [pc, #44]	; (800be28 <EE_Init+0x29c>)
 800bdfa:	f005 f975 	bl	80110e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d000      	beq.n	800be04 <EE_Init+0x278>
 800be02:	e71b      	b.n	800bc3c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be04:	480e      	ldr	r0, [pc, #56]	; (800be40 <EE_Init+0x2b4>)
 800be06:	f005 fa83 	bl	8011310 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be0a:	4807      	ldr	r0, [pc, #28]	; (800be28 <EE_Init+0x29c>)
 800be0c:	f005 f96c 	bl	80110e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be10:	2800      	cmp	r0, #0
 800be12:	d100      	bne.n	800be16 <EE_Init+0x28a>
 800be14:	e775      	b.n	800bd02 <EE_Init+0x176>
 800be16:	e711      	b.n	800bc3c <EE_Init+0xb0>
 800be18:	0801e000 	.word	0x0801e000
 800be1c:	0801f000 	.word	0x0801f000
 800be20:	0000eeee 	.word	0x0000eeee
 800be24:	0000ffff 	.word	0x0000ffff
 800be28:	0000c350 	.word	0x0000c350
 800be2c:	20002848 	.word	0x20002848
 800be30:	0801f006 	.word	0x0801f006
 800be34:	00000401 	.word	0x00000401
 800be38:	20006d90 	.word	0x20006d90
 800be3c:	0801e006 	.word	0x0801e006
 800be40:	0801f800 	.word	0x0801f800
 800be44:	40022000 	.word	0x40022000
 800be48:	0801e800 	.word	0x0801e800

0800be4c <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800be4c:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800be4e:	b500      	push	{lr}
 800be50:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800be52:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800be54:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800be56:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800be58:	4669      	mov	r1, sp
 800be5a:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800be5c:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800be5e:	f005 f9eb 	bl	8011238 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800be62:	2800      	cmp	r0, #0
 800be64:	d102      	bne.n	800be6c <EraseSector+0x20>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	d002      	beq.n	800be72 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800be6c:	2216      	movs	r2, #22
 800be6e:	4b02      	ldr	r3, [pc, #8]	; (800be78 <EraseSector+0x2c>)
 800be70:	701a      	strb	r2, [r3, #0]

	return result;
}
 800be72:	2000      	movs	r0, #0
 800be74:	b005      	add	sp, #20
 800be76:	bd00      	pop	{pc}
 800be78:	20000c74 	.word	0x20000c74

0800be7c <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800be7c:	2080      	movs	r0, #128	; 0x80
 800be7e:	4b1f      	ldr	r3, [pc, #124]	; (800befc <GPIO_Init+0x80>)
 800be80:	0300      	lsls	r0, r0, #12
 800be82:	6959      	ldr	r1, [r3, #20]
{
 800be84:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800be86:	4301      	orrs	r1, r0
 800be88:	6159      	str	r1, [r3, #20]
 800be8a:	695a      	ldr	r2, [r3, #20]
{
 800be8c:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800be8e:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800be90:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800be92:	9200      	str	r2, [sp, #0]
 800be94:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800be96:	6959      	ldr	r1, [r3, #20]
 800be98:	0280      	lsls	r0, r0, #10
 800be9a:	4301      	orrs	r1, r0
 800be9c:	6159      	str	r1, [r3, #20]
 800be9e:	695a      	ldr	r2, [r3, #20]
 800bea0:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800bea2:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800bea4:	9201      	str	r2, [sp, #4]
 800bea6:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800bea8:	6959      	ldr	r1, [r3, #20]
 800beaa:	0340      	lsls	r0, r0, #13
 800beac:	4301      	orrs	r1, r0
 800beae:	6159      	str	r1, [r3, #20]
 800beb0:	695a      	ldr	r2, [r3, #20]
 800beb2:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800beb4:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800beb6:	9202      	str	r2, [sp, #8]
 800beb8:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800beba:	6959      	ldr	r1, [r3, #20]
 800bebc:	02c0      	lsls	r0, r0, #11
 800bebe:	4301      	orrs	r1, r0
 800bec0:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bec2:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800bec4:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bec6:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800bec8:	4002      	ands	r2, r0
 800beca:	9203      	str	r2, [sp, #12]
 800becc:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bece:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bed0:	480b      	ldr	r0, [pc, #44]	; (800bf00 <GPIO_Init+0x84>)
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bed2:	430a      	orrs	r2, r1
 800bed4:	615a      	str	r2, [r3, #20]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	400b      	ands	r3, r1
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bede:	2380      	movs	r3, #128	; 0x80
 800bee0:	01db      	lsls	r3, r3, #7
 800bee2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bee4:	2301      	movs	r3, #1
 800bee6:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bee8:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800beea:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beec:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800beee:	3303      	adds	r3, #3
 800bef0:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bef2:	f005 fa1f 	bl	8011334 <HAL_GPIO_Init>
}
 800bef6:	b00b      	add	sp, #44	; 0x2c
 800bef8:	bd00      	pop	{pc}
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	40021000 	.word	0x40021000
 800bf00:	48000800 	.word	0x48000800

0800bf04 <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800bf04:	2301      	movs	r3, #1
{
 800bf06:	b500      	push	{lr}
 800bf08:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800bf0a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf0c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0e:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bf10:	4804      	ldr	r0, [pc, #16]	; (800bf24 <Switch_Init+0x20>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf12:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bf14:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bf16:	3303      	adds	r3, #3
 800bf18:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bf1a:	f005 fa0b 	bl	8011334 <HAL_GPIO_Init>
}
 800bf1e:	b007      	add	sp, #28
 800bf20:	bd00      	pop	{pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	48000400 	.word	0x48000400

0800bf28 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	000e      	movs	r6, r1
 800bf2c:	0015      	movs	r5, r2
 800bf2e:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bf30:	f001 fe06 	bl	800db40 <GetUart>
 800bf34:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800bf36:	4824      	ldr	r0, [pc, #144]	; (800bfc8 <GetPortGPIOs+0xa0>)
 800bf38:	4284      	cmp	r4, r0
 800bf3a:	d022      	beq.n	800bf82 <GetPortGPIOs+0x5a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800bf3c:	4b23      	ldr	r3, [pc, #140]	; (800bfcc <GetPortGPIOs+0xa4>)
 800bf3e:	429c      	cmp	r4, r3
 800bf40:	d014      	beq.n	800bf6c <GetPortGPIOs+0x44>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800bf42:	4b23      	ldr	r3, [pc, #140]	; (800bfd0 <GetPortGPIOs+0xa8>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	d029      	beq.n	800bf9c <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800bf48:	4b22      	ldr	r3, [pc, #136]	; (800bfd4 <GetPortGPIOs+0xac>)
 800bf4a:	429c      	cmp	r4, r3
 800bf4c:	d032      	beq.n	800bfb4 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800bf4e:	4b22      	ldr	r3, [pc, #136]	; (800bfd8 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800bf50:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d114      	bne.n	800bf80 <GetPortGPIOs+0x58>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bf56:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800bf58:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bf5a:	05db      	lsls	r3, r3, #23
 800bf5c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800bf5e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bf60:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800bf62:	2320      	movs	r3, #32
 800bf64:	9a06      	ldr	r2, [sp, #24]
	BOS_Status result = BOS_OK;
 800bf66:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800bf68:	8013      	strh	r3, [r2, #0]
 800bf6a:	e009      	b.n	800bf80 <GetPortGPIOs+0x58>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bf6c:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800bf6e:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bf70:	05db      	lsls	r3, r3, #23
 800bf72:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bf74:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bf76:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800bf78:	2308      	movs	r3, #8
	BOS_Status result = BOS_OK;
 800bf7a:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800bf7c:	9a06      	ldr	r2, [sp, #24]
 800bf7e:	8013      	strh	r3, [r2, #0]
	
	return result;	
}
 800bf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bf82:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800bf84:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bf86:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800bf88:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bf8a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800bf8c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800bf8e:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	9a06      	ldr	r2, [sp, #24]
 800bf94:	00db      	lsls	r3, r3, #3
	BOS_Status result = BOS_OK;
 800bf96:	2000      	movs	r0, #0
		*RX_Pin = USART1_RX_PIN;
 800bf98:	8013      	strh	r3, [r2, #0]
 800bf9a:	e7f1      	b.n	800bf80 <GetPortGPIOs+0x58>
		*TX_Pin = USART3_TX_PIN;
 800bf9c:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <GetPortGPIOs+0xb4>)
		*TX_Pin = USART3_TX_PIN;
 800bfa0:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bfa2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800bfa4:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bfa6:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800bfa8:	2380      	movs	r3, #128	; 0x80
 800bfaa:	9a06      	ldr	r2, [sp, #24]
 800bfac:	011b      	lsls	r3, r3, #4
	BOS_Status result = BOS_OK;
 800bfae:	2000      	movs	r0, #0
		*RX_Pin = USART3_RX_PIN;
 800bfb0:	8013      	strh	r3, [r2, #0]
 800bfb2:	e7e5      	b.n	800bf80 <GetPortGPIOs+0x58>
		*TX_Pin = USART5_TX_PIN;
 800bfb4:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <GetPortGPIOs+0xb4>)
	BOS_Status result = BOS_OK;
 800bfb8:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bfba:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800bfbc:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800bfbe:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800bfc0:	2310      	movs	r3, #16
 800bfc2:	9a06      	ldr	r2, [sp, #24]
 800bfc4:	8013      	strh	r3, [r2, #0]
 800bfc6:	e7db      	b.n	800bf80 <GetPortGPIOs+0x58>
 800bfc8:	200023c4 	.word	0x200023c4
 800bfcc:	20002354 	.word	0x20002354
 800bfd0:	200022e4 	.word	0x200022e4
 800bfd4:	20002274 	.word	0x20002274
 800bfd8:	20002204 	.word	0x20002204
 800bfdc:	48000400 	.word	0x48000400

0800bfe0 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800bfe0:	2080      	movs	r0, #128	; 0x80
 800bfe2:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <IsFactoryReset+0xe8>)
 800bfe4:	0280      	lsls	r0, r0, #10
 800bfe6:	6959      	ldr	r1, [r3, #20]
{
 800bfe8:	b530      	push	{r4, r5, lr}
  __GPIOA_CLK_ENABLE();
 800bfea:	4301      	orrs	r1, r0
 800bfec:	6159      	str	r1, [r3, #20]
 800bfee:	695a      	ldr	r2, [r3, #20]
{
 800bff0:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800bff2:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800bff4:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800bff6:	9209      	str	r2, [sp, #36]	; 0x24
 800bff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800bffa:	6959      	ldr	r1, [r3, #20]
 800bffc:	02c0      	lsls	r0, r0, #11
 800bffe:	4301      	orrs	r1, r0
 800c000:	6159      	str	r1, [r3, #20]
 800c002:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c004:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800c006:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800c008:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800c00a:	920a      	str	r2, [sp, #40]	; 0x28
 800c00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800c00e:	6959      	ldr	r1, [r3, #20]
 800c010:	0300      	lsls	r0, r0, #12
 800c012:	4301      	orrs	r1, r0
 800c014:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c016:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c018:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c01a:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800c01c:	4002      	ands	r2, r0
 800c01e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800c022:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c024:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800c026:	430a      	orrs	r2, r1
 800c028:	615a      	str	r2, [r3, #20]
 800c02a:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c02c:	aa03      	add	r2, sp, #12
	__GPIOD_CLK_ENABLE();
 800c02e:	400b      	ands	r3, r1
 800c030:	930c      	str	r3, [sp, #48]	; 0x30
 800c032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c034:	230e      	movs	r3, #14
 800c036:	446b      	add	r3, sp
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	a905      	add	r1, sp, #20
 800c03c:	ab06      	add	r3, sp, #24
 800c03e:	2001      	movs	r0, #1
 800c040:	f7ff ff72 	bl	800bf28 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c044:	aa04      	add	r2, sp, #16
 800c046:	ab08      	add	r3, sp, #32
 800c048:	a907      	add	r1, sp, #28
 800c04a:	2005      	movs	r0, #5
 800c04c:	9400      	str	r4, [sp, #0]
 800c04e:	f7ff ff6b 	bl	800bf28 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c052:	2301      	movs	r3, #1
 800c054:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c056:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c058:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c05a:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c05c:	9805      	ldr	r0, [sp, #20]
 800c05e:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c060:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c062:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c064:	f005 f966 	bl	8011334 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c068:	2302      	movs	r3, #2
 800c06a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c06c:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c06e:	9808      	ldr	r0, [sp, #32]
 800c070:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c072:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c074:	950e      	str	r5, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c076:	f005 f95d 	bl	8011334 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c07a:	466b      	mov	r3, sp
 800c07c:	2200      	movs	r2, #0
 800c07e:	8999      	ldrh	r1, [r3, #12]
 800c080:	9805      	ldr	r0, [sp, #20]
 800c082:	f005 fb0b 	bl	801169c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c086:	2005      	movs	r0, #5
 800c088:	f001 fb76 	bl	800d778 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c08c:	8821      	ldrh	r1, [r4, #0]
 800c08e:	9808      	ldr	r0, [sp, #32]
 800c090:	f005 fafe 	bl	8011690 <HAL_GPIO_ReadPin>
 800c094:	2800      	cmp	r0, #0
 800c096:	d006      	beq.n	800c0a6 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c098:	2201      	movs	r2, #1
	return 0;
 800c09a:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c09c:	4b0b      	ldr	r3, [pc, #44]	; (800c0cc <IsFactoryReset+0xec>)
 800c09e:	4252      	negs	r2, r2
 800c0a0:	601a      	str	r2, [r3, #0]
}
 800c0a2:	b013      	add	sp, #76	; 0x4c
 800c0a4:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c0a6:	466b      	mov	r3, sp
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	8999      	ldrh	r1, [r3, #12]
 800c0ac:	9805      	ldr	r0, [sp, #20]
 800c0ae:	f005 faf5 	bl	801169c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c0b2:	2005      	movs	r0, #5
 800c0b4:	f001 fb60 	bl	800d778 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c0b8:	8821      	ldrh	r1, [r4, #0]
 800c0ba:	9808      	ldr	r0, [sp, #32]
 800c0bc:	f005 fae8 	bl	8011690 <HAL_GPIO_ReadPin>
 800c0c0:	2801      	cmp	r0, #1
 800c0c2:	d1e9      	bne.n	800c098 <IsFactoryReset+0xb8>
 800c0c4:	e7ed      	b.n	800c0a2 <IsFactoryReset+0xc2>
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	40021000 	.word	0x40021000
 800c0cc:	20007ff0 	.word	0x20007ff0

0800c0d0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c0d0:	4770      	bx	lr
 800c0d2:	46c0      	nop			; (mov r8, r8)

0800c0d4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800c0d4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c0d6:	00c1      	lsls	r1, r0, #3
 800c0d8:	4c12      	ldr	r4, [pc, #72]	; (800c124 <CheckForTimedButtonPress+0x50>)
 800c0da:	1809      	adds	r1, r1, r0
 800c0dc:	1865      	adds	r5, r4, r1
 800c0de:	78ae      	ldrb	r6, [r5, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800c0e0:	0080      	lsls	r0, r0, #2
	t1 *= 1000;
 800c0e2:	0172      	lsls	r2, r6, #5
	if (pressCounter[port] == t1) {
 800c0e4:	1820      	adds	r0, r4, r0
	t1 *= 1000;
 800c0e6:	1b92      	subs	r2, r2, r6
 800c0e8:	0093      	lsls	r3, r2, #2
	if (pressCounter[port] == t1) {
 800c0ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
	t1 *= 1000;
 800c0ec:	199b      	adds	r3, r3, r6
 800c0ee:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800c0f0:	4298      	cmp	r0, r3
 800c0f2:	d014      	beq.n	800c11e <CheckForTimedButtonPress+0x4a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c0f4:	78ee      	ldrb	r6, [r5, #3]
	t2 *= 1000;
 800c0f6:	0172      	lsls	r2, r6, #5
 800c0f8:	1b92      	subs	r2, r2, r6
 800c0fa:	0093      	lsls	r3, r2, #2
 800c0fc:	199b      	adds	r3, r3, r6
 800c0fe:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800c100:	4298      	cmp	r0, r3
 800c102:	d009      	beq.n	800c118 <CheckForTimedButtonPress+0x44>
			t3 = button[port].pressedX3Sec;
 800c104:	792d      	ldrb	r5, [r5, #4]
	t3 *= 1000;
 800c106:	016a      	lsls	r2, r5, #5
 800c108:	1b52      	subs	r2, r2, r5
 800c10a:	0093      	lsls	r3, r2, #2
 800c10c:	195b      	adds	r3, r3, r5
 800c10e:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800c110:	4298      	cmp	r0, r3
 800c112:	d001      	beq.n	800c118 <CheckForTimedButtonPress+0x44>
		button[port].state = PRESSED_FOR_X2_SEC;
	}

	return result;
}
 800c114:	2000      	movs	r0, #0
 800c116:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800c118:	230a      	movs	r3, #10
 800c11a:	550b      	strb	r3, [r1, r4]
 800c11c:	e7fa      	b.n	800c114 <CheckForTimedButtonPress+0x40>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c11e:	2309      	movs	r3, #9
 800c120:	550b      	strb	r3, [r1, r4]
 800c122:	e7f7      	b.n	800c114 <CheckForTimedButtonPress+0x40>
 800c124:	2000284c 	.word	0x2000284c

0800c128 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800c128:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c12a:	00c1      	lsls	r1, r0, #3
 800c12c:	4c12      	ldr	r4, [pc, #72]	; (800c178 <CheckForTimedButtonRelease+0x50>)
 800c12e:	1809      	adds	r1, r1, r0
 800c130:	1865      	adds	r5, r4, r1
 800c132:	796e      	ldrb	r6, [r5, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800c134:	0080      	lsls	r0, r0, #2
	t1 *= 1000;
 800c136:	0172      	lsls	r2, r6, #5
	if (releaseCounter[port] == t1) {
 800c138:	1820      	adds	r0, r4, r0
	t1 *= 1000;
 800c13a:	1b92      	subs	r2, r2, r6
 800c13c:	0093      	lsls	r3, r2, #2
	if (releaseCounter[port] == t1) {
 800c13e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	t1 *= 1000;
 800c140:	199b      	adds	r3, r3, r6
 800c142:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800c144:	4298      	cmp	r0, r3
 800c146:	d014      	beq.n	800c172 <CheckForTimedButtonRelease+0x4a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c148:	79ae      	ldrb	r6, [r5, #6]
	t2 *= 1000;
 800c14a:	0172      	lsls	r2, r6, #5
 800c14c:	1b92      	subs	r2, r2, r6
 800c14e:	0093      	lsls	r3, r2, #2
 800c150:	199b      	adds	r3, r3, r6
 800c152:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800c154:	4298      	cmp	r0, r3
 800c156:	d009      	beq.n	800c16c <CheckForTimedButtonRelease+0x44>
			t3 = button[port].releasedY3Sec;
 800c158:	79ed      	ldrb	r5, [r5, #7]
	t3 *= 1000;
 800c15a:	016a      	lsls	r2, r5, #5
 800c15c:	1b52      	subs	r2, r2, r5
 800c15e:	0093      	lsls	r3, r2, #2
 800c160:	195b      	adds	r3, r3, r5
 800c162:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800c164:	4298      	cmp	r0, r3
 800c166:	d001      	beq.n	800c16c <CheckForTimedButtonRelease+0x44>
		button[port].state = RELEASED_FOR_Y2_SEC;
	}

	return result;
}
 800c168:	2000      	movs	r0, #0
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c16c:	230d      	movs	r3, #13
 800c16e:	550b      	strb	r3, [r1, r4]
 800c170:	e7fa      	b.n	800c168 <CheckForTimedButtonRelease+0x40>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c172:	230c      	movs	r3, #12
 800c174:	550b      	strb	r3, [r1, r4]
 800c176:	e7f7      	b.n	800c168 <CheckForTimedButtonRelease+0x40>
 800c178:	2000284c 	.word	0x2000284c

0800c17c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c17e:	4d37      	ldr	r5, [pc, #220]	; (800c25c <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c180:	0006      	movs	r6, r0
	if (BOS_initialized) {
 800c182:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c184:	000c      	movs	r4, r1
 800c186:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d152      	bne.n	800c232 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c18c:	2204      	movs	r2, #4
 800c18e:	4b34      	ldr	r3, [pc, #208]	; (800c260 <AddPortButton+0xe4>)
 800c190:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c192:	250e      	movs	r5, #14
 800c194:	af04      	add	r7, sp, #16
 800c196:	446d      	add	r5, sp
 800c198:	002a      	movs	r2, r5
 800c19a:	ab06      	add	r3, sp, #24
 800c19c:	a905      	add	r1, sp, #20
 800c19e:	0020      	movs	r0, r4
 800c1a0:	9700      	str	r7, [sp, #0]
 800c1a2:	f7ff fec1 	bl	800bf28 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c1a6:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a8:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800c1aa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1ac:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c1ae:	9805      	ldr	r0, [sp, #20]
 800c1b0:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1b2:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b4:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c1b6:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c1b8:	f005 f8bc 	bl	8011334 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c1bc:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1be:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Pin = RX_Pin;
 800c1c0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c1c2:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1c4:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1c6:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c1c8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1ca:	f005 f8b3 	bl	8011334 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c1ce:	4b25      	ldr	r3, [pc, #148]	; (800c264 <AddPortButton+0xe8>)
 800c1d0:	00e2      	lsls	r2, r4, #3
 800c1d2:	1912      	adds	r2, r2, r4
 800c1d4:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c1d6:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800c1d8:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c1da:	2312      	movs	r3, #18
 800c1dc:	353a      	adds	r5, #58	; 0x3a
 800c1de:	00ad      	lsls	r5, r5, #2
 800c1e0:	446b      	add	r3, sp
 800c1e2:	0019      	movs	r1, r3
 800c1e4:	0028      	movs	r0, r5
 800c1e6:	f7ff fbc1 	bl	800b96c <EE_ReadVariable>
	if (!res)											// This variable exists
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d109      	bne.n	800c202 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c1ee:	466b      	mov	r3, sp
 800c1f0:	8a5b      	ldrh	r3, [r3, #18]
 800c1f2:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c1f4:	0b1b      	lsrs	r3, r3, #12
 800c1f6:	42a3      	cmp	r3, r4
 800c1f8:	d103      	bne.n	800c202 <AddPortButton+0x86>
 800c1fa:	230f      	movs	r3, #15
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	42b3      	cmp	r3, r6
 800c200:	d014      	beq.n	800c22c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c202:	466b      	mov	r3, sp
 800c204:	0321      	lsls	r1, r4, #12
 800c206:	0236      	lsls	r6, r6, #8
 800c208:	4331      	orrs	r1, r6
 800c20a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c20c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c20e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c210:	f7ff fbd8 	bl	800b9c4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c214:	2100      	movs	r1, #0
 800c216:	1c68      	adds	r0, r5, #1
 800c218:	f7ff fbd4 	bl	800b9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c21c:	2100      	movs	r1, #0
 800c21e:	1ca8      	adds	r0, r5, #2
 800c220:	f7ff fbd0 	bl	800b9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c224:	2100      	movs	r1, #0
 800c226:	1ce8      	adds	r0, r5, #3
 800c228:	f7ff fbcc 	bl	800b9c4 <EE_WriteVariable>
	}

	return result;
}
 800c22c:	2000      	movs	r0, #0
 800c22e:	b00d      	add	sp, #52	; 0x34
 800c230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c232:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <AddPortButton+0xec>)
 800c234:	008f      	lsls	r7, r1, #2
 800c236:	58f8      	ldr	r0, [r7, r3]
 800c238:	f001 fe40 	bl	800debc <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c23c:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <AddPortButton+0xf0>)
 800c23e:	58f8      	ldr	r0, [r7, r3]
 800c240:	f001 fe3c 	bl	800debc <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800c244:	2104      	movs	r1, #4
 800c246:	4a06      	ldr	r2, [pc, #24]	; (800c260 <AddPortButton+0xe4>)
	if (BOS_initialized) {
 800c248:	782b      	ldrb	r3, [r5, #0]
	portStatus[port] = PORTBUTTON;
 800c24a:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0a0      	beq.n	800c192 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800c250:	0020      	movs	r0, r4
 800c252:	f001 fc75 	bl	800db40 <GetUart>
 800c256:	f006 fcdd 	bl	8012c14 <HAL_UART_DeInit>
 800c25a:	e79a      	b.n	800c192 <AddPortButton+0x16>
 800c25c:	20000b71 	.word	0x20000b71
 800c260:	20000c64 	.word	0x20000c64
 800c264:	2000284c 	.word	0x2000284c
 800c268:	20001eec 	.word	0x20001eec
 800c26c:	20001f08 	.word	0x20001f08

0800c270 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c274:	2300      	movs	r3, #0
 800c276:	4839      	ldr	r0, [pc, #228]	; (800c35c <RemovePortButton+0xec>)
 800c278:	00e9      	lsls	r1, r5, #3
 800c27a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c27c:	002c      	movs	r4, r5
	button[port].type = NONE;
 800c27e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800c280:	b082      	sub	sp, #8
	button[port].state = NONE;
 800c282:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800c284:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800c286:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c288:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c28a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c28c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c28e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c290:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c292:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c294:	466b      	mov	r3, sp
 800c296:	343a      	adds	r4, #58	; 0x3a
 800c298:	00a4      	lsls	r4, r4, #2
 800c29a:	0020      	movs	r0, r4
 800c29c:	1d99      	adds	r1, r3, #6
 800c29e:	f7ff fb65 	bl	800b96c <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d02d      	beq.n	800c302 <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c2a6:	0028      	movs	r0, r5
 800c2a8:	f001 fc4a 	bl	800db40 <GetUart>

	if (huart->Instance == USART1) {
 800c2ac:	4a2c      	ldr	r2, [pc, #176]	; (800c360 <RemovePortButton+0xf0>)
 800c2ae:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800c2b0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d03d      	beq.n	800c332 <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c2b6:	4a2b      	ldr	r2, [pc, #172]	; (800c364 <RemovePortButton+0xf4>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d03e      	beq.n	800c33a <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c2bc:	4a2a      	ldr	r2, [pc, #168]	; (800c368 <RemovePortButton+0xf8>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d03f      	beq.n	800c342 <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c2c2:	4a2a      	ldr	r2, [pc, #168]	; (800c36c <RemovePortButton+0xfc>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d010      	beq.n	800c2ea <RemovePortButton+0x7a>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c2c8:	4a29      	ldr	r2, [pc, #164]	; (800c370 <RemovePortButton+0x100>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d03d      	beq.n	800c34a <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c2ce:	4a29      	ldr	r2, [pc, #164]	; (800c374 <RemovePortButton+0x104>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d03e      	beq.n	800c352 <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c2d4:	4a28      	ldr	r2, [pc, #160]	; (800c378 <RemovePortButton+0x108>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d007      	beq.n	800c2ea <RemovePortButton+0x7a>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c2da:	4a28      	ldr	r2, [pc, #160]	; (800c37c <RemovePortButton+0x10c>)
 800c2dc:	4694      	mov	ip, r2
 800c2de:	4463      	add	r3, ip
 800c2e0:	1e5a      	subs	r2, r3, #1
 800c2e2:	4193      	sbcs	r3, r2
 800c2e4:	425c      	negs	r4, r3
 800c2e6:	b2e4      	uxtb	r4, r4
 800c2e8:	e000      	b.n	800c2ec <RemovePortButton+0x7c>
	BOS_Status result = BOS_OK;
 800c2ea:	2400      	movs	r4, #0
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4b24      	ldr	r3, [pc, #144]	; (800c380 <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c2f0:	0030      	movs	r0, r6
	portStatus[port] = FREE;
 800c2f2:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c2f4:	4923      	ldr	r1, [pc, #140]	; (800c384 <RemovePortButton+0x114>)
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	f006 fcda 	bl	8012cb0 <HAL_UART_Receive_IT>

	return result;
}
 800c2fc:	0020      	movs	r0, r4
 800c2fe:	b002      	add	sp, #8
 800c300:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c302:	2100      	movs	r1, #0
 800c304:	0020      	movs	r0, r4
 800c306:	f7ff fb5d 	bl	800b9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c30a:	2100      	movs	r1, #0
 800c30c:	1c60      	adds	r0, r4, #1
 800c30e:	f7ff fb59 	bl	800b9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c312:	2100      	movs	r1, #0
 800c314:	1ca0      	adds	r0, r4, #2
 800c316:	f7ff fb55 	bl	800b9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c31a:	2100      	movs	r1, #0
 800c31c:	1ce0      	adds	r0, r4, #3
 800c31e:	f7ff fb51 	bl	800b9c4 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800c322:	0028      	movs	r0, r5
 800c324:	f001 fc0c 	bl	800db40 <GetUart>
	if (huart->Instance == USART1) {
 800c328:	4a0d      	ldr	r2, [pc, #52]	; (800c360 <RemovePortButton+0xf0>)
 800c32a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800c32c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800c32e:	4293      	cmp	r3, r2
 800c330:	d1c1      	bne.n	800c2b6 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800c332:	f001 fa33 	bl	800d79c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c336:	2400      	movs	r4, #0
 800c338:	e7d8      	b.n	800c2ec <RemovePortButton+0x7c>
		MX_USART2_UART_Init();
 800c33a:	f001 fa47 	bl	800d7cc <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c33e:	2400      	movs	r4, #0
 800c340:	e7d4      	b.n	800c2ec <RemovePortButton+0x7c>
		MX_USART3_UART_Init();
 800c342:	f001 fa5b 	bl	800d7fc <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c346:	2400      	movs	r4, #0
 800c348:	e7d0      	b.n	800c2ec <RemovePortButton+0x7c>
		MX_USART5_UART_Init();
 800c34a:	f001 fa6f 	bl	800d82c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800c34e:	2400      	movs	r4, #0
 800c350:	e7cc      	b.n	800c2ec <RemovePortButton+0x7c>
		MX_USART6_UART_Init();
 800c352:	f001 fa83 	bl	800d85c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c356:	2400      	movs	r4, #0
 800c358:	e7c8      	b.n	800c2ec <RemovePortButton+0x7c>
 800c35a:	46c0      	nop			; (mov r8, r8)
 800c35c:	2000284c 	.word	0x2000284c
 800c360:	40013800 	.word	0x40013800
 800c364:	40004400 	.word	0x40004400
 800c368:	40004800 	.word	0x40004800
 800c36c:	40004c00 	.word	0x40004c00
 800c370:	40005000 	.word	0x40005000
 800c374:	40011400 	.word	0x40011400
 800c378:	40011800 	.word	0x40011800
 800c37c:	bffee400 	.word	0xbffee400
 800c380:	20000c64 	.word	0x20000c64
 800c384:	20000cfd 	.word	0x20000cfd

0800c388 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	4657      	mov	r7, sl
 800c38c:	4645      	mov	r5, r8
 800c38e:	46de      	mov	lr, fp
 800c390:	464e      	mov	r6, r9
 800c392:	b5e0      	push	{r5, r6, r7, lr}
 800c394:	b087      	sub	sp, #28
 800c396:	9301      	str	r3, [sp, #4]
 800c398:	ab10      	add	r3, sp, #64	; 0x40
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	0004      	movs	r4, r0
 800c39e:	9302      	str	r3, [sp, #8]
 800c3a0:	ab11      	add	r3, sp, #68	; 0x44
 800c3a2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c3a4:	00e7      	lsls	r7, r4, #3
		uint8_t mode) {
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	ab12      	add	r3, sp, #72	; 0x48
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	4699      	mov	r9, r3
 800c3ae:	ab13      	add	r3, sp, #76	; 0x4c
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	469a      	mov	sl, r3
 800c3b4:	ab14      	add	r3, sp, #80	; 0x50
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	469b      	mov	fp, r3
 800c3ba:	ab15      	add	r3, sp, #84	; 0x54
 800c3bc:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800c3be:	4b64      	ldr	r3, [pc, #400]	; (800c550 <SetButtonEvents+0x1c8>)
 800c3c0:	4698      	mov	r8, r3
 800c3c2:	193b      	adds	r3, r7, r4
 800c3c4:	4443      	add	r3, r8
 800c3c6:	785d      	ldrb	r5, [r3, #1]
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	d100      	bne.n	800c3ce <SetButtonEvents+0x46>
 800c3cc:	e092      	b.n	800c4f4 <SetButtonEvents+0x16c>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c3ce:	9d01      	ldr	r5, [sp, #4]
 800c3d0:	709d      	strb	r5, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c3d2:	9d02      	ldr	r5, [sp, #8]
 800c3d4:	70dd      	strb	r5, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c3d6:	9d03      	ldr	r5, [sp, #12]
 800c3d8:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c3da:	464d      	mov	r5, r9
 800c3dc:	715d      	strb	r5, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c3de:	4655      	mov	r5, sl
 800c3e0:	719d      	strb	r5, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c3e2:	465d      	mov	r5, fp
 800c3e4:	71dd      	strb	r5, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c3e6:	2801      	cmp	r0, #1
 800c3e8:	d100      	bne.n	800c3ec <SetButtonEvents+0x64>
 800c3ea:	e085      	b.n	800c4f8 <SetButtonEvents+0x170>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d056      	beq.n	800c49e <SetButtonEvents+0x116>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c3f0:	0025      	movs	r5, r4
 800c3f2:	ab04      	add	r3, sp, #16
 800c3f4:	353a      	adds	r5, #58	; 0x3a
 800c3f6:	00ad      	lsls	r5, r5, #2
 800c3f8:	1d9e      	adds	r6, r3, #6
 800c3fa:	0031      	movs	r1, r6
 800c3fc:	0028      	movs	r0, r5
 800c3fe:	f7ff fab5 	bl	800b96c <EE_ReadVariable>
	if (!res)											// This variable exists
 800c402:	2800      	cmp	r0, #0
 800c404:	d000      	beq.n	800c408 <SetButtonEvents+0x80>
 800c406:	e075      	b.n	800c4f4 <SetButtonEvents+0x16c>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c408:	193f      	adds	r7, r7, r4
 800c40a:	4447      	add	r7, r8
 800c40c:	7a3a      	ldrb	r2, [r7, #8]
 800c40e:	7831      	ldrb	r1, [r6, #0]
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c410:	8833      	ldrh	r3, [r6, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c412:	4291      	cmp	r1, r2
 800c414:	d13b      	bne.n	800c48e <SetButtonEvents+0x106>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c416:	1c6c      	adds	r4, r5, #1
 800c418:	0031      	movs	r1, r6
 800c41a:	0020      	movs	r0, r4
 800c41c:	f7ff faa6 	bl	800b96c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c420:	464a      	mov	r2, r9
 800c422:	9b01      	ldr	r3, [sp, #4]
 800c424:	0219      	lsls	r1, r3, #8
 800c426:	8833      	ldrh	r3, [r6, #0]
 800c428:	430a      	orrs	r2, r1
		if (temp16
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d12a      	bne.n	800c484 <SetButtonEvents+0xfc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c42e:	1cac      	adds	r4, r5, #2
 800c430:	0031      	movs	r1, r6
 800c432:	0020      	movs	r0, r4
 800c434:	f7ff fa9a 	bl	800b96c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c438:	4652      	mov	r2, sl
 800c43a:	9b02      	ldr	r3, [sp, #8]
 800c43c:	0219      	lsls	r1, r3, #8
 800c43e:	8833      	ldrh	r3, [r6, #0]
 800c440:	430a      	orrs	r2, r1
		if (temp16
 800c442:	4293      	cmp	r3, r2
 800c444:	d119      	bne.n	800c47a <SetButtonEvents+0xf2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c446:	3503      	adds	r5, #3
 800c448:	0031      	movs	r1, r6
 800c44a:	0028      	movs	r0, r5
 800c44c:	f7ff fa8e 	bl	800b96c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c450:	465a      	mov	r2, fp
 800c452:	9b03      	ldr	r3, [sp, #12]
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800c454:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c456:	0219      	lsls	r1, r3, #8
 800c458:	8833      	ldrh	r3, [r6, #0]
 800c45a:	430a      	orrs	r2, r1
		if (temp16
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d107      	bne.n	800c470 <SetButtonEvents+0xe8>
}
 800c460:	0020      	movs	r0, r4
 800c462:	b007      	add	sp, #28
 800c464:	bcf0      	pop	{r4, r5, r6, r7}
 800c466:	46bb      	mov	fp, r7
 800c468:	46b2      	mov	sl, r6
 800c46a:	46a9      	mov	r9, r5
 800c46c:	46a0      	mov	r8, r4
 800c46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c470:	0028      	movs	r0, r5
 800c472:	b291      	uxth	r1, r2
 800c474:	f7ff faa6 	bl	800b9c4 <EE_WriteVariable>
 800c478:	e7f2      	b.n	800c460 <SetButtonEvents+0xd8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c47a:	0020      	movs	r0, r4
 800c47c:	b291      	uxth	r1, r2
 800c47e:	f7ff faa1 	bl	800b9c4 <EE_WriteVariable>
 800c482:	e7e0      	b.n	800c446 <SetButtonEvents+0xbe>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c484:	0020      	movs	r0, r4
 800c486:	b291      	uxth	r1, r2
 800c488:	f7ff fa9c 	bl	800b9c4 <EE_WriteVariable>
 800c48c:	e7cf      	b.n	800c42e <SetButtonEvents+0xa6>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c48e:	0a1b      	lsrs	r3, r3, #8
 800c490:	0219      	lsls	r1, r3, #8
 800c492:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c494:	0028      	movs	r0, r5
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c496:	8031      	strh	r1, [r6, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c498:	f7ff fa94 	bl	800b9c4 <EE_WriteVariable>
 800c49c:	e7bb      	b.n	800c416 <SetButtonEvents+0x8e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	d134      	bne.n	800c50c <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	7a1b      	ldrb	r3, [r3, #8]
 800c4a6:	438b      	bics	r3, r1
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	d034      	beq.n	800c516 <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	d034      	beq.n	800c520 <SetButtonEvents+0x198>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c4b6:	2204      	movs	r2, #4
 800c4b8:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c4ba:	9a02      	ldr	r2, [sp, #8]
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d034      	beq.n	800c52a <SetButtonEvents+0x1a2>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c4c4:	9a03      	ldr	r2, [sp, #12]
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	d034      	beq.n	800c534 <SetButtonEvents+0x1ac>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c4ca:	2210      	movs	r2, #16
 800c4cc:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c4ce:	464a      	mov	r2, r9
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	d034      	beq.n	800c53e <SetButtonEvents+0x1b6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c4d4:	2220      	movs	r2, #32
 800c4d6:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c4d8:	4652      	mov	r2, sl
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	d034      	beq.n	800c548 <SetButtonEvents+0x1c0>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c4de:	2240      	movs	r2, #64	; 0x40
 800c4e0:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c4e2:	465a      	mov	r2, fp
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	d10a      	bne.n	800c4fe <SetButtonEvents+0x176>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c4e8:	217f      	movs	r1, #127	; 0x7f
 800c4ea:	193a      	adds	r2, r7, r4
 800c4ec:	4442      	add	r2, r8
 800c4ee:	400b      	ands	r3, r1
 800c4f0:	7213      	strb	r3, [r2, #8]
 800c4f2:	e77d      	b.n	800c3f0 <SetButtonEvents+0x68>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c4f4:	240b      	movs	r4, #11
 800c4f6:	e7b3      	b.n	800c460 <SetButtonEvents+0xd8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c4f8:	7a1a      	ldrb	r2, [r3, #8]
 800c4fa:	237f      	movs	r3, #127	; 0x7f
 800c4fc:	4313      	orrs	r3, r2
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c4fe:	2180      	movs	r1, #128	; 0x80
 800c500:	193a      	adds	r2, r7, r4
 800c502:	4249      	negs	r1, r1
 800c504:	4442      	add	r2, r8
 800c506:	430b      	orrs	r3, r1
 800c508:	7213      	strb	r3, [r2, #8]
 800c50a:	e771      	b.n	800c3f0 <SetButtonEvents+0x68>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c50c:	2101      	movs	r1, #1
 800c50e:	7a1b      	ldrb	r3, [r3, #8]
 800c510:	430b      	orrs	r3, r1
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c512:	2a00      	cmp	r2, #0
 800c514:	d1ca      	bne.n	800c4ac <SetButtonEvents+0x124>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c516:	2202      	movs	r2, #2
 800c518:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c51a:	9a01      	ldr	r2, [sp, #4]
 800c51c:	2a00      	cmp	r2, #0
 800c51e:	d1ca      	bne.n	800c4b6 <SetButtonEvents+0x12e>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c520:	2204      	movs	r2, #4
 800c522:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c524:	9a02      	ldr	r2, [sp, #8]
 800c526:	2a00      	cmp	r2, #0
 800c528:	d1ca      	bne.n	800c4c0 <SetButtonEvents+0x138>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c52a:	2208      	movs	r2, #8
 800c52c:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c52e:	9a03      	ldr	r2, [sp, #12]
 800c530:	2a00      	cmp	r2, #0
 800c532:	d1ca      	bne.n	800c4ca <SetButtonEvents+0x142>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c534:	2210      	movs	r2, #16
 800c536:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c538:	464a      	mov	r2, r9
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d1ca      	bne.n	800c4d4 <SetButtonEvents+0x14c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c53e:	2220      	movs	r2, #32
 800c540:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c542:	4652      	mov	r2, sl
 800c544:	2a00      	cmp	r2, #0
 800c546:	d1ca      	bne.n	800c4de <SetButtonEvents+0x156>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c548:	2240      	movs	r2, #64	; 0x40
 800c54a:	4393      	bics	r3, r2
 800c54c:	e7c9      	b.n	800c4e2 <SetButtonEvents+0x15a>
 800c54e:	46c0      	nop			; (mov r8, r8)
 800c550:	2000284c 	.word	0x2000284c

0800c554 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800c554:	4816      	ldr	r0, [pc, #88]	; (800c5b0 <MX_ADC_Init+0x5c>)
 800c556:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <MX_ADC_Init+0x60>)
void MX_ADC_Init(void) {
 800c558:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c55a:	6683      	str	r3, [r0, #104]	; 0x68
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c55c:	2380      	movs	r3, #128	; 0x80
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c55e:	2104      	movs	r1, #4
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c560:	061b      	lsls	r3, r3, #24
 800c562:	66c3      	str	r3, [r0, #108]	; 0x6c
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c564:	2300      	movs	r3, #0
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c566:	2201      	movs	r2, #1
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c568:	24c2      	movs	r4, #194	; 0xc2
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c56a:	67c1      	str	r1, [r0, #124]	; 0x7c
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c56c:	317c      	adds	r1, #124	; 0x7c
 800c56e:	5043      	str	r3, [r0, r1]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c570:	3104      	adds	r1, #4
 800c572:	5043      	str	r3, [r0, r1]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c574:	3104      	adds	r1, #4
 800c576:	5042      	str	r2, [r0, r1]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c578:	3104      	adds	r1, #4
 800c57a:	5043      	str	r3, [r0, r1]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c57c:	34ff      	adds	r4, #255	; 0xff
 800c57e:	3104      	adds	r1, #4
 800c580:	5044      	str	r4, [r0, r1]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c582:	3104      	adds	r1, #4
 800c584:	5043      	str	r3, [r0, r1]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c586:	3104      	adds	r1, #4
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c588:	6703      	str	r3, [r0, #112]	; 0x70
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c58a:	6743      	str	r3, [r0, #116]	; 0x74
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c58c:	5043      	str	r3, [r0, r1]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c58e:	339c      	adds	r3, #156	; 0x9c
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c590:	6782      	str	r2, [r0, #120]	; 0x78
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c592:	50c2      	str	r2, [r0, r3]

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c594:	3068      	adds	r0, #104	; 0x68
 800c596:	f003 fbf7 	bl	800fd88 <HAL_ADC_Init>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d104      	bne.n	800c5a8 <MX_ADC_Init+0x54>
		Error_Handler();
	}
	ADC_flag = 1;
 800c59e:	2334      	movs	r3, #52	; 0x34
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	4a05      	ldr	r2, [pc, #20]	; (800c5b8 <MX_ADC_Init+0x64>)
 800c5a4:	54d1      	strb	r1, [r2, r3]
}
 800c5a6:	bd10      	pop	{r4, pc}
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800c5a8:	2064      	movs	r0, #100	; 0x64
 800c5aa:	f003 fb13 	bl	800fbd4 <HAL_Delay>

}
 800c5ae:	e7f6      	b.n	800c59e <MX_ADC_Init+0x4a>
 800c5b0:	2000284c 	.word	0x2000284c
 800c5b4:	40012400 	.word	0x40012400
 800c5b8:	200028cc 	.word	0x200028cc

0800c5bc <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c5bc:	b500      	push	{lr}
 800c5be:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c5c0:	2214      	movs	r2, #20
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	a803      	add	r0, sp, #12
 800c5c6:	f007 fae8 	bl	8013b9a <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c5ca:	2080      	movs	r0, #128	; 0x80
 800c5cc:	4b11      	ldr	r3, [pc, #68]	; (800c614 <HAL_ADC_MspInit+0x58>)
 800c5ce:	0080      	lsls	r0, r0, #2
 800c5d0:	6999      	ldr	r1, [r3, #24]
 800c5d2:	4301      	orrs	r1, r0
 800c5d4:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c5d6:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c5d8:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c5da:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c5dc:	4002      	ands	r2, r0
 800c5de:	9201      	str	r2, [sp, #4]
 800c5e0:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c5e2:	695a      	ldr	r2, [r3, #20]
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	615a      	str	r2, [r3, #20]
 800c5e8:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800c5ea:	4a0b      	ldr	r2, [pc, #44]	; (800c618 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ec:	400b      	ands	r3, r1
 800c5ee:	9302      	str	r3, [sp, #8]
 800c5f0:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800c5f2:	2335      	movs	r3, #53	; 0x35
 800c5f4:	5cd3      	ldrb	r3, [r2, r3]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d001      	beq.n	800c5fe <HAL_ADC_MspInit+0x42>
}
 800c5fa:	b009      	add	sp, #36	; 0x24
 800c5fc:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c5fe:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c600:	333b      	adds	r3, #59	; 0x3b
 800c602:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c604:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c606:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c608:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c60a:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c60c:	f004 fe92 	bl	8011334 <HAL_GPIO_Init>
}
 800c610:	e7f3      	b.n	800c5fa <HAL_ADC_MspInit+0x3e>
 800c612:	46c0      	nop			; (mov r8, r8)
 800c614:	40021000 	.word	0x40021000
 800c618:	200028cc 	.word	0x200028cc

0800c61c <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	4647      	mov	r7, r8
 800c620:	46ce      	mov	lr, r9
	if (0 == ADC_flag)
 800c622:	2334      	movs	r3, #52	; 0x34
void ReadTempAndVref(float *temp, float *Vref) {
 800c624:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800c626:	4c57      	ldr	r4, [pc, #348]	; (800c784 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 800c628:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 800c62a:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800c62c:	4688      	mov	r8, r1
	if (0 == ADC_flag)
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d100      	bne.n	800c634 <ReadTempAndVref+0x18>
 800c632:	e093      	b.n	800c75c <ReadTempAndVref+0x140>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c634:	2310      	movs	r3, #16
 800c636:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c638:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c63a:	4d53      	ldr	r5, [pc, #332]	; (800c788 <ReadTempAndVref+0x16c>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c63c:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c63e:	0021      	movs	r1, r4
 800c640:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c642:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c644:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c646:	3138      	adds	r1, #56	; 0x38
 800c648:	3068      	adds	r0, #104	; 0x68
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c64a:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c64c:	f003 fd62 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c650:	2800      	cmp	r0, #0
 800c652:	d000      	beq.n	800c656 <ReadTempAndVref+0x3a>
 800c654:	e091      	b.n	800c77a <ReadTempAndVref+0x15e>
	HAL_ADC_Start(&hadc);
 800c656:	002e      	movs	r6, r5
 800c658:	3668      	adds	r6, #104	; 0x68
 800c65a:	0030      	movs	r0, r6
 800c65c:	f003 fc34 	bl	800fec8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c660:	2164      	movs	r1, #100	; 0x64
 800c662:	0030      	movs	r0, r6
 800c664:	f003 fc7c 	bl	800ff60 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c668:	0030      	movs	r0, r6
 800c66a:	f003 fcd7 	bl	801001c <HAL_ADC_GetValue>
 800c66e:	2344      	movs	r3, #68	; 0x44
 800c670:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c672:	0400      	lsls	r0, r0, #16
 800c674:	0c00      	lsrs	r0, r0, #16
 800c676:	f7f6 fb89 	bl	8002d8c <__aeabi_i2d>
 800c67a:	4a44      	ldr	r2, [pc, #272]	; (800c78c <ReadTempAndVref+0x170>)
 800c67c:	4b44      	ldr	r3, [pc, #272]	; (800c790 <ReadTempAndVref+0x174>)
 800c67e:	f7f5 fd33 	bl	80020e8 <__aeabi_dmul>
 800c682:	2200      	movs	r2, #0
 800c684:	4b43      	ldr	r3, [pc, #268]	; (800c794 <ReadTempAndVref+0x178>)
 800c686:	f7f5 f92d 	bl	80018e4 <__aeabi_ddiv>
 800c68a:	4a43      	ldr	r2, [pc, #268]	; (800c798 <ReadTempAndVref+0x17c>)
 800c68c:	4b43      	ldr	r3, [pc, #268]	; (800c79c <ReadTempAndVref+0x180>)
 800c68e:	f7f5 ff97 	bl	80025c0 <__aeabi_dsub>
 800c692:	4a43      	ldr	r2, [pc, #268]	; (800c7a0 <ReadTempAndVref+0x184>)
 800c694:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <ReadTempAndVref+0x188>)
 800c696:	f7f5 f925 	bl	80018e4 <__aeabi_ddiv>
 800c69a:	4b43      	ldr	r3, [pc, #268]	; (800c7a8 <ReadTempAndVref+0x18c>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	f7f4 fde5 	bl	800126c <__aeabi_dadd>
 800c6a2:	f7f6 fc11 	bl	8002ec8 <__aeabi_d2f>
 800c6a6:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800c6a8:	0030      	movs	r0, r6
 800c6aa:	f003 fc39 	bl	800ff20 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c6ae:	2310      	movs	r3, #16
 800c6b0:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_NONE;
 800c6b2:	4b3e      	ldr	r3, [pc, #248]	; (800c7ac <ReadTempAndVref+0x190>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6b4:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c6b6:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c6b8:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6ba:	0030      	movs	r0, r6
 800c6bc:	3138      	adds	r1, #56	; 0x38
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c6be:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6c0:	f003 fd28 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d154      	bne.n	800c772 <ReadTempAndVref+0x156>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c6c8:	2311      	movs	r3, #17
 800c6ca:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c6cc:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6ce:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c6d0:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6d2:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c6d4:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c6d6:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6d8:	3138      	adds	r1, #56	; 0x38
 800c6da:	3068      	adds	r0, #104	; 0x68
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c6dc:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6de:	f003 fd19 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d141      	bne.n	800c76a <ReadTempAndVref+0x14e>
	HAL_ADC_Start(&hadc);
 800c6e6:	3568      	adds	r5, #104	; 0x68
 800c6e8:	0028      	movs	r0, r5
 800c6ea:	f003 fbed 	bl	800fec8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c6ee:	2164      	movs	r1, #100	; 0x64
 800c6f0:	0028      	movs	r0, r5
 800c6f2:	f003 fc35 	bl	800ff60 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c6f6:	0028      	movs	r0, r5
 800c6f8:	f003 fc90 	bl	801001c <HAL_ADC_GetValue>
 800c6fc:	2346      	movs	r3, #70	; 0x46
 800c6fe:	4681      	mov	r9, r0
 800c700:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c702:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <ReadTempAndVref+0x194>)
 800c704:	8818      	ldrh	r0, [r3, #0]
 800c706:	f7f6 fb41 	bl	8002d8c <__aeabi_i2d>
 800c70a:	4a20      	ldr	r2, [pc, #128]	; (800c78c <ReadTempAndVref+0x170>)
 800c70c:	4b20      	ldr	r3, [pc, #128]	; (800c790 <ReadTempAndVref+0x174>)
 800c70e:	f7f5 fceb 	bl	80020e8 <__aeabi_dmul>
 800c712:	464b      	mov	r3, r9
 800c714:	0006      	movs	r6, r0
 800c716:	0418      	lsls	r0, r3, #16
 800c718:	0c00      	lsrs	r0, r0, #16
 800c71a:	000f      	movs	r7, r1
 800c71c:	f7f6 fb36 	bl	8002d8c <__aeabi_i2d>
 800c720:	0002      	movs	r2, r0
 800c722:	000b      	movs	r3, r1
 800c724:	0030      	movs	r0, r6
 800c726:	0039      	movs	r1, r7
 800c728:	f7f5 f8dc 	bl	80018e4 <__aeabi_ddiv>
 800c72c:	f7f6 fbcc 	bl	8002ec8 <__aeabi_d2f>
 800c730:	4643      	mov	r3, r8
 800c732:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800c734:	0028      	movs	r0, r5
 800c736:	f003 fbf3 	bl	800ff20 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c73a:	2311      	movs	r3, #17
 800c73c:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_NONE;
 800c73e:	4b1b      	ldr	r3, [pc, #108]	; (800c7ac <ReadTempAndVref+0x190>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c740:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c742:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c744:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c746:	0028      	movs	r0, r5
 800c748:	3138      	adds	r1, #56	; 0x38
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c74a:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c74c:	f003 fce2 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c750:	2800      	cmp	r0, #0
 800c752:	d106      	bne.n	800c762 <ReadTempAndVref+0x146>
}
 800c754:	bcc0      	pop	{r6, r7}
 800c756:	46b9      	mov	r9, r7
 800c758:	46b0      	mov	r8, r6
 800c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800c75c:	f7ff fefa 	bl	800c554 <MX_ADC_Init>
 800c760:	e768      	b.n	800c634 <ReadTempAndVref+0x18>
	HAL_Delay(100);
 800c762:	2064      	movs	r0, #100	; 0x64
 800c764:	f003 fa36 	bl	800fbd4 <HAL_Delay>
}
 800c768:	e7f4      	b.n	800c754 <ReadTempAndVref+0x138>
	HAL_Delay(100);
 800c76a:	2064      	movs	r0, #100	; 0x64
 800c76c:	f003 fa32 	bl	800fbd4 <HAL_Delay>
}
 800c770:	e7b9      	b.n	800c6e6 <ReadTempAndVref+0xca>
	HAL_Delay(100);
 800c772:	2064      	movs	r0, #100	; 0x64
 800c774:	f003 fa2e 	bl	800fbd4 <HAL_Delay>
}
 800c778:	e7a6      	b.n	800c6c8 <ReadTempAndVref+0xac>
	HAL_Delay(100);
 800c77a:	2064      	movs	r0, #100	; 0x64
 800c77c:	f003 fa2a 	bl	800fbd4 <HAL_Delay>
}
 800c780:	e769      	b.n	800c656 <ReadTempAndVref+0x3a>
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	200028cc 	.word	0x200028cc
 800c788:	2000284c 	.word	0x2000284c
 800c78c:	66666666 	.word	0x66666666
 800c790:	400a6666 	.word	0x400a6666
 800c794:	40affe00 	.word	0x40affe00
 800c798:	28f5c28f 	.word	0x28f5c28f
 800c79c:	3ff68f5c 	.word	0x3ff68f5c
 800c7a0:	33333333 	.word	0x33333333
 800c7a4:	40113333 	.word	0x40113333
 800c7a8:	40390000 	.word	0x40390000
 800c7ac:	00001001 	.word	0x00001001
 800c7b0:	1ffff7ba 	.word	0x1ffff7ba

0800c7b4 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800c7b6:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c7b8:	0005      	movs	r5, r0
 800c7ba:	000e      	movs	r6, r1
 800c7bc:	2700      	movs	r7, #0
 800c7be:	b087      	sub	sp, #28
	if (port == 2 || port == 3) {
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d901      	bls.n	800c7c8 <GetReadPrecentage+0x14>
}
 800c7c4:	b007      	add	sp, #28
 800c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800c7c8:	2334      	movs	r3, #52	; 0x34
 800c7ca:	4c51      	ldr	r4, [pc, #324]	; (800c910 <GetReadPrecentage+0x15c>)
 800c7cc:	5ce3      	ldrb	r3, [r4, r3]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d05b      	beq.n	800c88a <GetReadPrecentage+0xd6>
		Channel = Get_channel(GetUart(port), "bottom");
 800c7d2:	0028      	movs	r0, r5
 800c7d4:	f001 f9b4 	bl	800db40 <GetUart>
	else if (huart->Instance == USART2 && side == "bottom")
 800c7d8:	4a4e      	ldr	r2, [pc, #312]	; (800c914 <GetReadPrecentage+0x160>)
	if (huart->Instance == USART2 && side == "top")
 800c7da:	6803      	ldr	r3, [r0, #0]
	else if (huart->Instance == USART2 && side == "bottom")
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d077      	beq.n	800c8d0 <GetReadPrecentage+0x11c>
	else if (huart->Instance == USART6 && side == "bottom")
 800c7e0:	4a4d      	ldr	r2, [pc, #308]	; (800c918 <GetReadPrecentage+0x164>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d077      	beq.n	800c8d6 <GetReadPrecentage+0x122>
		sConfig.Channel = Channel;
 800c7e6:	2200      	movs	r2, #0
		Channel = Get_channel(GetUart(port), "bottom");
 800c7e8:	2348      	movs	r3, #72	; 0x48
 800c7ea:	54e7      	strb	r7, [r4, r3]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c7ec:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7ee:	4d4b      	ldr	r5, [pc, #300]	; (800c91c <GetReadPrecentage+0x168>)
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c7f0:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7f2:	0021      	movs	r1, r4
 800c7f4:	0028      	movs	r0, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c7f6:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c7f8:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7fa:	3138      	adds	r1, #56	; 0x38
 800c7fc:	3068      	adds	r0, #104	; 0x68
		sConfig.Channel = Channel;
 800c7fe:	63a2      	str	r2, [r4, #56]	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c800:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c802:	f003 fc87 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c806:	2800      	cmp	r0, #0
 800c808:	d13b      	bne.n	800c882 <GetReadPrecentage+0xce>
		HAL_ADC_Start(&hadc);
 800c80a:	3568      	adds	r5, #104	; 0x68
 800c80c:	0028      	movs	r0, r5
 800c80e:	f003 fb5b 	bl	800fec8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c812:	2164      	movs	r1, #100	; 0x64
 800c814:	0028      	movs	r0, r5
 800c816:	f003 fba3 	bl	800ff60 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c81a:	0028      	movs	r0, r5
 800c81c:	f003 fbfe 	bl	801001c <HAL_ADC_GetValue>
 800c820:	f7f4 fce2 	bl	80011e8 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c824:	f7f6 fb08 	bl	8002e38 <__aeabi_f2d>
 800c828:	4a3d      	ldr	r2, [pc, #244]	; (800c920 <GetReadPrecentage+0x16c>)
 800c82a:	4b3e      	ldr	r3, [pc, #248]	; (800c924 <GetReadPrecentage+0x170>)
 800c82c:	f7f5 fc5c 	bl	80020e8 <__aeabi_dmul>
 800c830:	2200      	movs	r2, #0
 800c832:	4b3d      	ldr	r3, [pc, #244]	; (800c928 <GetReadPrecentage+0x174>)
 800c834:	f7f5 f856 	bl	80018e4 <__aeabi_ddiv>
 800c838:	f7f6 fb46 	bl	8002ec8 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 800c83c:	493b      	ldr	r1, [pc, #236]	; (800c92c <GetReadPrecentage+0x178>)
		percentage = 3.3 * percentage / 4095;
 800c83e:	64e0      	str	r0, [r4, #76]	; 0x4c
		current = (100 * percentage) / 3.3;
 800c840:	f7f4 f9de 	bl	8000c00 <__aeabi_fmul>
 800c844:	f7f6 faf8 	bl	8002e38 <__aeabi_f2d>
 800c848:	4b36      	ldr	r3, [pc, #216]	; (800c924 <GetReadPrecentage+0x170>)
 800c84a:	4a35      	ldr	r2, [pc, #212]	; (800c920 <GetReadPrecentage+0x16c>)
 800c84c:	f7f5 f84a 	bl	80018e4 <__aeabi_ddiv>
 800c850:	f7f6 fb3a 	bl	8002ec8 <__aeabi_d2f>
 800c854:	6520      	str	r0, [r4, #80]	; 0x50
		*precentageValue = current;
 800c856:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800c858:	0028      	movs	r0, r5
 800c85a:	f003 fb61 	bl	800ff20 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c85e:	2348      	movs	r3, #72	; 0x48
 800c860:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c862:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800c864:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_NONE;
 800c866:	4b32      	ldr	r3, [pc, #200]	; (800c930 <GetReadPrecentage+0x17c>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c868:	0028      	movs	r0, r5
		sConfig.Rank = ADC_RANK_NONE;
 800c86a:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c86c:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c86e:	3138      	adds	r1, #56	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c870:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c872:	f003 fc4f 	bl	8010114 <HAL_ADC_ConfigChannel>
 800c876:	2800      	cmp	r0, #0
 800c878:	d0a4      	beq.n	800c7c4 <GetReadPrecentage+0x10>
	HAL_Delay(100);
 800c87a:	2064      	movs	r0, #100	; 0x64
 800c87c:	f003 f9aa 	bl	800fbd4 <HAL_Delay>
}
 800c880:	e7a0      	b.n	800c7c4 <GetReadPrecentage+0x10>
	HAL_Delay(100);
 800c882:	2064      	movs	r0, #100	; 0x64
 800c884:	f003 f9a6 	bl	800fbd4 <HAL_Delay>
}
 800c888:	e7bf      	b.n	800c80a <GetReadPrecentage+0x56>
			MX_ADC_Init();
 800c88a:	f7ff fe63 	bl	800c554 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c88e:	0028      	movs	r0, r5
 800c890:	f001 f956 	bl	800db40 <GetUart>
 800c894:	f006 f9be 	bl	8012c14 <HAL_UART_DeInit>
			if (port == 3) {
 800c898:	2d03      	cmp	r5, #3
 800c89a:	d01f      	beq.n	800c8dc <GetReadPrecentage+0x128>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c89c:	2090      	movs	r0, #144	; 0x90
 800c89e:	2104      	movs	r1, #4
 800c8a0:	05c0      	lsls	r0, r0, #23
 800c8a2:	f004 fe5d 	bl	8011560 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c8a6:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8a8:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c8aa:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ac:	3b03      	subs	r3, #3
 800c8ae:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b0:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8b2:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b4:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8b6:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b8:	f004 fd3c 	bl	8011334 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c8bc:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c8be:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c8c0:	4b1c      	ldr	r3, [pc, #112]	; (800c934 <GetReadPrecentage+0x180>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c8c2:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800c8c4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c8c6:	05c0      	lsls	r0, r0, #23
 800c8c8:	3a05      	subs	r2, #5
 800c8ca:	f004 fee7 	bl	801169c <HAL_GPIO_WritePin>
 800c8ce:	e780      	b.n	800c7d2 <GetReadPrecentage+0x1e>
 800c8d0:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 800c8d2:	2703      	movs	r7, #3
 800c8d4:	e788      	b.n	800c7e8 <GetReadPrecentage+0x34>
 800c8d6:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 800c8d8:	2705      	movs	r7, #5
 800c8da:	e785      	b.n	800c7e8 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c8dc:	2090      	movs	r0, #144	; 0x90
 800c8de:	2110      	movs	r1, #16
 800c8e0:	05c0      	lsls	r0, r0, #23
 800c8e2:	f004 fe3d 	bl	8011560 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c8e6:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8e8:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c8ea:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8ec:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ee:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8f0:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8f2:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8f4:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8f6:	f004 fd1d 	bl	8011334 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c8fa:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c8fc:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c8fe:	4b0d      	ldr	r3, [pc, #52]	; (800c934 <GetReadPrecentage+0x180>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c900:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800c902:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c904:	05c0      	lsls	r0, r0, #23
 800c906:	3a05      	subs	r2, #5
 800c908:	f004 fec8 	bl	801169c <HAL_GPIO_WritePin>
 800c90c:	e761      	b.n	800c7d2 <GetReadPrecentage+0x1e>
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	200028cc 	.word	0x200028cc
 800c914:	40004400 	.word	0x40004400
 800c918:	40011400 	.word	0x40011400
 800c91c:	2000284c 	.word	0x2000284c
 800c920:	66666666 	.word	0x66666666
 800c924:	400a6666 	.word	0x400a6666
 800c928:	40affe00 	.word	0x40affe00
 800c92c:	42c80000 	.word	0x42c80000
 800c930:	00001001 	.word	0x00001001
 800c934:	20000c64 	.word	0x20000c64

0800c938 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c938:	2802      	cmp	r0, #2
 800c93a:	d010      	beq.n	800c95e <Get_Rank+0x26>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c93c:	2803      	cmp	r0, #3
 800c93e:	d003      	beq.n	800c948 <Get_Rank+0x10>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800c940:	2354      	movs	r3, #84	; 0x54
 800c942:	4a13      	ldr	r2, [pc, #76]	; (800c990 <Get_Rank+0x58>)
 800c944:	5cd0      	ldrb	r0, [r2, r3]
}
 800c946:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800c948:	4b12      	ldr	r3, [pc, #72]	; (800c994 <Get_Rank+0x5c>)
 800c94a:	4299      	cmp	r1, r3
 800c94c:	d013      	beq.n	800c976 <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <Get_Rank+0x60>)
 800c950:	4299      	cmp	r1, r3
 800c952:	d1f5      	bne.n	800c940 <Get_Rank+0x8>
		Rank_t = 3;
 800c954:	2354      	movs	r3, #84	; 0x54
 800c956:	4a0e      	ldr	r2, [pc, #56]	; (800c990 <Get_Rank+0x58>)
 800c958:	54d0      	strb	r0, [r2, r3]
 800c95a:	2003      	movs	r0, #3
 800c95c:	e7f3      	b.n	800c946 <Get_Rank+0xe>
	if (Port == 2 && side == "top")
 800c95e:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <Get_Rank+0x5c>)
 800c960:	4299      	cmp	r1, r3
 800c962:	d00e      	beq.n	800c982 <Get_Rank+0x4a>
	else if (Port == 2 && side == "bottom")
 800c964:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <Get_Rank+0x60>)
 800c966:	4299      	cmp	r1, r3
 800c968:	d1ea      	bne.n	800c940 <Get_Rank+0x8>
		Rank_t = 1;
 800c96a:	2354      	movs	r3, #84	; 0x54
 800c96c:	2101      	movs	r1, #1
 800c96e:	4a08      	ldr	r2, [pc, #32]	; (800c990 <Get_Rank+0x58>)
 800c970:	2001      	movs	r0, #1
 800c972:	54d1      	strb	r1, [r2, r3]
 800c974:	e7e7      	b.n	800c946 <Get_Rank+0xe>
		Rank_t = 2;
 800c976:	2354      	movs	r3, #84	; 0x54
 800c978:	2102      	movs	r1, #2
 800c97a:	4a05      	ldr	r2, [pc, #20]	; (800c990 <Get_Rank+0x58>)
 800c97c:	3801      	subs	r0, #1
 800c97e:	54d1      	strb	r1, [r2, r3]
 800c980:	e7e1      	b.n	800c946 <Get_Rank+0xe>
		Rank_t = 0;
 800c982:	2354      	movs	r3, #84	; 0x54
 800c984:	2100      	movs	r1, #0
 800c986:	4a02      	ldr	r2, [pc, #8]	; (800c990 <Get_Rank+0x58>)
 800c988:	2000      	movs	r0, #0
 800c98a:	54d1      	strb	r1, [r2, r3]
 800c98c:	e7db      	b.n	800c946 <Get_Rank+0xe>
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	200028cc 	.word	0x200028cc
 800c994:	0801b134 	.word	0x0801b134
 800c998:	0801b138 	.word	0x0801b138

0800c99c <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800c99e:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c9a0:	0004      	movs	r4, r0
 800c9a2:	000d      	movs	r5, r1
 800c9a4:	2600      	movs	r6, #0
	if (ADC_port == 2 || ADC_port == 3) {
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d900      	bls.n	800c9ac <ADCSelectChannel+0x10>
}
 800c9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800c9ac:	2335      	movs	r3, #53	; 0x35
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4f1b      	ldr	r7, [pc, #108]	; (800ca20 <ADCSelectChannel+0x84>)
 800c9b2:	54fa      	strb	r2, [r7, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c9b4:	f001 f8c4 	bl	800db40 <GetUart>
 800c9b8:	f006 f92c 	bl	8012c14 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c9bc:	2206      	movs	r2, #6
 800c9be:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800c9c0:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800c9c2:	191b      	adds	r3, r3, r4
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c9c8:	f001 f8ba 	bl	800db40 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c9cc:	4a16      	ldr	r2, [pc, #88]	; (800ca28 <ADCSelectChannel+0x8c>)
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d011      	beq.n	800c9f8 <ADCSelectChannel+0x5c>
	else if (huart->Instance == USART6 && side == "top")
 800c9d4:	4a15      	ldr	r2, [pc, #84]	; (800ca2c <ADCSelectChannel+0x90>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d016      	beq.n	800ca08 <ADCSelectChannel+0x6c>
		Channel = Get_channel(GetUart(ADC_port), side);
 800c9da:	2348      	movs	r3, #72	; 0x48
		Rank_t = Get_Rank(ADC_port, side);
 800c9dc:	0029      	movs	r1, r5
 800c9de:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800c9e0:	54fe      	strb	r6, [r7, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800c9e2:	f7ff ffa9 	bl	800c938 <Get_Rank>
 800c9e6:	2354      	movs	r3, #84	; 0x54
 800c9e8:	54f8      	strb	r0, [r7, r3]
		if (ADC_flag == 0)
 800c9ea:	3b20      	subs	r3, #32
 800c9ec:	5cfb      	ldrb	r3, [r7, r3]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1db      	bne.n	800c9aa <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800c9f2:	f7ff fdaf 	bl	800c554 <MX_ADC_Init>
}
 800c9f6:	e7d8      	b.n	800c9aa <ADCSelectChannel+0xe>
	if (huart->Instance == USART2 && side == "top")
 800c9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <ADCSelectChannel+0x94>)
 800c9fa:	429d      	cmp	r5, r3
 800c9fc:	d00c      	beq.n	800ca18 <ADCSelectChannel+0x7c>
	else if (huart->Instance == USART2 && side == "bottom")
 800c9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <ADCSelectChannel+0x98>)
 800ca00:	429d      	cmp	r5, r3
 800ca02:	d1ea      	bne.n	800c9da <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_3;
 800ca04:	2603      	movs	r6, #3
 800ca06:	e7e8      	b.n	800c9da <ADCSelectChannel+0x3e>
	else if (huart->Instance == USART6 && side == "top")
 800ca08:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <ADCSelectChannel+0x94>)
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	d006      	beq.n	800ca1c <ADCSelectChannel+0x80>
	else if (huart->Instance == USART6 && side == "bottom")
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <ADCSelectChannel+0x98>)
 800ca10:	429d      	cmp	r5, r3
 800ca12:	d1e2      	bne.n	800c9da <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_5;
 800ca14:	2605      	movs	r6, #5
 800ca16:	e7e0      	b.n	800c9da <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_2;
 800ca18:	2602      	movs	r6, #2
 800ca1a:	e7de      	b.n	800c9da <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_4;
 800ca1c:	2604      	movs	r6, #4
 800ca1e:	e7dc      	b.n	800c9da <ADCSelectChannel+0x3e>
 800ca20:	200028cc 	.word	0x200028cc
 800ca24:	20000c64 	.word	0x20000c64
 800ca28:	40004400 	.word	0x40004400
 800ca2c:	40011400 	.word	0x40011400
 800ca30:	0801b134 	.word	0x0801b134
 800ca34:	0801b138 	.word	0x0801b138

0800ca38 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	4647      	mov	r7, r8
 800ca3c:	46ce      	mov	lr, r9
 800ca3e:	2300      	movs	r3, #0
 800ca40:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800ca42:	4c3e      	ldr	r4, [pc, #248]	; (800cb3c <ReadADCChannel+0x104>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ca44:	4698      	mov	r8, r3
	if (ADC_flag == 1) {
 800ca46:	3334      	adds	r3, #52	; 0x34
 800ca48:	5ce3      	ldrb	r3, [r4, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ca4a:	0007      	movs	r7, r0
 800ca4c:	000e      	movs	r6, r1
 800ca4e:	0015      	movs	r5, r2
	if (ADC_flag == 1) {
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d00c      	beq.n	800ca6e <ReadADCChannel+0x36>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800ca54:	2354      	movs	r3, #84	; 0x54
 800ca56:	5ce3      	ldrb	r3, [r4, r3]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	18e4      	adds	r4, r4, r3
 800ca5c:	2358      	movs	r3, #88	; 0x58
 800ca5e:	5ae0      	ldrh	r0, [r4, r3]
 800ca60:	f7f4 fbc2 	bl	80011e8 <__aeabi_ui2f>
 800ca64:	6028      	str	r0, [r5, #0]
}
 800ca66:	bcc0      	pop	{r6, r7}
 800ca68:	46b9      	mov	r9, r7
 800ca6a:	46b0      	mov	r8, r6
 800ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800ca6e:	f001 f867 	bl	800db40 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800ca72:	4a33      	ldr	r2, [pc, #204]	; (800cb40 <ReadADCChannel+0x108>)
 800ca74:	6803      	ldr	r3, [r0, #0]
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d043      	beq.n	800cb02 <ReadADCChannel+0xca>
	else if (huart->Instance == USART6 && side == "top")
 800ca7a:	4a32      	ldr	r2, [pc, #200]	; (800cb44 <ReadADCChannel+0x10c>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d04d      	beq.n	800cb1c <ReadADCChannel+0xe4>
		Channel = Get_channel(GetUart(Port), side);
 800ca80:	2348      	movs	r3, #72	; 0x48
 800ca82:	4642      	mov	r2, r8
		Rank_t = Get_Rank(Port, side);
 800ca84:	0031      	movs	r1, r6
 800ca86:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800ca88:	4699      	mov	r9, r3
 800ca8a:	54e2      	strb	r2, [r4, r3]
		Rank_t = Get_Rank(Port, side);
 800ca8c:	f7ff ff54 	bl	800c938 <Get_Rank>
 800ca90:	2354      	movs	r3, #84	; 0x54
 800ca92:	54e0      	strb	r0, [r4, r3]
		sConfig.Channel = Channel;
 800ca94:	464b      	mov	r3, r9
 800ca96:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca98:	4e2b      	ldr	r6, [pc, #172]	; (800cb48 <ReadADCChannel+0x110>)
		sConfig.Channel = Channel;
 800ca9a:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ca9c:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca9e:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800caa0:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caa2:	0030      	movs	r0, r6
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800caa4:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800caa6:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caa8:	3138      	adds	r1, #56	; 0x38
 800caaa:	3068      	adds	r0, #104	; 0x68
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800caac:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caae:	f003 fb31 	bl	8010114 <HAL_ADC_ConfigChannel>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d12e      	bne.n	800cb14 <ReadADCChannel+0xdc>
		HAL_ADC_Start(&hadc);
 800cab6:	3668      	adds	r6, #104	; 0x68
 800cab8:	0030      	movs	r0, r6
 800caba:	f003 fa05 	bl	800fec8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cabe:	2164      	movs	r1, #100	; 0x64
 800cac0:	0030      	movs	r0, r6
 800cac2:	f003 fa4d 	bl	800ff60 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800cac6:	0030      	movs	r0, r6
 800cac8:	f003 faa8 	bl	801001c <HAL_ADC_GetValue>
 800cacc:	2354      	movs	r3, #84	; 0x54
 800cace:	2258      	movs	r2, #88	; 0x58
 800cad0:	5ce3      	ldrb	r3, [r4, r3]
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	18e3      	adds	r3, r4, r3
 800cad6:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800cad8:	0030      	movs	r0, r6
 800cada:	f003 fa21 	bl	800ff20 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cade:	2348      	movs	r3, #72	; 0x48
 800cae0:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cae2:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800cae4:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_NONE;
 800cae6:	4b19      	ldr	r3, [pc, #100]	; (800cb4c <ReadADCChannel+0x114>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cae8:	0030      	movs	r0, r6
		sConfig.Rank = ADC_RANK_NONE;
 800caea:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800caec:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caee:	3138      	adds	r1, #56	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800caf0:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caf2:	f003 fb0f 	bl	8010114 <HAL_ADC_ConfigChannel>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0ac      	beq.n	800ca54 <ReadADCChannel+0x1c>
	HAL_Delay(100);
 800cafa:	2064      	movs	r0, #100	; 0x64
 800cafc:	f003 f86a 	bl	800fbd4 <HAL_Delay>
}
 800cb00:	e7a8      	b.n	800ca54 <ReadADCChannel+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800cb02:	4b13      	ldr	r3, [pc, #76]	; (800cb50 <ReadADCChannel+0x118>)
 800cb04:	429e      	cmp	r6, r3
 800cb06:	d012      	beq.n	800cb2e <ReadADCChannel+0xf6>
	else if (huart->Instance == USART2 && side == "bottom")
 800cb08:	4b12      	ldr	r3, [pc, #72]	; (800cb54 <ReadADCChannel+0x11c>)
 800cb0a:	429e      	cmp	r6, r3
 800cb0c:	d1b8      	bne.n	800ca80 <ReadADCChannel+0x48>
		return ADC_CHANNEL_3;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	4698      	mov	r8, r3
 800cb12:	e7b5      	b.n	800ca80 <ReadADCChannel+0x48>
	HAL_Delay(100);
 800cb14:	2064      	movs	r0, #100	; 0x64
 800cb16:	f003 f85d 	bl	800fbd4 <HAL_Delay>
}
 800cb1a:	e7cc      	b.n	800cab6 <ReadADCChannel+0x7e>
	else if (huart->Instance == USART6 && side == "top")
 800cb1c:	4b0c      	ldr	r3, [pc, #48]	; (800cb50 <ReadADCChannel+0x118>)
 800cb1e:	429e      	cmp	r6, r3
 800cb20:	d008      	beq.n	800cb34 <ReadADCChannel+0xfc>
	else if (huart->Instance == USART6 && side == "bottom")
 800cb22:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <ReadADCChannel+0x11c>)
 800cb24:	429e      	cmp	r6, r3
 800cb26:	d1ab      	bne.n	800ca80 <ReadADCChannel+0x48>
		return ADC_CHANNEL_5;
 800cb28:	2305      	movs	r3, #5
 800cb2a:	4698      	mov	r8, r3
 800cb2c:	e7a8      	b.n	800ca80 <ReadADCChannel+0x48>
		return ADC_CHANNEL_2;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	4698      	mov	r8, r3
 800cb32:	e7a5      	b.n	800ca80 <ReadADCChannel+0x48>
		return ADC_CHANNEL_4;
 800cb34:	2304      	movs	r3, #4
 800cb36:	4698      	mov	r8, r3
 800cb38:	e7a2      	b.n	800ca80 <ReadADCChannel+0x48>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	200028cc 	.word	0x200028cc
 800cb40:	40004400 	.word	0x40004400
 800cb44:	40011400 	.word	0x40011400
 800cb48:	2000284c 	.word	0x2000284c
 800cb4c:	00001001 	.word	0x00001001
 800cb50:	0801b134 	.word	0x0801b134
 800cb54:	0801b138 	.word	0x0801b138

0800cb58 <buttonReleasedCallback>:
 800cb58:	4770      	bx	lr
 800cb5a:	46c0      	nop			; (mov r8, r8)

0800cb5c <buttonClickedCallback>:
 800cb5c:	4770      	bx	lr
 800cb5e:	46c0      	nop			; (mov r8, r8)

0800cb60 <buttonDblClickedCallback>:
 800cb60:	4770      	bx	lr
 800cb62:	46c0      	nop			; (mov r8, r8)

0800cb64 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800cb64:	4770      	bx	lr
 800cb66:	46c0      	nop			; (mov r8, r8)

0800cb68 <buttonReleasedForYCallback>:
 800cb68:	4770      	bx	lr
 800cb6a:	46c0      	nop			; (mov r8, r8)

0800cb6c <CheckAttachedButtons>:
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cb6c:	2338      	movs	r3, #56	; 0x38
void CheckAttachedButtons(void) {
 800cb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb70:	4645      	mov	r5, r8
 800cb72:	4698      	mov	r8, r3
 800cb74:	4bbe      	ldr	r3, [pc, #760]	; (800ce70 <CheckAttachedButtons+0x304>)
 800cb76:	4657      	mov	r7, sl
 800cb78:	469a      	mov	sl, r3
 800cb7a:	2360      	movs	r3, #96	; 0x60
 800cb7c:	464e      	mov	r6, r9
 800cb7e:	46de      	mov	lr, fp
 800cb80:	4453      	add	r3, sl
 800cb82:	4699      	mov	r9, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cb84:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800cb86:	b5e0      	push	{r5, r6, r7, lr}
 800cb88:	4dba      	ldr	r5, [pc, #744]	; (800ce74 <CheckAttachedButtons+0x308>)
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cb8a:	2401      	movs	r4, #1
 800cb8c:	002e      	movs	r6, r5
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cb8e:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 800cb90:	b089      	sub	sp, #36	; 0x24
 800cb92:	44a8      	add	r8, r5
 800cb94:	3650      	adds	r6, #80	; 0x50
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cb96:	9303      	str	r3, [sp, #12]
		if (button[i].type)			// Only check defined butons
 800cb98:	7aab      	ldrb	r3, [r5, #10]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d100      	bne.n	800cba0 <CheckAttachedButtons+0x34>
 800cb9e:	e0bb      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
			if (delayButtonStateReset == false)
 800cba0:	2366      	movs	r3, #102	; 0x66
 800cba2:	4652      	mov	r2, sl
 800cba4:	5cd3      	ldrb	r3, [r2, r3]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d100      	bne.n	800cbac <CheckAttachedButtons+0x40>
				button[i].state = NONE;
 800cbaa:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800cbac:	ab02      	add	r3, sp, #8
 800cbae:	469c      	mov	ip, r3
 800cbb0:	270e      	movs	r7, #14
 800cbb2:	4467      	add	r7, ip
 800cbb4:	ab07      	add	r3, sp, #28
 800cbb6:	aa05      	add	r2, sp, #20
 800cbb8:	a906      	add	r1, sp, #24
 800cbba:	0020      	movs	r0, r4
 800cbbc:	9700      	str	r7, [sp, #0]
 800cbbe:	f7ff f9b3 	bl	800bf28 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cbc2:	ab02      	add	r3, sp, #8
 800cbc4:	8999      	ldrh	r1, [r3, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	9806      	ldr	r0, [sp, #24]
 800cbca:	f004 fd67 	bl	801169c <HAL_GPIO_WritePin>
			Delay_us(10);
 800cbce:	200a      	movs	r0, #10
 800cbd0:	f000 fdc0 	bl	800d754 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800cbd4:	8839      	ldrh	r1, [r7, #0]
 800cbd6:	9807      	ldr	r0, [sp, #28]
 800cbd8:	f004 fd5a 	bl	8011690 <HAL_GPIO_ReadPin>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d100      	bne.n	800cbe2 <CheckAttachedButtons+0x76>
 800cbe0:	e0c7      	b.n	800cd72 <CheckAttachedButtons+0x206>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cbe2:	ab02      	add	r3, sp, #8
 800cbe4:	8999      	ldrh	r1, [r3, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	9806      	ldr	r0, [sp, #24]
 800cbea:	f004 fd57 	bl	801169c <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800cbee:	7aab      	ldrb	r3, [r5, #10]
 800cbf0:	2b03      	cmp	r3, #3
 800cbf2:	d100      	bne.n	800cbf6 <CheckAttachedButtons+0x8a>
 800cbf4:	e19a      	b.n	800cf2c <CheckAttachedButtons+0x3c0>
 800cbf6:	d900      	bls.n	800cbfa <CheckAttachedButtons+0x8e>
 800cbf8:	e0a2      	b.n	800cd40 <CheckAttachedButtons+0x1d4>
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d001      	beq.n	800cc02 <CheckAttachedButtons+0x96>
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d106      	bne.n	800cc10 <CheckAttachedButtons+0xa4>
				if (connected == GPIO_PIN_SET)
 800cc02:	465b      	mov	r3, fp
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d100      	bne.n	800cc0a <CheckAttachedButtons+0x9e>
 800cc08:	e1a6      	b.n	800cf58 <CheckAttachedButtons+0x3ec>
				else if (connected == GPIO_PIN_RESET)
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d100      	bne.n	800cc10 <CheckAttachedButtons+0xa4>
 800cc0e:	e0d1      	b.n	800cdb4 <CheckAttachedButtons+0x248>
			if (state == CLOSED || state == ON) {
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d100      	bne.n	800cc18 <CheckAttachedButtons+0xac>
 800cc16:	e0bb      	b.n	800cd90 <CheckAttachedButtons+0x224>
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d100      	bne.n	800cc1e <CheckAttachedButtons+0xb2>
 800cc1c:	e0b8      	b.n	800cd90 <CheckAttachedButtons+0x224>
			if (state == OPEN || state == OFF) {
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	2b03      	cmp	r3, #3
 800cc22:	d002      	beq.n	800cc2a <CheckAttachedButtons+0xbe>
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d000      	beq.n	800cc2a <CheckAttachedButtons+0xbe>
 800cc28:	e1d1      	b.n	800cfce <CheckAttachedButtons+0x462>
				if (releaseCounter[i] < 0xFFFF)
 800cc2a:	6872      	ldr	r2, [r6, #4]
 800cc2c:	4992      	ldr	r1, [pc, #584]	; (800ce78 <CheckAttachedButtons+0x30c>)
					releaseCounter[i] = 0;		// Reset debounce counter
 800cc2e:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 800cc30:	428a      	cmp	r2, r1
 800cc32:	d800      	bhi.n	800cc36 <CheckAttachedButtons+0xca>
					++releaseCounter[i];		// Advance the debounce counter
 800cc34:	1c53      	adds	r3, r2, #1
				if (clicked == 2
 800cc36:	2267      	movs	r2, #103	; 0x67
 800cc38:	4651      	mov	r1, sl
 800cc3a:	5c8a      	ldrb	r2, [r1, r2]
 800cc3c:	6073      	str	r3, [r6, #4]
 800cc3e:	2a02      	cmp	r2, #2
 800cc40:	d100      	bne.n	800cc44 <CheckAttachedButtons+0xd8>
 800cc42:	e17c      	b.n	800cf3e <CheckAttachedButtons+0x3d2>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800cc44:	464a      	mov	r2, r9
 800cc46:	4f8d      	ldr	r7, [pc, #564]	; (800ce7c <CheckAttachedButtons+0x310>)
 800cc48:	7851      	ldrb	r1, [r2, #1]
 800cc4a:	797a      	ldrb	r2, [r7, #5]
 800cc4c:	4291      	cmp	r1, r2
 800cc4e:	d900      	bls.n	800cc52 <CheckAttachedButtons+0xe6>
 800cc50:	e0a9      	b.n	800cda6 <CheckAttachedButtons+0x23a>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cc52:	4642      	mov	r2, r8
 800cc54:	6852      	ldr	r2, [r2, #4]
 800cc56:	8839      	ldrh	r1, [r7, #0]
 800cc58:	4291      	cmp	r1, r2
 800cc5a:	d820      	bhi.n	800cc9e <CheckAttachedButtons+0x132>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800cc5c:	d104      	bne.n	800cc68 <CheckAttachedButtons+0xfc>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800cc5e:	2007      	movs	r0, #7
 800cc60:	7268      	strb	r0, [r5, #9]
					++pressCounter[i];
 800cc62:	4640      	mov	r0, r8
 800cc64:	3201      	adds	r2, #1
 800cc66:	6042      	str	r2, [r0, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cc68:	4299      	cmp	r1, r3
 800cc6a:	d201      	bcs.n	800cc70 <CheckAttachedButtons+0x104>
					releaseCounter[i] = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800cc70:	887b      	ldrh	r3, [r7, #2]
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d238      	bcs.n	800cce8 <CheckAttachedButtons+0x17c>
						&& pressCounter[i] < 500) {
 800cc76:	23fa      	movs	r3, #250	; 0xfa
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d234      	bcs.n	800cce8 <CheckAttachedButtons+0x17c>
					if (clicked == 0)
 800cc7e:	4652      	mov	r2, sl
 800cc80:	3b8e      	subs	r3, #142	; 0x8e
 800cc82:	3bff      	subs	r3, #255	; 0xff
 800cc84:	5cd2      	ldrb	r2, [r2, r3]
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	d100      	bne.n	800cc8c <CheckAttachedButtons+0x120>
 800cc8a:	e17f      	b.n	800cf8c <CheckAttachedButtons+0x420>
					else if (clicked == 2) {
 800cc8c:	2a02      	cmp	r2, #2
 800cc8e:	d105      	bne.n	800cc9c <CheckAttachedButtons+0x130>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800cc90:	464a      	mov	r2, r9
 800cc92:	7938      	ldrb	r0, [r7, #4]
 800cc94:	7852      	ldrb	r2, [r2, #1]
 800cc96:	4290      	cmp	r0, r2
 800cc98:	d200      	bcs.n	800cc9c <CheckAttachedButtons+0x130>
 800cc9a:	e18d      	b.n	800cfb8 <CheckAttachedButtons+0x44c>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cc9c:	6873      	ldr	r3, [r6, #4]
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	d819      	bhi.n	800ccd6 <CheckAttachedButtons+0x16a>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800cca2:	d103      	bne.n	800ccac <CheckAttachedButtons+0x140>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800cca4:	2308      	movs	r3, #8
 800cca6:	726b      	strb	r3, [r5, #9]
					++releaseCounter[i];
 800cca8:	1c4b      	adds	r3, r1, #1
 800ccaa:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800ccac:	4642      	mov	r2, r8
 800ccae:	6852      	ldr	r2, [r2, #4]
 800ccb0:	428a      	cmp	r2, r1
 800ccb2:	d902      	bls.n	800ccba <CheckAttachedButtons+0x14e>
					pressCounter[i] = 0;
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4641      	mov	r1, r8
 800ccb8:	604a      	str	r2, [r1, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800ccba:	887a      	ldrh	r2, [r7, #2]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d204      	bcs.n	800ccca <CheckAttachedButtons+0x15e>
						&& releaseCounter[i] < 500) {
 800ccc0:	22fa      	movs	r2, #250	; 0xfa
 800ccc2:	0052      	lsls	r2, r2, #1
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d200      	bcs.n	800ccca <CheckAttachedButtons+0x15e>
 800ccc8:	e077      	b.n	800cdba <CheckAttachedButtons+0x24e>
						&& releaseCounter[i] < 0xFFFF) {
 800ccca:	3bf5      	subs	r3, #245	; 0xf5
				} else if (releaseCounter[i] >= 500
 800cccc:	4a6c      	ldr	r2, [pc, #432]	; (800ce80 <CheckAttachedButtons+0x314>)
						&& releaseCounter[i] < 0xFFFF) {
 800ccce:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d800      	bhi.n	800ccd6 <CheckAttachedButtons+0x16a>
 800ccd4:	e14d      	b.n	800cf72 <CheckAttachedButtons+0x406>
			switch (button[i].state) {
 800ccd6:	7a6b      	ldrb	r3, [r5, #9]
 800ccd8:	3b05      	subs	r3, #5
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b09      	cmp	r3, #9
 800ccde:	d81b      	bhi.n	800cd18 <CheckAttachedButtons+0x1ac>
 800cce0:	4a68      	ldr	r2, [pc, #416]	; (800ce84 <CheckAttachedButtons+0x318>)
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	58d3      	ldr	r3, [r2, r3]
 800cce6:	469f      	mov	pc, r3
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800cce8:	3af5      	subs	r2, #245	; 0xf5
 800ccea:	4b65      	ldr	r3, [pc, #404]	; (800ce80 <CheckAttachedButtons+0x314>)
 800ccec:	3aff      	subs	r2, #255	; 0xff
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d8d4      	bhi.n	800cc9c <CheckAttachedButtons+0x130>
					if (clicked)
 800ccf2:	2367      	movs	r3, #103	; 0x67
 800ccf4:	4652      	mov	r2, sl
 800ccf6:	5cd2      	ldrb	r2, [r2, r3]
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	d002      	beq.n	800cd02 <CheckAttachedButtons+0x196>
						clicked = 0;						// Cannot be a click
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4651      	mov	r1, sl
 800cd00:	54ca      	strb	r2, [r1, r3]
					CheckForTimedButtonPress(i);
 800cd02:	0020      	movs	r0, r4
 800cd04:	f7ff f9e6 	bl	800c0d4 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cd08:	6873      	ldr	r3, [r6, #4]
 800cd0a:	8839      	ldrh	r1, [r7, #0]
 800cd0c:	e7c7      	b.n	800cc9e <CheckAttachedButtons+0x132>
				buttonPressedCallback(i);
 800cd0e:	0020      	movs	r0, r4
 800cd10:	f7ff f9de 	bl	800c0d0 <buttonPressedCallback>
				button[i].state = NONE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	726b      	strb	r3, [r5, #9]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cd18:	2304      	movs	r3, #4
 800cd1a:	469c      	mov	ip, r3
 800cd1c:	3b03      	subs	r3, #3
 800cd1e:	44e0      	add	r8, ip
 800cd20:	469c      	mov	ip, r3
 800cd22:	3401      	adds	r4, #1
 800cd24:	b2e4      	uxtb	r4, r4
 800cd26:	3509      	adds	r5, #9
 800cd28:	3604      	adds	r6, #4
 800cd2a:	44e1      	add	r9, ip
 800cd2c:	2c06      	cmp	r4, #6
 800cd2e:	d000      	beq.n	800cd32 <CheckAttachedButtons+0x1c6>
 800cd30:	e732      	b.n	800cb98 <CheckAttachedButtons+0x2c>
}
 800cd32:	b009      	add	sp, #36	; 0x24
 800cd34:	bcf0      	pop	{r4, r5, r6, r7}
 800cd36:	46bb      	mov	fp, r7
 800cd38:	46b2      	mov	sl, r6
 800cd3a:	46a9      	mov	r9, r5
 800cd3c:	46a0      	mov	r8, r4
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	d000      	beq.n	800cd46 <CheckAttachedButtons+0x1da>
 800cd44:	e764      	b.n	800cc10 <CheckAttachedButtons+0xa4>
				if (connected == GPIO_PIN_SET)
 800cd46:	465b      	mov	r3, fp
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d100      	bne.n	800cd4e <CheckAttachedButtons+0x1e2>
 800cd4c:	e0f4      	b.n	800cf38 <CheckAttachedButtons+0x3cc>
				else if (connected == GPIO_PIN_RESET)
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d000      	beq.n	800cd54 <CheckAttachedButtons+0x1e8>
 800cd52:	e75d      	b.n	800cc10 <CheckAttachedButtons+0xa4>
				if (pressCounter[i] < 0xFFFF)
 800cd54:	4643      	mov	r3, r8
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	4b47      	ldr	r3, [pc, #284]	; (800ce78 <CheckAttachedButtons+0x30c>)
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d800      	bhi.n	800cd60 <CheckAttachedButtons+0x1f4>
 800cd5e:	e123      	b.n	800cfa8 <CheckAttachedButtons+0x43c>
					pressCounter[i] = 0;			// Reset debounce counter
 800cd60:	4643      	mov	r3, r8
 800cd62:	465a      	mov	r2, fp
 800cd64:	605a      	str	r2, [r3, #4]
					state = ON;
 800cd66:	2102      	movs	r1, #2
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cd68:	6873      	ldr	r3, [r6, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4f43      	ldr	r7, [pc, #268]	; (800ce7c <CheckAttachedButtons+0x310>)
					state = ON;
 800cd6e:	9103      	str	r1, [sp, #12]
 800cd70:	e771      	b.n	800cc56 <CheckAttachedButtons+0xea>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800cd72:	ab02      	add	r3, sp, #8
 800cd74:	8999      	ldrh	r1, [r3, #12]
 800cd76:	2201      	movs	r2, #1
 800cd78:	9806      	ldr	r0, [sp, #24]
 800cd7a:	f004 fc8f 	bl	801169c <HAL_GPIO_WritePin>
				Delay_us(10);
 800cd7e:	200a      	movs	r0, #10
 800cd80:	f000 fce8 	bl	800d754 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800cd84:	8839      	ldrh	r1, [r7, #0]
 800cd86:	9807      	ldr	r0, [sp, #28]
 800cd88:	f004 fc82 	bl	8011690 <HAL_GPIO_ReadPin>
 800cd8c:	4683      	mov	fp, r0
 800cd8e:	e728      	b.n	800cbe2 <CheckAttachedButtons+0x76>
				if (pressCounter[i] < 0xFFFF)
 800cd90:	4643      	mov	r3, r8
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	4b38      	ldr	r3, [pc, #224]	; (800ce78 <CheckAttachedButtons+0x30c>)
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d82d      	bhi.n	800cdf6 <CheckAttachedButtons+0x28a>
					++pressCounter[i];			// Advance the debounce counter
 800cd9a:	4643      	mov	r3, r8
 800cd9c:	3201      	adds	r2, #1
 800cd9e:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cda0:	6873      	ldr	r3, [r6, #4]
 800cda2:	4f36      	ldr	r7, [pc, #216]	; (800ce7c <CheckAttachedButtons+0x310>)
 800cda4:	e757      	b.n	800cc56 <CheckAttachedButtons+0xea>
					clicked = 0;
 800cda6:	2200      	movs	r2, #0
 800cda8:	2167      	movs	r1, #103	; 0x67
 800cdaa:	4650      	mov	r0, sl
 800cdac:	5442      	strb	r2, [r0, r1]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cdae:	4649      	mov	r1, r9
 800cdb0:	704a      	strb	r2, [r1, #1]
 800cdb2:	e74e      	b.n	800cc52 <CheckAttachedButtons+0xe6>
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	9303      	str	r3, [sp, #12]
 800cdb8:	e737      	b.n	800cc2a <CheckAttachedButtons+0xbe>
					if (clicked == 1) {
 800cdba:	4653      	mov	r3, sl
 800cdbc:	3a8e      	subs	r2, #142	; 0x8e
 800cdbe:	3aff      	subs	r2, #255	; 0xff
 800cdc0:	5c9b      	ldrb	r3, [r3, r2]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d100      	bne.n	800cdc8 <CheckAttachedButtons+0x25c>
 800cdc6:	e089      	b.n	800cedc <CheckAttachedButtons+0x370>
					} else if (clicked == 3) {
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d000      	beq.n	800cdce <CheckAttachedButtons+0x262>
 800cdcc:	e783      	b.n	800ccd6 <CheckAttachedButtons+0x16a>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800cdce:	3303      	adds	r3, #3
						clicked = 0;			// Prepare for a single click
 800cdd0:	4651      	mov	r1, sl
						button[i].state = DBL_CLICKED;// Record a double button click event
 800cdd2:	726b      	strb	r3, [r5, #9]
						clicked = 0;			// Prepare for a single click
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800cdd8:	2366      	movs	r3, #102	; 0x66
 800cdda:	4652      	mov	r2, sl
 800cddc:	5cd2      	ldrb	r2, [r2, r3]
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	d19a      	bne.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800cde2:	7c6a      	ldrb	r2, [r5, #17]
 800cde4:	0792      	lsls	r2, r2, #30
 800cde6:	d597      	bpl.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cde8:	2201      	movs	r2, #1
 800cdea:	4651      	mov	r1, sl
					buttonDblClickedCallback(i);
 800cdec:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cdee:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 800cdf0:	f7ff feb6 	bl	800cb60 <buttonDblClickedCallback>
 800cdf4:	e790      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					pressCounter[i] = 0;			// Reset debounce counter
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	6053      	str	r3, [r2, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cdfc:	6873      	ldr	r3, [r6, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	4f1e      	ldr	r7, [pc, #120]	; (800ce7c <CheckAttachedButtons+0x310>)
 800ce02:	e728      	b.n	800cc56 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800ce04:	2366      	movs	r3, #102	; 0x66
 800ce06:	4652      	mov	r2, sl
 800ce08:	5cd2      	ldrb	r2, [r2, r3]
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	d000      	beq.n	800ce10 <CheckAttachedButtons+0x2a4>
 800ce0e:	e783      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800ce10:	7c6a      	ldrb	r2, [r5, #17]
 800ce12:	0652      	lsls	r2, r2, #25
 800ce14:	d400      	bmi.n	800ce18 <CheckAttachedButtons+0x2ac>
 800ce16:	e77f      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ce18:	4651      	mov	r1, sl
 800ce1a:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ce1c:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ce1e:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ce20:	2102      	movs	r1, #2
 800ce22:	f7ff fea1 	bl	800cb68 <buttonReleasedForYCallback>
 800ce26:	e777      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ce28:	2366      	movs	r3, #102	; 0x66
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	5cd2      	ldrb	r2, [r2, r3]
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d000      	beq.n	800ce34 <CheckAttachedButtons+0x2c8>
 800ce32:	e771      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800ce34:	7c6a      	ldrb	r2, [r5, #17]
 800ce36:	0692      	lsls	r2, r2, #26
 800ce38:	d400      	bmi.n	800ce3c <CheckAttachedButtons+0x2d0>
 800ce3a:	e76d      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ce3c:	4651      	mov	r1, sl
 800ce3e:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800ce40:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ce42:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800ce44:	2101      	movs	r1, #1
 800ce46:	f7ff fe8f 	bl	800cb68 <buttonReleasedForYCallback>
 800ce4a:	e765      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ce4c:	2366      	movs	r3, #102	; 0x66
 800ce4e:	4652      	mov	r2, sl
 800ce50:	5cd2      	ldrb	r2, [r2, r3]
 800ce52:	2a00      	cmp	r2, #0
 800ce54:	d000      	beq.n	800ce58 <CheckAttachedButtons+0x2ec>
 800ce56:	e75f      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800ce58:	7c6a      	ldrb	r2, [r5, #17]
 800ce5a:	06d2      	lsls	r2, r2, #27
 800ce5c:	d400      	bmi.n	800ce60 <CheckAttachedButtons+0x2f4>
 800ce5e:	e75b      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ce60:	4651      	mov	r1, sl
 800ce62:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ce64:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ce66:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ce68:	2103      	movs	r1, #3
 800ce6a:	f7ff fe7b 	bl	800cb64 <buttonPressedForXCallback>
 800ce6e:	e753      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
 800ce70:	200028cc 	.word	0x200028cc
 800ce74:	2000284c 	.word	0x2000284c
 800ce78:	0000fffe 	.word	0x0000fffe
 800ce7c:	20000b54 	.word	0x20000b54
 800ce80:	0000fe0a 	.word	0x0000fe0a
 800ce84:	0801a2b8 	.word	0x0801a2b8
				if (!delayButtonStateReset
 800ce88:	2366      	movs	r3, #102	; 0x66
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	5cd2      	ldrb	r2, [r2, r3]
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	d000      	beq.n	800ce94 <CheckAttachedButtons+0x328>
 800ce92:	e741      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800ce94:	7c6a      	ldrb	r2, [r5, #17]
 800ce96:	0712      	lsls	r2, r2, #28
 800ce98:	d400      	bmi.n	800ce9c <CheckAttachedButtons+0x330>
 800ce9a:	e73d      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ce9c:	4651      	mov	r1, sl
 800ce9e:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800cea0:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cea2:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800cea4:	2102      	movs	r1, #2
 800cea6:	f7ff fe5d 	bl	800cb64 <buttonPressedForXCallback>
 800ceaa:	e735      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ceac:	2366      	movs	r3, #102	; 0x66
 800ceae:	4652      	mov	r2, sl
 800ceb0:	5cd2      	ldrb	r2, [r2, r3]
 800ceb2:	2a00      	cmp	r2, #0
 800ceb4:	d000      	beq.n	800ceb8 <CheckAttachedButtons+0x34c>
 800ceb6:	e72f      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800ceb8:	7c6a      	ldrb	r2, [r5, #17]
 800ceba:	0752      	lsls	r2, r2, #29
 800cebc:	d400      	bmi.n	800cec0 <CheckAttachedButtons+0x354>
 800cebe:	e72b      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cec0:	4651      	mov	r1, sl
 800cec2:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800cec4:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cec6:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800cec8:	2101      	movs	r1, #1
 800ceca:	f7ff fe4b 	bl	800cb64 <buttonPressedForXCallback>
 800cece:	e723      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				buttonReleasedCallback(i);
 800ced0:	0020      	movs	r0, r4
 800ced2:	f7ff fe41 	bl	800cb58 <buttonReleasedCallback>
				button[i].state = NONE;
 800ced6:	2300      	movs	r3, #0
 800ced8:	726b      	strb	r3, [r5, #9]
				break;
 800ceda:	e71d      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						clicked = 2;			// Prepare for a double click
 800cedc:	4651      	mov	r1, sl
						button[i].state = CLICKED;// Record a single button click event
 800cede:	3304      	adds	r3, #4
 800cee0:	726b      	strb	r3, [r5, #9]
						clicked = 2;			// Prepare for a double click
 800cee2:	3b03      	subs	r3, #3
 800cee4:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800cee6:	2366      	movs	r3, #102	; 0x66
 800cee8:	4652      	mov	r2, sl
 800ceea:	5cd2      	ldrb	r2, [r2, r3]
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	d000      	beq.n	800cef2 <CheckAttachedButtons+0x386>
 800cef0:	e712      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800cef2:	7c69      	ldrb	r1, [r5, #17]
 800cef4:	3201      	adds	r2, #1
 800cef6:	420a      	tst	r2, r1
 800cef8:	d100      	bne.n	800cefc <CheckAttachedButtons+0x390>
 800cefa:	e70d      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cefc:	4651      	mov	r1, sl
					buttonClickedCallback(i);
 800cefe:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cf00:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800cf02:	f7ff fe2b 	bl	800cb5c <buttonClickedCallback>
 800cf06:	e707      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800cf08:	2366      	movs	r3, #102	; 0x66
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	5cd2      	ldrb	r2, [r2, r3]
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	d000      	beq.n	800cf14 <CheckAttachedButtons+0x3a8>
 800cf12:	e701      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800cf14:	7c6a      	ldrb	r2, [r5, #17]
 800cf16:	2a7f      	cmp	r2, #127	; 0x7f
 800cf18:	d800      	bhi.n	800cf1c <CheckAttachedButtons+0x3b0>
 800cf1a:	e6fd      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cf1c:	4651      	mov	r1, sl
 800cf1e:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cf20:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cf22:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cf24:	2103      	movs	r1, #3
 800cf26:	f7ff fe1f 	bl	800cb68 <buttonReleasedForYCallback>
 800cf2a:	e6f5      	b.n	800cd18 <CheckAttachedButtons+0x1ac>
				if (connected == GPIO_PIN_SET)
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d031      	beq.n	800cf96 <CheckAttachedButtons+0x42a>
				else if (connected == GPIO_PIN_RESET)
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d000      	beq.n	800cf38 <CheckAttachedButtons+0x3cc>
 800cf36:	e66b      	b.n	800cc10 <CheckAttachedButtons+0xa4>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	9303      	str	r3, [sp, #12]
 800cf3c:	e675      	b.n	800cc2a <CheckAttachedButtons+0xbe>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800cf3e:	464a      	mov	r2, r9
 800cf40:	4f25      	ldr	r7, [pc, #148]	; (800cfd8 <CheckAttachedButtons+0x46c>)
 800cf42:	7852      	ldrb	r2, [r2, #1]
 800cf44:	7979      	ldrb	r1, [r7, #5]
 800cf46:	4291      	cmp	r1, r2
 800cf48:	d200      	bcs.n	800cf4c <CheckAttachedButtons+0x3e0>
 800cf4a:	e72c      	b.n	800cda6 <CheckAttachedButtons+0x23a>
					++dblCounter[i];
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	3201      	adds	r2, #1
 800cf50:	704a      	strb	r2, [r1, #1]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cf52:	4642      	mov	r2, r8
 800cf54:	6852      	ldr	r2, [r2, #4]
					++dblCounter[i];
 800cf56:	e67e      	b.n	800cc56 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800cf58:	4643      	mov	r3, r8
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	4b1f      	ldr	r3, [pc, #124]	; (800cfdc <CheckAttachedButtons+0x470>)
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d80b      	bhi.n	800cf7a <CheckAttachedButtons+0x40e>
					++pressCounter[i];			// Advance the debounce counter
 800cf62:	4643      	mov	r3, r8
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cf64:	2104      	movs	r1, #4
					++pressCounter[i];			// Advance the debounce counter
 800cf66:	3201      	adds	r2, #1
 800cf68:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cf6a:	6873      	ldr	r3, [r6, #4]
 800cf6c:	4f1a      	ldr	r7, [pc, #104]	; (800cfd8 <CheckAttachedButtons+0x46c>)
 800cf6e:	9103      	str	r1, [sp, #12]
 800cf70:	e671      	b.n	800cc56 <CheckAttachedButtons+0xea>
					CheckForTimedButtonRelease(i);
 800cf72:	0020      	movs	r0, r4
 800cf74:	f7ff f8d8 	bl	800c128 <CheckForTimedButtonRelease>
 800cf78:	e6ad      	b.n	800ccd6 <CheckAttachedButtons+0x16a>
					pressCounter[i] = 0;			// Reset debounce counter
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4642      	mov	r2, r8
					state = CLOSED;
 800cf7e:	2104      	movs	r1, #4
					pressCounter[i] = 0;			// Reset debounce counter
 800cf80:	6053      	str	r3, [r2, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cf82:	6873      	ldr	r3, [r6, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	4f14      	ldr	r7, [pc, #80]	; (800cfd8 <CheckAttachedButtons+0x46c>)
					state = CLOSED;
 800cf88:	9103      	str	r1, [sp, #12]
 800cf8a:	e664      	b.n	800cc56 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800cf8c:	4650      	mov	r0, sl
 800cf8e:	3201      	adds	r2, #1
 800cf90:	54c2      	strb	r2, [r0, r3]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cf92:	6873      	ldr	r3, [r6, #4]
 800cf94:	e683      	b.n	800cc9e <CheckAttachedButtons+0x132>
				if (pressCounter[i] < 0xFFFF)
 800cf96:	4643      	mov	r3, r8
 800cf98:	685a      	ldr	r2, [r3, #4]
 800cf9a:	4b10      	ldr	r3, [pc, #64]	; (800cfdc <CheckAttachedButtons+0x470>)
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d903      	bls.n	800cfa8 <CheckAttachedButtons+0x43c>
					pressCounter[i] = 0;			// Reset debounce counter
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4642      	mov	r2, r8
 800cfa4:	6053      	str	r3, [r2, #4]
			if (state == OPEN || state == OFF) {
 800cfa6:	e6de      	b.n	800cd66 <CheckAttachedButtons+0x1fa>
					state = ON;
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	9303      	str	r3, [sp, #12]
					++pressCounter[i];			// Advance the debounce counter
 800cfac:	4643      	mov	r3, r8
 800cfae:	3201      	adds	r2, #1
 800cfb0:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cfb2:	6873      	ldr	r3, [r6, #4]
 800cfb4:	4f08      	ldr	r7, [pc, #32]	; (800cfd8 <CheckAttachedButtons+0x46c>)
 800cfb6:	e64e      	b.n	800cc56 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800cfb8:	7978      	ldrb	r0, [r7, #5]
 800cfba:	4290      	cmp	r0, r2
 800cfbc:	d800      	bhi.n	800cfc0 <CheckAttachedButtons+0x454>
 800cfbe:	e66d      	b.n	800cc9c <CheckAttachedButtons+0x130>
							clicked = 3;	// Record a possible double click
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	54c2      	strb	r2, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	464a      	mov	r2, r9
 800cfca:	7053      	strb	r3, [r2, #1]
 800cfcc:	e666      	b.n	800cc9c <CheckAttachedButtons+0x130>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cfce:	4643      	mov	r3, r8
 800cfd0:	4f01      	ldr	r7, [pc, #4]	; (800cfd8 <CheckAttachedButtons+0x46c>)
 800cfd2:	685a      	ldr	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cfd4:	6873      	ldr	r3, [r6, #4]
 800cfd6:	e63e      	b.n	800cc56 <CheckAttachedButtons+0xea>
 800cfd8:	20000b54 	.word	0x20000b54
 800cfdc:	0000fffe 	.word	0x0000fffe

0800cfe0 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <NVIC_SystemReset+0x14>)
 800cfe6:	4a04      	ldr	r2, [pc, #16]	; (800cff8 <NVIC_SystemReset+0x18>)
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	e7fd      	b.n	800cfee <NVIC_SystemReset+0xe>
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	e000ed00 	.word	0xe000ed00
 800cff8:	05fa0004 	.word	0x05fa0004

0800cffc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cffc:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cffe:	f002 fddb 	bl	800fbb8 <HAL_IncTick>
  osSystickHandler();  
 800d002:	f000 ff7f 	bl	800df04 <osSystickHandler>

}
 800d006:	bd10      	pop	{r4, pc}

0800d008 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d008:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d00a:	24ff      	movs	r4, #255	; 0xff
 800d00c:	4d09      	ldr	r5, [pc, #36]	; (800d034 <HardFault_Handler+0x2c>)
{
 800d00e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d010:	23ff      	movs	r3, #255	; 0xff
 800d012:	2211      	movs	r2, #17
 800d014:	7828      	ldrb	r0, [r5, #0]
 800d016:	4908      	ldr	r1, [pc, #32]	; (800d038 <HardFault_Handler+0x30>)
 800d018:	9400      	str	r4, [sp, #0]
 800d01a:	f000 fd29 	bl	800da70 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d01e:	4b07      	ldr	r3, [pc, #28]	; (800d03c <HardFault_Handler+0x34>)
 800d020:	220f      	movs	r2, #15
 800d022:	6819      	ldr	r1, [r3, #0]
 800d024:	7828      	ldrb	r0, [r5, #0]
 800d026:	23ff      	movs	r3, #255	; 0xff
 800d028:	9400      	str	r4, [sp, #0]
 800d02a:	f000 fd21 	bl	800da70 <writePxMutex>
	NVIC_SystemReset();
 800d02e:	f7ff ffd7 	bl	800cfe0 <NVIC_SystemReset>
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	20000c60 	.word	0x20000c60
 800d038:	0801cd88 	.word	0x0801cd88
 800d03c:	200000a4 	.word	0x200000a4

0800d040 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d040:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d042:	4802      	ldr	r0, [pc, #8]	; (800d04c <USART1_IRQHandler+0xc>)
 800d044:	f006 fa4c 	bl	80134e0 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	46c0      	nop			; (mov r8, r8)
 800d04c:	200023c4 	.word	0x200023c4

0800d050 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d050:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d052:	4802      	ldr	r0, [pc, #8]	; (800d05c <USART2_IRQHandler+0xc>)
 800d054:	f006 fa44 	bl	80134e0 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	46c0      	nop			; (mov r8, r8)
 800d05c:	20002354 	.word	0x20002354

0800d060 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d060:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d062:	4805      	ldr	r0, [pc, #20]	; (800d078 <USART3_8_IRQHandler+0x18>)
 800d064:	f006 fa3c 	bl	80134e0 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d068:	4804      	ldr	r0, [pc, #16]	; (800d07c <USART3_8_IRQHandler+0x1c>)
 800d06a:	f006 fa39 	bl	80134e0 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d06e:	4804      	ldr	r0, [pc, #16]	; (800d080 <USART3_8_IRQHandler+0x20>)
 800d070:	f006 fa36 	bl	80134e0 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d074:	bd10      	pop	{r4, pc}
 800d076:	46c0      	nop			; (mov r8, r8)
 800d078:	200022e4 	.word	0x200022e4
 800d07c:	20002274 	.word	0x20002274
 800d080:	20002204 	.word	0x20002204

0800d084 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d084:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800d086:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	2310      	movs	r3, #16
 800d08c:	4213      	tst	r3, r2
 800d08e:	d10b      	bne.n	800d0a8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d090:	4a0a      	ldr	r2, [pc, #40]	; (800d0bc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d092:	6811      	ldr	r1, [r2, #0]
 800d094:	05c9      	lsls	r1, r1, #23
 800d096:	d403      	bmi.n	800d0a0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d098:	6812      	ldr	r2, [r2, #0]
 800d09a:	4213      	tst	r3, r2
 800d09c:	d108      	bne.n	800d0b0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d09e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d0a0:	2002      	movs	r0, #2
 800d0a2:	f7fa fb0d 	bl	80076c0 <DMA_IRQHandler>
 800d0a6:	e7fa      	b.n	800d09e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P5);
 800d0a8:	2005      	movs	r0, #5
 800d0aa:	f7fa fb09 	bl	80076c0 <DMA_IRQHandler>
 800d0ae:	e7f6      	b.n	800d09e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d0b0:	4803      	ldr	r0, [pc, #12]	; (800d0c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d0b2:	f003 fac7 	bl	8010644 <HAL_DMA_IRQHandler>
}
 800d0b6:	e7f2      	b.n	800d09e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d0b8:	40020400 	.word	0x40020400
 800d0bc:	40020000 	.word	0x40020000
 800d0c0:	20002650 	.word	0x20002650

0800d0c4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d0c4:	4b12      	ldr	r3, [pc, #72]	; (800d110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800d0c6:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	03d2      	lsls	r2, r2, #15
 800d0cc:	d414      	bmi.n	800d0f8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	02d2      	lsls	r2, r2, #11
 800d0d2:	d40d      	bmi.n	800d0f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d0d4:	4a0f      	ldr	r2, [pc, #60]	; (800d114 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800d0d6:	6812      	ldr	r2, [r2, #0]
 800d0d8:	05d2      	lsls	r2, r2, #23
 800d0da:	d411      	bmi.n	800d100 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	04d2      	lsls	r2, r2, #19
 800d0e0:	d412      	bmi.n	800d108 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	01db      	lsls	r3, r3, #7
 800d0e6:	d506      	bpl.n	800d0f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d0e8:	480b      	ldr	r0, [pc, #44]	; (800d118 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d0ea:	f003 faab 	bl	8010644 <HAL_DMA_IRQHandler>
	}
}
 800d0ee:	e002      	b.n	800d0f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800d0f0:	2004      	movs	r0, #4
 800d0f2:	f7fa fae5 	bl	80076c0 <DMA_IRQHandler>
}
 800d0f6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800d0f8:	2003      	movs	r0, #3
 800d0fa:	f7fa fae1 	bl	80076c0 <DMA_IRQHandler>
 800d0fe:	e7fa      	b.n	800d0f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800d100:	2006      	movs	r0, #6
 800d102:	f7fa fadd 	bl	80076c0 <DMA_IRQHandler>
 800d106:	e7f6      	b.n	800d0f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d108:	4804      	ldr	r0, [pc, #16]	; (800d11c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d10a:	f003 fa9b 	bl	8010644 <HAL_DMA_IRQHandler>
 800d10e:	e7f2      	b.n	800d0f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800d110:	40020000 	.word	0x40020000
 800d114:	40020400 	.word	0x40020400
 800d118:	200026c0 	.word	0x200026c0
 800d11c:	20002688 	.word	0x20002688

0800d120 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800d120:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d122:	4802      	ldr	r0, [pc, #8]	; (800d12c <ADC1_COMP_IRQHandler+0xc>)
 800d124:	f002 ff86 	bl	8010034 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	200028b4 	.word	0x200028b4

0800d130 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d130:	2300      	movs	r3, #0
{
 800d132:	b510      	push	{r4, lr}
 800d134:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d136:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d138:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800d13a:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d140:	f7fd ff32 	bl	800afa8 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d144:	0020      	movs	r0, r4
 800d146:	f7fd faf7 	bl	800a738 <GetPort>
 800d14a:	4b04      	ldr	r3, [pc, #16]	; (800d15c <HAL_UART_TxCpltCallback+0x2c>)
 800d14c:	0080      	lsls	r0, r0, #2
 800d14e:	58c0      	ldr	r0, [r0, r3]
 800d150:	a901      	add	r1, sp, #4
 800d152:	f001 fa2d 	bl	800e5b0 <xQueueGiveFromISR>
}
 800d156:	b002      	add	sp, #8
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	20001f08 	.word	0x20001f08

0800d160 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d160:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d162:	2369      	movs	r3, #105	; 0x69
 800d164:	2501      	movs	r5, #1
 800d166:	54c5      	strb	r5, [r0, r3]
{
 800d168:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d16a:	f7fd fae5 	bl	800a738 <GetPort>
	if (portStatus[port] == STREAM) {
 800d16e:	4b0b      	ldr	r3, [pc, #44]	; (800d19c <HAL_UART_ErrorCallback+0x3c>)
 800d170:	5c1b      	ldrb	r3, [r3, r0]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d004      	beq.n	800d180 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d176:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <HAL_UART_ErrorCallback+0x40>)
 800d178:	1818      	adds	r0, r3, r0
 800d17a:	3801      	subs	r0, #1
 800d17c:	7005      	strb	r5, [r0, #0]
	}	
}
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d182:	4908      	ldr	r1, [pc, #32]	; (800d1a4 <HAL_UART_ErrorCallback+0x44>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3801      	subs	r0, #1
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	0083      	lsls	r3, r0, #2
 800d18c:	585b      	ldr	r3, [r3, r1]
 800d18e:	0020      	movs	r0, r4
 800d190:	6819      	ldr	r1, [r3, #0]
 800d192:	b292      	uxth	r2, r2
 800d194:	3128      	adds	r1, #40	; 0x28
 800d196:	f005 fdeb 	bl	8012d70 <HAL_UART_Receive_DMA>
 800d19a:	e7f0      	b.n	800d17e <HAL_UART_ErrorCallback+0x1e>
 800d19c:	20000c64 	.word	0x20000c64
 800d1a0:	200019c8 	.word	0x200019c8
 800d1a4:	2000198c 	.word	0x2000198c

0800d1a8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	46de      	mov	lr, fp
 800d1ac:	464e      	mov	r6, r9
 800d1ae:	4645      	mov	r5, r8
 800d1b0:	4657      	mov	r7, sl
 800d1b2:	b5e0      	push	{r5, r6, r7, lr}
 800d1b4:	b083      	sub	sp, #12
 800d1b6:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d1b8:	f7fd fabe 	bl	800a738 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d1bc:	4d63      	ldr	r5, [pc, #396]	; (800d34c <HAL_UART_RxCpltCallback+0x1a4>)
	uint8_t port_index = port_number - 1;
 800d1be:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	4963      	ldr	r1, [pc, #396]	; (800d350 <HAL_UART_RxCpltCallback+0x1a8>)
 800d1c4:	5cea      	ldrb	r2, [r5, r3]
 800d1c6:	5c0e      	ldrb	r6, [r1, r0]
 800d1c8:	2a0d      	cmp	r2, #13
 800d1ca:	d00b      	beq.n	800d1e4 <HAL_UART_RxCpltCallback+0x3c>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d1cc:	2e03      	cmp	r6, #3
 800d1ce:	d00d      	beq.n	800d1ec <HAL_UART_RxCpltCallback+0x44>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d1d0:	2a48      	cmp	r2, #72	; 0x48
 800d1d2:	d100      	bne.n	800d1d6 <HAL_UART_RxCpltCallback+0x2e>
 800d1d4:	e09b      	b.n	800d30e <HAL_UART_RxCpltCallback+0x166>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d1d6:	2a5a      	cmp	r2, #90	; 0x5a
 800d1d8:	d11b      	bne.n	800d212 <HAL_UART_RxCpltCallback+0x6a>
 800d1da:	2e07      	cmp	r6, #7
 800d1dc:	d11b      	bne.n	800d216 <HAL_UART_RxCpltCallback+0x6e>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d1de:	2308      	movs	r3, #8
 800d1e0:	540b      	strb	r3, [r1, r0]
 800d1e2:	e006      	b.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	d03b      	beq.n	800d260 <HAL_UART_RxCpltCallback+0xb8>
	else if(portStatus[port_number] == CLI)
 800d1e8:	2e03      	cmp	r6, #3
 800d1ea:	d112      	bne.n	800d212 <HAL_UART_RxCpltCallback+0x6a>
		Read_In_CLI_Task_Flag = 1;
 800d1ec:	4b59      	ldr	r3, [pc, #356]	; (800d354 <HAL_UART_RxCpltCallback+0x1ac>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d1f2:	0020      	movs	r0, r4
 800d1f4:	f7fd faa0 	bl	800a738 <GetPort>
 800d1f8:	1e41      	subs	r1, r0, #1
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	0020      	movs	r0, r4
 800d1fe:	1869      	adds	r1, r5, r1
 800d200:	f005 fd56 	bl	8012cb0 <HAL_UART_Receive_IT>
}
 800d204:	b003      	add	sp, #12
 800d206:	bcf0      	pop	{r4, r5, r6, r7}
 800d208:	46bb      	mov	fp, r7
 800d20a:	46b2      	mov	sl, r6
 800d20c:	46a9      	mov	r9, r5
 800d20e:	46a0      	mov	r8, r4
 800d210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d212:	2e07      	cmp	r6, #7
 800d214:	d078      	beq.n	800d308 <HAL_UART_RxCpltCallback+0x160>
	else if(portStatus[port_number] == Z_Status)
 800d216:	2e08      	cmp	r6, #8
 800d218:	d07f      	beq.n	800d31a <HAL_UART_RxCpltCallback+0x172>
	else if(portStatus[port_number] == MSG)
 800d21a:	2e01      	cmp	r6, #1
 800d21c:	d1e9      	bne.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
		if(temp_length[port_index] > 1)
 800d21e:	4e4e      	ldr	r6, [pc, #312]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
 800d220:	18f6      	adds	r6, r6, r3
 800d222:	46b1      	mov	r9, r6
 800d224:	7a36      	ldrb	r6, [r6, #8]
 800d226:	9600      	str	r6, [sp, #0]
 800d228:	2e01      	cmp	r6, #1
 800d22a:	d935      	bls.n	800d298 <HAL_UART_RxCpltCallback+0xf0>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d22c:	494a      	ldr	r1, [pc, #296]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
			temp_length[port_index]--;
 800d22e:	3e01      	subs	r6, #1
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d230:	5cc9      	ldrb	r1, [r1, r3]
 800d232:	468c      	mov	ip, r1
 800d234:	4949      	ldr	r1, [pc, #292]	; (800d35c <HAL_UART_RxCpltCallback+0x1b4>)
 800d236:	5cc8      	ldrb	r0, [r1, r3]
 800d238:	00c1      	lsls	r1, r0, #3
 800d23a:	1a09      	subs	r1, r1, r0
 800d23c:	4688      	mov	r8, r1
 800d23e:	0099      	lsls	r1, r3, #2
 800d240:	18c9      	adds	r1, r1, r3
 800d242:	00c8      	lsls	r0, r1, #3
 800d244:	1a41      	subs	r1, r0, r1
 800d246:	4441      	add	r1, r8
 800d248:	4845      	ldr	r0, [pc, #276]	; (800d360 <HAL_UART_RxCpltCallback+0x1b8>)
 800d24a:	00c9      	lsls	r1, r1, #3
 800d24c:	1841      	adds	r1, r0, r1
 800d24e:	4660      	mov	r0, ip
 800d250:	540a      	strb	r2, [r1, r0]
			temp_index[port_index]++;
 800d252:	4662      	mov	r2, ip
 800d254:	4940      	ldr	r1, [pc, #256]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
 800d256:	3201      	adds	r2, #1
 800d258:	54ca      	strb	r2, [r1, r3]
			temp_length[port_index]--;
 800d25a:	464b      	mov	r3, r9
 800d25c:	721e      	strb	r6, [r3, #8]
 800d25e:	e7c8      	b.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
 800d260:	000b      	movs	r3, r1
				portStatus[i] = FREE;
 800d262:	2700      	movs	r7, #0
 800d264:	1d8e      	adds	r6, r1, #6
			if(portStatus[i] == CLI)
 800d266:	781a      	ldrb	r2, [r3, #0]
 800d268:	2a03      	cmp	r2, #3
 800d26a:	d100      	bne.n	800d26e <HAL_UART_RxCpltCallback+0xc6>
				portStatus[i] = FREE;
 800d26c:	701f      	strb	r7, [r3, #0]
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800d26e:	3301      	adds	r3, #1
 800d270:	429e      	cmp	r6, r3
 800d272:	d1f8      	bne.n	800d266 <HAL_UART_RxCpltCallback+0xbe>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d274:	2303      	movs	r3, #3
 800d276:	540b      	strb	r3, [r1, r0]
		PcPort = port_number;
 800d278:	4b3a      	ldr	r3, [pc, #232]	; (800d364 <HAL_UART_RxCpltCallback+0x1bc>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d27a:	2202      	movs	r2, #2
		PcPort = port_number;
 800d27c:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d27e:	4b3a      	ldr	r3, [pc, #232]	; (800d368 <HAL_UART_RxCpltCallback+0x1c0>)
 800d280:	2100      	movs	r1, #0
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	2300      	movs	r3, #0
 800d286:	f002 f901 	bl	800f48c <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d28a:	4b38      	ldr	r3, [pc, #224]	; (800d36c <HAL_UART_RxCpltCallback+0x1c4>)
 800d28c:	781a      	ldrb	r2, [r3, #0]
 800d28e:	2a01      	cmp	r2, #1
 800d290:	d1ad      	bne.n	800d1ee <HAL_UART_RxCpltCallback+0x46>
 800d292:	4930      	ldr	r1, [pc, #192]	; (800d354 <HAL_UART_RxCpltCallback+0x1ac>)
 800d294:	700a      	strb	r2, [r1, #0]
		Activate_CLI_For_First_Time_Flag = 1;
 800d296:	e7aa      	b.n	800d1ee <HAL_UART_RxCpltCallback+0x46>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d298:	4e30      	ldr	r6, [pc, #192]	; (800d35c <HAL_UART_RxCpltCallback+0x1b4>)
 800d29a:	5cf6      	ldrb	r6, [r6, r3]
 800d29c:	46b4      	mov	ip, r6
 800d29e:	4e2e      	ldr	r6, [pc, #184]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
 800d2a0:	4667      	mov	r7, ip
 800d2a2:	5cf6      	ldrb	r6, [r6, r3]
 800d2a4:	46b2      	mov	sl, r6
 800d2a6:	4666      	mov	r6, ip
 800d2a8:	00f6      	lsls	r6, r6, #3
 800d2aa:	1bf6      	subs	r6, r6, r7
 800d2ac:	009f      	lsls	r7, r3, #2
 800d2ae:	46bb      	mov	fp, r7
 800d2b0:	449b      	add	fp, r3
 800d2b2:	465f      	mov	r7, fp
 800d2b4:	9601      	str	r6, [sp, #4]
 800d2b6:	465e      	mov	r6, fp
 800d2b8:	00ff      	lsls	r7, r7, #3
 800d2ba:	1bbf      	subs	r7, r7, r6
 800d2bc:	9e01      	ldr	r6, [sp, #4]
 800d2be:	46b8      	mov	r8, r7
 800d2c0:	46b3      	mov	fp, r6
 800d2c2:	44d8      	add	r8, fp
 800d2c4:	4646      	mov	r6, r8
 800d2c6:	00f6      	lsls	r6, r6, #3
 800d2c8:	46b0      	mov	r8, r6
 800d2ca:	4e25      	ldr	r6, [pc, #148]	; (800d360 <HAL_UART_RxCpltCallback+0x1b8>)
 800d2cc:	4657      	mov	r7, sl
 800d2ce:	46b3      	mov	fp, r6
 800d2d0:	44d8      	add	r8, fp
 800d2d2:	4646      	mov	r6, r8
 800d2d4:	55f2      	strb	r2, [r6, r7]
			temp_index[port_index]++;
 800d2d6:	4652      	mov	r2, sl
 800d2d8:	4e1f      	ldr	r6, [pc, #124]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
 800d2da:	3201      	adds	r2, #1
 800d2dc:	54f2      	strb	r2, [r6, r3]
			temp_length[port_index]--;
 800d2de:	464a      	mov	r2, r9
 800d2e0:	9e00      	ldr	r6, [sp, #0]
 800d2e2:	3e01      	subs	r6, #1
 800d2e4:	7216      	strb	r6, [r2, #8]
			MSG_Buffer_Index_End[port_index]++;
 800d2e6:	4662      	mov	r2, ip
 800d2e8:	3201      	adds	r2, #1
 800d2ea:	b2d2      	uxtb	r2, r2
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d2ec:	2a05      	cmp	r2, #5
 800d2ee:	d100      	bne.n	800d2f2 <HAL_UART_RxCpltCallback+0x14a>
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	4e1a      	ldr	r6, [pc, #104]	; (800d35c <HAL_UART_RxCpltCallback+0x1b4>)
 800d2f4:	54f2      	strb	r2, [r6, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d2f6:	4a1e      	ldr	r2, [pc, #120]	; (800d370 <HAL_UART_RxCpltCallback+0x1c8>)
 800d2f8:	4e1e      	ldr	r6, [pc, #120]	; (800d374 <HAL_UART_RxCpltCallback+0x1cc>)
 800d2fa:	7813      	ldrb	r3, [r2, #0]
 800d2fc:	54f0      	strb	r0, [r6, r3]
			Process_Message_Buffer_Index_End++;
 800d2fe:	3301      	adds	r3, #1
 800d300:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d302:	2b05      	cmp	r3, #5
 800d304:	d01f      	beq.n	800d346 <HAL_UART_RxCpltCallback+0x19e>
 800d306:	7013      	strb	r3, [r2, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800d308:	2300      	movs	r3, #0
 800d30a:	540b      	strb	r3, [r1, r0]
 800d30c:	e771      	b.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d30e:	2e00      	cmp	r6, #0
 800d310:	d000      	beq.n	800d314 <HAL_UART_RxCpltCallback+0x16c>
 800d312:	e77e      	b.n	800d212 <HAL_UART_RxCpltCallback+0x6a>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d314:	2307      	movs	r3, #7
 800d316:	540b      	strb	r3, [r1, r0]
 800d318:	e76b      	b.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
		portStatus[port_number] =MSG; // Receive length byte.
 800d31a:	3e07      	subs	r6, #7
 800d31c:	540e      	strb	r6, [r1, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d31e:	490f      	ldr	r1, [pc, #60]	; (800d35c <HAL_UART_RxCpltCallback+0x1b4>)
 800d320:	5ccf      	ldrb	r7, [r1, r3]
 800d322:	00f9      	lsls	r1, r7, #3
 800d324:	1bcf      	subs	r7, r1, r7
 800d326:	0099      	lsls	r1, r3, #2
 800d328:	18c9      	adds	r1, r1, r3
 800d32a:	00c8      	lsls	r0, r1, #3
 800d32c:	1a41      	subs	r1, r0, r1
 800d32e:	19c9      	adds	r1, r1, r7
 800d330:	480b      	ldr	r0, [pc, #44]	; (800d360 <HAL_UART_RxCpltCallback+0x1b8>)
 800d332:	00c9      	lsls	r1, r1, #3
 800d334:	1841      	adds	r1, r0, r1
		temp_index[port_index] = 3;
 800d336:	2003      	movs	r0, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d338:	708a      	strb	r2, [r1, #2]
		temp_index[port_index] = 3;
 800d33a:	4907      	ldr	r1, [pc, #28]	; (800d358 <HAL_UART_RxCpltCallback+0x1b0>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d33c:	3201      	adds	r2, #1
		temp_index[port_index] = 3;
 800d33e:	54c8      	strb	r0, [r1, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d340:	18cb      	adds	r3, r1, r3
 800d342:	721a      	strb	r2, [r3, #8]
 800d344:	e755      	b.n	800d1f2 <HAL_UART_RxCpltCallback+0x4a>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	7013      	strb	r3, [r2, #0]
 800d34a:	e7dd      	b.n	800d308 <HAL_UART_RxCpltCallback+0x160>
 800d34c:	20001dd0 	.word	0x20001dd0
 800d350:	20000c64 	.word	0x20000c64
 800d354:	200017a9 	.word	0x200017a9
 800d358:	20002938 	.word	0x20002938
 800d35c:	2000179c 	.word	0x2000179c
 800d360:	20001224 	.word	0x20001224
 800d364:	20000c60 	.word	0x20000c60
 800d368:	20001ed4 	.word	0x20001ed4
 800d36c:	200017aa 	.word	0x200017aa
 800d370:	2000121a 	.word	0x2000121a
 800d374:	2000121c 	.word	0x2000121c

0800d378 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/
/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d378:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d37a:	24ff      	movs	r4, #255	; 0xff
 800d37c:	4d09      	ldr	r5, [pc, #36]	; (800d3a4 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d37e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d380:	23ff      	movs	r3, #255	; 0xff
 800d382:	2210      	movs	r2, #16
 800d384:	7828      	ldrb	r0, [r5, #0]
 800d386:	4908      	ldr	r1, [pc, #32]	; (800d3a8 <vApplicationStackOverflowHook+0x30>)
 800d388:	9400      	str	r4, [sp, #0]
 800d38a:	f000 fb71 	bl	800da70 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d38e:	4b07      	ldr	r3, [pc, #28]	; (800d3ac <vApplicationStackOverflowHook+0x34>)
 800d390:	220f      	movs	r2, #15
 800d392:	6819      	ldr	r1, [r3, #0]
 800d394:	7828      	ldrb	r0, [r5, #0]
 800d396:	23ff      	movs	r3, #255	; 0xff
 800d398:	9400      	str	r4, [sp, #0]
 800d39a:	f000 fb69 	bl	800da70 <writePxMutex>
	NVIC_SystemReset();
 800d39e:	f7ff fe1f 	bl	800cfe0 <NVIC_SystemReset>
 800d3a2:	46c0      	nop			; (mov r8, r8)
 800d3a4:	20000c60 	.word	0x20000c60
 800d3a8:	0801cd9c 	.word	0x0801cd9c
 800d3ac:	200000a4 	.word	0x200000a4

0800d3b0 <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	void vApplicationMallocFailedHook(void){
 800d3b0:	b530      	push	{r4, r5, lr}
		uint8_t* error_message = "Heap size exceeded\r\n";
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d3b2:	24ff      	movs	r4, #255	; 0xff
 800d3b4:	4d09      	ldr	r5, [pc, #36]	; (800d3dc <vApplicationMallocFailedHook+0x2c>)
	void vApplicationMallocFailedHook(void){
 800d3b6:	b083      	sub	sp, #12
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d3b8:	23ff      	movs	r3, #255	; 0xff
 800d3ba:	2214      	movs	r2, #20
 800d3bc:	7828      	ldrb	r0, [r5, #0]
 800d3be:	4908      	ldr	r1, [pc, #32]	; (800d3e0 <vApplicationMallocFailedHook+0x30>)
 800d3c0:	9400      	str	r4, [sp, #0]
 800d3c2:	f000 fb55 	bl	800da70 <writePxMutex>
		writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d3c6:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <vApplicationMallocFailedHook+0x34>)
 800d3c8:	220f      	movs	r2, #15
 800d3ca:	6819      	ldr	r1, [r3, #0]
 800d3cc:	7828      	ldrb	r0, [r5, #0]
 800d3ce:	23ff      	movs	r3, #255	; 0xff
 800d3d0:	9400      	str	r4, [sp, #0]
 800d3d2:	f000 fb4d 	bl	800da70 <writePxMutex>
		NVIC_SystemReset();
 800d3d6:	f7ff fe03 	bl	800cfe0 <NVIC_SystemReset>
 800d3da:	46c0      	nop			; (mov r8, r8)
 800d3dc:	20000c60 	.word	0x20000c60
 800d3e0:	0801cdb0 	.word	0x0801cdb0
 800d3e4:	200000a4 	.word	0x200000a4

0800d3e8 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ea:	46de      	mov	lr, fp
 800d3ec:	4657      	mov	r7, sl
 800d3ee:	464e      	mov	r6, r9
 800d3f0:	4645      	mov	r5, r8
 800d3f2:	b5e0      	push	{r5, r6, r7, lr}
 800d3f4:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d3f6:	ae04      	add	r6, sp, #16
 800d3f8:	0032      	movs	r2, r6
 800d3fa:	4b35      	ldr	r3, [pc, #212]	; (800d4d0 <RTC_CalendarConfig+0xe8>)
{
 800d3fc:	2700      	movs	r7, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d3fe:	cb13      	ldmia	r3!, {r0, r1, r4}
 800d400:	c213      	stmia	r2!, {r0, r1, r4}
 800d402:	ab01      	add	r3, sp, #4
 800d404:	4698      	mov	r8, r3
 800d406:	4642      	mov	r2, r8
 800d408:	4b32      	ldr	r3, [pc, #200]	; (800d4d4 <RTC_CalendarConfig+0xec>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
  day = atoi(comDate + 4);
  *(comDate + 3) = 0;
 800d40a:	2401      	movs	r4, #1
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d40c:	cb03      	ldmia	r3!, {r0, r1}
 800d40e:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800d410:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d412:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d414:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d416:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d418:	f006 f8f1 	bl	80135fe <atoi>
  *(comDate + 6) = 0;
 800d41c:	71b7      	strb	r7, [r6, #6]
  year = atoi(comDate + 9);		// only last 2 digits
 800d41e:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800d420:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800d422:	469a      	mov	sl, r3
  day = atoi(comDate + 4);
 800d424:	f006 f8eb 	bl	80135fe <atoi>
 800d428:	b2c3      	uxtb	r3, r0
 800d42a:	4699      	mov	r9, r3
  *(comDate + 3) = 0;
 800d42c:	4d2a      	ldr	r5, [pc, #168]	; (800d4d8 <RTC_CalendarConfig+0xf0>)
 800d42e:	70f7      	strb	r7, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d430:	0030      	movs	r0, r6
 800d432:	6829      	ldr	r1, [r5, #0]
 800d434:	f7f2 fe66 	bl	8000104 <strcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d100      	bne.n	800d43e <RTC_CalendarConfig+0x56>
			month = i + 1;
 800d43c:	0027      	movs	r7, r4
  for (uint8_t i = 0; i < 12; i++)
 800d43e:	3401      	adds	r4, #1
 800d440:	b2e4      	uxtb	r4, r4
 800d442:	3504      	adds	r5, #4
 800d444:	2c0d      	cmp	r4, #13
 800d446:	d1f3      	bne.n	800d430 <RTC_CalendarConfig+0x48>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d448:	200a      	movs	r0, #10
 800d44a:	4468      	add	r0, sp
 800d44c:	f006 f8d7 	bl	80135fe <atoi>
	*(comDate + 5) = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	7173      	strb	r3, [r6, #5]
 800d454:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800d456:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800d458:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800d45a:	1dd8      	adds	r0, r3, #7
 800d45c:	f006 f8cf 	bl	80135fe <atoi>
	*(comDate + 2) = 0;
 800d460:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800d462:	0005      	movs	r5, r0
	*(comDate + 2) = 0;
 800d464:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800d466:	4640      	mov	r0, r8
 800d468:	f006 f8c9 	bl	80135fe <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800d46c:	466b      	mov	r3, sp
 800d46e:	4652      	mov	r2, sl
 800d470:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800d472:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800d474:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800d476:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d478:	2301      	movs	r3, #1
 800d47a:	466a      	mov	r2, sp
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d47c:	4f17      	ldr	r7, [pc, #92]	; (800d4dc <RTC_CalendarConfig+0xf4>)
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d47e:	7013      	strb	r3, [r2, #0]
	hours = atoi(comTime);
 800d480:	0006      	movs	r6, r0
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d482:	2200      	movs	r2, #0
 800d484:	4669      	mov	r1, sp
 800d486:	0038      	movs	r0, r7
 800d488:	f004 ff4c 	bl	8012324 <HAL_RTC_SetDate>
 800d48c:	1e03      	subs	r3, r0, #0
 800d48e:	d115      	bne.n	800d4bc <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d490:	a907      	add	r1, sp, #28
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d492:	7208      	strb	r0, [r1, #8]
 800d494:	2018      	movs	r0, #24
 800d496:	4a12      	ldr	r2, [pc, #72]	; (800d4e0 <RTC_CalendarConfig+0xf8>)
  stimestructure.Seconds = seconds;
 800d498:	708c      	strb	r4, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d49a:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d49c:	2200      	movs	r2, #0
 800d49e:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800d4a0:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800d4a2:	704d      	strb	r5, [r1, #1]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d4a4:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d4a6:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d4a8:	f004 fe36 	bl	8012118 <HAL_RTC_SetTime>
 800d4ac:	1e04      	subs	r4, r0, #0
 800d4ae:	d105      	bne.n	800d4bc <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	0038      	movs	r0, r7
 800d4b4:	4a0b      	ldr	r2, [pc, #44]	; (800d4e4 <RTC_CalendarConfig+0xfc>)
 800d4b6:	f005 f81b 	bl	80124f0 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d4ba:	e000      	b.n	800d4be <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800d4bc:	24ff      	movs	r4, #255	; 0xff
}
 800d4be:	0020      	movs	r0, r4
 800d4c0:	b00d      	add	sp, #52	; 0x34
 800d4c2:	bcf0      	pop	{r4, r5, r6, r7}
 800d4c4:	46bb      	mov	fp, r7
 800d4c6:	46b2      	mov	sl, r6
 800d4c8:	46a9      	mov	r9, r5
 800d4ca:	46a0      	mov	r8, r4
 800d4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ce:	46c0      	nop			; (mov r8, r8)
 800d4d0:	0801a574 	.word	0x0801a574
 800d4d4:	0801a598 	.word	0x0801a598
 800d4d8:	20000064 	.word	0x20000064
 800d4dc:	20002948 	.word	0x20002948
 800d4e0:	20000b54 	.word	0x20000b54
 800d4e4:	000032f2 	.word	0x000032f2

0800d4e8 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800d4e8:	2380      	movs	r3, #128	; 0x80
{
 800d4ea:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800d4ec:	4e1a      	ldr	r6, [pc, #104]	; (800d558 <RTC_Init+0x70>)
 800d4ee:	021b      	lsls	r3, r3, #8
 800d4f0:	6a32      	ldr	r2, [r6, #32]
	RtcHandle.Instance = RTC; 
 800d4f2:	4c1a      	ldr	r4, [pc, #104]	; (800d55c <RTC_Init+0x74>)
  __HAL_RCC_RTC_ENABLE();
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	6233      	str	r3, [r6, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800d4f8:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800d4fa:	4b19      	ldr	r3, [pc, #100]	; (800d560 <RTC_Init+0x78>)
  RtcHandle.Init.AsynchPrediv = 124;
 800d4fc:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800d4fe:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d500:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800d502:	4a18      	ldr	r2, [pc, #96]	; (800d564 <RTC_Init+0x7c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d504:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d506:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800d508:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d50a:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d50c:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d50e:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d510:	f004 fdaa 	bl	8012068 <HAL_RTC_Init>
 800d514:	1e05      	subs	r5, r0, #0
 800d516:	d11d      	bne.n	800d554 <RTC_Init+0x6c>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d518:	2101      	movs	r1, #1
 800d51a:	0020      	movs	r0, r4
 800d51c:	f004 ffee 	bl	80124fc <HAL_RTCEx_BKUPRead>
 800d520:	4b11      	ldr	r3, [pc, #68]	; (800d568 <RTC_Init+0x80>)
 800d522:	4298      	cmp	r0, r3
 800d524:	d10c      	bne.n	800d540 <RTC_Init+0x58>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d528:	011b      	lsls	r3, r3, #4
 800d52a:	d501      	bpl.n	800d530 <RTC_Init+0x48>
			bootStatus = POWER_ON_BOOT;
 800d52c:	2320      	movs	r3, #32
 800d52e:	54e5      	strb	r5, [r4, r3]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d530:	4b09      	ldr	r3, [pc, #36]	; (800d558 <RTC_Init+0x70>)
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	015b      	lsls	r3, r3, #5
 800d536:	d505      	bpl.n	800d544 <RTC_Init+0x5c>
			bootStatus = RESET_BOOT;
 800d538:	2320      	movs	r3, #32
 800d53a:	2201      	movs	r2, #1
 800d53c:	54e2      	strb	r2, [r4, r3]
 800d53e:	e001      	b.n	800d544 <RTC_Init+0x5c>
    RTC_CalendarConfig();
 800d540:	f7ff ff52 	bl	800d3e8 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d544:	2380      	movs	r3, #128	; 0x80
 800d546:	4a04      	ldr	r2, [pc, #16]	; (800d558 <RTC_Init+0x70>)
 800d548:	045b      	lsls	r3, r3, #17
 800d54a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d54c:	430b      	orrs	r3, r1
 800d54e:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d550:	0028      	movs	r0, r5
 800d552:	bd70      	pop	{r4, r5, r6, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d554:	25ff      	movs	r5, #255	; 0xff
 800d556:	e7fb      	b.n	800d550 <RTC_Init+0x68>
 800d558:	40021000 	.word	0x40021000
 800d55c:	20002948 	.word	0x20002948
 800d560:	40002800 	.word	0x40002800
 800d564:	000007cf 	.word	0x000007cf
 800d568:	000032f2 	.word	0x000032f2

0800d56c <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56e:	46c6      	mov	lr, r8
 800d570:	b500      	push	{lr}
 800d572:	b086      	sub	sp, #24
 800d574:	ad0f      	add	r5, sp, #60	; 0x3c
 800d576:	782e      	ldrb	r6, [r5, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d578:	466d      	mov	r5, sp
{
 800d57a:	ac0c      	add	r4, sp, #48	; 0x30
  sdatestructure.Year = year-2000;
 800d57c:	3230      	adds	r2, #48	; 0x30
{
 800d57e:	7827      	ldrb	r7, [r4, #0]
 800d580:	ac0d      	add	r4, sp, #52	; 0x34
 800d582:	7824      	ldrb	r4, [r4, #0]
  sdatestructure.Year = year-2000;
 800d584:	70ea      	strb	r2, [r5, #3]
  sdatestructure.Month = month;
 800d586:	7068      	strb	r0, [r5, #1]
  sdatestructure.Date = day;
 800d588:	70a9      	strb	r1, [r5, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d58a:	702b      	strb	r3, [r5, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d58c:	4d23      	ldr	r5, [pc, #140]	; (800d61c <BOS_CalendarConfig+0xb0>)
{
 800d58e:	46a0      	mov	r8, r4
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d590:	2200      	movs	r2, #0
{
 800d592:	ac0e      	add	r4, sp, #56	; 0x38
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d594:	4669      	mov	r1, sp
 800d596:	0028      	movs	r0, r5
{
 800d598:	7824      	ldrb	r4, [r4, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d59a:	f004 fec3 	bl	8012324 <HAL_RTC_SetDate>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d134      	bne.n	800d60c <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800d5a2:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800d5a4:	a901      	add	r1, sp, #4
  stimestructure.Seconds = seconds; 
 800d5a6:	708f      	strb	r7, [r1, #2]
  stimestructure.Hours = hours;
 800d5a8:	700c      	strb	r4, [r1, #0]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d5aa:	4f1d      	ldr	r7, [pc, #116]	; (800d620 <BOS_CalendarConfig+0xb4>)
  stimestructure.Minutes = minutes;
 800d5ac:	704b      	strb	r3, [r1, #1]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d5ae:	6108      	str	r0, [r1, #16]
	if (hours > 12)	BOS.hourformat = 24;
 800d5b0:	2c0c      	cmp	r4, #12
 800d5b2:	d81d      	bhi.n	800d5f0 <BOS_CalendarConfig+0x84>
	
	if (AMPM == RTC_AM) {
 800d5b4:	2e01      	cmp	r6, #1
 800d5b6:	d01f      	beq.n	800d5f8 <BOS_CalendarConfig+0x8c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d5b8:	2e02      	cmp	r6, #2
 800d5ba:	d029      	beq.n	800d610 <BOS_CalendarConfig+0xa4>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d5bc:	2318      	movs	r3, #24
 800d5be:	737b      	strb	r3, [r7, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	0028      	movs	r0, r5
 800d5c4:	f004 fda8 	bl	8012118 <HAL_RTC_SetTime>
 800d5c8:	1e04      	subs	r4, r0, #0
 800d5ca:	d11f      	bne.n	800d60c <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d5cc:	208d      	movs	r0, #141	; 0x8d
 800d5ce:	7b7b      	ldrb	r3, [r7, #13]
 800d5d0:	7939      	ldrb	r1, [r7, #4]
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	4319      	orrs	r1, r3
 800d5d6:	0040      	lsls	r0, r0, #1
 800d5d8:	f7fe f9f4 	bl	800b9c4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d5dc:	2101      	movs	r1, #1
 800d5de:	0028      	movs	r0, r5
 800d5e0:	4a10      	ldr	r2, [pc, #64]	; (800d624 <BOS_CalendarConfig+0xb8>)
 800d5e2:	f004 ff85 	bl	80124f0 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d5e6:	0020      	movs	r0, r4
 800d5e8:	b006      	add	sp, #24
 800d5ea:	bc80      	pop	{r7}
 800d5ec:	46b8      	mov	r8, r7
 800d5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800d5f0:	2318      	movs	r3, #24
 800d5f2:	737b      	strb	r3, [r7, #13]
	if (AMPM == RTC_AM) {
 800d5f4:	2e01      	cmp	r6, #1
 800d5f6:	d1df      	bne.n	800d5b8 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d5f8:	2300      	movs	r3, #0
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d5fa:	2200      	movs	r2, #0
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d5fc:	720b      	strb	r3, [r1, #8]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d5fe:	0028      	movs	r0, r5
		BOS.hourformat = 12;
 800d600:	330c      	adds	r3, #12
 800d602:	737b      	strb	r3, [r7, #13]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d604:	f004 fd88 	bl	8012118 <HAL_RTC_SetTime>
 800d608:	1e04      	subs	r4, r0, #0
 800d60a:	d0df      	beq.n	800d5cc <BOS_CalendarConfig+0x60>
		return BOS_ERROR;
 800d60c:	24ff      	movs	r4, #255	; 0xff
 800d60e:	e7ea      	b.n	800d5e6 <BOS_CalendarConfig+0x7a>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d614:	3b34      	subs	r3, #52	; 0x34
 800d616:	737b      	strb	r3, [r7, #13]
 800d618:	e7d2      	b.n	800d5c0 <BOS_CalendarConfig+0x54>
 800d61a:	46c0      	nop			; (mov r8, r8)
 800d61c:	20002948 	.word	0x20002948
 800d620:	20000b54 	.word	0x20000b54
 800d624:	000032f2 	.word	0x000032f2

0800d628 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d628:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d62a:	4d16      	ldr	r5, [pc, #88]	; (800d684 <GetTimeDate+0x5c>)
{
 800d62c:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d62e:	ac01      	add	r4, sp, #4
 800d630:	0021      	movs	r1, r4
 800d632:	2200      	movs	r2, #0
 800d634:	0028      	movs	r0, r5
 800d636:	f004 fe45 	bl	80122c4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d63a:	4669      	mov	r1, sp
 800d63c:	2200      	movs	r2, #0
 800d63e:	0028      	movs	r0, r5
 800d640:	f004 ff28 	bl	8012494 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d644:	7a22      	ldrb	r2, [r4, #8]
 800d646:	4b10      	ldr	r3, [pc, #64]	; (800d688 <GetTimeDate+0x60>)
 800d648:	09d2      	lsrs	r2, r2, #7
 800d64a:	3201      	adds	r2, #1
 800d64c:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d64e:	9a02      	ldr	r2, [sp, #8]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800d650:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d652:	0852      	lsrs	r2, r2, #1
 800d654:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d656:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d658:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800d65a:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d65c:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d65e:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800d660:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d662:	7822      	ldrb	r2, [r4, #0]
 800d664:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d666:	466a      	mov	r2, sp
 800d668:	7892      	ldrb	r2, [r2, #2]
 800d66a:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d66c:	466a      	mov	r2, sp
 800d66e:	7852      	ldrb	r2, [r2, #1]
 800d670:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d672:	466a      	mov	r2, sp
 800d674:	7812      	ldrb	r2, [r2, #0]
 800d676:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d678:	466a      	mov	r2, sp
 800d67a:	78d2      	ldrb	r2, [r2, #3]
 800d67c:	4462      	add	r2, ip
 800d67e:	831a      	strh	r2, [r3, #24]
}
 800d680:	b007      	add	sp, #28
 800d682:	bd30      	pop	{r4, r5, pc}
 800d684:	20002948 	.word	0x20002948
 800d688:	20000b54 	.word	0x20000b54

0800d68c <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d68c:	2080      	movs	r0, #128	; 0x80
 800d68e:	4a13      	ldr	r2, [pc, #76]	; (800d6dc <TIM_USEC_Init+0x50>)
{
 800d690:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d692:	69d1      	ldr	r1, [r2, #28]
 800d694:	0040      	lsls	r0, r0, #1
 800d696:	4301      	orrs	r1, r0
 800d698:	61d1      	str	r1, [r2, #28]
 800d69a:	69d3      	ldr	r3, [r2, #28]
{
 800d69c:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d69e:	4003      	ands	r3, r0
 800d6a0:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d6a2:	4c0f      	ldr	r4, [pc, #60]	; (800d6e0 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d6a4:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d6a6:	4b0f      	ldr	r3, [pc, #60]	; (800d6e4 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d6a8:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d6aa:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d6ac:	f004 fc2e 	bl	8011f0c <HAL_RCC_GetPCLK1Freq>
 800d6b0:	490d      	ldr	r1, [pc, #52]	; (800d6e8 <TIM_USEC_Init+0x5c>)
 800d6b2:	f7f2 fd4d 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d6b8:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d6ba:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d6bc:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d6be:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d6c0:	f005 f9a8 	bl	8012a14 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d6c4:	a902      	add	r1, sp, #8
 800d6c6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d6c8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6ca:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d6cc:	f005 fa7e 	bl	8012bcc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d6d0:	0020      	movs	r0, r4
 800d6d2:	f004 fff3 	bl	80126bc <HAL_TIM_Base_Start>
}
 800d6d6:	b005      	add	sp, #20
 800d6d8:	bd30      	pop	{r4, r5, pc}
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	40021000 	.word	0x40021000
 800d6e0:	2000296c 	.word	0x2000296c
 800d6e4:	40002000 	.word	0x40002000
 800d6e8:	000f4240 	.word	0x000f4240
 800d6ec:	0000ffff 	.word	0x0000ffff

0800d6f0 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d6f0:	2080      	movs	r0, #128	; 0x80
 800d6f2:	4a14      	ldr	r2, [pc, #80]	; (800d744 <TIM_MSEC_Init+0x54>)
{
 800d6f4:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d6f6:	6991      	ldr	r1, [r2, #24]
 800d6f8:	0240      	lsls	r0, r0, #9
 800d6fa:	4301      	orrs	r1, r0
 800d6fc:	6191      	str	r1, [r2, #24]
 800d6fe:	6993      	ldr	r3, [r2, #24]
{
 800d700:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d702:	4003      	ands	r3, r0
 800d704:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d706:	4c10      	ldr	r4, [pc, #64]	; (800d748 <TIM_MSEC_Init+0x58>)
	__TIM15_CLK_ENABLE();
 800d708:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d70a:	4b10      	ldr	r3, [pc, #64]	; (800d74c <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d70c:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d70e:	63e3      	str	r3, [r4, #60]	; 0x3c
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d710:	f004 fbfc 	bl	8011f0c <HAL_RCC_GetPCLK1Freq>
 800d714:	21fa      	movs	r1, #250	; 0xfa
 800d716:	0089      	lsls	r1, r1, #2
 800d718:	f7f2 fd1a 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d71c:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <TIM_MSEC_Init+0x60>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d71e:	6420      	str	r0, [r4, #64]	; 0x40
  htim15.Init.Period = 0xFFFF;
 800d720:	64a3      	str	r3, [r4, #72]	; 0x48
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d722:	6465      	str	r5, [r4, #68]	; 0x44
  HAL_TIM_Base_Init(&htim15);
 800d724:	343c      	adds	r4, #60	; 0x3c
 800d726:	0020      	movs	r0, r4
 800d728:	f005 f974 	bl	8012a14 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d72c:	a902      	add	r1, sp, #8
 800d72e:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d730:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d732:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d734:	f005 fa4a 	bl	8012bcc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d738:	0020      	movs	r0, r4
 800d73a:	f004 ffbf 	bl	80126bc <HAL_TIM_Base_Start>
}
 800d73e:	b005      	add	sp, #20
 800d740:	bd30      	pop	{r4, r5, pc}
 800d742:	46c0      	nop			; (mov r8, r8)
 800d744:	40021000 	.word	0x40021000
 800d748:	2000296c 	.word	0x2000296c
 800d74c:	40014000 	.word	0x40014000
 800d750:	0000ffff 	.word	0x0000ffff

0800d754 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d754:	b510      	push	{r4, lr}
 800d756:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d758:	f002 f8f8 	bl	800f94c <vPortEnterCritical>
	
	if (Delay)
 800d75c:	2c00      	cmp	r4, #0
 800d75e:	d006      	beq.n	800d76e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d760:	4b04      	ldr	r3, [pc, #16]	; (800d774 <StartMicroDelay+0x20>)
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d766:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d768:	1a5b      	subs	r3, r3, r1
 800d76a:	42a3      	cmp	r3, r4
 800d76c:	d9fb      	bls.n	800d766 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d76e:	f002 f8f9 	bl	800f964 <vPortExitCritical>
}
 800d772:	bd10      	pop	{r4, pc}
 800d774:	2000296c 	.word	0x2000296c

0800d778 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d778:	b510      	push	{r4, lr}
 800d77a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d77c:	f002 f8e6 	bl	800f94c <vPortEnterCritical>
	
	if (Delay)
 800d780:	2c00      	cmp	r4, #0
 800d782:	d006      	beq.n	800d792 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d784:	4b04      	ldr	r3, [pc, #16]	; (800d798 <StartMilliDelay+0x20>)
 800d786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d788:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d78a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d78c:	1a5b      	subs	r3, r3, r1
 800d78e:	42a3      	cmp	r3, r4
 800d790:	d9fb      	bls.n	800d78a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d792:	f002 f8e7 	bl	800f964 <vPortExitCritical>
}
 800d796:	bd10      	pop	{r4, pc}
 800d798:	2000296c 	.word	0x2000296c

0800d79c <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800d79c:	4809      	ldr	r0, [pc, #36]	; (800d7c4 <MX_USART1_UART_Init+0x28>)
 800d79e:	4b0a      	ldr	r3, [pc, #40]	; (800d7c8 <MX_USART1_UART_Init+0x2c>)
{
 800d7a0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d7a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d7a4:	23e1      	movs	r3, #225	; 0xe1
 800d7a6:	031b      	lsls	r3, r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d7a8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d7aa:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d7ac:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d7ae:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d7b0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d7b2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d7b4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d7b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d7b8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d7ba:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d7bc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d7be:	f005 fdc1 	bl	8013344 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d7c2:	bd10      	pop	{r4, pc}
 800d7c4:	200023c4 	.word	0x200023c4
 800d7c8:	40013800 	.word	0x40013800

0800d7cc <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d7cc:	4809      	ldr	r0, [pc, #36]	; (800d7f4 <MX_USART2_UART_Init+0x28>)
 800d7ce:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <MX_USART2_UART_Init+0x2c>)
{
 800d7d0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d7d2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d7d4:	23e1      	movs	r3, #225	; 0xe1
 800d7d6:	031b      	lsls	r3, r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d7d8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d7da:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d7dc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d7de:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d7e0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d7e2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d7e4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d7e6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d7e8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d7ea:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d7ec:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d7ee:	f005 fda9 	bl	8013344 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d7f2:	bd10      	pop	{r4, pc}
 800d7f4:	20002354 	.word	0x20002354
 800d7f8:	40004400 	.word	0x40004400

0800d7fc <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d7fc:	4809      	ldr	r0, [pc, #36]	; (800d824 <MX_USART3_UART_Init+0x28>)
 800d7fe:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <MX_USART3_UART_Init+0x2c>)
{
 800d800:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d802:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d804:	23e1      	movs	r3, #225	; 0xe1
 800d806:	031b      	lsls	r3, r3, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d808:	220c      	movs	r2, #12
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d80a:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d80c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d80e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d810:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d812:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d814:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d816:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d818:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d81a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d81c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d81e:	f005 fd91 	bl	8013344 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d822:	bd10      	pop	{r4, pc}
 800d824:	200022e4 	.word	0x200022e4
 800d828:	40004800 	.word	0x40004800

0800d82c <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d82c:	4809      	ldr	r0, [pc, #36]	; (800d854 <MX_USART5_UART_Init+0x28>)
 800d82e:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <MX_USART5_UART_Init+0x2c>)
{
 800d830:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d832:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d834:	23e1      	movs	r3, #225	; 0xe1
 800d836:	031b      	lsls	r3, r3, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d838:	220c      	movs	r2, #12
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d83a:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d83c:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d83e:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d840:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d842:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d844:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d846:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d848:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d84a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d84c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d84e:	f005 fd79 	bl	8013344 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d852:	bd10      	pop	{r4, pc}
 800d854:	20002274 	.word	0x20002274
 800d858:	40005000 	.word	0x40005000

0800d85c <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d85c:	4809      	ldr	r0, [pc, #36]	; (800d884 <MX_USART6_UART_Init+0x28>)
 800d85e:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <MX_USART6_UART_Init+0x2c>)
{
 800d860:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d862:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d864:	23e1      	movs	r3, #225	; 0xe1
 800d866:	031b      	lsls	r3, r3, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d868:	220c      	movs	r2, #12
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d86a:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d86c:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d86e:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d870:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d872:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d874:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d876:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d878:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d87a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d87c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d87e:	f005 fd61 	bl	8013344 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d882:	bd10      	pop	{r4, pc}
 800d884:	20002204 	.word	0x20002204
 800d888:	40011400 	.word	0x40011400

0800d88c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d88e:	46c6      	mov	lr, r8
 800d890:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d892:	6803      	ldr	r3, [r0, #0]
 800d894:	4a6e      	ldr	r2, [pc, #440]	; (800da50 <HAL_UART_MspInit+0x1c4>)
{
 800d896:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d041      	beq.n	800d920 <HAL_UART_MspInit+0x94>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d89c:	4a6d      	ldr	r2, [pc, #436]	; (800da54 <HAL_UART_MspInit+0x1c8>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d06c      	beq.n	800d97c <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d8a2:	4a6d      	ldr	r2, [pc, #436]	; (800da58 <HAL_UART_MspInit+0x1cc>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d100      	bne.n	800d8aa <HAL_UART_MspInit+0x1e>
 800d8a8:	e094      	b.n	800d9d4 <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d8aa:	4a6c      	ldr	r2, [pc, #432]	; (800da5c <HAL_UART_MspInit+0x1d0>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d006      	beq.n	800d8be <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d8b0:	4a6b      	ldr	r2, [pc, #428]	; (800da60 <HAL_UART_MspInit+0x1d4>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d100      	bne.n	800d8b8 <HAL_UART_MspInit+0x2c>
 800d8b6:	e0b0      	b.n	800da1a <HAL_UART_MspInit+0x18e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d8b8:	4a6a      	ldr	r2, [pc, #424]	; (800da64 <HAL_UART_MspInit+0x1d8>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d003      	beq.n	800d8c6 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d8be:	b00a      	add	sp, #40	; 0x28
 800d8c0:	bc80      	pop	{r7}
 800d8c2:	46b8      	mov	r8, r7
 800d8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800d8c6:	2420      	movs	r4, #32
 800d8c8:	4b67      	ldr	r3, [pc, #412]	; (800da68 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d8ca:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d8cc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8ce:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d8d0:	4322      	orrs	r2, r4
 800d8d2:	619a      	str	r2, [r3, #24]
 800d8d4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d8d6:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d8d8:	4023      	ands	r3, r4
 800d8da:	9304      	str	r3, [sp, #16]
 800d8dc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d8de:	2310      	movs	r3, #16
 800d8e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8e2:	3b0e      	subs	r3, #14
 800d8e4:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d8e6:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d8e8:	a905      	add	r1, sp, #20
 800d8ea:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8ee:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d8f0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d8f2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d8f4:	f003 fd1e 	bl	8011334 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8f8:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d8fa:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d8fc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d900:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d902:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d904:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d906:	a905      	add	r1, sp, #20
 800d908:	05c0      	lsls	r0, r0, #23
 800d90a:	f003 fd13 	bl	8011334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d90e:	2200      	movs	r2, #0
 800d910:	2101      	movs	r1, #1
 800d912:	201d      	movs	r0, #29
 800d914:	f002 fc90 	bl	8010238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d918:	201d      	movs	r0, #29
 800d91a:	f002 fcbf 	bl	801029c <HAL_NVIC_EnableIRQ>
}
 800d91e:	e7ce      	b.n	800d8be <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800d920:	2080      	movs	r0, #128	; 0x80
 800d922:	4a51      	ldr	r2, [pc, #324]	; (800da68 <HAL_UART_MspInit+0x1dc>)
 800d924:	01c0      	lsls	r0, r0, #7
 800d926:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d928:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d92a:	4301      	orrs	r1, r0
 800d92c:	6191      	str	r1, [r2, #24]
 800d92e:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d930:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d932:	4003      	ands	r3, r0
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d938:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d93a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d93c:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d93e:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d940:	a905      	add	r1, sp, #20
 800d942:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d944:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d946:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d948:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d94a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d94c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d94e:	f003 fcf1 	bl	8011334 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d952:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d954:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d956:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d958:	a905      	add	r1, sp, #20
 800d95a:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d95c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d95e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d960:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d962:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d964:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d966:	f003 fce5 	bl	8011334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d96a:	2200      	movs	r2, #0
 800d96c:	2101      	movs	r1, #1
 800d96e:	201b      	movs	r0, #27
 800d970:	f002 fc62 	bl	8010238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d974:	201b      	movs	r0, #27
 800d976:	f002 fc91 	bl	801029c <HAL_NVIC_EnableIRQ>
 800d97a:	e7a0      	b.n	800d8be <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d97c:	2080      	movs	r0, #128	; 0x80
 800d97e:	4a3a      	ldr	r2, [pc, #232]	; (800da68 <HAL_UART_MspInit+0x1dc>)
 800d980:	0280      	lsls	r0, r0, #10
 800d982:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d984:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d986:	4301      	orrs	r1, r0
 800d988:	61d1      	str	r1, [r2, #28]
 800d98a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d98c:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d98e:	4003      	ands	r3, r0
 800d990:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d992:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d994:	2503      	movs	r5, #3
    __USART2_CLK_ENABLE();
 800d996:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d998:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d99a:	a905      	add	r1, sp, #20
 800d99c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d99e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9a0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9a2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d9a4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d9a6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d9a8:	f003 fcc4 	bl	8011334 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d9ac:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d9ae:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d9b0:	a905      	add	r1, sp, #20
 800d9b2:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d9b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9b6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9b8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d9ba:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d9bc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d9be:	f003 fcb9 	bl	8011334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	201c      	movs	r0, #28
 800d9c8:	f002 fc36 	bl	8010238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d9cc:	201c      	movs	r0, #28
 800d9ce:	f002 fc65 	bl	801029c <HAL_NVIC_EnableIRQ>
 800d9d2:	e774      	b.n	800d8be <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d9d4:	2080      	movs	r0, #128	; 0x80
 800d9d6:	4a24      	ldr	r2, [pc, #144]	; (800da68 <HAL_UART_MspInit+0x1dc>)
 800d9d8:	02c0      	lsls	r0, r0, #11
 800d9da:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9dc:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d9de:	4301      	orrs	r1, r0
 800d9e0:	61d1      	str	r1, [r2, #28]
 800d9e2:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9e4:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d9e6:	4003      	ands	r3, r0
 800d9e8:	9302      	str	r3, [sp, #8]
 800d9ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d9ec:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d9ee:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d9f0:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d9f2:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d9f4:	481d      	ldr	r0, [pc, #116]	; (800da6c <HAL_UART_MspInit+0x1e0>)
 800d9f6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d9f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9fa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9fc:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d9fe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800da00:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800da02:	f003 fc97 	bl	8011334 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800da06:	2380      	movs	r3, #128	; 0x80
 800da08:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800da0a:	4818      	ldr	r0, [pc, #96]	; (800da6c <HAL_UART_MspInit+0x1e0>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800da0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da0e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da10:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da12:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800da14:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800da16:	a905      	add	r1, sp, #20
 800da18:	e777      	b.n	800d90a <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800da1a:	2080      	movs	r0, #128	; 0x80
 800da1c:	4a12      	ldr	r2, [pc, #72]	; (800da68 <HAL_UART_MspInit+0x1dc>)
 800da1e:	0340      	lsls	r0, r0, #13
 800da20:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da22:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800da24:	4301      	orrs	r1, r0
 800da26:	61d1      	str	r1, [r2, #28]
 800da28:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da2a:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800da2c:	4003      	ands	r3, r0
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da32:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800da34:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800da36:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800da38:	480c      	ldr	r0, [pc, #48]	; (800da6c <HAL_UART_MspInit+0x1e0>)
 800da3a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800da3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da3e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da40:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da42:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800da44:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800da46:	f003 fc75 	bl	8011334 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800da4a:	2310      	movs	r3, #16
 800da4c:	e7dd      	b.n	800da0a <HAL_UART_MspInit+0x17e>
 800da4e:	46c0      	nop			; (mov r8, r8)
 800da50:	40013800 	.word	0x40013800
 800da54:	40004400 	.word	0x40004400
 800da58:	40004800 	.word	0x40004800
 800da5c:	40004c00 	.word	0x40004c00
 800da60:	40005000 	.word	0x40005000
 800da64:	40011400 	.word	0x40011400
 800da68:	40021000 	.word	0x40021000
 800da6c:	48000400 	.word	0x48000400

0800da70 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	46ce      	mov	lr, r9
 800da74:	4647      	mov	r7, r8
 800da76:	1e44      	subs	r4, r0, #1
 800da78:	b2e4      	uxtb	r4, r4
 800da7a:	000d      	movs	r5, r1
 800da7c:	0016      	movs	r6, r2
 800da7e:	0019      	movs	r1, r3
 800da80:	b580      	push	{r7, lr}
 800da82:	2c04      	cmp	r4, #4
 800da84:	d80f      	bhi.n	800daa6 <writePxMutex+0x36>
 800da86:	4a13      	ldr	r2, [pc, #76]	; (800dad4 <writePxMutex+0x64>)
 800da88:	00a4      	lsls	r4, r4, #2
 800da8a:	58a7      	ldr	r7, [r4, r2]
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800da8c:	2f00      	cmp	r7, #0
 800da8e:	d00a      	beq.n	800daa6 <writePxMutex+0x36>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800da90:	4b11      	ldr	r3, [pc, #68]	; (800dad8 <writePxMutex+0x68>)
 800da92:	4698      	mov	r8, r3
 800da94:	0083      	lsls	r3, r0, #2
 800da96:	4699      	mov	r9, r3
 800da98:	4643      	mov	r3, r8
 800da9a:	464a      	mov	r2, r9
 800da9c:	5898      	ldr	r0, [r3, r2]
 800da9e:	f000 f9e5 	bl	800de6c <osSemaphoreWait>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d007      	beq.n	800dab6 <writePxMutex+0x46>
	HAL_StatusTypeDef result = HAL_ERROR;
 800daa6:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800daa8:	0020      	movs	r0, r4
 800daaa:	bcc0      	pop	{r6, r7}
 800daac:	46b9      	mov	r9, r7
 800daae:	46b0      	mov	r8, r6
 800dab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dab2:	2803      	cmp	r0, #3
 800dab4:	d007      	beq.n	800dac6 <writePxMutex+0x56>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800dab6:	0032      	movs	r2, r6
 800dab8:	0029      	movs	r1, r5
 800daba:	0038      	movs	r0, r7
 800dabc:	9b08      	ldr	r3, [sp, #32]
 800dabe:	f005 fb75 	bl	80131ac <HAL_UART_Transmit>
 800dac2:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dac4:	d1f5      	bne.n	800dab2 <writePxMutex+0x42>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dac6:	4643      	mov	r3, r8
 800dac8:	464a      	mov	r2, r9
 800daca:	5898      	ldr	r0, [r3, r2]
 800dacc:	f000 f9f6 	bl	800debc <osSemaphoreRelease>
 800dad0:	e7ea      	b.n	800daa8 <writePxMutex+0x38>
 800dad2:	46c0      	nop			; (mov r8, r8)
 800dad4:	0801a2e0 	.word	0x0801a2e0
 800dad8:	20001f08 	.word	0x20001f08

0800dadc <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	1e44      	subs	r4, r0, #1
 800dae0:	b2e4      	uxtb	r4, r4
 800dae2:	000d      	movs	r5, r1
 800dae4:	0016      	movs	r6, r2
 800dae6:	0019      	movs	r1, r3
 800dae8:	2c04      	cmp	r4, #4
 800daea:	d80b      	bhi.n	800db04 <writePxITMutex+0x28>
 800daec:	4a09      	ldr	r2, [pc, #36]	; (800db14 <writePxITMutex+0x38>)
 800daee:	00a4      	lsls	r4, r4, #2
 800daf0:	58a4      	ldr	r4, [r4, r2]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	d006      	beq.n	800db04 <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800daf6:	4a08      	ldr	r2, [pc, #32]	; (800db18 <writePxITMutex+0x3c>)
 800daf8:	0080      	lsls	r0, r0, #2
 800dafa:	5880      	ldr	r0, [r0, r2]
 800dafc:	f000 f9b6 	bl	800de6c <osSemaphoreWait>
 800db00:	2800      	cmp	r0, #0
 800db02:	d001      	beq.n	800db08 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800db04:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800db06:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800db08:	0032      	movs	r2, r6
 800db0a:	0029      	movs	r1, r5
 800db0c:	0020      	movs	r0, r4
 800db0e:	f005 f89b 	bl	8012c48 <HAL_UART_Transmit_IT>
 800db12:	e7f8      	b.n	800db06 <writePxITMutex+0x2a>
 800db14:	0801a2e0 	.word	0x0801a2e0
 800db18:	20001f08 	.word	0x20001f08

0800db1c <UpdateBaudrate>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800db1c:	3801      	subs	r0, #1
 800db1e:	b2c0      	uxtb	r0, r0
{
 800db20:	b510      	push	{r4, lr}
 800db22:	2804      	cmp	r0, #4
 800db24:	d807      	bhi.n	800db36 <UpdateBaudrate+0x1a>
}
 800db26:	4b05      	ldr	r3, [pc, #20]	; (800db3c <UpdateBaudrate+0x20>)
 800db28:	0080      	lsls	r0, r0, #2
 800db2a:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800db2c:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800db2e:	f005 fc09 	bl	8013344 <HAL_UART_Init>
}
 800db32:	2000      	movs	r0, #0
 800db34:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800db36:	2300      	movs	r3, #0
 800db38:	605b      	str	r3, [r3, #4]
 800db3a:	deff      	udf	#255	; 0xff
 800db3c:	0801a2e0 	.word	0x0801a2e0

0800db40 <GetUart>:
	switch (port)
 800db40:	3801      	subs	r0, #1
 800db42:	b2c3      	uxtb	r3, r0
{
 800db44:	2000      	movs	r0, #0
 800db46:	2b04      	cmp	r3, #4
 800db48:	d802      	bhi.n	800db50 <GetUart+0x10>
 800db4a:	4a02      	ldr	r2, [pc, #8]	; (800db54 <GetUart+0x14>)
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800db50:	4770      	bx	lr
 800db52:	46c0      	nop			; (mov r8, r8)
 800db54:	0801a2e0 	.word	0x0801a2e0

0800db58 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	0004      	movs	r4, r0
 800db5c:	000d      	movs	r5, r1
	if (huart != NULL) {
 800db5e:	2800      	cmp	r0, #0
 800db60:	d003      	beq.n	800db6a <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800db62:	2901      	cmp	r1, #1
 800db64:	d017      	beq.n	800db96 <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800db66:	2900      	cmp	r1, #0
 800db68:	d000      	beq.n	800db6c <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800db6c:	f7fc fde4 	bl	800a738 <GetPort>
 800db70:	2180      	movs	r1, #128	; 0x80
 800db72:	3801      	subs	r0, #1
 800db74:	0209      	lsls	r1, r1, #8
 800db76:	4101      	asrs	r1, r0
 800db78:	4b12      	ldr	r3, [pc, #72]	; (800dbc4 <SwapUartPins+0x6c>)
 800db7a:	4e13      	ldr	r6, [pc, #76]	; (800dbc8 <SwapUartPins+0x70>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);		
 800db7e:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800db80:	3b01      	subs	r3, #1
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	5b9a      	ldrh	r2, [r3, r6]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800db86:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800db88:	438a      	bics	r2, r1
 800db8a:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800db8c:	2308      	movs	r3, #8
 800db8e:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800db90:	f005 fbd8 	bl	8013344 <HAL_UART_Init>
}
 800db94:	e7e9      	b.n	800db6a <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800db96:	f7fc fdcf 	bl	800a738 <GetPort>
 800db9a:	2180      	movs	r1, #128	; 0x80
 800db9c:	0209      	lsls	r1, r1, #8
 800db9e:	000a      	movs	r2, r1
 800dba0:	3801      	subs	r0, #1
 800dba2:	4102      	asrs	r2, r0
 800dba4:	4b07      	ldr	r3, [pc, #28]	; (800dbc4 <SwapUartPins+0x6c>)
 800dba6:	4d08      	ldr	r5, [pc, #32]	; (800dbc8 <SwapUartPins+0x70>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dbaa:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dbac:	3b01      	subs	r3, #1
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	5b58      	ldrh	r0, [r3, r5]
 800dbb2:	4302      	orrs	r2, r0
 800dbb4:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dbb6:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800dbb8:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dbba:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800dbbc:	f005 fbc2 	bl	8013344 <HAL_UART_Init>
 800dbc0:	e7d3      	b.n	800db6a <SwapUartPins+0x12>
 800dbc2:	46c0      	nop			; (mov r8, r8)
 800dbc4:	20000aa8 	.word	0x20000aa8
 800dbc8:	200029e4 	.word	0x200029e4

0800dbcc <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbce:	46c6      	mov	lr, r8
 800dbd0:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800dbd2:	4d11      	ldr	r5, [pc, #68]	; (800dc18 <ReadPortsDir+0x4c>)
 800dbd4:	782f      	ldrb	r7, [r5, #0]
 800dbd6:	2f00      	cmp	r7, #0
 800dbd8:	d019      	beq.n	800dc0e <ReadPortsDir+0x42>
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800dbda:	4b10      	ldr	r3, [pc, #64]	; (800dc1c <ReadPortsDir+0x50>)
	for (uint8_t i = 1; i <= N; i++) {
 800dbdc:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800dbde:	2700      	movs	r7, #0
			if (responseStatus != BOS_OK) {
 800dbe0:	4698      	mov	r8, r3
 800dbe2:	4e0f      	ldr	r6, [pc, #60]	; (800dc20 <ReadPortsDir+0x54>)
		if (i != myID) {
 800dbe4:	7833      	ldrb	r3, [r6, #0]
 800dbe6:	42a3      	cmp	r3, r4
 800dbe8:	d00c      	beq.n	800dc04 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800dbea:	2200      	movs	r2, #0
 800dbec:	2113      	movs	r1, #19
 800dbee:	0020      	movs	r0, r4
 800dbf0:	f7fa fc26 	bl	8008440 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800dbf4:	2032      	movs	r0, #50	; 0x32
 800dbf6:	f7ff fdbf 	bl	800d778 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800dbfa:	4643      	mov	r3, r8
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d000      	beq.n	800dc04 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800dc02:	2702      	movs	r7, #2
	for (uint8_t i = 1; i <= N; i++) {
 800dc04:	3401      	adds	r4, #1
 800dc06:	782b      	ldrb	r3, [r5, #0]
 800dc08:	b2e4      	uxtb	r4, r4
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	d2ea      	bcs.n	800dbe4 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800dc0e:	0038      	movs	r0, r7
 800dc10:	bc80      	pop	{r7}
 800dc12:	46b8      	mov	r8, r7
 800dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	20000008 	.word	0x20000008
 800dc1c:	20000c74 	.word	0x20000c74
 800dc20:	20000aa8 	.word	0x20000aa8

0800dc24 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800dc24:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dc26:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800dc28:	4c0e      	ldr	r4, [pc, #56]	; (800dc64 <ReadPortsDirMSG+0x40>)
	for (int p = 1; p <= NumOfPorts; p++) {
 800dc2a:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dc2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
	uint16_t temp =0;
 800dc2e:	2200      	movs	r2, #0
 800dc30:	490d      	ldr	r1, [pc, #52]	; (800dc68 <ReadPortsDirMSG+0x44>)
			messageParams[temp++] = p;
 800dc32:	4e0e      	ldr	r6, [pc, #56]	; (800dc6c <ReadPortsDirMSG+0x48>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dc34:	022d      	lsls	r5, r5, #8
 800dc36:	42ac      	cmp	r4, r5
 800dc38:	d102      	bne.n	800dc40 <ReadPortsDirMSG+0x1c>
			messageParams[temp++] = p;
 800dc3a:	1c54      	adds	r4, r2, #1
 800dc3c:	54b3      	strb	r3, [r6, r2]
 800dc3e:	b2a2      	uxth	r2, r4
	for (int p = 1; p <= NumOfPorts; p++) {
 800dc40:	3301      	adds	r3, #1
 800dc42:	3104      	adds	r1, #4
 800dc44:	2b06      	cmp	r3, #6
 800dc46:	d007      	beq.n	800dc58 <ReadPortsDirMSG+0x34>
 800dc48:	680c      	ldr	r4, [r1, #0]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dc4a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800dc4c:	42ac      	cmp	r4, r5
 800dc4e:	d0f4      	beq.n	800dc3a <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800dc50:	3301      	adds	r3, #1
 800dc52:	3104      	adds	r1, #4
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d1f7      	bne.n	800dc48 <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800dc58:	2114      	movs	r1, #20
 800dc5a:	f7fa fbf1 	bl	8008440 <SendMessageToModule>
	return result;
}
 800dc5e:	2000      	movs	r0, #0
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	46c0      	nop			; (mov r8, r8)
 800dc64:	20002274 	.word	0x20002274
 800dc68:	0801a2e0 	.word	0x0801a2e0
 800dc6c:	20000b74 	.word	0x20000b74

0800dc70 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	4b2c      	ldr	r3, [pc, #176]	; (800dd24 <UpdateMyPortsDir+0xb4>)
 800dc74:	464e      	mov	r6, r9
 800dc76:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800dc78:	2380      	movs	r3, #128	; 0x80
 800dc7a:	021b      	lsls	r3, r3, #8
{
 800dc7c:	4657      	mov	r7, sl
 800dc7e:	4645      	mov	r5, r8
 800dc80:	46de      	mov	lr, fp
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800dc82:	4698      	mov	r8, r3
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dc84:	2308      	movs	r3, #8
{
 800dc86:	b5e0      	push	{r5, r6, r7, lr}
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dc88:	469a      	mov	sl, r3
{
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	4e26      	ldr	r6, [pc, #152]	; (800dd28 <UpdateMyPortsDir+0xb8>)
 800dc8e:	4c27      	ldr	r4, [pc, #156]	; (800dd2c <UpdateMyPortsDir+0xbc>)
 800dc90:	4f27      	ldr	r7, [pc, #156]	; (800dd30 <UpdateMyPortsDir+0xc0>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800dc92:	4642      	mov	r2, r8
 800dc94:	412a      	asrs	r2, r5
 800dc96:	464b      	mov	r3, r9
 800dc98:	0011      	movs	r1, r2
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	5afb      	ldrh	r3, [r7, r3]
 800dca2:	4019      	ands	r1, r3
 800dca4:	468b      	mov	fp, r1
 800dca6:	421a      	tst	r2, r3
 800dca8:	d11b      	bne.n	800dce2 <UpdateMyPortsDir+0x72>
	if (huart != NULL) {
 800dcaa:	2c00      	cmp	r4, #0
 800dcac:	d013      	beq.n	800dcd6 <UpdateMyPortsDir+0x66>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dcae:	0020      	movs	r0, r4
 800dcb0:	f7fc fd42 	bl	800a738 <GetPort>
 800dcb4:	4641      	mov	r1, r8
 800dcb6:	464b      	mov	r3, r9
 800dcb8:	3801      	subs	r0, #1
 800dcba:	4101      	asrs	r1, r0
 800dcbc:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);		
 800dcbe:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	5afa      	ldrh	r2, [r7, r3]
 800dcc6:	438a      	bics	r2, r1
 800dcc8:	52fa      	strh	r2, [r7, r3]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dcca:	4653      	mov	r3, sl
 800dccc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800dcce:	465b      	mov	r3, fp
 800dcd0:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800dcd2:	f005 fb37 	bl	8013344 <HAL_UART_Init>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800dcd6:	3501      	adds	r5, #1
 800dcd8:	3604      	adds	r6, #4
 800dcda:	2d05      	cmp	r5, #5
 800dcdc:	d01b      	beq.n	800dd16 <UpdateMyPortsDir+0xa6>
 800dcde:	6834      	ldr	r4, [r6, #0]
 800dce0:	e7d7      	b.n	800dc92 <UpdateMyPortsDir+0x22>
	if (huart != NULL) {
 800dce2:	2c00      	cmp	r4, #0
 800dce4:	d0f7      	beq.n	800dcd6 <UpdateMyPortsDir+0x66>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dce6:	0020      	movs	r0, r4
 800dce8:	f7fc fd26 	bl	800a738 <GetPort>
 800dcec:	4642      	mov	r2, r8
 800dcee:	464b      	mov	r3, r9
 800dcf0:	3801      	subs	r0, #1
 800dcf2:	4102      	asrs	r2, r0
 800dcf4:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);
 800dcf6:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	5af9      	ldrh	r1, [r7, r3]
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800dcfe:	3501      	adds	r5, #1
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dd00:	430a      	orrs	r2, r1
 800dd02:	52fa      	strh	r2, [r7, r3]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dd04:	4653      	mov	r3, sl
 800dd06:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dd08:	4643      	mov	r3, r8
 800dd0a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dd0c:	f005 fb1a 	bl	8013344 <HAL_UART_Init>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800dd10:	3604      	adds	r6, #4
 800dd12:	2d05      	cmp	r5, #5
 800dd14:	d1e3      	bne.n	800dcde <UpdateMyPortsDir+0x6e>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800dd16:	2000      	movs	r0, #0
 800dd18:	bcf0      	pop	{r4, r5, r6, r7}
 800dd1a:	46bb      	mov	fp, r7
 800dd1c:	46b2      	mov	sl, r6
 800dd1e:	46a9      	mov	r9, r5
 800dd20:	46a0      	mov	r8, r4
 800dd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd24:	20000aa8 	.word	0x20000aa8
 800dd28:	0801a2e0 	.word	0x0801a2e0
 800dd2c:	20002274 	.word	0x20002274
 800dd30:	200029e4 	.word	0x200029e4

0800dd34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dd34:	4816      	ldr	r0, [pc, #88]	; (800dd90 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800dd36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800dd38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800dd3a:	e003      	b.n	800dd44 <LoopCopyDataInit>

0800dd3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800dd3c:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800dd3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800dd40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800dd42:	3104      	adds	r1, #4

0800dd44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800dd44:	4814      	ldr	r0, [pc, #80]	; (800dd98 <LoopForever+0xc>)
  ldr r3, =_edata
 800dd46:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <LoopForever+0x10>)
  adds r2, r0, r1
 800dd48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800dd4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800dd4c:	d3f6      	bcc.n	800dd3c <CopyDataInit>
  ldr r2, =_sbss
 800dd4e:	4a14      	ldr	r2, [pc, #80]	; (800dda0 <LoopForever+0x14>)
  b LoopFillZerobss
 800dd50:	e002      	b.n	800dd58 <LoopFillZerobss>

0800dd52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800dd52:	2300      	movs	r3, #0
  str  r3, [r2]
 800dd54:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dd56:	3204      	adds	r2, #4

0800dd58 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800dd58:	4b12      	ldr	r3, [pc, #72]	; (800dda4 <LoopForever+0x18>)
  cmp r2, r3
 800dd5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800dd5c:	d3f9      	bcc.n	800dd52 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800dd5e:	4812      	ldr	r0, [pc, #72]	; (800dda8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800dd60:	4912      	ldr	r1, [pc, #72]	; (800ddac <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800dd62:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800dd64:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800dd66:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800dd68:	d005      	beq.n	800dd76 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800dd6a:	f000 f82b 	bl	800ddc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800dd6e:	f005 fcb3 	bl	80136d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dd72:	f005 fc39 	bl	80135e8 <main>

0800dd76 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800dd76:	480e      	ldr	r0, [pc, #56]	; (800ddb0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800dd78:	490e      	ldr	r1, [pc, #56]	; (800ddb4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800dd7a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800dd7c:	480e      	ldr	r0, [pc, #56]	; (800ddb8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800dd7e:	490d      	ldr	r1, [pc, #52]	; (800ddb4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800dd80:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800dd82:	480e      	ldr	r0, [pc, #56]	; (800ddbc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800dd84:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800dd86:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800dd88:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800dd8a:	4700      	bx	r0

0800dd8c <LoopForever>:


LoopForever:
    b LoopForever
 800dd8c:	e7fe      	b.n	800dd8c <LoopForever>
 800dd8e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800dd90:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800dd94:	0801d3dc 	.word	0x0801d3dc
  ldr r0, =_sdata
 800dd98:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800dd9c:	20000a84 	.word	0x20000a84
  ldr r2, =_sbss
 800dda0:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800dda4:	20006df0 	.word	0x20006df0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800dda8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800ddac:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ddb0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ddb4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ddb8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ddbc:	1fffd800 	.word	0x1fffd800

0800ddc0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ddc0:	e7fe      	b.n	800ddc0 <CEC_CAN_IRQHandler>
	...

0800ddc4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ddc4:	2101      	movs	r1, #1
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800ddc8:	4811      	ldr	r0, [pc, #68]	; (800de10 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	430a      	orrs	r2, r1
 800ddce:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	4002      	ands	r2, r0
 800ddd4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	480e      	ldr	r0, [pc, #56]	; (800de14 <SystemInit+0x50>)
 800ddda:	4002      	ands	r2, r0
 800dddc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	480d      	ldr	r0, [pc, #52]	; (800de18 <SystemInit+0x54>)
 800dde2:	4002      	ands	r2, r0
 800dde4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	480c      	ldr	r0, [pc, #48]	; (800de1c <SystemInit+0x58>)
 800ddea:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800ddec:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800ddee:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800ddf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf2:	4382      	bics	r2, r0
 800ddf4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800ddf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddf8:	4809      	ldr	r0, [pc, #36]	; (800de20 <SystemInit+0x5c>)
 800ddfa:	4002      	ands	r2, r0
 800ddfc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800ddfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de00:	438a      	bics	r2, r1
 800de02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800de04:	2200      	movs	r2, #0
 800de06:	609a      	str	r2, [r3, #8]

}
 800de08:	4770      	bx	lr
 800de0a:	46c0      	nop			; (mov r8, r8)
 800de0c:	40021000 	.word	0x40021000
 800de10:	08ffb80c 	.word	0x08ffb80c
 800de14:	fef6ffff 	.word	0xfef6ffff
 800de18:	fffbffff 	.word	0xfffbffff
 800de1c:	ffc0ffff 	.word	0xffc0ffff
 800de20:	fff0feac 	.word	0xfff0feac

0800de24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800de24:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800de26:	f000 ff01 	bl	800ec2c <vTaskStartScheduler>
  
  return osOK;
}
 800de2a:	2000      	movs	r0, #0
 800de2c:	bd10      	pop	{r4, pc}
 800de2e:	46c0      	nop			; (mov r8, r8)

0800de30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800de30:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800de32:	2800      	cmp	r0, #0
 800de34:	d100      	bne.n	800de38 <osDelay+0x8>
 800de36:	3001      	adds	r0, #1
 800de38:	f001 f822 	bl	800ee80 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800de3c:	2000      	movs	r0, #0
 800de3e:	bd10      	pop	{r4, pc}

0800de40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800de40:	0008      	movs	r0, r1
 800de42:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800de44:	2901      	cmp	r1, #1
 800de46:	d005      	beq.n	800de54 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800de48:	2100      	movs	r1, #0
 800de4a:	f000 facd 	bl	800e3e8 <xQueueCreateCountingSemaphore>
 800de4e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800de50:	0020      	movs	r0, r4
 800de52:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800de54:	2203      	movs	r2, #3
 800de56:	2100      	movs	r1, #0
 800de58:	f000 fa8c 	bl	800e374 <xQueueGenericCreate>
 800de5c:	1e04      	subs	r4, r0, #0
 800de5e:	d0f7      	beq.n	800de50 <osSemaphoreCreate+0x10>
 800de60:	2300      	movs	r3, #0
 800de62:	2200      	movs	r2, #0
 800de64:	2100      	movs	r1, #0
 800de66:	f000 faed 	bl	800e444 <xQueueGenericSend>
 800de6a:	e7f1      	b.n	800de50 <osSemaphoreCreate+0x10>

0800de6c <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800de6c:	2300      	movs	r3, #0
{
 800de6e:	b500      	push	{lr}
 800de70:	b083      	sub	sp, #12
 800de72:	000a      	movs	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800de74:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800de76:	2800      	cmp	r0, #0
 800de78:	d01c      	beq.n	800deb4 <osSemaphoreWait+0x48>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de7a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00b      	beq.n	800de9a <osSemaphoreWait+0x2e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800de82:	2100      	movs	r1, #0
 800de84:	aa01      	add	r2, sp, #4
 800de86:	f000 fc61 	bl	800e74c <xQueueReceiveFromISR>
 800de8a:	2801      	cmp	r0, #1
 800de8c:	d10b      	bne.n	800dea6 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800de8e:	9b01      	ldr	r3, [sp, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800de94:	2000      	movs	r0, #0
}
 800de96:	b003      	add	sp, #12
 800de98:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800de9a:	2300      	movs	r3, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	f000 fbb1 	bl	800e604 <xQueueGenericReceive>
 800dea2:	2801      	cmp	r0, #1
 800dea4:	d0f6      	beq.n	800de94 <osSemaphoreWait+0x28>
    return osErrorOS;
 800dea6:	20ff      	movs	r0, #255	; 0xff
 800dea8:	e7f5      	b.n	800de96 <osSemaphoreWait+0x2a>
	portEND_SWITCHING_ISR(taskWoken);
 800deaa:	2280      	movs	r2, #128	; 0x80
 800deac:	4b02      	ldr	r3, [pc, #8]	; (800deb8 <osSemaphoreWait+0x4c>)
 800deae:	0552      	lsls	r2, r2, #21
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	e7ef      	b.n	800de94 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800deb4:	2080      	movs	r0, #128	; 0x80
 800deb6:	e7ee      	b.n	800de96 <osSemaphoreWait+0x2a>
 800deb8:	e000ed04 	.word	0xe000ed04

0800debc <osSemaphoreRelease>:
 800debc:	2300      	movs	r3, #0
 800debe:	b500      	push	{lr}
 800dec0:	b083      	sub	sp, #12
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	f3ef 8305 	mrs	r3, IPSR
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00a      	beq.n	800dee2 <osSemaphoreRelease+0x26>
 800decc:	a901      	add	r1, sp, #4
 800dece:	f000 fb6f 	bl	800e5b0 <xQueueGiveFromISR>
 800ded2:	2801      	cmp	r0, #1
 800ded4:	d10c      	bne.n	800def0 <osSemaphoreRelease+0x34>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10b      	bne.n	800def4 <osSemaphoreRelease+0x38>
 800dedc:	2000      	movs	r0, #0
 800dede:	b003      	add	sp, #12
 800dee0:	bd00      	pop	{pc}
 800dee2:	2300      	movs	r3, #0
 800dee4:	2200      	movs	r2, #0
 800dee6:	2100      	movs	r1, #0
 800dee8:	f000 faac 	bl	800e444 <xQueueGenericSend>
 800deec:	2801      	cmp	r0, #1
 800deee:	d0f5      	beq.n	800dedc <osSemaphoreRelease+0x20>
 800def0:	20ff      	movs	r0, #255	; 0xff
 800def2:	e7f4      	b.n	800dede <osSemaphoreRelease+0x22>
 800def4:	2280      	movs	r2, #128	; 0x80
 800def6:	4b02      	ldr	r3, [pc, #8]	; (800df00 <osSemaphoreRelease+0x44>)
 800def8:	0552      	lsls	r2, r2, #21
 800defa:	601a      	str	r2, [r3, #0]
 800defc:	e7ee      	b.n	800dedc <osSemaphoreRelease+0x20>
 800defe:	46c0      	nop			; (mov r8, r8)
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800df04:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800df06:	f001 f91d 	bl	800f144 <xTaskGetSchedulerState>
 800df0a:	2801      	cmp	r0, #1
 800df0c:	d001      	beq.n	800df12 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800df0e:	f001 fd5f 	bl	800f9d0 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800df12:	bd10      	pop	{r4, pc}

0800df14 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	46ce      	mov	lr, r9
 800df18:	4647      	mov	r7, r8
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800df1a:	2300      	movs	r3, #0
{
 800df1c:	b580      	push	{r7, lr}
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800df1e:	56d3      	ldrsb	r3, [r2, r3]
{
 800df20:	0004      	movs	r4, r0
 800df22:	000d      	movs	r5, r1
 800df24:	0010      	movs	r0, r2
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800df26:	2b00      	cmp	r3, #0
 800df28:	d006      	beq.n	800df38 <prvHelpCommand+0x24>
 800df2a:	2b20      	cmp	r3, #32
 800df2c:	d02e      	beq.n	800df8c <prvHelpCommand+0x78>
 800df2e:	2300      	movs	r3, #0
			pcCommandString++;
 800df30:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800df32:	56c3      	ldrsb	r3, [r0, r3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1f8      	bne.n	800df2a <prvHelpCommand+0x16>
		}		
	}
	/* List CLI Commands */
	else if (pcParameterString1 == NULL)
	{		
		if( pxCommand == NULL )
 800df38:	4f3e      	ldr	r7, [pc, #248]	; (800e034 <prvHelpCommand+0x120>)
 800df3a:	687e      	ldr	r6, [r7, #4]
 800df3c:	2e00      	cmp	r6, #0
 800df3e:	d100      	bne.n	800df42 <prvHelpCommand+0x2e>
 800df40:	e06f      	b.n	800e022 <prvHelpCommand+0x10e>
			counter = 1;
		}

		/* Return the next command help string, before moving the pointer on to
		the next command in the list. */	
		if (counter > numOfBosCommands) {
 800df42:	7a3b      	ldrb	r3, [r7, #8]
		} else {
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
		}				
				
		pxCommand = pxCommand->pxNext;
		counter++;
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	b2d2      	uxtb	r2, r2
 800df48:	4690      	mov	r8, r2
		if (counter > numOfBosCommands) {
 800df4a:	4a3b      	ldr	r2, [pc, #236]	; (800e038 <prvHelpCommand+0x124>)
 800df4c:	7812      	ldrb	r2, [r2, #0]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d260      	bcs.n	800e014 <prvHelpCommand+0x100>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800df52:	002a      	movs	r2, r5
 800df54:	0020      	movs	r0, r4
 800df56:	6833      	ldr	r3, [r6, #0]
 800df58:	3a08      	subs	r2, #8
 800df5a:	6859      	ldr	r1, [r3, #4]
 800df5c:	3008      	adds	r0, #8
 800df5e:	f006 f862 	bl	8014026 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800df62:	4936      	ldr	r1, [pc, #216]	; (800e03c <prvHelpCommand+0x128>)
 800df64:	1c60      	adds	r0, r4, #1
 800df66:	f006 f844 	bl	8013ff2 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800df6a:	2328      	movs	r3, #40	; 0x28
 800df6c:	7023      	strb	r3, [r4, #0]
 800df6e:	3301      	adds	r3, #1
 800df70:	71a3      	strb	r3, [r4, #6]
 800df72:	3b09      	subs	r3, #9
 800df74:	71e3      	strb	r3, [r4, #7]
		counter++;
 800df76:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800df78:	6876      	ldr	r6, [r6, #4]
		counter++;
 800df7a:	723b      	strb	r3, [r7, #8]
		pxCommand = pxCommand->pxNext;
 800df7c:	607e      	str	r6, [r7, #4]
			xReturn = pdTRUE;
 800df7e:	1e73      	subs	r3, r6, #1
 800df80:	419e      	sbcs	r6, r3
			xReturn = pdTRUE;
		}
	}

	return xReturn;
}
 800df82:	0030      	movs	r0, r6
 800df84:	bcc0      	pop	{r6, r7}
 800df86:	46b9      	mov	r9, r7
 800df88:	46b0      	mov	r8, r6
 800df8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800df8c:	2300      	movs	r3, #0
 800df8e:	56c3      	ldrsb	r3, [r0, r3]
 800df90:	2b20      	cmp	r3, #32
 800df92:	d104      	bne.n	800df9e <prvHelpCommand+0x8a>
 800df94:	2300      	movs	r3, #0
			pcCommandString++;
 800df96:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800df98:	56c3      	ldrsb	r3, [r0, r3]
 800df9a:	2b20      	cmp	r3, #32
 800df9c:	d0fa      	beq.n	800df94 <prvHelpCommand+0x80>
		if( *pcCommandString != 0x00 )
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0ca      	beq.n	800df38 <prvHelpCommand+0x24>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	56c3      	ldrsb	r3, [r0, r3]
	*pxParameterStringLength = 0;
 800dfa6:	2200      	movs	r2, #0
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d104      	bne.n	800dfb6 <prvHelpCommand+0xa2>
 800dfac:	e7c4      	b.n	800df38 <prvHelpCommand+0x24>
					( *pxParameterStringLength )++;
 800dfae:	3201      	adds	r2, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dfb0:	5683      	ldrsb	r3, [r0, r2]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d003      	beq.n	800dfbe <prvHelpCommand+0xaa>
 800dfb6:	2b20      	cmp	r3, #32
 800dfb8:	d1f9      	bne.n	800dfae <prvHelpCommand+0x9a>
				if( *pxParameterStringLength == 0 )
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	d0bc      	beq.n	800df38 <prvHelpCommand+0x24>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800dfbe:	2206      	movs	r2, #6
 800dfc0:	491f      	ldr	r1, [pc, #124]	; (800e040 <prvHelpCommand+0x12c>)
 800dfc2:	f006 f81e 	bl	8014002 <strncmp>
 800dfc6:	1e07      	subs	r7, r0, #0
 800dfc8:	d1db      	bne.n	800df82 <prvHelpCommand+0x6e>
		if( str == NumOfParamsHelpStrings )
 800dfca:	4b1a      	ldr	r3, [pc, #104]	; (800e034 <prvHelpCommand+0x120>)
 800dfcc:	4698      	mov	r8, r3
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b07      	cmp	r3, #7
 800dfd2:	d014      	beq.n	800dffe <prvHelpCommand+0xea>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	b2d2      	uxtb	r2, r2
 800dfd8:	4691      	mov	r9, r2
 800dfda:	4642      	mov	r2, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	7011      	strb	r1, [r2, #0]
 800dfe0:	4a18      	ldr	r2, [pc, #96]	; (800e044 <prvHelpCommand+0x130>)
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	5899      	ldr	r1, [r3, r2]
 800dfe6:	0020      	movs	r0, r4
 800dfe8:	002a      	movs	r2, r5
 800dfea:	f006 f81c 	bl	8014026 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800dfee:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800dff0:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800dff2:	2b07      	cmp	r3, #7
 800dff4:	d1c5      	bne.n	800df82 <prvHelpCommand+0x6e>
			xReturn = pdFALSE; str = 0;
 800dff6:	4643      	mov	r3, r8
 800dff8:	2600      	movs	r6, #0
 800dffa:	701f      	strb	r7, [r3, #0]
 800dffc:	e7c1      	b.n	800df82 <prvHelpCommand+0x6e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dffe:	4642      	mov	r2, r8
 800e000:	3b06      	subs	r3, #6
 800e002:	7013      	strb	r3, [r2, #0]
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <prvHelpCommand+0x130>)
 800e006:	002a      	movs	r2, r5
 800e008:	0020      	movs	r0, r4
 800e00a:	6819      	ldr	r1, [r3, #0]
 800e00c:	f006 f80b 	bl	8014026 <strncpy>
			xReturn = pdTRUE;
 800e010:	2601      	movs	r6, #1
 800e012:	e7b6      	b.n	800df82 <prvHelpCommand+0x6e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e014:	6833      	ldr	r3, [r6, #0]
 800e016:	002a      	movs	r2, r5
 800e018:	0020      	movs	r0, r4
 800e01a:	6859      	ldr	r1, [r3, #4]
 800e01c:	f006 f803 	bl	8014026 <strncpy>
 800e020:	e7a9      	b.n	800df76 <prvHelpCommand+0x62>
			counter = 1;
 800e022:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800e024:	4e08      	ldr	r6, [pc, #32]	; (800e048 <prvHelpCommand+0x134>)
			counter = 1;
 800e026:	723b      	strb	r3, [r7, #8]
 800e028:	3301      	adds	r3, #1
 800e02a:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800e02c:	607e      	str	r6, [r7, #4]
			counter = 1;
 800e02e:	3b01      	subs	r3, #1
 800e030:	e78b      	b.n	800df4a <prvHelpCommand+0x36>
 800e032:	46c0      	nop			; (mov r8, r8)
 800e034:	20002a18 	.word	0x20002a18
 800e038:	200011ec 	.word	0x200011ec
 800e03c:	08019db6 	.word	0x08019db6
 800e040:	0801b668 	.word	0x0801b668
 800e044:	20000034 	.word	0x20000034
 800e048:	200000bc 	.word	0x200000bc

0800e04c <FreeRTOS_CLIRegisterCommand>:
{
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e050:	2008      	movs	r0, #8
 800e052:	f001 fcf5 	bl	800fa40 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800e056:	2600      	movs	r6, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e058:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800e05a:	d00a      	beq.n	800e072 <FreeRTOS_CLIRegisterCommand+0x26>
		taskENTER_CRITICAL();
 800e05c:	f001 fc76 	bl	800f94c <vPortEnterCritical>
			pxLastCommandInList->pxNext = pxNewListItem;
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800e062:	6066      	str	r6, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e064:	689a      	ldr	r2, [r3, #8]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e066:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e068:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e06a:	609c      	str	r4, [r3, #8]
		taskEXIT_CRITICAL();
 800e06c:	f001 fc7a 	bl	800f964 <vPortExitCritical>
		xReturn = pdPASS;
 800e070:	3601      	adds	r6, #1
}
 800e072:	0030      	movs	r0, r6
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	46c0      	nop			; (mov r8, r8)
 800e078:	200000bc 	.word	0x200000bc

0800e07c <FreeRTOS_CLIProcessCommand>:
{
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	4657      	mov	r7, sl
 800e080:	464e      	mov	r6, r9
 800e082:	4645      	mov	r5, r8
 800e084:	46de      	mov	lr, fp
 800e086:	b5e0      	push	{r5, r6, r7, lr}
	if( pxCommand == NULL )
 800e088:	4b39      	ldr	r3, [pc, #228]	; (800e170 <FreeRTOS_CLIProcessCommand+0xf4>)
{
 800e08a:	b083      	sub	sp, #12
	if( pxCommand == NULL )
 800e08c:	4698      	mov	r8, r3
 800e08e:	68db      	ldr	r3, [r3, #12]
{
 800e090:	0006      	movs	r6, r0
 800e092:	4692      	mov	sl, r2
 800e094:	9101      	str	r1, [sp, #4]
	if( pxCommand == NULL )
 800e096:	2b00      	cmp	r3, #0
 800e098:	d011      	beq.n	800e0be <FreeRTOS_CLIProcessCommand+0x42>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	0032      	movs	r2, r6
 800e09e:	4651      	mov	r1, sl
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	9801      	ldr	r0, [sp, #4]
 800e0a4:	4798      	blx	r3
 800e0a6:	1e05      	subs	r5, r0, #0
		if( xReturn == pdFALSE )
 800e0a8:	d101      	bne.n	800e0ae <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
 800e0aa:	4643      	mov	r3, r8
 800e0ac:	60d8      	str	r0, [r3, #12]
}
 800e0ae:	0028      	movs	r0, r5
 800e0b0:	b003      	add	sp, #12
 800e0b2:	bcf0      	pop	{r4, r5, r6, r7}
 800e0b4:	46bb      	mov	fp, r7
 800e0b6:	46b2      	mov	sl, r6
 800e0b8:	46a9      	mov	r9, r5
 800e0ba:	46a0      	mov	r8, r4
 800e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e0be:	4643      	mov	r3, r8
 800e0c0:	4c2c      	ldr	r4, [pc, #176]	; (800e174 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e0c2:	60dc      	str	r4, [r3, #12]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	469b      	mov	fp, r3
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e0c8:	6827      	ldr	r7, [r4, #0]
 800e0ca:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e0cc:	0028      	movs	r0, r5
 800e0ce:	f7f2 f823 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e0d2:	4659      	mov	r1, fp
 800e0d4:	5c33      	ldrb	r3, [r6, r0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e0d6:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e0d8:	438b      	bics	r3, r1
 800e0da:	b259      	sxtb	r1, r3
 800e0dc:	4689      	mov	r9, r1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d105      	bne.n	800e0ee <FreeRTOS_CLIProcessCommand+0x72>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e0e2:	0029      	movs	r1, r5
 800e0e4:	0030      	movs	r0, r6
 800e0e6:	f005 ff8c 	bl	8014002 <strncmp>
 800e0ea:	1e05      	subs	r5, r0, #0
 800e0ec:	d00b      	beq.n	800e106 <FreeRTOS_CLIProcessCommand+0x8a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e0ee:	4643      	mov	r3, r8
 800e0f0:	6864      	ldr	r4, [r4, #4]
 800e0f2:	60dc      	str	r4, [r3, #12]
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	d1e7      	bne.n	800e0c8 <FreeRTOS_CLIProcessCommand+0x4c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e0f8:	4652      	mov	r2, sl
 800e0fa:	491f      	ldr	r1, [pc, #124]	; (800e178 <FreeRTOS_CLIProcessCommand+0xfc>)
 800e0fc:	9801      	ldr	r0, [sp, #4]
 800e0fe:	f005 ff92 	bl	8014026 <strncpy>
		xReturn = pdFALSE;
 800e102:	2500      	movs	r5, #0
	return xReturn;
 800e104:	e7d3      	b.n	800e0ae <FreeRTOS_CLIProcessCommand+0x32>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e106:	200c      	movs	r0, #12
 800e108:	5638      	ldrsb	r0, [r7, r0]
 800e10a:	2800      	cmp	r0, #0
 800e10c:	da04      	bge.n	800e118 <FreeRTOS_CLIProcessCommand+0x9c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e10e:	4643      	mov	r3, r8
 800e110:	68db      	ldr	r3, [r3, #12]
	else if( pxCommand != NULL )
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0f0      	beq.n	800e0f8 <FreeRTOS_CLIProcessCommand+0x7c>
 800e116:	e7c0      	b.n	800e09a <FreeRTOS_CLIProcessCommand+0x1e>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e118:	2300      	movs	r3, #0
 800e11a:	56f3      	ldrsb	r3, [r6, r3]
 800e11c:	0032      	movs	r2, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e11e:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800e120:	2b00      	cmp	r3, #0
 800e122:	d106      	bne.n	800e132 <FreeRTOS_CLIProcessCommand+0xb6>
 800e124:	e015      	b.n	800e152 <FreeRTOS_CLIProcessCommand+0xd6>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e126:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800e128:	2300      	movs	r3, #0
		}

		pcCommandString++;
 800e12a:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e12c:	56d3      	ldrsb	r3, [r2, r3]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d009      	beq.n	800e146 <FreeRTOS_CLIProcessCommand+0xca>
		if( ( *pcCommandString ) == ' ' )
 800e132:	2b20      	cmp	r3, #32
 800e134:	d1f7      	bne.n	800e126 <FreeRTOS_CLIProcessCommand+0xaa>
			if( xLastCharacterWasSpace != pdTRUE )
 800e136:	2901      	cmp	r1, #1
 800e138:	d0f6      	beq.n	800e128 <FreeRTOS_CLIProcessCommand+0xac>
				cParameters++;
 800e13a:	464b      	mov	r3, r9
 800e13c:	3301      	adds	r3, #1
 800e13e:	b25b      	sxtb	r3, r3
 800e140:	4699      	mov	r9, r3
				xLastCharacterWasSpace = pdTRUE;
 800e142:	2101      	movs	r1, #1
 800e144:	e7f0      	b.n	800e128 <FreeRTOS_CLIProcessCommand+0xac>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e146:	2901      	cmp	r1, #1
 800e148:	d103      	bne.n	800e152 <FreeRTOS_CLIProcessCommand+0xd6>
	{
		cParameters--;
 800e14a:	464b      	mov	r3, r9
 800e14c:	3b01      	subs	r3, #1
 800e14e:	b25b      	sxtb	r3, r3
 800e150:	4699      	mov	r9, r3
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e152:	4548      	cmp	r0, r9
 800e154:	d0db      	beq.n	800e10e <FreeRTOS_CLIProcessCommand+0x92>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e156:	4643      	mov	r3, r8
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0cc      	beq.n	800e0f8 <FreeRTOS_CLIProcessCommand+0x7c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e15e:	4652      	mov	r2, sl
 800e160:	4906      	ldr	r1, [pc, #24]	; (800e17c <FreeRTOS_CLIProcessCommand+0x100>)
 800e162:	9801      	ldr	r0, [sp, #4]
 800e164:	f005 ff5f 	bl	8014026 <strncpy>
		pxCommand = NULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	4642      	mov	r2, r8
 800e16c:	60d3      	str	r3, [r2, #12]
 800e16e:	e79e      	b.n	800e0ae <FreeRTOS_CLIProcessCommand+0x32>
 800e170:	20002a18 	.word	0x20002a18
 800e174:	200000bc 	.word	0x200000bc
 800e178:	0801ce30 	.word	0x0801ce30
 800e17c:	0801cdd8 	.word	0x0801cdd8

0800e180 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e180:	4800      	ldr	r0, [pc, #0]	; (800e184 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e182:	4770      	bx	lr
 800e184:	20002a28 	.word	0x20002a28

0800e188 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800e188:	2300      	movs	r3, #0
{
 800e18a:	b510      	push	{r4, lr}
 800e18c:	0014      	movs	r4, r2
	*pxParameterStringLength = 0;
 800e18e:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e190:	2200      	movs	r2, #0
	while( uxParametersFound < uxWantedParameter )
 800e192:	428a      	cmp	r2, r1
 800e194:	d103      	bne.n	800e19e <FreeRTOS_CLIGetParameter+0x16>
 800e196:	e006      	b.n	800e1a6 <FreeRTOS_CLIGetParameter+0x1e>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e198:	2b20      	cmp	r3, #32
 800e19a:	d007      	beq.n	800e1ac <FreeRTOS_CLIGetParameter+0x24>
			pcCommandString++;
 800e19c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e19e:	2300      	movs	r3, #0
 800e1a0:	56c3      	ldrsb	r3, [r0, r3]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1f8      	bne.n	800e198 <FreeRTOS_CLIGetParameter+0x10>
const int8_t *pcReturn = NULL;
 800e1a6:	2000      	movs	r0, #0
}
 800e1a8:	bd10      	pop	{r4, pc}
			pcCommandString++;
 800e1aa:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	56c3      	ldrsb	r3, [r0, r3]
 800e1b0:	2b20      	cmp	r3, #32
 800e1b2:	d0fa      	beq.n	800e1aa <FreeRTOS_CLIGetParameter+0x22>
		if( *pcCommandString != 0x00 )
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d0f6      	beq.n	800e1a6 <FreeRTOS_CLIGetParameter+0x1e>
			uxParametersFound++;
 800e1b8:	3201      	adds	r2, #1
			if( uxParametersFound == uxWantedParameter )
 800e1ba:	4291      	cmp	r1, r2
 800e1bc:	d1e9      	bne.n	800e192 <FreeRTOS_CLIGetParameter+0xa>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1be:	2100      	movs	r1, #0
 800e1c0:	5641      	ldrsb	r1, [r0, r1]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	2900      	cmp	r1, #0
 800e1c6:	d105      	bne.n	800e1d4 <FreeRTOS_CLIGetParameter+0x4c>
 800e1c8:	e7ed      	b.n	800e1a6 <FreeRTOS_CLIGetParameter+0x1e>
					( *pxParameterStringLength )++;
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	6023      	str	r3, [r4, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1ce:	56c1      	ldrsb	r1, [r0, r3]
 800e1d0:	2900      	cmp	r1, #0
 800e1d2:	d0e9      	beq.n	800e1a8 <FreeRTOS_CLIGetParameter+0x20>
 800e1d4:	2920      	cmp	r1, #32
 800e1d6:	d1f8      	bne.n	800e1ca <FreeRTOS_CLIGetParameter+0x42>
				if( *pxParameterStringLength == 0 )
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1e5      	bne.n	800e1a8 <FreeRTOS_CLIGetParameter+0x20>
 800e1dc:	e7e3      	b.n	800e1a6 <FreeRTOS_CLIGetParameter+0x1e>
 800e1de:	46c0      	nop			; (mov r8, r8)

0800e1e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1e0:	0003      	movs	r3, r0
 800e1e2:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1e4:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1e6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1ec:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1ee:	4252      	negs	r2, r2
 800e1f0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1f2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e1f4:	4770      	bx	lr
 800e1f6:	46c0      	nop			; (mov r8, r8)

0800e1f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1fc:	4770      	bx	lr
 800e1fe:	46c0      	nop			; (mov r8, r8)

0800e200 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e200:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e202:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e204:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e206:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e208:	689a      	ldr	r2, [r3, #8]
 800e20a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e20c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e20e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e210:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e212:	3301      	adds	r3, #1
 800e214:	6003      	str	r3, [r0, #0]
}
 800e216:	4770      	bx	lr

0800e218 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e218:	0003      	movs	r3, r0
{
 800e21a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e21c:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e21e:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e220:	1c62      	adds	r2, r4, #1
 800e222:	d00d      	beq.n	800e240 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e224:	001a      	movs	r2, r3
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	681d      	ldr	r5, [r3, #0]
 800e22a:	42a5      	cmp	r5, r4
 800e22c:	d9fa      	bls.n	800e224 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e22e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e230:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e232:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800e234:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800e236:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800e238:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e23a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e23c:	6003      	str	r3, [r0, #0]
}
 800e23e:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e240:	6902      	ldr	r2, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800e242:	6853      	ldr	r3, [r2, #4]
 800e244:	e7f3      	b.n	800e22e <vListInsert+0x16>
 800e246:	46c0      	nop			; (mov r8, r8)

0800e248 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e248:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e24a:	6841      	ldr	r1, [r0, #4]
 800e24c:	6882      	ldr	r2, [r0, #8]
 800e24e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e250:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e252:	6859      	ldr	r1, [r3, #4]
 800e254:	4281      	cmp	r1, r0
 800e256:	d005      	beq.n	800e264 <uxListRemove+0x1c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e258:	2200      	movs	r2, #0
 800e25a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	1e50      	subs	r0, r2, #1
 800e260:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e262:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e264:	605a      	str	r2, [r3, #4]
 800e266:	e7f7      	b.n	800e258 <uxListRemove+0x10>

0800e268 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e26c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e26e:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e270:	2a00      	cmp	r2, #0
 800e272:	d107      	bne.n	800e284 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e274:	6805      	ldr	r5, [r0, #0]
 800e276:	2d00      	cmp	r5, #0
 800e278:	d02d      	beq.n	800e2d6 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800e27a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e27c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e27e:	3301      	adds	r3, #1
 800e280:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e282:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e284:	2d00      	cmp	r5, #0
 800e286:	d10e      	bne.n	800e2a6 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e288:	6880      	ldr	r0, [r0, #8]
 800e28a:	f005 fc7d 	bl	8013b88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e28e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e294:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e296:	4463      	add	r3, ip
 800e298:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d3ed      	bcc.n	800e27a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e29e:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800e2a0:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2a2:	60a3      	str	r3, [r4, #8]
 800e2a4:	e7ea      	b.n	800e27c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2a6:	68c0      	ldr	r0, [r0, #12]
 800e2a8:	f005 fc6e 	bl	8013b88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e2ac:	68e1      	ldr	r1, [r4, #12]
 800e2ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e2b0:	425a      	negs	r2, r3
 800e2b2:	1acb      	subs	r3, r1, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2b4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e2b6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2b8:	428b      	cmp	r3, r1
 800e2ba:	d203      	bcs.n	800e2c4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e2bc:	6863      	ldr	r3, [r4, #4]
 800e2be:	469c      	mov	ip, r3
 800e2c0:	4462      	add	r2, ip
 800e2c2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e2c4:	2d02      	cmp	r5, #2
 800e2c6:	d1d8      	bne.n	800e27a <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d0d5      	beq.n	800e27a <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800e2ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	63a3      	str	r3, [r4, #56]	; 0x38
 800e2d4:	e7d1      	b.n	800e27a <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e2d6:	6840      	ldr	r0, [r0, #4]
 800e2d8:	f000 ff74 	bl	800f1c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e2dc:	6065      	str	r5, [r4, #4]
 800e2de:	e7cd      	b.n	800e27c <prvCopyDataToQueue+0x14>

0800e2e0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e2e4:	f001 fb32 	bl	800f94c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e2e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	dd18      	ble.n	800e320 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2ee:	0025      	movs	r5, r4
 800e2f0:	3524      	adds	r5, #36	; 0x24
 800e2f2:	e005      	b.n	800e300 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800e2f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e2fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dd0f      	ble.n	800e320 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00c      	beq.n	800e320 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e306:	0028      	movs	r0, r5
 800e308:	f000 fea8 	bl	800f05c <xTaskRemoveFromEventList>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0f1      	beq.n	800e2f4 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800e310:	f000 ff12 	bl	800f138 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e314:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e316:	3b01      	subs	r3, #1
 800e318:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e31a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dcef      	bgt.n	800e300 <prvUnlockQueue+0x20>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e320:	2301      	movs	r3, #1
 800e322:	425b      	negs	r3, r3
 800e324:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e326:	f001 fb1d 	bl	800f964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e32a:	f001 fb0f 	bl	800f94c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e32e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e330:	2b00      	cmp	r3, #0
 800e332:	dd18      	ble.n	800e366 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e334:	0025      	movs	r5, r4
 800e336:	3510      	adds	r5, #16
 800e338:	e005      	b.n	800e346 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800e33a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e33c:	3b01      	subs	r3, #1
 800e33e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e342:	2b00      	cmp	r3, #0
 800e344:	dd0f      	ble.n	800e366 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e346:	6923      	ldr	r3, [r4, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00c      	beq.n	800e366 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e34c:	0028      	movs	r0, r5
 800e34e:	f000 fe85 	bl	800f05c <xTaskRemoveFromEventList>
 800e352:	2800      	cmp	r0, #0
 800e354:	d0f1      	beq.n	800e33a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800e356:	f000 feef 	bl	800f138 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e35a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e35c:	3b01      	subs	r3, #1
 800e35e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e362:	2b00      	cmp	r3, #0
 800e364:	dcef      	bgt.n	800e346 <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e366:	2301      	movs	r3, #1
 800e368:	425b      	negs	r3, r3
 800e36a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e36c:	f001 fafa 	bl	800f964 <vPortExitCritical>
}
 800e370:	bd70      	pop	{r4, r5, r6, pc}
 800e372:	46c0      	nop			; (mov r8, r8)

0800e374 <xQueueGenericCreate>:
{
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	0007      	movs	r7, r0
 800e378:	000d      	movs	r5, r1
 800e37a:	0016      	movs	r6, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e37c:	2900      	cmp	r1, #0
 800e37e:	d009      	beq.n	800e394 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e380:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e382:	3055      	adds	r0, #85	; 0x55
 800e384:	f001 fb5c 	bl	800fa40 <pvPortMalloc>
 800e388:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e38a:	d02b      	beq.n	800e3e4 <xQueueGenericCreate+0x70>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e38c:	0003      	movs	r3, r0
 800e38e:	3354      	adds	r3, #84	; 0x54
 800e390:	6003      	str	r3, [r0, #0]
 800e392:	e005      	b.n	800e3a0 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e394:	2054      	movs	r0, #84	; 0x54
 800e396:	f001 fb53 	bl	800fa40 <pvPortMalloc>
 800e39a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e39c:	d022      	beq.n	800e3e4 <xQueueGenericCreate+0x70>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e39e:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e3a0:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e3a2:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800e3a4:	f001 fad2 	bl	800f94c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e3a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e3aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3ac:	6821      	ldr	r1, [r4, #0]
 800e3ae:	4353      	muls	r3, r2
 800e3b0:	18c8      	adds	r0, r1, r3
 800e3b2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3b4:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e3b6:	1a9b      	subs	r3, r3, r2
 800e3b8:	18cb      	adds	r3, r1, r3
 800e3ba:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e3bc:	2301      	movs	r3, #1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3be:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3c0:	0020      	movs	r0, r4
		pxQueue->xRxLock = queueUNLOCKED;
 800e3c2:	425b      	negs	r3, r3
 800e3c4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3c6:	60a1      	str	r1, [r4, #8]
		pxQueue->xTxLock = queueUNLOCKED;
 800e3c8:	64a3      	str	r3, [r4, #72]	; 0x48
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3ca:	3010      	adds	r0, #16
 800e3cc:	f7ff ff08 	bl	800e1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e3d0:	0020      	movs	r0, r4
 800e3d2:	3024      	adds	r0, #36	; 0x24
 800e3d4:	f7ff ff04 	bl	800e1e0 <vListInitialise>
	taskEXIT_CRITICAL();
 800e3d8:	f001 fac4 	bl	800f964 <vPortExitCritical>
			pxNewQueue->ucQueueType = ucQueueType;
 800e3dc:	2350      	movs	r3, #80	; 0x50
 800e3de:	54e6      	strb	r6, [r4, r3]
}
 800e3e0:	0020      	movs	r0, r4
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800e3e4:	2400      	movs	r4, #0
 800e3e6:	e7fb      	b.n	800e3e0 <xQueueGenericCreate+0x6c>

0800e3e8 <xQueueCreateCountingSemaphore>:
	{
 800e3e8:	b570      	push	{r4, r5, r6, lr}
 800e3ea:	0006      	movs	r6, r0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e3ec:	2054      	movs	r0, #84	; 0x54
	{
 800e3ee:	000d      	movs	r5, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e3f0:	f001 fb26 	bl	800fa40 <pvPortMalloc>
 800e3f4:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e3f6:	d022      	beq.n	800e43e <xQueueCreateCountingSemaphore+0x56>
		pxNewQueue->uxLength = uxQueueLength;
 800e3f8:	63c6      	str	r6, [r0, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e3fa:	2600      	movs	r6, #0
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3fc:	6000      	str	r0, [r0, #0]
		pxNewQueue->uxItemSize = uxItemSize;
 800e3fe:	6406      	str	r6, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 800e400:	f001 faa4 	bl	800f94c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e404:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	434b      	muls	r3, r1
 800e40c:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e40e:	1a5b      	subs	r3, r3, r1
 800e410:	18d3      	adds	r3, r2, r3
 800e412:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e414:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e416:	6060      	str	r0, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e418:	0020      	movs	r0, r4
		pxQueue->xRxLock = queueUNLOCKED;
 800e41a:	425b      	negs	r3, r3
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e41c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e41e:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e420:	3010      	adds	r0, #16
		pxQueue->xRxLock = queueUNLOCKED;
 800e422:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e424:	64a3      	str	r3, [r4, #72]	; 0x48
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e426:	f7ff fedb 	bl	800e1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e42a:	0020      	movs	r0, r4
 800e42c:	3024      	adds	r0, #36	; 0x24
 800e42e:	f7ff fed7 	bl	800e1e0 <vListInitialise>
	taskEXIT_CRITICAL();
 800e432:	f001 fa97 	bl	800f964 <vPortExitCritical>
			pxNewQueue->ucQueueType = ucQueueType;
 800e436:	2350      	movs	r3, #80	; 0x50
 800e438:	2202      	movs	r2, #2
 800e43a:	54e2      	strb	r2, [r4, r3]
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e43c:	63a5      	str	r5, [r4, #56]	; 0x38
	}
 800e43e:	0020      	movs	r0, r4
 800e440:	bd70      	pop	{r4, r5, r6, pc}
 800e442:	46c0      	nop			; (mov r8, r8)

0800e444 <xQueueGenericSend>:
{
 800e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e446:	46c6      	mov	lr, r8
 800e448:	0004      	movs	r4, r0
 800e44a:	b500      	push	{lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	001e      	movs	r6, r3
 800e450:	4688      	mov	r8, r1
 800e452:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800e454:	f001 fa7a 	bl	800f94c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e458:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e45a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e45c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e45e:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e460:	4298      	cmp	r0, r3
 800e462:	d330      	bcc.n	800e4c6 <xQueueGenericSend+0x82>
 800e464:	2e02      	cmp	r6, #2
 800e466:	d02e      	beq.n	800e4c6 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d052      	beq.n	800e514 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800e46e:	2d00      	cmp	r5, #0
 800e470:	d04c      	beq.n	800e50c <xQueueGenericSend+0xc8>
		taskEXIT_CRITICAL();
 800e472:	f001 fa77 	bl	800f964 <vPortExitCritical>
		vTaskSuspendAll();
 800e476:	f000 fc01 	bl	800ec7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e47a:	f001 fa67 	bl	800f94c <vPortEnterCritical>
 800e47e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e480:	3301      	adds	r3, #1
 800e482:	d100      	bne.n	800e486 <xQueueGenericSend+0x42>
 800e484:	6467      	str	r7, [r4, #68]	; 0x44
 800e486:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d100      	bne.n	800e48e <xQueueGenericSend+0x4a>
 800e48c:	64a7      	str	r7, [r4, #72]	; 0x48
 800e48e:	f001 fa69 	bl	800f964 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e492:	a901      	add	r1, sp, #4
 800e494:	a802      	add	r0, sp, #8
 800e496:	f000 fe23 	bl	800f0e0 <xTaskCheckForTimeOut>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d13e      	bne.n	800e51c <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e49e:	f001 fa55 	bl	800f94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e4a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d01e      	beq.n	800e4e8 <xQueueGenericSend+0xa4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e4aa:	f001 fa5b 	bl	800f964 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e4ae:	0020      	movs	r0, r4
 800e4b0:	f7ff ff16 	bl	800e2e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4b4:	f000 fc86 	bl	800edc4 <xTaskResumeAll>
{
 800e4b8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e4ba:	f001 fa47 	bl	800f94c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e4c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e4c2:	4298      	cmp	r0, r3
 800e4c4:	d2ce      	bcs.n	800e464 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4c6:	0032      	movs	r2, r6
 800e4c8:	4641      	mov	r1, r8
 800e4ca:	0020      	movs	r0, r4
 800e4cc:	f7ff fecc 	bl	800e268 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d129      	bne.n	800e52a <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d12d      	bne.n	800e536 <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800e4da:	f001 fa43 	bl	800f964 <vPortExitCritical>
				return pdPASS;
 800e4de:	2001      	movs	r0, #1
}
 800e4e0:	b004      	add	sp, #16
 800e4e2:	bc80      	pop	{r7}
 800e4e4:	46b8      	mov	r8, r7
 800e4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800e4e8:	f001 fa3c 	bl	800f964 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e4ec:	0020      	movs	r0, r4
 800e4ee:	9901      	ldr	r1, [sp, #4]
 800e4f0:	3010      	adds	r0, #16
 800e4f2:	f000 fd85 	bl	800f000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4f6:	0020      	movs	r0, r4
 800e4f8:	f7ff fef2 	bl	800e2e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4fc:	f000 fc62 	bl	800edc4 <xTaskResumeAll>
 800e500:	2800      	cmp	r0, #0
 800e502:	d1d9      	bne.n	800e4b8 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800e504:	f001 fa16 	bl	800f934 <vPortYield>
{
 800e508:	2501      	movs	r5, #1
 800e50a:	e7d6      	b.n	800e4ba <xQueueGenericSend+0x76>
					vTaskSetTimeOutState( &xTimeOut );
 800e50c:	a802      	add	r0, sp, #8
 800e50e:	f000 fddb 	bl	800f0c8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e512:	e7ae      	b.n	800e472 <xQueueGenericSend+0x2e>
					taskEXIT_CRITICAL();
 800e514:	f001 fa26 	bl	800f964 <vPortExitCritical>
					return errQUEUE_FULL;
 800e518:	2000      	movs	r0, #0
 800e51a:	e7e1      	b.n	800e4e0 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800e51c:	0020      	movs	r0, r4
 800e51e:	f7ff fedf 	bl	800e2e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e522:	f000 fc4f 	bl	800edc4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e526:	2000      	movs	r0, #0
 800e528:	e7da      	b.n	800e4e0 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e52a:	0020      	movs	r0, r4
 800e52c:	3024      	adds	r0, #36	; 0x24
 800e52e:	f000 fd95 	bl	800f05c <xTaskRemoveFromEventList>
 800e532:	2801      	cmp	r0, #1
 800e534:	d1d1      	bne.n	800e4da <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800e536:	f001 f9fd 	bl	800f934 <vPortYield>
 800e53a:	e7ce      	b.n	800e4da <xQueueGenericSend+0x96>

0800e53c <xQueueGenericSendFromISR>:
{
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	4647      	mov	r7, r8
 800e540:	46ce      	mov	lr, r9
 800e542:	0004      	movs	r4, r0
 800e544:	b580      	push	{r7, lr}
 800e546:	4690      	mov	r8, r2
 800e548:	001d      	movs	r5, r3
 800e54a:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e54c:	f001 fa14 	bl	800f978 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e552:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e554:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e556:	4293      	cmp	r3, r2
 800e558:	d30b      	bcc.n	800e572 <xQueueGenericSendFromISR+0x36>
			xReturn = errQUEUE_FULL;
 800e55a:	2300      	movs	r3, #0
 800e55c:	4699      	mov	r9, r3
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e55e:	2d02      	cmp	r5, #2
 800e560:	d007      	beq.n	800e572 <xQueueGenericSendFromISR+0x36>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e562:	0030      	movs	r0, r6
 800e564:	f001 fa0e 	bl	800f984 <vClearInterruptMaskFromISR>
}
 800e568:	4648      	mov	r0, r9
 800e56a:	bcc0      	pop	{r6, r7}
 800e56c:	46b9      	mov	r9, r7
 800e56e:	46b0      	mov	r8, r6
 800e570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e572:	002a      	movs	r2, r5
 800e574:	0039      	movs	r1, r7
 800e576:	0020      	movs	r0, r4
 800e578:	f7ff fe76 	bl	800e268 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e57c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e57e:	3301      	adds	r3, #1
 800e580:	d005      	beq.n	800e58e <xQueueGenericSendFromISR+0x52>
				++( pxQueue->xTxLock );
 800e582:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e584:	3301      	adds	r3, #1
 800e586:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e588:	2301      	movs	r3, #1
 800e58a:	4699      	mov	r9, r3
 800e58c:	e7e9      	b.n	800e562 <xQueueGenericSendFromISR+0x26>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0f9      	beq.n	800e588 <xQueueGenericSendFromISR+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e594:	0020      	movs	r0, r4
 800e596:	3024      	adds	r0, #36	; 0x24
 800e598:	f000 fd60 	bl	800f05c <xTaskRemoveFromEventList>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d0f3      	beq.n	800e588 <xQueueGenericSendFromISR+0x4c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e5a0:	4643      	mov	r3, r8
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0f0      	beq.n	800e588 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e5aa:	4699      	mov	r9, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	e7d8      	b.n	800e562 <xQueueGenericSendFromISR+0x26>

0800e5b0 <xQueueGiveFromISR>:
{
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	0004      	movs	r4, r0
 800e5b4:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5b6:	f001 f9df 	bl	800f978 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e5ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5be:	0005      	movs	r5, r0
			xReturn = errQUEUE_FULL;
 800e5c0:	2600      	movs	r6, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d209      	bcs.n	800e5da <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800e5c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e5cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	d008      	beq.n	800e5e4 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800e5d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e5d8:	2601      	movs	r6, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e5da:	0028      	movs	r0, r5
 800e5dc:	f001 f9d2 	bl	800f984 <vClearInterruptMaskFromISR>
}
 800e5e0:	0030      	movs	r0, r6
 800e5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0f6      	beq.n	800e5d8 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5ea:	0020      	movs	r0, r4
 800e5ec:	3024      	adds	r0, #36	; 0x24
 800e5ee:	f000 fd35 	bl	800f05c <xTaskRemoveFromEventList>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d0f0      	beq.n	800e5d8 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800e5f6:	2f00      	cmp	r7, #0
 800e5f8:	d0ee      	beq.n	800e5d8 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5fa:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800e5fc:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	e7eb      	b.n	800e5da <xQueueGiveFromISR+0x2a>
 800e602:	46c0      	nop			; (mov r8, r8)

0800e604 <xQueueGenericReceive>:
{
 800e604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e606:	46c6      	mov	lr, r8
 800e608:	0004      	movs	r4, r0
 800e60a:	b500      	push	{lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	001f      	movs	r7, r3
 800e610:	4688      	mov	r8, r1
 800e612:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800e614:	f001 f99a 	bl	800f94c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d148      	bne.n	800e6b0 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d072      	beq.n	800e70a <xQueueGenericReceive+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e624:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800e626:	a802      	add	r0, sp, #8
 800e628:	f000 fd4e 	bl	800f0c8 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800e62c:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e62e:	3624      	adds	r6, #36	; 0x24
 800e630:	e017      	b.n	800e662 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800e632:	f001 f997 	bl	800f964 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d05e      	beq.n	800e6fa <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e63c:	0030      	movs	r0, r6
 800e63e:	9901      	ldr	r1, [sp, #4]
 800e640:	f000 fcde 	bl	800f000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e644:	0020      	movs	r0, r4
 800e646:	f7ff fe4b 	bl	800e2e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e64a:	f000 fbbb 	bl	800edc4 <xTaskResumeAll>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d050      	beq.n	800e6f4 <xQueueGenericReceive+0xf0>
		taskENTER_CRITICAL();
 800e652:	f001 f97b 	bl	800f94c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d129      	bne.n	800e6b0 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d053      	beq.n	800e70a <xQueueGenericReceive+0x106>
		taskEXIT_CRITICAL();
 800e662:	f001 f97f 	bl	800f964 <vPortExitCritical>
		vTaskSuspendAll();
 800e666:	f000 fb09 	bl	800ec7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e66a:	f001 f96f 	bl	800f94c <vPortEnterCritical>
 800e66e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e670:	1c53      	adds	r3, r2, #1
 800e672:	d100      	bne.n	800e676 <xQueueGenericReceive+0x72>
 800e674:	6465      	str	r5, [r4, #68]	; 0x44
 800e676:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e678:	1c53      	adds	r3, r2, #1
 800e67a:	d100      	bne.n	800e67e <xQueueGenericReceive+0x7a>
 800e67c:	64a5      	str	r5, [r4, #72]	; 0x48
 800e67e:	f001 f971 	bl	800f964 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e682:	a901      	add	r1, sp, #4
 800e684:	a802      	add	r0, sp, #8
 800e686:	f000 fd2b 	bl	800f0e0 <xTaskCheckForTimeOut>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d144      	bne.n	800e718 <xQueueGenericReceive+0x114>
	taskENTER_CRITICAL();
 800e68e:	f001 f95d 	bl	800f94c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e694:	2b00      	cmp	r3, #0
 800e696:	d0cc      	beq.n	800e632 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800e698:	f001 f964 	bl	800f964 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e69c:	0020      	movs	r0, r4
 800e69e:	f7ff fe1f 	bl	800e2e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6a2:	f000 fb8f 	bl	800edc4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e6a6:	f001 f951 	bl	800f94c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d0d5      	beq.n	800e65c <xQueueGenericReceive+0x58>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e6b2:	68e5      	ldr	r5, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6b4:	2a00      	cmp	r2, #0
 800e6b6:	d009      	beq.n	800e6cc <xQueueGenericReceive+0xc8>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6b8:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e6ba:	18a9      	adds	r1, r5, r2
 800e6bc:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6be:	4299      	cmp	r1, r3
 800e6c0:	d301      	bcc.n	800e6c6 <xQueueGenericReceive+0xc2>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e6c2:	6821      	ldr	r1, [r4, #0]
 800e6c4:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	f005 fa5e 	bl	8013b88 <memcpy>
				if( xJustPeeking == pdFALSE )
 800e6cc:	2f00      	cmp	r7, #0
 800e6ce:	d12a      	bne.n	800e726 <xQueueGenericReceive+0x122>
					--( pxQueue->uxMessagesWaiting );
 800e6d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d033      	beq.n	800e744 <xQueueGenericReceive+0x140>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6dc:	6923      	ldr	r3, [r4, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d025      	beq.n	800e72e <xQueueGenericReceive+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e6e2:	0020      	movs	r0, r4
 800e6e4:	3010      	adds	r0, #16
 800e6e6:	f000 fcb9 	bl	800f05c <xTaskRemoveFromEventList>
 800e6ea:	2801      	cmp	r0, #1
 800e6ec:	d11f      	bne.n	800e72e <xQueueGenericReceive+0x12a>
							queueYIELD_IF_USING_PREEMPTION();
 800e6ee:	f001 f921 	bl	800f934 <vPortYield>
 800e6f2:	e01c      	b.n	800e72e <xQueueGenericReceive+0x12a>
					portYIELD_WITHIN_API();
 800e6f4:	f001 f91e 	bl	800f934 <vPortYield>
 800e6f8:	e7ab      	b.n	800e652 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800e6fa:	f001 f927 	bl	800f94c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e6fe:	6860      	ldr	r0, [r4, #4]
 800e700:	f000 fd2c 	bl	800f15c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e704:	f001 f92e 	bl	800f964 <vPortExitCritical>
 800e708:	e798      	b.n	800e63c <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800e70a:	f001 f92b 	bl	800f964 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e70e:	2000      	movs	r0, #0
}
 800e710:	b004      	add	sp, #16
 800e712:	bc80      	pop	{r7}
 800e714:	46b8      	mov	r8, r7
 800e716:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800e718:	0020      	movs	r0, r4
 800e71a:	f7ff fde1 	bl	800e2e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e71e:	f000 fb51 	bl	800edc4 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e722:	2000      	movs	r0, #0
 800e724:	e7f4      	b.n	800e710 <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e726:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e728:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d103      	bne.n	800e736 <xQueueGenericReceive+0x132>
				taskEXIT_CRITICAL();
 800e72e:	f001 f919 	bl	800f964 <vPortExitCritical>
				return pdPASS;
 800e732:	2001      	movs	r0, #1
 800e734:	e7ec      	b.n	800e710 <xQueueGenericReceive+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e736:	0020      	movs	r0, r4
 800e738:	3024      	adds	r0, #36	; 0x24
 800e73a:	f000 fc8f 	bl	800f05c <xTaskRemoveFromEventList>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d0f5      	beq.n	800e72e <xQueueGenericReceive+0x12a>
 800e742:	e7d4      	b.n	800e6ee <xQueueGenericReceive+0xea>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e744:	f000 fe56 	bl	800f3f4 <pvTaskIncrementMutexHeldCount>
 800e748:	6060      	str	r0, [r4, #4]
 800e74a:	e7c7      	b.n	800e6dc <xQueueGenericReceive+0xd8>

0800e74c <xQueueReceiveFromISR>:
{
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	46c6      	mov	lr, r8
 800e750:	0004      	movs	r4, r0
 800e752:	b500      	push	{lr}
 800e754:	000f      	movs	r7, r1
 800e756:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e758:	f001 f90e 	bl	800f978 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e75c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e75e:	0005      	movs	r5, r0
			xReturn = pdFAIL;
 800e760:	2600      	movs	r6, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e766:	0028      	movs	r0, r5
 800e768:	f001 f90c 	bl	800f984 <vClearInterruptMaskFromISR>
}
 800e76c:	0030      	movs	r0, r6
 800e76e:	bc80      	pop	{r7}
 800e770:	46b8      	mov	r8, r7
 800e772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e776:	2a00      	cmp	r2, #0
 800e778:	d00a      	beq.n	800e790 <xQueueReceiveFromISR+0x44>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e77a:	68e3      	ldr	r3, [r4, #12]
 800e77c:	1899      	adds	r1, r3, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e77e:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e780:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e782:	4299      	cmp	r1, r3
 800e784:	d301      	bcc.n	800e78a <xQueueReceiveFromISR+0x3e>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e786:	6821      	ldr	r1, [r4, #0]
 800e788:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e78a:	0038      	movs	r0, r7
 800e78c:	f005 f9fc 	bl	8013b88 <memcpy>
			--( pxQueue->uxMessagesWaiting );
 800e790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e792:	3b01      	subs	r3, #1
 800e794:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e796:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e798:	3301      	adds	r3, #1
 800e79a:	d004      	beq.n	800e7a6 <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e79c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e79e:	3301      	adds	r3, #1
 800e7a0:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e7a2:	2601      	movs	r6, #1
 800e7a4:	e7df      	b.n	800e766 <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7a6:	6923      	ldr	r3, [r4, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0fa      	beq.n	800e7a2 <xQueueReceiveFromISR+0x56>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7ac:	0020      	movs	r0, r4
 800e7ae:	3010      	adds	r0, #16
 800e7b0:	f000 fc54 	bl	800f05c <xTaskRemoveFromEventList>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d0f4      	beq.n	800e7a2 <xQueueReceiveFromISR+0x56>
						if( pxHigherPriorityTaskWoken != NULL )
 800e7b8:	4643      	mov	r3, r8
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0f1      	beq.n	800e7a2 <xQueueReceiveFromISR+0x56>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e7c2:	2601      	movs	r6, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	e7ce      	b.n	800e766 <xQueueReceiveFromISR+0x1a>

0800e7c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7c8:	b530      	push	{r4, r5, lr}
 800e7ca:	4c08      	ldr	r4, [pc, #32]	; (800e7ec <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	0022      	movs	r2, r4
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7d0:	6815      	ldr	r5, [r2, #0]
 800e7d2:	2d00      	cmp	r5, #0
 800e7d4:	d004      	beq.n	800e7e0 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	3208      	adds	r2, #8
 800e7da:	2b08      	cmp	r3, #8
 800e7dc:	d1f8      	bne.n	800e7d0 <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e7de:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	50e1      	str	r1, [r4, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e7e4:	18e3      	adds	r3, r4, r3
 800e7e6:	6058      	str	r0, [r3, #4]
				break;
 800e7e8:	e7f9      	b.n	800e7de <vQueueAddToRegistry+0x16>
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	20002c8c 	.word	0x20002c8c

0800e7f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	0004      	movs	r4, r0
 800e7f4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e7f6:	f001 f8a9 	bl	800f94c <vPortEnterCritical>
 800e7fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	d101      	bne.n	800e804 <vQueueWaitForMessageRestricted+0x14>
 800e800:	2300      	movs	r3, #0
 800e802:	6463      	str	r3, [r4, #68]	; 0x44
 800e804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e806:	3301      	adds	r3, #1
 800e808:	d101      	bne.n	800e80e <vQueueWaitForMessageRestricted+0x1e>
 800e80a:	2300      	movs	r3, #0
 800e80c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e80e:	f001 f8a9 	bl	800f964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e814:	2b00      	cmp	r3, #0
 800e816:	d003      	beq.n	800e820 <vQueueWaitForMessageRestricted+0x30>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e818:	0020      	movs	r0, r4
 800e81a:	f7ff fd61 	bl	800e2e0 <prvUnlockQueue>
	}
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e820:	0020      	movs	r0, r4
 800e822:	0029      	movs	r1, r5
 800e824:	3024      	adds	r0, #36	; 0x24
 800e826:	f000 fc07 	bl	800f038 <vTaskPlaceOnEventListRestricted>
 800e82a:	e7f5      	b.n	800e818 <vQueueWaitForMessageRestricted+0x28>

0800e82c <prvListTaskWithinSingleList.part.0>:
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e82c:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e82e:	b5f0      	push	{r4, r5, r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e830:	685d      	ldr	r5, [r3, #4]
 800e832:	2308      	movs	r3, #8
 800e834:	469c      	mov	ip, r3
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e836:	46d6      	mov	lr, sl
 800e838:	464f      	mov	r7, r9
 800e83a:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e83c:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e83e:	b5c0      	push	{r6, r7, lr}
 800e840:	4692      	mov	sl, r2
 800e842:	000f      	movs	r7, r1
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e844:	4565      	cmp	r5, ip
 800e846:	d043      	beq.n	800e8d0 <prvListTaskWithinSingleList.part.0+0xa4>
 800e848:	68eb      	ldr	r3, [r5, #12]
 800e84a:	0001      	movs	r1, r0
 800e84c:	4698      	mov	r8, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e84e:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e850:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e852:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e854:	686d      	ldr	r5, [r5, #4]
 800e856:	607d      	str	r5, [r7, #4]
 800e858:	45ac      	cmp	ip, r5
 800e85a:	d035      	beq.n	800e8c8 <prvListTaskWithinSingleList.part.0+0x9c>
 800e85c:	68ec      	ldr	r4, [r5, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e85e:	0023      	movs	r3, r4
 800e860:	3334      	adds	r3, #52	; 0x34
 800e862:	604b      	str	r3, [r1, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e864:	6c63      	ldr	r3, [r4, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e866:	600c      	str	r4, [r1, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e868:	608b      	str	r3, [r1, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e86a:	4653      	mov	r3, sl
 800e86c:	730b      	strb	r3, [r1, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e86e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e870:	610b      	str	r3, [r1, #16]
					if( eState == eSuspended )
 800e872:	4653      	mov	r3, sl
 800e874:	2b03      	cmp	r3, #3
 800e876:	d018      	beq.n	800e8aa <prvListTaskWithinSingleList.part.0+0x7e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e878:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e87a:	614b      	str	r3, [r1, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e87c:	6d63      	ldr	r3, [r4, #84]	; 0x54
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e87e:	6b26      	ldr	r6, [r4, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e880:	618b      	str	r3, [r1, #24]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e882:	7833      	ldrb	r3, [r6, #0]
 800e884:	2ba5      	cmp	r3, #165	; 0xa5
 800e886:	d11d      	bne.n	800e8c4 <prvListTaskWithinSingleList.part.0+0x98>
	uint32_t ulCount = 0U;
 800e888:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e88a:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e88c:	5cf2      	ldrb	r2, [r6, r3]
 800e88e:	2aa5      	cmp	r2, #165	; 0xa5
 800e890:	d0fb      	beq.n	800e88a <prvListTaskWithinSingleList.part.0+0x5e>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e892:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e894:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e896:	838b      	strh	r3, [r1, #28]
				uxTask++;
 800e898:	3001      	adds	r0, #1
			} while( pxNextTCB != pxFirstTCB );
 800e89a:	3120      	adds	r1, #32
 800e89c:	45a0      	cmp	r8, r4
 800e89e:	d1d9      	bne.n	800e854 <prvListTaskWithinSingleList.part.0+0x28>
	}
 800e8a0:	bce0      	pop	{r5, r6, r7}
 800e8a2:	46ba      	mov	sl, r7
 800e8a4:	46b1      	mov	r9, r6
 800e8a6:	46a8      	mov	r8, r5
 800e8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e8aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0e3      	beq.n	800e878 <prvListTaskWithinSingleList.part.0+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e8b0:	464b      	mov	r3, r9
 800e8b2:	730b      	strb	r3, [r1, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e8b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e8b6:	614b      	str	r3, [r1, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e8b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e8ba:	6b26      	ldr	r6, [r4, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e8bc:	618b      	str	r3, [r1, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e8be:	7833      	ldrb	r3, [r6, #0]
 800e8c0:	2ba5      	cmp	r3, #165	; 0xa5
 800e8c2:	d0e1      	beq.n	800e888 <prvListTaskWithinSingleList.part.0+0x5c>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	e7e6      	b.n	800e896 <prvListTaskWithinSingleList.part.0+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e8c8:	4663      	mov	r3, ip
 800e8ca:	685d      	ldr	r5, [r3, #4]
 800e8cc:	607d      	str	r5, [r7, #4]
 800e8ce:	e7c5      	b.n	800e85c <prvListTaskWithinSingleList.part.0+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e8d0:	68cd      	ldr	r5, [r1, #12]
 800e8d2:	e7b9      	b.n	800e848 <prvListTaskWithinSingleList.part.0+0x1c>

0800e8d4 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e8d4:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e8d6:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e8d8:	681a      	ldr	r2, [r3, #0]
{
 800e8da:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e8dc:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	4282      	cmp	r2, r0
 800e8e2:	d905      	bls.n	800e8f0 <prvAddCurrentTaskToDelayedList+0x1c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e8e4:	6898      	ldr	r0, [r3, #8]
 800e8e6:	6819      	ldr	r1, [r3, #0]
 800e8e8:	3104      	adds	r1, #4
 800e8ea:	f7ff fc95 	bl	800e218 <vListInsert>
}
 800e8ee:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e8f0:	68d8      	ldr	r0, [r3, #12]
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	3104      	adds	r1, #4
 800e8f6:	f7ff fc8f 	bl	800e218 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e8fa:	4b04      	ldr	r3, [pc, #16]	; (800e90c <prvAddCurrentTaskToDelayedList+0x38>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	4294      	cmp	r4, r2
 800e900:	d2f5      	bcs.n	800e8ee <prvAddCurrentTaskToDelayedList+0x1a>
			xNextTaskUnblockTime = xTimeToWake;
 800e902:	601c      	str	r4, [r3, #0]
}
 800e904:	e7f3      	b.n	800e8ee <prvAddCurrentTaskToDelayedList+0x1a>
 800e906:	46c0      	nop			; (mov r8, r8)
 800e908:	20002ccc 	.word	0x20002ccc
 800e90c:	200000c8 	.word	0x200000c8

0800e910 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 800e910:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e912:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800e914:	4c26      	ldr	r4, [pc, #152]	; (800e9b0 <vTaskSwitchContext.part.0+0xa0>)
 800e916:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e918:	f7f9 f9fe 	bl	8007d18 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e91c:	6963      	ldr	r3, [r4, #20]
 800e91e:	4298      	cmp	r0, r3
 800e920:	d904      	bls.n	800e92c <vTaskSwitchContext.part.0+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e922:	6822      	ldr	r2, [r4, #0]
 800e924:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e926:	1acb      	subs	r3, r1, r3
 800e928:	181b      	adds	r3, r3, r0
 800e92a:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e92c:	6822      	ldr	r2, [r4, #0]
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	6812      	ldr	r2, [r2, #0]
 800e932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e934:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e936:	429a      	cmp	r2, r3
 800e938:	d923      	bls.n	800e982 <vTaskSwitchContext.part.0+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	2214      	movs	r2, #20
 800e93e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e940:	491c      	ldr	r1, [pc, #112]	; (800e9b4 <vTaskSwitchContext.part.0+0xa4>)
 800e942:	f005 f913 	bl	8013b6c <memcmp>
 800e946:	2800      	cmp	r0, #0
 800e948:	d128      	bne.n	800e99c <vTaskSwitchContext.part.0+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e94a:	69a2      	ldr	r2, [r4, #24]
 800e94c:	491a      	ldr	r1, [pc, #104]	; (800e9b8 <vTaskSwitchContext.part.0+0xa8>)
 800e94e:	e003      	b.n	800e958 <vTaskSwitchContext.part.0+0x48>
 800e950:	69a3      	ldr	r3, [r4, #24]
 800e952:	3b01      	subs	r3, #1
 800e954:	61a3      	str	r3, [r4, #24]
 800e956:	69a2      	ldr	r2, [r4, #24]
 800e958:	0093      	lsls	r3, r2, #2
 800e95a:	189b      	adds	r3, r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	58cb      	ldr	r3, [r1, r3]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0f5      	beq.n	800e950 <vTaskSwitchContext.part.0+0x40>
 800e964:	69a2      	ldr	r2, [r4, #24]
 800e966:	0093      	lsls	r3, r2, #2
 800e968:	189b      	adds	r3, r3, r2
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	18c8      	adds	r0, r1, r3
 800e96e:	6842      	ldr	r2, [r0, #4]
 800e970:	3308      	adds	r3, #8
 800e972:	6852      	ldr	r2, [r2, #4]
 800e974:	18c9      	adds	r1, r1, r3
 800e976:	6042      	str	r2, [r0, #4]
 800e978:	428a      	cmp	r2, r1
 800e97a:	d015      	beq.n	800e9a8 <vTaskSwitchContext.part.0+0x98>
 800e97c:	68d3      	ldr	r3, [r2, #12]
 800e97e:	6023      	str	r3, [r4, #0]
}
 800e980:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e982:	6820      	ldr	r0, [r4, #0]
 800e984:	6821      	ldr	r1, [r4, #0]
 800e986:	3134      	adds	r1, #52	; 0x34
 800e988:	f7fe fcf6 	bl	800d378 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	2214      	movs	r2, #20
 800e990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <vTaskSwitchContext.part.0+0xa4>)
 800e994:	f005 f8ea 	bl	8013b6c <memcmp>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d0d6      	beq.n	800e94a <vTaskSwitchContext.part.0+0x3a>
 800e99c:	6820      	ldr	r0, [r4, #0]
 800e99e:	6821      	ldr	r1, [r4, #0]
 800e9a0:	3134      	adds	r1, #52	; 0x34
 800e9a2:	f7fe fce9 	bl	800d378 <vApplicationStackOverflowHook>
 800e9a6:	e7d0      	b.n	800e94a <vTaskSwitchContext.part.0+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e9a8:	6852      	ldr	r2, [r2, #4]
 800e9aa:	6042      	str	r2, [r0, #4]
 800e9ac:	e7e6      	b.n	800e97c <vTaskSwitchContext.part.0+0x6c>
 800e9ae:	46c0      	nop			; (mov r8, r8)
 800e9b0:	20002ccc 	.word	0x20002ccc
 800e9b4:	0801a304 	.word	0x0801a304
 800e9b8:	20002d68 	.word	0x20002d68

0800e9bc <xTaskGenericCreate>:
{
 800e9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9be:	464f      	mov	r7, r9
 800e9c0:	4646      	mov	r6, r8
 800e9c2:	46d6      	mov	lr, sl
 800e9c4:	b5c0      	push	{r6, r7, lr}
 800e9c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	000f      	movs	r7, r1
 800e9cc:	0014      	movs	r4, r2
 800e9ce:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9d0:	2e00      	cmp	r6, #0
 800e9d2:	d100      	bne.n	800e9d6 <xTaskGenericCreate+0x1a>
 800e9d4:	e074      	b.n	800eac0 <xTaskGenericCreate+0x104>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e9d6:	2060      	movs	r0, #96	; 0x60
 800e9d8:	f001 f832 	bl	800fa40 <pvPortMalloc>
 800e9dc:	1e05      	subs	r5, r0, #0
			if( pxNewTCB != NULL )
 800e9de:	d100      	bne.n	800e9e2 <xTaskGenericCreate+0x26>
 800e9e0:	e089      	b.n	800eaf6 <xTaskGenericCreate+0x13a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e9e2:	00a4      	lsls	r4, r4, #2
 800e9e4:	0022      	movs	r2, r4
				pxNewTCB->pxStack = pxStack;
 800e9e6:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e9e8:	21a5      	movs	r1, #165	; 0xa5
 800e9ea:	0030      	movs	r0, r6
 800e9ec:	f005 f8d5 	bl	8013b9a <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e9f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e9f2:	3c04      	subs	r4, #4
 800e9f4:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e9f6:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e9f8:	4464      	add	r4, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e9fa:	439c      	bics	r4, r3
 800e9fc:	002b      	movs	r3, r5
 800e9fe:	46a2      	mov	sl, r4
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea00:	2400      	movs	r4, #0
 800ea02:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ea04:	5d3e      	ldrb	r6, [r7, r4]
 800ea06:	551e      	strb	r6, [r3, r4]
		if( pcName[ x ] == 0x00 )
 800ea08:	2e00      	cmp	r6, #0
 800ea0a:	d002      	beq.n	800ea12 <xTaskGenericCreate+0x56>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea0c:	3401      	adds	r4, #1
 800ea0e:	2c0d      	cmp	r4, #13
 800ea10:	d1f8      	bne.n	800ea04 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea12:	2340      	movs	r3, #64	; 0x40
 800ea14:	2200      	movs	r2, #0
 800ea16:	9f08      	ldr	r7, [sp, #32]
 800ea18:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea1a:	2f06      	cmp	r7, #6
 800ea1c:	d84e      	bhi.n	800eabc <xTaskGenericCreate+0x100>
		pxTCB->uxMutexesHeld = 0;
 800ea1e:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ea20:	1d2e      	adds	r6, r5, #4
 800ea22:	0030      	movs	r0, r6
	pxTCB->uxPriority = uxPriority;
 800ea24:	62ef      	str	r7, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ea26:	64ef      	str	r7, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ea28:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ea2a:	f7ff fbe5 	bl	800e1f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ea2e:	0028      	movs	r0, r5
 800ea30:	3018      	adds	r0, #24
 800ea32:	f7ff fbe1 	bl	800e1f8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea36:	2307      	movs	r3, #7
 800ea38:	1bdb      	subs	r3, r3, r7
 800ea3a:	61ab      	str	r3, [r5, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ea3c:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ea3e:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ea40:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ea42:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ea44:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea46:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ea48:	54ec      	strb	r4, [r5, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea4a:	4641      	mov	r1, r8
 800ea4c:	4650      	mov	r0, sl
 800ea4e:	f000 ff35 	bl	800f8bc <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800ea52:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea54:	6028      	str	r0, [r5, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d000      	beq.n	800ea5c <xTaskGenericCreate+0xa0>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea5a:	601d      	str	r5, [r3, #0]
		taskENTER_CRITICAL();
 800ea5c:	f000 ff76 	bl	800f94c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ea60:	4c3c      	ldr	r4, [pc, #240]	; (800eb54 <xTaskGenericCreate+0x198>)
 800ea62:	69e3      	ldr	r3, [r4, #28]
 800ea64:	3301      	adds	r3, #1
 800ea66:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d038      	beq.n	800eae0 <xTaskGenericCreate+0x124>
				if( xSchedulerRunning == pdFALSE )
 800ea6e:	4f3a      	ldr	r7, [pc, #232]	; (800eb58 <xTaskGenericCreate+0x19c>)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d02d      	beq.n	800ead2 <xTaskGenericCreate+0x116>
 800ea76:	4b39      	ldr	r3, [pc, #228]	; (800eb5c <xTaskGenericCreate+0x1a0>)
 800ea78:	4698      	mov	r8, r3
			uxTaskNumber++;
 800ea7a:	68bb      	ldr	r3, [r7, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800ea7c:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800ea7e:	3301      	adds	r3, #1
 800ea80:	60bb      	str	r3, [r7, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea82:	646b      	str	r3, [r5, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ea84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d900      	bls.n	800ea8c <xTaskGenericCreate+0xd0>
 800ea8a:	61a3      	str	r3, [r4, #24]
 800ea8c:	0098      	lsls	r0, r3, #2
 800ea8e:	18c0      	adds	r0, r0, r3
 800ea90:	0080      	lsls	r0, r0, #2
 800ea92:	0031      	movs	r1, r6
 800ea94:	4440      	add	r0, r8
 800ea96:	f7ff fbb3 	bl	800e200 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800ea9a:	f000 ff63 	bl	800f964 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800ea9e:	687b      	ldr	r3, [r7, #4]
			xReturn = pdPASS;
 800eaa0:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d004      	beq.n	800eab0 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	9a08      	ldr	r2, [sp, #32]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d31f      	bcc.n	800eaf0 <xTaskGenericCreate+0x134>
}
 800eab0:	0028      	movs	r0, r5
 800eab2:	bce0      	pop	{r5, r6, r7}
 800eab4:	46ba      	mov	sl, r7
 800eab6:	46b1      	mov	r9, r6
 800eab8:	46a8      	mov	r8, r5
 800eaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eabc:	2706      	movs	r7, #6
 800eabe:	e7ae      	b.n	800ea1e <xTaskGenericCreate+0x62>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac0:	0090      	lsls	r0, r2, #2
 800eac2:	f000 ffbd 	bl	800fa40 <pvPortMalloc>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eac6:	2501      	movs	r5, #1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac8:	0006      	movs	r6, r0
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eaca:	426d      	negs	r5, r5
		if( pxStack != NULL )
 800eacc:	2800      	cmp	r0, #0
 800eace:	d0ef      	beq.n	800eab0 <xTaskGenericCreate+0xf4>
 800ead0:	e781      	b.n	800e9d6 <xTaskGenericCreate+0x1a>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	9a08      	ldr	r2, [sp, #32]
 800ead6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead8:	4293      	cmp	r3, r2
 800eada:	d8cc      	bhi.n	800ea76 <xTaskGenericCreate+0xba>
						pxCurrentTCB = pxNewTCB;
 800eadc:	6025      	str	r5, [r4, #0]
 800eade:	e7ca      	b.n	800ea76 <xTaskGenericCreate+0xba>
				pxCurrentTCB =  pxNewTCB;
 800eae0:	6025      	str	r5, [r4, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eae2:	69e3      	ldr	r3, [r4, #28]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d00c      	beq.n	800eb02 <xTaskGenericCreate+0x146>
 800eae8:	4b1c      	ldr	r3, [pc, #112]	; (800eb5c <xTaskGenericCreate+0x1a0>)
 800eaea:	4f1b      	ldr	r7, [pc, #108]	; (800eb58 <xTaskGenericCreate+0x19c>)
 800eaec:	4698      	mov	r8, r3
 800eaee:	e7c4      	b.n	800ea7a <xTaskGenericCreate+0xbe>
				taskYIELD_IF_USING_PREEMPTION();
 800eaf0:	f000 ff20 	bl	800f934 <vPortYield>
 800eaf4:	e7dc      	b.n	800eab0 <xTaskGenericCreate+0xf4>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eaf6:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800eaf8:	0030      	movs	r0, r6
 800eafa:	f001 f81b 	bl	800fb34 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eafe:	426d      	negs	r5, r5
 800eb00:	e7d6      	b.n	800eab0 <xTaskGenericCreate+0xf4>
 800eb02:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <xTaskGenericCreate+0x1a0>)
 800eb04:	4698      	mov	r8, r3
 800eb06:	001f      	movs	r7, r3
 800eb08:	238c      	movs	r3, #140	; 0x8c
 800eb0a:	4443      	add	r3, r8
 800eb0c:	4699      	mov	r9, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb0e:	0038      	movs	r0, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb10:	3714      	adds	r7, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb12:	f7ff fb65 	bl	800e1e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb16:	454f      	cmp	r7, r9
 800eb18:	d1f9      	bne.n	800eb0e <xTaskGenericCreate+0x152>
	vListInitialise( &xDelayedTaskList1 );
 800eb1a:	2320      	movs	r3, #32
 800eb1c:	4699      	mov	r9, r3
	vListInitialise( &xDelayedTaskList2 );
 800eb1e:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800eb20:	44a1      	add	r9, r4
	vListInitialise( &xDelayedTaskList2 );
 800eb22:	3734      	adds	r7, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800eb24:	4648      	mov	r0, r9
 800eb26:	f7ff fb5b 	bl	800e1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb2a:	0038      	movs	r0, r7
 800eb2c:	f7ff fb58 	bl	800e1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb30:	0020      	movs	r0, r4
 800eb32:	3048      	adds	r0, #72	; 0x48
 800eb34:	f7ff fb54 	bl	800e1e0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800eb38:	0020      	movs	r0, r4
 800eb3a:	305c      	adds	r0, #92	; 0x5c
 800eb3c:	f7ff fb50 	bl	800e1e0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800eb40:	0020      	movs	r0, r4
 800eb42:	3070      	adds	r0, #112	; 0x70
 800eb44:	f7ff fb4c 	bl	800e1e0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb48:	464b      	mov	r3, r9
 800eb4a:	60e3      	str	r3, [r4, #12]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb4c:	60a7      	str	r7, [r4, #8]
 800eb4e:	4f02      	ldr	r7, [pc, #8]	; (800eb58 <xTaskGenericCreate+0x19c>)
}
 800eb50:	e793      	b.n	800ea7a <xTaskGenericCreate+0xbe>
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	20002ccc 	.word	0x20002ccc
 800eb58:	20002d4c 	.word	0x20002d4c
 800eb5c:	20002d68 	.word	0x20002d68

0800eb60 <uxTaskPriorityGet>:
	{
 800eb60:	b510      	push	{r4, lr}
 800eb62:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800eb64:	f000 fef2 	bl	800f94c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800eb68:	2c00      	cmp	r4, #0
 800eb6a:	d004      	beq.n	800eb76 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800eb6c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800eb6e:	f000 fef9 	bl	800f964 <vPortExitCritical>
	}
 800eb72:	0020      	movs	r0, r4
 800eb74:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800eb76:	4b01      	ldr	r3, [pc, #4]	; (800eb7c <uxTaskPriorityGet+0x1c>)
 800eb78:	681c      	ldr	r4, [r3, #0]
 800eb7a:	e7f7      	b.n	800eb6c <uxTaskPriorityGet+0xc>
 800eb7c:	20002ccc 	.word	0x20002ccc

0800eb80 <vTaskPrioritySet>:
	{
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	46c6      	mov	lr, r8
 800eb84:	0004      	movs	r4, r0
 800eb86:	000d      	movs	r5, r1
 800eb88:	b500      	push	{lr}
 800eb8a:	2906      	cmp	r1, #6
 800eb8c:	d900      	bls.n	800eb90 <vTaskPrioritySet+0x10>
 800eb8e:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800eb90:	f000 fedc 	bl	800f94c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800eb94:	2c00      	cmp	r4, #0
 800eb96:	d02b      	beq.n	800ebf0 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800eb98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800eb9a:	4295      	cmp	r5, r2
 800eb9c:	d01a      	beq.n	800ebd4 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800eb9e:	4f21      	ldr	r7, [pc, #132]	; (800ec24 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800eba0:	d81d      	bhi.n	800ebde <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800eba2:	683e      	ldr	r6, [r7, #0]
 800eba4:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800eba6:	4273      	negs	r3, r6
 800eba8:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ebaa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ebac:	4282      	cmp	r2, r0
 800ebae:	d100      	bne.n	800ebb2 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800ebb0:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebb2:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800ebb4:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	db02      	blt.n	800ebc0 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebba:	2107      	movs	r1, #7
 800ebbc:	1b4d      	subs	r5, r1, r5
 800ebbe:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ebc0:	0083      	lsls	r3, r0, #2
 800ebc2:	4d19      	ldr	r5, [pc, #100]	; (800ec28 <vTaskPrioritySet+0xa8>)
 800ebc4:	181b      	adds	r3, r3, r0
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	6962      	ldr	r2, [r4, #20]
 800ebca:	18eb      	adds	r3, r5, r3
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d015      	beq.n	800ebfc <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800ebd0:	2e01      	cmp	r6, #1
 800ebd2:	d010      	beq.n	800ebf6 <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800ebd4:	f000 fec6 	bl	800f964 <vPortExitCritical>
	}
 800ebd8:	bc80      	pop	{r7}
 800ebda:	46b8      	mov	r8, r7
 800ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d01d      	beq.n	800ec20 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ebe4:	2600      	movs	r6, #0
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebea:	429d      	cmp	r5, r3
 800ebec:	4176      	adcs	r6, r6
 800ebee:	e7dc      	b.n	800ebaa <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ebf0:	4b0c      	ldr	r3, [pc, #48]	; (800ec24 <vTaskPrioritySet+0xa4>)
 800ebf2:	681c      	ldr	r4, [r3, #0]
 800ebf4:	e7d0      	b.n	800eb98 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800ebf6:	f000 fe9d 	bl	800f934 <vPortYield>
 800ebfa:	e7eb      	b.n	800ebd4 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ebfc:	1d23      	adds	r3, r4, #4
 800ebfe:	0018      	movs	r0, r3
 800ec00:	4698      	mov	r8, r3
 800ec02:	f7ff fb21 	bl	800e248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec08:	69ba      	ldr	r2, [r7, #24]
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d900      	bls.n	800ec10 <vTaskPrioritySet+0x90>
 800ec0e:	61bb      	str	r3, [r7, #24]
 800ec10:	0098      	lsls	r0, r3, #2
 800ec12:	18c0      	adds	r0, r0, r3
 800ec14:	0080      	lsls	r0, r0, #2
 800ec16:	4641      	mov	r1, r8
 800ec18:	1828      	adds	r0, r5, r0
 800ec1a:	f7ff faf1 	bl	800e200 <vListInsertEnd>
 800ec1e:	e7d7      	b.n	800ebd0 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800ec20:	2600      	movs	r6, #0
 800ec22:	e7c2      	b.n	800ebaa <vTaskPrioritySet+0x2a>
 800ec24:	20002ccc 	.word	0x20002ccc
 800ec28:	20002d68 	.word	0x20002d68

0800ec2c <vTaskStartScheduler>:
{
 800ec2c:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ec2e:	2400      	movs	r4, #0
{
 800ec30:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ec32:	2300      	movs	r3, #0
 800ec34:	2296      	movs	r2, #150	; 0x96
 800ec36:	490d      	ldr	r1, [pc, #52]	; (800ec6c <vTaskStartScheduler+0x40>)
 800ec38:	480d      	ldr	r0, [pc, #52]	; (800ec70 <vTaskStartScheduler+0x44>)
 800ec3a:	9403      	str	r4, [sp, #12]
 800ec3c:	9402      	str	r4, [sp, #8]
 800ec3e:	9401      	str	r4, [sp, #4]
 800ec40:	9400      	str	r4, [sp, #0]
 800ec42:	f7ff febb 	bl	800e9bc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800ec46:	2801      	cmp	r0, #1
 800ec48:	d001      	beq.n	800ec4e <vTaskStartScheduler+0x22>
}
 800ec4a:	b004      	add	sp, #16
 800ec4c:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800ec4e:	f000 fc91 	bl	800f574 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ec52:	2801      	cmp	r0, #1
 800ec54:	d1f9      	bne.n	800ec4a <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800ec56:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800ec58:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <vTaskStartScheduler+0x48>)
 800ec5a:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <vTaskStartScheduler+0x4c>)
 800ec5e:	605c      	str	r4, [r3, #4]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ec60:	f7f9 f84a 	bl	8007cf8 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ec64:	f000 fe3c 	bl	800f8e0 <xPortStartScheduler>
}
 800ec68:	e7ef      	b.n	800ec4a <vTaskStartScheduler+0x1e>
 800ec6a:	46c0      	nop			; (mov r8, r8)
 800ec6c:	0801cf04 	.word	0x0801cf04
 800ec70:	0800eeb9 	.word	0x0800eeb9
 800ec74:	20002d4c 	.word	0x20002d4c
 800ec78:	20002ccc 	.word	0x20002ccc

0800ec7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ec7c:	4a02      	ldr	r2, [pc, #8]	; (800ec88 <vTaskSuspendAll+0xc>)
 800ec7e:	6913      	ldr	r3, [r2, #16]
 800ec80:	3301      	adds	r3, #1
 800ec82:	6113      	str	r3, [r2, #16]
}
 800ec84:	4770      	bx	lr
 800ec86:	46c0      	nop			; (mov r8, r8)
 800ec88:	20002d4c 	.word	0x20002d4c

0800ec8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ec8c:	4b01      	ldr	r3, [pc, #4]	; (800ec94 <xTaskGetTickCount+0x8>)
 800ec8e:	6858      	ldr	r0, [r3, #4]
}
 800ec90:	4770      	bx	lr
 800ec92:	46c0      	nop			; (mov r8, r8)
 800ec94:	20002ccc 	.word	0x20002ccc

0800ec98 <xTaskGetTickCountFromISR>:
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <xTaskGetTickCountFromISR+0x8>)
 800ec9a:	6858      	ldr	r0, [r3, #4]
 800ec9c:	4770      	bx	lr
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	20002ccc 	.word	0x20002ccc

0800eca4 <xTaskIncrementTick>:
{
 800eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca6:	46d6      	mov	lr, sl
 800eca8:	464f      	mov	r7, r9
 800ecaa:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecac:	4b41      	ldr	r3, [pc, #260]	; (800edb4 <xTaskIncrementTick+0x110>)
{
 800ecae:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecb0:	691a      	ldr	r2, [r3, #16]
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	d13f      	bne.n	800ed36 <xTaskIncrementTick+0x92>
		++xTickCount;
 800ecb6:	4c40      	ldr	r4, [pc, #256]	; (800edb8 <xTaskIncrementTick+0x114>)
 800ecb8:	6862      	ldr	r2, [r4, #4]
 800ecba:	3201      	adds	r2, #1
 800ecbc:	6062      	str	r2, [r4, #4]
			const TickType_t xConstTickCount = xTickCount;
 800ecbe:	6862      	ldr	r2, [r4, #4]
 800ecc0:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	d054      	beq.n	800ed70 <xTaskIncrementTick+0xcc>
 800ecc6:	4b3d      	ldr	r3, [pc, #244]	; (800edbc <xTaskIncrementTick+0x118>)
 800ecc8:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ecca:	4653      	mov	r3, sl
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4543      	cmp	r3, r8
 800ecd0:	d840      	bhi.n	800ed54 <xTaskIncrementTick+0xb0>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecd2:	68e3      	ldr	r3, [r4, #12]
BaseType_t xSwitchRequired = pdFALSE;
 800ecd4:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d05b      	beq.n	800ed94 <xTaskIncrementTick+0xf0>
 800ecdc:	4b38      	ldr	r3, [pc, #224]	; (800edc0 <xTaskIncrementTick+0x11c>)
 800ecde:	4699      	mov	r9, r3
 800ece0:	e020      	b.n	800ed24 <xTaskIncrementTick+0x80>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ece2:	1d2e      	adds	r6, r5, #4
 800ece4:	0030      	movs	r0, r6
 800ece6:	f7ff faaf 	bl	800e248 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d003      	beq.n	800ecf8 <xTaskIncrementTick+0x54>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecf0:	0028      	movs	r0, r5
 800ecf2:	3018      	adds	r0, #24
 800ecf4:	f7ff faa8 	bl	800e248 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ecf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ecfa:	69a2      	ldr	r2, [r4, #24]
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d900      	bls.n	800ed02 <xTaskIncrementTick+0x5e>
 800ed00:	61a3      	str	r3, [r4, #24]
 800ed02:	0098      	lsls	r0, r3, #2
 800ed04:	18c0      	adds	r0, r0, r3
 800ed06:	0080      	lsls	r0, r0, #2
 800ed08:	0031      	movs	r1, r6
 800ed0a:	4448      	add	r0, r9
 800ed0c:	f7ff fa78 	bl	800e200 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ed14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d300      	bcc.n	800ed1c <xTaskIncrementTick+0x78>
								xSwitchRequired = pdTRUE;
 800ed1a:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed1c:	68e3      	ldr	r3, [r4, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d039      	beq.n	800ed98 <xTaskIncrementTick+0xf4>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ed24:	68e3      	ldr	r3, [r4, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800ed2a:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800ed2c:	4598      	cmp	r8, r3
 800ed2e:	d2d8      	bcs.n	800ece2 <xTaskIncrementTick+0x3e>
							xNextTaskUnblockTime = xItemValue;
 800ed30:	4652      	mov	r2, sl
 800ed32:	6013      	str	r3, [r2, #0]
							break;
 800ed34:	e011      	b.n	800ed5a <xTaskIncrementTick+0xb6>
BaseType_t xSwitchRequired = pdFALSE;
 800ed36:	2700      	movs	r7, #0
		++uxPendedTicks;
 800ed38:	699a      	ldr	r2, [r3, #24]
 800ed3a:	4c1f      	ldr	r4, [pc, #124]	; (800edb8 <xTaskIncrementTick+0x114>)
 800ed3c:	3201      	adds	r2, #1
 800ed3e:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d000      	beq.n	800ed48 <xTaskIncrementTick+0xa4>
			xSwitchRequired = pdTRUE;
 800ed46:	2701      	movs	r7, #1
}
 800ed48:	0038      	movs	r0, r7
 800ed4a:	bce0      	pop	{r5, r6, r7}
 800ed4c:	46ba      	mov	sl, r7
 800ed4e:	46b1      	mov	r9, r6
 800ed50:	46a8      	mov	r8, r5
 800ed52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed54:	4b1a      	ldr	r3, [pc, #104]	; (800edc0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ed56:	2700      	movs	r7, #0
 800ed58:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed5e:	0093      	lsls	r3, r2, #2
 800ed60:	189b      	adds	r3, r3, r2
 800ed62:	464a      	mov	r2, r9
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	58d3      	ldr	r3, [r2, r3]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d9e9      	bls.n	800ed40 <xTaskIncrementTick+0x9c>
				xSwitchRequired = pdTRUE;
 800ed6c:	2701      	movs	r7, #1
 800ed6e:	e7e7      	b.n	800ed40 <xTaskIncrementTick+0x9c>
				taskSWITCH_DELAYED_LISTS();
 800ed70:	68e2      	ldr	r2, [r4, #12]
 800ed72:	68a1      	ldr	r1, [r4, #8]
 800ed74:	60e1      	str	r1, [r4, #12]
 800ed76:	60a2      	str	r2, [r4, #8]
 800ed78:	695a      	ldr	r2, [r3, #20]
 800ed7a:	3201      	adds	r2, #1
 800ed7c:	615a      	str	r2, [r3, #20]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed7e:	68e3      	ldr	r3, [r4, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10d      	bne.n	800eda2 <xTaskIncrementTick+0xfe>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed86:	4b0d      	ldr	r3, [pc, #52]	; (800edbc <xTaskIncrementTick+0x118>)
 800ed88:	469a      	mov	sl, r3
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4652      	mov	r2, sl
 800ed8e:	425b      	negs	r3, r3
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	e79a      	b.n	800ecca <xTaskIncrementTick+0x26>
 800ed94:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <xTaskIncrementTick+0x11c>)
 800ed96:	4699      	mov	r9, r3
						xNextTaskUnblockTime = portMAX_DELAY;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	4652      	mov	r2, sl
 800ed9c:	425b      	negs	r3, r3
 800ed9e:	6013      	str	r3, [r2, #0]
						break;
 800eda0:	e7db      	b.n	800ed5a <xTaskIncrementTick+0xb6>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eda2:	68e3      	ldr	r3, [r4, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800eda4:	4a05      	ldr	r2, [pc, #20]	; (800edbc <xTaskIncrementTick+0x118>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eda6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800eda8:	4692      	mov	sl, r2
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	6013      	str	r3, [r2, #0]
	}
}
 800edb0:	e78b      	b.n	800ecca <xTaskIncrementTick+0x26>
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	20002d4c 	.word	0x20002d4c
 800edb8:	20002ccc 	.word	0x20002ccc
 800edbc:	200000c8 	.word	0x200000c8
 800edc0:	20002d68 	.word	0x20002d68

0800edc4 <xTaskResumeAll>:
{
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	46ce      	mov	lr, r9
 800edc8:	4647      	mov	r7, r8
 800edca:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800edcc:	f000 fdbe 	bl	800f94c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800edd0:	4f28      	ldr	r7, [pc, #160]	; (800ee74 <xTaskResumeAll+0xb0>)
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	3b01      	subs	r3, #1
 800edd6:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d13b      	bne.n	800ee56 <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edde:	4c26      	ldr	r4, [pc, #152]	; (800ee78 <xTaskResumeAll+0xb4>)
 800ede0:	69e3      	ldr	r3, [r4, #28]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d037      	beq.n	800ee56 <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800ede6:	4b25      	ldr	r3, [pc, #148]	; (800ee7c <xTaskResumeAll+0xb8>)
 800ede8:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800edea:	2301      	movs	r3, #1
 800edec:	4699      	mov	r9, r3
 800edee:	e01a      	b.n	800ee26 <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800edf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800edf2:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edf4:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edf6:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edf8:	3018      	adds	r0, #24
 800edfa:	f7ff fa25 	bl	800e248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edfe:	0030      	movs	r0, r6
 800ee00:	f7ff fa22 	bl	800e248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee06:	69a2      	ldr	r2, [r4, #24]
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d900      	bls.n	800ee0e <xTaskResumeAll+0x4a>
 800ee0c:	61a3      	str	r3, [r4, #24]
 800ee0e:	0098      	lsls	r0, r3, #2
 800ee10:	18c0      	adds	r0, r0, r3
 800ee12:	0080      	lsls	r0, r0, #2
 800ee14:	0031      	movs	r1, r6
 800ee16:	4440      	add	r0, r8
 800ee18:	f7ff f9f2 	bl	800e200 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ee20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d21f      	bcs.n	800ee66 <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e1      	bne.n	800edf0 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00e      	beq.n	800ee50 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00b      	beq.n	800ee50 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800ee38:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800ee3a:	f7ff ff33 	bl	800eca4 <xTaskIncrementTick>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d000      	beq.n	800ee44 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800ee42:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	3b01      	subs	r3, #1
 800ee48:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d1f4      	bne.n	800ee3a <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800ee50:	6924      	ldr	r4, [r4, #16]
 800ee52:	2c01      	cmp	r4, #1
 800ee54:	d00a      	beq.n	800ee6c <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800ee56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ee58:	f000 fd84 	bl	800f964 <vPortExitCritical>
}
 800ee5c:	0020      	movs	r0, r4
 800ee5e:	bcc0      	pop	{r6, r7}
 800ee60:	46b9      	mov	r9, r7
 800ee62:	46b0      	mov	r8, r6
 800ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800ee66:	464b      	mov	r3, r9
 800ee68:	6123      	str	r3, [r4, #16]
 800ee6a:	e7dc      	b.n	800ee26 <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800ee6c:	f000 fd62 	bl	800f934 <vPortYield>
 800ee70:	e7f2      	b.n	800ee58 <xTaskResumeAll+0x94>
 800ee72:	46c0      	nop			; (mov r8, r8)
 800ee74:	20002d4c 	.word	0x20002d4c
 800ee78:	20002ccc 	.word	0x20002ccc
 800ee7c:	20002d68 	.word	0x20002d68

0800ee80 <vTaskDelay>:
	{
 800ee80:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d011      	beq.n	800eeaa <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800ee86:	4a0a      	ldr	r2, [pc, #40]	; (800eeb0 <vTaskDelay+0x30>)
 800ee88:	6913      	ldr	r3, [r2, #16]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800ee8e:	4b09      	ldr	r3, [pc, #36]	; (800eeb4 <vTaskDelay+0x34>)
 800ee90:	685c      	ldr	r4, [r3, #4]
 800ee92:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	3004      	adds	r0, #4
 800ee98:	f7ff f9d6 	bl	800e248 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ee9c:	0020      	movs	r0, r4
 800ee9e:	f7ff fd19 	bl	800e8d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800eea2:	f7ff ff8f 	bl	800edc4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d101      	bne.n	800eeae <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800eeaa:	f000 fd43 	bl	800f934 <vPortYield>
	}
 800eeae:	bd10      	pop	{r4, pc}
 800eeb0:	20002d4c 	.word	0x20002d4c
 800eeb4:	20002ccc 	.word	0x20002ccc

0800eeb8 <prvIdleTask>:
{
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	4e15      	ldr	r6, [pc, #84]	; (800ef10 <prvIdleTask+0x58>)
 800eebc:	4c15      	ldr	r4, [pc, #84]	; (800ef14 <prvIdleTask+0x5c>)
 800eebe:	4f16      	ldr	r7, [pc, #88]	; (800ef18 <prvIdleTask+0x60>)
 800eec0:	e007      	b.n	800eed2 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800eec2:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800eec4:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800eec6:	3301      	adds	r3, #1
 800eec8:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800eeca:	f7ff ff7b 	bl	800edc4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800eece:	2d00      	cmp	r5, #0
 800eed0:	d108      	bne.n	800eee4 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800eed2:	68e3      	ldr	r3, [r4, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1f4      	bne.n	800eec2 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d9f9      	bls.n	800eed2 <prvIdleTask+0x1a>
				taskYIELD();
 800eede:	f000 fd29 	bl	800f934 <vPortYield>
 800eee2:	e7f6      	b.n	800eed2 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800eee4:	f000 fd32 	bl	800f94c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800eee8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800eeea:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eeec:	1d28      	adds	r0, r5, #4
 800eeee:	f7ff f9ab 	bl	800e248 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800eef2:	69f3      	ldr	r3, [r6, #28]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800eef8:	68e3      	ldr	r3, [r4, #12]
 800eefa:	3b01      	subs	r3, #1
 800eefc:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800eefe:	f000 fd31 	bl	800f964 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800ef02:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ef04:	f000 fe16 	bl	800fb34 <vPortFree>
		vPortFree( pxTCB );
 800ef08:	0028      	movs	r0, r5
 800ef0a:	f000 fe13 	bl	800fb34 <vPortFree>
	}
 800ef0e:	e7e0      	b.n	800eed2 <prvIdleTask+0x1a>
 800ef10:	20002ccc 	.word	0x20002ccc
 800ef14:	20002d4c 	.word	0x20002d4c
 800ef18:	20002d68 	.word	0x20002d68

0800ef1c <uxTaskGetSystemState>:
	{
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	46ce      	mov	lr, r9
 800ef20:	4647      	mov	r7, r8
 800ef22:	4691      	mov	r9, r2
	++uxSchedulerSuspended;
 800ef24:	4a2b      	ldr	r2, [pc, #172]	; (800efd4 <uxTaskGetSystemState+0xb8>)
	{
 800ef26:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800ef28:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ef2a:	4f2b      	ldr	r7, [pc, #172]	; (800efd8 <uxTaskGetSystemState+0xbc>)
	++uxSchedulerSuspended;
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ef30:	69fb      	ldr	r3, [r7, #28]
	{
 800ef32:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ef34:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ef36:	428b      	cmp	r3, r1
 800ef38:	d845      	bhi.n	800efc6 <uxTaskGetSystemState+0xaa>
 800ef3a:	2378      	movs	r3, #120	; 0x78
 800ef3c:	425b      	negs	r3, r3
 800ef3e:	4698      	mov	r8, r3
 800ef40:	4c26      	ldr	r4, [pc, #152]	; (800efdc <uxTaskGetSystemState+0xc0>)
 800ef42:	2300      	movs	r3, #0
 800ef44:	44a0      	add	r8, r4
 800ef46:	e000      	b.n	800ef4a <uxTaskGetSystemState+0x2e>
 800ef48:	0014      	movs	r4, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef4a:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ef4c:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	d006      	beq.n	800ef60 <uxTaskGetSystemState+0x44>
 800ef52:	2201      	movs	r2, #1
 800ef54:	0021      	movs	r1, r4
 800ef56:	f7ff fc69 	bl	800e82c <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ef5a:	182d      	adds	r5, r5, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ef5c:	016b      	lsls	r3, r5, #5
 800ef5e:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef60:	0022      	movs	r2, r4
 800ef62:	3a14      	subs	r2, #20
 800ef64:	4544      	cmp	r4, r8
 800ef66:	d1ef      	bne.n	800ef48 <uxTaskGetSystemState+0x2c>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ef68:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef6a:	680b      	ldr	r3, [r1, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d005      	beq.n	800ef7c <uxTaskGetSystemState+0x60>
 800ef70:	2202      	movs	r2, #2
 800ef72:	f7ff fc5b 	bl	800e82c <prvListTaskWithinSingleList.part.0>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ef76:	182d      	adds	r5, r5, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ef78:	0168      	lsls	r0, r5, #5
 800ef7a:	1830      	adds	r0, r6, r0
 800ef7c:	68b9      	ldr	r1, [r7, #8]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef7e:	680b      	ldr	r3, [r1, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d005      	beq.n	800ef90 <uxTaskGetSystemState+0x74>
 800ef84:	2202      	movs	r2, #2
 800ef86:	f7ff fc51 	bl	800e82c <prvListTaskWithinSingleList.part.0>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ef8a:	182d      	adds	r5, r5, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ef8c:	0168      	lsls	r0, r5, #5
 800ef8e:	1830      	adds	r0, r6, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d007      	beq.n	800efa6 <uxTaskGetSystemState+0x8a>
 800ef96:	0039      	movs	r1, r7
 800ef98:	2204      	movs	r2, #4
 800ef9a:	315c      	adds	r1, #92	; 0x5c
 800ef9c:	f7ff fc46 	bl	800e82c <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800efa0:	182d      	adds	r5, r5, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800efa2:	0168      	lsls	r0, r5, #5
 800efa4:	1830      	adds	r0, r6, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800efa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d005      	beq.n	800efb8 <uxTaskGetSystemState+0x9c>
 800efac:	0039      	movs	r1, r7
 800efae:	2203      	movs	r2, #3
 800efb0:	3170      	adds	r1, #112	; 0x70
 800efb2:	f7ff fc3b 	bl	800e82c <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800efb6:	182d      	adds	r5, r5, r0
					if( pulTotalRunTime != NULL )
 800efb8:	464b      	mov	r3, r9
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <uxTaskGetSystemState+0xaa>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800efbe:	f7f8 feab 	bl	8007d18 <ulMainGetRunTimeCounterValue>
 800efc2:	464b      	mov	r3, r9
 800efc4:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800efc6:	f7ff fefd 	bl	800edc4 <xTaskResumeAll>
	}
 800efca:	0028      	movs	r0, r5
 800efcc:	bcc0      	pop	{r6, r7}
 800efce:	46b9      	mov	r9, r7
 800efd0:	46b0      	mov	r8, r6
 800efd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd4:	20002d4c 	.word	0x20002d4c
 800efd8:	20002ccc 	.word	0x20002ccc
 800efdc:	20002de0 	.word	0x20002de0

0800efe0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800efe0:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <vTaskSwitchContext+0x18>)
{
 800efe2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d003      	beq.n	800eff2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800efea:	2201      	movs	r2, #1
 800efec:	4b03      	ldr	r3, [pc, #12]	; (800effc <vTaskSwitchContext+0x1c>)
 800efee:	611a      	str	r2, [r3, #16]
}
 800eff0:	bd10      	pop	{r4, pc}
 800eff2:	f7ff fc8d 	bl	800e910 <vTaskSwitchContext.part.0>
 800eff6:	e7fb      	b.n	800eff0 <vTaskSwitchContext+0x10>
 800eff8:	20002d4c 	.word	0x20002d4c
 800effc:	20002ccc 	.word	0x20002ccc

0800f000 <vTaskPlaceOnEventList>:
{
 800f000:	b570      	push	{r4, r5, r6, lr}
 800f002:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f004:	4c0b      	ldr	r4, [pc, #44]	; (800f034 <vTaskPlaceOnEventList+0x34>)
 800f006:	6821      	ldr	r1, [r4, #0]
 800f008:	3118      	adds	r1, #24
 800f00a:	f7ff f905 	bl	800e218 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f00e:	6820      	ldr	r0, [r4, #0]
 800f010:	3004      	adds	r0, #4
 800f012:	f7ff f919 	bl	800e248 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f016:	1c6b      	adds	r3, r5, #1
 800f018:	d004      	beq.n	800f024 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800f01a:	6860      	ldr	r0, [r4, #4]
 800f01c:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f01e:	f7ff fc59 	bl	800e8d4 <prvAddCurrentTaskToDelayedList>
}
 800f022:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f024:	0020      	movs	r0, r4
 800f026:	6821      	ldr	r1, [r4, #0]
 800f028:	3070      	adds	r0, #112	; 0x70
 800f02a:	3104      	adds	r1, #4
 800f02c:	f7ff f8e8 	bl	800e200 <vListInsertEnd>
 800f030:	e7f7      	b.n	800f022 <vTaskPlaceOnEventList+0x22>
 800f032:	46c0      	nop			; (mov r8, r8)
 800f034:	20002ccc 	.word	0x20002ccc

0800f038 <vTaskPlaceOnEventListRestricted>:
	{
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f03c:	4d06      	ldr	r5, [pc, #24]	; (800f058 <vTaskPlaceOnEventListRestricted+0x20>)
 800f03e:	6829      	ldr	r1, [r5, #0]
 800f040:	3118      	adds	r1, #24
 800f042:	f7ff f8dd 	bl	800e200 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f046:	6828      	ldr	r0, [r5, #0]
 800f048:	3004      	adds	r0, #4
 800f04a:	f7ff f8fd 	bl	800e248 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f04e:	6868      	ldr	r0, [r5, #4]
 800f050:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f052:	f7ff fc3f 	bl	800e8d4 <prvAddCurrentTaskToDelayedList>
	}
 800f056:	bd70      	pop	{r4, r5, r6, pc}
 800f058:	20002ccc 	.word	0x20002ccc

0800f05c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f05c:	68c3      	ldr	r3, [r0, #12]
{
 800f05e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f060:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f062:	0026      	movs	r6, r4
 800f064:	3618      	adds	r6, #24
 800f066:	0030      	movs	r0, r6
 800f068:	f7ff f8ee 	bl	800e248 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f06c:	4b13      	ldr	r3, [pc, #76]	; (800f0bc <xTaskRemoveFromEventList+0x60>)
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d11a      	bne.n	800f0aa <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f074:	1d26      	adds	r6, r4, #4
 800f076:	0030      	movs	r0, r6
 800f078:	f7ff f8e6 	bl	800e248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f07c:	4d10      	ldr	r5, [pc, #64]	; (800f0c0 <xTaskRemoveFromEventList+0x64>)
 800f07e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f080:	69aa      	ldr	r2, [r5, #24]
 800f082:	4293      	cmp	r3, r2
 800f084:	d818      	bhi.n	800f0b8 <xTaskRemoveFromEventList+0x5c>
 800f086:	0098      	lsls	r0, r3, #2
 800f088:	18c0      	adds	r0, r0, r3
 800f08a:	4b0e      	ldr	r3, [pc, #56]	; (800f0c4 <xTaskRemoveFromEventList+0x68>)
 800f08c:	0080      	lsls	r0, r0, #2
 800f08e:	0031      	movs	r1, r6
 800f090:	18c0      	adds	r0, r0, r3
 800f092:	f7ff f8b5 	bl	800e200 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f096:	682b      	ldr	r3, [r5, #0]
 800f098:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f09c:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d902      	bls.n	800f0a8 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800f0a2:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800f0a4:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800f0a6:	612b      	str	r3, [r5, #16]
}
 800f0a8:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f0aa:	4d05      	ldr	r5, [pc, #20]	; (800f0c0 <xTaskRemoveFromEventList+0x64>)
 800f0ac:	0031      	movs	r1, r6
 800f0ae:	0028      	movs	r0, r5
 800f0b0:	3048      	adds	r0, #72	; 0x48
 800f0b2:	f7ff f8a5 	bl	800e200 <vListInsertEnd>
 800f0b6:	e7ee      	b.n	800f096 <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0b8:	61ab      	str	r3, [r5, #24]
 800f0ba:	e7e4      	b.n	800f086 <xTaskRemoveFromEventList+0x2a>
 800f0bc:	20002d4c 	.word	0x20002d4c
 800f0c0:	20002ccc 	.word	0x20002ccc
 800f0c4:	20002d68 	.word	0x20002d68

0800f0c8 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0c8:	4b03      	ldr	r3, [pc, #12]	; (800f0d8 <vTaskSetTimeOutState+0x10>)
 800f0ca:	695b      	ldr	r3, [r3, #20]
 800f0cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0ce:	4b03      	ldr	r3, [pc, #12]	; (800f0dc <vTaskSetTimeOutState+0x14>)
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	6043      	str	r3, [r0, #4]
}
 800f0d4:	4770      	bx	lr
 800f0d6:	46c0      	nop			; (mov r8, r8)
 800f0d8:	20002d4c 	.word	0x20002d4c
 800f0dc:	20002ccc 	.word	0x20002ccc

0800f0e0 <xTaskCheckForTimeOut>:
{
 800f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e2:	000d      	movs	r5, r1
 800f0e4:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800f0e6:	f000 fc31 	bl	800f94c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f0ea:	4a11      	ldr	r2, [pc, #68]	; (800f130 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800f0ec:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800f0ee:	6851      	ldr	r1, [r2, #4]
			if( *pxTicksToWait == portMAX_DELAY )
 800f0f0:	1c58      	adds	r0, r3, #1
 800f0f2:	d01a      	beq.n	800f12a <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0f4:	480f      	ldr	r0, [pc, #60]	; (800f134 <xTaskCheckForTimeOut+0x54>)
 800f0f6:	6826      	ldr	r6, [r4, #0]
 800f0f8:	4684      	mov	ip, r0
 800f0fa:	6940      	ldr	r0, [r0, #20]
 800f0fc:	6867      	ldr	r7, [r4, #4]
 800f0fe:	4286      	cmp	r6, r0
 800f100:	d002      	beq.n	800f108 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800f102:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f104:	428f      	cmp	r7, r1
 800f106:	d90c      	bls.n	800f122 <xTaskCheckForTimeOut+0x42>
			xReturn = pdTRUE;
 800f108:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f10a:	1bc8      	subs	r0, r1, r7
 800f10c:	4283      	cmp	r3, r0
 800f10e:	d908      	bls.n	800f122 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f110:	1a5b      	subs	r3, r3, r1
 800f112:	19db      	adds	r3, r3, r7
 800f114:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f116:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800f118:	2600      	movs	r6, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f11e:	6853      	ldr	r3, [r2, #4]
 800f120:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800f122:	f000 fc1f 	bl	800f964 <vPortExitCritical>
}
 800f126:	0030      	movs	r0, r6
 800f128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800f12a:	2600      	movs	r6, #0
 800f12c:	e7f9      	b.n	800f122 <xTaskCheckForTimeOut+0x42>
 800f12e:	46c0      	nop			; (mov r8, r8)
 800f130:	20002ccc 	.word	0x20002ccc
 800f134:	20002d4c 	.word	0x20002d4c

0800f138 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f138:	2201      	movs	r2, #1
 800f13a:	4b01      	ldr	r3, [pc, #4]	; (800f140 <vTaskMissedYield+0x8>)
 800f13c:	611a      	str	r2, [r3, #16]
}
 800f13e:	4770      	bx	lr
 800f140:	20002ccc 	.word	0x20002ccc

0800f144 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f144:	4b04      	ldr	r3, [pc, #16]	; (800f158 <xTaskGetSchedulerState+0x14>)
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f146:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f148:	685a      	ldr	r2, [r3, #4]
 800f14a:	2a00      	cmp	r2, #0
 800f14c:	d003      	beq.n	800f156 <xTaskGetSchedulerState+0x12>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f14e:	6918      	ldr	r0, [r3, #16]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f150:	4243      	negs	r3, r0
 800f152:	4158      	adcs	r0, r3
 800f154:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
 800f156:	4770      	bx	lr
 800f158:	20002d4c 	.word	0x20002d4c

0800f15c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800f160:	d018      	beq.n	800f194 <vTaskPriorityInherit+0x38>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f162:	4d16      	ldr	r5, [pc, #88]	; (800f1bc <vTaskPriorityInherit+0x60>)
 800f164:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f166:	682b      	ldr	r3, [r5, #0]
 800f168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d212      	bcs.n	800f194 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f16e:	6983      	ldr	r3, [r0, #24]
 800f170:	2b00      	cmp	r3, #0
 800f172:	db04      	blt.n	800f17e <vTaskPriorityInherit+0x22>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f178:	2307      	movs	r3, #7
 800f17a:	1a5b      	subs	r3, r3, r1
 800f17c:	6183      	str	r3, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f17e:	0093      	lsls	r3, r2, #2
 800f180:	189b      	adds	r3, r3, r2
 800f182:	4e0f      	ldr	r6, [pc, #60]	; (800f1c0 <vTaskPriorityInherit+0x64>)
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	6962      	ldr	r2, [r4, #20]
 800f188:	18f3      	adds	r3, r6, r3
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d003      	beq.n	800f196 <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f18e:	682b      	ldr	r3, [r5, #0]
 800f190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f192:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f196:	1d27      	adds	r7, r4, #4
 800f198:	0038      	movs	r0, r7
 800f19a:	f7ff f855 	bl	800e248 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f19e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800f1a0:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d900      	bls.n	800f1ac <vTaskPriorityInherit+0x50>
 800f1aa:	61ab      	str	r3, [r5, #24]
 800f1ac:	0098      	lsls	r0, r3, #2
 800f1ae:	18c0      	adds	r0, r0, r3
 800f1b0:	0080      	lsls	r0, r0, #2
 800f1b2:	0039      	movs	r1, r7
 800f1b4:	1830      	adds	r0, r6, r0
 800f1b6:	f7ff f823 	bl	800e200 <vListInsertEnd>
	}
 800f1ba:	e7eb      	b.n	800f194 <vTaskPriorityInherit+0x38>
 800f1bc:	20002ccc 	.word	0x20002ccc
 800f1c0:	20002d68 	.word	0x20002d68

0800f1c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 800f1c8:	d008      	beq.n	800f1dc <xTaskPriorityDisinherit+0x18>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800f1ca:	6d03      	ldr	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f1ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1d4:	428a      	cmp	r2, r1
 800f1d6:	d001      	beq.n	800f1dc <xTaskPriorityDisinherit+0x18>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d001      	beq.n	800f1e0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800f1dc:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f1e0:	1d05      	adds	r5, r0, #4
 800f1e2:	0028      	movs	r0, r5
 800f1e4:	f7ff f830 	bl	800e248 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1e8:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ec:	1ad2      	subs	r2, r2, r3
 800f1ee:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f1f0:	4a07      	ldr	r2, [pc, #28]	; (800f210 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1f2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f1f4:	6991      	ldr	r1, [r2, #24]
 800f1f6:	428b      	cmp	r3, r1
 800f1f8:	d900      	bls.n	800f1fc <xTaskPriorityDisinherit+0x38>
 800f1fa:	6193      	str	r3, [r2, #24]
 800f1fc:	0098      	lsls	r0, r3, #2
 800f1fe:	18c0      	adds	r0, r0, r3
 800f200:	4b04      	ldr	r3, [pc, #16]	; (800f214 <xTaskPriorityDisinherit+0x50>)
 800f202:	0080      	lsls	r0, r0, #2
 800f204:	18c0      	adds	r0, r0, r3
 800f206:	0029      	movs	r1, r5
 800f208:	f7fe fffa 	bl	800e200 <vListInsertEnd>
					xReturn = pdTRUE;
 800f20c:	2001      	movs	r0, #1
		return xReturn;
 800f20e:	e7e6      	b.n	800f1de <xTaskPriorityDisinherit+0x1a>
 800f210:	20002ccc 	.word	0x20002ccc
 800f214:	20002d68 	.word	0x20002d68

0800f218 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21a:	46d6      	mov	lr, sl
 800f21c:	4646      	mov	r6, r8
 800f21e:	464f      	mov	r7, r9
 800f220:	b5c0      	push	{r6, r7, lr}
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f222:	2600      	movs	r6, #0

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f224:	4b31      	ldr	r3, [pc, #196]	; (800f2ec <vTaskList+0xd4>)
	{
 800f226:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800f228:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800f22a:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f22c:	9202      	str	r2, [sp, #8]
	{
 800f22e:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f230:	69d8      	ldr	r0, [r3, #28]
 800f232:	0140      	lsls	r0, r0, #5
 800f234:	f000 fc04 	bl	800fa40 <pvPortMalloc>
 800f238:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f23a:	d051      	beq.n	800f2e0 <vTaskList+0xc8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f23c:	2200      	movs	r2, #0
 800f23e:	9902      	ldr	r1, [sp, #8]
 800f240:	f7ff fe6c 	bl	800ef1c <uxTaskGetSystemState>
 800f244:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f246:	9603      	str	r6, [sp, #12]
 800f248:	9b03      	ldr	r3, [sp, #12]
 800f24a:	9a02      	ldr	r2, [sp, #8]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d944      	bls.n	800f2da <vTaskList+0xc2>
 800f250:	4b27      	ldr	r3, [pc, #156]	; (800f2f0 <vTaskList+0xd8>)
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f252:	2700      	movs	r7, #0
 800f254:	4698      	mov	r8, r3
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f256:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <vTaskList+0xdc>)
 800f258:	469a      	mov	sl, r3
			pcBuffer[ x ] = ' ';
 800f25a:	230c      	movs	r3, #12
 800f25c:	4699      	mov	r9, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f25e:	9b03      	ldr	r3, [sp, #12]
 800f260:	2600      	movs	r6, #0
 800f262:	015b      	lsls	r3, r3, #5
 800f264:	18eb      	adds	r3, r5, r3
 800f266:	7b1b      	ldrb	r3, [r3, #12]
 800f268:	3b01      	subs	r3, #1
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b03      	cmp	r3, #3
 800f26e:	d801      	bhi.n	800f274 <vTaskList+0x5c>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f270:	4453      	add	r3, sl
 800f272:	7d1e      	ldrb	r6, [r3, #20]
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f274:	9b03      	ldr	r3, [sp, #12]
		strcpy( pcBuffer, pcTaskName );
 800f276:	0020      	movs	r0, r4
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f278:	015b      	lsls	r3, r3, #5
 800f27a:	18eb      	adds	r3, r5, r3
		strcpy( pcBuffer, pcTaskName );
 800f27c:	6859      	ldr	r1, [r3, #4]
 800f27e:	f004 feb8 	bl	8013ff2 <strcpy>
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f282:	0020      	movs	r0, r4
 800f284:	f7f0 ff48 	bl	8000118 <strlen>
 800f288:	280b      	cmp	r0, #11
 800f28a:	d806      	bhi.n	800f29a <vTaskList+0x82>
			pcBuffer[ x ] = ' ';
 800f28c:	464b      	mov	r3, r9
 800f28e:	2120      	movs	r1, #32
 800f290:	1a1a      	subs	r2, r3, r0
 800f292:	1820      	adds	r0, r4, r0
 800f294:	f004 fc81 	bl	8013b9a <memset>
 800f298:	200c      	movs	r0, #12
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f29a:	9b03      	ldr	r3, [sp, #12]
 800f29c:	9a03      	ldr	r2, [sp, #12]
 800f29e:	9903      	ldr	r1, [sp, #12]
		pcBuffer[ x ] = 0x00;
 800f2a0:	1824      	adds	r4, r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f2a2:	0149      	lsls	r1, r1, #5
		pcBuffer[ x ] = 0x00;
 800f2a4:	7027      	strb	r7, [r4, #0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f2a6:	1869      	adds	r1, r5, r1
 800f2a8:	6889      	ldr	r1, [r1, #8]
 800f2aa:	015b      	lsls	r3, r3, #5
 800f2ac:	18eb      	adds	r3, r5, r3
 800f2ae:	0152      	lsls	r2, r2, #5
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	18aa      	adds	r2, r5, r2
 800f2b4:	9101      	str	r1, [sp, #4]
 800f2b6:	8b92      	ldrh	r2, [r2, #28]
 800f2b8:	4641      	mov	r1, r8
 800f2ba:	0020      	movs	r0, r4
 800f2bc:	9200      	str	r2, [sp, #0]
 800f2be:	0032      	movs	r2, r6
 800f2c0:	f004 fe5c 	bl	8013f7c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f2c4:	0020      	movs	r0, r4
 800f2c6:	f7f0 ff27 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800f2ca:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f2cc:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	9303      	str	r3, [sp, #12]
 800f2d2:	9a03      	ldr	r2, [sp, #12]
 800f2d4:	9b02      	ldr	r3, [sp, #8]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d3c1      	bcc.n	800f25e <vTaskList+0x46>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f2da:	0028      	movs	r0, r5
 800f2dc:	f000 fc2a 	bl	800fb34 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f2e0:	b004      	add	sp, #16
 800f2e2:	bce0      	pop	{r5, r6, r7}
 800f2e4:	46ba      	mov	sl, r7
 800f2e6:	46b1      	mov	r9, r6
 800f2e8:	46a8      	mov	r8, r5
 800f2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ec:	20002ccc 	.word	0x20002ccc
 800f2f0:	0801cf0c 	.word	0x0801cf0c
 800f2f4:	0801a304 	.word	0x0801a304

0800f2f8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fa:	46de      	mov	lr, fp
 800f2fc:	4657      	mov	r7, sl
 800f2fe:	4645      	mov	r5, r8
 800f300:	464e      	mov	r6, r9
 800f302:	b5e0      	push	{r5, r6, r7, lr}
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f304:	2700      	movs	r7, #0

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f306:	4b38      	ldr	r3, [pc, #224]	; (800f3e8 <vTaskGetRunTimeStats+0xf0>)
	{
 800f308:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 800f30a:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800f30c:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f30e:	9201      	str	r2, [sp, #4]
	{
 800f310:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f312:	69d8      	ldr	r0, [r3, #28]
 800f314:	0140      	lsls	r0, r0, #5
 800f316:	f000 fb93 	bl	800fa40 <pvPortMalloc>
 800f31a:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f31c:	d05d      	beq.n	800f3da <vTaskGetRunTimeStats+0xe2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f31e:	9901      	ldr	r1, [sp, #4]
 800f320:	aa03      	add	r2, sp, #12
 800f322:	f7ff fdfb 	bl	800ef1c <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f326:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f328:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800f32a:	4698      	mov	r8, r3
 800f32c:	0018      	movs	r0, r3
 800f32e:	2164      	movs	r1, #100	; 0x64
 800f330:	f7f0 ff0e 	bl	8000150 <__udivsi3>

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f334:	4643      	mov	r3, r8
			ulTotalTime /= 100UL;
 800f336:	0006      	movs	r6, r0
 800f338:	9003      	str	r0, [sp, #12]
			if( ulTotalTime > 0 )
 800f33a:	2b63      	cmp	r3, #99	; 0x63
 800f33c:	d94a      	bls.n	800f3d4 <vTaskGetRunTimeStats+0xdc>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f33e:	9702      	str	r7, [sp, #8]
 800f340:	9b02      	ldr	r3, [sp, #8]
 800f342:	9a01      	ldr	r2, [sp, #4]
 800f344:	429a      	cmp	r2, r3
 800f346:	d945      	bls.n	800f3d4 <vTaskGetRunTimeStats+0xdc>
			pcBuffer[ x ] = ' ';
 800f348:	230c      	movs	r3, #12
 800f34a:	4698      	mov	r8, r3
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f34c:	4b27      	ldr	r3, [pc, #156]	; (800f3ec <vTaskGetRunTimeStats+0xf4>)
 800f34e:	469a      	mov	sl, r3
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f350:	4b27      	ldr	r3, [pc, #156]	; (800f3f0 <vTaskGetRunTimeStats+0xf8>)
 800f352:	4699      	mov	r9, r3
 800f354:	e019      	b.n	800f38a <vTaskGetRunTimeStats+0x92>
 800f356:	469b      	mov	fp, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f358:	0031      	movs	r1, r6
 800f35a:	0038      	movs	r0, r7
 800f35c:	f7f0 fef8 	bl	8000150 <__udivsi3>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f360:	465a      	mov	r2, fp
 800f362:	0152      	lsls	r2, r2, #5
 800f364:	18aa      	adds	r2, r5, r2
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f366:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f368:	4649      	mov	r1, r9
 800f36a:	0020      	movs	r0, r4
 800f36c:	6992      	ldr	r2, [r2, #24]
 800f36e:	f004 fe05 	bl	8013f7c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f372:	0020      	movs	r0, r4
 800f374:	f7f0 fed0 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800f378:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f37a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f37c:	3301      	adds	r3, #1
 800f37e:	9302      	str	r3, [sp, #8]
 800f380:	9a02      	ldr	r2, [sp, #8]
 800f382:	9b01      	ldr	r3, [sp, #4]
 800f384:	429a      	cmp	r2, r3
 800f386:	d225      	bcs.n	800f3d4 <vTaskGetRunTimeStats+0xdc>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f388:	9e03      	ldr	r6, [sp, #12]
 800f38a:	9b02      	ldr	r3, [sp, #8]
		strcpy( pcBuffer, pcTaskName );
 800f38c:	0020      	movs	r0, r4
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f38e:	015b      	lsls	r3, r3, #5
 800f390:	18eb      	adds	r3, r5, r3
 800f392:	699f      	ldr	r7, [r3, #24]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f394:	9b02      	ldr	r3, [sp, #8]
 800f396:	015b      	lsls	r3, r3, #5
 800f398:	18eb      	adds	r3, r5, r3
		strcpy( pcBuffer, pcTaskName );
 800f39a:	6859      	ldr	r1, [r3, #4]
 800f39c:	f004 fe29 	bl	8013ff2 <strcpy>
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f3a0:	0020      	movs	r0, r4
 800f3a2:	f7f0 feb9 	bl	8000118 <strlen>
 800f3a6:	280b      	cmp	r0, #11
 800f3a8:	d806      	bhi.n	800f3b8 <vTaskGetRunTimeStats+0xc0>
			pcBuffer[ x ] = ' ';
 800f3aa:	4643      	mov	r3, r8
 800f3ac:	2120      	movs	r1, #32
 800f3ae:	1a1a      	subs	r2, r3, r0
 800f3b0:	1820      	adds	r0, r4, r0
 800f3b2:	f004 fbf2 	bl	8013b9a <memset>
 800f3b6:	200c      	movs	r0, #12
		pcBuffer[ x ] = 0x00;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	1824      	adds	r4, r4, r0
 800f3bc:	7023      	strb	r3, [r4, #0]
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f3be:	9b02      	ldr	r3, [sp, #8]
					if( ulStatsAsPercentage > 0UL )
 800f3c0:	42b7      	cmp	r7, r6
 800f3c2:	d2c8      	bcs.n	800f356 <vTaskGetRunTimeStats+0x5e>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f3c4:	015b      	lsls	r3, r3, #5
 800f3c6:	18eb      	adds	r3, r5, r3
 800f3c8:	4651      	mov	r1, sl
 800f3ca:	0020      	movs	r0, r4
 800f3cc:	699a      	ldr	r2, [r3, #24]
 800f3ce:	f004 fdd5 	bl	8013f7c <sprintf>
 800f3d2:	e7ce      	b.n	800f372 <vTaskGetRunTimeStats+0x7a>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f3d4:	0028      	movs	r0, r5
 800f3d6:	f000 fbad 	bl	800fb34 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3da:	b005      	add	sp, #20
 800f3dc:	bcf0      	pop	{r4, r5, r6, r7}
 800f3de:	46bb      	mov	fp, r7
 800f3e0:	46b2      	mov	sl, r6
 800f3e2:	46a9      	mov	r9, r5
 800f3e4:	46a0      	mov	r8, r4
 800f3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e8:	20002ccc 	.word	0x20002ccc
 800f3ec:	0801cf28 	.word	0x0801cf28
 800f3f0:	0801cf1c 	.word	0x0801cf1c

0800f3f4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3f4:	4b04      	ldr	r3, [pc, #16]	; (800f408 <pvTaskIncrementMutexHeldCount+0x14>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	d003      	beq.n	800f404 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3fc:	6819      	ldr	r1, [r3, #0]
 800f3fe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f400:	3201      	adds	r2, #1
 800f402:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f404:	6818      	ldr	r0, [r3, #0]
	}
 800f406:	4770      	bx	lr
 800f408:	20002ccc 	.word	0x20002ccc

0800f40c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	0006      	movs	r6, r0
 800f410:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f412:	f000 fa9b 	bl	800f94c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f416:	4c1c      	ldr	r4, [pc, #112]	; (800f488 <ulTaskNotifyTake+0x7c>)
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f420:	2101      	movs	r1, #1
 800f422:	6822      	ldr	r2, [r4, #0]
 800f424:	335c      	adds	r3, #92	; 0x5c
 800f426:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f428:	2d00      	cmp	r5, #0
 800f42a:	d119      	bne.n	800f460 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f42c:	f000 fa9a 	bl	800f964 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f430:	f000 fa8c 	bl	800f94c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d004      	beq.n	800f446 <ulTaskNotifyTake+0x3a>
			{
				if( xClearCountOnExit != pdFALSE )
 800f43c:	2e00      	cmp	r6, #0
 800f43e:	d00a      	beq.n	800f456 <ulTaskNotifyTake+0x4a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f440:	2200      	movs	r2, #0
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f446:	235c      	movs	r3, #92	; 0x5c
 800f448:	2100      	movs	r1, #0
 800f44a:	6822      	ldr	r2, [r4, #0]
 800f44c:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f44e:	f000 fa89 	bl	800f964 <vPortExitCritical>

		return ulReturn;
	}
 800f452:	0028      	movs	r0, r5
 800f454:	bd70      	pop	{r4, r5, r6, pc}
					( pxCurrentTCB->ulNotifiedValue )--;
 800f456:	6822      	ldr	r2, [r4, #0]
 800f458:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f45a:	3b01      	subs	r3, #1
 800f45c:	6593      	str	r3, [r2, #88]	; 0x58
 800f45e:	e7f2      	b.n	800f446 <ulTaskNotifyTake+0x3a>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f460:	6820      	ldr	r0, [r4, #0]
 800f462:	3004      	adds	r0, #4
 800f464:	f7fe fef0 	bl	800e248 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f468:	1c6b      	adds	r3, r5, #1
 800f46a:	d006      	beq.n	800f47a <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800f46c:	6860      	ldr	r0, [r4, #4]
 800f46e:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f470:	f7ff fa30 	bl	800e8d4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f474:	f000 fa5e 	bl	800f934 <vPortYield>
 800f478:	e7d8      	b.n	800f42c <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f47a:	0020      	movs	r0, r4
 800f47c:	6821      	ldr	r1, [r4, #0]
 800f47e:	3070      	adds	r0, #112	; 0x70
 800f480:	3104      	adds	r1, #4
 800f482:	f7fe febd 	bl	800e200 <vListInsertEnd>
 800f486:	e7f5      	b.n	800f474 <ulTaskNotifyTake+0x68>
 800f488:	20002ccc 	.word	0x20002ccc

0800f48c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	001e      	movs	r6, r3
 800f490:	0005      	movs	r5, r0
 800f492:	000f      	movs	r7, r1
 800f494:	0014      	movs	r4, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f496:	f000 fa59 	bl	800f94c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f49a:	2e00      	cmp	r6, #0
 800f49c:	d001      	beq.n	800f4a2 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f49e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f4a0:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f4a2:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800f4a4:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f4a6:	5cab      	ldrb	r3, [r5, r2]
			pxTCB->eNotifyState = eNotified;
 800f4a8:	54a9      	strb	r1, [r5, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f4aa:	b2db      	uxtb	r3, r3

			switch( eAction )
 800f4ac:	2c03      	cmp	r4, #3
 800f4ae:	d012      	beq.n	800f4d6 <xTaskGenericNotify+0x4a>
 800f4b0:	d80d      	bhi.n	800f4ce <xTaskGenericNotify+0x42>
 800f4b2:	2c01      	cmp	r4, #1
 800f4b4:	d02c      	beq.n	800f510 <xTaskGenericNotify+0x84>
 800f4b6:	2c02      	cmp	r4, #2
 800f4b8:	d102      	bne.n	800f4c0 <xTaskGenericNotify+0x34>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f4ba:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f4bc:	3201      	adds	r2, #1
 800f4be:	65aa      	str	r2, [r5, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d00b      	beq.n	800f4dc <xTaskGenericNotify+0x50>
 800f4c4:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f4c6:	f000 fa4d 	bl	800f964 <vPortExitCritical>

		return xReturn;
	}
 800f4ca:	0020      	movs	r0, r4
 800f4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch( eAction )
 800f4ce:	2c04      	cmp	r4, #4
 800f4d0:	d1f6      	bne.n	800f4c0 <xTaskGenericNotify+0x34>
					if( eOriginalNotifyState != eNotified )
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d022      	beq.n	800f51c <xTaskGenericNotify+0x90>
						pxTCB->ulNotifiedValue = ulValue;
 800f4d6:	65af      	str	r7, [r5, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d1f3      	bne.n	800f4c4 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f4dc:	1d2e      	adds	r6, r5, #4
 800f4de:	0030      	movs	r0, r6
 800f4e0:	f7fe feb2 	bl	800e248 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f4e4:	4c0e      	ldr	r4, [pc, #56]	; (800f520 <xTaskGenericNotify+0x94>)
 800f4e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4e8:	69a2      	ldr	r2, [r4, #24]
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d900      	bls.n	800f4f0 <xTaskGenericNotify+0x64>
 800f4ee:	61a3      	str	r3, [r4, #24]
 800f4f0:	0098      	lsls	r0, r3, #2
 800f4f2:	18c0      	adds	r0, r0, r3
 800f4f4:	4b0b      	ldr	r3, [pc, #44]	; (800f524 <xTaskGenericNotify+0x98>)
 800f4f6:	0080      	lsls	r0, r0, #2
 800f4f8:	18c0      	adds	r0, r0, r3
 800f4fa:	0031      	movs	r1, r6
 800f4fc:	f7fe fe80 	bl	800e200 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f500:	6823      	ldr	r3, [r4, #0]
 800f502:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f506:	429a      	cmp	r2, r3
 800f508:	d9dc      	bls.n	800f4c4 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800f50a:	f000 fa13 	bl	800f934 <vPortYield>
 800f50e:	e7d9      	b.n	800f4c4 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800f510:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f512:	430f      	orrs	r7, r1
 800f514:	65af      	str	r7, [r5, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 800f516:	2b01      	cmp	r3, #1
 800f518:	d1d4      	bne.n	800f4c4 <xTaskGenericNotify+0x38>
 800f51a:	e7df      	b.n	800f4dc <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 800f51c:	2400      	movs	r4, #0
 800f51e:	e7d2      	b.n	800f4c6 <xTaskGenericNotify+0x3a>
 800f520:	20002ccc 	.word	0x20002ccc
 800f524:	20002d68 	.word	0x20002d68

0800f528 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f528:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f52a:	f000 fa0f 	bl	800f94c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f52e:	4c0f      	ldr	r4, [pc, #60]	; (800f56c <prvCheckForValidListAndQueue+0x44>)
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d002      	beq.n	800f53c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f536:	f000 fa15 	bl	800f964 <vPortExitCritical>
}
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800f53c:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800f53e:	1d26      	adds	r6, r4, #4
 800f540:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800f542:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800f544:	f7fe fe4c 	bl	800e1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f548:	0028      	movs	r0, r5
 800f54a:	f7fe fe49 	bl	800e1e0 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f54e:	2200      	movs	r2, #0
 800f550:	2110      	movs	r1, #16
 800f552:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800f554:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800f556:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f558:	f7fe ff0c 	bl	800e374 <xQueueGenericCreate>
 800f55c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800f55e:	2800      	cmp	r0, #0
 800f560:	d0e9      	beq.n	800f536 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f562:	4903      	ldr	r1, [pc, #12]	; (800f570 <prvCheckForValidListAndQueue+0x48>)
 800f564:	f7ff f930 	bl	800e7c8 <vQueueAddToRegistry>
 800f568:	e7e5      	b.n	800f536 <prvCheckForValidListAndQueue+0xe>
 800f56a:	46c0      	nop			; (mov r8, r8)
 800f56c:	20002df4 	.word	0x20002df4
 800f570:	0801cf34 	.word	0x0801cf34

0800f574 <xTimerCreateTimerTask>:
{
 800f574:	b500      	push	{lr}
 800f576:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f578:	f7ff ffd6 	bl	800f528 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f57c:	4b08      	ldr	r3, [pc, #32]	; (800f5a0 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800f57e:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f586:	2303      	movs	r3, #3
 800f588:	9003      	str	r0, [sp, #12]
 800f58a:	9002      	str	r0, [sp, #8]
 800f58c:	9001      	str	r0, [sp, #4]
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	2296      	movs	r2, #150	; 0x96
 800f592:	2300      	movs	r3, #0
 800f594:	4903      	ldr	r1, [pc, #12]	; (800f5a4 <xTimerCreateTimerTask+0x30>)
 800f596:	4804      	ldr	r0, [pc, #16]	; (800f5a8 <xTimerCreateTimerTask+0x34>)
 800f598:	f7ff fa10 	bl	800e9bc <xTaskGenericCreate>
}
 800f59c:	b005      	add	sp, #20
 800f59e:	bd00      	pop	{pc}
 800f5a0:	20002df4 	.word	0x20002df4
 800f5a4:	0801cf3c 	.word	0x0801cf3c
 800f5a8:	0800f6ad 	.word	0x0800f6ad

0800f5ac <xTimerCreate>:
{
 800f5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ae:	46c6      	mov	lr, r8
 800f5b0:	0007      	movs	r7, r0
 800f5b2:	000d      	movs	r5, r1
 800f5b4:	4690      	mov	r8, r2
 800f5b6:	001e      	movs	r6, r3
		pxNewTimer = NULL;
 800f5b8:	2400      	movs	r4, #0
{
 800f5ba:	b500      	push	{lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	d010      	beq.n	800f5e2 <xTimerCreate+0x36>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f5c0:	202c      	movs	r0, #44	; 0x2c
 800f5c2:	f000 fa3d 	bl	800fa40 <pvPortMalloc>
 800f5c6:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f5c8:	d00b      	beq.n	800f5e2 <xTimerCreate+0x36>
			prvCheckForValidListAndQueue();
 800f5ca:	f7ff ffad 	bl	800f528 <prvCheckForValidListAndQueue>
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f5ce:	4643      	mov	r3, r8
 800f5d0:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f5d2:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->pcTimerName = pcTimerName;
 800f5d4:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f5d6:	61a5      	str	r5, [r4, #24]
			pxNewTimer->pvTimerID = pvTimerID;
 800f5d8:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f5da:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f5dc:	1d20      	adds	r0, r4, #4
 800f5de:	f7fe fe0b 	bl	800e1f8 <vListInitialiseItem>
}
 800f5e2:	0020      	movs	r0, r4
 800f5e4:	bc80      	pop	{r7}
 800f5e6:	46b8      	mov	r8, r7
 800f5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ea:	46c0      	nop			; (mov r8, r8)

0800f5ec <xTimerGenericCommand>:
{
 800f5ec:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800f5ee:	4e13      	ldr	r6, [pc, #76]	; (800f63c <xTimerGenericCommand+0x50>)
{
 800f5f0:	001c      	movs	r4, r3
	if( xTimerQueue != NULL )
 800f5f2:	6835      	ldr	r5, [r6, #0]
{
 800f5f4:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800f5f6:	2d00      	cmp	r5, #0
 800f5f8:	d017      	beq.n	800f62a <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800f5fa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f5fc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f5fe:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f600:	2905      	cmp	r1, #5
 800f602:	dc0a      	bgt.n	800f61a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f604:	f7ff fd9e 	bl	800f144 <xTaskGetSchedulerState>
 800f608:	2802      	cmp	r0, #2
 800f60a:	d010      	beq.n	800f62e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f60c:	2300      	movs	r3, #0
 800f60e:	2200      	movs	r2, #0
 800f610:	4669      	mov	r1, sp
 800f612:	6830      	ldr	r0, [r6, #0]
 800f614:	f7fe ff16 	bl	800e444 <xQueueGenericSend>
 800f618:	e005      	b.n	800f626 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f61a:	2300      	movs	r3, #0
 800f61c:	0022      	movs	r2, r4
 800f61e:	4669      	mov	r1, sp
 800f620:	0028      	movs	r0, r5
 800f622:	f7fe ff8b 	bl	800e53c <xQueueGenericSendFromISR>
}
 800f626:	b004      	add	sp, #16
 800f628:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800f62a:	2000      	movs	r0, #0
	return xReturn;
 800f62c:	e7fb      	b.n	800f626 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f62e:	2300      	movs	r3, #0
 800f630:	4669      	mov	r1, sp
 800f632:	6830      	ldr	r0, [r6, #0]
 800f634:	9a08      	ldr	r2, [sp, #32]
 800f636:	f7fe ff05 	bl	800e444 <xQueueGenericSend>
 800f63a:	e7f4      	b.n	800f626 <xTimerGenericCommand+0x3a>
 800f63c:	20002df4 	.word	0x20002df4

0800f640 <prvSwitchTimerLists>:
{
 800f640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f642:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f644:	2300      	movs	r3, #0
{
 800f646:	b500      	push	{lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f648:	4698      	mov	r8, r3
 800f64a:	4e17      	ldr	r6, [pc, #92]	; (800f6a8 <prvSwitchTimerLists+0x68>)
{
 800f64c:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f64e:	e00c      	b.n	800f66a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f650:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f652:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f654:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f656:	1d25      	adds	r5, r4, #4
 800f658:	0028      	movs	r0, r5
 800f65a:	f7fe fdf5 	bl	800e248 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f660:	0020      	movs	r0, r4
 800f662:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f664:	69e3      	ldr	r3, [r4, #28]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d00a      	beq.n	800f680 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f66a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	2a00      	cmp	r2, #0
 800f670:	d1ee      	bne.n	800f650 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800f672:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800f674:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800f676:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800f678:	b002      	add	sp, #8
 800f67a:	bc80      	pop	{r7}
 800f67c:	46b8      	mov	r8, r7
 800f67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f680:	69a3      	ldr	r3, [r4, #24]
 800f682:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f684:	429f      	cmp	r7, r3
 800f686:	d206      	bcs.n	800f696 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f688:	0029      	movs	r1, r5
 800f68a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f68c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f68e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f690:	f7fe fdc2 	bl	800e218 <vListInsert>
 800f694:	e7e9      	b.n	800f66a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f696:	4643      	mov	r3, r8
 800f698:	003a      	movs	r2, r7
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	2100      	movs	r1, #0
 800f69e:	2300      	movs	r3, #0
 800f6a0:	0020      	movs	r0, r4
 800f6a2:	f7ff ffa3 	bl	800f5ec <xTimerGenericCommand>
 800f6a6:	e7e0      	b.n	800f66a <prvSwitchTimerLists+0x2a>
 800f6a8:	20002df4 	.word	0x20002df4

0800f6ac <prvTimerTask>:
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6ac:	2300      	movs	r3, #0
{
 800f6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b0:	4646      	mov	r6, r8
 800f6b2:	46d6      	mov	lr, sl
 800f6b4:	464f      	mov	r7, r9
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6b6:	4698      	mov	r8, r3
{
 800f6b8:	b5c0      	push	{r6, r7, lr}
 800f6ba:	4c6a      	ldr	r4, [pc, #424]	; (800f864 <prvTimerTask+0x1b8>)
 800f6bc:	4e6a      	ldr	r6, [pc, #424]	; (800f868 <prvTimerTask+0x1bc>)
 800f6be:	b08a      	sub	sp, #40	; 0x28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6c2:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6c4:	2f00      	cmp	r7, #0
 800f6c6:	d073      	beq.n	800f7b0 <prvTimerTask+0x104>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f6cc:	f7ff fad6 	bl	800ec7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f6d0:	f7ff fadc 	bl	800ec8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f6d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f6d6:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 800f6d8:	4298      	cmp	r0, r3
 800f6da:	d371      	bcc.n	800f7c0 <prvTimerTask+0x114>
	xLastTime = xTimeNow;
 800f6dc:	6360      	str	r0, [r4, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f6de:	42b8      	cmp	r0, r7
 800f6e0:	d300      	bcc.n	800f6e4 <prvTimerTask+0x38>
 800f6e2:	e08b      	b.n	800f7fc <prvTimerTask+0x150>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f6e4:	6820      	ldr	r0, [r4, #0]
 800f6e6:	1b79      	subs	r1, r7, r5
 800f6e8:	f7ff f882 	bl	800e7f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6ec:	f7ff fb6a 	bl	800edc4 <xTaskResumeAll>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d077      	beq.n	800f7e4 <prvTimerTask+0x138>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	6820      	ldr	r0, [r4, #0]
 800f6fa:	a906      	add	r1, sp, #24
 800f6fc:	f7fe ff82 	bl	800e604 <xQueueGenericReceive>
 800f700:	2800      	cmp	r0, #0
 800f702:	d0dd      	beq.n	800f6c0 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f704:	9b06      	ldr	r3, [sp, #24]
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	db43      	blt.n	800f794 <prvTimerTask+0xe8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f70c:	9d08      	ldr	r5, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f70e:	696b      	ldr	r3, [r5, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <prvTimerTask+0x6e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f714:	1d28      	adds	r0, r5, #4
 800f716:	f7fe fd97 	bl	800e248 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f71a:	f7ff fab7 	bl	800ec8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f720:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f722:	4298      	cmp	r0, r3
 800f724:	d352      	bcc.n	800f7cc <prvTimerTask+0x120>
			switch( xMessage.xMessageID )
 800f726:	9b06      	ldr	r3, [sp, #24]
	xLastTime = xTimeNow;
 800f728:	6367      	str	r7, [r4, #52]	; 0x34
			switch( xMessage.xMessageID )
 800f72a:	2b09      	cmp	r3, #9
 800f72c:	d8e2      	bhi.n	800f6f4 <prvTimerTask+0x48>
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	58f3      	ldr	r3, [r6, r3]
 800f732:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f734:	9807      	ldr	r0, [sp, #28]
 800f736:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f738:	612d      	str	r5, [r5, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f73a:	1842      	adds	r2, r0, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f73c:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f73e:	42ba      	cmp	r2, r7
 800f740:	d853      	bhi.n	800f7ea <prvTimerTask+0x13e>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f742:	1a38      	subs	r0, r7, r0
 800f744:	4281      	cmp	r1, r0
 800f746:	d81c      	bhi.n	800f782 <prvTimerTask+0xd6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f748:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f74a:	0028      	movs	r0, r5
 800f74c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f74e:	69eb      	ldr	r3, [r5, #28]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d1cf      	bne.n	800f6f4 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f754:	9b07      	ldr	r3, [sp, #28]
 800f756:	2100      	movs	r1, #0
 800f758:	001a      	movs	r2, r3
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	69ab      	ldr	r3, [r5, #24]
 800f75e:	0028      	movs	r0, r5
 800f760:	469c      	mov	ip, r3
 800f762:	4643      	mov	r3, r8
 800f764:	4462      	add	r2, ip
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2300      	movs	r3, #0
 800f76a:	f7ff ff3f 	bl	800f5ec <xTimerGenericCommand>
							( void ) xResult;
 800f76e:	e7c1      	b.n	800f6f4 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f770:	9b07      	ldr	r3, [sp, #28]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f772:	612d      	str	r5, [r5, #16]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f774:	19da      	adds	r2, r3, r7
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f776:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f778:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f77a:	42ba      	cmp	r2, r7
 800f77c:	d839      	bhi.n	800f7f2 <prvTimerTask+0x146>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d0b8      	beq.n	800f6f4 <prvTimerTask+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f782:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f784:	1d29      	adds	r1, r5, #4
 800f786:	f7fe fd47 	bl	800e218 <vListInsert>
	return xProcessTimerNow;
 800f78a:	e7b3      	b.n	800f6f4 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 800f78c:	0028      	movs	r0, r5
 800f78e:	f000 f9d1 	bl	800fb34 <vPortFree>
					break;
 800f792:	e7af      	b.n	800f6f4 <prvTimerTask+0x48>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f796:	9303      	str	r3, [sp, #12]
 800f798:	9b08      	ldr	r3, [sp, #32]
 800f79a:	9903      	ldr	r1, [sp, #12]
 800f79c:	9304      	str	r3, [sp, #16]
 800f79e:	9b07      	ldr	r3, [sp, #28]
 800f7a0:	9804      	ldr	r0, [sp, #16]
 800f7a2:	9305      	str	r3, [sp, #20]
 800f7a4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7a6:	9b06      	ldr	r3, [sp, #24]
 800f7a8:	9303      	str	r3, [sp, #12]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	dba2      	blt.n	800f6f4 <prvTimerTask+0x48>
 800f7ae:	e7ad      	b.n	800f70c <prvTimerTask+0x60>
	vTaskSuspendAll();
 800f7b0:	f7ff fa64 	bl	800ec7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f7b4:	f7ff fa6a 	bl	800ec8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f7b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f7ba:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 800f7bc:	4298      	cmp	r0, r3
 800f7be:	d208      	bcs.n	800f7d2 <prvTimerTask+0x126>
		prvSwitchTimerLists();
 800f7c0:	f7ff ff3e 	bl	800f640 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f7c4:	6365      	str	r5, [r4, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f7c6:	f7ff fafd 	bl	800edc4 <xTaskResumeAll>
 800f7ca:	e793      	b.n	800f6f4 <prvTimerTask+0x48>
		prvSwitchTimerLists();
 800f7cc:	f7ff ff38 	bl	800f640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f7d0:	e7a9      	b.n	800f726 <prvTimerTask+0x7a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f7d2:	6820      	ldr	r0, [r4, #0]
 800f7d4:	1b79      	subs	r1, r7, r5
	xLastTime = xTimeNow;
 800f7d6:	6365      	str	r5, [r4, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f7d8:	f7ff f80a 	bl	800e7f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7dc:	f7ff faf2 	bl	800edc4 <xTaskResumeAll>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d187      	bne.n	800f6f4 <prvTimerTask+0x48>
					portYIELD_WITHIN_API();
 800f7e4:	f000 f8a6 	bl	800f934 <vPortYield>
 800f7e8:	e784      	b.n	800f6f4 <prvTimerTask+0x48>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7ea:	42b8      	cmp	r0, r7
 800f7ec:	d901      	bls.n	800f7f2 <prvTimerTask+0x146>
 800f7ee:	4290      	cmp	r0, r2
 800f7f0:	d9aa      	bls.n	800f748 <prvTimerTask+0x9c>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f7f4:	1d29      	adds	r1, r5, #4
 800f7f6:	f7fe fd0f 	bl	800e218 <vListInsert>
 800f7fa:	e77b      	b.n	800f6f4 <prvTimerTask+0x48>
				( void ) xTaskResumeAll();
 800f7fc:	f7ff fae2 	bl	800edc4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	4699      	mov	r9, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f808:	2304      	movs	r3, #4
 800f80a:	444b      	add	r3, r9
 800f80c:	0018      	movs	r0, r3
 800f80e:	469a      	mov	sl, r3
 800f810:	f7fe fd1a 	bl	800e248 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f814:	464b      	mov	r3, r9
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d004      	beq.n	800f826 <prvTimerTask+0x17a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f81c:	464b      	mov	r3, r9
 800f81e:	4648      	mov	r0, r9
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	4798      	blx	r3
}
 800f824:	e766      	b.n	800f6f4 <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f826:	464b      	mov	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f828:	4649      	mov	r1, r9
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f82a:	699b      	ldr	r3, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f82c:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f82e:	18fa      	adds	r2, r7, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f830:	604a      	str	r2, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f832:	4295      	cmp	r5, r2
 800f834:	d204      	bcs.n	800f840 <prvTimerTask+0x194>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f836:	4651      	mov	r1, sl
 800f838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f83a:	f7fe fced 	bl	800e218 <vListInsert>
	return xProcessTimerNow;
 800f83e:	e7ed      	b.n	800f81c <prvTimerTask+0x170>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f840:	1bed      	subs	r5, r5, r7
 800f842:	42ab      	cmp	r3, r5
 800f844:	d808      	bhi.n	800f858 <prvTimerTask+0x1ac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f846:	4643      	mov	r3, r8
 800f848:	003a      	movs	r2, r7
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	2100      	movs	r1, #0
 800f84e:	2300      	movs	r3, #0
 800f850:	4648      	mov	r0, r9
 800f852:	f7ff fecb 	bl	800f5ec <xTimerGenericCommand>
			( void ) xResult;
 800f856:	e7e1      	b.n	800f81c <prvTimerTask+0x170>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f858:	4651      	mov	r1, sl
 800f85a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f85c:	f7fe fcdc 	bl	800e218 <vListInsert>
	return xProcessTimerNow;
 800f860:	e7dc      	b.n	800f81c <prvTimerTask+0x170>
 800f862:	46c0      	nop			; (mov r8, r8)
 800f864:	20002df4 	.word	0x20002df4
 800f868:	0801a31c 	.word	0x0801a31c

0800f86c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f86c:	b510      	push	{r4, lr}
 800f86e:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f870:	f000 f86c 	bl	800f94c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f874:	6964      	ldr	r4, [r4, #20]
	}
	taskEXIT_CRITICAL();
 800f876:	f000 f875 	bl	800f964 <vPortExitCritical>
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f87a:	1e63      	subs	r3, r4, #1
 800f87c:	419c      	sbcs	r4, r3

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f87e:	0020      	movs	r0, r4
 800f880:	bd10      	pop	{r4, pc}
 800f882:	46c0      	nop			; (mov r8, r8)

0800f884 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f884:	b510      	push	{r4, lr}
 800f886:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f888:	f000 f860 	bl	800f94c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f88c:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f88e:	f000 f869 	bl	800f964 <vPortExitCritical>

	return pvReturn;
}
 800f892:	0020      	movs	r0, r4
 800f894:	bd10      	pop	{r4, pc}
 800f896:	46c0      	nop			; (mov r8, r8)

0800f898 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f898:	b672      	cpsid	i
	for( ;; );
 800f89a:	e7fe      	b.n	800f89a <prvTaskExitError+0x2>

0800f89c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f89c:	4a06      	ldr	r2, [pc, #24]	; (800f8b8 <pxCurrentTCBConst2>)
 800f89e:	6813      	ldr	r3, [r2, #0]
 800f8a0:	6818      	ldr	r0, [r3, #0]
 800f8a2:	3020      	adds	r0, #32
 800f8a4:	f380 8809 	msr	PSP, r0
 800f8a8:	2002      	movs	r0, #2
 800f8aa:	f380 8814 	msr	CONTROL, r0
 800f8ae:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f8b0:	46ae      	mov	lr, r5
 800f8b2:	b662      	cpsie	i
 800f8b4:	bd00      	pop	{pc}
 800f8b6:	46c0      	nop			; (mov r8, r8)

0800f8b8 <pxCurrentTCBConst2>:
 800f8b8:	20002ccc 	.word	0x20002ccc

0800f8bc <pxPortInitialiseStack>:
{
 800f8bc:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f8be:	2480      	movs	r4, #128	; 0x80
 800f8c0:	1f03      	subs	r3, r0, #4
 800f8c2:	0464      	lsls	r4, r4, #17
 800f8c4:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f8c6:	3b04      	subs	r3, #4
 800f8c8:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8ca:	4903      	ldr	r1, [pc, #12]	; (800f8d8 <pxPortInitialiseStack+0x1c>)
 800f8cc:	3b04      	subs	r3, #4
 800f8ce:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8d0:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f8d2:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8d4:	601a      	str	r2, [r3, #0]
}
 800f8d6:	bd10      	pop	{r4, pc}
 800f8d8:	0800f899 	.word	0x0800f899

0800f8dc <SVC_Handler>:
 800f8dc:	4770      	bx	lr
 800f8de:	46c0      	nop			; (mov r8, r8)

0800f8e0 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f8e0:	22ff      	movs	r2, #255	; 0xff
 800f8e2:	4b0f      	ldr	r3, [pc, #60]	; (800f920 <xPortStartScheduler+0x40>)
 800f8e4:	0412      	lsls	r2, r2, #16
 800f8e6:	6819      	ldr	r1, [r3, #0]
{
 800f8e8:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f8ea:	430a      	orrs	r2, r1
 800f8ec:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f8ee:	22ff      	movs	r2, #255	; 0xff
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	0612      	lsls	r2, r2, #24
 800f8f4:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8f6:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f8f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8fa:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <xPortStartScheduler+0x44>)
 800f8fc:	0089      	lsls	r1, r1, #2
 800f8fe:	6818      	ldr	r0, [r3, #0]
 800f900:	f7f0 fc26 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f904:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <xPortStartScheduler+0x48>)
 800f908:	3801      	subs	r0, #1
 800f90a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f90c:	4b07      	ldr	r3, [pc, #28]	; (800f92c <xPortStartScheduler+0x4c>)
 800f90e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f910:	2200      	movs	r2, #0
 800f912:	4b07      	ldr	r3, [pc, #28]	; (800f930 <xPortStartScheduler+0x50>)
 800f914:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f916:	f7ff ffc1 	bl	800f89c <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f91a:	b672      	cpsid	i
	for( ;; );
 800f91c:	e7fe      	b.n	800f91c <xPortStartScheduler+0x3c>
 800f91e:	46c0      	nop			; (mov r8, r8)
 800f920:	e000ed20 	.word	0xe000ed20
 800f924:	200000b8 	.word	0x200000b8
 800f928:	e000e014 	.word	0xe000e014
 800f92c:	e000e010 	.word	0xe000e010
 800f930:	200000cc 	.word	0x200000cc

0800f934 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f934:	2280      	movs	r2, #128	; 0x80
 800f936:	4b04      	ldr	r3, [pc, #16]	; (800f948 <vPortYield+0x14>)
 800f938:	0552      	lsls	r2, r2, #21
 800f93a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f93c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f940:	f3bf 8f6f 	isb	sy
}
 800f944:	4770      	bx	lr
 800f946:	46c0      	nop			; (mov r8, r8)
 800f948:	e000ed04 	.word	0xe000ed04

0800f94c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f94c:	b672      	cpsid	i
    uxCriticalNesting++;
 800f94e:	4a04      	ldr	r2, [pc, #16]	; (800f960 <vPortEnterCritical+0x14>)
 800f950:	6813      	ldr	r3, [r2, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f956:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f95a:	f3bf 8f6f 	isb	sy
}
 800f95e:	4770      	bx	lr
 800f960:	200000cc 	.word	0x200000cc

0800f964 <vPortExitCritical>:
    uxCriticalNesting--;
 800f964:	4a03      	ldr	r2, [pc, #12]	; (800f974 <vPortExitCritical+0x10>)
 800f966:	6813      	ldr	r3, [r2, #0]
 800f968:	3b01      	subs	r3, #1
 800f96a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d100      	bne.n	800f972 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f970:	b662      	cpsie	i
}
 800f972:	4770      	bx	lr
 800f974:	200000cc 	.word	0x200000cc

0800f978 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f978:	f3ef 8010 	mrs	r0, PRIMASK
 800f97c:	b672      	cpsid	i
 800f97e:	4770      	bx	lr
}
 800f980:	2000      	movs	r0, #0
 800f982:	46c0      	nop			; (mov r8, r8)

0800f984 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f984:	f380 8810 	msr	PRIMASK, r0
 800f988:	4770      	bx	lr
 800f98a:	46c0      	nop			; (mov r8, r8)

0800f98c <PendSV_Handler>:
	__asm volatile
 800f98c:	f3ef 8009 	mrs	r0, PSP
 800f990:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <pxCurrentTCBConst>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	3820      	subs	r0, #32
 800f996:	6010      	str	r0, [r2, #0]
 800f998:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f99a:	4644      	mov	r4, r8
 800f99c:	464d      	mov	r5, r9
 800f99e:	4656      	mov	r6, sl
 800f9a0:	465f      	mov	r7, fp
 800f9a2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f9a4:	b508      	push	{r3, lr}
 800f9a6:	b672      	cpsid	i
 800f9a8:	f7ff fb1a 	bl	800efe0 <vTaskSwitchContext>
 800f9ac:	b662      	cpsie	i
 800f9ae:	bc0c      	pop	{r2, r3}
 800f9b0:	6811      	ldr	r1, [r2, #0]
 800f9b2:	6808      	ldr	r0, [r1, #0]
 800f9b4:	3010      	adds	r0, #16
 800f9b6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f9b8:	46a0      	mov	r8, r4
 800f9ba:	46a9      	mov	r9, r5
 800f9bc:	46b2      	mov	sl, r6
 800f9be:	46bb      	mov	fp, r7
 800f9c0:	f380 8809 	msr	PSP, r0
 800f9c4:	3820      	subs	r0, #32
 800f9c6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f9c8:	4718      	bx	r3
 800f9ca:	46c0      	nop			; (mov r8, r8)

0800f9cc <pxCurrentTCBConst>:
 800f9cc:	20002ccc 	.word	0x20002ccc

0800f9d0 <xPortSysTickHandler>:
{
 800f9d0:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f9d2:	f7ff ffd1 	bl	800f978 <ulSetInterruptMaskFromISR>
 800f9d6:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f9d8:	f7ff f964 	bl	800eca4 <xTaskIncrementTick>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d003      	beq.n	800f9e8 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f9e0:	2280      	movs	r2, #128	; 0x80
 800f9e2:	4b03      	ldr	r3, [pc, #12]	; (800f9f0 <xPortSysTickHandler+0x20>)
 800f9e4:	0552      	lsls	r2, r2, #21
 800f9e6:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f9e8:	0020      	movs	r0, r4
 800f9ea:	f7ff ffcb 	bl	800f984 <vClearInterruptMaskFromISR>
}
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	e000ed04 	.word	0xe000ed04

0800f9f4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9f4:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9f6:	4c11      	ldr	r4, [pc, #68]	; (800fa3c <prvInsertBlockIntoFreeList+0x48>)
 800f9f8:	0023      	movs	r3, r4
 800f9fa:	001a      	movs	r2, r3
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4283      	cmp	r3, r0
 800fa00:	d3fb      	bcc.n	800f9fa <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa02:	6851      	ldr	r1, [r2, #4]
 800fa04:	1855      	adds	r5, r2, r1
 800fa06:	42a8      	cmp	r0, r5
 800fa08:	d012      	beq.n	800fa30 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa0a:	6841      	ldr	r1, [r0, #4]
 800fa0c:	1845      	adds	r5, r0, r1
 800fa0e:	42ab      	cmp	r3, r5
 800fa10:	d004      	beq.n	800fa1c <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa12:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa14:	4290      	cmp	r0, r2
 800fa16:	d000      	beq.n	800fa1a <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa18:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa1a:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa1c:	68a4      	ldr	r4, [r4, #8]
 800fa1e:	42a3      	cmp	r3, r4
 800fa20:	d0f7      	beq.n	800fa12 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa22:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa24:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa26:	46a4      	mov	ip, r4
 800fa28:	4461      	add	r1, ip
 800fa2a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa2c:	6003      	str	r3, [r0, #0]
 800fa2e:	e7f1      	b.n	800fa14 <prvInsertBlockIntoFreeList+0x20>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa30:	6840      	ldr	r0, [r0, #4]
 800fa32:	1809      	adds	r1, r1, r0
 800fa34:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800fa36:	0010      	movs	r0, r2
 800fa38:	e7e8      	b.n	800fa0c <prvInsertBlockIntoFreeList+0x18>
 800fa3a:	46c0      	nop			; (mov r8, r8)
 800fa3c:	20002e2c 	.word	0x20002e2c

0800fa40 <pvPortMalloc>:
{
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	46ce      	mov	lr, r9
 800fa44:	4647      	mov	r7, r8
 800fa46:	b580      	push	{r7, lr}
 800fa48:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800fa4a:	f7ff f917 	bl	800ec7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fa4e:	4d36      	ldr	r5, [pc, #216]	; (800fb28 <pvPortMalloc+0xe8>)
 800fa50:	68ab      	ldr	r3, [r5, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d049      	beq.n	800faea <pvPortMalloc+0xaa>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa56:	68ee      	ldr	r6, [r5, #12]
 800fa58:	4226      	tst	r6, r4
 800fa5a:	d134      	bne.n	800fac6 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800fa5c:	2c00      	cmp	r4, #0
 800fa5e:	d032      	beq.n	800fac6 <pvPortMalloc+0x86>
				xWantedSize += xHeapStructSize;
 800fa60:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa62:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800fa64:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa66:	420b      	tst	r3, r1
 800fa68:	d001      	beq.n	800fa6e <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa6a:	4399      	bics	r1, r3
 800fa6c:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa6e:	2900      	cmp	r1, #0
 800fa70:	d029      	beq.n	800fac6 <pvPortMalloc+0x86>
 800fa72:	696b      	ldr	r3, [r5, #20]
 800fa74:	4699      	mov	r9, r3
 800fa76:	428b      	cmp	r3, r1
 800fa78:	d325      	bcc.n	800fac6 <pvPortMalloc+0x86>
				pxPreviousBlock = &xStart;
 800fa7a:	0028      	movs	r0, r5
				pxBlock = xStart.pxNextFreeBlock;
 800fa7c:	682c      	ldr	r4, [r5, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7e:	e004      	b.n	800fa8a <pvPortMalloc+0x4a>
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d004      	beq.n	800fa90 <pvPortMalloc+0x50>
 800fa86:	0020      	movs	r0, r4
 800fa88:	001c      	movs	r4, r3
 800fa8a:	6862      	ldr	r2, [r4, #4]
 800fa8c:	428a      	cmp	r2, r1
 800fa8e:	d3f7      	bcc.n	800fa80 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 800fa90:	68ab      	ldr	r3, [r5, #8]
 800fa92:	42a3      	cmp	r3, r4
 800fa94:	d017      	beq.n	800fac6 <pvPortMalloc+0x86>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa96:	2708      	movs	r7, #8
 800fa98:	46bc      	mov	ip, r7
 800fa9a:	6803      	ldr	r3, [r0, #0]
 800fa9c:	4463      	add	r3, ip
 800fa9e:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faa0:	6823      	ldr	r3, [r4, #0]
 800faa2:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800faa4:	1a53      	subs	r3, r2, r1
 800faa6:	2b10      	cmp	r3, #16
 800faa8:	d818      	bhi.n	800fadc <pvPortMalloc+0x9c>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800faaa:	464b      	mov	r3, r9
 800faac:	1a9f      	subs	r7, r3, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800faae:	692b      	ldr	r3, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fab0:	616f      	str	r7, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fab2:	429f      	cmp	r7, r3
 800fab4:	d200      	bcs.n	800fab8 <pvPortMalloc+0x78>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fab6:	612f      	str	r7, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800fab8:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800faba:	4332      	orrs	r2, r6
 800fabc:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fabe:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fac0:	f7ff f980 	bl	800edc4 <xTaskResumeAll>
	return pvReturn;
 800fac4:	e005      	b.n	800fad2 <pvPortMalloc+0x92>
	( void ) xTaskResumeAll();
 800fac6:	f7ff f97d 	bl	800edc4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800faca:	f7fd fc71 	bl	800d3b0 <vApplicationMallocFailedHook>
 800face:	2300      	movs	r3, #0
 800fad0:	4698      	mov	r8, r3
}
 800fad2:	4640      	mov	r0, r8
 800fad4:	bcc0      	pop	{r6, r7}
 800fad6:	46b9      	mov	r9, r7
 800fad8:	46b0      	mov	r8, r6
 800fada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fadc:	1860      	adds	r0, r4, r1
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fade:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fae0:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fae2:	f7ff ff87 	bl	800f9f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fae6:	6862      	ldr	r2, [r4, #4]
 800fae8:	e7df      	b.n	800faaa <pvPortMalloc+0x6a>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800faea:	2307      	movs	r3, #7
	ulAddress = ( uint32_t ) ucHeap;
 800faec:	490f      	ldr	r1, [pc, #60]	; (800fb2c <pvPortMalloc+0xec>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800faee:	420b      	tst	r3, r1
 800faf0:	d114      	bne.n	800fb1c <pvPortMalloc+0xdc>
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800faf2:	000a      	movs	r2, r1
 800faf4:	4b0e      	ldr	r3, [pc, #56]	; (800fb30 <pvPortMalloc+0xf0>)
 800faf6:	18cb      	adds	r3, r1, r3
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800faf8:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800fafa:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fafc:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fafe:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800fb00:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fb02:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb04:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800fb06:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb08:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800fb0a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb0c:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800fb0e:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fb10:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb12:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb14:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb16:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb18:	60ee      	str	r6, [r5, #12]
}
 800fb1a:	e79d      	b.n	800fa58 <pvPortMalloc+0x18>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb1c:	1dca      	adds	r2, r1, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fb1e:	439a      	bics	r2, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800fb20:	4b03      	ldr	r3, [pc, #12]	; (800fb30 <pvPortMalloc+0xf0>)
 800fb22:	18cb      	adds	r3, r1, r3
	pucAlignedHeap = ( uint8_t * ) ulAddress;
 800fb24:	0011      	movs	r1, r2
 800fb26:	e7e7      	b.n	800faf8 <pvPortMalloc+0xb8>
 800fb28:	20002e2c 	.word	0x20002e2c
 800fb2c:	20002e44 	.word	0x20002e44
 800fb30:	00003f48 	.word	0x00003f48

0800fb34 <vPortFree>:
{
 800fb34:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d009      	beq.n	800fb4e <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb3a:	4d0d      	ldr	r5, [pc, #52]	; (800fb70 <vPortFree+0x3c>)
 800fb3c:	3808      	subs	r0, #8
 800fb3e:	6843      	ldr	r3, [r0, #4]
 800fb40:	68ea      	ldr	r2, [r5, #12]
 800fb42:	0004      	movs	r4, r0
 800fb44:	421a      	tst	r2, r3
 800fb46:	d002      	beq.n	800fb4e <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800fb48:	6801      	ldr	r1, [r0, #0]
 800fb4a:	2900      	cmp	r1, #0
 800fb4c:	d000      	beq.n	800fb50 <vPortFree+0x1c>
}
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb50:	4393      	bics	r3, r2
 800fb52:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800fb54:	f7ff f892 	bl	800ec7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb58:	696a      	ldr	r2, [r5, #20]
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb5e:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb60:	4463      	add	r3, ip
 800fb62:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb64:	f7ff ff46 	bl	800f9f4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800fb68:	f7ff f92c 	bl	800edc4 <xTaskResumeAll>
}
 800fb6c:	e7ef      	b.n	800fb4e <vPortFree+0x1a>
 800fb6e:	46c0      	nop			; (mov r8, r8)
 800fb70:	20002e2c 	.word	0x20002e2c

0800fb74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fb74:	b510      	push	{r4, lr}
 800fb76:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fb78:	f002 f9b4 	bl	8011ee4 <HAL_RCC_GetHCLKFreq>
 800fb7c:	21fa      	movs	r1, #250	; 0xfa
 800fb7e:	0089      	lsls	r1, r1, #2
 800fb80:	f7f0 fae6 	bl	8000150 <__udivsi3>
 800fb84:	f000 fb9e 	bl	80102c4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fb88:	2001      	movs	r0, #1
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	0021      	movs	r1, r4
 800fb8e:	4240      	negs	r0, r0
 800fb90:	f000 fb52 	bl	8010238 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fb94:	2000      	movs	r0, #0
 800fb96:	bd10      	pop	{r4, pc}

0800fb98 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fb98:	2110      	movs	r1, #16
 800fb9a:	4a06      	ldr	r2, [pc, #24]	; (800fbb4 <HAL_Init+0x1c>)
{
 800fb9c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fb9e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fba0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fba2:	430b      	orrs	r3, r1
 800fba4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fba6:	f7ff ffe5 	bl	800fb74 <HAL_InitTick>
  HAL_MspInit();
 800fbaa:	f001 fd81 	bl	80116b0 <HAL_MspInit>
}
 800fbae:	2000      	movs	r0, #0
 800fbb0:	bd10      	pop	{r4, pc}
 800fbb2:	46c0      	nop			; (mov r8, r8)
 800fbb4:	40022000 	.word	0x40022000

0800fbb8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fbb8:	4a02      	ldr	r2, [pc, #8]	; (800fbc4 <HAL_IncTick+0xc>)
 800fbba:	6813      	ldr	r3, [r2, #0]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	6013      	str	r3, [r2, #0]
}
 800fbc0:	4770      	bx	lr
 800fbc2:	46c0      	nop			; (mov r8, r8)
 800fbc4:	20006d8c 	.word	0x20006d8c

0800fbc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800fbc8:	4b01      	ldr	r3, [pc, #4]	; (800fbd0 <HAL_GetTick+0x8>)
 800fbca:	6818      	ldr	r0, [r3, #0]
}
 800fbcc:	4770      	bx	lr
 800fbce:	46c0      	nop			; (mov r8, r8)
 800fbd0:	20006d8c 	.word	0x20006d8c

0800fbd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fbda:	f7ff fff5 	bl	800fbc8 <HAL_GetTick>
 800fbde:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fbe0:	f7ff fff2 	bl	800fbc8 <HAL_GetTick>
 800fbe4:	9b01      	ldr	r3, [sp, #4]
 800fbe6:	1b00      	subs	r0, r0, r4
 800fbe8:	4298      	cmp	r0, r3
 800fbea:	d3f9      	bcc.n	800fbe0 <HAL_Delay+0xc>
  {
  }
}
 800fbec:	b002      	add	sp, #8
 800fbee:	bd10      	pop	{r4, pc}

0800fbf0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800fbf0:	4b01      	ldr	r3, [pc, #4]	; (800fbf8 <HAL_GetREVID+0x8>)
 800fbf2:	6818      	ldr	r0, [r3, #0]
 800fbf4:	0c00      	lsrs	r0, r0, #16
}
 800fbf6:	4770      	bx	lr
 800fbf8:	40015800 	.word	0x40015800

0800fbfc <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <HAL_GetDEVID+0xc>)
 800fbfe:	6818      	ldr	r0, [r3, #0]
 800fc00:	0500      	lsls	r0, r0, #20
 800fc02:	0d00      	lsrs	r0, r0, #20
}
 800fc04:	4770      	bx	lr
 800fc06:	46c0      	nop			; (mov r8, r8)
 800fc08:	40015800 	.word	0x40015800

0800fc0c <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	6802      	ldr	r2, [r0, #0]
{
 800fc10:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc12:	6891      	ldr	r1, [r2, #8]
{
 800fc14:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc16:	400b      	ands	r3, r1
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d001      	beq.n	800fc20 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800fc1c:	2000      	movs	r0, #0
}
 800fc1e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc20:	6811      	ldr	r1, [r2, #0]
 800fc22:	420b      	tst	r3, r1
 800fc24:	d00e      	beq.n	800fc44 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800fc26:	2305      	movs	r3, #5
 800fc28:	6891      	ldr	r1, [r2, #8]
 800fc2a:	400b      	ands	r3, r1
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d00d      	beq.n	800fc4c <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc30:	2210      	movs	r2, #16
 800fc32:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800fc34:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc36:	4313      	orrs	r3, r2
 800fc38:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc3c:	3a0f      	subs	r2, #15
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fc42:	e7ec      	b.n	800fc1e <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc44:	68d3      	ldr	r3, [r2, #12]
 800fc46:	041b      	lsls	r3, r3, #16
 800fc48:	d5e8      	bpl.n	800fc1c <ADC_Disable+0x10>
 800fc4a:	e7ec      	b.n	800fc26 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 800fc4c:	2102      	movs	r1, #2
 800fc4e:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fc50:	2601      	movs	r6, #1
      __HAL_ADC_DISABLE(hadc);
 800fc52:	430b      	orrs	r3, r1
 800fc54:	6093      	str	r3, [r2, #8]
 800fc56:	2303      	movs	r3, #3
 800fc58:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fc5a:	f7ff ffb5 	bl	800fbc8 <HAL_GetTick>
 800fc5e:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fc60:	e004      	b.n	800fc6c <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fc62:	f7ff ffb1 	bl	800fbc8 <HAL_GetTick>
 800fc66:	1b40      	subs	r0, r0, r5
 800fc68:	2802      	cmp	r0, #2
 800fc6a:	d804      	bhi.n	800fc76 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fc6c:	6823      	ldr	r3, [r4, #0]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	421e      	tst	r6, r3
 800fc72:	d1f6      	bne.n	800fc62 <ADC_Disable+0x56>
 800fc74:	e7d2      	b.n	800fc1c <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc76:	2210      	movs	r2, #16
 800fc78:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fc7a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc82:	431e      	orrs	r6, r3
 800fc84:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fc86:	e7ca      	b.n	800fc1e <ADC_Disable+0x12>

0800fc88 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800fc88:	2300      	movs	r3, #0
{
 800fc8a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc8c:	6802      	ldr	r2, [r0, #0]
{
 800fc8e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800fc90:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc92:	6891      	ldr	r1, [r2, #8]
 800fc94:	3303      	adds	r3, #3
{
 800fc96:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc98:	400b      	ands	r3, r1
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d031      	beq.n	800fd02 <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800fc9e:	6891      	ldr	r1, [r2, #8]
 800fca0:	4b20      	ldr	r3, [pc, #128]	; (800fd24 <ADC_Enable+0x9c>)
 800fca2:	4219      	tst	r1, r3
 800fca4:	d123      	bne.n	800fcee <ADC_Enable+0x66>
    __HAL_ADC_ENABLE(hadc);
 800fca6:	2101      	movs	r1, #1
 800fca8:	6893      	ldr	r3, [r2, #8]
 800fcaa:	430b      	orrs	r3, r1
 800fcac:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800fcae:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <ADC_Enable+0xa0>)
 800fcb0:	491e      	ldr	r1, [pc, #120]	; (800fd2c <ADC_Enable+0xa4>)
 800fcb2:	6818      	ldr	r0, [r3, #0]
 800fcb4:	f7f0 fa4c 	bl	8000150 <__udivsi3>
 800fcb8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fcba:	9b01      	ldr	r3, [sp, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d005      	beq.n	800fccc <ADC_Enable+0x44>
      wait_loop_index--;
 800fcc0:	9b01      	ldr	r3, [sp, #4]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800fcc6:	9b01      	ldr	r3, [sp, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1f9      	bne.n	800fcc0 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800fccc:	f7ff ff7c 	bl	800fbc8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fcd0:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 800fcd2:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fcd4:	e004      	b.n	800fce0 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fcd6:	f7ff ff77 	bl	800fbc8 <HAL_GetTick>
 800fcda:	1b40      	subs	r0, r0, r5
 800fcdc:	2802      	cmp	r0, #2
 800fcde:	d817      	bhi.n	800fd10 <ADC_Enable+0x88>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fce0:	6823      	ldr	r3, [r4, #0]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	421e      	tst	r6, r3
 800fce6:	d0f6      	beq.n	800fcd6 <ADC_Enable+0x4e>
  return HAL_OK;
 800fce8:	2000      	movs	r0, #0
}
 800fcea:	b002      	add	sp, #8
 800fcec:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcee:	2210      	movs	r2, #16
 800fcf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800fcf2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcfa:	3a0f      	subs	r2, #15
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fd00:	e7f3      	b.n	800fcea <ADC_Enable+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd02:	6811      	ldr	r1, [r2, #0]
 800fd04:	420b      	tst	r3, r1
 800fd06:	d1ef      	bne.n	800fce8 <ADC_Enable+0x60>
 800fd08:	68d3      	ldr	r3, [r2, #12]
 800fd0a:	041b      	lsls	r3, r3, #16
 800fd0c:	d4ec      	bmi.n	800fce8 <ADC_Enable+0x60>
 800fd0e:	e7c6      	b.n	800fc9e <ADC_Enable+0x16>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd10:	2210      	movs	r2, #16
 800fd12:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fd14:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd16:	4313      	orrs	r3, r2
 800fd18:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd1c:	431e      	orrs	r6, r3
 800fd1e:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fd20:	e7e3      	b.n	800fcea <ADC_Enable+0x62>
 800fd22:	46c0      	nop			; (mov r8, r8)
 800fd24:	80000017 	.word	0x80000017
 800fd28:	200000b8 	.word	0x200000b8
 800fd2c:	000f4240 	.word	0x000f4240

0800fd30 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fd30:	2204      	movs	r2, #4
 800fd32:	6803      	ldr	r3, [r0, #0]
{
 800fd34:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fd36:	6899      	ldr	r1, [r3, #8]
{
 800fd38:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fd3a:	420a      	tst	r2, r1
 800fd3c:	d010      	beq.n	800fd60 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fd3e:	6899      	ldr	r1, [r3, #8]
 800fd40:	420a      	tst	r2, r1
 800fd42:	d10f      	bne.n	800fd64 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800fd44:	f7ff ff40 	bl	800fbc8 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fd48:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800fd4a:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fd4c:	e004      	b.n	800fd58 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800fd4e:	f7ff ff3b 	bl	800fbc8 <HAL_GetTick>
 800fd52:	1b40      	subs	r0, r0, r5
 800fd54:	2802      	cmp	r0, #2
 800fd56:	d80d      	bhi.n	800fd74 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fd58:	6823      	ldr	r3, [r4, #0]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	421e      	tst	r6, r3
 800fd5e:	d1f6      	bne.n	800fd4e <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800fd60:	2000      	movs	r0, #0
}
 800fd62:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800fd64:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fd66:	0792      	lsls	r2, r2, #30
 800fd68:	d4ec      	bmi.n	800fd44 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800fd6a:	2110      	movs	r1, #16
 800fd6c:	689a      	ldr	r2, [r3, #8]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	609a      	str	r2, [r3, #8]
 800fd72:	e7e7      	b.n	800fd44 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd74:	2210      	movs	r2, #16
 800fd76:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fd78:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd80:	3a0f      	subs	r2, #15
 800fd82:	4313      	orrs	r3, r2
 800fd84:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fd86:	e7ec      	b.n	800fd62 <ADC_ConversionStop+0x32>

0800fd88 <HAL_ADC_Init>:
{
 800fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800fd8c:	d100      	bne.n	800fd90 <HAL_ADC_Init+0x8>
 800fd8e:	e083      	b.n	800fe98 <HAL_ADC_Init+0x110>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fd90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d06a      	beq.n	800fe6c <HAL_ADC_Init+0xe4>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800fd96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd98:	06db      	lsls	r3, r3, #27
 800fd9a:	d461      	bmi.n	800fe60 <HAL_ADC_Init+0xd8>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800fd9c:	2104      	movs	r1, #4
 800fd9e:	000d      	movs	r5, r1
 800fda0:	6823      	ldr	r3, [r4, #0]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	4015      	ands	r5, r2
      (tmp_hal_status == HAL_OK)                                &&
 800fda6:	4211      	tst	r1, r2
 800fda8:	d15a      	bne.n	800fe60 <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800fdaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fdac:	4943      	ldr	r1, [pc, #268]	; (800febc <HAL_ADC_Init+0x134>)
 800fdae:	400a      	ands	r2, r1
 800fdb0:	3106      	adds	r1, #6
 800fdb2:	31ff      	adds	r1, #255	; 0xff
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fdb8:	2203      	movs	r2, #3
 800fdba:	6899      	ldr	r1, [r3, #8]
 800fdbc:	400a      	ands	r2, r1
 800fdbe:	2a01      	cmp	r2, #1
 800fdc0:	d05a      	beq.n	800fe78 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800fdc2:	2118      	movs	r1, #24
 800fdc4:	68da      	ldr	r2, [r3, #12]
 800fdc6:	438a      	bics	r2, r1
 800fdc8:	68a1      	ldr	r1, [r4, #8]
 800fdca:	430a      	orrs	r2, r1
 800fdcc:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800fdce:	691a      	ldr	r2, [r3, #16]
 800fdd0:	6861      	ldr	r1, [r4, #4]
 800fdd2:	0092      	lsls	r2, r2, #2
 800fdd4:	0892      	lsrs	r2, r2, #2
 800fdd6:	430a      	orrs	r2, r1
 800fdd8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fdda:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fddc:	68da      	ldr	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fdde:	3801      	subs	r0, #1
 800fde0:	1e47      	subs	r7, r0, #1
 800fde2:	41b8      	sbcs	r0, r7
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fde4:	4936      	ldr	r1, [pc, #216]	; (800fec0 <HAL_ADC_Init+0x138>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fde6:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fde8:	400a      	ands	r2, r1
 800fdea:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fdec:	69a2      	ldr	r2, [r4, #24]
 800fdee:	68e7      	ldr	r7, [r4, #12]
 800fdf0:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fdf2:	69e2      	ldr	r2, [r4, #28]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fdf4:	0300      	lsls	r0, r0, #12
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fdf6:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fdf8:	4311      	orrs	r1, r2
 800fdfa:	4339      	orrs	r1, r7
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fdfc:	0372      	lsls	r2, r6, #13
 800fdfe:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe00:	6922      	ldr	r2, [r4, #16]
 800fe02:	2a02      	cmp	r2, #2
 800fe04:	d100      	bne.n	800fe08 <HAL_ADC_Init+0x80>
 800fe06:	2504      	movs	r5, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800fe08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe0a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe0c:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fe0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe10:	4302      	orrs	r2, r0
 800fe12:	432a      	orrs	r2, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fe14:	2901      	cmp	r1, #1
 800fe16:	d04b      	beq.n	800feb0 <HAL_ADC_Init+0x128>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fe18:	20c2      	movs	r0, #194	; 0xc2
 800fe1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fe1c:	30ff      	adds	r0, #255	; 0xff
 800fe1e:	4281      	cmp	r1, r0
 800fe20:	d002      	beq.n	800fe28 <HAL_ADC_Init+0xa0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fe22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fe24:	4301      	orrs	r1, r0
 800fe26:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fe28:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fe2a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fe2c:	4311      	orrs	r1, r2
 800fe2e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fe30:	2180      	movs	r1, #128	; 0x80
 800fe32:	0549      	lsls	r1, r1, #21
 800fe34:	428d      	cmp	r5, r1
 800fe36:	d026      	beq.n	800fe86 <HAL_ADC_Init+0xfe>
 800fe38:	1e69      	subs	r1, r5, #1
 800fe3a:	2906      	cmp	r1, #6
 800fe3c:	d923      	bls.n	800fe86 <HAL_ADC_Init+0xfe>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	4920      	ldr	r1, [pc, #128]	; (800fec4 <HAL_ADC_Init+0x13c>)
 800fe42:	400b      	ands	r3, r1
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d029      	beq.n	800fe9c <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800fe48:	2212      	movs	r2, #18
 800fe4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800fe4c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800fe4e:	4393      	bics	r3, r2
 800fe50:	3a02      	subs	r2, #2
 800fe52:	4313      	orrs	r3, r2
 800fe54:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fe58:	3a0f      	subs	r2, #15
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800fe5e:	e004      	b.n	800fe6a <HAL_ADC_Init+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe60:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800fe62:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe66:	4313      	orrs	r3, r2
 800fe68:	6463      	str	r3, [r4, #68]	; 0x44
}
 800fe6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 800fe6c:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800fe6e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fe70:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fe72:	f7fc fba3 	bl	800c5bc <HAL_ADC_MspInit>
 800fe76:	e78e      	b.n	800fd96 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fe78:	6819      	ldr	r1, [r3, #0]
 800fe7a:	420a      	tst	r2, r1
 800fe7c:	d1ad      	bne.n	800fdda <HAL_ADC_Init+0x52>
 800fe7e:	68da      	ldr	r2, [r3, #12]
 800fe80:	0412      	lsls	r2, r2, #16
 800fe82:	d4aa      	bmi.n	800fdda <HAL_ADC_Init+0x52>
 800fe84:	e79d      	b.n	800fdc2 <HAL_ADC_Init+0x3a>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fe86:	2107      	movs	r1, #7
 800fe88:	6958      	ldr	r0, [r3, #20]
 800fe8a:	4388      	bics	r0, r1
 800fe8c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fe8e:	6958      	ldr	r0, [r3, #20]
 800fe90:	4029      	ands	r1, r5
 800fe92:	4301      	orrs	r1, r0
 800fe94:	6159      	str	r1, [r3, #20]
 800fe96:	e7d2      	b.n	800fe3e <HAL_ADC_Init+0xb6>
    return HAL_ERROR;
 800fe98:	2001      	movs	r0, #1
 800fe9a:	e7e6      	b.n	800fe6a <HAL_ADC_Init+0xe2>
      ADC_CLEAR_ERRORCODE(hadc);
 800fe9c:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fe9e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800fea0:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fea4:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fea6:	4393      	bics	r3, r2
 800fea8:	3a02      	subs	r2, #2
 800feaa:	4313      	orrs	r3, r2
 800feac:	6463      	str	r3, [r4, #68]	; 0x44
 800feae:	e7dc      	b.n	800fe6a <HAL_ADC_Init+0xe2>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800feb0:	2e00      	cmp	r6, #0
 800feb2:	d1b1      	bne.n	800fe18 <HAL_ADC_Init+0x90>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800feb4:	2180      	movs	r1, #128	; 0x80
 800feb6:	0249      	lsls	r1, r1, #9
 800feb8:	430a      	orrs	r2, r1
 800feba:	e7ad      	b.n	800fe18 <HAL_ADC_Init+0x90>
 800febc:	fffffefd 	.word	0xfffffefd
 800fec0:	fffe0219 	.word	0xfffe0219
 800fec4:	833fffe7 	.word	0x833fffe7

0800fec8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fec8:	6803      	ldr	r3, [r0, #0]
{
 800feca:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fecc:	689a      	ldr	r2, [r3, #8]
{
 800fece:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fed0:	0752      	lsls	r2, r2, #29
 800fed2:	d421      	bmi.n	800ff18 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800fed4:	2240      	movs	r2, #64	; 0x40
 800fed6:	5c81      	ldrb	r1, [r0, r2]
 800fed8:	2901      	cmp	r1, #1
 800feda:	d01d      	beq.n	800ff18 <HAL_ADC_Start+0x50>
 800fedc:	2101      	movs	r1, #1
 800fede:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fee0:	69c2      	ldr	r2, [r0, #28]
 800fee2:	2a01      	cmp	r2, #1
 800fee4:	d112      	bne.n	800ff0c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800fee6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fee8:	490c      	ldr	r1, [pc, #48]	; (800ff1c <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800feea:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800feec:	4011      	ands	r1, r2
 800feee:	2280      	movs	r2, #128	; 0x80
 800fef0:	0052      	lsls	r2, r2, #1
 800fef2:	430a      	orrs	r2, r1
 800fef4:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fef6:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800fef8:	2200      	movs	r2, #0
 800fefa:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fefc:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fefe:	321c      	adds	r2, #28
 800ff00:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	393c      	subs	r1, #60	; 0x3c
 800ff06:	430a      	orrs	r2, r1
 800ff08:	609a      	str	r2, [r3, #8]
}
 800ff0a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800ff0c:	f7ff febc 	bl	800fc88 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d1fa      	bne.n	800ff0a <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	e7e6      	b.n	800fee6 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800ff18:	2002      	movs	r0, #2
 800ff1a:	e7f6      	b.n	800ff0a <HAL_ADC_Start+0x42>
 800ff1c:	fffff0fe 	.word	0xfffff0fe

0800ff20 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800ff20:	2340      	movs	r3, #64	; 0x40
{ 
 800ff22:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800ff24:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800ff26:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800ff28:	2a01      	cmp	r2, #1
 800ff2a:	d014      	beq.n	800ff56 <HAL_ADC_Stop+0x36>
 800ff2c:	2501      	movs	r5, #1
 800ff2e:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ff30:	f7ff fefe 	bl	800fd30 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d003      	beq.n	800ff40 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800ff38:	2340      	movs	r3, #64	; 0x40
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	54e2      	strb	r2, [r4, r3]
}
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800ff40:	0020      	movs	r0, r4
 800ff42:	f7ff fe63 	bl	800fc0c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d1f6      	bne.n	800ff38 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800ff4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff4c:	4a03      	ldr	r2, [pc, #12]	; (800ff5c <HAL_ADC_Stop+0x3c>)
 800ff4e:	4013      	ands	r3, r2
 800ff50:	431d      	orrs	r5, r3
 800ff52:	6465      	str	r5, [r4, #68]	; 0x44
 800ff54:	e7f0      	b.n	800ff38 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800ff56:	2002      	movs	r0, #2
 800ff58:	e7f1      	b.n	800ff3e <HAL_ADC_Stop+0x1e>
 800ff5a:	46c0      	nop			; (mov r8, r8)
 800ff5c:	fffffefe 	.word	0xfffffefe

0800ff60 <HAL_ADC_PollForConversion>:
{
 800ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ff62:	6945      	ldr	r5, [r0, #20]
{
 800ff64:	0006      	movs	r6, r0
 800ff66:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ff68:	2d08      	cmp	r5, #8
 800ff6a:	d004      	beq.n	800ff76 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800ff6c:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800ff6e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	07db      	lsls	r3, r3, #31
 800ff74:	d43e      	bmi.n	800fff4 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800ff76:	f7ff fe27 	bl	800fbc8 <HAL_GetTick>
 800ff7a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800ff7c:	6832      	ldr	r2, [r6, #0]
 800ff7e:	e001      	b.n	800ff84 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800ff80:	1c63      	adds	r3, r4, #1
 800ff82:	d127      	bne.n	800ffd4 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800ff84:	6813      	ldr	r3, [r2, #0]
 800ff86:	421d      	tst	r5, r3
 800ff88:	d0fa      	beq.n	800ff80 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ff8a:	2380      	movs	r3, #128	; 0x80
 800ff8c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	430b      	orrs	r3, r1
 800ff92:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ff94:	23c0      	movs	r3, #192	; 0xc0
 800ff96:	68d1      	ldr	r1, [r2, #12]
 800ff98:	011b      	lsls	r3, r3, #4
 800ff9a:	4219      	tst	r1, r3
 800ff9c:	d113      	bne.n	800ffc6 <HAL_ADC_PollForConversion+0x66>
 800ff9e:	6a33      	ldr	r3, [r6, #32]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d110      	bne.n	800ffc6 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800ffa4:	6813      	ldr	r3, [r2, #0]
 800ffa6:	071b      	lsls	r3, r3, #28
 800ffa8:	d50d      	bpl.n	800ffc6 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ffaa:	6893      	ldr	r3, [r2, #8]
 800ffac:	075b      	lsls	r3, r3, #29
 800ffae:	d42a      	bmi.n	8010006 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800ffb0:	210c      	movs	r1, #12
 800ffb2:	6853      	ldr	r3, [r2, #4]
 800ffb4:	438b      	bics	r3, r1
 800ffb6:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800ffb8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ffba:	4917      	ldr	r1, [pc, #92]	; (8010018 <HAL_ADC_PollForConversion+0xb8>)
 800ffbc:	400b      	ands	r3, r1
 800ffbe:	3104      	adds	r1, #4
 800ffc0:	31ff      	adds	r1, #255	; 0xff
 800ffc2:	430b      	orrs	r3, r1
 800ffc4:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800ffc6:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800ffc8:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d101      	bne.n	800ffd2 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ffce:	330c      	adds	r3, #12
 800ffd0:	6013      	str	r3, [r2, #0]
}
 800ffd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ffd4:	2c00      	cmp	r4, #0
 800ffd6:	d004      	beq.n	800ffe2 <HAL_ADC_PollForConversion+0x82>
 800ffd8:	f7ff fdf6 	bl	800fbc8 <HAL_GetTick>
 800ffdc:	1bc0      	subs	r0, r0, r7
 800ffde:	42a0      	cmp	r0, r4
 800ffe0:	d9cc      	bls.n	800ff7c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ffe2:	2204      	movs	r2, #4
 800ffe4:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800ffe6:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800ffec:	2200      	movs	r2, #0
 800ffee:	2340      	movs	r3, #64	; 0x40
 800fff0:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fff2:	e7ee      	b.n	800ffd2 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fff4:	2220      	movs	r2, #32
 800fff6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fff8:	4313      	orrs	r3, r2
 800fffa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fffc:	2200      	movs	r2, #0
 800fffe:	2340      	movs	r3, #64	; 0x40
 8010000:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010002:	2001      	movs	r0, #1
 8010004:	e7e5      	b.n	800ffd2 <HAL_ADC_PollForConversion+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010006:	2120      	movs	r1, #32
 8010008:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801000a:	430b      	orrs	r3, r1
 801000c:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801000e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010010:	391f      	subs	r1, #31
 8010012:	430b      	orrs	r3, r1
 8010014:	64b3      	str	r3, [r6, #72]	; 0x48
 8010016:	e7d6      	b.n	800ffc6 <HAL_ADC_PollForConversion+0x66>
 8010018:	fffffefe 	.word	0xfffffefe

0801001c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801001c:	2208      	movs	r2, #8
 801001e:	6803      	ldr	r3, [r0, #0]
 8010020:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010022:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010024:	4770      	bx	lr
 8010026:	46c0      	nop			; (mov r8, r8)

08010028 <HAL_ADC_ConvCpltCallback>:
 8010028:	4770      	bx	lr
 801002a:	46c0      	nop			; (mov r8, r8)

0801002c <HAL_ADC_LevelOutOfWindowCallback>:
 801002c:	4770      	bx	lr
 801002e:	46c0      	nop			; (mov r8, r8)

08010030 <HAL_ADC_ErrorCallback>:
 8010030:	4770      	bx	lr
 8010032:	46c0      	nop			; (mov r8, r8)

08010034 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010034:	2204      	movs	r2, #4
 8010036:	6803      	ldr	r3, [r0, #0]
{
 8010038:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 801003a:	6819      	ldr	r1, [r3, #0]
{
 801003c:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 801003e:	420a      	tst	r2, r1
 8010040:	d04a      	beq.n	80100d8 <HAL_ADC_IRQHandler+0xa4>
 8010042:	6859      	ldr	r1, [r3, #4]
 8010044:	420a      	tst	r2, r1
 8010046:	d047      	beq.n	80100d8 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010048:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801004a:	06d2      	lsls	r2, r2, #27
 801004c:	d404      	bmi.n	8010058 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801004e:	2280      	movs	r2, #128	; 0x80
 8010050:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010052:	0092      	lsls	r2, r2, #2
 8010054:	430a      	orrs	r2, r1
 8010056:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010058:	22c0      	movs	r2, #192	; 0xc0
 801005a:	68d9      	ldr	r1, [r3, #12]
 801005c:	0112      	lsls	r2, r2, #4
 801005e:	4211      	tst	r1, r2
 8010060:	d113      	bne.n	801008a <HAL_ADC_IRQHandler+0x56>
 8010062:	6a22      	ldr	r2, [r4, #32]
 8010064:	2a00      	cmp	r2, #0
 8010066:	d110      	bne.n	801008a <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	0712      	lsls	r2, r2, #28
 801006c:	d50d      	bpl.n	801008a <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801006e:	689a      	ldr	r2, [r3, #8]
 8010070:	0752      	lsls	r2, r2, #29
 8010072:	d444      	bmi.n	80100fe <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010074:	210c      	movs	r1, #12
 8010076:	685a      	ldr	r2, [r3, #4]
 8010078:	438a      	bics	r2, r1
 801007a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 801007c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801007e:	4a24      	ldr	r2, [pc, #144]	; (8010110 <HAL_ADC_IRQHandler+0xdc>)
 8010080:	4013      	ands	r3, r2
 8010082:	3204      	adds	r2, #4
 8010084:	32ff      	adds	r2, #255	; 0xff
 8010086:	4313      	orrs	r3, r2
 8010088:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 801008a:	0020      	movs	r0, r4
 801008c:	f7ff ffcc 	bl	8010028 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8010090:	220c      	movs	r2, #12
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010096:	2580      	movs	r5, #128	; 0x80
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	4215      	tst	r5, r2
 801009c:	d002      	beq.n	80100a4 <HAL_ADC_IRQHandler+0x70>
 801009e:	685a      	ldr	r2, [r3, #4]
 80100a0:	4215      	tst	r5, r2
 80100a2:	d121      	bne.n	80100e8 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80100a4:	2210      	movs	r2, #16
 80100a6:	6819      	ldr	r1, [r3, #0]
 80100a8:	420a      	tst	r2, r1
 80100aa:	d014      	beq.n	80100d6 <HAL_ADC_IRQHandler+0xa2>
 80100ac:	6859      	ldr	r1, [r3, #4]
 80100ae:	420a      	tst	r2, r1
 80100b0:	d011      	beq.n	80100d6 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80100b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100b4:	2a01      	cmp	r2, #1
 80100b6:	d002      	beq.n	80100be <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80100b8:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80100ba:	07d2      	lsls	r2, r2, #31
 80100bc:	d509      	bpl.n	80100d2 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80100be:	2102      	movs	r1, #2
 80100c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80100c2:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80100c4:	430a      	orrs	r2, r1
 80100c6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80100c8:	2210      	movs	r2, #16
 80100ca:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80100cc:	f7ff ffb0 	bl	8010030 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	2210      	movs	r2, #16
 80100d4:	601a      	str	r2, [r3, #0]
}
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80100d8:	2208      	movs	r2, #8
 80100da:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80100dc:	420a      	tst	r2, r1
 80100de:	d0da      	beq.n	8010096 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80100e0:	6859      	ldr	r1, [r3, #4]
 80100e2:	420a      	tst	r2, r1
 80100e4:	d0d7      	beq.n	8010096 <HAL_ADC_IRQHandler+0x62>
 80100e6:	e7af      	b.n	8010048 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80100e8:	2380      	movs	r3, #128	; 0x80
 80100ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80100ec:	025b      	lsls	r3, r3, #9
 80100ee:	4313      	orrs	r3, r2
 80100f0:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80100f2:	0020      	movs	r0, r4
 80100f4:	f7ff ff9a 	bl	801002c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	601d      	str	r5, [r3, #0]
 80100fc:	e7d2      	b.n	80100a4 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80100fe:	2220      	movs	r2, #32
 8010100:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010102:	4313      	orrs	r3, r2
 8010104:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010106:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010108:	3a1f      	subs	r2, #31
 801010a:	4313      	orrs	r3, r2
 801010c:	64a3      	str	r3, [r4, #72]	; 0x48
 801010e:	e7bc      	b.n	801008a <HAL_ADC_IRQHandler+0x56>
 8010110:	fffffefe 	.word	0xfffffefe

08010114 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8010114:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8010116:	2240      	movs	r2, #64	; 0x40
{
 8010118:	b570      	push	{r4, r5, r6, lr}
 801011a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 801011c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 801011e:	5c83      	ldrb	r3, [r0, r2]
{
 8010120:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010122:	6b85      	ldr	r5, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 8010124:	2b01      	cmp	r3, #1
 8010126:	d05f      	beq.n	80101e8 <HAL_ADC_ConfigChannel+0xd4>
 8010128:	2301      	movs	r3, #1
 801012a:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801012c:	6802      	ldr	r2, [r0, #0]
 801012e:	6890      	ldr	r0, [r2, #8]
 8010130:	0740      	lsls	r0, r0, #29
 8010132:	d509      	bpl.n	8010148 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010134:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8010136:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010138:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801013a:	4313      	orrs	r3, r2
 801013c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 801013e:	2340      	movs	r3, #64	; 0x40
 8010140:	2200      	movs	r2, #0
 8010142:	54e2      	strb	r2, [r4, r3]
}
 8010144:	b002      	add	sp, #8
 8010146:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8010148:	4835      	ldr	r0, [pc, #212]	; (8010220 <HAL_ADC_ConfigChannel+0x10c>)
 801014a:	684e      	ldr	r6, [r1, #4]
 801014c:	4286      	cmp	r6, r0
 801014e:	d02f      	beq.n	80101b0 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010150:	6808      	ldr	r0, [r1, #0]
 8010152:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8010154:	4083      	lsls	r3, r0
 8010156:	4333      	orrs	r3, r6
 8010158:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801015a:	2380      	movs	r3, #128	; 0x80
 801015c:	055b      	lsls	r3, r3, #21
 801015e:	429d      	cmp	r5, r3
 8010160:	d00f      	beq.n	8010182 <HAL_ADC_ConfigChannel+0x6e>
 8010162:	3d01      	subs	r5, #1
 8010164:	2d06      	cmp	r5, #6
 8010166:	d90c      	bls.n	8010182 <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010168:	2307      	movs	r3, #7
 801016a:	688d      	ldr	r5, [r1, #8]
 801016c:	6951      	ldr	r1, [r2, #20]
 801016e:	4019      	ands	r1, r3
 8010170:	428d      	cmp	r5, r1
 8010172:	d006      	beq.n	8010182 <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010174:	6951      	ldr	r1, [r2, #20]
 8010176:	4399      	bics	r1, r3
 8010178:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801017a:	6951      	ldr	r1, [r2, #20]
 801017c:	402b      	ands	r3, r5
 801017e:	430b      	orrs	r3, r1
 8010180:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010182:	0003      	movs	r3, r0
 8010184:	3b10      	subs	r3, #16
 8010186:	2b02      	cmp	r3, #2
 8010188:	d810      	bhi.n	80101ac <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801018a:	4a26      	ldr	r2, [pc, #152]	; (8010224 <HAL_ADC_ConfigChannel+0x110>)
 801018c:	6813      	ldr	r3, [r2, #0]
 801018e:	2810      	cmp	r0, #16
 8010190:	d02e      	beq.n	80101f0 <HAL_ADC_ConfigChannel+0xdc>
 8010192:	3811      	subs	r0, #17
 8010194:	1e41      	subs	r1, r0, #1
 8010196:	4188      	sbcs	r0, r1
 8010198:	21c0      	movs	r1, #192	; 0xc0
 801019a:	4240      	negs	r0, r0
 801019c:	0409      	lsls	r1, r1, #16
 801019e:	4008      	ands	r0, r1
 80101a0:	2180      	movs	r1, #128	; 0x80
 80101a2:	03c9      	lsls	r1, r1, #15
 80101a4:	468c      	mov	ip, r1
 80101a6:	4460      	add	r0, ip
 80101a8:	4318      	orrs	r0, r3
 80101aa:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101ac:	2000      	movs	r0, #0
 80101ae:	e7c6      	b.n	801013e <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80101b0:	6809      	ldr	r1, [r1, #0]
 80101b2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80101b4:	408b      	lsls	r3, r1
 80101b6:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80101b8:	000b      	movs	r3, r1
 80101ba:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80101bc:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80101be:	2b02      	cmp	r3, #2
 80101c0:	d8f4      	bhi.n	80101ac <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101c2:	4b18      	ldr	r3, [pc, #96]	; (8010224 <HAL_ADC_ConfigChannel+0x110>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	2910      	cmp	r1, #16
 80101c8:	d010      	beq.n	80101ec <HAL_ADC_ConfigChannel+0xd8>
 80101ca:	3911      	subs	r1, #17
 80101cc:	424b      	negs	r3, r1
 80101ce:	414b      	adcs	r3, r1
 80101d0:	4259      	negs	r1, r3
 80101d2:	23c0      	movs	r3, #192	; 0xc0
 80101d4:	041b      	lsls	r3, r3, #16
 80101d6:	4019      	ands	r1, r3
 80101d8:	4b13      	ldr	r3, [pc, #76]	; (8010228 <HAL_ADC_ConfigChannel+0x114>)
 80101da:	469c      	mov	ip, r3
 80101dc:	4461      	add	r1, ip
 80101de:	4b11      	ldr	r3, [pc, #68]	; (8010224 <HAL_ADC_ConfigChannel+0x110>)
 80101e0:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101e2:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101e4:	6019      	str	r1, [r3, #0]
 80101e6:	e7aa      	b.n	801013e <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 80101e8:	2002      	movs	r0, #2
 80101ea:	e7ab      	b.n	8010144 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101ec:	490f      	ldr	r1, [pc, #60]	; (801022c <HAL_ADC_ConfigChannel+0x118>)
 80101ee:	e7f6      	b.n	80101de <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101f0:	2180      	movs	r1, #128	; 0x80
 80101f2:	0409      	lsls	r1, r1, #16
 80101f4:	430b      	orrs	r3, r1
 80101f6:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80101f8:	4b0d      	ldr	r3, [pc, #52]	; (8010230 <HAL_ADC_ConfigChannel+0x11c>)
 80101fa:	490e      	ldr	r1, [pc, #56]	; (8010234 <HAL_ADC_ConfigChannel+0x120>)
 80101fc:	6818      	ldr	r0, [r3, #0]
 80101fe:	f7ef ffa7 	bl	8000150 <__udivsi3>
 8010202:	0083      	lsls	r3, r0, #2
 8010204:	181b      	adds	r3, r3, r0
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801020a:	9b01      	ldr	r3, [sp, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d0cd      	beq.n	80101ac <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 8010210:	9b01      	ldr	r3, [sp, #4]
 8010212:	3b01      	subs	r3, #1
 8010214:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010216:	9b01      	ldr	r3, [sp, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1f9      	bne.n	8010210 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801021c:	2000      	movs	r0, #0
 801021e:	e78e      	b.n	801013e <HAL_ADC_ConfigChannel+0x2a>
 8010220:	00001001 	.word	0x00001001
 8010224:	40012708 	.word	0x40012708
 8010228:	feffffff 	.word	0xfeffffff
 801022c:	ff7fffff 	.word	0xff7fffff
 8010230:	200000b8 	.word	0x200000b8
 8010234:	000f4240 	.word	0x000f4240

08010238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010238:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 801023a:	2800      	cmp	r0, #0
 801023c:	db14      	blt.n	8010268 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801023e:	4b15      	ldr	r3, [pc, #84]	; (8010294 <HAL_NVIC_SetPriority+0x5c>)
 8010240:	2203      	movs	r2, #3
 8010242:	469c      	mov	ip, r3
 8010244:	23ff      	movs	r3, #255	; 0xff
 8010246:	0884      	lsrs	r4, r0, #2
 8010248:	4010      	ands	r0, r2
 801024a:	001a      	movs	r2, r3
 801024c:	26c0      	movs	r6, #192	; 0xc0
 801024e:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010250:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010252:	4082      	lsls	r2, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010254:	400b      	ands	r3, r1
 8010256:	4083      	lsls	r3, r0
 8010258:	00a4      	lsls	r4, r4, #2
 801025a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801025c:	00b6      	lsls	r6, r6, #2
 801025e:	59a5      	ldr	r5, [r4, r6]
 8010260:	4395      	bics	r5, r2
 8010262:	432b      	orrs	r3, r5
 8010264:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010266:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010268:	4a0b      	ldr	r2, [pc, #44]	; (8010298 <HAL_NVIC_SetPriority+0x60>)
 801026a:	2403      	movs	r4, #3
 801026c:	4694      	mov	ip, r2
 801026e:	230f      	movs	r3, #15
 8010270:	22ff      	movs	r2, #255	; 0xff
 8010272:	4003      	ands	r3, r0
 8010274:	4020      	ands	r0, r4
 8010276:	0014      	movs	r4, r2
 8010278:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801027a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801027c:	4084      	lsls	r4, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801027e:	400a      	ands	r2, r1
 8010280:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010282:	3b08      	subs	r3, #8
 8010284:	089b      	lsrs	r3, r3, #2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4463      	add	r3, ip
 801028a:	69dd      	ldr	r5, [r3, #28]
 801028c:	43a5      	bics	r5, r4
 801028e:	432a      	orrs	r2, r5
 8010290:	61da      	str	r2, [r3, #28]
}
 8010292:	e7e8      	b.n	8010266 <HAL_NVIC_SetPriority+0x2e>
 8010294:	e000e100 	.word	0xe000e100
 8010298:	e000ed00 	.word	0xe000ed00

0801029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801029c:	231f      	movs	r3, #31
 801029e:	4018      	ands	r0, r3
 80102a0:	3b1e      	subs	r3, #30
 80102a2:	4083      	lsls	r3, r0
 80102a4:	4a01      	ldr	r2, [pc, #4]	; (80102ac <HAL_NVIC_EnableIRQ+0x10>)
 80102a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80102a8:	4770      	bx	lr
 80102aa:	46c0      	nop			; (mov r8, r8)
 80102ac:	e000e100 	.word	0xe000e100

080102b0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80102b0:	231f      	movs	r3, #31
 80102b2:	4018      	ands	r0, r3
 80102b4:	3b1e      	subs	r3, #30
 80102b6:	4083      	lsls	r3, r0
 80102b8:	2280      	movs	r2, #128	; 0x80
 80102ba:	4901      	ldr	r1, [pc, #4]	; (80102c0 <HAL_NVIC_DisableIRQ+0x10>)
 80102bc:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80102be:	4770      	bx	lr
 80102c0:	e000e100 	.word	0xe000e100

080102c4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80102c4:	2280      	movs	r2, #128	; 0x80
 80102c6:	1e43      	subs	r3, r0, #1
 80102c8:	0452      	lsls	r2, r2, #17
 80102ca:	2001      	movs	r0, #1
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d20e      	bcs.n	80102ee <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102d0:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80102d2:	4a07      	ldr	r2, [pc, #28]	; (80102f0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102d4:	4807      	ldr	r0, [pc, #28]	; (80102f4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80102d6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102d8:	6a03      	ldr	r3, [r0, #32]
 80102da:	0609      	lsls	r1, r1, #24
 80102dc:	021b      	lsls	r3, r3, #8
 80102de:	0a1b      	lsrs	r3, r3, #8
 80102e0:	430b      	orrs	r3, r1
 80102e2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80102e4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80102e6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80102e8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80102ea:	3307      	adds	r3, #7
 80102ec:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80102ee:	4770      	bx	lr
 80102f0:	e000e010 	.word	0xe000e010
 80102f4:	e000ed00 	.word	0xe000ed00

080102f8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80102f8:	4a05      	ldr	r2, [pc, #20]	; (8010310 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 80102fa:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80102fc:	2804      	cmp	r0, #4
 80102fe:	d003      	beq.n	8010308 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010300:	2104      	movs	r1, #4
 8010302:	438b      	bics	r3, r1
 8010304:	6013      	str	r3, [r2, #0]
  }
}
 8010306:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010308:	4318      	orrs	r0, r3
 801030a:	6010      	str	r0, [r2, #0]
 801030c:	e7fb      	b.n	8010306 <HAL_SYSTICK_CLKSourceConfig+0xe>
 801030e:	46c0      	nop			; (mov r8, r8)
 8010310:	e000e010 	.word	0xe000e010

08010314 <CRC_Handle_8>:
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010314:	0893      	lsrs	r3, r2, #2
{
 8010316:	b5f0      	push	{r4, r5, r6, r7, lr}
   for(i = 0; i < (BufferLength/4); i++)
 8010318:	469c      	mov	ip, r3
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801031a:	6806      	ldr	r6, [r0, #0]
   for(i = 0; i < (BufferLength/4); i++)
 801031c:	2b00      	cmp	r3, #0
 801031e:	d010      	beq.n	8010342 <CRC_Handle_8+0x2e>
 8010320:	000c      	movs	r4, r1
 8010322:	009f      	lsls	r7, r3, #2
 8010324:	187f      	adds	r7, r7, r1
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010326:	7823      	ldrb	r3, [r4, #0]
 8010328:	7865      	ldrb	r5, [r4, #1]
 801032a:	061b      	lsls	r3, r3, #24
 801032c:	042d      	lsls	r5, r5, #16
 801032e:	432b      	orrs	r3, r5
 8010330:	78e5      	ldrb	r5, [r4, #3]
 8010332:	432b      	orrs	r3, r5
 8010334:	78a5      	ldrb	r5, [r4, #2]
   for(i = 0; i < (BufferLength/4); i++)
 8010336:	3404      	adds	r4, #4
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010338:	022d      	lsls	r5, r5, #8
 801033a:	432b      	orrs	r3, r5
 801033c:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 801033e:	42a7      	cmp	r7, r4
 8010340:	d1f1      	bne.n	8010326 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010342:	2303      	movs	r3, #3
 8010344:	001c      	movs	r4, r3
 8010346:	4014      	ands	r4, r2
 8010348:	4213      	tst	r3, r2
 801034a:	d00b      	beq.n	8010364 <CRC_Handle_8+0x50>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 801034c:	4663      	mov	r3, ip
 801034e:	009b      	lsls	r3, r3, #2
     if  (BufferLength%4 == 1)
 8010350:	2c01      	cmp	r4, #1
 8010352:	d009      	beq.n	8010368 <CRC_Handle_8+0x54>
     }
     if  (BufferLength%4 == 2)
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010354:	5cca      	ldrb	r2, [r1, r3]
 8010356:	18c9      	adds	r1, r1, r3
 8010358:	784b      	ldrb	r3, [r1, #1]
 801035a:	0212      	lsls	r2, r2, #8
 801035c:	4313      	orrs	r3, r2
 801035e:	8033      	strh	r3, [r6, #0]
     if  (BufferLength%4 == 2)
 8010360:	2c02      	cmp	r4, #2
 8010362:	d105      	bne.n	8010370 <CRC_Handle_8+0x5c>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010364:	6830      	ldr	r0, [r6, #0]
}
 8010366:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010368:	5c5b      	ldrb	r3, [r3, r1]
 801036a:	7033      	strb	r3, [r6, #0]
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801036c:	6806      	ldr	r6, [r0, #0]
     if  (BufferLength%4 == 3)
 801036e:	e7f9      	b.n	8010364 <CRC_Handle_8+0x50>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010370:	788b      	ldrb	r3, [r1, #2]
 8010372:	7033      	strb	r3, [r6, #0]
  return hcrc->Instance->DR;
 8010374:	6806      	ldr	r6, [r0, #0]
 8010376:	e7f5      	b.n	8010364 <CRC_Handle_8+0x50>

08010378 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010378:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 801037a:	6806      	ldr	r6, [r0, #0]
  for(i = 0; i < (BufferLength/2); i++)
 801037c:	0857      	lsrs	r7, r2, #1
 801037e:	d00a      	beq.n	8010396 <CRC_Handle_16+0x1e>
 8010380:	0008      	movs	r0, r1
 8010382:	00bd      	lsls	r5, r7, #2
 8010384:	186d      	adds	r5, r5, r1
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010386:	8803      	ldrh	r3, [r0, #0]
 8010388:	8844      	ldrh	r4, [r0, #2]
 801038a:	041b      	lsls	r3, r3, #16
 801038c:	4323      	orrs	r3, r4
  for(i = 0; i < (BufferLength/2); i++)
 801038e:	3004      	adds	r0, #4
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010390:	6033      	str	r3, [r6, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010392:	4285      	cmp	r5, r0
 8010394:	d1f7      	bne.n	8010386 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010396:	07d3      	lsls	r3, r2, #31
 8010398:	d502      	bpl.n	80103a0 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801039a:	00bf      	lsls	r7, r7, #2
 801039c:	5a7b      	ldrh	r3, [r7, r1]
 801039e:	8033      	strh	r3, [r6, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80103a0:	6830      	ldr	r0, [r6, #0]
}
 80103a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103a4 <HAL_CRC_Init>:
{
 80103a4:	b510      	push	{r4, lr}
 80103a6:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80103a8:	d024      	beq.n	80103f4 <HAL_CRC_Init+0x50>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80103aa:	7f43      	ldrb	r3, [r0, #29]
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d022      	beq.n	80103f8 <HAL_CRC_Init+0x54>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80103b2:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80103b4:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80103b6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80103b8:	f000 f8aa 	bl	8010510 <HAL_CRCEx_Init>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d119      	bne.n	80103f4 <HAL_CRC_Init+0x50>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80103c0:	7963      	ldrb	r3, [r4, #5]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d011      	beq.n	80103ea <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	6922      	ldr	r2, [r4, #16]
 80103ca:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80103cc:	2160      	movs	r1, #96	; 0x60
 80103ce:	689a      	ldr	r2, [r3, #8]
 80103d0:	438a      	bics	r2, r1
 80103d2:	6961      	ldr	r1, [r4, #20]
 80103d4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80103d6:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80103d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80103da:	689a      	ldr	r2, [r3, #8]
 80103dc:	438a      	bics	r2, r1
 80103de:	69a1      	ldr	r1, [r4, #24]
 80103e0:	430a      	orrs	r2, r1
 80103e2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80103e4:	2301      	movs	r3, #1
 80103e6:	7763      	strb	r3, [r4, #29]
}
 80103e8:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80103ea:	2201      	movs	r2, #1
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	4252      	negs	r2, r2
 80103f0:	611a      	str	r2, [r3, #16]
 80103f2:	e7eb      	b.n	80103cc <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80103f4:	2001      	movs	r0, #1
 80103f6:	e7f7      	b.n	80103e8 <HAL_CRC_Init+0x44>
    hcrc->Lock = HAL_UNLOCKED;
 80103f8:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80103fa:	f7fb fa05 	bl	800b808 <HAL_CRC_MspInit>
 80103fe:	e7d8      	b.n	80103b2 <HAL_CRC_Init+0xe>

08010400 <HAL_CRC_Accumulate>:
{
 8010400:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 8010402:	7f03      	ldrb	r3, [r0, #28]
{
 8010404:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010406:	2b01      	cmp	r3, #1
 8010408:	d021      	beq.n	801044e <HAL_CRC_Accumulate+0x4e>
 801040a:	2301      	movs	r3, #1
 801040c:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801040e:	3301      	adds	r3, #1
 8010410:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010412:	6a03      	ldr	r3, [r0, #32]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d009      	beq.n	801042c <HAL_CRC_Accumulate+0x2c>
 8010418:	2b03      	cmp	r3, #3
 801041a:	d00d      	beq.n	8010438 <HAL_CRC_Accumulate+0x38>
 801041c:	2b01      	cmp	r3, #1
 801041e:	d008      	beq.n	8010432 <HAL_CRC_Accumulate+0x32>
 8010420:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010422:	2301      	movs	r3, #1
 8010424:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010426:	2300      	movs	r3, #0
 8010428:	7723      	strb	r3, [r4, #28]
}
 801042a:	bd10      	pop	{r4, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801042c:	f7ff ffa4 	bl	8010378 <CRC_Handle_16>
      break;
 8010430:	e7f7      	b.n	8010422 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010432:	f7ff ff6f 	bl	8010314 <CRC_Handle_8>
      break;
 8010436:	e7f4      	b.n	8010422 <HAL_CRC_Accumulate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 8010438:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801043a:	2a00      	cmp	r2, #0
 801043c:	d005      	beq.n	801044a <HAL_CRC_Accumulate+0x4a>
 801043e:	0092      	lsls	r2, r2, #2
 8010440:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010442:	c908      	ldmia	r1!, {r3}
 8010444:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010446:	4291      	cmp	r1, r2
 8010448:	d1fb      	bne.n	8010442 <HAL_CRC_Accumulate+0x42>
      temp = hcrc->Instance->DR;
 801044a:	6800      	ldr	r0, [r0, #0]
      break;
 801044c:	e7e9      	b.n	8010422 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801044e:	2002      	movs	r0, #2
 8010450:	e7eb      	b.n	801042a <HAL_CRC_Accumulate+0x2a>
 8010452:	46c0      	nop			; (mov r8, r8)

08010454 <HAL_CRC_Calculate>:
{
 8010454:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 8010456:	7f03      	ldrb	r3, [r0, #28]
{
 8010458:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801045a:	2b01      	cmp	r3, #1
 801045c:	d026      	beq.n	80104ac <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 801045e:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 8010460:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010462:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010464:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 8010466:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 8010468:	6898      	ldr	r0, [r3, #8]
 801046a:	4328      	orrs	r0, r5
 801046c:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 801046e:	6a20      	ldr	r0, [r4, #32]
 8010470:	2802      	cmp	r0, #2
 8010472:	d009      	beq.n	8010488 <HAL_CRC_Calculate+0x34>
 8010474:	2803      	cmp	r0, #3
 8010476:	d00f      	beq.n	8010498 <HAL_CRC_Calculate+0x44>
 8010478:	2801      	cmp	r0, #1
 801047a:	d009      	beq.n	8010490 <HAL_CRC_Calculate+0x3c>
 801047c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801047e:	2301      	movs	r3, #1
 8010480:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010482:	2300      	movs	r3, #0
 8010484:	7723      	strb	r3, [r4, #28]
}
 8010486:	bd70      	pop	{r4, r5, r6, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010488:	0020      	movs	r0, r4
 801048a:	f7ff ff75 	bl	8010378 <CRC_Handle_16>
      break;
 801048e:	e7f6      	b.n	801047e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010490:	0020      	movs	r0, r4
 8010492:	f7ff ff3f 	bl	8010314 <CRC_Handle_8>
      break;
 8010496:	e7f2      	b.n	801047e <HAL_CRC_Calculate+0x2a>
      for(index = 0; index < BufferLength; index++)
 8010498:	2a00      	cmp	r2, #0
 801049a:	d005      	beq.n	80104a8 <HAL_CRC_Calculate+0x54>
 801049c:	0092      	lsls	r2, r2, #2
 801049e:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80104a0:	c901      	ldmia	r1!, {r0}
 80104a2:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 80104a4:	4291      	cmp	r1, r2
 80104a6:	d1fb      	bne.n	80104a0 <HAL_CRC_Calculate+0x4c>
      temp = hcrc->Instance->DR;
 80104a8:	6818      	ldr	r0, [r3, #0]
      break;
 80104aa:	e7e8      	b.n	801047e <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80104ac:	2002      	movs	r0, #2
 80104ae:	e7ea      	b.n	8010486 <HAL_CRC_Calculate+0x32>

080104b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80104b0:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80104b2:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80104b4:	2501      	movs	r5, #1
 80104b6:	e001      	b.n	80104bc <HAL_CRCEx_Polynomial_Set+0xc>
 80104b8:	3b01      	subs	r3, #1
 80104ba:	d312      	bcc.n	80104e2 <HAL_CRCEx_Polynomial_Set+0x32>
 80104bc:	002c      	movs	r4, r5
 80104be:	409c      	lsls	r4, r3
 80104c0:	4221      	tst	r1, r4
 80104c2:	d0f9      	beq.n	80104b8 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 80104c4:	2a10      	cmp	r2, #16
 80104c6:	d01c      	beq.n	8010502 <HAL_CRCEx_Polynomial_Set+0x52>
 80104c8:	2a18      	cmp	r2, #24
 80104ca:	d012      	beq.n	80104f2 <HAL_CRCEx_Polynomial_Set+0x42>
 80104cc:	2a08      	cmp	r2, #8
 80104ce:	d014      	beq.n	80104fa <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80104d0:	6800      	ldr	r0, [r0, #0]
 80104d2:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80104d4:	2118      	movs	r1, #24
 80104d6:	6883      	ldr	r3, [r0, #8]
 80104d8:	438b      	bics	r3, r1
 80104da:	431a      	orrs	r2, r3
 80104dc:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 80104de:	2000      	movs	r0, #0
}
 80104e0:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 80104e2:	2a18      	cmp	r2, #24
 80104e4:	d8f4      	bhi.n	80104d0 <HAL_CRCEx_Polynomial_Set+0x20>
 80104e6:	4095      	lsls	r5, r2
 80104e8:	4b08      	ldr	r3, [pc, #32]	; (801050c <HAL_CRCEx_Polynomial_Set+0x5c>)
 80104ea:	421d      	tst	r5, r3
 80104ec:	d0f0      	beq.n	80104d0 <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80104ee:	2001      	movs	r0, #1
 80104f0:	e7f6      	b.n	80104e0 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 80104f2:	2b06      	cmp	r3, #6
 80104f4:	d9ec      	bls.n	80104d0 <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80104f6:	2001      	movs	r0, #1
 80104f8:	e7f2      	b.n	80104e0 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 80104fa:	2b0f      	cmp	r3, #15
 80104fc:	d9e8      	bls.n	80104d0 <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80104fe:	2001      	movs	r0, #1
 8010500:	e7ee      	b.n	80104e0 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010502:	2b07      	cmp	r3, #7
 8010504:	d9e4      	bls.n	80104d0 <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010506:	2001      	movs	r0, #1
 8010508:	e7ea      	b.n	80104e0 <HAL_CRCEx_Polynomial_Set+0x30>
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	01010100 	.word	0x01010100

08010510 <HAL_CRCEx_Init>:
{
 8010510:	b510      	push	{r4, lr}
 8010512:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010514:	7900      	ldrb	r0, [r0, #4]
 8010516:	2800      	cmp	r0, #0
 8010518:	d107      	bne.n	801052a <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801051a:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a07      	ldr	r2, [pc, #28]	; (801053c <HAL_CRCEx_Init+0x2c>)
 8010520:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010522:	689a      	ldr	r2, [r3, #8]
 8010524:	438a      	bics	r2, r1
 8010526:	609a      	str	r2, [r3, #8]
}
 8010528:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801052a:	0018      	movs	r0, r3
 801052c:	68da      	ldr	r2, [r3, #12]
 801052e:	6899      	ldr	r1, [r3, #8]
 8010530:	f7ff ffbe 	bl	80104b0 <HAL_CRCEx_Polynomial_Set>
 8010534:	1e43      	subs	r3, r0, #1
 8010536:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010538:	b2c0      	uxtb	r0, r0
 801053a:	e7f5      	b.n	8010528 <HAL_CRCEx_Init+0x18>
 801053c:	04c11db7 	.word	0x04c11db7

08010540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010540:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010542:	2800      	cmp	r0, #0
 8010544:	d023      	beq.n	801058e <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010546:	2321      	movs	r3, #33	; 0x21
 8010548:	5cc3      	ldrb	r3, [r0, r3]
 801054a:	b2da      	uxtb	r2, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d01b      	beq.n	8010588 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010550:	2121      	movs	r1, #33	; 0x21
 8010552:	2302      	movs	r3, #2
 8010554:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010556:	6804      	ldr	r4, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010558:	4a0e      	ldr	r2, [pc, #56]	; (8010594 <HAL_DMA_Init+0x54>)
  tmp = hdma->Instance->CCR;
 801055a:	6823      	ldr	r3, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801055c:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801055e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010560:	6843      	ldr	r3, [r0, #4]
 8010562:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010564:	68c5      	ldr	r5, [r0, #12]
 8010566:	432b      	orrs	r3, r5
 8010568:	6905      	ldr	r5, [r0, #16]
 801056a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801056c:	6945      	ldr	r5, [r0, #20]
 801056e:	432b      	orrs	r3, r5
 8010570:	6985      	ldr	r5, [r0, #24]
 8010572:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010574:	69c5      	ldr	r5, [r0, #28]
 8010576:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010578:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801057a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801057c:	2300      	movs	r3, #0
 801057e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010580:	3301      	adds	r3, #1
 8010582:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010584:	2000      	movs	r0, #0
}  
 8010586:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 8010588:	3320      	adds	r3, #32
 801058a:	54c2      	strb	r2, [r0, r3]
 801058c:	e7e0      	b.n	8010550 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	e7f9      	b.n	8010586 <HAL_DMA_Init+0x46>
 8010592:	46c0      	nop			; (mov r8, r8)
 8010594:	ffffc00f 	.word	0xffffc00f

08010598 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010598:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801059a:	2420      	movs	r4, #32
 801059c:	5d05      	ldrb	r5, [r0, r4]
 801059e:	2d01      	cmp	r5, #1
 80105a0:	d023      	beq.n	80105ea <HAL_DMA_Start_IT+0x52>
 80105a2:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80105a4:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 80105a6:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 80105a8:	3401      	adds	r4, #1
 80105aa:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80105ac:	6804      	ldr	r4, [r0, #0]
 80105ae:	6825      	ldr	r5, [r4, #0]
 80105b0:	43b5      	bics	r5, r6
 80105b2:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80105b4:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80105b6:	6843      	ldr	r3, [r0, #4]
 80105b8:	2b10      	cmp	r3, #16
 80105ba:	d013      	beq.n	80105e4 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80105bc:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80105be:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80105c0:	2202      	movs	r2, #2
  return HAL_OK;    
 80105c2:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80105ca:	6823      	ldr	r3, [r4, #0]
 80105cc:	3202      	adds	r2, #2
 80105ce:	4313      	orrs	r3, r2
 80105d0:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	3204      	adds	r2, #4
 80105d6:	4313      	orrs	r3, r2
 80105d8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 80105da:	6823      	ldr	r3, [r4, #0]
 80105dc:	3a07      	subs	r2, #7
 80105de:	4313      	orrs	r3, r2
 80105e0:	6023      	str	r3, [r4, #0]
} 
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80105e4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80105e6:	60e1      	str	r1, [r4, #12]
 80105e8:	e7ea      	b.n	80105c0 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 80105ea:	2002      	movs	r0, #2
 80105ec:	e7f9      	b.n	80105e2 <HAL_DMA_Start_IT+0x4a>
 80105ee:	46c0      	nop			; (mov r8, r8)

080105f0 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 80105f0:	2101      	movs	r1, #1
 80105f2:	6802      	ldr	r2, [r0, #0]
{
 80105f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 80105f6:	6813      	ldr	r3, [r2, #0]
{
 80105f8:	0005      	movs	r5, r0
  __HAL_DMA_DISABLE(hdma);
 80105fa:	438b      	bics	r3, r1
 80105fc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80105fe:	f7ff fae3 	bl	800fbc8 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010602:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010604:	0006      	movs	r6, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010606:	2401      	movs	r4, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010608:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801060a:	e004      	b.n	8010616 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801060c:	f7ff fadc 	bl	800fbc8 <HAL_GetTick>
 8010610:	1b80      	subs	r0, r0, r6
 8010612:	42b8      	cmp	r0, r7
 8010614:	d80b      	bhi.n	801062e <HAL_DMA_Abort+0x3e>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010616:	0022      	movs	r2, r4
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	401a      	ands	r2, r3
 801061e:	421c      	tst	r4, r3
 8010620:	d1f4      	bne.n	801060c <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 8010622:	2321      	movs	r3, #33	; 0x21
  return HAL_OK; 
 8010624:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8010626:	54ec      	strb	r4, [r5, r3]
  __HAL_UNLOCK(hdma);
 8010628:	3b01      	subs	r3, #1
 801062a:	54ea      	strb	r2, [r5, r3]
}
 801062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801062e:	2220      	movs	r2, #32
 8010630:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010632:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010634:	4313      	orrs	r3, r2
 8010636:	636b      	str	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010638:	2321      	movs	r3, #33	; 0x21
 801063a:	54e9      	strb	r1, [r5, r3]
      __HAL_UNLOCK(hdma);
 801063c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 801063e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 8010640:	54ab      	strb	r3, [r5, r2]
      return HAL_TIMEOUT;
 8010642:	e7f3      	b.n	801062c <HAL_DMA_Abort+0x3c>

08010644 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010644:	6803      	ldr	r3, [r0, #0]
 8010646:	49a4      	ldr	r1, [pc, #656]	; (80108d8 <HAL_DMA_IRQHandler+0x294>)
{        
 8010648:	b570      	push	{r4, r5, r6, lr}
 801064a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801064c:	0018      	movs	r0, r3
 801064e:	428b      	cmp	r3, r1
 8010650:	d931      	bls.n	80106b6 <HAL_DMA_IRQHandler+0x72>
 8010652:	4aa2      	ldr	r2, [pc, #648]	; (80108dc <HAL_DMA_IRQHandler+0x298>)
 8010654:	6815      	ldr	r5, [r2, #0]
 8010656:	4aa2      	ldr	r2, [pc, #648]	; (80108e0 <HAL_DMA_IRQHandler+0x29c>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d031      	beq.n	80106c0 <HAL_DMA_IRQHandler+0x7c>
 801065c:	4aa1      	ldr	r2, [pc, #644]	; (80108e4 <HAL_DMA_IRQHandler+0x2a0>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d06e      	beq.n	8010740 <HAL_DMA_IRQHandler+0xfc>
 8010662:	4aa1      	ldr	r2, [pc, #644]	; (80108e8 <HAL_DMA_IRQHandler+0x2a4>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d100      	bne.n	801066a <HAL_DMA_IRQHandler+0x26>
 8010668:	e2a7      	b.n	8010bba <HAL_DMA_IRQHandler+0x576>
 801066a:	4aa0      	ldr	r2, [pc, #640]	; (80108ec <HAL_DMA_IRQHandler+0x2a8>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d100      	bne.n	8010672 <HAL_DMA_IRQHandler+0x2e>
 8010670:	e333      	b.n	8010cda <HAL_DMA_IRQHandler+0x696>
 8010672:	4a9f      	ldr	r2, [pc, #636]	; (80108f0 <HAL_DMA_IRQHandler+0x2ac>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d100      	bne.n	801067a <HAL_DMA_IRQHandler+0x36>
 8010678:	e12b      	b.n	80108d2 <HAL_DMA_IRQHandler+0x28e>
 801067a:	4a9e      	ldr	r2, [pc, #632]	; (80108f4 <HAL_DMA_IRQHandler+0x2b0>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d100      	bne.n	8010682 <HAL_DMA_IRQHandler+0x3e>
 8010680:	e34e      	b.n	8010d20 <HAL_DMA_IRQHandler+0x6dc>
 8010682:	428b      	cmp	r3, r1
 8010684:	d101      	bne.n	801068a <HAL_DMA_IRQHandler+0x46>
 8010686:	f000 fbed 	bl	8010e64 <HAL_DMA_IRQHandler+0x820>
 801068a:	4a9b      	ldr	r2, [pc, #620]	; (80108f8 <HAL_DMA_IRQHandler+0x2b4>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d017      	beq.n	80106c0 <HAL_DMA_IRQHandler+0x7c>
 8010690:	4a9a      	ldr	r2, [pc, #616]	; (80108fc <HAL_DMA_IRQHandler+0x2b8>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d054      	beq.n	8010740 <HAL_DMA_IRQHandler+0xfc>
 8010696:	4a9a      	ldr	r2, [pc, #616]	; (8010900 <HAL_DMA_IRQHandler+0x2bc>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d100      	bne.n	801069e <HAL_DMA_IRQHandler+0x5a>
 801069c:	e28d      	b.n	8010bba <HAL_DMA_IRQHandler+0x576>
 801069e:	4a99      	ldr	r2, [pc, #612]	; (8010904 <HAL_DMA_IRQHandler+0x2c0>)
 80106a0:	1899      	adds	r1, r3, r2
 80106a2:	424a      	negs	r2, r1
 80106a4:	4151      	adcs	r1, r2
 80106a6:	4a98      	ldr	r2, [pc, #608]	; (8010908 <HAL_DMA_IRQHandler+0x2c4>)
 80106a8:	4249      	negs	r1, r1
 80106aa:	400a      	ands	r2, r1
 80106ac:	2180      	movs	r1, #128	; 0x80
 80106ae:	0309      	lsls	r1, r1, #12
 80106b0:	468c      	mov	ip, r1
 80106b2:	4462      	add	r2, ip
 80106b4:	e045      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
 80106b6:	4a95      	ldr	r2, [pc, #596]	; (801090c <HAL_DMA_IRQHandler+0x2c8>)
 80106b8:	6815      	ldr	r5, [r2, #0]
 80106ba:	4a89      	ldr	r2, [pc, #548]	; (80108e0 <HAL_DMA_IRQHandler+0x29c>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d1cd      	bne.n	801065c <HAL_DMA_IRQHandler+0x18>
 80106c0:	2208      	movs	r2, #8
 80106c2:	402a      	ands	r2, r5
 80106c4:	1e51      	subs	r1, r2, #1
 80106c6:	418a      	sbcs	r2, r1
 80106c8:	b2d2      	uxtb	r2, r2
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	d13f      	bne.n	801074e <HAL_DMA_IRQHandler+0x10a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106ce:	4a82      	ldr	r2, [pc, #520]	; (80108d8 <HAL_DMA_IRQHandler+0x294>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d800      	bhi.n	80106d6 <HAL_DMA_IRQHandler+0x92>
 80106d4:	e086      	b.n	80107e4 <HAL_DMA_IRQHandler+0x1a0>
 80106d6:	4981      	ldr	r1, [pc, #516]	; (80108dc <HAL_DMA_IRQHandler+0x298>)
 80106d8:	4d81      	ldr	r5, [pc, #516]	; (80108e0 <HAL_DMA_IRQHandler+0x29c>)
 80106da:	6809      	ldr	r1, [r1, #0]
 80106dc:	42ab      	cmp	r3, r5
 80106de:	d100      	bne.n	80106e2 <HAL_DMA_IRQHandler+0x9e>
 80106e0:	e255      	b.n	8010b8e <HAL_DMA_IRQHandler+0x54a>
 80106e2:	4d80      	ldr	r5, [pc, #512]	; (80108e4 <HAL_DMA_IRQHandler+0x2a0>)
 80106e4:	42ab      	cmp	r3, r5
 80106e6:	d100      	bne.n	80106ea <HAL_DMA_IRQHandler+0xa6>
 80106e8:	e2e1      	b.n	8010cae <HAL_DMA_IRQHandler+0x66a>
 80106ea:	4d7f      	ldr	r5, [pc, #508]	; (80108e8 <HAL_DMA_IRQHandler+0x2a4>)
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	d100      	bne.n	80106f2 <HAL_DMA_IRQHandler+0xae>
 80106f0:	e16f      	b.n	80109d2 <HAL_DMA_IRQHandler+0x38e>
 80106f2:	4d7e      	ldr	r5, [pc, #504]	; (80108ec <HAL_DMA_IRQHandler+0x2a8>)
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	d100      	bne.n	80106fa <HAL_DMA_IRQHandler+0xb6>
 80106f8:	e38f      	b.n	8010e1a <HAL_DMA_IRQHandler+0x7d6>
 80106fa:	4d7d      	ldr	r5, [pc, #500]	; (80108f0 <HAL_DMA_IRQHandler+0x2ac>)
 80106fc:	42ab      	cmp	r3, r5
 80106fe:	d06e      	beq.n	80107de <HAL_DMA_IRQHandler+0x19a>
 8010700:	4d7c      	ldr	r5, [pc, #496]	; (80108f4 <HAL_DMA_IRQHandler+0x2b0>)
 8010702:	42ab      	cmp	r3, r5
 8010704:	d101      	bne.n	801070a <HAL_DMA_IRQHandler+0xc6>
 8010706:	f000 fc0d 	bl	8010f24 <HAL_DMA_IRQHandler+0x8e0>
 801070a:	4293      	cmp	r3, r2
 801070c:	d100      	bne.n	8010710 <HAL_DMA_IRQHandler+0xcc>
 801070e:	e356      	b.n	8010dbe <HAL_DMA_IRQHandler+0x77a>
 8010710:	4a79      	ldr	r2, [pc, #484]	; (80108f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d100      	bne.n	8010718 <HAL_DMA_IRQHandler+0xd4>
 8010716:	e23a      	b.n	8010b8e <HAL_DMA_IRQHandler+0x54a>
 8010718:	4a78      	ldr	r2, [pc, #480]	; (80108fc <HAL_DMA_IRQHandler+0x2b8>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d100      	bne.n	8010720 <HAL_DMA_IRQHandler+0xdc>
 801071e:	e2c6      	b.n	8010cae <HAL_DMA_IRQHandler+0x66a>
 8010720:	4a77      	ldr	r2, [pc, #476]	; (8010900 <HAL_DMA_IRQHandler+0x2bc>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d100      	bne.n	8010728 <HAL_DMA_IRQHandler+0xe4>
 8010726:	e154      	b.n	80109d2 <HAL_DMA_IRQHandler+0x38e>
 8010728:	4a76      	ldr	r2, [pc, #472]	; (8010904 <HAL_DMA_IRQHandler+0x2c0>)
 801072a:	189a      	adds	r2, r3, r2
 801072c:	4255      	negs	r5, r2
 801072e:	416a      	adcs	r2, r5
 8010730:	4d77      	ldr	r5, [pc, #476]	; (8010910 <HAL_DMA_IRQHandler+0x2cc>)
 8010732:	4252      	negs	r2, r2
 8010734:	402a      	ands	r2, r5
 8010736:	2580      	movs	r5, #128	; 0x80
 8010738:	02ed      	lsls	r5, r5, #11
 801073a:	46ac      	mov	ip, r5
 801073c:	4462      	add	r2, ip
 801073e:	e14a      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010740:	2280      	movs	r2, #128	; 0x80
 8010742:	402a      	ands	r2, r5
 8010744:	1e51      	subs	r1, r2, #1
 8010746:	418a      	sbcs	r2, r1
 8010748:	b2d2      	uxtb	r2, r2
 801074a:	2a00      	cmp	r2, #0
 801074c:	d0bf      	beq.n	80106ce <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801074e:	2208      	movs	r2, #8
 8010750:	6819      	ldr	r1, [r3, #0]
 8010752:	420a      	tst	r2, r1
 8010754:	d0bb      	beq.n	80106ce <HAL_DMA_IRQHandler+0x8a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010756:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010758:	4d61      	ldr	r5, [pc, #388]	; (80108e0 <HAL_DMA_IRQHandler+0x29c>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801075a:	4391      	bics	r1, r2
 801075c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801075e:	495e      	ldr	r1, [pc, #376]	; (80108d8 <HAL_DMA_IRQHandler+0x294>)
 8010760:	428b      	cmp	r3, r1
 8010762:	d973      	bls.n	801084c <HAL_DMA_IRQHandler+0x208>
 8010764:	42ab      	cmp	r3, r5
 8010766:	d100      	bne.n	801076a <HAL_DMA_IRQHandler+0x126>
 8010768:	e200      	b.n	8010b6c <HAL_DMA_IRQHandler+0x528>
 801076a:	4a5e      	ldr	r2, [pc, #376]	; (80108e4 <HAL_DMA_IRQHandler+0x2a0>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d100      	bne.n	8010772 <HAL_DMA_IRQHandler+0x12e>
 8010770:	e398      	b.n	8010ea4 <HAL_DMA_IRQHandler+0x860>
 8010772:	4a5d      	ldr	r2, [pc, #372]	; (80108e8 <HAL_DMA_IRQHandler+0x2a4>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d100      	bne.n	801077a <HAL_DMA_IRQHandler+0x136>
 8010778:	e2f8      	b.n	8010d6c <HAL_DMA_IRQHandler+0x728>
 801077a:	4a5c      	ldr	r2, [pc, #368]	; (80108ec <HAL_DMA_IRQHandler+0x2a8>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d100      	bne.n	8010782 <HAL_DMA_IRQHandler+0x13e>
 8010780:	e3d3      	b.n	8010f2a <HAL_DMA_IRQHandler+0x8e6>
 8010782:	4a5b      	ldr	r2, [pc, #364]	; (80108f0 <HAL_DMA_IRQHandler+0x2ac>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d018      	beq.n	80107ba <HAL_DMA_IRQHandler+0x176>
 8010788:	4a5a      	ldr	r2, [pc, #360]	; (80108f4 <HAL_DMA_IRQHandler+0x2b0>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d100      	bne.n	8010790 <HAL_DMA_IRQHandler+0x14c>
 801078e:	e3b5      	b.n	8010efc <HAL_DMA_IRQHandler+0x8b8>
 8010790:	428b      	cmp	r3, r1
 8010792:	d100      	bne.n	8010796 <HAL_DMA_IRQHandler+0x152>
 8010794:	e300      	b.n	8010d98 <HAL_DMA_IRQHandler+0x754>
 8010796:	4a58      	ldr	r2, [pc, #352]	; (80108f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d101      	bne.n	80107a0 <HAL_DMA_IRQHandler+0x15c>
 801079c:	f000 fc0b 	bl	8010fb6 <HAL_DMA_IRQHandler+0x972>
 80107a0:	4a56      	ldr	r2, [pc, #344]	; (80108fc <HAL_DMA_IRQHandler+0x2b8>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d100      	bne.n	80107a8 <HAL_DMA_IRQHandler+0x164>
 80107a6:	e26f      	b.n	8010c88 <HAL_DMA_IRQHandler+0x644>
 80107a8:	4a55      	ldr	r2, [pc, #340]	; (8010900 <HAL_DMA_IRQHandler+0x2bc>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d101      	bne.n	80107b2 <HAL_DMA_IRQHandler+0x16e>
 80107ae:	f000 fc49 	bl	8011044 <HAL_DMA_IRQHandler+0xa00>
 80107b2:	4a58      	ldr	r2, [pc, #352]	; (8010914 <HAL_DMA_IRQHandler+0x2d0>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d100      	bne.n	80107ba <HAL_DMA_IRQHandler+0x176>
 80107b8:	e31b      	b.n	8010df2 <HAL_DMA_IRQHandler+0x7ae>
 80107ba:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80107bc:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107be:	4947      	ldr	r1, [pc, #284]	; (80108dc <HAL_DMA_IRQHandler+0x298>)
 80107c0:	0312      	lsls	r2, r2, #12
 80107c2:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80107c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80107c6:	432a      	orrs	r2, r5
 80107c8:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80107ca:	2221      	movs	r2, #33	; 0x21
 80107cc:	3503      	adds	r5, #3
 80107ce:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80107d0:	2500      	movs	r5, #0
 80107d2:	3a01      	subs	r2, #1
 80107d4:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80107d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80107d8:	2a00      	cmp	r2, #0
 80107da:	d175      	bne.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107dc:	6809      	ldr	r1, [r1, #0]
 80107de:	2280      	movs	r2, #128	; 0x80
 80107e0:	02d2      	lsls	r2, r2, #11
 80107e2:	e0f8      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
 80107e4:	4949      	ldr	r1, [pc, #292]	; (801090c <HAL_DMA_IRQHandler+0x2c8>)
 80107e6:	4d3e      	ldr	r5, [pc, #248]	; (80108e0 <HAL_DMA_IRQHandler+0x29c>)
 80107e8:	6809      	ldr	r1, [r1, #0]
 80107ea:	42ab      	cmp	r3, r5
 80107ec:	d100      	bne.n	80107f0 <HAL_DMA_IRQHandler+0x1ac>
 80107ee:	e1e2      	b.n	8010bb6 <HAL_DMA_IRQHandler+0x572>
 80107f0:	4d3c      	ldr	r5, [pc, #240]	; (80108e4 <HAL_DMA_IRQHandler+0x2a0>)
 80107f2:	42ab      	cmp	r3, r5
 80107f4:	d100      	bne.n	80107f8 <HAL_DMA_IRQHandler+0x1b4>
 80107f6:	e26e      	b.n	8010cd6 <HAL_DMA_IRQHandler+0x692>
 80107f8:	4d3b      	ldr	r5, [pc, #236]	; (80108e8 <HAL_DMA_IRQHandler+0x2a4>)
 80107fa:	42ab      	cmp	r3, r5
 80107fc:	d100      	bne.n	8010800 <HAL_DMA_IRQHandler+0x1bc>
 80107fe:	e08b      	b.n	8010918 <HAL_DMA_IRQHandler+0x2d4>
 8010800:	4d3a      	ldr	r5, [pc, #232]	; (80108ec <HAL_DMA_IRQHandler+0x2a8>)
 8010802:	42ab      	cmp	r3, r5
 8010804:	d100      	bne.n	8010808 <HAL_DMA_IRQHandler+0x1c4>
 8010806:	e285      	b.n	8010d14 <HAL_DMA_IRQHandler+0x6d0>
 8010808:	4d39      	ldr	r5, [pc, #228]	; (80108f0 <HAL_DMA_IRQHandler+0x2ac>)
 801080a:	42ab      	cmp	r3, r5
 801080c:	d100      	bne.n	8010810 <HAL_DMA_IRQHandler+0x1cc>
 801080e:	e323      	b.n	8010e58 <HAL_DMA_IRQHandler+0x814>
 8010810:	4d38      	ldr	r5, [pc, #224]	; (80108f4 <HAL_DMA_IRQHandler+0x2b0>)
 8010812:	42ab      	cmp	r3, r5
 8010814:	d100      	bne.n	8010818 <HAL_DMA_IRQHandler+0x1d4>
 8010816:	e36e      	b.n	8010ef6 <HAL_DMA_IRQHandler+0x8b2>
 8010818:	4293      	cmp	r3, r2
 801081a:	d100      	bne.n	801081e <HAL_DMA_IRQHandler+0x1da>
 801081c:	e2e6      	b.n	8010dec <HAL_DMA_IRQHandler+0x7a8>
 801081e:	4a36      	ldr	r2, [pc, #216]	; (80108f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d100      	bne.n	8010826 <HAL_DMA_IRQHandler+0x1e2>
 8010824:	e1c7      	b.n	8010bb6 <HAL_DMA_IRQHandler+0x572>
 8010826:	4a35      	ldr	r2, [pc, #212]	; (80108fc <HAL_DMA_IRQHandler+0x2b8>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d100      	bne.n	801082e <HAL_DMA_IRQHandler+0x1ea>
 801082c:	e253      	b.n	8010cd6 <HAL_DMA_IRQHandler+0x692>
 801082e:	4a34      	ldr	r2, [pc, #208]	; (8010900 <HAL_DMA_IRQHandler+0x2bc>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d071      	beq.n	8010918 <HAL_DMA_IRQHandler+0x2d4>
 8010834:	4a33      	ldr	r2, [pc, #204]	; (8010904 <HAL_DMA_IRQHandler+0x2c0>)
 8010836:	189a      	adds	r2, r3, r2
 8010838:	4255      	negs	r5, r2
 801083a:	416a      	adcs	r2, r5
 801083c:	4d34      	ldr	r5, [pc, #208]	; (8010910 <HAL_DMA_IRQHandler+0x2cc>)
 801083e:	4252      	negs	r2, r2
 8010840:	402a      	ands	r2, r5
 8010842:	2580      	movs	r5, #128	; 0x80
 8010844:	02ed      	lsls	r5, r5, #11
 8010846:	46ac      	mov	ip, r5
 8010848:	4462      	add	r2, ip
 801084a:	e067      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801084c:	42ab      	cmp	r3, r5
 801084e:	d100      	bne.n	8010852 <HAL_DMA_IRQHandler+0x20e>
 8010850:	e19f      	b.n	8010b92 <HAL_DMA_IRQHandler+0x54e>
 8010852:	4a24      	ldr	r2, [pc, #144]	; (80108e4 <HAL_DMA_IRQHandler+0x2a0>)
 8010854:	4293      	cmp	r3, r2
 8010856:	d100      	bne.n	801085a <HAL_DMA_IRQHandler+0x216>
 8010858:	e30f      	b.n	8010e7a <HAL_DMA_IRQHandler+0x836>
 801085a:	4a23      	ldr	r2, [pc, #140]	; (80108e8 <HAL_DMA_IRQHandler+0x2a4>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d100      	bne.n	8010862 <HAL_DMA_IRQHandler+0x21e>
 8010860:	e26d      	b.n	8010d3e <HAL_DMA_IRQHandler+0x6fa>
 8010862:	4a22      	ldr	r2, [pc, #136]	; (80108ec <HAL_DMA_IRQHandler+0x2a8>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d100      	bne.n	801086a <HAL_DMA_IRQHandler+0x226>
 8010868:	e240      	b.n	8010cec <HAL_DMA_IRQHandler+0x6a8>
 801086a:	4a21      	ldr	r2, [pc, #132]	; (80108f0 <HAL_DMA_IRQHandler+0x2ac>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d100      	bne.n	8010872 <HAL_DMA_IRQHandler+0x22e>
 8010870:	e2de      	b.n	8010e30 <HAL_DMA_IRQHandler+0x7ec>
 8010872:	4a20      	ldr	r2, [pc, #128]	; (80108f4 <HAL_DMA_IRQHandler+0x2b0>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d100      	bne.n	801087a <HAL_DMA_IRQHandler+0x236>
 8010878:	e328      	b.n	8010ecc <HAL_DMA_IRQHandler+0x888>
 801087a:	428b      	cmp	r3, r1
 801087c:	d100      	bne.n	8010880 <HAL_DMA_IRQHandler+0x23c>
 801087e:	e2a1      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x780>
 8010880:	4a1d      	ldr	r2, [pc, #116]	; (80108f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d100      	bne.n	8010888 <HAL_DMA_IRQHandler+0x244>
 8010886:	e3b3      	b.n	8010ff0 <HAL_DMA_IRQHandler+0x9ac>
 8010888:	4a1c      	ldr	r2, [pc, #112]	; (80108fc <HAL_DMA_IRQHandler+0x2b8>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d100      	bne.n	8010890 <HAL_DMA_IRQHandler+0x24c>
 801088e:	e210      	b.n	8010cb2 <HAL_DMA_IRQHandler+0x66e>
 8010890:	4a1b      	ldr	r2, [pc, #108]	; (8010900 <HAL_DMA_IRQHandler+0x2bc>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d100      	bne.n	8010898 <HAL_DMA_IRQHandler+0x254>
 8010896:	e3bf      	b.n	8011018 <HAL_DMA_IRQHandler+0x9d4>
 8010898:	4a1e      	ldr	r2, [pc, #120]	; (8010914 <HAL_DMA_IRQHandler+0x2d0>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d101      	bne.n	80108a2 <HAL_DMA_IRQHandler+0x25e>
 801089e:	f000 fbe8 	bl	8011072 <HAL_DMA_IRQHandler+0xa2e>
 80108a2:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108a4:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108a6:	4919      	ldr	r1, [pc, #100]	; (801090c <HAL_DMA_IRQHandler+0x2c8>)
 80108a8:	0312      	lsls	r2, r2, #12
 80108aa:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80108ae:	432a      	orrs	r2, r5
 80108b0:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80108b2:	2221      	movs	r2, #33	; 0x21
 80108b4:	3503      	adds	r5, #3
 80108b6:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80108b8:	2500      	movs	r5, #0
 80108ba:	3a01      	subs	r2, #1
 80108bc:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108c0:	2a00      	cmp	r2, #0
 80108c2:	d101      	bne.n	80108c8 <HAL_DMA_IRQHandler+0x284>
 80108c4:	f000 fbec 	bl	80110a0 <HAL_DMA_IRQHandler+0xa5c>
        hdma->XferErrorCallback(hdma);
 80108c8:	0020      	movs	r0, r4
 80108ca:	4790      	blx	r2
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	0018      	movs	r0, r3
 80108d0:	e6fd      	b.n	80106ce <HAL_DMA_IRQHandler+0x8a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108d2:	2280      	movs	r2, #128	; 0x80
 80108d4:	0312      	lsls	r2, r2, #12
 80108d6:	e734      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
 80108d8:	40020080 	.word	0x40020080
 80108dc:	40020400 	.word	0x40020400
 80108e0:	40020008 	.word	0x40020008
 80108e4:	4002001c 	.word	0x4002001c
 80108e8:	40020030 	.word	0x40020030
 80108ec:	40020044 	.word	0x40020044
 80108f0:	40020058 	.word	0x40020058
 80108f4:	4002006c 	.word	0x4002006c
 80108f8:	40020408 	.word	0x40020408
 80108fc:	4002041c 	.word	0x4002041c
 8010900:	40020430 	.word	0x40020430
 8010904:	bffdfbbc 	.word	0xbffdfbbc
 8010908:	fff88000 	.word	0xfff88000
 801090c:	40020000 	.word	0x40020000
 8010910:	fffc4000 	.word	0xfffc4000
 8010914:	40020444 	.word	0x40020444
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010918:	2280      	movs	r2, #128	; 0x80
 801091a:	00d2      	lsls	r2, r2, #3
 801091c:	4211      	tst	r1, r2
 801091e:	d100      	bne.n	8010922 <HAL_DMA_IRQHandler+0x2de>
 8010920:	e0a4      	b.n	8010a6c <HAL_DMA_IRQHandler+0x428>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	0752      	lsls	r2, r2, #29
 8010926:	d400      	bmi.n	801092a <HAL_DMA_IRQHandler+0x2e6>
 8010928:	e0a0      	b.n	8010a6c <HAL_DMA_IRQHandler+0x428>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	0692      	lsls	r2, r2, #26
 801092e:	d45b      	bmi.n	80109e8 <HAL_DMA_IRQHandler+0x3a4>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010930:	2104      	movs	r1, #4
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	438a      	bics	r2, r1
 8010936:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010938:	4ac5      	ldr	r2, [pc, #788]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 801093a:	4290      	cmp	r0, r2
 801093c:	d954      	bls.n	80109e8 <HAL_DMA_IRQHandler+0x3a4>
 801093e:	4ac5      	ldr	r2, [pc, #788]	; (8010c54 <HAL_DMA_IRQHandler+0x610>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d100      	bne.n	8010946 <HAL_DMA_IRQHandler+0x302>
 8010944:	e26c      	b.n	8010e20 <HAL_DMA_IRQHandler+0x7dc>
 8010946:	4ac4      	ldr	r2, [pc, #784]	; (8010c58 <HAL_DMA_IRQHandler+0x614>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d100      	bne.n	801094e <HAL_DMA_IRQHandler+0x30a>
 801094c:	e28d      	b.n	8010e6a <HAL_DMA_IRQHandler+0x826>
 801094e:	4ac3      	ldr	r2, [pc, #780]	; (8010c5c <HAL_DMA_IRQHandler+0x618>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d100      	bne.n	8010956 <HAL_DMA_IRQHandler+0x312>
 8010954:	e1ea      	b.n	8010d2c <HAL_DMA_IRQHandler+0x6e8>
 8010956:	4ac2      	ldr	r2, [pc, #776]	; (8010c60 <HAL_DMA_IRQHandler+0x61c>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d100      	bne.n	801095e <HAL_DMA_IRQHandler+0x31a>
 801095c:	e2fb      	b.n	8010f56 <HAL_DMA_IRQHandler+0x912>
 801095e:	4ac1      	ldr	r2, [pc, #772]	; (8010c64 <HAL_DMA_IRQHandler+0x620>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d100      	bne.n	8010966 <HAL_DMA_IRQHandler+0x322>
 8010964:	e303      	b.n	8010f6e <HAL_DMA_IRQHandler+0x92a>
 8010966:	4ac0      	ldr	r2, [pc, #768]	; (8010c68 <HAL_DMA_IRQHandler+0x624>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d100      	bne.n	801096e <HAL_DMA_IRQHandler+0x32a>
 801096c:	e311      	b.n	8010f92 <HAL_DMA_IRQHandler+0x94e>
 801096e:	4ab8      	ldr	r2, [pc, #736]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d100      	bne.n	8010976 <HAL_DMA_IRQHandler+0x332>
 8010974:	e319      	b.n	8010faa <HAL_DMA_IRQHandler+0x966>
 8010976:	4abd      	ldr	r2, [pc, #756]	; (8010c6c <HAL_DMA_IRQHandler+0x628>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d100      	bne.n	801097e <HAL_DMA_IRQHandler+0x33a>
 801097c:	e250      	b.n	8010e20 <HAL_DMA_IRQHandler+0x7dc>
 801097e:	4abc      	ldr	r2, [pc, #752]	; (8010c70 <HAL_DMA_IRQHandler+0x62c>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d100      	bne.n	8010986 <HAL_DMA_IRQHandler+0x342>
 8010984:	e271      	b.n	8010e6a <HAL_DMA_IRQHandler+0x826>
 8010986:	4abb      	ldr	r2, [pc, #748]	; (8010c74 <HAL_DMA_IRQHandler+0x630>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d100      	bne.n	801098e <HAL_DMA_IRQHandler+0x34a>
 801098c:	e1ce      	b.n	8010d2c <HAL_DMA_IRQHandler+0x6e8>
 801098e:	4aba      	ldr	r2, [pc, #744]	; (8010c78 <HAL_DMA_IRQHandler+0x634>)
 8010990:	189a      	adds	r2, r3, r2
 8010992:	1e51      	subs	r1, r2, #1
 8010994:	418a      	sbcs	r2, r1
 8010996:	21f0      	movs	r1, #240	; 0xf0
 8010998:	4252      	negs	r2, r2
 801099a:	0289      	lsls	r1, r1, #10
 801099c:	400a      	ands	r2, r1
 801099e:	2180      	movs	r1, #128	; 0x80
 80109a0:	01c9      	lsls	r1, r1, #7
 80109a2:	468c      	mov	ip, r1
 80109a4:	4462      	add	r2, ip
 80109a6:	49b5      	ldr	r1, [pc, #724]	; (8010c7c <HAL_DMA_IRQHandler+0x638>)
 80109a8:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80109aa:	2221      	movs	r2, #33	; 0x21
 80109ac:	2111      	movs	r1, #17
 80109ae:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80109b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109b2:	2a00      	cmp	r2, #0
 80109b4:	d154      	bne.n	8010a60 <HAL_DMA_IRQHandler+0x41c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80109b6:	4ab1      	ldr	r2, [pc, #708]	; (8010c7c <HAL_DMA_IRQHandler+0x638>)
 80109b8:	6810      	ldr	r0, [r2, #0]
 80109ba:	4aa6      	ldr	r2, [pc, #664]	; (8010c54 <HAL_DMA_IRQHandler+0x610>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d15a      	bne.n	8010a76 <HAL_DMA_IRQHandler+0x432>
 80109c0:	2202      	movs	r2, #2
 80109c2:	4002      	ands	r2, r0
 80109c4:	1e51      	subs	r1, r2, #1
 80109c6:	418a      	sbcs	r2, r1
 80109c8:	b2d2      	uxtb	r2, r2
 80109ca:	2a00      	cmp	r2, #0
 80109cc:	d000      	beq.n	80109d0 <HAL_DMA_IRQHandler+0x38c>
 80109ce:	e088      	b.n	8010ae2 <HAL_DMA_IRQHandler+0x49e>
}  
 80109d0:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109d2:	2280      	movs	r2, #128	; 0x80
 80109d4:	00d2      	lsls	r2, r2, #3
 80109d6:	4211      	tst	r1, r2
 80109d8:	d0ed      	beq.n	80109b6 <HAL_DMA_IRQHandler+0x372>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	0752      	lsls	r2, r2, #29
 80109de:	d5ea      	bpl.n	80109b6 <HAL_DMA_IRQHandler+0x372>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	0692      	lsls	r2, r2, #26
 80109e4:	d5a4      	bpl.n	8010930 <HAL_DMA_IRQHandler+0x2ec>
 80109e6:	e7aa      	b.n	801093e <HAL_DMA_IRQHandler+0x2fa>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80109e8:	4a9a      	ldr	r2, [pc, #616]	; (8010c54 <HAL_DMA_IRQHandler+0x610>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d100      	bne.n	80109f0 <HAL_DMA_IRQHandler+0x3ac>
 80109ee:	e21b      	b.n	8010e28 <HAL_DMA_IRQHandler+0x7e4>
 80109f0:	4a99      	ldr	r2, [pc, #612]	; (8010c58 <HAL_DMA_IRQHandler+0x614>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d100      	bne.n	80109f8 <HAL_DMA_IRQHandler+0x3b4>
 80109f6:	e23c      	b.n	8010e72 <HAL_DMA_IRQHandler+0x82e>
 80109f8:	4a98      	ldr	r2, [pc, #608]	; (8010c5c <HAL_DMA_IRQHandler+0x618>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d100      	bne.n	8010a00 <HAL_DMA_IRQHandler+0x3bc>
 80109fe:	e198      	b.n	8010d32 <HAL_DMA_IRQHandler+0x6ee>
 8010a00:	4a97      	ldr	r2, [pc, #604]	; (8010c60 <HAL_DMA_IRQHandler+0x61c>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d100      	bne.n	8010a08 <HAL_DMA_IRQHandler+0x3c4>
 8010a06:	e2a9      	b.n	8010f5c <HAL_DMA_IRQHandler+0x918>
 8010a08:	4a96      	ldr	r2, [pc, #600]	; (8010c64 <HAL_DMA_IRQHandler+0x620>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d100      	bne.n	8010a10 <HAL_DMA_IRQHandler+0x3cc>
 8010a0e:	e2b4      	b.n	8010f7a <HAL_DMA_IRQHandler+0x936>
 8010a10:	4a95      	ldr	r2, [pc, #596]	; (8010c68 <HAL_DMA_IRQHandler+0x624>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d100      	bne.n	8010a18 <HAL_DMA_IRQHandler+0x3d4>
 8010a16:	e2bf      	b.n	8010f98 <HAL_DMA_IRQHandler+0x954>
 8010a18:	4a8d      	ldr	r2, [pc, #564]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d100      	bne.n	8010a20 <HAL_DMA_IRQHandler+0x3dc>
 8010a1e:	e2be      	b.n	8010f9e <HAL_DMA_IRQHandler+0x95a>
 8010a20:	4a92      	ldr	r2, [pc, #584]	; (8010c6c <HAL_DMA_IRQHandler+0x628>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d100      	bne.n	8010a28 <HAL_DMA_IRQHandler+0x3e4>
 8010a26:	e1ff      	b.n	8010e28 <HAL_DMA_IRQHandler+0x7e4>
 8010a28:	4a91      	ldr	r2, [pc, #580]	; (8010c70 <HAL_DMA_IRQHandler+0x62c>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d100      	bne.n	8010a30 <HAL_DMA_IRQHandler+0x3ec>
 8010a2e:	e220      	b.n	8010e72 <HAL_DMA_IRQHandler+0x82e>
 8010a30:	4a90      	ldr	r2, [pc, #576]	; (8010c74 <HAL_DMA_IRQHandler+0x630>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d100      	bne.n	8010a38 <HAL_DMA_IRQHandler+0x3f4>
 8010a36:	e17c      	b.n	8010d32 <HAL_DMA_IRQHandler+0x6ee>
 8010a38:	4a8f      	ldr	r2, [pc, #572]	; (8010c78 <HAL_DMA_IRQHandler+0x634>)
 8010a3a:	189a      	adds	r2, r3, r2
 8010a3c:	1e51      	subs	r1, r2, #1
 8010a3e:	418a      	sbcs	r2, r1
 8010a40:	21f0      	movs	r1, #240	; 0xf0
 8010a42:	4252      	negs	r2, r2
 8010a44:	0289      	lsls	r1, r1, #10
 8010a46:	400a      	ands	r2, r1
 8010a48:	2180      	movs	r1, #128	; 0x80
 8010a4a:	01c9      	lsls	r1, r1, #7
 8010a4c:	468c      	mov	ip, r1
 8010a4e:	4462      	add	r2, ip
 8010a50:	498b      	ldr	r1, [pc, #556]	; (8010c80 <HAL_DMA_IRQHandler+0x63c>)
 8010a52:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010a54:	2221      	movs	r2, #33	; 0x21
 8010a56:	2111      	movs	r1, #17
 8010a58:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010a5c:	2a00      	cmp	r2, #0
 8010a5e:	d005      	beq.n	8010a6c <HAL_DMA_IRQHandler+0x428>
        hdma->XferHalfCpltCallback(hdma);
 8010a60:	0020      	movs	r0, r4
 8010a62:	4790      	blx	r2
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010a64:	6823      	ldr	r3, [r4, #0]
 8010a66:	4a7a      	ldr	r2, [pc, #488]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d8a4      	bhi.n	80109b6 <HAL_DMA_IRQHandler+0x372>
 8010a6c:	4a84      	ldr	r2, [pc, #528]	; (8010c80 <HAL_DMA_IRQHandler+0x63c>)
 8010a6e:	6810      	ldr	r0, [r2, #0]
 8010a70:	4a78      	ldr	r2, [pc, #480]	; (8010c54 <HAL_DMA_IRQHandler+0x610>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d0a4      	beq.n	80109c0 <HAL_DMA_IRQHandler+0x37c>
 8010a76:	4a78      	ldr	r2, [pc, #480]	; (8010c58 <HAL_DMA_IRQHandler+0x614>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d02a      	beq.n	8010ad2 <HAL_DMA_IRQHandler+0x48e>
 8010a7c:	4a77      	ldr	r2, [pc, #476]	; (8010c5c <HAL_DMA_IRQHandler+0x618>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d100      	bne.n	8010a84 <HAL_DMA_IRQHandler+0x440>
 8010a82:	e09d      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x57c>
 8010a84:	4a76      	ldr	r2, [pc, #472]	; (8010c60 <HAL_DMA_IRQHandler+0x61c>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d100      	bne.n	8010a8c <HAL_DMA_IRQHandler+0x448>
 8010a8a:	e129      	b.n	8010ce0 <HAL_DMA_IRQHandler+0x69c>
 8010a8c:	4a75      	ldr	r2, [pc, #468]	; (8010c64 <HAL_DMA_IRQHandler+0x620>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d100      	bne.n	8010a94 <HAL_DMA_IRQHandler+0x450>
 8010a92:	e128      	b.n	8010ce6 <HAL_DMA_IRQHandler+0x6a2>
 8010a94:	4a74      	ldr	r2, [pc, #464]	; (8010c68 <HAL_DMA_IRQHandler+0x624>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d100      	bne.n	8010a9c <HAL_DMA_IRQHandler+0x458>
 8010a9a:	e13e      	b.n	8010d1a <HAL_DMA_IRQHandler+0x6d6>
 8010a9c:	4a6c      	ldr	r2, [pc, #432]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d100      	bne.n	8010aa4 <HAL_DMA_IRQHandler+0x460>
 8010aa2:	e1dc      	b.n	8010e5e <HAL_DMA_IRQHandler+0x81a>
 8010aa4:	4a71      	ldr	r2, [pc, #452]	; (8010c6c <HAL_DMA_IRQHandler+0x628>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d100      	bne.n	8010aac <HAL_DMA_IRQHandler+0x468>
 8010aaa:	e789      	b.n	80109c0 <HAL_DMA_IRQHandler+0x37c>
 8010aac:	4a70      	ldr	r2, [pc, #448]	; (8010c70 <HAL_DMA_IRQHandler+0x62c>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d00f      	beq.n	8010ad2 <HAL_DMA_IRQHandler+0x48e>
 8010ab2:	4a70      	ldr	r2, [pc, #448]	; (8010c74 <HAL_DMA_IRQHandler+0x630>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d100      	bne.n	8010aba <HAL_DMA_IRQHandler+0x476>
 8010ab8:	e082      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x57c>
 8010aba:	4a6f      	ldr	r2, [pc, #444]	; (8010c78 <HAL_DMA_IRQHandler+0x634>)
 8010abc:	1899      	adds	r1, r3, r2
 8010abe:	424a      	negs	r2, r1
 8010ac0:	4151      	adcs	r1, r2
 8010ac2:	4a70      	ldr	r2, [pc, #448]	; (8010c84 <HAL_DMA_IRQHandler+0x640>)
 8010ac4:	4249      	negs	r1, r1
 8010ac6:	400a      	ands	r2, r1
 8010ac8:	2180      	movs	r1, #128	; 0x80
 8010aca:	0289      	lsls	r1, r1, #10
 8010acc:	468c      	mov	ip, r1
 8010ace:	4462      	add	r2, ip
 8010ad0:	e000      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	4002      	ands	r2, r0
 8010ad6:	1e51      	subs	r1, r2, #1
 8010ad8:	418a      	sbcs	r2, r1
 8010ada:	b2d2      	uxtb	r2, r2
 8010adc:	2a00      	cmp	r2, #0
 8010ade:	d100      	bne.n	8010ae2 <HAL_DMA_IRQHandler+0x49e>
 8010ae0:	e776      	b.n	80109d0 <HAL_DMA_IRQHandler+0x38c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010ae2:	2202      	movs	r2, #2
 8010ae4:	6819      	ldr	r1, [r3, #0]
 8010ae6:	420a      	tst	r2, r1
 8010ae8:	d100      	bne.n	8010aec <HAL_DMA_IRQHandler+0x4a8>
 8010aea:	e771      	b.n	80109d0 <HAL_DMA_IRQHandler+0x38c>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010aec:	6819      	ldr	r1, [r3, #0]
 8010aee:	0689      	lsls	r1, r1, #26
 8010af0:	d402      	bmi.n	8010af8 <HAL_DMA_IRQHandler+0x4b4>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010af2:	6819      	ldr	r1, [r3, #0]
 8010af4:	4391      	bics	r1, r2
 8010af6:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010af8:	4a55      	ldr	r2, [pc, #340]	; (8010c50 <HAL_DMA_IRQHandler+0x60c>)
 8010afa:	4956      	ldr	r1, [pc, #344]	; (8010c54 <HAL_DMA_IRQHandler+0x610>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d962      	bls.n	8010bc6 <HAL_DMA_IRQHandler+0x582>
 8010b00:	428b      	cmp	r3, r1
 8010b02:	d100      	bne.n	8010b06 <HAL_DMA_IRQHandler+0x4c2>
 8010b04:	e18e      	b.n	8010e24 <HAL_DMA_IRQHandler+0x7e0>
 8010b06:	4954      	ldr	r1, [pc, #336]	; (8010c58 <HAL_DMA_IRQHandler+0x614>)
 8010b08:	428b      	cmp	r3, r1
 8010b0a:	d100      	bne.n	8010b0e <HAL_DMA_IRQHandler+0x4ca>
 8010b0c:	e1af      	b.n	8010e6e <HAL_DMA_IRQHandler+0x82a>
 8010b0e:	4953      	ldr	r1, [pc, #332]	; (8010c5c <HAL_DMA_IRQHandler+0x618>)
 8010b10:	428b      	cmp	r3, r1
 8010b12:	d100      	bne.n	8010b16 <HAL_DMA_IRQHandler+0x4d2>
 8010b14:	e110      	b.n	8010d38 <HAL_DMA_IRQHandler+0x6f4>
 8010b16:	4952      	ldr	r1, [pc, #328]	; (8010c60 <HAL_DMA_IRQHandler+0x61c>)
 8010b18:	428b      	cmp	r3, r1
 8010b1a:	d100      	bne.n	8010b1e <HAL_DMA_IRQHandler+0x4da>
 8010b1c:	e224      	b.n	8010f68 <HAL_DMA_IRQHandler+0x924>
 8010b1e:	4951      	ldr	r1, [pc, #324]	; (8010c64 <HAL_DMA_IRQHandler+0x620>)
 8010b20:	428b      	cmp	r3, r1
 8010b22:	d100      	bne.n	8010b26 <HAL_DMA_IRQHandler+0x4e2>
 8010b24:	e226      	b.n	8010f74 <HAL_DMA_IRQHandler+0x930>
 8010b26:	4950      	ldr	r1, [pc, #320]	; (8010c68 <HAL_DMA_IRQHandler+0x624>)
 8010b28:	428b      	cmp	r3, r1
 8010b2a:	d100      	bne.n	8010b2e <HAL_DMA_IRQHandler+0x4ea>
 8010b2c:	e22e      	b.n	8010f8c <HAL_DMA_IRQHandler+0x948>
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d100      	bne.n	8010b34 <HAL_DMA_IRQHandler+0x4f0>
 8010b32:	e237      	b.n	8010fa4 <HAL_DMA_IRQHandler+0x960>
 8010b34:	4a4d      	ldr	r2, [pc, #308]	; (8010c6c <HAL_DMA_IRQHandler+0x628>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d100      	bne.n	8010b3c <HAL_DMA_IRQHandler+0x4f8>
 8010b3a:	e173      	b.n	8010e24 <HAL_DMA_IRQHandler+0x7e0>
 8010b3c:	4a4c      	ldr	r2, [pc, #304]	; (8010c70 <HAL_DMA_IRQHandler+0x62c>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d100      	bne.n	8010b44 <HAL_DMA_IRQHandler+0x500>
 8010b42:	e194      	b.n	8010e6e <HAL_DMA_IRQHandler+0x82a>
 8010b44:	4a4b      	ldr	r2, [pc, #300]	; (8010c74 <HAL_DMA_IRQHandler+0x630>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d100      	bne.n	8010b4c <HAL_DMA_IRQHandler+0x508>
 8010b4a:	e0f5      	b.n	8010d38 <HAL_DMA_IRQHandler+0x6f4>
 8010b4c:	4a4a      	ldr	r2, [pc, #296]	; (8010c78 <HAL_DMA_IRQHandler+0x634>)
 8010b4e:	4694      	mov	ip, r2
 8010b50:	4463      	add	r3, ip
 8010b52:	1e5a      	subs	r2, r3, #1
 8010b54:	4193      	sbcs	r3, r2
 8010b56:	22f0      	movs	r2, #240	; 0xf0
 8010b58:	425b      	negs	r3, r3
 8010b5a:	0252      	lsls	r2, r2, #9
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	2280      	movs	r2, #128	; 0x80
 8010b60:	0192      	lsls	r2, r2, #6
 8010b62:	4694      	mov	ip, r2
 8010b64:	4463      	add	r3, ip
 8010b66:	4a45      	ldr	r2, [pc, #276]	; (8010c7c <HAL_DMA_IRQHandler+0x638>)
 8010b68:	6053      	str	r3, [r2, #4]
 8010b6a:	e061      	b.n	8010c30 <HAL_DMA_IRQHandler+0x5ec>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b6c:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b6e:	4943      	ldr	r1, [pc, #268]	; (8010c7c <HAL_DMA_IRQHandler+0x638>)
 8010b70:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b72:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010b74:	432a      	orrs	r2, r5
 8010b76:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010b78:	2221      	movs	r2, #33	; 0x21
 8010b7a:	3503      	adds	r5, #3
 8010b7c:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010b7e:	2500      	movs	r5, #0
 8010b80:	3a01      	subs	r2, #1
 8010b82:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010b84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	d000      	beq.n	8010b8c <HAL_DMA_IRQHandler+0x548>
 8010b8a:	e69d      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b8c:	6809      	ldr	r1, [r1, #0]
 8010b8e:	2204      	movs	r2, #4
 8010b90:	e721      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b92:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b94:	493a      	ldr	r1, [pc, #232]	; (8010c80 <HAL_DMA_IRQHandler+0x63c>)
 8010b96:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010b9a:	4302      	orrs	r2, r0
 8010b9c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010b9e:	2221      	movs	r2, #33	; 0x21
 8010ba0:	3003      	adds	r0, #3
 8010ba2:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	3a01      	subs	r2, #1
 8010ba8:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010baa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010bac:	2a00      	cmp	r2, #0
 8010bae:	d000      	beq.n	8010bb2 <HAL_DMA_IRQHandler+0x56e>
 8010bb0:	e68a      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010bb2:	0018      	movs	r0, r3
 8010bb4:	6809      	ldr	r1, [r1, #0]
 8010bb6:	2204      	movs	r2, #4
 8010bb8:	e6b0      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010bba:	2280      	movs	r2, #128	; 0x80
 8010bbc:	0112      	lsls	r2, r2, #4
 8010bbe:	e5c0      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010bc0:	2280      	movs	r2, #128	; 0x80
 8010bc2:	0092      	lsls	r2, r2, #2
 8010bc4:	e786      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010bc6:	428b      	cmp	r3, r1
 8010bc8:	d100      	bne.n	8010bcc <HAL_DMA_IRQHandler+0x588>
 8010bca:	e12f      	b.n	8010e2c <HAL_DMA_IRQHandler+0x7e8>
 8010bcc:	4922      	ldr	r1, [pc, #136]	; (8010c58 <HAL_DMA_IRQHandler+0x614>)
 8010bce:	428b      	cmp	r3, r1
 8010bd0:	d100      	bne.n	8010bd4 <HAL_DMA_IRQHandler+0x590>
 8010bd2:	e150      	b.n	8010e76 <HAL_DMA_IRQHandler+0x832>
 8010bd4:	4921      	ldr	r1, [pc, #132]	; (8010c5c <HAL_DMA_IRQHandler+0x618>)
 8010bd6:	428b      	cmp	r3, r1
 8010bd8:	d100      	bne.n	8010bdc <HAL_DMA_IRQHandler+0x598>
 8010bda:	e0a4      	b.n	8010d26 <HAL_DMA_IRQHandler+0x6e2>
 8010bdc:	4920      	ldr	r1, [pc, #128]	; (8010c60 <HAL_DMA_IRQHandler+0x61c>)
 8010bde:	428b      	cmp	r3, r1
 8010be0:	d100      	bne.n	8010be4 <HAL_DMA_IRQHandler+0x5a0>
 8010be2:	e1be      	b.n	8010f62 <HAL_DMA_IRQHandler+0x91e>
 8010be4:	491f      	ldr	r1, [pc, #124]	; (8010c64 <HAL_DMA_IRQHandler+0x620>)
 8010be6:	428b      	cmp	r3, r1
 8010be8:	d100      	bne.n	8010bec <HAL_DMA_IRQHandler+0x5a8>
 8010bea:	e1c9      	b.n	8010f80 <HAL_DMA_IRQHandler+0x93c>
 8010bec:	491e      	ldr	r1, [pc, #120]	; (8010c68 <HAL_DMA_IRQHandler+0x624>)
 8010bee:	428b      	cmp	r3, r1
 8010bf0:	d100      	bne.n	8010bf4 <HAL_DMA_IRQHandler+0x5b0>
 8010bf2:	e1c8      	b.n	8010f86 <HAL_DMA_IRQHandler+0x942>
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d100      	bne.n	8010bfa <HAL_DMA_IRQHandler+0x5b6>
 8010bf8:	e1da      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x96c>
 8010bfa:	4a1c      	ldr	r2, [pc, #112]	; (8010c6c <HAL_DMA_IRQHandler+0x628>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d100      	bne.n	8010c02 <HAL_DMA_IRQHandler+0x5be>
 8010c00:	e114      	b.n	8010e2c <HAL_DMA_IRQHandler+0x7e8>
 8010c02:	4a1b      	ldr	r2, [pc, #108]	; (8010c70 <HAL_DMA_IRQHandler+0x62c>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d100      	bne.n	8010c0a <HAL_DMA_IRQHandler+0x5c6>
 8010c08:	e135      	b.n	8010e76 <HAL_DMA_IRQHandler+0x832>
 8010c0a:	4a1a      	ldr	r2, [pc, #104]	; (8010c74 <HAL_DMA_IRQHandler+0x630>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d100      	bne.n	8010c12 <HAL_DMA_IRQHandler+0x5ce>
 8010c10:	e089      	b.n	8010d26 <HAL_DMA_IRQHandler+0x6e2>
 8010c12:	4a19      	ldr	r2, [pc, #100]	; (8010c78 <HAL_DMA_IRQHandler+0x634>)
 8010c14:	4694      	mov	ip, r2
 8010c16:	4463      	add	r3, ip
 8010c18:	1e5a      	subs	r2, r3, #1
 8010c1a:	4193      	sbcs	r3, r2
 8010c1c:	22f0      	movs	r2, #240	; 0xf0
 8010c1e:	425b      	negs	r3, r3
 8010c20:	0252      	lsls	r2, r2, #9
 8010c22:	4013      	ands	r3, r2
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	0192      	lsls	r2, r2, #6
 8010c28:	4694      	mov	ip, r2
 8010c2a:	4463      	add	r3, ip
 8010c2c:	4a14      	ldr	r2, [pc, #80]	; (8010c80 <HAL_DMA_IRQHandler+0x63c>)
 8010c2e:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010c32:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010c34:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010c36:	2321      	movs	r3, #33	; 0x21
 8010c38:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d100      	bne.n	8010c48 <HAL_DMA_IRQHandler+0x604>
 8010c46:	e6c3      	b.n	80109d0 <HAL_DMA_IRQHandler+0x38c>
        hdma->XferCpltCallback(hdma);
 8010c48:	0020      	movs	r0, r4
 8010c4a:	4798      	blx	r3
}  
 8010c4c:	e6c0      	b.n	80109d0 <HAL_DMA_IRQHandler+0x38c>
 8010c4e:	46c0      	nop			; (mov r8, r8)
 8010c50:	40020080 	.word	0x40020080
 8010c54:	40020008 	.word	0x40020008
 8010c58:	4002001c 	.word	0x4002001c
 8010c5c:	40020030 	.word	0x40020030
 8010c60:	40020044 	.word	0x40020044
 8010c64:	40020058 	.word	0x40020058
 8010c68:	4002006c 	.word	0x4002006c
 8010c6c:	40020408 	.word	0x40020408
 8010c70:	4002041c 	.word	0x4002041c
 8010c74:	40020430 	.word	0x40020430
 8010c78:	bffdfbbc 	.word	0xbffdfbbc
 8010c7c:	40020400 	.word	0x40020400
 8010c80:	40020000 	.word	0x40020000
 8010c84:	fffe2000 	.word	0xfffe2000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c88:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c8a:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c8c:	49d4      	ldr	r1, [pc, #848]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010c8e:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c90:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010c92:	4302      	orrs	r2, r0
 8010c94:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010c96:	2221      	movs	r2, #33	; 0x21
 8010c98:	3003      	adds	r0, #3
 8010c9a:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	3a01      	subs	r2, #1
 8010ca0:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ca2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d000      	beq.n	8010caa <HAL_DMA_IRQHandler+0x666>
 8010ca8:	e60e      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010caa:	0018      	movs	r0, r3
 8010cac:	6809      	ldr	r1, [r1, #0]
 8010cae:	2240      	movs	r2, #64	; 0x40
 8010cb0:	e691      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010cb2:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010cb4:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010cb6:	49cb      	ldr	r1, [pc, #812]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010cb8:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010cba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010cbc:	432a      	orrs	r2, r5
 8010cbe:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010cc0:	2221      	movs	r2, #33	; 0x21
 8010cc2:	3503      	adds	r5, #3
 8010cc4:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010cc6:	2500      	movs	r5, #0
 8010cc8:	3a01      	subs	r2, #1
 8010cca:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ccc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010cce:	2a00      	cmp	r2, #0
 8010cd0:	d000      	beq.n	8010cd4 <HAL_DMA_IRQHandler+0x690>
 8010cd2:	e5f9      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010cd4:	6809      	ldr	r1, [r1, #0]
 8010cd6:	2240      	movs	r2, #64	; 0x40
 8010cd8:	e620      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010cda:	2280      	movs	r2, #128	; 0x80
 8010cdc:	0212      	lsls	r2, r2, #8
 8010cde:	e530      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010ce0:	2280      	movs	r2, #128	; 0x80
 8010ce2:	0192      	lsls	r2, r2, #6
 8010ce4:	e6f6      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
 8010ce6:	2280      	movs	r2, #128	; 0x80
 8010ce8:	0292      	lsls	r2, r2, #10
 8010cea:	e6f3      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010cec:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010cee:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010cf0:	49bc      	ldr	r1, [pc, #752]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010cf2:	0212      	lsls	r2, r2, #8
 8010cf4:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010cf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010cf8:	4302      	orrs	r2, r0
 8010cfa:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010cfc:	2221      	movs	r2, #33	; 0x21
 8010cfe:	3003      	adds	r0, #3
 8010d00:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010d02:	2000      	movs	r0, #0
 8010d04:	3a01      	subs	r2, #1
 8010d06:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d0a:	2a00      	cmp	r2, #0
 8010d0c:	d000      	beq.n	8010d10 <HAL_DMA_IRQHandler+0x6cc>
 8010d0e:	e5db      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d10:	0018      	movs	r0, r3
 8010d12:	6809      	ldr	r1, [r1, #0]
 8010d14:	2280      	movs	r2, #128	; 0x80
 8010d16:	01d2      	lsls	r2, r2, #7
 8010d18:	e600      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010d1a:	2280      	movs	r2, #128	; 0x80
 8010d1c:	0392      	lsls	r2, r2, #14
 8010d1e:	e6d9      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d20:	2280      	movs	r2, #128	; 0x80
 8010d22:	0412      	lsls	r2, r2, #16
 8010d24:	e50d      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010d26:	2380      	movs	r3, #128	; 0x80
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	e77f      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010d2c:	2280      	movs	r2, #128	; 0x80
 8010d2e:	00d2      	lsls	r2, r2, #3
 8010d30:	e639      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
 8010d32:	2280      	movs	r2, #128	; 0x80
 8010d34:	00d2      	lsls	r2, r2, #3
 8010d36:	e68b      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010d38:	2380      	movs	r3, #128	; 0x80
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	e713      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d3e:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010d40:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d42:	49a8      	ldr	r1, [pc, #672]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010d44:	0112      	lsls	r2, r2, #4
 8010d46:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010d48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010d4a:	4302      	orrs	r2, r0
 8010d4c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010d4e:	2221      	movs	r2, #33	; 0x21
 8010d50:	3003      	adds	r0, #3
 8010d52:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010d54:	2000      	movs	r0, #0
 8010d56:	3a01      	subs	r2, #1
 8010d58:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d5c:	2a00      	cmp	r2, #0
 8010d5e:	d000      	beq.n	8010d62 <HAL_DMA_IRQHandler+0x71e>
 8010d60:	e5b2      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d62:	2280      	movs	r2, #128	; 0x80
 8010d64:	0018      	movs	r0, r3
 8010d66:	6809      	ldr	r1, [r1, #0]
 8010d68:	00d2      	lsls	r2, r2, #3
 8010d6a:	e5d7      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d6c:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010d6e:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d70:	499b      	ldr	r1, [pc, #620]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010d72:	0112      	lsls	r2, r2, #4
 8010d74:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010d76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010d78:	432a      	orrs	r2, r5
 8010d7a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010d7c:	2221      	movs	r2, #33	; 0x21
 8010d7e:	3503      	adds	r5, #3
 8010d80:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010d82:	2500      	movs	r5, #0
 8010d84:	3a01      	subs	r2, #1
 8010d86:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	d000      	beq.n	8010d90 <HAL_DMA_IRQHandler+0x74c>
 8010d8e:	e59b      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d90:	2280      	movs	r2, #128	; 0x80
 8010d92:	6809      	ldr	r1, [r1, #0]
 8010d94:	00d2      	lsls	r2, r2, #3
 8010d96:	e61e      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d98:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010d9a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d9c:	4990      	ldr	r1, [pc, #576]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010d9e:	0512      	lsls	r2, r2, #20
 8010da0:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010da2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010da4:	432a      	orrs	r2, r5
 8010da6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010da8:	2221      	movs	r2, #33	; 0x21
 8010daa:	3503      	adds	r5, #3
 8010dac:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010dae:	2500      	movs	r5, #0
 8010db0:	3a01      	subs	r2, #1
 8010db2:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010db4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010db6:	2a00      	cmp	r2, #0
 8010db8:	d000      	beq.n	8010dbc <HAL_DMA_IRQHandler+0x778>
 8010dba:	e585      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010dbc:	6809      	ldr	r1, [r1, #0]
 8010dbe:	2280      	movs	r2, #128	; 0x80
 8010dc0:	04d2      	lsls	r2, r2, #19
 8010dc2:	e608      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010dc4:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010dc6:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010dc8:	4986      	ldr	r1, [pc, #536]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010dca:	0512      	lsls	r2, r2, #20
 8010dcc:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010dce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010dd0:	4302      	orrs	r2, r0
 8010dd2:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010dd4:	2221      	movs	r2, #33	; 0x21
 8010dd6:	3003      	adds	r0, #3
 8010dd8:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010dda:	2000      	movs	r0, #0
 8010ddc:	3a01      	subs	r2, #1
 8010dde:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010de0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010de2:	2a00      	cmp	r2, #0
 8010de4:	d000      	beq.n	8010de8 <HAL_DMA_IRQHandler+0x7a4>
 8010de6:	e56f      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010de8:	6809      	ldr	r1, [r1, #0]
 8010dea:	487f      	ldr	r0, [pc, #508]	; (8010fe8 <HAL_DMA_IRQHandler+0x9a4>)
 8010dec:	2280      	movs	r2, #128	; 0x80
 8010dee:	04d2      	lsls	r2, r2, #19
 8010df0:	e594      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010df2:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010df4:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010df6:	497a      	ldr	r1, [pc, #488]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010df8:	0212      	lsls	r2, r2, #8
 8010dfa:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010dfc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010dfe:	4302      	orrs	r2, r0
 8010e00:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e02:	2221      	movs	r2, #33	; 0x21
 8010e04:	3003      	adds	r0, #3
 8010e06:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e08:	2000      	movs	r0, #0
 8010e0a:	3a01      	subs	r2, #1
 8010e0c:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e10:	2a00      	cmp	r2, #0
 8010e12:	d000      	beq.n	8010e16 <HAL_DMA_IRQHandler+0x7d2>
 8010e14:	e558      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e16:	0018      	movs	r0, r3
 8010e18:	6809      	ldr	r1, [r1, #0]
 8010e1a:	2280      	movs	r2, #128	; 0x80
 8010e1c:	01d2      	lsls	r2, r2, #7
 8010e1e:	e5da      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e20:	2204      	movs	r2, #4
 8010e22:	e5c0      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e24:	2302      	movs	r3, #2
 8010e26:	e69e      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e28:	2204      	movs	r2, #4
 8010e2a:	e611      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	e6fd      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e30:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e32:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e34:	496b      	ldr	r1, [pc, #428]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010e36:	0312      	lsls	r2, r2, #12
 8010e38:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e3c:	4302      	orrs	r2, r0
 8010e3e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e40:	2221      	movs	r2, #33	; 0x21
 8010e42:	3003      	adds	r0, #3
 8010e44:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e46:	2000      	movs	r0, #0
 8010e48:	3a01      	subs	r2, #1
 8010e4a:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e4e:	2a00      	cmp	r2, #0
 8010e50:	d000      	beq.n	8010e54 <HAL_DMA_IRQHandler+0x810>
 8010e52:	e539      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e54:	0018      	movs	r0, r3
 8010e56:	6809      	ldr	r1, [r1, #0]
 8010e58:	2280      	movs	r2, #128	; 0x80
 8010e5a:	02d2      	lsls	r2, r2, #11
 8010e5c:	e55e      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e5e:	2280      	movs	r2, #128	; 0x80
 8010e60:	0492      	lsls	r2, r2, #18
 8010e62:	e637      	b.n	8010ad4 <HAL_DMA_IRQHandler+0x490>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e64:	2280      	movs	r2, #128	; 0x80
 8010e66:	0512      	lsls	r2, r2, #20
 8010e68:	e46b      	b.n	8010742 <HAL_DMA_IRQHandler+0xfe>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e6a:	2240      	movs	r2, #64	; 0x40
 8010e6c:	e59b      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e6e:	2320      	movs	r3, #32
 8010e70:	e679      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e72:	2240      	movs	r2, #64	; 0x40
 8010e74:	e5ec      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e76:	2320      	movs	r3, #32
 8010e78:	e6d8      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e7a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e7c:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e7e:	4959      	ldr	r1, [pc, #356]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010e80:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e82:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e84:	4302      	orrs	r2, r0
 8010e86:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e88:	2221      	movs	r2, #33	; 0x21
 8010e8a:	3003      	adds	r0, #3
 8010e8c:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e8e:	2000      	movs	r0, #0
 8010e90:	3a01      	subs	r2, #1
 8010e92:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e94:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	d000      	beq.n	8010e9c <HAL_DMA_IRQHandler+0x858>
 8010e9a:	e515      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e9c:	0018      	movs	r0, r3
 8010e9e:	2240      	movs	r2, #64	; 0x40
 8010ea0:	6809      	ldr	r1, [r1, #0]
 8010ea2:	e53b      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ea4:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ea6:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ea8:	494d      	ldr	r1, [pc, #308]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010eaa:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010eac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010eae:	432a      	orrs	r2, r5
 8010eb0:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010eb2:	2221      	movs	r2, #33	; 0x21
 8010eb4:	3503      	adds	r5, #3
 8010eb6:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010eb8:	2500      	movs	r5, #0
 8010eba:	3a01      	subs	r2, #1
 8010ebc:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ebe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010ec0:	2a00      	cmp	r2, #0
 8010ec2:	d000      	beq.n	8010ec6 <HAL_DMA_IRQHandler+0x882>
 8010ec4:	e500      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ec6:	2240      	movs	r2, #64	; 0x40
 8010ec8:	6809      	ldr	r1, [r1, #0]
 8010eca:	e584      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ecc:	2180      	movs	r1, #128	; 0x80
 8010ece:	4a45      	ldr	r2, [pc, #276]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010ed0:	0409      	lsls	r1, r1, #16
 8010ed2:	6051      	str	r1, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010edc:	2221      	movs	r2, #33	; 0x21
 8010ede:	3103      	adds	r1, #3
 8010ee0:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	3a01      	subs	r2, #1
 8010ee6:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010eea:	2a00      	cmp	r2, #0
 8010eec:	d000      	beq.n	8010ef0 <HAL_DMA_IRQHandler+0x8ac>
 8010eee:	e4eb      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ef0:	4a3c      	ldr	r2, [pc, #240]	; (8010fe4 <HAL_DMA_IRQHandler+0x9a0>)
 8010ef2:	483e      	ldr	r0, [pc, #248]	; (8010fec <HAL_DMA_IRQHandler+0x9a8>)
 8010ef4:	6811      	ldr	r1, [r2, #0]
 8010ef6:	2280      	movs	r2, #128	; 0x80
 8010ef8:	03d2      	lsls	r2, r2, #15
 8010efa:	e50f      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010efc:	2180      	movs	r1, #128	; 0x80
 8010efe:	4a38      	ldr	r2, [pc, #224]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010f00:	0409      	lsls	r1, r1, #16
 8010f02:	6051      	str	r1, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010f04:	2101      	movs	r1, #1
 8010f06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f08:	430a      	orrs	r2, r1
 8010f0a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010f0c:	2221      	movs	r2, #33	; 0x21
 8010f0e:	3103      	adds	r1, #3
 8010f10:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010f12:	2100      	movs	r1, #0
 8010f14:	3a01      	subs	r2, #1
 8010f16:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010f1a:	2a00      	cmp	r2, #0
 8010f1c:	d000      	beq.n	8010f20 <HAL_DMA_IRQHandler+0x8dc>
 8010f1e:	e4d3      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f20:	4a2f      	ldr	r2, [pc, #188]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010f22:	6811      	ldr	r1, [r2, #0]
 8010f24:	2280      	movs	r2, #128	; 0x80
 8010f26:	03d2      	lsls	r2, r2, #15
 8010f28:	e555      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f2a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010f2c:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f2e:	492c      	ldr	r1, [pc, #176]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010f30:	0212      	lsls	r2, r2, #8
 8010f32:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010f34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f36:	432a      	orrs	r2, r5
 8010f38:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010f3a:	2221      	movs	r2, #33	; 0x21
 8010f3c:	3503      	adds	r5, #3
 8010f3e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010f40:	2500      	movs	r5, #0
 8010f42:	3a01      	subs	r2, #1
 8010f44:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010f46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	d000      	beq.n	8010f4e <HAL_DMA_IRQHandler+0x90a>
 8010f4c:	e4bc      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f4e:	2280      	movs	r2, #128	; 0x80
 8010f50:	6809      	ldr	r1, [r1, #0]
 8010f52:	01d2      	lsls	r2, r2, #7
 8010f54:	e53f      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f56:	2280      	movs	r2, #128	; 0x80
 8010f58:	01d2      	lsls	r2, r2, #7
 8010f5a:	e524      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
 8010f5c:	2280      	movs	r2, #128	; 0x80
 8010f5e:	01d2      	lsls	r2, r2, #7
 8010f60:	e576      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f62:	2380      	movs	r3, #128	; 0x80
 8010f64:	019b      	lsls	r3, r3, #6
 8010f66:	e661      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
 8010f68:	2380      	movs	r3, #128	; 0x80
 8010f6a:	019b      	lsls	r3, r3, #6
 8010f6c:	e5fb      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f6e:	2280      	movs	r2, #128	; 0x80
 8010f70:	02d2      	lsls	r2, r2, #11
 8010f72:	e518      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f74:	2380      	movs	r3, #128	; 0x80
 8010f76:	029b      	lsls	r3, r3, #10
 8010f78:	e5f5      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f7a:	2280      	movs	r2, #128	; 0x80
 8010f7c:	02d2      	lsls	r2, r2, #11
 8010f7e:	e567      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f80:	2380      	movs	r3, #128	; 0x80
 8010f82:	029b      	lsls	r3, r3, #10
 8010f84:	e652      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
 8010f86:	2380      	movs	r3, #128	; 0x80
 8010f88:	039b      	lsls	r3, r3, #14
 8010f8a:	e64f      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
 8010f8c:	2380      	movs	r3, #128	; 0x80
 8010f8e:	039b      	lsls	r3, r3, #14
 8010f90:	e5e9      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f92:	2280      	movs	r2, #128	; 0x80
 8010f94:	03d2      	lsls	r2, r2, #15
 8010f96:	e506      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
 8010f98:	2280      	movs	r2, #128	; 0x80
 8010f9a:	03d2      	lsls	r2, r2, #15
 8010f9c:	e558      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
 8010f9e:	2280      	movs	r2, #128	; 0x80
 8010fa0:	04d2      	lsls	r2, r2, #19
 8010fa2:	e555      	b.n	8010a50 <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010fa4:	2380      	movs	r3, #128	; 0x80
 8010fa6:	049b      	lsls	r3, r3, #18
 8010fa8:	e5dd      	b.n	8010b66 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010faa:	2280      	movs	r2, #128	; 0x80
 8010fac:	04d2      	lsls	r2, r2, #19
 8010fae:	e4fa      	b.n	80109a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010fb0:	2380      	movs	r3, #128	; 0x80
 8010fb2:	049b      	lsls	r3, r3, #18
 8010fb4:	e63a      	b.n	8010c2c <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fb6:	2208      	movs	r2, #8
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010fb8:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fba:	4909      	ldr	r1, [pc, #36]	; (8010fe0 <HAL_DMA_IRQHandler+0x99c>)
 8010fbc:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010fbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010fc0:	4302      	orrs	r2, r0
 8010fc2:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010fc4:	2221      	movs	r2, #33	; 0x21
 8010fc6:	3003      	adds	r0, #3
 8010fc8:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010fca:	2000      	movs	r0, #0
 8010fcc:	3a01      	subs	r2, #1
 8010fce:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010fd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d000      	beq.n	8010fd8 <HAL_DMA_IRQHandler+0x994>
 8010fd6:	e477      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fd8:	0018      	movs	r0, r3
 8010fda:	2204      	movs	r2, #4
 8010fdc:	6809      	ldr	r1, [r1, #0]
 8010fde:	e4fa      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
 8010fe0:	40020400 	.word	0x40020400
 8010fe4:	40020000 	.word	0x40020000
 8010fe8:	40020080 	.word	0x40020080
 8010fec:	4002006c 	.word	0x4002006c
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ff0:	2208      	movs	r2, #8
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ff2:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ff4:	492c      	ldr	r1, [pc, #176]	; (80110a8 <HAL_DMA_IRQHandler+0xa64>)
 8010ff6:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ff8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ffa:	432a      	orrs	r2, r5
 8010ffc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010ffe:	2221      	movs	r2, #33	; 0x21
 8011000:	3503      	adds	r5, #3
 8011002:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8011004:	2500      	movs	r5, #0
 8011006:	3a01      	subs	r2, #1
 8011008:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801100a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801100c:	2a00      	cmp	r2, #0
 801100e:	d000      	beq.n	8011012 <HAL_DMA_IRQHandler+0x9ce>
 8011010:	e45a      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011012:	2204      	movs	r2, #4
 8011014:	6809      	ldr	r1, [r1, #0]
 8011016:	e481      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011018:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801101a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801101c:	4922      	ldr	r1, [pc, #136]	; (80110a8 <HAL_DMA_IRQHandler+0xa64>)
 801101e:	0112      	lsls	r2, r2, #4
 8011020:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011022:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011024:	432a      	orrs	r2, r5
 8011026:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011028:	2221      	movs	r2, #33	; 0x21
 801102a:	3503      	adds	r5, #3
 801102c:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801102e:	2500      	movs	r5, #0
 8011030:	3a01      	subs	r2, #1
 8011032:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011034:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011036:	2a00      	cmp	r2, #0
 8011038:	d000      	beq.n	801103c <HAL_DMA_IRQHandler+0x9f8>
 801103a:	e445      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801103c:	2280      	movs	r2, #128	; 0x80
 801103e:	6809      	ldr	r1, [r1, #0]
 8011040:	00d2      	lsls	r2, r2, #3
 8011042:	e46b      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011044:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011046:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011048:	4918      	ldr	r1, [pc, #96]	; (80110ac <HAL_DMA_IRQHandler+0xa68>)
 801104a:	0112      	lsls	r2, r2, #4
 801104c:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801104e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011050:	4302      	orrs	r2, r0
 8011052:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011054:	2221      	movs	r2, #33	; 0x21
 8011056:	3003      	adds	r0, #3
 8011058:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801105a:	2000      	movs	r0, #0
 801105c:	3a01      	subs	r2, #1
 801105e:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011060:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011062:	2a00      	cmp	r2, #0
 8011064:	d000      	beq.n	8011068 <HAL_DMA_IRQHandler+0xa24>
 8011066:	e42f      	b.n	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011068:	2280      	movs	r2, #128	; 0x80
 801106a:	0018      	movs	r0, r3
 801106c:	6809      	ldr	r1, [r1, #0]
 801106e:	00d2      	lsls	r2, r2, #3
 8011070:	e4b1      	b.n	80109d6 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011072:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011074:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011076:	490c      	ldr	r1, [pc, #48]	; (80110a8 <HAL_DMA_IRQHandler+0xa64>)
 8011078:	0212      	lsls	r2, r2, #8
 801107a:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801107c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801107e:	432a      	orrs	r2, r5
 8011080:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011082:	2221      	movs	r2, #33	; 0x21
 8011084:	3503      	adds	r5, #3
 8011086:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8011088:	2500      	movs	r5, #0
 801108a:	3a01      	subs	r2, #1
 801108c:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801108e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011090:	2a00      	cmp	r2, #0
 8011092:	d001      	beq.n	8011098 <HAL_DMA_IRQHandler+0xa54>
 8011094:	f7ff fc18 	bl	80108c8 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011098:	2280      	movs	r2, #128	; 0x80
 801109a:	6809      	ldr	r1, [r1, #0]
 801109c:	01d2      	lsls	r2, r2, #7
 801109e:	e43d      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
 80110a0:	2280      	movs	r2, #128	; 0x80
 80110a2:	6809      	ldr	r1, [r1, #0]
 80110a4:	02d2      	lsls	r2, r2, #11
 80110a6:	e439      	b.n	801091c <HAL_DMA_IRQHandler+0x2d8>
 80110a8:	40020000 	.word	0x40020000
 80110ac:	40020400 	.word	0x40020400

080110b0 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80110b0:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <HAL_FLASH_Unlock+0x18>)
 80110b2:	691a      	ldr	r2, [r3, #16]
 80110b4:	0612      	lsls	r2, r2, #24
 80110b6:	d505      	bpl.n	80110c4 <HAL_FLASH_Unlock+0x14>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 80110b8:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80110ba:	4a04      	ldr	r2, [pc, #16]	; (80110cc <HAL_FLASH_Unlock+0x1c>)
 80110bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80110be:	4a04      	ldr	r2, [pc, #16]	; (80110d0 <HAL_FLASH_Unlock+0x20>)
 80110c0:	605a      	str	r2, [r3, #4]
}
 80110c2:	4770      	bx	lr
    return HAL_ERROR;
 80110c4:	2001      	movs	r0, #1
 80110c6:	e7fc      	b.n	80110c2 <HAL_FLASH_Unlock+0x12>
 80110c8:	40022000 	.word	0x40022000
 80110cc:	45670123 	.word	0x45670123
 80110d0:	cdef89ab 	.word	0xcdef89ab

080110d4 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80110d4:	2180      	movs	r1, #128	; 0x80
 80110d6:	4a03      	ldr	r2, [pc, #12]	; (80110e4 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80110d8:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80110da:	6913      	ldr	r3, [r2, #16]
 80110dc:	430b      	orrs	r3, r1
 80110de:	6113      	str	r3, [r2, #16]
}
 80110e0:	4770      	bx	lr
 80110e2:	46c0      	nop			; (mov r8, r8)
 80110e4:	40022000 	.word	0x40022000

080110e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80110e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ea:	0004      	movs	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80110ec:	f7fe fd6c 	bl	800fbc8 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80110f0:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80110f2:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80110f4:	4d1c      	ldr	r5, [pc, #112]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
 80110f6:	e001      	b.n	80110fc <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80110f8:	1c63      	adds	r3, r4, #1
 80110fa:	d10f      	bne.n	801111c <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80110fc:	68eb      	ldr	r3, [r5, #12]
 80110fe:	421e      	tst	r6, r3
 8011100:	d1fa      	bne.n	80110f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011102:	2320      	movs	r3, #32
 8011104:	68ea      	ldr	r2, [r5, #12]
 8011106:	4213      	tst	r3, r2
 8011108:	d111      	bne.n	801112e <FLASH_WaitForLastOperation+0x46>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801110a:	4b17      	ldr	r3, [pc, #92]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
 801110c:	68da      	ldr	r2, [r3, #12]
 801110e:	06d2      	lsls	r2, r2, #27
 8011110:	d412      	bmi.n	8011138 <FLASH_WaitForLastOperation+0x50>
 8011112:	68db      	ldr	r3, [r3, #12]
    FLASH_SetErrorCode();
    return HAL_ERROR;
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011114:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011116:	075b      	lsls	r3, r3, #29
 8011118:	d40e      	bmi.n	8011138 <FLASH_WaitForLastOperation+0x50>
  
}
 801111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801111c:	2c00      	cmp	r4, #0
 801111e:	d004      	beq.n	801112a <FLASH_WaitForLastOperation+0x42>
 8011120:	f7fe fd52 	bl	800fbc8 <HAL_GetTick>
 8011124:	1bc0      	subs	r0, r0, r7
 8011126:	42a0      	cmp	r0, r4
 8011128:	d9e8      	bls.n	80110fc <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 801112a:	2003      	movs	r0, #3
 801112c:	e7f5      	b.n	801111a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801112e:	60eb      	str	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011130:	4b0d      	ldr	r3, [pc, #52]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
 8011132:	68da      	ldr	r2, [r3, #12]
 8011134:	06d2      	lsls	r2, r2, #27
 8011136:	d5ec      	bpl.n	8011112 <FLASH_WaitForLastOperation+0x2a>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011138:	4b0b      	ldr	r3, [pc, #44]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	06db      	lsls	r3, r3, #27
 801113e:	d504      	bpl.n	801114a <FLASH_WaitForLastOperation+0x62>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011140:	2102      	movs	r1, #2
 8011142:	4a0a      	ldr	r2, [pc, #40]	; (801116c <FLASH_WaitForLastOperation+0x84>)
 8011144:	69d3      	ldr	r3, [r2, #28]
 8011146:	430b      	orrs	r3, r1
 8011148:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801114a:	4b07      	ldr	r3, [pc, #28]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	075b      	lsls	r3, r3, #29
 8011150:	d504      	bpl.n	801115c <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011152:	2101      	movs	r1, #1
 8011154:	4a05      	ldr	r2, [pc, #20]	; (801116c <FLASH_WaitForLastOperation+0x84>)
 8011156:	69d3      	ldr	r3, [r2, #28]
 8011158:	430b      	orrs	r3, r1
 801115a:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801115c:	2214      	movs	r2, #20
 801115e:	4b02      	ldr	r3, [pc, #8]	; (8011168 <FLASH_WaitForLastOperation+0x80>)
    return HAL_ERROR;
 8011160:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011162:	60da      	str	r2, [r3, #12]
}  
 8011164:	e7d9      	b.n	801111a <FLASH_WaitForLastOperation+0x32>
 8011166:	46c0      	nop			; (mov r8, r8)
 8011168:	40022000 	.word	0x40022000
 801116c:	20006d90 	.word	0x20006d90

08011170 <HAL_FLASH_Program>:
{
 8011170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011172:	464e      	mov	r6, r9
 8011174:	4657      	mov	r7, sl
 8011176:	46de      	mov	lr, fp
 8011178:	4645      	mov	r5, r8
 801117a:	b5e0      	push	{r5, r6, r7, lr}
 801117c:	469a      	mov	sl, r3
 801117e:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8011180:	4b2a      	ldr	r3, [pc, #168]	; (801122c <HAL_FLASH_Program+0xbc>)
{
 8011182:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8011184:	4699      	mov	r9, r3
 8011186:	7e1b      	ldrb	r3, [r3, #24]
{
 8011188:	0004      	movs	r4, r0
 801118a:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801118c:	2b01      	cmp	r3, #1
 801118e:	d048      	beq.n	8011222 <HAL_FLASH_Program+0xb2>
 8011190:	2501      	movs	r5, #1
 8011192:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011194:	4826      	ldr	r0, [pc, #152]	; (8011230 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8011196:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011198:	f7ff ffa6 	bl	80110e8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801119c:	2800      	cmp	r0, #0
 801119e:	d136      	bne.n	801120e <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80111a0:	2c01      	cmp	r4, #1
 80111a2:	d040      	beq.n	8011226 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 80111a4:	3c02      	subs	r4, #2
 80111a6:	4263      	negs	r3, r4
 80111a8:	415c      	adcs	r4, r3
 80111aa:	2304      	movs	r3, #4
 80111ac:	4264      	negs	r4, r4
 80111ae:	43ac      	bics	r4, r5
 80111b0:	46a0      	mov	r8, r4
 80111b2:	469c      	mov	ip, r3
 80111b4:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111b6:	2300      	movs	r3, #0
      nbiterations = 4;
 80111b8:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111ba:	469b      	mov	fp, r3
 80111bc:	e018      	b.n	80111f0 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80111be:	4653      	mov	r3, sl
 80111c0:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111c2:	464a      	mov	r2, r9
 80111c4:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80111c6:	2701      	movs	r7, #1
 80111c8:	4c1a      	ldr	r4, [pc, #104]	; (8011234 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111ca:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80111cc:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80111ce:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80111d0:	433a      	orrs	r2, r7
 80111d2:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80111d4:	4816      	ldr	r0, [pc, #88]	; (8011230 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 80111d6:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80111d8:	f7ff ff86 	bl	80110e8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	43bb      	bics	r3, r7
 80111e0:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d113      	bne.n	801120e <HAL_FLASH_Program+0x9e>
    for (index = 0; index < nbiterations; index++)
 80111e6:	3501      	adds	r5, #1
 80111e8:	b2eb      	uxtb	r3, r5
 80111ea:	3602      	adds	r6, #2
 80111ec:	4598      	cmp	r8, r3
 80111ee:	d90e      	bls.n	801120e <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80111f0:	2220      	movs	r2, #32
 80111f2:	012b      	lsls	r3, r5, #4
 80111f4:	4252      	negs	r2, r2
 80111f6:	189a      	adds	r2, r3, r2
 80111f8:	d5e1      	bpl.n	80111be <HAL_FLASH_Program+0x4e>
 80111fa:	2220      	movs	r2, #32
 80111fc:	4651      	mov	r1, sl
 80111fe:	1ad2      	subs	r2, r2, r3
 8011200:	4091      	lsls	r1, r2
 8011202:	000a      	movs	r2, r1
 8011204:	9901      	ldr	r1, [sp, #4]
 8011206:	40d9      	lsrs	r1, r3
 8011208:	000b      	movs	r3, r1
 801120a:	4313      	orrs	r3, r2
 801120c:	e7d9      	b.n	80111c2 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801120e:	2300      	movs	r3, #0
 8011210:	464a      	mov	r2, r9
 8011212:	7613      	strb	r3, [r2, #24]
}
 8011214:	b003      	add	sp, #12
 8011216:	bcf0      	pop	{r4, r5, r6, r7}
 8011218:	46bb      	mov	fp, r7
 801121a:	46b2      	mov	sl, r6
 801121c:	46a9      	mov	r9, r5
 801121e:	46a0      	mov	r8, r4
 8011220:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011222:	2002      	movs	r0, #2
 8011224:	e7f6      	b.n	8011214 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8011226:	2301      	movs	r3, #1
 8011228:	4698      	mov	r8, r3
 801122a:	e7c4      	b.n	80111b6 <HAL_FLASH_Program+0x46>
 801122c:	20006d90 	.word	0x20006d90
 8011230:	0000c350 	.word	0x0000c350
 8011234:	40022000 	.word	0x40022000

08011238 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8011238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801123a:	4646      	mov	r6, r8
 801123c:	464f      	mov	r7, r9
 801123e:	46d6      	mov	lr, sl
 8011240:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011242:	4f30      	ldr	r7, [pc, #192]	; (8011304 <HAL_FLASHEx_Erase+0xcc>)
{
 8011244:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8011246:	7e3b      	ldrb	r3, [r7, #24]
{
 8011248:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801124a:	2b01      	cmp	r3, #1
 801124c:	d057      	beq.n	80112fe <HAL_FLASHEx_Erase+0xc6>
 801124e:	2301      	movs	r3, #1
 8011250:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011252:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011254:	482c      	ldr	r0, [pc, #176]	; (8011308 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011256:	2b01      	cmp	r3, #1
 8011258:	d034      	beq.n	80112c4 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801125a:	f7ff ff45 	bl	80110e8 <FLASH_WaitForLastOperation>
 801125e:	2800      	cmp	r0, #0
 8011260:	d134      	bne.n	80112cc <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8011262:	2301      	movs	r3, #1
 8011264:	4642      	mov	r2, r8
 8011266:	425b      	negs	r3, r3
 8011268:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801126a:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 801126c:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801126e:	02db      	lsls	r3, r3, #11
 8011270:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8011272:	429d      	cmp	r5, r3
 8011274:	d22a      	bcs.n	80112cc <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011276:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011278:	4c24      	ldr	r4, [pc, #144]	; (801130c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801127a:	4699      	mov	r9, r3
 801127c:	e00a      	b.n	8011294 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 801127e:	2380      	movs	r3, #128	; 0x80
 8011280:	011b      	lsls	r3, r3, #4
 8011282:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011284:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8011286:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011288:	4694      	mov	ip, r2
 801128a:	68b3      	ldr	r3, [r6, #8]
 801128c:	02db      	lsls	r3, r3, #11
 801128e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011290:	42ab      	cmp	r3, r5
 8011292:	d91c      	bls.n	80112ce <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011294:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011296:	464b      	mov	r3, r9
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011298:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801129a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801129c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801129e:	481a      	ldr	r0, [pc, #104]	; (8011308 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80112a0:	4313      	orrs	r3, r2
 80112a2:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80112a4:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80112a6:	6923      	ldr	r3, [r4, #16]
 80112a8:	323e      	adds	r2, #62	; 0x3e
 80112aa:	4313      	orrs	r3, r2
 80112ac:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112ae:	f7ff ff1b 	bl	80110e8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80112b2:	4652      	mov	r2, sl
 80112b4:	6923      	ldr	r3, [r4, #16]
 80112b6:	4393      	bics	r3, r2
 80112b8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d0df      	beq.n	801127e <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 80112be:	4643      	mov	r3, r8
 80112c0:	601d      	str	r5, [r3, #0]
            break;
 80112c2:	e004      	b.n	80112ce <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80112c4:	f7ff ff10 	bl	80110e8 <FLASH_WaitForLastOperation>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d007      	beq.n	80112dc <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 80112cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80112ce:	2300      	movs	r3, #0
 80112d0:	763b      	strb	r3, [r7, #24]
}
 80112d2:	bce0      	pop	{r5, r6, r7}
 80112d4:	46ba      	mov	sl, r7
 80112d6:	46b1      	mov	r9, r6
 80112d8:	46a8      	mov	r8, r5
 80112da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80112dc:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80112de:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80112e0:	4c0a      	ldr	r4, [pc, #40]	; (801130c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80112e2:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80112e4:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112e6:	4808      	ldr	r0, [pc, #32]	; (8011308 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80112e8:	432b      	orrs	r3, r5
 80112ea:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	4313      	orrs	r3, r2
 80112f0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112f2:	f7ff fef9 	bl	80110e8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80112f6:	6923      	ldr	r3, [r4, #16]
 80112f8:	43ab      	bics	r3, r5
 80112fa:	6123      	str	r3, [r4, #16]
 80112fc:	e7e7      	b.n	80112ce <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 80112fe:	2002      	movs	r0, #2
 8011300:	e7e7      	b.n	80112d2 <HAL_FLASHEx_Erase+0x9a>
 8011302:	46c0      	nop			; (mov r8, r8)
 8011304:	20006d90 	.word	0x20006d90
 8011308:	0000c350 	.word	0x0000c350
 801130c:	40022000 	.word	0x40022000

08011310 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011310:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011312:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011314:	4b05      	ldr	r3, [pc, #20]	; (801132c <FLASH_PageErase+0x1c>)
 8011316:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011318:	4b05      	ldr	r3, [pc, #20]	; (8011330 <FLASH_PageErase+0x20>)
 801131a:	691a      	ldr	r2, [r3, #16]
 801131c:	430a      	orrs	r2, r1
 801131e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011320:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011322:	691a      	ldr	r2, [r3, #16]
 8011324:	313e      	adds	r1, #62	; 0x3e
 8011326:	430a      	orrs	r2, r1
 8011328:	611a      	str	r2, [r3, #16]
}
 801132a:	4770      	bx	lr
 801132c:	20006d90 	.word	0x20006d90
 8011330:	40022000 	.word	0x40022000

08011334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011336:	46de      	mov	lr, fp
 8011338:	4657      	mov	r7, sl
 801133a:	464e      	mov	r6, r9
 801133c:	4645      	mov	r5, r8
 801133e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011340:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00;
 8011342:	2300      	movs	r3, #0
{ 
 8011344:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8011346:	2c00      	cmp	r4, #0
 8011348:	d100      	bne.n	801134c <HAL_GPIO_Init+0x18>
 801134a:	e08b      	b.n	8011464 <HAL_GPIO_Init+0x130>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801134c:	4a7d      	ldr	r2, [pc, #500]	; (8011544 <HAL_GPIO_Init+0x210>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801134e:	468a      	mov	sl, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011350:	4691      	mov	r9, r2
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011352:	2201      	movs	r2, #1
 8011354:	0021      	movs	r1, r4
 8011356:	409a      	lsls	r2, r3
 8011358:	4011      	ands	r1, r2
 801135a:	9101      	str	r1, [sp, #4]
    if(iocurrent)
 801135c:	4214      	tst	r4, r2
 801135e:	d07c      	beq.n	801145a <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011360:	4652      	mov	r2, sl
 8011362:	6852      	ldr	r2, [r2, #4]
 8011364:	2510      	movs	r5, #16
 8011366:	0011      	movs	r1, r2
 8011368:	43a9      	bics	r1, r5
 801136a:	468c      	mov	ip, r1
 801136c:	2902      	cmp	r1, #2
 801136e:	d100      	bne.n	8011372 <HAL_GPIO_Init+0x3e>
 8011370:	e07f      	b.n	8011472 <HAL_GPIO_Init+0x13e>
      temp = GPIOx->MODER;
 8011372:	6801      	ldr	r1, [r0, #0]
 8011374:	005d      	lsls	r5, r3, #1
 8011376:	468b      	mov	fp, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011378:	2103      	movs	r1, #3
 801137a:	40a9      	lsls	r1, r5
 801137c:	4688      	mov	r8, r1
 801137e:	465e      	mov	r6, fp
 8011380:	4647      	mov	r7, r8
 8011382:	43be      	bics	r6, r7
 8011384:	46b3      	mov	fp, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011386:	2603      	movs	r6, #3
 8011388:	4016      	ands	r6, r2
 801138a:	40ae      	lsls	r6, r5
 801138c:	46b0      	mov	r8, r6
 801138e:	465e      	mov	r6, fp
 8011390:	4647      	mov	r7, r8
 8011392:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8011394:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011396:	2601      	movs	r6, #1
 8011398:	4276      	negs	r6, r6
 801139a:	46b0      	mov	r8, r6
 801139c:	44c4      	add	ip, r8
 801139e:	4666      	mov	r6, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80113a0:	43c9      	mvns	r1, r1
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80113a2:	2e01      	cmp	r6, #1
 80113a4:	d800      	bhi.n	80113a8 <HAL_GPIO_Init+0x74>
 80113a6:	e08d      	b.n	80114c4 <HAL_GPIO_Init+0x190>
      temp = GPIOx->PUPDR;
 80113a8:	68c6      	ldr	r6, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80113aa:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80113ac:	4656      	mov	r6, sl
 80113ae:	68b6      	ldr	r6, [r6, #8]
 80113b0:	40ae      	lsls	r6, r5
 80113b2:	4331      	orrs	r1, r6
      GPIOx->PUPDR = temp;
 80113b4:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80113b6:	2180      	movs	r1, #128	; 0x80
 80113b8:	0549      	lsls	r1, r1, #21
 80113ba:	420a      	tst	r2, r1
 80113bc:	d04d      	beq.n	801145a <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80113be:	4649      	mov	r1, r9
 80113c0:	2601      	movs	r6, #1
 80113c2:	464d      	mov	r5, r9
 80113c4:	6989      	ldr	r1, [r1, #24]
 80113c6:	4331      	orrs	r1, r6
 80113c8:	61a9      	str	r1, [r5, #24]
 80113ca:	69a9      	ldr	r1, [r5, #24]
 80113cc:	4d5e      	ldr	r5, [pc, #376]	; (8011548 <HAL_GPIO_Init+0x214>)
 80113ce:	4031      	ands	r1, r6
 80113d0:	46ac      	mov	ip, r5
 80113d2:	9103      	str	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80113d4:	3602      	adds	r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80113d6:	9903      	ldr	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80113d8:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2];
 80113da:	0899      	lsrs	r1, r3, #2
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80113dc:	00b6      	lsls	r6, r6, #2
 80113de:	0089      	lsls	r1, r1, #2
 80113e0:	4461      	add	r1, ip
 80113e2:	46b4      	mov	ip, r6
 80113e4:	260f      	movs	r6, #15
 80113e6:	4667      	mov	r7, ip
 80113e8:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80113ea:	688d      	ldr	r5, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80113ec:	43b5      	bics	r5, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80113ee:	2690      	movs	r6, #144	; 0x90
 80113f0:	05f6      	lsls	r6, r6, #23
 80113f2:	42b0      	cmp	r0, r6
 80113f4:	d015      	beq.n	8011422 <HAL_GPIO_Init+0xee>
 80113f6:	4e55      	ldr	r6, [pc, #340]	; (801154c <HAL_GPIO_Init+0x218>)
 80113f8:	42b0      	cmp	r0, r6
 80113fa:	d100      	bne.n	80113fe <HAL_GPIO_Init+0xca>
 80113fc:	e09d      	b.n	801153a <HAL_GPIO_Init+0x206>
 80113fe:	4e54      	ldr	r6, [pc, #336]	; (8011550 <HAL_GPIO_Init+0x21c>)
 8011400:	46b0      	mov	r8, r6
 8011402:	2602      	movs	r6, #2
 8011404:	4540      	cmp	r0, r8
 8011406:	d009      	beq.n	801141c <HAL_GPIO_Init+0xe8>
 8011408:	4e52      	ldr	r6, [pc, #328]	; (8011554 <HAL_GPIO_Init+0x220>)
 801140a:	42b0      	cmp	r0, r6
 801140c:	d100      	bne.n	8011410 <HAL_GPIO_Init+0xdc>
 801140e:	e090      	b.n	8011532 <HAL_GPIO_Init+0x1fe>
 8011410:	4e51      	ldr	r6, [pc, #324]	; (8011558 <HAL_GPIO_Init+0x224>)
 8011412:	46b0      	mov	r8, r6
 8011414:	2604      	movs	r6, #4
 8011416:	4540      	cmp	r0, r8
 8011418:	d000      	beq.n	801141c <HAL_GPIO_Init+0xe8>
 801141a:	2605      	movs	r6, #5
 801141c:	4667      	mov	r7, ip
 801141e:	40be      	lsls	r6, r7
 8011420:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8011422:	608d      	str	r5, [r1, #8]
        temp = EXTI->IMR;
 8011424:	494d      	ldr	r1, [pc, #308]	; (801155c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011426:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->IMR;
 8011428:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801142a:	43ed      	mvns	r5, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801142c:	03d6      	lsls	r6, r2, #15
 801142e:	d467      	bmi.n	8011500 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011430:	4e4a      	ldr	r6, [pc, #296]	; (801155c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011432:	4029      	ands	r1, r5
        EXTI->IMR = temp;
 8011434:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8011436:	6871      	ldr	r1, [r6, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011438:	0396      	lsls	r6, r2, #14
 801143a:	d468      	bmi.n	801150e <HAL_GPIO_Init+0x1da>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 801143c:	4e47      	ldr	r6, [pc, #284]	; (801155c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801143e:	4029      	ands	r1, r5
        EXTI->EMR = temp;
 8011440:	6071      	str	r1, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011442:	68b1      	ldr	r1, [r6, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011444:	02d6      	lsls	r6, r2, #11
 8011446:	d469      	bmi.n	801151c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011448:	4e44      	ldr	r6, [pc, #272]	; (801155c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801144a:	4029      	ands	r1, r5
        EXTI->RTSR = temp;
 801144c:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 801144e:	68f1      	ldr	r1, [r6, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011450:	0292      	lsls	r2, r2, #10
 8011452:	d46a      	bmi.n	801152a <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011454:	4029      	ands	r1, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011456:	4a41      	ldr	r2, [pc, #260]	; (801155c <HAL_GPIO_Init+0x228>)
 8011458:	60d1      	str	r1, [r2, #12]
  while ((GPIO_Init->Pin) >> position)
 801145a:	0022      	movs	r2, r4
      }
    }
    
    position++;
 801145c:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801145e:	40da      	lsrs	r2, r3
 8011460:	d000      	beq.n	8011464 <HAL_GPIO_Init+0x130>
 8011462:	e776      	b.n	8011352 <HAL_GPIO_Init+0x1e>
  } 
}
 8011464:	b005      	add	sp, #20
 8011466:	bcf0      	pop	{r4, r5, r6, r7}
 8011468:	46bb      	mov	fp, r7
 801146a:	46b2      	mov	sl, r6
 801146c:	46a9      	mov	r9, r5
 801146e:	46a0      	mov	r8, r4
 8011470:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3];
 8011472:	08d9      	lsrs	r1, r3, #3
 8011474:	0089      	lsls	r1, r1, #2
 8011476:	1841      	adds	r1, r0, r1
 8011478:	6a0d      	ldr	r5, [r1, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801147a:	260f      	movs	r6, #15
        temp = GPIOx->AFR[position >> 3];
 801147c:	46ac      	mov	ip, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801147e:	2507      	movs	r5, #7
 8011480:	401d      	ands	r5, r3
 8011482:	00ad      	lsls	r5, r5, #2
 8011484:	40ae      	lsls	r6, r5
 8011486:	46b0      	mov	r8, r6
 8011488:	4666      	mov	r6, ip
 801148a:	4647      	mov	r7, r8
 801148c:	43be      	bics	r6, r7
 801148e:	46b4      	mov	ip, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011490:	4656      	mov	r6, sl
 8011492:	6936      	ldr	r6, [r6, #16]
 8011494:	40ae      	lsls	r6, r5
 8011496:	0035      	movs	r5, r6
 8011498:	4666      	mov	r6, ip
 801149a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 801149c:	620d      	str	r5, [r1, #32]
      temp = GPIOx->MODER;
 801149e:	6801      	ldr	r1, [r0, #0]
 80114a0:	005d      	lsls	r5, r3, #1
 80114a2:	4688      	mov	r8, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80114a4:	2103      	movs	r1, #3
 80114a6:	40a9      	lsls	r1, r5
 80114a8:	468b      	mov	fp, r1
 80114aa:	4646      	mov	r6, r8
 80114ac:	465f      	mov	r7, fp
 80114ae:	43be      	bics	r6, r7
 80114b0:	46b0      	mov	r8, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80114b2:	2603      	movs	r6, #3
 80114b4:	4016      	ands	r6, r2
 80114b6:	40ae      	lsls	r6, r5
 80114b8:	46b4      	mov	ip, r6
 80114ba:	4646      	mov	r6, r8
 80114bc:	4667      	mov	r7, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80114be:	43c9      	mvns	r1, r1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80114c0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80114c2:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80114c4:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114c6:	400e      	ands	r6, r1
 80114c8:	46b0      	mov	r8, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80114ca:	4656      	mov	r6, sl
 80114cc:	68f6      	ldr	r6, [r6, #12]
 80114ce:	40ae      	lsls	r6, r5
 80114d0:	46b4      	mov	ip, r6
 80114d2:	4646      	mov	r6, r8
 80114d4:	4667      	mov	r7, ip
 80114d6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80114d8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80114da:	6846      	ldr	r6, [r0, #4]
 80114dc:	46b4      	mov	ip, r6
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80114de:	2601      	movs	r6, #1
 80114e0:	409e      	lsls	r6, r3
 80114e2:	46b0      	mov	r8, r6
 80114e4:	4666      	mov	r6, ip
 80114e6:	4647      	mov	r7, r8
 80114e8:	43be      	bics	r6, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80114ea:	2701      	movs	r7, #1
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80114ec:	46b0      	mov	r8, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80114ee:	0916      	lsrs	r6, r2, #4
 80114f0:	403e      	ands	r6, r7
 80114f2:	409e      	lsls	r6, r3
 80114f4:	46b4      	mov	ip, r6
 80114f6:	4646      	mov	r6, r8
 80114f8:	4667      	mov	r7, ip
 80114fa:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80114fc:	6046      	str	r6, [r0, #4]
 80114fe:	e753      	b.n	80113a8 <HAL_GPIO_Init+0x74>
          SET_BIT(temp, iocurrent); 
 8011500:	9e01      	ldr	r6, [sp, #4]
 8011502:	4331      	orrs	r1, r6
        EXTI->IMR = temp;
 8011504:	4e15      	ldr	r6, [pc, #84]	; (801155c <HAL_GPIO_Init+0x228>)
 8011506:	6031      	str	r1, [r6, #0]
        temp = EXTI->EMR;
 8011508:	6871      	ldr	r1, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801150a:	0396      	lsls	r6, r2, #14
 801150c:	d596      	bpl.n	801143c <HAL_GPIO_Init+0x108>
          SET_BIT(temp, iocurrent); 
 801150e:	9e01      	ldr	r6, [sp, #4]
 8011510:	4331      	orrs	r1, r6
        EXTI->EMR = temp;
 8011512:	4e12      	ldr	r6, [pc, #72]	; (801155c <HAL_GPIO_Init+0x228>)
 8011514:	6071      	str	r1, [r6, #4]
        temp = EXTI->RTSR;
 8011516:	68b1      	ldr	r1, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011518:	02d6      	lsls	r6, r2, #11
 801151a:	d595      	bpl.n	8011448 <HAL_GPIO_Init+0x114>
          SET_BIT(temp, iocurrent); 
 801151c:	9e01      	ldr	r6, [sp, #4]
 801151e:	4331      	orrs	r1, r6
        EXTI->RTSR = temp;
 8011520:	4e0e      	ldr	r6, [pc, #56]	; (801155c <HAL_GPIO_Init+0x228>)
 8011522:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 8011524:	68f1      	ldr	r1, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011526:	0292      	lsls	r2, r2, #10
 8011528:	d594      	bpl.n	8011454 <HAL_GPIO_Init+0x120>
          SET_BIT(temp, iocurrent); 
 801152a:	9a01      	ldr	r2, [sp, #4]
 801152c:	430a      	orrs	r2, r1
 801152e:	0011      	movs	r1, r2
 8011530:	e791      	b.n	8011456 <HAL_GPIO_Init+0x122>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011532:	2603      	movs	r6, #3
 8011534:	40be      	lsls	r6, r7
 8011536:	4335      	orrs	r5, r6
 8011538:	e773      	b.n	8011422 <HAL_GPIO_Init+0xee>
 801153a:	2601      	movs	r6, #1
 801153c:	40be      	lsls	r6, r7
 801153e:	4335      	orrs	r5, r6
 8011540:	e76f      	b.n	8011422 <HAL_GPIO_Init+0xee>
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	40021000 	.word	0x40021000
 8011548:	40010000 	.word	0x40010000
 801154c:	48000400 	.word	0x48000400
 8011550:	48000800 	.word	0x48000800
 8011554:	48000c00 	.word	0x48000c00
 8011558:	48001000 	.word	0x48001000
 801155c:	40010400 	.word	0x40010400

08011560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011562:	46de      	mov	lr, fp
 8011564:	4657      	mov	r7, sl
 8011566:	464e      	mov	r6, r9
 8011568:	4645      	mov	r5, r8
 801156a:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00;
 801156c:	2300      	movs	r3, #0
{
 801156e:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011570:	2900      	cmp	r1, #0
 8011572:	d069      	beq.n	8011648 <HAL_GPIO_DeInit+0xe8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011574:	2201      	movs	r2, #1
 8011576:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011578:	3202      	adds	r2, #2
 801157a:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801157c:	320c      	adds	r2, #12
 801157e:	4691      	mov	r9, r2
 8011580:	e025      	b.n	80115ce <HAL_GPIO_DeInit+0x6e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011582:	4f3d      	ldr	r7, [pc, #244]	; (8011678 <HAL_GPIO_DeInit+0x118>)
 8011584:	42b8      	cmp	r0, r7
 8011586:	d066      	beq.n	8011656 <HAL_GPIO_DeInit+0xf6>
 8011588:	4f3c      	ldr	r7, [pc, #240]	; (801167c <HAL_GPIO_DeInit+0x11c>)
 801158a:	42b8      	cmp	r0, r7
 801158c:	d067      	beq.n	801165e <HAL_GPIO_DeInit+0xfe>
 801158e:	4f3c      	ldr	r7, [pc, #240]	; (8011680 <HAL_GPIO_DeInit+0x120>)
 8011590:	42b8      	cmp	r0, r7
 8011592:	d068      	beq.n	8011666 <HAL_GPIO_DeInit+0x106>
 8011594:	4f3b      	ldr	r7, [pc, #236]	; (8011684 <HAL_GPIO_DeInit+0x124>)
 8011596:	42b8      	cmp	r0, r7
 8011598:	d069      	beq.n	801166e <HAL_GPIO_DeInit+0x10e>
 801159a:	2705      	movs	r7, #5
 801159c:	40a7      	lsls	r7, r4
 801159e:	003c      	movs	r4, r7
 80115a0:	42a6      	cmp	r6, r4
 80115a2:	d110      	bne.n	80115c6 <HAL_GPIO_DeInit+0x66>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80115a4:	4656      	mov	r6, sl
 80115a6:	6894      	ldr	r4, [r2, #8]
 80115a8:	43b4      	bics	r4, r6
 80115aa:	6094      	str	r4, [r2, #8]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80115ac:	4c36      	ldr	r4, [pc, #216]	; (8011688 <HAL_GPIO_DeInit+0x128>)
 80115ae:	6822      	ldr	r2, [r4, #0]
 80115b0:	43aa      	bics	r2, r5
 80115b2:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80115b4:	6862      	ldr	r2, [r4, #4]
 80115b6:	43aa      	bics	r2, r5
 80115b8:	6062      	str	r2, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80115ba:	68a2      	ldr	r2, [r4, #8]
 80115bc:	43aa      	bics	r2, r5
 80115be:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80115c0:	68e2      	ldr	r2, [r4, #12]
 80115c2:	43aa      	bics	r2, r5
 80115c4:	60e2      	str	r2, [r4, #12]
  while (GPIO_Pin >> position)
 80115c6:	000a      	movs	r2, r1
      }
    }
    
    position++;
 80115c8:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80115ca:	40da      	lsrs	r2, r3
 80115cc:	d03c      	beq.n	8011648 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1 << position);
 80115ce:	4662      	mov	r2, ip
 80115d0:	000d      	movs	r5, r1
 80115d2:	409a      	lsls	r2, r3
 80115d4:	4015      	ands	r5, r2
    if (iocurrent)
 80115d6:	4211      	tst	r1, r2
 80115d8:	d0f5      	beq.n	80115c6 <HAL_GPIO_DeInit+0x66>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80115da:	4647      	mov	r7, r8
 80115dc:	005e      	lsls	r6, r3, #1
 80115de:	40b7      	lsls	r7, r6
 80115e0:	6804      	ldr	r4, [r0, #0]
 80115e2:	003e      	movs	r6, r7
 80115e4:	43bc      	bics	r4, r7
 80115e6:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80115e8:	08dc      	lsrs	r4, r3, #3
 80115ea:	00a4      	lsls	r4, r4, #2
 80115ec:	1907      	adds	r7, r0, r4
 80115ee:	9701      	str	r7, [sp, #4]
 80115f0:	6a3f      	ldr	r7, [r7, #32]
 80115f2:	46ba      	mov	sl, r7
 80115f4:	2707      	movs	r7, #7
 80115f6:	401f      	ands	r7, r3
 80115f8:	00bf      	lsls	r7, r7, #2
 80115fa:	46bb      	mov	fp, r7
 80115fc:	464f      	mov	r7, r9
 80115fe:	465c      	mov	r4, fp
 8011600:	40a7      	lsls	r7, r4
 8011602:	46bb      	mov	fp, r7
 8011604:	4657      	mov	r7, sl
 8011606:	465c      	mov	r4, fp
 8011608:	43a7      	bics	r7, r4
 801160a:	003c      	movs	r4, r7
 801160c:	9f01      	ldr	r7, [sp, #4]
 801160e:	623c      	str	r4, [r7, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011610:	6884      	ldr	r4, [r0, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011612:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011614:	43b4      	bics	r4, r6
 8011616:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011618:	6844      	ldr	r4, [r0, #4]
 801161a:	4394      	bics	r4, r2
 801161c:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801161e:	4c1b      	ldr	r4, [pc, #108]	; (801168c <HAL_GPIO_DeInit+0x12c>)
 8011620:	68c2      	ldr	r2, [r0, #12]
 8011622:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011624:	4644      	mov	r4, r8
 8011626:	401c      	ands	r4, r3
 8011628:	00a4      	lsls	r4, r4, #2
 801162a:	40a7      	lsls	r7, r4
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801162c:	43b2      	bics	r2, r6
 801162e:	60c2      	str	r2, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011630:	089a      	lsrs	r2, r3, #2
 8011632:	0092      	lsls	r2, r2, #2
 8011634:	4452      	add	r2, sl
 8011636:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011638:	46ba      	mov	sl, r7
 801163a:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801163c:	2790      	movs	r7, #144	; 0x90
 801163e:	05ff      	lsls	r7, r7, #23
 8011640:	42b8      	cmp	r0, r7
 8011642:	d19e      	bne.n	8011582 <HAL_GPIO_DeInit+0x22>
 8011644:	2400      	movs	r4, #0
 8011646:	e7ab      	b.n	80115a0 <HAL_GPIO_DeInit+0x40>
  }
}
 8011648:	b003      	add	sp, #12
 801164a:	bcf0      	pop	{r4, r5, r6, r7}
 801164c:	46bb      	mov	fp, r7
 801164e:	46b2      	mov	sl, r6
 8011650:	46a9      	mov	r9, r5
 8011652:	46a0      	mov	r8, r4
 8011654:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011656:	4667      	mov	r7, ip
 8011658:	40a7      	lsls	r7, r4
 801165a:	003c      	movs	r4, r7
 801165c:	e7a0      	b.n	80115a0 <HAL_GPIO_DeInit+0x40>
 801165e:	2702      	movs	r7, #2
 8011660:	40a7      	lsls	r7, r4
 8011662:	003c      	movs	r4, r7
 8011664:	e79c      	b.n	80115a0 <HAL_GPIO_DeInit+0x40>
 8011666:	4647      	mov	r7, r8
 8011668:	40a7      	lsls	r7, r4
 801166a:	003c      	movs	r4, r7
 801166c:	e798      	b.n	80115a0 <HAL_GPIO_DeInit+0x40>
 801166e:	2704      	movs	r7, #4
 8011670:	40a7      	lsls	r7, r4
 8011672:	003c      	movs	r4, r7
 8011674:	e794      	b.n	80115a0 <HAL_GPIO_DeInit+0x40>
 8011676:	46c0      	nop			; (mov r8, r8)
 8011678:	48000400 	.word	0x48000400
 801167c:	48000800 	.word	0x48000800
 8011680:	48000c00 	.word	0x48000c00
 8011684:	48001000 	.word	0x48001000
 8011688:	40010400 	.word	0x40010400
 801168c:	40010000 	.word	0x40010000

08011690 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011690:	6900      	ldr	r0, [r0, #16]
 8011692:	4008      	ands	r0, r1
 8011694:	1e43      	subs	r3, r0, #1
 8011696:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011698:	b2c0      	uxtb	r0, r0
  }
 801169a:	4770      	bx	lr

0801169c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801169c:	2a00      	cmp	r2, #0
 801169e:	d001      	beq.n	80116a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80116a0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80116a2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80116a4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80116a6:	e7fc      	b.n	80116a2 <HAL_GPIO_WritePin+0x6>

080116a8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80116a8:	6943      	ldr	r3, [r0, #20]
 80116aa:	4059      	eors	r1, r3
 80116ac:	6141      	str	r1, [r0, #20]
}
 80116ae:	4770      	bx	lr

080116b0 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80116b0:	4770      	bx	lr
 80116b2:	46c0      	nop			; (mov r8, r8)

080116b4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80116b4:	2380      	movs	r3, #128	; 0x80
 80116b6:	4a03      	ldr	r2, [pc, #12]	; (80116c4 <HAL_PWR_EnableBkUpAccess+0x10>)
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	6811      	ldr	r1, [r2, #0]
 80116bc:	430b      	orrs	r3, r1
 80116be:	6013      	str	r3, [r2, #0]
}
 80116c0:	4770      	bx	lr
 80116c2:	46c0      	nop			; (mov r8, r8)
 80116c4:	40007000 	.word	0x40007000

080116c8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80116c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ca:	46c6      	mov	lr, r8
 80116cc:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80116ce:	6803      	ldr	r3, [r0, #0]
{
 80116d0:	0004      	movs	r4, r0
 80116d2:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80116d4:	07da      	lsls	r2, r3, #31
 80116d6:	d54b      	bpl.n	8011770 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80116d8:	210c      	movs	r1, #12
 80116da:	48c4      	ldr	r0, [pc, #784]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 80116dc:	6842      	ldr	r2, [r0, #4]
 80116de:	400a      	ands	r2, r1
 80116e0:	2a04      	cmp	r2, #4
 80116e2:	d100      	bne.n	80116e6 <HAL_RCC_OscConfig+0x1e>
 80116e4:	e153      	b.n	801198e <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80116e6:	6842      	ldr	r2, [r0, #4]
 80116e8:	4011      	ands	r1, r2
 80116ea:	2908      	cmp	r1, #8
 80116ec:	d108      	bne.n	8011700 <HAL_RCC_OscConfig+0x38>
 80116ee:	21c0      	movs	r1, #192	; 0xc0
 80116f0:	6842      	ldr	r2, [r0, #4]
 80116f2:	0249      	lsls	r1, r1, #9
 80116f4:	400a      	ands	r2, r1
 80116f6:	2180      	movs	r1, #128	; 0x80
 80116f8:	0249      	lsls	r1, r1, #9
 80116fa:	428a      	cmp	r2, r1
 80116fc:	d100      	bne.n	8011700 <HAL_RCC_OscConfig+0x38>
 80116fe:	e146      	b.n	801198e <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011700:	4dba      	ldr	r5, [pc, #744]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 8011702:	4abb      	ldr	r2, [pc, #748]	; (80119f0 <HAL_RCC_OscConfig+0x328>)
 8011704:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011706:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011708:	4013      	ands	r3, r2
 801170a:	602b      	str	r3, [r5, #0]
 801170c:	682b      	ldr	r3, [r5, #0]
 801170e:	4ab9      	ldr	r2, [pc, #740]	; (80119f4 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011710:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011712:	4013      	ands	r3, r2
 8011714:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011716:	f7fe fa57 	bl	800fbc8 <HAL_GetTick>
 801171a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801171c:	e005      	b.n	801172a <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801171e:	f7fe fa53 	bl	800fbc8 <HAL_GetTick>
 8011722:	1b80      	subs	r0, r0, r6
 8011724:	2864      	cmp	r0, #100	; 0x64
 8011726:	d900      	bls.n	801172a <HAL_RCC_OscConfig+0x62>
 8011728:	e13b      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801172a:	682b      	ldr	r3, [r5, #0]
 801172c:	423b      	tst	r3, r7
 801172e:	d1f6      	bne.n	801171e <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011730:	6863      	ldr	r3, [r4, #4]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d100      	bne.n	8011738 <HAL_RCC_OscConfig+0x70>
 8011736:	e195      	b.n	8011a64 <HAL_RCC_OscConfig+0x39c>
 8011738:	2b00      	cmp	r3, #0
 801173a:	d000      	beq.n	801173e <HAL_RCC_OscConfig+0x76>
 801173c:	e1bb      	b.n	8011ab6 <HAL_RCC_OscConfig+0x3ee>
 801173e:	682b      	ldr	r3, [r5, #0]
 8011740:	4aab      	ldr	r2, [pc, #684]	; (80119f0 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011742:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011744:	4013      	ands	r3, r2
 8011746:	602b      	str	r3, [r5, #0]
 8011748:	682b      	ldr	r3, [r5, #0]
 801174a:	4aaa      	ldr	r2, [pc, #680]	; (80119f4 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801174c:	4fa7      	ldr	r7, [pc, #668]	; (80119ec <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801174e:	4013      	ands	r3, r2
 8011750:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011752:	f7fe fa39 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011756:	02b6      	lsls	r6, r6, #10
        tickstart = HAL_GetTick();
 8011758:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801175a:	e005      	b.n	8011768 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801175c:	f7fe fa34 	bl	800fbc8 <HAL_GetTick>
 8011760:	1b40      	subs	r0, r0, r5
 8011762:	2864      	cmp	r0, #100	; 0x64
 8011764:	d900      	bls.n	8011768 <HAL_RCC_OscConfig+0xa0>
 8011766:	e11c      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	4233      	tst	r3, r6
 801176c:	d1f6      	bne.n	801175c <HAL_RCC_OscConfig+0x94>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	079a      	lsls	r2, r3, #30
 8011772:	d529      	bpl.n	80117c8 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011774:	220c      	movs	r2, #12
 8011776:	499d      	ldr	r1, [pc, #628]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 8011778:	6848      	ldr	r0, [r1, #4]
 801177a:	4202      	tst	r2, r0
 801177c:	d100      	bne.n	8011780 <HAL_RCC_OscConfig+0xb8>
 801177e:	e0fd      	b.n	801197c <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011780:	6848      	ldr	r0, [r1, #4]
 8011782:	4002      	ands	r2, r0
 8011784:	2a08      	cmp	r2, #8
 8011786:	d100      	bne.n	801178a <HAL_RCC_OscConfig+0xc2>
 8011788:	e0ef      	b.n	801196a <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801178a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801178c:	4d97      	ldr	r5, [pc, #604]	; (80119ec <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801178e:	2b00      	cmp	r3, #0
 8011790:	d100      	bne.n	8011794 <HAL_RCC_OscConfig+0xcc>
 8011792:	e137      	b.n	8011a04 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_ENABLE();
 8011794:	2201      	movs	r2, #1
 8011796:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011798:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 801179a:	4313      	orrs	r3, r2
 801179c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801179e:	f7fe fa13 	bl	800fbc8 <HAL_GetTick>
 80117a2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80117a4:	e005      	b.n	80117b2 <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80117a6:	f7fe fa0f 	bl	800fbc8 <HAL_GetTick>
 80117aa:	1b80      	subs	r0, r0, r6
 80117ac:	2864      	cmp	r0, #100	; 0x64
 80117ae:	d900      	bls.n	80117b2 <HAL_RCC_OscConfig+0xea>
 80117b0:	e0f7      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80117b2:	682b      	ldr	r3, [r5, #0]
 80117b4:	421f      	tst	r7, r3
 80117b6:	d0f6      	beq.n	80117a6 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80117b8:	21f8      	movs	r1, #248	; 0xf8
 80117ba:	682a      	ldr	r2, [r5, #0]
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	438a      	bics	r2, r1
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	4313      	orrs	r3, r2
 80117c4:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	071a      	lsls	r2, r3, #28
 80117ca:	d45d      	bmi.n	8011888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80117cc:	075a      	lsls	r2, r3, #29
 80117ce:	d474      	bmi.n	80118ba <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80117d0:	06da      	lsls	r2, r3, #27
 80117d2:	d512      	bpl.n	80117fa <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80117d4:	6962      	ldr	r2, [r4, #20]
 80117d6:	2a01      	cmp	r2, #1
 80117d8:	d100      	bne.n	80117dc <HAL_RCC_OscConfig+0x114>
 80117da:	e18b      	b.n	8011af4 <HAL_RCC_OscConfig+0x42c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80117dc:	3205      	adds	r2, #5
 80117de:	d000      	beq.n	80117e2 <HAL_RCC_OscConfig+0x11a>
 80117e0:	e123      	b.n	8011a2a <HAL_RCC_OscConfig+0x362>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80117e2:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80117e4:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80117e6:	4981      	ldr	r1, [pc, #516]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 80117e8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80117ea:	4382      	bics	r2, r0
 80117ec:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80117ee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80117f0:	69a2      	ldr	r2, [r4, #24]
 80117f2:	43a8      	bics	r0, r5
 80117f4:	00d2      	lsls	r2, r2, #3
 80117f6:	4302      	orrs	r2, r0
 80117f8:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80117fa:	069b      	lsls	r3, r3, #26
 80117fc:	d522      	bpl.n	8011844 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80117fe:	220c      	movs	r2, #12
 8011800:	497a      	ldr	r1, [pc, #488]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 8011802:	684b      	ldr	r3, [r1, #4]
 8011804:	4013      	ands	r3, r2
 8011806:	2b0c      	cmp	r3, #12
 8011808:	d100      	bne.n	801180c <HAL_RCC_OscConfig+0x144>
 801180a:	e149      	b.n	8011aa0 <HAL_RCC_OscConfig+0x3d8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801180c:	684b      	ldr	r3, [r1, #4]
 801180e:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011810:	2a08      	cmp	r2, #8
 8011812:	d100      	bne.n	8011816 <HAL_RCC_OscConfig+0x14e>
 8011814:	e13d      	b.n	8011a92 <HAL_RCC_OscConfig+0x3ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011816:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011818:	4d74      	ldr	r5, [pc, #464]	; (80119ec <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801181a:	2b00      	cmp	r3, #0
 801181c:	d100      	bne.n	8011820 <HAL_RCC_OscConfig+0x158>
 801181e:	e155      	b.n	8011acc <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_HSI48_ENABLE();
 8011820:	2780      	movs	r7, #128	; 0x80
 8011822:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011824:	027f      	lsls	r7, r7, #9
 8011826:	433b      	orrs	r3, r7
 8011828:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 801182a:	f7fe f9cd 	bl	800fbc8 <HAL_GetTick>
 801182e:	0006      	movs	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011830:	e005      	b.n	801183e <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011832:	f7fe f9c9 	bl	800fbc8 <HAL_GetTick>
 8011836:	1b80      	subs	r0, r0, r6
 8011838:	2864      	cmp	r0, #100	; 0x64
 801183a:	d900      	bls.n	801183e <HAL_RCC_OscConfig+0x176>
 801183c:	e0b1      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801183e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011840:	423b      	tst	r3, r7
 8011842:	d0f6      	beq.n	8011832 <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011846:	2b00      	cmp	r3, #0
 8011848:	d01c      	beq.n	8011884 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801184a:	220c      	movs	r2, #12
 801184c:	4d67      	ldr	r5, [pc, #412]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 801184e:	6869      	ldr	r1, [r5, #4]
 8011850:	400a      	ands	r2, r1
 8011852:	2a08      	cmp	r2, #8
 8011854:	d100      	bne.n	8011858 <HAL_RCC_OscConfig+0x190>
 8011856:	e098      	b.n	801198a <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011858:	2b02      	cmp	r3, #2
 801185a:	d100      	bne.n	801185e <HAL_RCC_OscConfig+0x196>
 801185c:	e169      	b.n	8011b32 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801185e:	682b      	ldr	r3, [r5, #0]
 8011860:	4a65      	ldr	r2, [pc, #404]	; (80119f8 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011862:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011864:	4013      	ands	r3, r2
 8011866:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011868:	f7fe f9ae 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801186c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 801186e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011870:	e005      	b.n	801187e <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011872:	f7fe f9a9 	bl	800fbc8 <HAL_GetTick>
 8011876:	1b00      	subs	r0, r0, r4
 8011878:	2864      	cmp	r0, #100	; 0x64
 801187a:	d900      	bls.n	801187e <HAL_RCC_OscConfig+0x1b6>
 801187c:	e091      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801187e:	682b      	ldr	r3, [r5, #0]
 8011880:	4233      	tst	r3, r6
 8011882:	d1f6      	bne.n	8011872 <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011884:	2000      	movs	r0, #0
 8011886:	e08d      	b.n	80119a4 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011888:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 801188a:	4d58      	ldr	r5, [pc, #352]	; (80119ec <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801188c:	2b00      	cmp	r3, #0
 801188e:	d100      	bne.n	8011892 <HAL_RCC_OscConfig+0x1ca>
 8011890:	e08c      	b.n	80119ac <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 8011892:	2201      	movs	r2, #1
 8011894:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011896:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8011898:	4313      	orrs	r3, r2
 801189a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801189c:	f7fe f994 	bl	800fbc8 <HAL_GetTick>
 80118a0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80118a2:	e004      	b.n	80118ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118a4:	f7fe f990 	bl	800fbc8 <HAL_GetTick>
 80118a8:	1b80      	subs	r0, r0, r6
 80118aa:	2864      	cmp	r0, #100	; 0x64
 80118ac:	d879      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80118ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80118b0:	421f      	tst	r7, r3
 80118b2:	d0f7      	beq.n	80118a4 <HAL_RCC_OscConfig+0x1dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80118b4:	6823      	ldr	r3, [r4, #0]
 80118b6:	075a      	lsls	r2, r3, #29
 80118b8:	d58a      	bpl.n	80117d0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80118ba:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80118bc:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80118be:	4a4b      	ldr	r2, [pc, #300]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 80118c0:	0540      	lsls	r0, r0, #21
 80118c2:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80118c4:	4d4d      	ldr	r5, [pc, #308]	; (80119fc <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80118c6:	4301      	orrs	r1, r0
 80118c8:	61d1      	str	r1, [r2, #28]
 80118ca:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80118cc:	007f      	lsls	r7, r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80118ce:	4003      	ands	r3, r0
 80118d0:	9301      	str	r3, [sp, #4]
 80118d2:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	433b      	orrs	r3, r7
 80118d8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80118da:	f7fe f975 	bl	800fbc8 <HAL_GetTick>
 80118de:	0006      	movs	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80118e0:	e004      	b.n	80118ec <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80118e2:	f7fe f971 	bl	800fbc8 <HAL_GetTick>
 80118e6:	1b80      	subs	r0, r0, r6
 80118e8:	2864      	cmp	r0, #100	; 0x64
 80118ea:	d85a      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80118ec:	682b      	ldr	r3, [r5, #0]
 80118ee:	423b      	tst	r3, r7
 80118f0:	d0f7      	beq.n	80118e2 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80118f2:	2201      	movs	r2, #1
 80118f4:	4d3d      	ldr	r5, [pc, #244]	; (80119ec <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80118f6:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80118f8:	6a2b      	ldr	r3, [r5, #32]
 80118fa:	4393      	bics	r3, r2
 80118fc:	622b      	str	r3, [r5, #32]
 80118fe:	6a2b      	ldr	r3, [r5, #32]
 8011900:	3203      	adds	r2, #3
 8011902:	4393      	bics	r3, r2
 8011904:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8011906:	f7fe f95f 	bl	800fbc8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801190a:	4b3d      	ldr	r3, [pc, #244]	; (8011a00 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 801190c:	0006      	movs	r6, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801190e:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011910:	e004      	b.n	801191c <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011912:	f7fe f959 	bl	800fbc8 <HAL_GetTick>
 8011916:	1b80      	subs	r0, r0, r6
 8011918:	4540      	cmp	r0, r8
 801191a:	d842      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801191c:	6a2b      	ldr	r3, [r5, #32]
 801191e:	421f      	tst	r7, r3
 8011920:	d1f7      	bne.n	8011912 <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	2b01      	cmp	r3, #1
 8011926:	d100      	bne.n	801192a <HAL_RCC_OscConfig+0x262>
 8011928:	e156      	b.n	8011bd8 <HAL_RCC_OscConfig+0x510>
 801192a:	2b00      	cmp	r3, #0
 801192c:	d100      	bne.n	8011930 <HAL_RCC_OscConfig+0x268>
 801192e:	e138      	b.n	8011ba2 <HAL_RCC_OscConfig+0x4da>
 8011930:	2b05      	cmp	r3, #5
 8011932:	d100      	bne.n	8011936 <HAL_RCC_OscConfig+0x26e>
 8011934:	e154      	b.n	8011be0 <HAL_RCC_OscConfig+0x518>
 8011936:	2201      	movs	r2, #1
 8011938:	6a2b      	ldr	r3, [r5, #32]
 801193a:	4393      	bics	r3, r2
 801193c:	622b      	str	r3, [r5, #32]
 801193e:	6a2b      	ldr	r3, [r5, #32]
 8011940:	3203      	adds	r2, #3
 8011942:	4393      	bics	r3, r2
 8011944:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011946:	f7fe f93f 	bl	800fbc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801194a:	4b2d      	ldr	r3, [pc, #180]	; (8011a00 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 801194c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801194e:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011950:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011952:	4f26      	ldr	r7, [pc, #152]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 8011954:	e004      	b.n	8011960 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011956:	f7fe f937 	bl	800fbc8 <HAL_GetTick>
 801195a:	1b40      	subs	r0, r0, r5
 801195c:	4540      	cmp	r0, r8
 801195e:	d820      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	421e      	tst	r6, r3
 8011964:	d0f7      	beq.n	8011956 <HAL_RCC_OscConfig+0x28e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011966:	6823      	ldr	r3, [r4, #0]
 8011968:	e732      	b.n	80117d0 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801196a:	684a      	ldr	r2, [r1, #4]
 801196c:	21c0      	movs	r1, #192	; 0xc0
 801196e:	0249      	lsls	r1, r1, #9
 8011970:	400a      	ands	r2, r1
 8011972:	2180      	movs	r1, #128	; 0x80
 8011974:	0209      	lsls	r1, r1, #8
 8011976:	428a      	cmp	r2, r1
 8011978:	d000      	beq.n	801197c <HAL_RCC_OscConfig+0x2b4>
 801197a:	e706      	b.n	801178a <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801197c:	4a1b      	ldr	r2, [pc, #108]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 801197e:	6812      	ldr	r2, [r2, #0]
 8011980:	0792      	lsls	r2, r2, #30
 8011982:	d526      	bpl.n	80119d2 <HAL_RCC_OscConfig+0x30a>
 8011984:	68e2      	ldr	r2, [r4, #12]
 8011986:	2a01      	cmp	r2, #1
 8011988:	d023      	beq.n	80119d2 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 801198a:	2001      	movs	r0, #1
 801198c:	e00a      	b.n	80119a4 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801198e:	4a17      	ldr	r2, [pc, #92]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 8011990:	6812      	ldr	r2, [r2, #0]
 8011992:	0392      	lsls	r2, r2, #14
 8011994:	d400      	bmi.n	8011998 <HAL_RCC_OscConfig+0x2d0>
 8011996:	e6eb      	b.n	8011770 <HAL_RCC_OscConfig+0xa8>
 8011998:	6862      	ldr	r2, [r4, #4]
 801199a:	2a00      	cmp	r2, #0
 801199c:	d000      	beq.n	80119a0 <HAL_RCC_OscConfig+0x2d8>
 801199e:	e6e7      	b.n	8011770 <HAL_RCC_OscConfig+0xa8>
 80119a0:	e7f3      	b.n	801198a <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80119a2:	2003      	movs	r0, #3
}
 80119a4:	b002      	add	sp, #8
 80119a6:	bc80      	pop	{r7}
 80119a8:	46b8      	mov	r8, r7
 80119aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80119ac:	2201      	movs	r2, #1
 80119ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80119b0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80119b2:	4393      	bics	r3, r2
 80119b4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80119b6:	f7fe f907 	bl	800fbc8 <HAL_GetTick>
 80119ba:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80119bc:	e004      	b.n	80119c8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80119be:	f7fe f903 	bl	800fbc8 <HAL_GetTick>
 80119c2:	1b80      	subs	r0, r0, r6
 80119c4:	2864      	cmp	r0, #100	; 0x64
 80119c6:	d8ec      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80119c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80119ca:	421f      	tst	r7, r3
 80119cc:	d1f7      	bne.n	80119be <HAL_RCC_OscConfig+0x2f6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	e771      	b.n	80118b6 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119d2:	25f8      	movs	r5, #248	; 0xf8
 80119d4:	4805      	ldr	r0, [pc, #20]	; (80119ec <HAL_RCC_OscConfig+0x324>)
 80119d6:	6922      	ldr	r2, [r4, #16]
 80119d8:	6801      	ldr	r1, [r0, #0]
 80119da:	00d2      	lsls	r2, r2, #3
 80119dc:	43a9      	bics	r1, r5
 80119de:	430a      	orrs	r2, r1
 80119e0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80119e2:	071a      	lsls	r2, r3, #28
 80119e4:	d400      	bmi.n	80119e8 <HAL_RCC_OscConfig+0x320>
 80119e6:	e6f1      	b.n	80117cc <HAL_RCC_OscConfig+0x104>
 80119e8:	e74e      	b.n	8011888 <HAL_RCC_OscConfig+0x1c0>
 80119ea:	46c0      	nop			; (mov r8, r8)
 80119ec:	40021000 	.word	0x40021000
 80119f0:	fffeffff 	.word	0xfffeffff
 80119f4:	fffbffff 	.word	0xfffbffff
 80119f8:	feffffff 	.word	0xfeffffff
 80119fc:	40007000 	.word	0x40007000
 8011a00:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8011a04:	2201      	movs	r2, #1
 8011a06:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a08:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8011a0a:	4393      	bics	r3, r2
 8011a0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011a0e:	f7fe f8db 	bl	800fbc8 <HAL_GetTick>
 8011a12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a14:	e004      	b.n	8011a20 <HAL_RCC_OscConfig+0x358>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a16:	f7fe f8d7 	bl	800fbc8 <HAL_GetTick>
 8011a1a:	1b80      	subs	r0, r0, r6
 8011a1c:	2864      	cmp	r0, #100	; 0x64
 8011a1e:	d8c0      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	421f      	tst	r7, r3
 8011a24:	d1f7      	bne.n	8011a16 <HAL_RCC_OscConfig+0x34e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	e6ce      	b.n	80117c8 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a2a:	2204      	movs	r2, #4
 8011a2c:	4d71      	ldr	r5, [pc, #452]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011a2e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a32:	4313      	orrs	r3, r2
 8011a34:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011a36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a38:	3a03      	subs	r2, #3
 8011a3a:	4393      	bics	r3, r2
 8011a3c:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011a3e:	f7fe f8c3 	bl	800fbc8 <HAL_GetTick>
 8011a42:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011a44:	e004      	b.n	8011a50 <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011a46:	f7fe f8bf 	bl	800fbc8 <HAL_GetTick>
 8011a4a:	1b80      	subs	r0, r0, r6
 8011a4c:	2864      	cmp	r0, #100	; 0x64
 8011a4e:	d8a8      	bhi.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011a50:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a52:	421f      	tst	r7, r3
 8011a54:	d1f7      	bne.n	8011a46 <HAL_RCC_OscConfig+0x37e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	e6cf      	b.n	80117fa <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011a5a:	2380      	movs	r3, #128	; 0x80
 8011a5c:	682a      	ldr	r2, [r5, #0]
 8011a5e:	02db      	lsls	r3, r3, #11
 8011a60:	4313      	orrs	r3, r2
 8011a62:	602b      	str	r3, [r5, #0]
 8011a64:	2380      	movs	r3, #128	; 0x80
 8011a66:	682a      	ldr	r2, [r5, #0]
 8011a68:	025b      	lsls	r3, r3, #9
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011a6e:	f7fe f8ab 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a72:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8011a74:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a76:	4f5f      	ldr	r7, [pc, #380]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
 8011a78:	02b6      	lsls	r6, r6, #10
 8011a7a:	e005      	b.n	8011a88 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a7c:	f7fe f8a4 	bl	800fbc8 <HAL_GetTick>
 8011a80:	1b40      	subs	r0, r0, r5
 8011a82:	2864      	cmp	r0, #100	; 0x64
 8011a84:	d900      	bls.n	8011a88 <HAL_RCC_OscConfig+0x3c0>
 8011a86:	e78c      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	4233      	tst	r3, r6
 8011a8c:	d0f6      	beq.n	8011a7c <HAL_RCC_OscConfig+0x3b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	e66e      	b.n	8011770 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011a92:	22c0      	movs	r2, #192	; 0xc0
 8011a94:	684b      	ldr	r3, [r1, #4]
 8011a96:	0252      	lsls	r2, r2, #9
 8011a98:	4013      	ands	r3, r2
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d000      	beq.n	8011aa0 <HAL_RCC_OscConfig+0x3d8>
 8011a9e:	e6ba      	b.n	8011816 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011aa0:	4b54      	ldr	r3, [pc, #336]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
 8011aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa4:	03db      	lsls	r3, r3, #15
 8011aa6:	d400      	bmi.n	8011aaa <HAL_RCC_OscConfig+0x3e2>
 8011aa8:	e6cc      	b.n	8011844 <HAL_RCC_OscConfig+0x17c>
 8011aaa:	69e3      	ldr	r3, [r4, #28]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d100      	bne.n	8011ab2 <HAL_RCC_OscConfig+0x3ea>
 8011ab0:	e6c8      	b.n	8011844 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8011ab2:	2001      	movs	r0, #1
 8011ab4:	e776      	b.n	80119a4 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011ab6:	2b05      	cmp	r3, #5
 8011ab8:	d0cf      	beq.n	8011a5a <HAL_RCC_OscConfig+0x392>
 8011aba:	682b      	ldr	r3, [r5, #0]
 8011abc:	4a4e      	ldr	r2, [pc, #312]	; (8011bf8 <HAL_RCC_OscConfig+0x530>)
 8011abe:	4013      	ands	r3, r2
 8011ac0:	602b      	str	r3, [r5, #0]
 8011ac2:	682b      	ldr	r3, [r5, #0]
 8011ac4:	4a4d      	ldr	r2, [pc, #308]	; (8011bfc <HAL_RCC_OscConfig+0x534>)
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	e7d0      	b.n	8011a6e <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_HSI48_DISABLE();
 8011acc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011ace:	4a4a      	ldr	r2, [pc, #296]	; (8011bf8 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011ad0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011ad6:	f7fe f877 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011ada:	027f      	lsls	r7, r7, #9
        tickstart = HAL_GetTick();
 8011adc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011ade:	e005      	b.n	8011aec <HAL_RCC_OscConfig+0x424>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011ae0:	f7fe f872 	bl	800fbc8 <HAL_GetTick>
 8011ae4:	1b80      	subs	r0, r0, r6
 8011ae6:	2864      	cmp	r0, #100	; 0x64
 8011ae8:	d900      	bls.n	8011aec <HAL_RCC_OscConfig+0x424>
 8011aea:	e75a      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011aec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011aee:	423b      	tst	r3, r7
 8011af0:	d1f6      	bne.n	8011ae0 <HAL_RCC_OscConfig+0x418>
 8011af2:	e6a7      	b.n	8011844 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011af4:	2104      	movs	r1, #4
 8011af6:	4d3f      	ldr	r5, [pc, #252]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011af8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011afa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011afc:	430b      	orrs	r3, r1
 8011afe:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011b00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011b02:	431a      	orrs	r2, r3
 8011b04:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011b06:	f7fe f85f 	bl	800fbc8 <HAL_GetTick>
 8011b0a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011b0c:	e005      	b.n	8011b1a <HAL_RCC_OscConfig+0x452>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011b0e:	f7fe f85b 	bl	800fbc8 <HAL_GetTick>
 8011b12:	1b80      	subs	r0, r0, r6
 8011b14:	2864      	cmp	r0, #100	; 0x64
 8011b16:	d900      	bls.n	8011b1a <HAL_RCC_OscConfig+0x452>
 8011b18:	e743      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011b1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011b1c:	421f      	tst	r7, r3
 8011b1e:	d0f6      	beq.n	8011b0e <HAL_RCC_OscConfig+0x446>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011b20:	21f8      	movs	r1, #248	; 0xf8
 8011b22:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011b24:	69a3      	ldr	r3, [r4, #24]
 8011b26:	438a      	bics	r2, r1
 8011b28:	00db      	lsls	r3, r3, #3
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	e663      	b.n	80117fa <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	4a32      	ldr	r2, [pc, #200]	; (8011c00 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b36:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011b38:	4013      	ands	r3, r2
 8011b3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011b3c:	f7fe f844 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b40:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8011b42:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b44:	e005      	b.n	8011b52 <HAL_RCC_OscConfig+0x48a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b46:	f7fe f83f 	bl	800fbc8 <HAL_GetTick>
 8011b4a:	1b80      	subs	r0, r0, r6
 8011b4c:	2864      	cmp	r0, #100	; 0x64
 8011b4e:	d900      	bls.n	8011b52 <HAL_RCC_OscConfig+0x48a>
 8011b50:	e727      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b52:	682b      	ldr	r3, [r5, #0]
 8011b54:	423b      	tst	r3, r7
 8011b56:	d1f6      	bne.n	8011b46 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011b58:	220f      	movs	r2, #15
 8011b5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011b5c:	4e25      	ldr	r6, [pc, #148]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011b5e:	4393      	bics	r3, r2
 8011b60:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011b62:	4313      	orrs	r3, r2
 8011b64:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011b66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b6a:	686a      	ldr	r2, [r5, #4]
 8011b6c:	430b      	orrs	r3, r1
 8011b6e:	4925      	ldr	r1, [pc, #148]	; (8011c04 <HAL_RCC_OscConfig+0x53c>)
 8011b70:	400a      	ands	r2, r1
 8011b72:	4313      	orrs	r3, r2
 8011b74:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011b76:	2380      	movs	r3, #128	; 0x80
 8011b78:	682a      	ldr	r2, [r5, #0]
 8011b7a:	045b      	lsls	r3, r3, #17
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011b80:	f7fe f822 	bl	800fbc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011b84:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011b86:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011b88:	04ad      	lsls	r5, r5, #18
 8011b8a:	e005      	b.n	8011b98 <HAL_RCC_OscConfig+0x4d0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b8c:	f7fe f81c 	bl	800fbc8 <HAL_GetTick>
 8011b90:	1b00      	subs	r0, r0, r4
 8011b92:	2864      	cmp	r0, #100	; 0x64
 8011b94:	d900      	bls.n	8011b98 <HAL_RCC_OscConfig+0x4d0>
 8011b96:	e704      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011b98:	6833      	ldr	r3, [r6, #0]
 8011b9a:	422b      	tst	r3, r5
 8011b9c:	d0f6      	beq.n	8011b8c <HAL_RCC_OscConfig+0x4c4>
  return HAL_OK;
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	e700      	b.n	80119a4 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011ba6:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ba8:	4393      	bics	r3, r2
 8011baa:	622b      	str	r3, [r5, #32]
 8011bac:	6a2b      	ldr	r3, [r5, #32]
 8011bae:	3203      	adds	r2, #3
 8011bb0:	4393      	bics	r3, r2
 8011bb2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011bb4:	f7fe f808 	bl	800fbc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011bb8:	4b13      	ldr	r3, [pc, #76]	; (8011c08 <HAL_RCC_OscConfig+0x540>)
      tickstart = HAL_GetTick();
 8011bba:	0005      	movs	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011bbc:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011bbe:	4f0d      	ldr	r7, [pc, #52]	; (8011bf4 <HAL_RCC_OscConfig+0x52c>)
 8011bc0:	e005      	b.n	8011bce <HAL_RCC_OscConfig+0x506>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011bc2:	f7fe f801 	bl	800fbc8 <HAL_GetTick>
 8011bc6:	1b40      	subs	r0, r0, r5
 8011bc8:	4540      	cmp	r0, r8
 8011bca:	d900      	bls.n	8011bce <HAL_RCC_OscConfig+0x506>
 8011bcc:	e6e9      	b.n	80119a2 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011bce:	6a3b      	ldr	r3, [r7, #32]
 8011bd0:	421e      	tst	r6, r3
 8011bd2:	d1f6      	bne.n	8011bc2 <HAL_RCC_OscConfig+0x4fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	e5fb      	b.n	80117d0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011bd8:	6a2a      	ldr	r2, [r5, #32]
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011bde:	e6b2      	b.n	8011946 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011be0:	2204      	movs	r2, #4
 8011be2:	6a2b      	ldr	r3, [r5, #32]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	622b      	str	r3, [r5, #32]
 8011be8:	6a2b      	ldr	r3, [r5, #32]
 8011bea:	3a03      	subs	r2, #3
 8011bec:	4313      	orrs	r3, r2
 8011bee:	622b      	str	r3, [r5, #32]
 8011bf0:	e6a9      	b.n	8011946 <HAL_RCC_OscConfig+0x27e>
 8011bf2:	46c0      	nop			; (mov r8, r8)
 8011bf4:	40021000 	.word	0x40021000
 8011bf8:	fffeffff 	.word	0xfffeffff
 8011bfc:	fffbffff 	.word	0xfffbffff
 8011c00:	feffffff 	.word	0xfeffffff
 8011c04:	ffc27fff 	.word	0xffc27fff
 8011c08:	00001388 	.word	0x00001388

08011c0c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0e:	46ce      	mov	lr, r9
 8011c10:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011c12:	2301      	movs	r3, #1
{
 8011c14:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011c16:	498b      	ldr	r1, [pc, #556]	; (8011e44 <HAL_RCC_ClockConfig+0x238>)
{
 8011c18:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011c1a:	680a      	ldr	r2, [r1, #0]
{
 8011c1c:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011c1e:	401a      	ands	r2, r3
 8011c20:	42a2      	cmp	r2, r4
 8011c22:	d254      	bcs.n	8011cce <HAL_RCC_ClockConfig+0xc2>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c24:	680a      	ldr	r2, [r1, #0]
 8011c26:	439a      	bics	r2, r3
 8011c28:	4322      	orrs	r2, r4
 8011c2a:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011c2c:	680a      	ldr	r2, [r1, #0]
 8011c2e:	4013      	ands	r3, r2
 8011c30:	42a3      	cmp	r3, r4
 8011c32:	d004      	beq.n	8011c3e <HAL_RCC_ClockConfig+0x32>
    {
      return HAL_ERROR;
 8011c34:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011c36:	bcc0      	pop	{r6, r7}
 8011c38:	46b9      	mov	r9, r7
 8011c3a:	46b0      	mov	r8, r6
 8011c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c3e:	6803      	ldr	r3, [r0, #0]
 8011c40:	079a      	lsls	r2, r3, #30
 8011c42:	d506      	bpl.n	8011c52 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c44:	20f0      	movs	r0, #240	; 0xf0
 8011c46:	4980      	ldr	r1, [pc, #512]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
 8011c48:	684a      	ldr	r2, [r1, #4]
 8011c4a:	4382      	bics	r2, r0
 8011c4c:	68a8      	ldr	r0, [r5, #8]
 8011c4e:	4302      	orrs	r2, r0
 8011c50:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c52:	07da      	lsls	r2, r3, #31
 8011c54:	d52d      	bpl.n	8011cb2 <HAL_RCC_ClockConfig+0xa6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c56:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c58:	4b7b      	ldr	r3, [pc, #492]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c5a:	2a01      	cmp	r2, #1
 8011c5c:	d100      	bne.n	8011c60 <HAL_RCC_ClockConfig+0x54>
 8011c5e:	e0a8      	b.n	8011db2 <HAL_RCC_ClockConfig+0x1a6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c60:	2a02      	cmp	r2, #2
 8011c62:	d100      	bne.n	8011c66 <HAL_RCC_ClockConfig+0x5a>
 8011c64:	e0be      	b.n	8011de4 <HAL_RCC_ClockConfig+0x1d8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c66:	2a03      	cmp	r2, #3
 8011c68:	d100      	bne.n	8011c6c <HAL_RCC_ClockConfig+0x60>
 8011c6a:	e09d      	b.n	8011da8 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	079b      	lsls	r3, r3, #30
 8011c70:	d5e0      	bpl.n	8011c34 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011c72:	2103      	movs	r1, #3
 8011c74:	4c74      	ldr	r4, [pc, #464]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011c76:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	438b      	bics	r3, r1
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8011c80:	f7fd ffa2 	bl	800fbc8 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c84:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011c86:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d100      	bne.n	8011c8e <HAL_RCC_ClockConfig+0x82>
 8011c8c:	e0af      	b.n	8011dee <HAL_RCC_ClockConfig+0x1e2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d100      	bne.n	8011c94 <HAL_RCC_ClockConfig+0x88>
 8011c92:	e0ba      	b.n	8011e0a <HAL_RCC_ClockConfig+0x1fe>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c94:	2b03      	cmp	r3, #3
 8011c96:	d100      	bne.n	8011c9a <HAL_RCC_ClockConfig+0x8e>
 8011c98:	e0c5      	b.n	8011e26 <HAL_RCC_ClockConfig+0x21a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c9a:	4b6c      	ldr	r3, [pc, #432]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011c9c:	4698      	mov	r8, r3
 8011c9e:	e004      	b.n	8011caa <HAL_RCC_ClockConfig+0x9e>
 8011ca0:	f7fd ff92 	bl	800fbc8 <HAL_GetTick>
 8011ca4:	1b80      	subs	r0, r0, r6
 8011ca6:	4540      	cmp	r0, r8
 8011ca8:	d86c      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011caa:	6863      	ldr	r3, [r4, #4]
 8011cac:	421f      	tst	r7, r3
 8011cae:	d1f7      	bne.n	8011ca0 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	075b      	lsls	r3, r3, #29
 8011cb4:	d506      	bpl.n	8011cc4 <HAL_RCC_ClockConfig+0xb8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011cb6:	4a64      	ldr	r2, [pc, #400]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
 8011cb8:	4965      	ldr	r1, [pc, #404]	; (8011e50 <HAL_RCC_ClockConfig+0x244>)
 8011cba:	6853      	ldr	r3, [r2, #4]
 8011cbc:	400b      	ands	r3, r1
 8011cbe:	68e9      	ldr	r1, [r5, #12]
 8011cc0:	430b      	orrs	r3, r1
 8011cc2:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	f7fd ff55 	bl	800fb74 <HAL_InitTick>
  return HAL_OK;
 8011cca:	2000      	movs	r0, #0
 8011ccc:	e7b3      	b.n	8011c36 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011cce:	6803      	ldr	r3, [r0, #0]
 8011cd0:	079a      	lsls	r2, r3, #30
 8011cd2:	d506      	bpl.n	8011ce2 <HAL_RCC_ClockConfig+0xd6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011cd4:	20f0      	movs	r0, #240	; 0xf0
 8011cd6:	495c      	ldr	r1, [pc, #368]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
 8011cd8:	684a      	ldr	r2, [r1, #4]
 8011cda:	4382      	bics	r2, r0
 8011cdc:	68a8      	ldr	r0, [r5, #8]
 8011cde:	4302      	orrs	r2, r0
 8011ce0:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011ce2:	07db      	lsls	r3, r3, #31
 8011ce4:	d51a      	bpl.n	8011d1c <HAL_RCC_ClockConfig+0x110>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ce6:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ce8:	4b57      	ldr	r3, [pc, #348]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011cea:	2a01      	cmp	r2, #1
 8011cec:	d023      	beq.n	8011d36 <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011cee:	2a02      	cmp	r2, #2
 8011cf0:	d044      	beq.n	8011d7c <HAL_RCC_ClockConfig+0x170>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011cf2:	2a03      	cmp	r2, #3
 8011cf4:	d062      	beq.n	8011dbc <HAL_RCC_ClockConfig+0x1b0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	079b      	lsls	r3, r3, #30
 8011cfa:	d420      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x132>
 8011cfc:	e79a      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011cfe:	330b      	adds	r3, #11
 8011d00:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d02:	4b52      	ldr	r3, [pc, #328]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011d04:	4699      	mov	r9, r3
 8011d06:	e004      	b.n	8011d12 <HAL_RCC_ClockConfig+0x106>
 8011d08:	f7fd ff5e 	bl	800fbc8 <HAL_GetTick>
 8011d0c:	1bc0      	subs	r0, r0, r7
 8011d0e:	4548      	cmp	r0, r9
 8011d10:	d838      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d12:	4642      	mov	r2, r8
 8011d14:	6873      	ldr	r3, [r6, #4]
 8011d16:	4013      	ands	r3, r2
 8011d18:	2b04      	cmp	r3, #4
 8011d1a:	d1f5      	bne.n	8011d08 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	4949      	ldr	r1, [pc, #292]	; (8011e44 <HAL_RCC_ClockConfig+0x238>)
 8011d20:	680b      	ldr	r3, [r1, #0]
 8011d22:	4393      	bics	r3, r2
 8011d24:	4323      	orrs	r3, r4
 8011d26:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011d28:	680b      	ldr	r3, [r1, #0]
 8011d2a:	401a      	ands	r2, r3
 8011d2c:	42a2      	cmp	r2, r4
 8011d2e:	d000      	beq.n	8011d32 <HAL_RCC_ClockConfig+0x126>
 8011d30:	e780      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d32:	682b      	ldr	r3, [r5, #0]
 8011d34:	e7bd      	b.n	8011cb2 <HAL_RCC_ClockConfig+0xa6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	039b      	lsls	r3, r3, #14
 8011d3a:	d400      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x132>
 8011d3c:	e77a      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011d3e:	2103      	movs	r1, #3
 8011d40:	4e41      	ldr	r6, [pc, #260]	; (8011e48 <HAL_RCC_ClockConfig+0x23c>)
 8011d42:	6873      	ldr	r3, [r6, #4]
 8011d44:	438b      	bics	r3, r1
 8011d46:	4313      	orrs	r3, r2
 8011d48:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011d4a:	f7fd ff3d 	bl	800fbc8 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d4e:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011d50:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d0d3      	beq.n	8011cfe <HAL_RCC_ClockConfig+0xf2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d034      	beq.n	8011dc4 <HAL_RCC_ClockConfig+0x1b8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d5a:	2b03      	cmp	r3, #3
 8011d5c:	d014      	beq.n	8011d88 <HAL_RCC_ClockConfig+0x17c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d5e:	230c      	movs	r3, #12
 8011d60:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d62:	4b3a      	ldr	r3, [pc, #232]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011d64:	4699      	mov	r9, r3
 8011d66:	e004      	b.n	8011d72 <HAL_RCC_ClockConfig+0x166>
 8011d68:	f7fd ff2e 	bl	800fbc8 <HAL_GetTick>
 8011d6c:	1bc0      	subs	r0, r0, r7
 8011d6e:	4548      	cmp	r0, r9
 8011d70:	d808      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d72:	4642      	mov	r2, r8
 8011d74:	6873      	ldr	r3, [r6, #4]
 8011d76:	421a      	tst	r2, r3
 8011d78:	d1f6      	bne.n	8011d68 <HAL_RCC_ClockConfig+0x15c>
 8011d7a:	e7cf      	b.n	8011d1c <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	019b      	lsls	r3, r3, #6
 8011d80:	d4dd      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x132>
 8011d82:	e757      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
            return HAL_TIMEOUT;
 8011d84:	2003      	movs	r0, #3
 8011d86:	e756      	b.n	8011c36 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d88:	3309      	adds	r3, #9
 8011d8a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d8c:	4b2f      	ldr	r3, [pc, #188]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011d8e:	4699      	mov	r9, r3
 8011d90:	e004      	b.n	8011d9c <HAL_RCC_ClockConfig+0x190>
 8011d92:	f7fd ff19 	bl	800fbc8 <HAL_GetTick>
 8011d96:	1bc0      	subs	r0, r0, r7
 8011d98:	4548      	cmp	r0, r9
 8011d9a:	d8f3      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d9c:	4642      	mov	r2, r8
 8011d9e:	6873      	ldr	r3, [r6, #4]
 8011da0:	4013      	ands	r3, r2
 8011da2:	2b0c      	cmp	r3, #12
 8011da4:	d1f5      	bne.n	8011d92 <HAL_RCC_ClockConfig+0x186>
 8011da6:	e7b9      	b.n	8011d1c <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011daa:	03db      	lsls	r3, r3, #15
 8011dac:	d500      	bpl.n	8011db0 <HAL_RCC_ClockConfig+0x1a4>
 8011dae:	e760      	b.n	8011c72 <HAL_RCC_ClockConfig+0x66>
 8011db0:	e740      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	039b      	lsls	r3, r3, #14
 8011db6:	d500      	bpl.n	8011dba <HAL_RCC_ClockConfig+0x1ae>
 8011db8:	e75b      	b.n	8011c72 <HAL_RCC_ClockConfig+0x66>
 8011dba:	e73b      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dbe:	03db      	lsls	r3, r3, #15
 8011dc0:	d4bd      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x132>
 8011dc2:	e737      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011dc4:	330a      	adds	r3, #10
 8011dc6:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dc8:	4b20      	ldr	r3, [pc, #128]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011dca:	4699      	mov	r9, r3
 8011dcc:	e004      	b.n	8011dd8 <HAL_RCC_ClockConfig+0x1cc>
 8011dce:	f7fd fefb 	bl	800fbc8 <HAL_GetTick>
 8011dd2:	1bc0      	subs	r0, r0, r7
 8011dd4:	4548      	cmp	r0, r9
 8011dd6:	d8d5      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011dd8:	4642      	mov	r2, r8
 8011dda:	6873      	ldr	r3, [r6, #4]
 8011ddc:	4013      	ands	r3, r2
 8011dde:	2b08      	cmp	r3, #8
 8011de0:	d1f5      	bne.n	8011dce <HAL_RCC_ClockConfig+0x1c2>
 8011de2:	e79b      	b.n	8011d1c <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	019b      	lsls	r3, r3, #6
 8011de8:	d500      	bpl.n	8011dec <HAL_RCC_ClockConfig+0x1e0>
 8011dea:	e742      	b.n	8011c72 <HAL_RCC_ClockConfig+0x66>
 8011dec:	e722      	b.n	8011c34 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dee:	4b17      	ldr	r3, [pc, #92]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011df0:	4698      	mov	r8, r3
 8011df2:	e004      	b.n	8011dfe <HAL_RCC_ClockConfig+0x1f2>
 8011df4:	f7fd fee8 	bl	800fbc8 <HAL_GetTick>
 8011df8:	1b80      	subs	r0, r0, r6
 8011dfa:	4540      	cmp	r0, r8
 8011dfc:	d8c2      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011dfe:	6863      	ldr	r3, [r4, #4]
 8011e00:	403b      	ands	r3, r7
 8011e02:	2b04      	cmp	r3, #4
 8011e04:	d1f6      	bne.n	8011df4 <HAL_RCC_ClockConfig+0x1e8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e06:	682b      	ldr	r3, [r5, #0]
 8011e08:	e753      	b.n	8011cb2 <HAL_RCC_ClockConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e0a:	4b10      	ldr	r3, [pc, #64]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011e0c:	4698      	mov	r8, r3
 8011e0e:	e004      	b.n	8011e1a <HAL_RCC_ClockConfig+0x20e>
 8011e10:	f7fd feda 	bl	800fbc8 <HAL_GetTick>
 8011e14:	1b80      	subs	r0, r0, r6
 8011e16:	4540      	cmp	r0, r8
 8011e18:	d8b4      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e1a:	6863      	ldr	r3, [r4, #4]
 8011e1c:	403b      	ands	r3, r7
 8011e1e:	2b08      	cmp	r3, #8
 8011e20:	d1f6      	bne.n	8011e10 <HAL_RCC_ClockConfig+0x204>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e22:	682b      	ldr	r3, [r5, #0]
 8011e24:	e745      	b.n	8011cb2 <HAL_RCC_ClockConfig+0xa6>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e26:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <HAL_RCC_ClockConfig+0x240>)
 8011e28:	4698      	mov	r8, r3
 8011e2a:	e004      	b.n	8011e36 <HAL_RCC_ClockConfig+0x22a>
 8011e2c:	f7fd fecc 	bl	800fbc8 <HAL_GetTick>
 8011e30:	1b80      	subs	r0, r0, r6
 8011e32:	4540      	cmp	r0, r8
 8011e34:	d8a6      	bhi.n	8011d84 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011e36:	6863      	ldr	r3, [r4, #4]
 8011e38:	403b      	ands	r3, r7
 8011e3a:	2b0c      	cmp	r3, #12
 8011e3c:	d1f6      	bne.n	8011e2c <HAL_RCC_ClockConfig+0x220>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e3e:	682b      	ldr	r3, [r5, #0]
 8011e40:	e737      	b.n	8011cb2 <HAL_RCC_ClockConfig+0xa6>
 8011e42:	46c0      	nop			; (mov r8, r8)
 8011e44:	40022000 	.word	0x40022000
 8011e48:	40021000 	.word	0x40021000
 8011e4c:	00001388 	.word	0x00001388
 8011e50:	fffff8ff 	.word	0xfffff8ff

08011e54 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011e58:	4669      	mov	r1, sp
 8011e5a:	000a      	movs	r2, r1
 8011e5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ecc <HAL_RCC_GetSysClockFreq+0x78>)
 8011e5e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8011e60:	c231      	stmia	r2!, {r0, r4, r5}
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011e66:	aa04      	add	r2, sp, #16
 8011e68:	0010      	movs	r0, r2
 8011e6a:	4b19      	ldr	r3, [pc, #100]	; (8011ed0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8011e6c:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011e6e:	c070      	stmia	r0!, {r4, r5, r6}
 8011e70:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011e72:	4d18      	ldr	r5, [pc, #96]	; (8011ed4 <HAL_RCC_GetSysClockFreq+0x80>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011e74:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011e76:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8011e78:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011e7a:	4018      	ands	r0, r3
 8011e7c:	2808      	cmp	r0, #8
 8011e7e:	d00a      	beq.n	8011e96 <HAL_RCC_GetSysClockFreq+0x42>
 8011e80:	380c      	subs	r0, #12
 8011e82:	1e43      	subs	r3, r0, #1
 8011e84:	4198      	sbcs	r0, r3
 8011e86:	4b14      	ldr	r3, [pc, #80]	; (8011ed8 <HAL_RCC_GetSysClockFreq+0x84>)
 8011e88:	4240      	negs	r0, r0
 8011e8a:	4018      	ands	r0, r3
 8011e8c:	4b13      	ldr	r3, [pc, #76]	; (8011edc <HAL_RCC_GetSysClockFreq+0x88>)
 8011e8e:	469c      	mov	ip, r3
 8011e90:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011e92:	b008      	add	sp, #32
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011e96:	200f      	movs	r0, #15
 8011e98:	0c9c      	lsrs	r4, r3, #18
 8011e9a:	4004      	ands	r4, r0
 8011e9c:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011e9e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011ea0:	4008      	ands	r0, r1
 8011ea2:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011ea4:	22c0      	movs	r2, #192	; 0xc0
 8011ea6:	2080      	movs	r0, #128	; 0x80
 8011ea8:	0252      	lsls	r2, r2, #9
 8011eaa:	4013      	ands	r3, r2
 8011eac:	0240      	lsls	r0, r0, #9
 8011eae:	4283      	cmp	r3, r0
 8011eb0:	d001      	beq.n	8011eb6 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d004      	beq.n	8011ec0 <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011eb6:	480a      	ldr	r0, [pc, #40]	; (8011ee0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011eb8:	f7ee f94a 	bl	8000150 <__udivsi3>
 8011ebc:	4360      	muls	r0, r4
 8011ebe:	e7e8      	b.n	8011e92 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011ec0:	4806      	ldr	r0, [pc, #24]	; (8011edc <HAL_RCC_GetSysClockFreq+0x88>)
 8011ec2:	f7ee f945 	bl	8000150 <__udivsi3>
 8011ec6:	4360      	muls	r0, r4
 8011ec8:	e7e3      	b.n	8011e92 <HAL_RCC_GetSysClockFreq+0x3e>
 8011eca:	46c0      	nop			; (mov r8, r8)
 8011ecc:	0801cf44 	.word	0x0801cf44
 8011ed0:	0801cf58 	.word	0x0801cf58
 8011ed4:	40021000 	.word	0x40021000
 8011ed8:	fd9da600 	.word	0xfd9da600
 8011edc:	02dc6c00 	.word	0x02dc6c00
 8011ee0:	007a1200 	.word	0x007a1200

08011ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ee4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011ee6:	f7ff ffb5 	bl	8011e54 <HAL_RCC_GetSysClockFreq>
 8011eea:	4b05      	ldr	r3, [pc, #20]	; (8011f00 <HAL_RCC_GetHCLKFreq+0x1c>)
 8011eec:	4a05      	ldr	r2, [pc, #20]	; (8011f04 <HAL_RCC_GetHCLKFreq+0x20>)
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	061b      	lsls	r3, r3, #24
 8011ef2:	0f1b      	lsrs	r3, r3, #28
 8011ef4:	5cd3      	ldrb	r3, [r2, r3]
 8011ef6:	40d8      	lsrs	r0, r3
 8011ef8:	4b03      	ldr	r3, [pc, #12]	; (8011f08 <HAL_RCC_GetHCLKFreq+0x24>)
 8011efa:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011efc:	bd10      	pop	{r4, pc}
 8011efe:	46c0      	nop			; (mov r8, r8)
 8011f00:	40021000 	.word	0x40021000
 8011f04:	0801a344 	.word	0x0801a344
 8011f08:	200000b8 	.word	0x200000b8

08011f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011f0c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011f0e:	f7ff ffa1 	bl	8011e54 <HAL_RCC_GetSysClockFreq>
 8011f12:	4907      	ldr	r1, [pc, #28]	; (8011f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011f14:	4a07      	ldr	r2, [pc, #28]	; (8011f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011f16:	684b      	ldr	r3, [r1, #4]
 8011f18:	061b      	lsls	r3, r3, #24
 8011f1a:	0f1b      	lsrs	r3, r3, #28
 8011f1c:	5cd3      	ldrb	r3, [r2, r3]
 8011f1e:	40d8      	lsrs	r0, r3
 8011f20:	4b05      	ldr	r3, [pc, #20]	; (8011f38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8011f22:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011f24:	684b      	ldr	r3, [r1, #4]
 8011f26:	055b      	lsls	r3, r3, #21
 8011f28:	0f5b      	lsrs	r3, r3, #29
 8011f2a:	5cd3      	ldrb	r3, [r2, r3]
 8011f2c:	40d8      	lsrs	r0, r3
}    
 8011f2e:	bd10      	pop	{r4, pc}
 8011f30:	40021000 	.word	0x40021000
 8011f34:	0801a344 	.word	0x0801a344
 8011f38:	200000b8 	.word	0x200000b8

08011f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f3e:	46c6      	mov	lr, r8
 8011f40:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011f42:	6803      	ldr	r3, [r0, #0]
{
 8011f44:	0004      	movs	r4, r0
 8011f46:	b082      	sub	sp, #8
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011f48:	03da      	lsls	r2, r3, #15
 8011f4a:	d507      	bpl.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011f4c:	493e      	ldr	r1, [pc, #248]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f4e:	6840      	ldr	r0, [r0, #4]
 8011f50:	6a0a      	ldr	r2, [r1, #32]
 8011f52:	4042      	eors	r2, r0
 8011f54:	20c0      	movs	r0, #192	; 0xc0
 8011f56:	0080      	lsls	r0, r0, #2
 8011f58:	4202      	tst	r2, r0
 8011f5a:	d131      	bne.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011f5c:	07da      	lsls	r2, r3, #31
 8011f5e:	d506      	bpl.n	8011f6e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011f60:	2003      	movs	r0, #3
 8011f62:	4939      	ldr	r1, [pc, #228]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f64:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011f66:	4382      	bics	r2, r0
 8011f68:	68a0      	ldr	r0, [r4, #8]
 8011f6a:	4302      	orrs	r2, r0
 8011f6c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011f6e:	079a      	lsls	r2, r3, #30
 8011f70:	d506      	bpl.n	8011f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011f72:	4935      	ldr	r1, [pc, #212]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f74:	4835      	ldr	r0, [pc, #212]	; (801204c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8011f76:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011f78:	4002      	ands	r2, r0
 8011f7a:	68e0      	ldr	r0, [r4, #12]
 8011f7c:	4302      	orrs	r2, r0
 8011f7e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011f80:	035a      	lsls	r2, r3, #13
 8011f82:	d506      	bpl.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011f84:	4930      	ldr	r1, [pc, #192]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f86:	4832      	ldr	r0, [pc, #200]	; (8012050 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f88:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011f8a:	4002      	ands	r2, r0
 8011f8c:	6920      	ldr	r0, [r4, #16]
 8011f8e:	4302      	orrs	r2, r0
 8011f90:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011f92:	069a      	lsls	r2, r3, #26
 8011f94:	d506      	bpl.n	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011f96:	2010      	movs	r0, #16
 8011f98:	492b      	ldr	r1, [pc, #172]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f9a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011f9c:	4382      	bics	r2, r0
 8011f9e:	6960      	ldr	r0, [r4, #20]
 8011fa0:	4302      	orrs	r2, r0
 8011fa2:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011fa4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011fa6:	055b      	lsls	r3, r3, #21
 8011fa8:	d506      	bpl.n	8011fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011faa:	2140      	movs	r1, #64	; 0x40
 8011fac:	4a26      	ldr	r2, [pc, #152]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011fae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011fb0:	438b      	bics	r3, r1
 8011fb2:	69a1      	ldr	r1, [r4, #24]
 8011fb4:	430b      	orrs	r3, r1
 8011fb6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011fb8:	b002      	add	sp, #8
 8011fba:	bc80      	pop	{r7}
 8011fbc:	46b8      	mov	r8, r7
 8011fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011fc0:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011fc2:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8011fc4:	69ca      	ldr	r2, [r1, #28]
 8011fc6:	0540      	lsls	r0, r0, #21
 8011fc8:	4302      	orrs	r2, r0
 8011fca:	61ca      	str	r2, [r1, #28]
 8011fcc:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011fce:	4d21      	ldr	r5, [pc, #132]	; (8012054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011fd0:	4003      	ands	r3, r0
 8011fd2:	9301      	str	r3, [sp, #4]
 8011fd4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011fd6:	682b      	ldr	r3, [r5, #0]
 8011fd8:	007f      	lsls	r7, r7, #1
 8011fda:	433b      	orrs	r3, r7
 8011fdc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011fde:	f7fd fdf3 	bl	800fbc8 <HAL_GetTick>
 8011fe2:	0006      	movs	r6, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011fe4:	e004      	b.n	8011ff0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fe6:	f7fd fdef 	bl	800fbc8 <HAL_GetTick>
 8011fea:	1b80      	subs	r0, r0, r6
 8011fec:	2864      	cmp	r0, #100	; 0x64
 8011fee:	d829      	bhi.n	8012044 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	423b      	tst	r3, r7
 8011ff4:	d0f7      	beq.n	8011fe6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8011ff6:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011ff8:	4d13      	ldr	r5, [pc, #76]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011ffa:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011ffc:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8011ffe:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012000:	4b15      	ldr	r3, [pc, #84]	; (8012058 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8012002:	4302      	orrs	r2, r0
 8012004:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012006:	6a2a      	ldr	r2, [r5, #32]
 8012008:	4814      	ldr	r0, [pc, #80]	; (801205c <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801200a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 801200c:	4002      	ands	r2, r0
 801200e:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8012010:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012012:	078b      	lsls	r3, r1, #30
 8012014:	d408      	bmi.n	8012028 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012016:	4a0c      	ldr	r2, [pc, #48]	; (8012048 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8012018:	490f      	ldr	r1, [pc, #60]	; (8012058 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 801201a:	6a13      	ldr	r3, [r2, #32]
 801201c:	400b      	ands	r3, r1
 801201e:	6861      	ldr	r1, [r4, #4]
 8012020:	430b      	orrs	r3, r1
 8012022:	6213      	str	r3, [r2, #32]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	e799      	b.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012028:	f7fd fdce 	bl	800fbc8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801202c:	4b0c      	ldr	r3, [pc, #48]	; (8012060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 801202e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012030:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012032:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012034:	6a2b      	ldr	r3, [r5, #32]
 8012036:	421f      	tst	r7, r3
 8012038:	d1ed      	bne.n	8012016 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801203a:	f7fd fdc5 	bl	800fbc8 <HAL_GetTick>
 801203e:	1b80      	subs	r0, r0, r6
 8012040:	4540      	cmp	r0, r8
 8012042:	d9f7      	bls.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8012044:	2003      	movs	r0, #3
 8012046:	e7b7      	b.n	8011fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012048:	40021000 	.word	0x40021000
 801204c:	fffcffff 	.word	0xfffcffff
 8012050:	fff3ffff 	.word	0xfff3ffff
 8012054:	40007000 	.word	0x40007000
 8012058:	fffffcff 	.word	0xfffffcff
 801205c:	fffeffff 	.word	0xfffeffff
 8012060:	00001388 	.word	0x00001388

08012064 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012064:	4770      	bx	lr
 8012066:	46c0      	nop			; (mov r8, r8)

08012068 <HAL_RTC_Init>:
{
 8012068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801206a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801206c:	d049      	beq.n	8012102 <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801206e:	7f43      	ldrb	r3, [r0, #29]
 8012070:	b2da      	uxtb	r2, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	d047      	beq.n	8012106 <HAL_RTC_Init+0x9e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012076:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012078:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801207a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	625a      	str	r2, [r3, #36]	; 0x24
 8012080:	3a77      	subs	r2, #119	; 0x77
 8012082:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012084:	68da      	ldr	r2, [r3, #12]
 8012086:	0652      	lsls	r2, r2, #25
 8012088:	d524      	bpl.n	80120d4 <HAL_RTC_Init+0x6c>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801208a:	689a      	ldr	r2, [r3, #8]
 801208c:	4920      	ldr	r1, [pc, #128]	; (8012110 <HAL_RTC_Init+0xa8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801208e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012090:	400a      	ands	r2, r1
 8012092:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012094:	6862      	ldr	r2, [r4, #4]
 8012096:	6899      	ldr	r1, [r3, #8]
 8012098:	4302      	orrs	r2, r0
 801209a:	6960      	ldr	r0, [r4, #20]
 801209c:	4302      	orrs	r2, r0
 801209e:	430a      	orrs	r2, r1
 80120a0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80120a2:	68e2      	ldr	r2, [r4, #12]
    return HAL_OK;
 80120a4:	2000      	movs	r0, #0
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80120a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80120a8:	68a2      	ldr	r2, [r4, #8]
 80120aa:	6919      	ldr	r1, [r3, #16]
 80120ac:	0412      	lsls	r2, r2, #16
 80120ae:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80120b0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80120b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80120b4:	68da      	ldr	r2, [r3, #12]
 80120b6:	438a      	bics	r2, r1
 80120b8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80120ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80120bc:	4915      	ldr	r1, [pc, #84]	; (8012114 <HAL_RTC_Init+0xac>)
 80120be:	400a      	ands	r2, r1
 80120c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80120c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80120c4:	69a1      	ldr	r1, [r4, #24]
 80120c6:	430a      	orrs	r2, r1
 80120c8:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120ca:	22ff      	movs	r2, #255	; 0xff
 80120cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80120ce:	2301      	movs	r3, #1
 80120d0:	7763      	strb	r3, [r4, #29]
}
 80120d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80120d4:	2201      	movs	r2, #1
 80120d6:	4252      	negs	r2, r2
 80120d8:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 80120da:	f7fd fd75 	bl	800fbc8 <HAL_GetTick>
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120de:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80120e0:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80120e2:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120e4:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	68da      	ldr	r2, [r3, #12]
 80120ea:	4216      	tst	r6, r2
 80120ec:	d1cd      	bne.n	801208a <HAL_RTC_Init+0x22>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120ee:	f7fd fd6b 	bl	800fbc8 <HAL_GetTick>
 80120f2:	1b40      	subs	r0, r0, r5
 80120f4:	42b8      	cmp	r0, r7
 80120f6:	d9f6      	bls.n	80120e6 <HAL_RTC_Init+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120f8:	22ff      	movs	r2, #255	; 0xff
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80120fe:	2304      	movs	r3, #4
 8012100:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012102:	2001      	movs	r0, #1
 8012104:	e7e5      	b.n	80120d2 <HAL_RTC_Init+0x6a>
    hrtc->Lock = HAL_UNLOCKED;
 8012106:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012108:	f7ff ffac 	bl	8012064 <HAL_RTC_MspInit>
 801210c:	e7b3      	b.n	8012076 <HAL_RTC_Init+0xe>
 801210e:	46c0      	nop			; (mov r8, r8)
 8012110:	ff8fffbf 	.word	0xff8fffbf
 8012114:	fffbffff 	.word	0xfffbffff

08012118 <HAL_RTC_SetTime>:
{
 8012118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801211a:	464e      	mov	r6, r9
 801211c:	4645      	mov	r5, r8
 801211e:	46de      	mov	lr, fp
 8012120:	4657      	mov	r7, sl
 8012122:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8012124:	7f03      	ldrb	r3, [r0, #28]
{
 8012126:	0005      	movs	r5, r0
 8012128:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801212a:	2b01      	cmp	r3, #1
 801212c:	d100      	bne.n	8012130 <HAL_RTC_SetTime+0x18>
 801212e:	e0c2      	b.n	80122b6 <HAL_RTC_SetTime+0x19e>
 8012130:	2301      	movs	r3, #1
 8012132:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012134:	3301      	adds	r3, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012136:	6807      	ldr	r7, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012138:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801213a:	2a00      	cmp	r2, #0
 801213c:	d054      	beq.n	80121e8 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801213e:	2140      	movs	r1, #64	; 0x40
 8012140:	000b      	movs	r3, r1
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	4013      	ands	r3, r2
 8012146:	4211      	tst	r1, r2
 8012148:	d100      	bne.n	801214c <HAL_RTC_SetTime+0x34>
 801214a:	e0a7      	b.n	801229c <HAL_RTC_SetTime+0x184>
              ((uint32_t)(sTime->TimeFormat) << 16));   
 801214c:	7a33      	ldrb	r3, [r6, #8]
 801214e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012150:	7834      	ldrb	r4, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012152:	7872      	ldrb	r2, [r6, #1]
              ((uint32_t)sTime->Seconds) | \
 8012154:	78b1      	ldrb	r1, [r6, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012156:	0424      	lsls	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012158:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801215a:	4314      	orrs	r4, r2
              ((uint32_t)(sTime->Minutes) << 8) | \
 801215c:	430c      	orrs	r4, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801215e:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012160:	23ca      	movs	r3, #202	; 0xca
 8012162:	627b      	str	r3, [r7, #36]	; 0x24
 8012164:	3b77      	subs	r3, #119	; 0x77
 8012166:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012168:	68fb      	ldr	r3, [r7, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801216a:	46a0      	mov	r8, r4
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801216c:	065b      	lsls	r3, r3, #25
 801216e:	d400      	bmi.n	8012172 <HAL_RTC_SetTime+0x5a>
 8012170:	e073      	b.n	801225a <HAL_RTC_SetTime+0x142>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012172:	4644      	mov	r4, r8
 8012174:	4b51      	ldr	r3, [pc, #324]	; (80122bc <HAL_RTC_SetTime+0x1a4>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012176:	4a52      	ldr	r2, [pc, #328]	; (80122c0 <HAL_RTC_SetTime+0x1a8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012178:	401c      	ands	r4, r3
 801217a:	603c      	str	r4, [r7, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801217c:	68bb      	ldr	r3, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801217e:	6931      	ldr	r1, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012180:	4013      	ands	r3, r2
 8012182:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012184:	68f3      	ldr	r3, [r6, #12]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	430b      	orrs	r3, r1
 801218a:	4313      	orrs	r3, r2
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801218c:	2280      	movs	r2, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801218e:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	4393      	bics	r3, r2
 8012194:	60fb      	str	r3, [r7, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	069b      	lsls	r3, r3, #26
 801219a:	d418      	bmi.n	80121ce <HAL_RTC_SetTime+0xb6>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	3220      	adds	r2, #32
 80121a0:	4393      	bics	r3, r2
 80121a2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80121a4:	f7fd fd10 	bl	800fbc8 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80121a8:	23fa      	movs	r3, #250	; 0xfa
 80121aa:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 80121ac:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80121ae:	2420      	movs	r4, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80121b0:	4699      	mov	r9, r3
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80121b2:	e005      	b.n	80121c0 <HAL_RTC_SetTime+0xa8>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80121b4:	f7fd fd08 	bl	800fbc8 <HAL_GetTick>
 80121b8:	1b80      	subs	r0, r0, r6
 80121ba:	4548      	cmp	r0, r9
 80121bc:	d900      	bls.n	80121c0 <HAL_RTC_SetTime+0xa8>
 80121be:	e071      	b.n	80122a4 <HAL_RTC_SetTime+0x18c>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80121c0:	0022      	movs	r2, r4
 80121c2:	682f      	ldr	r7, [r5, #0]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	401a      	ands	r2, r3
 80121c8:	4690      	mov	r8, r2
 80121ca:	421c      	tst	r4, r3
 80121cc:	d0f2      	beq.n	80121b4 <HAL_RTC_SetTime+0x9c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80121ce:	23ff      	movs	r3, #255	; 0xff
 80121d0:	627b      	str	r3, [r7, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80121d2:	3bfe      	subs	r3, #254	; 0xfe
 80121d4:	776b      	strb	r3, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 80121d6:	2300      	movs	r3, #0
   return HAL_OK;
 80121d8:	2000      	movs	r0, #0
   __HAL_UNLOCK(hrtc); 
 80121da:	772b      	strb	r3, [r5, #28]
}
 80121dc:	bcf0      	pop	{r4, r5, r6, r7}
 80121de:	46bb      	mov	fp, r7
 80121e0:	46b2      	mov	sl, r6
 80121e2:	46a9      	mov	r9, r5
 80121e4:	46a0      	mov	r8, r4
 80121e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80121e8:	2140      	movs	r1, #64	; 0x40
 80121ea:	0008      	movs	r0, r1
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	4018      	ands	r0, r3
 80121f0:	4219      	tst	r1, r3
 80121f2:	d055      	beq.n	80122a0 <HAL_RTC_SetTime+0x188>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80121f4:	7a30      	ldrb	r0, [r6, #8]
 80121f6:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121f8:	7831      	ldrb	r1, [r6, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80121fa:	2909      	cmp	r1, #9
 80121fc:	d908      	bls.n	8012210 <HAL_RTC_SetTime+0xf8>
  uint32_t bcdhigh = 0;
 80121fe:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10;
 8012200:	390a      	subs	r1, #10
 8012202:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8012204:	3301      	adds	r3, #1
  while(Value >= 10)
 8012206:	2909      	cmp	r1, #9
 8012208:	d8fa      	bhi.n	8012200 <HAL_RTC_SetTime+0xe8>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801220a:	011b      	lsls	r3, r3, #4
 801220c:	4319      	orrs	r1, r3
 801220e:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012210:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012212:	0409      	lsls	r1, r1, #16
  while(Value >= 10)
 8012214:	2b09      	cmp	r3, #9
 8012216:	d908      	bls.n	801222a <HAL_RTC_SetTime+0x112>
  uint32_t bcdhigh = 0;
 8012218:	2400      	movs	r4, #0
    Value -= 10;
 801221a:	3b0a      	subs	r3, #10
 801221c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801221e:	3401      	adds	r4, #1
  while(Value >= 10)
 8012220:	2b09      	cmp	r3, #9
 8012222:	d8fa      	bhi.n	801221a <HAL_RTC_SetTime+0x102>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012224:	0124      	lsls	r4, r4, #4
 8012226:	4323      	orrs	r3, r4
 8012228:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801222a:	78b4      	ldrb	r4, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801222c:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 801222e:	2c09      	cmp	r4, #9
 8012230:	d907      	bls.n	8012242 <HAL_RTC_SetTime+0x12a>
    Value -= 10;
 8012232:	3c0a      	subs	r4, #10
 8012234:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8012236:	3201      	adds	r2, #1
  while(Value >= 10)
 8012238:	2c09      	cmp	r4, #9
 801223a:	d8fa      	bhi.n	8012232 <HAL_RTC_SetTime+0x11a>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801223c:	0112      	lsls	r2, r2, #4
 801223e:	4314      	orrs	r4, r2
 8012240:	b2e4      	uxtb	r4, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012242:	4301      	orrs	r1, r0
 8012244:	430b      	orrs	r3, r1
 8012246:	4323      	orrs	r3, r4
 8012248:	4698      	mov	r8, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801224a:	23ca      	movs	r3, #202	; 0xca
 801224c:	627b      	str	r3, [r7, #36]	; 0x24
 801224e:	3b77      	subs	r3, #119	; 0x77
 8012250:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	065b      	lsls	r3, r3, #25
 8012256:	d500      	bpl.n	801225a <HAL_RTC_SetTime+0x142>
 8012258:	e78b      	b.n	8012172 <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801225a:	2301      	movs	r3, #1
 801225c:	425b      	negs	r3, r3
 801225e:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8012260:	f7fd fcb2 	bl	800fbc8 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012264:	23fa      	movs	r3, #250	; 0xfa
 8012266:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8012268:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801226a:	2440      	movs	r4, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801226c:	469b      	mov	fp, r3
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801226e:	0022      	movs	r2, r4
 8012270:	682f      	ldr	r7, [r5, #0]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	401a      	ands	r2, r3
 8012276:	4692      	mov	sl, r2
 8012278:	421c      	tst	r4, r3
 801227a:	d000      	beq.n	801227e <HAL_RTC_SetTime+0x166>
 801227c:	e779      	b.n	8012172 <HAL_RTC_SetTime+0x5a>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801227e:	f7fd fca3 	bl	800fbc8 <HAL_GetTick>
 8012282:	464b      	mov	r3, r9
 8012284:	1ac0      	subs	r0, r0, r3
 8012286:	4558      	cmp	r0, fp
 8012288:	d9f1      	bls.n	801226e <HAL_RTC_SetTime+0x156>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801228a:	22ff      	movs	r2, #255	; 0xff
 801228c:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 801228e:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012290:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012292:	2304      	movs	r3, #4
 8012294:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8012296:	4653      	mov	r3, sl
 8012298:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801229a:	e79f      	b.n	80121dc <HAL_RTC_SetTime+0xc4>
      sTime->TimeFormat = 0x00;
 801229c:	7233      	strb	r3, [r6, #8]
 801229e:	e757      	b.n	8012150 <HAL_RTC_SetTime+0x38>
      sTime->TimeFormat = 0x00;
 80122a0:	7230      	strb	r0, [r6, #8]
 80122a2:	e7a9      	b.n	80121f8 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80122a4:	22ff      	movs	r2, #255	; 0xff
 80122a6:	682b      	ldr	r3, [r5, #0]
        return HAL_ERROR;
 80122a8:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80122aa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80122ac:	2304      	movs	r3, #4
 80122ae:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80122b0:	4643      	mov	r3, r8
 80122b2:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80122b4:	e792      	b.n	80121dc <HAL_RTC_SetTime+0xc4>
  __HAL_LOCK(hrtc);
 80122b6:	2002      	movs	r0, #2
 80122b8:	e790      	b.n	80121dc <HAL_RTC_SetTime+0xc4>
 80122ba:	46c0      	nop			; (mov r8, r8)
 80122bc:	007f7f7f 	.word	0x007f7f7f
 80122c0:	fffbffff 	.word	0xfffbffff

080122c4 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80122c4:	6803      	ldr	r3, [r0, #0]
{
 80122c6:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80122c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80122ca:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80122cc:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80122ce:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80122d0:	681c      	ldr	r4, [r3, #0]
 80122d2:	4b13      	ldr	r3, [pc, #76]	; (8012320 <HAL_RTC_GetTime+0x5c>)
 80122d4:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80122d6:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80122d8:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80122da:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80122dc:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80122de:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80122e0:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80122e2:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80122e4:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80122e6:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80122e8:	720e      	strb	r6, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 80122ea:	2a00      	cmp	r2, #0
 80122ec:	d115      	bne.n	801231a <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 80122ee:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80122f0:	0900      	lsrs	r0, r0, #4
 80122f2:	0082      	lsls	r2, r0, #2
 80122f4:	1810      	adds	r0, r2, r0
 80122f6:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80122f8:	4035      	ands	r5, r6
 80122fa:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80122fc:	0918      	lsrs	r0, r3, #4
 80122fe:	0082      	lsls	r2, r0, #2
 8012300:	1812      	adds	r2, r2, r0
 8012302:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012304:	4033      	ands	r3, r6
 8012306:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012308:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801230a:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801230c:	0093      	lsls	r3, r2, #2
 801230e:	189b      	adds	r3, r3, r2
 8012310:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012312:	4034      	ands	r4, r6
 8012314:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012316:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012318:	708c      	strb	r4, [r1, #2]
}
 801231a:	2000      	movs	r0, #0
 801231c:	bd70      	pop	{r4, r5, r6, pc}
 801231e:	46c0      	nop			; (mov r8, r8)
 8012320:	007f7f7f 	.word	0x007f7f7f

08012324 <HAL_RTC_SetDate>:
{
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	46ce      	mov	lr, r9
 8012328:	4647      	mov	r7, r8
 801232a:	b580      	push	{r7, lr}
 __HAL_LOCK(hrtc);
 801232c:	7f03      	ldrb	r3, [r0, #28]
{
 801232e:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8012330:	2b01      	cmp	r3, #1
 8012332:	d100      	bne.n	8012336 <HAL_RTC_SetDate+0x12>
 8012334:	e0a8      	b.n	8012488 <HAL_RTC_SetDate+0x164>
 8012336:	2301      	movs	r3, #1
 8012338:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 801233a:	3301      	adds	r3, #1
 801233c:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 801233e:	2a00      	cmp	r2, #0
 8012340:	d03d      	beq.n	80123be <HAL_RTC_SetDate+0x9a>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012342:	23ca      	movs	r3, #202	; 0xca
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012344:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8012346:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012348:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801234a:	0224      	lsls	r4, r4, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801234c:	682a      	ldr	r2, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801234e:	4320      	orrs	r0, r4
                  ((uint32_t)sDate->Date) | \
 8012350:	788c      	ldrb	r4, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012352:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012354:	780c      	ldrb	r4, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012356:	6253      	str	r3, [r2, #36]	; 0x24
 8012358:	3b77      	subs	r3, #119	; 0x77
 801235a:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801235c:	68d3      	ldr	r3, [r2, #12]
                  (((uint32_t)sDate->WeekDay) << 13));  
 801235e:	0364      	lsls	r4, r4, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012360:	4304      	orrs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012362:	065b      	lsls	r3, r3, #25
 8012364:	d564      	bpl.n	8012430 <HAL_RTC_SetDate+0x10c>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012366:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012368:	4849      	ldr	r0, [pc, #292]	; (8012490 <HAL_RTC_SetDate+0x16c>)
 801236a:	4020      	ands	r0, r4
 801236c:	6050      	str	r0, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801236e:	68d3      	ldr	r3, [r2, #12]
 8012370:	438b      	bics	r3, r1
 8012372:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012374:	6893      	ldr	r3, [r2, #8]
 8012376:	069b      	lsls	r3, r3, #26
 8012378:	d416      	bmi.n	80123a8 <HAL_RTC_SetDate+0x84>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801237a:	68d3      	ldr	r3, [r2, #12]
 801237c:	3120      	adds	r1, #32
 801237e:	438b      	bics	r3, r1
 8012380:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8012382:	f7fd fc21 	bl	800fbc8 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012386:	23fa      	movs	r3, #250	; 0xfa
 8012388:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 801238a:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801238c:	2420      	movs	r4, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801238e:	4698      	mov	r8, r3
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012390:	e004      	b.n	801239c <HAL_RTC_SetDate+0x78>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012392:	f7fd fc19 	bl	800fbc8 <HAL_GetTick>
 8012396:	1b80      	subs	r0, r0, r6
 8012398:	4540      	cmp	r0, r8
 801239a:	d86d      	bhi.n	8012478 <HAL_RTC_SetDate+0x154>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801239c:	0027      	movs	r7, r4
 801239e:	682a      	ldr	r2, [r5, #0]
 80123a0:	68d3      	ldr	r3, [r2, #12]
 80123a2:	401f      	ands	r7, r3
 80123a4:	421c      	tst	r4, r3
 80123a6:	d0f4      	beq.n	8012392 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80123a8:	23ff      	movs	r3, #255	; 0xff
 80123aa:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80123ac:	3bfe      	subs	r3, #254	; 0xfe
 80123ae:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80123b0:	2300      	movs	r3, #0
    return HAL_OK;    
 80123b2:	2000      	movs	r0, #0
    __HAL_UNLOCK(hrtc);
 80123b4:	772b      	strb	r3, [r5, #28]
}
 80123b6:	bcc0      	pop	{r6, r7}
 80123b8:	46b9      	mov	r9, r7
 80123ba:	46b0      	mov	r8, r6
 80123bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80123be:	2010      	movs	r0, #16
 80123c0:	784b      	ldrb	r3, [r1, #1]
 80123c2:	4218      	tst	r0, r3
 80123c4:	d054      	beq.n	8012470 <HAL_RTC_SetDate+0x14c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80123c6:	4383      	bics	r3, r0
 80123c8:	330a      	adds	r3, #10
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80123ca:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	704b      	strb	r3, [r1, #1]
  while(Value >= 10)
 80123d0:	2c09      	cmp	r4, #9
 80123d2:	d95b      	bls.n	801248c <HAL_RTC_SetDate+0x168>
  uint32_t bcdhigh = 0;
 80123d4:	2000      	movs	r0, #0
    Value -= 10;
 80123d6:	3c0a      	subs	r4, #10
 80123d8:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 80123da:	3001      	adds	r0, #1
  while(Value >= 10)
 80123dc:	2c09      	cmp	r4, #9
 80123de:	d8fa      	bhi.n	80123d6 <HAL_RTC_SetDate+0xb2>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80123e0:	0100      	lsls	r0, r0, #4
 80123e2:	4304      	orrs	r4, r0
 80123e4:	b2e4      	uxtb	r4, r4
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80123e6:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 80123e8:	2b09      	cmp	r3, #9
 80123ea:	d908      	bls.n	80123fe <HAL_RTC_SetDate+0xda>
  uint32_t bcdhigh = 0;
 80123ec:	2000      	movs	r0, #0
    Value -= 10;
 80123ee:	3b0a      	subs	r3, #10
 80123f0:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80123f2:	3001      	adds	r0, #1
  while(Value >= 10)
 80123f4:	2b09      	cmp	r3, #9
 80123f6:	d8fa      	bhi.n	80123ee <HAL_RTC_SetDate+0xca>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80123f8:	0100      	lsls	r0, r0, #4
 80123fa:	4303      	orrs	r3, r0
 80123fc:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80123fe:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012400:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8012402:	2809      	cmp	r0, #9
 8012404:	d907      	bls.n	8012416 <HAL_RTC_SetDate+0xf2>
    Value -= 10;
 8012406:	380a      	subs	r0, #10
 8012408:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 801240a:	3201      	adds	r2, #1
  while(Value >= 10)
 801240c:	2809      	cmp	r0, #9
 801240e:	d8fa      	bhi.n	8012406 <HAL_RTC_SetDate+0xe2>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012410:	0112      	lsls	r2, r2, #4
 8012412:	4310      	orrs	r0, r2
 8012414:	b2c0      	uxtb	r0, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8012416:	780a      	ldrb	r2, [r1, #0]
 8012418:	0352      	lsls	r2, r2, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801241a:	4314      	orrs	r4, r2
 801241c:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801241e:	23ca      	movs	r3, #202	; 0xca
 8012420:	682a      	ldr	r2, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012422:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012424:	6253      	str	r3, [r2, #36]	; 0x24
 8012426:	3b77      	subs	r3, #119	; 0x77
 8012428:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801242a:	68d3      	ldr	r3, [r2, #12]
 801242c:	065b      	lsls	r3, r3, #25
 801242e:	d49a      	bmi.n	8012366 <HAL_RTC_SetDate+0x42>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012430:	2301      	movs	r3, #1
 8012432:	425b      	negs	r3, r3
 8012434:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8012436:	f7fd fbc7 	bl	800fbc8 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801243a:	23fa      	movs	r3, #250	; 0xfa
 801243c:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 801243e:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012440:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012442:	4699      	mov	r9, r3
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012444:	0031      	movs	r1, r6
 8012446:	682a      	ldr	r2, [r5, #0]
 8012448:	68d3      	ldr	r3, [r2, #12]
 801244a:	4019      	ands	r1, r3
 801244c:	4688      	mov	r8, r1
 801244e:	421e      	tst	r6, r3
 8012450:	d000      	beq.n	8012454 <HAL_RTC_SetDate+0x130>
 8012452:	e788      	b.n	8012366 <HAL_RTC_SetDate+0x42>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012454:	f7fd fbb8 	bl	800fbc8 <HAL_GetTick>
 8012458:	1bc0      	subs	r0, r0, r7
 801245a:	4548      	cmp	r0, r9
 801245c:	d9f2      	bls.n	8012444 <HAL_RTC_SetDate+0x120>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801245e:	22ff      	movs	r2, #255	; 0xff
 8012460:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 8012462:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012464:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012466:	2304      	movs	r3, #4
 8012468:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801246a:	4643      	mov	r3, r8
 801246c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801246e:	e7a2      	b.n	80123b6 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012470:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10)
 8012472:	2c09      	cmp	r4, #9
 8012474:	d8ae      	bhi.n	80123d4 <HAL_RTC_SetDate+0xb0>
 8012476:	e7b6      	b.n	80123e6 <HAL_RTC_SetDate+0xc2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012478:	22ff      	movs	r2, #255	; 0xff
 801247a:	682b      	ldr	r3, [r5, #0]
        return HAL_ERROR;
 801247c:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801247e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012480:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8012482:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012484:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8012486:	e796      	b.n	80123b6 <HAL_RTC_SetDate+0x92>
 __HAL_LOCK(hrtc);
 8012488:	2002      	movs	r0, #2
 801248a:	e794      	b.n	80123b6 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801248c:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 801248e:	e7ad      	b.n	80123ec <HAL_RTC_SetDate+0xc8>
 8012490:	00ffff3f 	.word	0x00ffff3f

08012494 <HAL_RTC_GetDate>:
{
 8012494:	b5f0      	push	{r4, r5, r6, r7, lr}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012496:	241f      	movs	r4, #31
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012498:	6803      	ldr	r3, [r0, #0]
 801249a:	4814      	ldr	r0, [pc, #80]	; (80124ec <HAL_RTC_GetDate+0x58>)
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80124a0:	0a18      	lsrs	r0, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80124a2:	0c1f      	lsrs	r7, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80124a4:	b2c6      	uxtb	r6, r0
 80124a6:	4020      	ands	r0, r4
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80124a8:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80124aa:	041b      	lsls	r3, r3, #16
 80124ac:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80124ae:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80124b0:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80124b2:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80124b4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80124b6:	2a00      	cmp	r2, #0
 80124b8:	d115      	bne.n	80124e6 <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80124ba:	250f      	movs	r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80124bc:	093b      	lsrs	r3, r7, #4
 80124be:	009a      	lsls	r2, r3, #2
 80124c0:	18d2      	adds	r2, r2, r3
 80124c2:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80124c4:	402f      	ands	r7, r5
 80124c6:	19d2      	adds	r2, r2, r7
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80124c8:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80124ca:	0902      	lsrs	r2, r0, #4
 80124cc:	0090      	lsls	r0, r2, #2
 80124ce:	1880      	adds	r0, r0, r2
 80124d0:	0922      	lsrs	r2, r4, #4
 80124d2:	0093      	lsls	r3, r2, #2
 80124d4:	189b      	adds	r3, r3, r2
 80124d6:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80124d8:	402e      	ands	r6, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80124da:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80124dc:	402c      	ands	r4, r5
 80124de:	1980      	adds	r0, r0, r6
 80124e0:	191b      	adds	r3, r3, r4
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80124e2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80124e4:	708b      	strb	r3, [r1, #2]
}
 80124e6:	2000      	movs	r0, #0
 80124e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ea:	46c0      	nop			; (mov r8, r8)
 80124ec:	00ffff3f 	.word	0x00ffff3f

080124f0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80124f0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80124f2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80124f4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80124f6:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80124f8:	600a      	str	r2, [r1, #0]
}
 80124fa:	4770      	bx	lr

080124fc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80124fc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80124fe:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012500:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012502:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012504:	6808      	ldr	r0, [r1, #0]
}
 8012506:	4770      	bx	lr

08012508 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012508:	2201      	movs	r2, #1
{
 801250a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801250c:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801250e:	6a03      	ldr	r3, [r0, #32]
 8012510:	4393      	bics	r3, r2
 8012512:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012514:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8012516:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012518:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801251a:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801251c:	680d      	ldr	r5, [r1, #0]
 801251e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012520:	2502      	movs	r5, #2
 8012522:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012524:	688d      	ldr	r5, [r1, #8]
 8012526:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012528:	4d0e      	ldr	r5, [pc, #56]	; (8012564 <TIM_OC1_SetConfig+0x5c>)
 801252a:	42a8      	cmp	r0, r5
 801252c:	d008      	beq.n	8012540 <TIM_OC1_SetConfig+0x38>
 801252e:	4d0e      	ldr	r5, [pc, #56]	; (8012568 <TIM_OC1_SetConfig+0x60>)
 8012530:	42a8      	cmp	r0, r5
 8012532:	d005      	beq.n	8012540 <TIM_OC1_SetConfig+0x38>
 8012534:	4d0d      	ldr	r5, [pc, #52]	; (801256c <TIM_OC1_SetConfig+0x64>)
 8012536:	42a8      	cmp	r0, r5
 8012538:	d002      	beq.n	8012540 <TIM_OC1_SetConfig+0x38>
 801253a:	4d0d      	ldr	r5, [pc, #52]	; (8012570 <TIM_OC1_SetConfig+0x68>)
 801253c:	42a8      	cmp	r0, r5
 801253e:	d10b      	bne.n	8012558 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012540:	2508      	movs	r5, #8
 8012542:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012544:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012546:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8012548:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 801254a:	2504      	movs	r5, #4
 801254c:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801254e:	4d09      	ldr	r5, [pc, #36]	; (8012574 <TIM_OC1_SetConfig+0x6c>)
 8012550:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8012552:	694d      	ldr	r5, [r1, #20]
 8012554:	4335      	orrs	r5, r6
 8012556:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012558:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801255a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 801255c:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 801255e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012560:	6203      	str	r3, [r0, #32]
}
 8012562:	bd70      	pop	{r4, r5, r6, pc}
 8012564:	40012c00 	.word	0x40012c00
 8012568:	40014000 	.word	0x40014000
 801256c:	40014400 	.word	0x40014400
 8012570:	40014800 	.word	0x40014800
 8012574:	fffffcff 	.word	0xfffffcff

08012578 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012578:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801257a:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801257c:	6a03      	ldr	r3, [r0, #32]
 801257e:	4a17      	ldr	r2, [pc, #92]	; (80125dc <TIM_OC3_SetConfig+0x64>)
 8012580:	4013      	ands	r3, r2
 8012582:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012584:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8012586:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012588:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801258a:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801258c:	680c      	ldr	r4, [r1, #0]
 801258e:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012590:	4c13      	ldr	r4, [pc, #76]	; (80125e0 <TIM_OC3_SetConfig+0x68>)
 8012592:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8012594:	688c      	ldr	r4, [r1, #8]
 8012596:	0224      	lsls	r4, r4, #8
 8012598:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801259a:	4c12      	ldr	r4, [pc, #72]	; (80125e4 <TIM_OC3_SetConfig+0x6c>)
 801259c:	42a0      	cmp	r0, r4
 801259e:	d015      	beq.n	80125cc <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80125a0:	4c11      	ldr	r4, [pc, #68]	; (80125e8 <TIM_OC3_SetConfig+0x70>)
 80125a2:	42a0      	cmp	r0, r4
 80125a4:	d005      	beq.n	80125b2 <TIM_OC3_SetConfig+0x3a>
 80125a6:	4c11      	ldr	r4, [pc, #68]	; (80125ec <TIM_OC3_SetConfig+0x74>)
 80125a8:	42a0      	cmp	r0, r4
 80125aa:	d002      	beq.n	80125b2 <TIM_OC3_SetConfig+0x3a>
 80125ac:	4c10      	ldr	r4, [pc, #64]	; (80125f0 <TIM_OC3_SetConfig+0x78>)
 80125ae:	42a0      	cmp	r0, r4
 80125b0:	d106      	bne.n	80125c0 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80125b2:	4c10      	ldr	r4, [pc, #64]	; (80125f4 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80125b4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80125b6:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80125b8:	698a      	ldr	r2, [r1, #24]
 80125ba:	4332      	orrs	r2, r6
 80125bc:	0112      	lsls	r2, r2, #4
 80125be:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125c0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80125c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80125c4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80125c6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125c8:	6203      	str	r3, [r0, #32]
}
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80125cc:	4c0a      	ldr	r4, [pc, #40]	; (80125f8 <TIM_OC3_SetConfig+0x80>)
 80125ce:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80125d0:	68cb      	ldr	r3, [r1, #12]
 80125d2:	021b      	lsls	r3, r3, #8
 80125d4:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 80125d6:	4c09      	ldr	r4, [pc, #36]	; (80125fc <TIM_OC3_SetConfig+0x84>)
 80125d8:	4023      	ands	r3, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80125da:	e7ea      	b.n	80125b2 <TIM_OC3_SetConfig+0x3a>
 80125dc:	fffffeff 	.word	0xfffffeff
 80125e0:	fffffdff 	.word	0xfffffdff
 80125e4:	40012c00 	.word	0x40012c00
 80125e8:	40014000 	.word	0x40014000
 80125ec:	40014400 	.word	0x40014400
 80125f0:	40014800 	.word	0x40014800
 80125f4:	ffffcfff 	.word	0xffffcfff
 80125f8:	fffff7ff 	.word	0xfffff7ff
 80125fc:	fffffbff 	.word	0xfffffbff

08012600 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012600:	6a03      	ldr	r3, [r0, #32]
 8012602:	4a14      	ldr	r2, [pc, #80]	; (8012654 <TIM_OC4_SetConfig+0x54>)
{
 8012604:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012606:	4013      	ands	r3, r2
 8012608:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801260a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801260c:	4d12      	ldr	r5, [pc, #72]	; (8012658 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 801260e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012610:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012612:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8012614:	680d      	ldr	r5, [r1, #0]
 8012616:	022d      	lsls	r5, r5, #8
 8012618:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801261a:	4d10      	ldr	r5, [pc, #64]	; (801265c <TIM_OC4_SetConfig+0x5c>)
 801261c:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 801261e:	688a      	ldr	r2, [r1, #8]
 8012620:	0312      	lsls	r2, r2, #12
 8012622:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012624:	4d0e      	ldr	r5, [pc, #56]	; (8012660 <TIM_OC4_SetConfig+0x60>)
 8012626:	42a8      	cmp	r0, r5
 8012628:	d008      	beq.n	801263c <TIM_OC4_SetConfig+0x3c>
 801262a:	4d0e      	ldr	r5, [pc, #56]	; (8012664 <TIM_OC4_SetConfig+0x64>)
 801262c:	42a8      	cmp	r0, r5
 801262e:	d005      	beq.n	801263c <TIM_OC4_SetConfig+0x3c>
 8012630:	4d0d      	ldr	r5, [pc, #52]	; (8012668 <TIM_OC4_SetConfig+0x68>)
 8012632:	42a8      	cmp	r0, r5
 8012634:	d002      	beq.n	801263c <TIM_OC4_SetConfig+0x3c>
 8012636:	4d0d      	ldr	r5, [pc, #52]	; (801266c <TIM_OC4_SetConfig+0x6c>)
 8012638:	42a8      	cmp	r0, r5
 801263a:	d104      	bne.n	8012646 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801263c:	4d0c      	ldr	r5, [pc, #48]	; (8012670 <TIM_OC4_SetConfig+0x70>)
 801263e:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8012640:	694d      	ldr	r5, [r1, #20]
 8012642:	01ad      	lsls	r5, r5, #6
 8012644:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012646:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012648:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 801264a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 801264c:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801264e:	6202      	str	r2, [r0, #32]
}
 8012650:	bd30      	pop	{r4, r5, pc}
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	ffffefff 	.word	0xffffefff
 8012658:	ffff8cff 	.word	0xffff8cff
 801265c:	ffffdfff 	.word	0xffffdfff
 8012660:	40012c00 	.word	0x40012c00
 8012664:	40014000 	.word	0x40014000
 8012668:	40014400 	.word	0x40014400
 801266c:	40014800 	.word	0x40014800
 8012670:	ffffbfff 	.word	0xffffbfff

08012674 <HAL_TIM_Base_MspInit>:
}
 8012674:	4770      	bx	lr
 8012676:	46c0      	nop			; (mov r8, r8)

08012678 <HAL_TIM_Base_MspDeInit>:
 8012678:	4770      	bx	lr
 801267a:	46c0      	nop			; (mov r8, r8)

0801267c <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 801267c:	2339      	movs	r3, #57	; 0x39
 801267e:	2202      	movs	r2, #2
{
 8012680:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8012682:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8012684:	6803      	ldr	r3, [r0, #0]
 8012686:	4a0b      	ldr	r2, [pc, #44]	; (80126b4 <HAL_TIM_Base_DeInit+0x38>)
 8012688:	6a19      	ldr	r1, [r3, #32]
{
 801268a:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 801268c:	4211      	tst	r1, r2
 801268e:	d107      	bne.n	80126a0 <HAL_TIM_Base_DeInit+0x24>
 8012690:	6a19      	ldr	r1, [r3, #32]
 8012692:	4a09      	ldr	r2, [pc, #36]	; (80126b8 <HAL_TIM_Base_DeInit+0x3c>)
 8012694:	4211      	tst	r1, r2
 8012696:	d103      	bne.n	80126a0 <HAL_TIM_Base_DeInit+0x24>
 8012698:	2101      	movs	r1, #1
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	438a      	bics	r2, r1
 801269e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 80126a0:	0020      	movs	r0, r4
 80126a2:	f7ff ffe9 	bl	8012678 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80126a6:	2300      	movs	r3, #0
 80126a8:	2239      	movs	r2, #57	; 0x39
 80126aa:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 80126ac:	3a01      	subs	r2, #1
}
 80126ae:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80126b0:	54a3      	strb	r3, [r4, r2]
}
 80126b2:	bd10      	pop	{r4, pc}
 80126b4:	00001111 	.word	0x00001111
 80126b8:	00000444 	.word	0x00000444

080126bc <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80126bc:	2239      	movs	r2, #57	; 0x39
 80126be:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80126c0:	2101      	movs	r1, #1
{
 80126c2:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 80126c4:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80126c6:	6804      	ldr	r4, [r0, #0]
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	430b      	orrs	r3, r1
 80126cc:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80126ce:	5481      	strb	r1, [r0, r2]
}
 80126d0:	2000      	movs	r0, #0
 80126d2:	bd10      	pop	{r4, pc}

080126d4 <HAL_TIM_PWM_MspInit>:
 80126d4:	4770      	bx	lr
 80126d6:	46c0      	nop			; (mov r8, r8)

080126d8 <HAL_TIM_PWM_MspDeInit>:
 80126d8:	4770      	bx	lr
 80126da:	46c0      	nop			; (mov r8, r8)

080126dc <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 80126dc:	2339      	movs	r3, #57	; 0x39
 80126de:	2202      	movs	r2, #2
{
 80126e0:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80126e2:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80126e4:	6803      	ldr	r3, [r0, #0]
 80126e6:	4a0b      	ldr	r2, [pc, #44]	; (8012714 <HAL_TIM_PWM_DeInit+0x38>)
 80126e8:	6a19      	ldr	r1, [r3, #32]
{
 80126ea:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 80126ec:	4211      	tst	r1, r2
 80126ee:	d107      	bne.n	8012700 <HAL_TIM_PWM_DeInit+0x24>
 80126f0:	6a19      	ldr	r1, [r3, #32]
 80126f2:	4a09      	ldr	r2, [pc, #36]	; (8012718 <HAL_TIM_PWM_DeInit+0x3c>)
 80126f4:	4211      	tst	r1, r2
 80126f6:	d103      	bne.n	8012700 <HAL_TIM_PWM_DeInit+0x24>
 80126f8:	2101      	movs	r1, #1
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	438a      	bics	r2, r1
 80126fe:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8012700:	0020      	movs	r0, r4
 8012702:	f7ff ffe9 	bl	80126d8 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8012706:	2300      	movs	r3, #0
 8012708:	2239      	movs	r2, #57	; 0x39
 801270a:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 801270c:	3a01      	subs	r2, #1
}
 801270e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012710:	54a3      	strb	r3, [r4, r2]
}
 8012712:	bd10      	pop	{r4, pc}
 8012714:	00001111 	.word	0x00001111
 8012718:	00000444 	.word	0x00000444

0801271c <HAL_TIM_PWM_Start>:
 801271c:	2201      	movs	r2, #1
 801271e:	408a      	lsls	r2, r1
 8012720:	6803      	ldr	r3, [r0, #0]
 8012722:	6a19      	ldr	r1, [r3, #32]
 8012724:	4391      	bics	r1, r2
 8012726:	6219      	str	r1, [r3, #32]
 8012728:	6a19      	ldr	r1, [r3, #32]
 801272a:	430a      	orrs	r2, r1
 801272c:	621a      	str	r2, [r3, #32]
 801272e:	4a0b      	ldr	r2, [pc, #44]	; (801275c <HAL_TIM_PWM_Start+0x40>)
 8012730:	4293      	cmp	r3, r2
 8012732:	d008      	beq.n	8012746 <HAL_TIM_PWM_Start+0x2a>
 8012734:	4a0a      	ldr	r2, [pc, #40]	; (8012760 <HAL_TIM_PWM_Start+0x44>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d005      	beq.n	8012746 <HAL_TIM_PWM_Start+0x2a>
 801273a:	4a0a      	ldr	r2, [pc, #40]	; (8012764 <HAL_TIM_PWM_Start+0x48>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d002      	beq.n	8012746 <HAL_TIM_PWM_Start+0x2a>
 8012740:	4a09      	ldr	r2, [pc, #36]	; (8012768 <HAL_TIM_PWM_Start+0x4c>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d104      	bne.n	8012750 <HAL_TIM_PWM_Start+0x34>
 8012746:	2280      	movs	r2, #128	; 0x80
 8012748:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801274a:	0212      	lsls	r2, r2, #8
 801274c:	430a      	orrs	r2, r1
 801274e:	645a      	str	r2, [r3, #68]	; 0x44
 8012750:	2101      	movs	r1, #1
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	2000      	movs	r0, #0
 8012756:	430a      	orrs	r2, r1
 8012758:	601a      	str	r2, [r3, #0]
 801275a:	4770      	bx	lr
 801275c:	40012c00 	.word	0x40012c00
 8012760:	40014000 	.word	0x40014000
 8012764:	40014400 	.word	0x40014400
 8012768:	40014800 	.word	0x40014800

0801276c <HAL_TIM_PWM_Stop>:
{
 801276c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 801276e:	2401      	movs	r4, #1
 8012770:	408c      	lsls	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012772:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012774:	6a1a      	ldr	r2, [r3, #32]
 8012776:	43a2      	bics	r2, r4
 8012778:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 801277a:	6a1a      	ldr	r2, [r3, #32]
 801277c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801277e:	4a15      	ldr	r2, [pc, #84]	; (80127d4 <HAL_TIM_PWM_Stop+0x68>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d019      	beq.n	80127b8 <HAL_TIM_PWM_Stop+0x4c>
 8012784:	4a14      	ldr	r2, [pc, #80]	; (80127d8 <HAL_TIM_PWM_Stop+0x6c>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d016      	beq.n	80127b8 <HAL_TIM_PWM_Stop+0x4c>
 801278a:	4a14      	ldr	r2, [pc, #80]	; (80127dc <HAL_TIM_PWM_Stop+0x70>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d013      	beq.n	80127b8 <HAL_TIM_PWM_Stop+0x4c>
 8012790:	4a13      	ldr	r2, [pc, #76]	; (80127e0 <HAL_TIM_PWM_Stop+0x74>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d010      	beq.n	80127b8 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8012796:	6a19      	ldr	r1, [r3, #32]
 8012798:	4a12      	ldr	r2, [pc, #72]	; (80127e4 <HAL_TIM_PWM_Stop+0x78>)
 801279a:	4211      	tst	r1, r2
 801279c:	d107      	bne.n	80127ae <HAL_TIM_PWM_Stop+0x42>
 801279e:	6a19      	ldr	r1, [r3, #32]
 80127a0:	4a11      	ldr	r2, [pc, #68]	; (80127e8 <HAL_TIM_PWM_Stop+0x7c>)
 80127a2:	4211      	tst	r1, r2
 80127a4:	d103      	bne.n	80127ae <HAL_TIM_PWM_Stop+0x42>
 80127a6:	2101      	movs	r1, #1
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	438a      	bics	r2, r1
 80127ac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80127ae:	2339      	movs	r3, #57	; 0x39
 80127b0:	2201      	movs	r2, #1
 80127b2:	54c2      	strb	r2, [r0, r3]
}
 80127b4:	2000      	movs	r0, #0
 80127b6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80127b8:	6a19      	ldr	r1, [r3, #32]
 80127ba:	4a0a      	ldr	r2, [pc, #40]	; (80127e4 <HAL_TIM_PWM_Stop+0x78>)
 80127bc:	4211      	tst	r1, r2
 80127be:	d1ea      	bne.n	8012796 <HAL_TIM_PWM_Stop+0x2a>
 80127c0:	6a19      	ldr	r1, [r3, #32]
 80127c2:	4a09      	ldr	r2, [pc, #36]	; (80127e8 <HAL_TIM_PWM_Stop+0x7c>)
 80127c4:	4211      	tst	r1, r2
 80127c6:	d1e6      	bne.n	8012796 <HAL_TIM_PWM_Stop+0x2a>
 80127c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127ca:	4908      	ldr	r1, [pc, #32]	; (80127ec <HAL_TIM_PWM_Stop+0x80>)
 80127cc:	400a      	ands	r2, r1
 80127ce:	645a      	str	r2, [r3, #68]	; 0x44
 80127d0:	e7e1      	b.n	8012796 <HAL_TIM_PWM_Stop+0x2a>
 80127d2:	46c0      	nop			; (mov r8, r8)
 80127d4:	40012c00 	.word	0x40012c00
 80127d8:	40014000 	.word	0x40014000
 80127dc:	40014400 	.word	0x40014400
 80127e0:	40014800 	.word	0x40014800
 80127e4:	00001111 	.word	0x00001111
 80127e8:	00000444 	.word	0x00000444
 80127ec:	ffff7fff 	.word	0xffff7fff

080127f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80127f0:	2338      	movs	r3, #56	; 0x38
{
 80127f2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80127f4:	5cc2      	ldrb	r2, [r0, r3]
 80127f6:	2a01      	cmp	r2, #1
 80127f8:	d100      	bne.n	80127fc <HAL_TIM_ConfigClockSource+0xc>
 80127fa:	e098      	b.n	801292e <HAL_TIM_ConfigClockSource+0x13e>
 80127fc:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80127fe:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8012800:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012802:	3301      	adds	r3, #1
 8012804:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8012806:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012808:	4d5c      	ldr	r5, [pc, #368]	; (801297c <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr = htim->Instance->SMCR;
 801280a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801280c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 801280e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8012810:	680b      	ldr	r3, [r1, #0]
 8012812:	2b50      	cmp	r3, #80	; 0x50
 8012814:	d100      	bne.n	8012818 <HAL_TIM_ConfigClockSource+0x28>
 8012816:	e08c      	b.n	8012932 <HAL_TIM_ConfigClockSource+0x142>
 8012818:	d828      	bhi.n	801286c <HAL_TIM_ConfigClockSource+0x7c>
 801281a:	2b20      	cmp	r3, #32
 801281c:	d100      	bne.n	8012820 <HAL_TIM_ConfigClockSource+0x30>
 801281e:	e0a1      	b.n	8012964 <HAL_TIM_ConfigClockSource+0x174>
 8012820:	d93e      	bls.n	80128a0 <HAL_TIM_ConfigClockSource+0xb0>
 8012822:	2b30      	cmp	r3, #48	; 0x30
 8012824:	d100      	bne.n	8012828 <HAL_TIM_ConfigClockSource+0x38>
 8012826:	e074      	b.n	8012912 <HAL_TIM_ConfigClockSource+0x122>
 8012828:	2b40      	cmp	r3, #64	; 0x40
 801282a:	d117      	bne.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 801282c:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801282e:	6a13      	ldr	r3, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012830:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012832:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012834:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012836:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012838:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 801283a:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801283c:	43a3      	bics	r3, r4
 801283e:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012840:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012842:	210a      	movs	r1, #10
 8012844:	438e      	bics	r6, r1
 8012846:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012848:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 801284a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 801284c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 801284e:	6211      	str	r1, [r2, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012850:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012852:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012854:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012856:	3929      	subs	r1, #41	; 0x29
 8012858:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801285a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 801285c:	2339      	movs	r3, #57	; 0x39
 801285e:	2201      	movs	r2, #1
 8012860:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8012862:	2200      	movs	r2, #0
 8012864:	3b01      	subs	r3, #1
 8012866:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8012868:	2000      	movs	r0, #0
}
 801286a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 801286c:	2480      	movs	r4, #128	; 0x80
 801286e:	0164      	lsls	r4, r4, #5
 8012870:	42a3      	cmp	r3, r4
 8012872:	d07e      	beq.n	8012972 <HAL_TIM_ConfigClockSource+0x182>
 8012874:	d91f      	bls.n	80128b6 <HAL_TIM_ConfigClockSource+0xc6>
 8012876:	2480      	movs	r4, #128	; 0x80
 8012878:	01a4      	lsls	r4, r4, #6
 801287a:	42a3      	cmp	r3, r4
 801287c:	d1ee      	bne.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 801287e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012880:	4c3f      	ldr	r4, [pc, #252]	; (8012980 <HAL_TIM_ConfigClockSource+0x190>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012882:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012884:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012886:	688b      	ldr	r3, [r1, #8]
 8012888:	68c9      	ldr	r1, [r1, #12]
 801288a:	432b      	orrs	r3, r5
 801288c:	0209      	lsls	r1, r1, #8
 801288e:	430b      	orrs	r3, r1
 8012890:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8012892:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012894:	2380      	movs	r3, #128	; 0x80
 8012896:	6891      	ldr	r1, [r2, #8]
 8012898:	01db      	lsls	r3, r3, #7
 801289a:	430b      	orrs	r3, r1
 801289c:	6093      	str	r3, [r2, #8]
    break;
 801289e:	e7dd      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d03d      	beq.n	8012920 <HAL_TIM_ConfigClockSource+0x130>
 80128a4:	2b10      	cmp	r3, #16
 80128a6:	d1d9      	bne.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr &= ~TIM_SMCR_TS;
 80128a8:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80128aa:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80128ac:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80128ae:	3959      	subs	r1, #89	; 0x59
 80128b0:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80128b2:	6093      	str	r3, [r2, #8]
}
 80128b4:	e7d2      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80128b6:	2b60      	cmp	r3, #96	; 0x60
 80128b8:	d011      	beq.n	80128de <HAL_TIM_ConfigClockSource+0xee>
 80128ba:	2b70      	cmp	r3, #112	; 0x70
 80128bc:	d1ce      	bne.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80128be:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80128c0:	4c2f      	ldr	r4, [pc, #188]	; (8012980 <HAL_TIM_ConfigClockSource+0x190>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80128c2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80128c4:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80128c6:	688b      	ldr	r3, [r1, #8]
 80128c8:	68c9      	ldr	r1, [r1, #12]
 80128ca:	432b      	orrs	r3, r5
 80128cc:	0209      	lsls	r1, r1, #8
 80128ce:	430b      	orrs	r3, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80128d0:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80128d2:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80128d4:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80128d6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80128d8:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80128da:	6093      	str	r3, [r2, #8]
    break;
 80128dc:	e7be      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80128de:	68cd      	ldr	r5, [r1, #12]
 80128e0:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80128e2:	2110      	movs	r1, #16
 80128e4:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80128e6:	4e27      	ldr	r6, [pc, #156]	; (8012984 <HAL_TIM_ConfigClockSource+0x194>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80128e8:	438b      	bics	r3, r1
 80128ea:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80128ec:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80128ee:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80128f0:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12);
 80128f2:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80128f4:	25a0      	movs	r5, #160	; 0xa0
 80128f6:	43ab      	bics	r3, r5
 80128f8:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 12);
 80128fa:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1 ;
 80128fc:	6191      	str	r1, [r2, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 80128fe:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4);
 8012900:	0123      	lsls	r3, r4, #4
 8012902:	432b      	orrs	r3, r5
  TIMx->CCER = tmpccer;
 8012904:	6213      	str	r3, [r2, #32]
   tmpsmcr = TIMx->SMCR;
 8012906:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012908:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 801290a:	3909      	subs	r1, #9
 801290c:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801290e:	6093      	str	r3, [r2, #8]
}
 8012910:	e7a4      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012912:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012914:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012916:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012918:	3939      	subs	r1, #57	; 0x39
 801291a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801291c:	6093      	str	r3, [r2, #8]
}
 801291e:	e79d      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012920:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012922:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012924:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012926:	3969      	subs	r1, #105	; 0x69
 8012928:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801292a:	6093      	str	r3, [r2, #8]
}
 801292c:	e796      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 801292e:	2002      	movs	r0, #2
 8012930:	e79b      	b.n	801286a <HAL_TIM_ConfigClockSource+0x7a>
  tmpccer = TIMx->CCER;
 8012932:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012934:	6a13      	ldr	r3, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012936:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012938:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801293a:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 801293c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801293e:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012940:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012942:	43a3      	bics	r3, r4
 8012944:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012946:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012948:	210a      	movs	r1, #10
 801294a:	438e      	bics	r6, r1
 801294c:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801294e:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8012950:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8012952:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8012954:	6211      	str	r1, [r2, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012956:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012958:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801295a:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 801295c:	3919      	subs	r1, #25
 801295e:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8012960:	6093      	str	r3, [r2, #8]
}
 8012962:	e77b      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012964:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012966:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012968:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 801296a:	3949      	subs	r1, #73	; 0x49
 801296c:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801296e:	6093      	str	r3, [r2, #8]
}
 8012970:	e774      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012972:	2107      	movs	r1, #7
 8012974:	6893      	ldr	r3, [r2, #8]
 8012976:	438b      	bics	r3, r1
 8012978:	6093      	str	r3, [r2, #8]
    break;
 801297a:	e76f      	b.n	801285c <HAL_TIM_ConfigClockSource+0x6c>
 801297c:	ffff0088 	.word	0xffff0088
 8012980:	ffff00ff 	.word	0xffff00ff
 8012984:	ffff0fff 	.word	0xffff0fff

08012988 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012988:	4a1b      	ldr	r2, [pc, #108]	; (80129f8 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 801298a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801298c:	4290      	cmp	r0, r2
 801298e:	d023      	beq.n	80129d8 <TIM_Base_SetConfig+0x50>
 8012990:	2280      	movs	r2, #128	; 0x80
 8012992:	05d2      	lsls	r2, r2, #23
 8012994:	4290      	cmp	r0, r2
 8012996:	d016      	beq.n	80129c6 <TIM_Base_SetConfig+0x3e>
 8012998:	4a18      	ldr	r2, [pc, #96]	; (80129fc <TIM_Base_SetConfig+0x74>)
 801299a:	4290      	cmp	r0, r2
 801299c:	d013      	beq.n	80129c6 <TIM_Base_SetConfig+0x3e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801299e:	4a18      	ldr	r2, [pc, #96]	; (8012a00 <TIM_Base_SetConfig+0x78>)
 80129a0:	4290      	cmp	r0, r2
 80129a2:	d014      	beq.n	80129ce <TIM_Base_SetConfig+0x46>
 80129a4:	4a17      	ldr	r2, [pc, #92]	; (8012a04 <TIM_Base_SetConfig+0x7c>)
 80129a6:	4290      	cmp	r0, r2
 80129a8:	d01a      	beq.n	80129e0 <TIM_Base_SetConfig+0x58>
 80129aa:	4a17      	ldr	r2, [pc, #92]	; (8012a08 <TIM_Base_SetConfig+0x80>)
 80129ac:	4290      	cmp	r0, r2
 80129ae:	d017      	beq.n	80129e0 <TIM_Base_SetConfig+0x58>
 80129b0:	4a16      	ldr	r2, [pc, #88]	; (8012a0c <TIM_Base_SetConfig+0x84>)
 80129b2:	4290      	cmp	r0, r2
 80129b4:	d014      	beq.n	80129e0 <TIM_Base_SetConfig+0x58>
  TIMx->CR1 = tmpcr1;
 80129b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80129b8:	688b      	ldr	r3, [r1, #8]
 80129ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80129bc:	680b      	ldr	r3, [r1, #0]
 80129be:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80129c0:	2301      	movs	r3, #1
 80129c2:	6143      	str	r3, [r0, #20]
}
 80129c4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80129c6:	2270      	movs	r2, #112	; 0x70
 80129c8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80129ca:	684a      	ldr	r2, [r1, #4]
 80129cc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80129ce:	4a10      	ldr	r2, [pc, #64]	; (8012a10 <TIM_Base_SetConfig+0x88>)
 80129d0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80129d2:	68ca      	ldr	r2, [r1, #12]
 80129d4:	4313      	orrs	r3, r2
 80129d6:	e7ee      	b.n	80129b6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80129d8:	2270      	movs	r2, #112	; 0x70
 80129da:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80129dc:	684a      	ldr	r2, [r1, #4]
 80129de:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80129e0:	4a0b      	ldr	r2, [pc, #44]	; (8012a10 <TIM_Base_SetConfig+0x88>)
 80129e2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80129e4:	68ca      	ldr	r2, [r1, #12]
 80129e6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80129e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80129ea:	688b      	ldr	r3, [r1, #8]
 80129ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80129ee:	680b      	ldr	r3, [r1, #0]
 80129f0:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80129f2:	690b      	ldr	r3, [r1, #16]
 80129f4:	6303      	str	r3, [r0, #48]	; 0x30
 80129f6:	e7e3      	b.n	80129c0 <TIM_Base_SetConfig+0x38>
 80129f8:	40012c00 	.word	0x40012c00
 80129fc:	40000400 	.word	0x40000400
 8012a00:	40002000 	.word	0x40002000
 8012a04:	40014000 	.word	0x40014000
 8012a08:	40014400 	.word	0x40014400
 8012a0c:	40014800 	.word	0x40014800
 8012a10:	fffffcff 	.word	0xfffffcff

08012a14 <HAL_TIM_Base_Init>:
{
 8012a14:	b570      	push	{r4, r5, r6, lr}
 8012a16:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012a18:	d014      	beq.n	8012a44 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012a1a:	2339      	movs	r3, #57	; 0x39
 8012a1c:	5cc3      	ldrb	r3, [r0, r3]
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00a      	beq.n	8012a3a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8012a24:	2302      	movs	r3, #2
 8012a26:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a28:	0021      	movs	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 8012a2a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a2c:	c901      	ldmia	r1!, {r0}
 8012a2e:	f7ff ffab 	bl	8012988 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012a32:	2301      	movs	r3, #1
  return HAL_OK;
 8012a34:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8012a36:	5563      	strb	r3, [r4, r5]
}
 8012a38:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012a3a:	3338      	adds	r3, #56	; 0x38
 8012a3c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012a3e:	f7ff fe19 	bl	8012674 <HAL_TIM_Base_MspInit>
 8012a42:	e7ef      	b.n	8012a24 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8012a44:	2001      	movs	r0, #1
 8012a46:	e7f7      	b.n	8012a38 <HAL_TIM_Base_Init+0x24>

08012a48 <HAL_TIM_PWM_Init>:
{
 8012a48:	b570      	push	{r4, r5, r6, lr}
 8012a4a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012a4c:	d014      	beq.n	8012a78 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012a4e:	2339      	movs	r3, #57	; 0x39
 8012a50:	5cc3      	ldrb	r3, [r0, r3]
 8012a52:	b2da      	uxtb	r2, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00a      	beq.n	8012a6e <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8012a58:	2302      	movs	r3, #2
 8012a5a:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a5c:	0021      	movs	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 8012a5e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a60:	c901      	ldmia	r1!, {r0}
 8012a62:	f7ff ff91 	bl	8012988 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012a66:	2301      	movs	r3, #1
  return HAL_OK;
 8012a68:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8012a6a:	5563      	strb	r3, [r4, r5]
}
 8012a6c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012a6e:	3338      	adds	r3, #56	; 0x38
 8012a70:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8012a72:	f7ff fe2f 	bl	80126d4 <HAL_TIM_PWM_MspInit>
 8012a76:	e7ef      	b.n	8012a58 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8012a78:	2001      	movs	r0, #1
 8012a7a:	e7f7      	b.n	8012a6c <HAL_TIM_PWM_Init+0x24>

08012a7c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a7c:	2210      	movs	r2, #16
 8012a7e:	6a03      	ldr	r3, [r0, #32]
{
 8012a80:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a82:	4393      	bics	r3, r2
 8012a84:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012a86:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a88:	4c16      	ldr	r4, [pc, #88]	; (8012ae4 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8012a8a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012a8c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a8e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8012a90:	680c      	ldr	r4, [r1, #0]
 8012a92:	0224      	lsls	r4, r4, #8
 8012a94:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8012a96:	2420      	movs	r4, #32
 8012a98:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8012a9a:	688c      	ldr	r4, [r1, #8]
 8012a9c:	0124      	lsls	r4, r4, #4
 8012a9e:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012aa0:	4c11      	ldr	r4, [pc, #68]	; (8012ae8 <TIM_OC2_SetConfig+0x6c>)
 8012aa2:	42a0      	cmp	r0, r4
 8012aa4:	d015      	beq.n	8012ad2 <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012aa6:	4c11      	ldr	r4, [pc, #68]	; (8012aec <TIM_OC2_SetConfig+0x70>)
 8012aa8:	42a0      	cmp	r0, r4
 8012aaa:	d005      	beq.n	8012ab8 <TIM_OC2_SetConfig+0x3c>
 8012aac:	4c10      	ldr	r4, [pc, #64]	; (8012af0 <TIM_OC2_SetConfig+0x74>)
 8012aae:	42a0      	cmp	r0, r4
 8012ab0:	d002      	beq.n	8012ab8 <TIM_OC2_SetConfig+0x3c>
 8012ab2:	4c10      	ldr	r4, [pc, #64]	; (8012af4 <TIM_OC2_SetConfig+0x78>)
 8012ab4:	42a0      	cmp	r0, r4
 8012ab6:	d106      	bne.n	8012ac6 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012ab8:	4e0f      	ldr	r6, [pc, #60]	; (8012af8 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012aba:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012abc:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012abe:	698b      	ldr	r3, [r1, #24]
 8012ac0:	4323      	orrs	r3, r4
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 8012ac6:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8012ac8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012aca:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8012acc:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8012ace:	6202      	str	r2, [r0, #32]
}
 8012ad0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8012ad2:	2480      	movs	r4, #128	; 0x80
 8012ad4:	43a2      	bics	r2, r4
 8012ad6:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8012ad8:	68ca      	ldr	r2, [r1, #12]
 8012ada:	0112      	lsls	r2, r2, #4
 8012adc:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8012ade:	2440      	movs	r4, #64	; 0x40
 8012ae0:	43a2      	bics	r2, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012ae2:	e7e9      	b.n	8012ab8 <TIM_OC2_SetConfig+0x3c>
 8012ae4:	ffff8cff 	.word	0xffff8cff
 8012ae8:	40012c00 	.word	0x40012c00
 8012aec:	40014000 	.word	0x40014000
 8012af0:	40014400 	.word	0x40014400
 8012af4:	40014800 	.word	0x40014800
 8012af8:	fffff3ff 	.word	0xfffff3ff

08012afc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8012afc:	2338      	movs	r3, #56	; 0x38
{
 8012afe:	b570      	push	{r4, r5, r6, lr}
 8012b00:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8012b02:	5cc2      	ldrb	r2, [r0, r3]
{
 8012b04:	0004      	movs	r4, r0
 8012b06:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8012b08:	2a01      	cmp	r2, #1
 8012b0a:	d05b      	beq.n	8012bc4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012b10:	3301      	adds	r3, #1
 8012b12:	3201      	adds	r2, #1
 8012b14:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8012b16:	2d08      	cmp	r5, #8
 8012b18:	d033      	beq.n	8012b82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8012b1a:	d81d      	bhi.n	8012b58 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8012b1c:	2d00      	cmp	r5, #0
 8012b1e:	d040      	beq.n	8012ba2 <HAL_TIM_PWM_ConfigChannel+0xa6>
 8012b20:	2d04      	cmp	r5, #4
 8012b22:	d111      	bne.n	8012b48 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012b24:	6800      	ldr	r0, [r0, #0]
 8012b26:	f7ff ffa9 	bl	8012a7c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012b2a:	2280      	movs	r2, #128	; 0x80
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	0112      	lsls	r2, r2, #4
 8012b30:	6999      	ldr	r1, [r3, #24]
 8012b32:	430a      	orrs	r2, r1
 8012b34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012b36:	699a      	ldr	r2, [r3, #24]
 8012b38:	4923      	ldr	r1, [pc, #140]	; (8012bc8 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012b3a:	400a      	ands	r2, r1
 8012b3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8012b3e:	6932      	ldr	r2, [r6, #16]
 8012b40:	6999      	ldr	r1, [r3, #24]
 8012b42:	0212      	lsls	r2, r2, #8
 8012b44:	430a      	orrs	r2, r1
 8012b46:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8012b48:	2339      	movs	r3, #57	; 0x39
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8012b4e:	2200      	movs	r2, #0
  return HAL_OK;
 8012b50:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012b52:	3b01      	subs	r3, #1
 8012b54:	54e2      	strb	r2, [r4, r3]
}
 8012b56:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8012b58:	2d0c      	cmp	r5, #12
 8012b5a:	d1f5      	bne.n	8012b48 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012b5c:	6800      	ldr	r0, [r0, #0]
 8012b5e:	f7ff fd4f 	bl	8012600 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012b62:	2280      	movs	r2, #128	; 0x80
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	0112      	lsls	r2, r2, #4
 8012b68:	69d9      	ldr	r1, [r3, #28]
 8012b6a:	430a      	orrs	r2, r1
 8012b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012b6e:	69da      	ldr	r2, [r3, #28]
 8012b70:	4915      	ldr	r1, [pc, #84]	; (8012bc8 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012b72:	400a      	ands	r2, r1
 8012b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8012b76:	6932      	ldr	r2, [r6, #16]
 8012b78:	69d9      	ldr	r1, [r3, #28]
 8012b7a:	0212      	lsls	r2, r2, #8
 8012b7c:	430a      	orrs	r2, r1
 8012b7e:	61da      	str	r2, [r3, #28]
    break;
 8012b80:	e7e2      	b.n	8012b48 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012b82:	6800      	ldr	r0, [r0, #0]
 8012b84:	f7ff fcf8 	bl	8012578 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012b88:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	69da      	ldr	r2, [r3, #28]
 8012b8e:	4315      	orrs	r5, r2
 8012b90:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012b92:	69da      	ldr	r2, [r3, #28]
 8012b94:	438a      	bics	r2, r1
 8012b96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012b98:	69da      	ldr	r2, [r3, #28]
 8012b9a:	6931      	ldr	r1, [r6, #16]
 8012b9c:	430a      	orrs	r2, r1
 8012b9e:	61da      	str	r2, [r3, #28]
    break;
 8012ba0:	e7d2      	b.n	8012b48 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012ba2:	6800      	ldr	r0, [r0, #0]
 8012ba4:	f7ff fcb0 	bl	8012508 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012ba8:	2108      	movs	r1, #8
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	699a      	ldr	r2, [r3, #24]
 8012bae:	430a      	orrs	r2, r1
 8012bb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012bb2:	699a      	ldr	r2, [r3, #24]
 8012bb4:	3904      	subs	r1, #4
 8012bb6:	438a      	bics	r2, r1
 8012bb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012bba:	699a      	ldr	r2, [r3, #24]
 8012bbc:	6931      	ldr	r1, [r6, #16]
 8012bbe:	430a      	orrs	r2, r1
 8012bc0:	619a      	str	r2, [r3, #24]
    break;
 8012bc2:	e7c1      	b.n	8012b48 <HAL_TIM_PWM_ConfigChannel+0x4c>
  __HAL_LOCK(htim);
 8012bc4:	2002      	movs	r0, #2
 8012bc6:	e7c6      	b.n	8012b56 <HAL_TIM_PWM_ConfigChannel+0x5a>
 8012bc8:	fffffbff 	.word	0xfffffbff

08012bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012bcc:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012bce:	2438      	movs	r4, #56	; 0x38
 8012bd0:	5d03      	ldrb	r3, [r0, r4]
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d019      	beq.n	8012c0a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8012bd6:	2539      	movs	r5, #57	; 0x39
 8012bd8:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012bda:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8012bdc:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012bde:	6803      	ldr	r3, [r0, #0]
 8012be0:	685a      	ldr	r2, [r3, #4]
 8012be2:	43b2      	bics	r2, r6
 8012be4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012be6:	685a      	ldr	r2, [r3, #4]
 8012be8:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012bea:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012bec:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012bee:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012bf0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012bf2:	689a      	ldr	r2, [r3, #8]
 8012bf4:	43b2      	bics	r2, r6
 8012bf6:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	430a      	orrs	r2, r1
 8012bfc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8012c02:	2300      	movs	r3, #0
 8012c04:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8012c06:	2000      	movs	r0, #0
}
 8012c08:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8012c0a:	2002      	movs	r0, #2
 8012c0c:	e7fc      	b.n	8012c08 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8012c0e:	46c0      	nop			; (mov r8, r8)

08012c10 <HAL_UART_MspDeInit>:
 8012c10:	4770      	bx	lr
 8012c12:	46c0      	nop			; (mov r8, r8)

08012c14 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8012c18:	d013      	beq.n	8012c42 <HAL_UART_DeInit+0x2e>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8012c1a:	2669      	movs	r6, #105	; 0x69
 8012c1c:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012c1e:	2101      	movs	r1, #1

  huart->Instance->CR1 = 0x0;
 8012c20:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8012c22:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012c24:	6803      	ldr	r3, [r0, #0]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	438a      	bics	r2, r1
 8012c2a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8012c2c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012c2e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012c30:	609d      	str	r5, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8012c32:	f7ff ffed 	bl	8012c10 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8012c36:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8012c38:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c3a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012c3c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012c3e:	54e5      	strb	r5, [r4, r3]
}
 8012c40:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012c42:	2001      	movs	r0, #1
 8012c44:	e7fc      	b.n	8012c40 <HAL_UART_DeInit+0x2c>
 8012c46:	46c0      	nop			; (mov r8, r8)

08012c48 <HAL_UART_Transmit_IT>:
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c48:	2369      	movs	r3, #105	; 0x69
{
 8012c4a:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c4c:	5cc4      	ldrb	r4, [r0, r3]
 8012c4e:	2c01      	cmp	r4, #1
 8012c50:	d002      	beq.n	8012c58 <HAL_UART_Transmit_IT+0x10>
 8012c52:	5cc3      	ldrb	r3, [r0, r3]
 8012c54:	2b22      	cmp	r3, #34	; 0x22
 8012c56:	d124      	bne.n	8012ca2 <HAL_UART_Transmit_IT+0x5a>
  {
    if((pData == NULL ) || (Size == 0))
 8012c58:	2900      	cmp	r1, #0
 8012c5a:	d024      	beq.n	8012ca6 <HAL_UART_Transmit_IT+0x5e>
 8012c5c:	2a00      	cmp	r2, #0
 8012c5e:	d022      	beq.n	8012ca6 <HAL_UART_Transmit_IT+0x5e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012c60:	2368      	movs	r3, #104	; 0x68
 8012c62:	5cc4      	ldrb	r4, [r0, r3]
 8012c64:	2c01      	cmp	r4, #1
 8012c66:	d01c      	beq.n	8012ca2 <HAL_UART_Transmit_IT+0x5a>
 8012c68:	2401      	movs	r4, #1
 8012c6a:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8012c6c:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 8012c6e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012c70:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012c72:	3302      	adds	r3, #2
 8012c74:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c76:	2300      	movs	r3, #0
 8012c78:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012c7a:	3369      	adds	r3, #105	; 0x69
 8012c7c:	5cc2      	ldrb	r2, [r0, r3]
 8012c7e:	2a22      	cmp	r2, #34	; 0x22
 8012c80:	d013      	beq.n	8012caa <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012c82:	2212      	movs	r2, #18
 8012c84:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012c86:	2101      	movs	r1, #1
 8012c88:	6803      	ldr	r3, [r0, #0]
 8012c8a:	689a      	ldr	r2, [r3, #8]
 8012c8c:	430a      	orrs	r2, r1
 8012c8e:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012c90:	2100      	movs	r1, #0
 8012c92:	2268      	movs	r2, #104	; 0x68
 8012c94:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);

    return HAL_OK;
 8012c96:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	3180      	adds	r1, #128	; 0x80
 8012c9c:	430a      	orrs	r2, r1
 8012c9e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012ca0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8012ca2:	2002      	movs	r0, #2
 8012ca4:	e7fc      	b.n	8012ca0 <HAL_UART_Transmit_IT+0x58>
      return HAL_ERROR;
 8012ca6:	2001      	movs	r0, #1
 8012ca8:	e7fa      	b.n	8012ca0 <HAL_UART_Transmit_IT+0x58>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012caa:	3210      	adds	r2, #16
 8012cac:	54c2      	strb	r2, [r0, r3]
 8012cae:	e7ea      	b.n	8012c86 <HAL_UART_Transmit_IT+0x3e>

08012cb0 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012cb0:	2369      	movs	r3, #105	; 0x69
{
 8012cb2:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012cb4:	5cc4      	ldrb	r4, [r0, r3]
 8012cb6:	2c01      	cmp	r4, #1
 8012cb8:	d002      	beq.n	8012cc0 <HAL_UART_Receive_IT+0x10>
 8012cba:	5cc3      	ldrb	r3, [r0, r3]
 8012cbc:	2b12      	cmp	r3, #18
 8012cbe:	d134      	bne.n	8012d2a <HAL_UART_Receive_IT+0x7a>
  {
    if((pData == NULL ) || (Size == 0))
 8012cc0:	2900      	cmp	r1, #0
 8012cc2:	d034      	beq.n	8012d2e <HAL_UART_Receive_IT+0x7e>
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	d032      	beq.n	8012d2e <HAL_UART_Receive_IT+0x7e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012cc8:	2368      	movs	r3, #104	; 0x68
 8012cca:	5cc4      	ldrb	r4, [r0, r3]
 8012ccc:	2c01      	cmp	r4, #1
 8012cce:	d02c      	beq.n	8012d2a <HAL_UART_Receive_IT+0x7a>
 8012cd0:	2401      	movs	r4, #1
 8012cd2:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8012cd4:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8012cd6:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012cd8:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012cda:	3302      	adds	r3, #2
 8012cdc:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012cde:	2280      	movs	r2, #128	; 0x80
 8012ce0:	6883      	ldr	r3, [r0, #8]
 8012ce2:	0152      	lsls	r2, r2, #5
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d02b      	beq.n	8012d40 <HAL_UART_Receive_IT+0x90>
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d022      	beq.n	8012d32 <HAL_UART_Receive_IT+0x82>
 8012cec:	2280      	movs	r2, #128	; 0x80
 8012cee:	0552      	lsls	r2, r2, #21
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d033      	beq.n	8012d5c <HAL_UART_Receive_IT+0xac>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012cf8:	3369      	adds	r3, #105	; 0x69
 8012cfa:	5cc2      	ldrb	r2, [r0, r3]
 8012cfc:	2a12      	cmp	r2, #18
 8012cfe:	d026      	beq.n	8012d4e <HAL_UART_Receive_IT+0x9e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012d00:	2222      	movs	r2, #34	; 0x22
 8012d02:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012d04:	2280      	movs	r2, #128	; 0x80
 8012d06:	6803      	ldr	r3, [r0, #0]
 8012d08:	0052      	lsls	r2, r2, #1
 8012d0a:	6819      	ldr	r1, [r3, #0]
 8012d0c:	430a      	orrs	r2, r1

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012d0e:	2101      	movs	r1, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012d10:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012d12:	689a      	ldr	r2, [r3, #8]
 8012d14:	430a      	orrs	r2, r1
 8012d16:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012d18:	2100      	movs	r1, #0
 8012d1a:	2268      	movs	r2, #104	; 0x68
 8012d1c:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	3120      	adds	r1, #32
 8012d22:	430a      	orrs	r2, r1

    return HAL_OK;
 8012d24:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012d26:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8012d28:	e000      	b.n	8012d2c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8012d2a:	2002      	movs	r0, #2
  }
}
 8012d2c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8012d2e:	2001      	movs	r0, #1
 8012d30:	e7fc      	b.n	8012d2c <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8012d32:	6903      	ldr	r3, [r0, #16]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00d      	beq.n	8012d54 <HAL_UART_Receive_IT+0xa4>
 8012d38:	235c      	movs	r3, #92	; 0x5c
 8012d3a:	227f      	movs	r2, #127	; 0x7f
 8012d3c:	52c2      	strh	r2, [r0, r3]
 8012d3e:	e7d9      	b.n	8012cf4 <HAL_UART_Receive_IT+0x44>
 8012d40:	6903      	ldr	r3, [r0, #16]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <HAL_UART_Receive_IT+0xa4>
 8012d46:	4a09      	ldr	r2, [pc, #36]	; (8012d6c <HAL_UART_Receive_IT+0xbc>)
 8012d48:	335c      	adds	r3, #92	; 0x5c
 8012d4a:	52c2      	strh	r2, [r0, r3]
 8012d4c:	e7d2      	b.n	8012cf4 <HAL_UART_Receive_IT+0x44>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d4e:	3220      	adds	r2, #32
 8012d50:	54c2      	strb	r2, [r0, r3]
 8012d52:	e7d7      	b.n	8012d04 <HAL_UART_Receive_IT+0x54>
    UART_MASK_COMPUTATION(huart);
 8012d54:	235c      	movs	r3, #92	; 0x5c
 8012d56:	22ff      	movs	r2, #255	; 0xff
 8012d58:	52c2      	strh	r2, [r0, r3]
 8012d5a:	e7cb      	b.n	8012cf4 <HAL_UART_Receive_IT+0x44>
 8012d5c:	6903      	ldr	r3, [r0, #16]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d0ea      	beq.n	8012d38 <HAL_UART_Receive_IT+0x88>
 8012d62:	235c      	movs	r3, #92	; 0x5c
 8012d64:	223f      	movs	r2, #63	; 0x3f
 8012d66:	52c2      	strh	r2, [r0, r3]
 8012d68:	e7c4      	b.n	8012cf4 <HAL_UART_Receive_IT+0x44>
 8012d6a:	46c0      	nop			; (mov r8, r8)
 8012d6c:	000001ff 	.word	0x000001ff

08012d70 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d70:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012d72:	2269      	movs	r2, #105	; 0x69
{
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012d78:	5c81      	ldrb	r1, [r0, r2]
{
 8012d7a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012d7c:	2901      	cmp	r1, #1
 8012d7e:	d002      	beq.n	8012d86 <HAL_UART_Receive_DMA+0x16>
 8012d80:	5c82      	ldrb	r2, [r0, r2]
 8012d82:	2a12      	cmp	r2, #18
 8012d84:	d12a      	bne.n	8012ddc <HAL_UART_Receive_DMA+0x6c>
  {
    if((pData == NULL ) || (Size == 0))
 8012d86:	2d00      	cmp	r5, #0
 8012d88:	d02a      	beq.n	8012de0 <HAL_UART_Receive_DMA+0x70>
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d028      	beq.n	8012de0 <HAL_UART_Receive_DMA+0x70>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012d8e:	2268      	movs	r2, #104	; 0x68
 8012d90:	5ca1      	ldrb	r1, [r4, r2]
 8012d92:	2901      	cmp	r1, #1
 8012d94:	d022      	beq.n	8012ddc <HAL_UART_Receive_DMA+0x6c>
 8012d96:	2101      	movs	r1, #1
 8012d98:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8012d9a:	3a10      	subs	r2, #16
    huart->pRxBuffPtr = pData;
 8012d9c:	6565      	str	r5, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012d9e:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012da0:	2200      	movs	r2, #0
 8012da2:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012da4:	3269      	adds	r2, #105	; 0x69
 8012da6:	5ca1      	ldrb	r1, [r4, r2]
 8012da8:	2912      	cmp	r1, #18
 8012daa:	d01b      	beq.n	8012de4 <HAL_UART_Receive_DMA+0x74>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012dac:	2122      	movs	r1, #34	; 0x22
 8012dae:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012db0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012db2:	4a0e      	ldr	r2, [pc, #56]	; (8012dec <HAL_UART_Receive_DMA+0x7c>)
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012db4:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012db6:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012db8:	4a0d      	ldr	r2, [pc, #52]	; (8012df0 <HAL_UART_Receive_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012dba:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012dbc:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012dbe:	4a0d      	ldr	r2, [pc, #52]	; (8012df4 <HAL_UART_Receive_DMA+0x84>)
 8012dc0:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012dc2:	002a      	movs	r2, r5
 8012dc4:	f7fd fbe8 	bl	8010598 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012dc8:	2140      	movs	r1, #64	; 0x40
 8012dca:	6822      	ldr	r2, [r4, #0]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);

    return HAL_OK;
 8012dcc:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012dce:	6893      	ldr	r3, [r2, #8]
 8012dd0:	430b      	orrs	r3, r1
 8012dd2:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012dd4:	2368      	movs	r3, #104	; 0x68
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	54e2      	strb	r2, [r4, r3]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012dda:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8012ddc:	2002      	movs	r0, #2
 8012dde:	e7fc      	b.n	8012dda <HAL_UART_Receive_DMA+0x6a>
      return HAL_ERROR;
 8012de0:	2001      	movs	r0, #1
 8012de2:	e7fa      	b.n	8012dda <HAL_UART_Receive_DMA+0x6a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012de4:	3120      	adds	r1, #32
 8012de6:	54a1      	strb	r1, [r4, r2]
 8012de8:	e7e2      	b.n	8012db0 <HAL_UART_Receive_DMA+0x40>
 8012dea:	46c0      	nop			; (mov r8, r8)
 8012dec:	08012df9 	.word	0x08012df9
 8012df0:	08012e39 	.word	0x08012e39
 8012df4:	08012e45 	.word	0x08012e45

08012df8 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012df8:	2220      	movs	r2, #32
{
 8012dfa:	0003      	movs	r3, r0
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012dfc:	0011      	movs	r1, r2
 8012dfe:	681b      	ldr	r3, [r3, #0]
{
 8012e00:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012e02:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012e04:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012e06:	4019      	ands	r1, r3
 8012e08:	421a      	tst	r2, r3
 8012e0a:	d10c      	bne.n	8012e26 <UART_DMAReceiveCplt+0x2e>
  {
    huart->RxXferCount = 0;
 8012e0c:	235a      	movs	r3, #90	; 0x5a
 8012e0e:	52c1      	strh	r1, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012e10:	2140      	movs	r1, #64	; 0x40
 8012e12:	6802      	ldr	r2, [r0, #0]
 8012e14:	6893      	ldr	r3, [r2, #8]
 8012e16:	438b      	bics	r3, r1
 8012e18:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012e1a:	2369      	movs	r3, #105	; 0x69
 8012e1c:	5cc2      	ldrb	r2, [r0, r3]
 8012e1e:	2a32      	cmp	r2, #50	; 0x32
 8012e20:	d004      	beq.n	8012e2c <UART_DMAReceiveCplt+0x34>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012e22:	2201      	movs	r2, #1
 8012e24:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012e26:	f7fa f9bf 	bl	800d1a8 <HAL_UART_RxCpltCallback>
}
 8012e2a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012e2c:	3a20      	subs	r2, #32
 8012e2e:	54c2      	strb	r2, [r0, r3]
 8012e30:	e7f9      	b.n	8012e26 <UART_DMAReceiveCplt+0x2e>
 8012e32:	46c0      	nop			; (mov r8, r8)

08012e34 <HAL_UART_RxHalfCpltCallback>:
 8012e34:	4770      	bx	lr
 8012e36:	46c0      	nop			; (mov r8, r8)

08012e38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012e38:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012e3c:	f7ff fffa 	bl	8012e34 <HAL_UART_RxHalfCpltCallback>
}
 8012e40:	bd10      	pop	{r4, pc}
 8012e42:	46c0      	nop			; (mov r8, r8)

08012e44 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012e48:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8012e4a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8012e4c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012e4e:	3a08      	subs	r2, #8
 8012e50:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012e52:	3369      	adds	r3, #105	; 0x69
 8012e54:	3a51      	subs	r2, #81	; 0x51
 8012e56:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012e58:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012e5a:	320f      	adds	r2, #15
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012e60:	f7fa f97e 	bl	800d160 <HAL_UART_ErrorCallback>
}
 8012e64:	bd10      	pop	{r4, pc}
 8012e66:	46c0      	nop			; (mov r8, r8)

08012e68 <UART_SetConfig>:
{
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012e6c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012e6e:	69c1      	ldr	r1, [r0, #28]
 8012e70:	6883      	ldr	r3, [r0, #8]
 8012e72:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012e74:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012e76:	4303      	orrs	r3, r0
 8012e78:	6960      	ldr	r0, [r4, #20]
 8012e7a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012e7c:	4862      	ldr	r0, [pc, #392]	; (8013008 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012e7e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012e80:	4002      	ands	r2, r0
 8012e82:	4313      	orrs	r3, r2
 8012e84:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012e86:	686b      	ldr	r3, [r5, #4]
 8012e88:	4a60      	ldr	r2, [pc, #384]	; (801300c <UART_SetConfig+0x1a4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012e8a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012e8c:	4013      	ands	r3, r2
 8012e8e:	68e2      	ldr	r2, [r4, #12]
 8012e90:	4313      	orrs	r3, r2
 8012e92:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012e94:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012e96:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012e98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012e9a:	485d      	ldr	r0, [pc, #372]	; (8013010 <UART_SetConfig+0x1a8>)
 8012e9c:	4002      	ands	r2, r0
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012ea2:	4b5c      	ldr	r3, [pc, #368]	; (8013014 <UART_SetConfig+0x1ac>)
 8012ea4:	429d      	cmp	r5, r3
 8012ea6:	d032      	beq.n	8012f0e <UART_SetConfig+0xa6>
 8012ea8:	4b5b      	ldr	r3, [pc, #364]	; (8013018 <UART_SetConfig+0x1b0>)
 8012eaa:	429d      	cmp	r5, r3
 8012eac:	d018      	beq.n	8012ee0 <UART_SetConfig+0x78>
 8012eae:	4b5b      	ldr	r3, [pc, #364]	; (801301c <UART_SetConfig+0x1b4>)
 8012eb0:	429d      	cmp	r5, r3
 8012eb2:	d100      	bne.n	8012eb6 <UART_SetConfig+0x4e>
 8012eb4:	e085      	b.n	8012fc2 <UART_SetConfig+0x15a>
 8012eb6:	4b5a      	ldr	r3, [pc, #360]	; (8013020 <UART_SetConfig+0x1b8>)
 8012eb8:	429d      	cmp	r5, r3
 8012eba:	d02f      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012ebc:	4b59      	ldr	r3, [pc, #356]	; (8013024 <UART_SetConfig+0x1bc>)
 8012ebe:	429d      	cmp	r5, r3
 8012ec0:	d02c      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012ec2:	4b59      	ldr	r3, [pc, #356]	; (8013028 <UART_SetConfig+0x1c0>)
 8012ec4:	429d      	cmp	r5, r3
 8012ec6:	d029      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012ec8:	4b58      	ldr	r3, [pc, #352]	; (801302c <UART_SetConfig+0x1c4>)
 8012eca:	429d      	cmp	r5, r3
 8012ecc:	d026      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012ece:	4b58      	ldr	r3, [pc, #352]	; (8013030 <UART_SetConfig+0x1c8>)
 8012ed0:	429d      	cmp	r5, r3
 8012ed2:	d023      	beq.n	8012f1c <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ed4:	2380      	movs	r3, #128	; 0x80
 8012ed6:	021b      	lsls	r3, r3, #8
 8012ed8:	4299      	cmp	r1, r3
 8012eda:	d051      	beq.n	8012f80 <UART_SetConfig+0x118>
    switch (clocksource)
 8012edc:	2001      	movs	r0, #1
 8012ede:	e02b      	b.n	8012f38 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012ee0:	22c0      	movs	r2, #192	; 0xc0
 8012ee2:	2080      	movs	r0, #128	; 0x80
 8012ee4:	4b53      	ldr	r3, [pc, #332]	; (8013034 <UART_SetConfig+0x1cc>)
 8012ee6:	0292      	lsls	r2, r2, #10
 8012ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eea:	0280      	lsls	r0, r0, #10
 8012eec:	4013      	ands	r3, r2
 8012eee:	4283      	cmp	r3, r0
 8012ef0:	d04a      	beq.n	8012f88 <UART_SetConfig+0x120>
 8012ef2:	d822      	bhi.n	8012f3a <UART_SetConfig+0xd2>
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d011      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012ef8:	2280      	movs	r2, #128	; 0x80
 8012efa:	0252      	lsls	r2, r2, #9
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d1e9      	bne.n	8012ed4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f00:	2380      	movs	r3, #128	; 0x80
 8012f02:	021b      	lsls	r3, r3, #8
 8012f04:	4299      	cmp	r1, r3
 8012f06:	d051      	beq.n	8012fac <UART_SetConfig+0x144>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012f08:	f7fe ffa4 	bl	8011e54 <HAL_RCC_GetSysClockFreq>
 8012f0c:	e00c      	b.n	8012f28 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012f0e:	4b49      	ldr	r3, [pc, #292]	; (8013034 <UART_SetConfig+0x1cc>)
 8012f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f12:	2303      	movs	r3, #3
 8012f14:	4013      	ands	r3, r2
 8012f16:	3b01      	subs	r3, #1
 8012f18:	2b02      	cmp	r3, #2
 8012f1a:	d917      	bls.n	8012f4c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f1c:	2380      	movs	r3, #128	; 0x80
 8012f1e:	021b      	lsls	r3, r3, #8
 8012f20:	4299      	cmp	r1, r3
 8012f22:	d065      	beq.n	8012ff0 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012f24:	f7fe fff2 	bl	8011f0c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012f28:	6825      	ldr	r5, [r4, #0]
 8012f2a:	6861      	ldr	r1, [r4, #4]
 8012f2c:	f7ed f910 	bl	8000150 <__udivsi3>
 8012f30:	0400      	lsls	r0, r0, #16
 8012f32:	0c00      	lsrs	r0, r0, #16
 8012f34:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f36:	2000      	movs	r0, #0
}
 8012f38:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d1ca      	bne.n	8012ed4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f3e:	2380      	movs	r3, #128	; 0x80
 8012f40:	021b      	lsls	r3, r3, #8
 8012f42:	4299      	cmp	r1, r3
 8012f44:	d03a      	beq.n	8012fbc <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012f46:	6861      	ldr	r1, [r4, #4]
 8012f48:	483b      	ldr	r0, [pc, #236]	; (8013038 <UART_SetConfig+0x1d0>)
 8012f4a:	e7ef      	b.n	8012f2c <UART_SetConfig+0xc4>
 8012f4c:	4a3b      	ldr	r2, [pc, #236]	; (801303c <UART_SetConfig+0x1d4>)
 8012f4e:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f50:	2280      	movs	r2, #128	; 0x80
 8012f52:	0212      	lsls	r2, r2, #8
 8012f54:	4291      	cmp	r1, r2
 8012f56:	d00c      	beq.n	8012f72 <UART_SetConfig+0x10a>
    switch (clocksource)
 8012f58:	2b04      	cmp	r3, #4
 8012f5a:	d0d5      	beq.n	8012f08 <UART_SetConfig+0xa0>
 8012f5c:	d943      	bls.n	8012fe6 <UART_SetConfig+0x17e>
 8012f5e:	2b08      	cmp	r3, #8
 8012f60:	d1bc      	bne.n	8012edc <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012f62:	2080      	movs	r0, #128	; 0x80
 8012f64:	6861      	ldr	r1, [r4, #4]
 8012f66:	0200      	lsls	r0, r0, #8
 8012f68:	f7ed f8f2 	bl	8000150 <__udivsi3>
 8012f6c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f6e:	2000      	movs	r0, #0
        break;
 8012f70:	e7e2      	b.n	8012f38 <UART_SetConfig+0xd0>
    switch (clocksource)
 8012f72:	2b04      	cmp	r3, #4
 8012f74:	d01a      	beq.n	8012fac <UART_SetConfig+0x144>
 8012f76:	d843      	bhi.n	8013000 <UART_SetConfig+0x198>
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d039      	beq.n	8012ff0 <UART_SetConfig+0x188>
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d01d      	beq.n	8012fbc <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f80:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8012f82:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8012f84:	60eb      	str	r3, [r5, #12]
 8012f86:	e7d7      	b.n	8012f38 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f88:	2380      	movs	r3, #128	; 0x80
 8012f8a:	021b      	lsls	r3, r3, #8
 8012f8c:	4299      	cmp	r1, r3
 8012f8e:	d1e8      	bne.n	8012f62 <UART_SetConfig+0xfa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012f90:	2080      	movs	r0, #128	; 0x80
 8012f92:	6861      	ldr	r1, [r4, #4]
 8012f94:	0240      	lsls	r0, r0, #9
 8012f96:	f7ed f8db 	bl	8000150 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0;
 8012f9a:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012f9c:	0703      	lsls	r3, r0, #28
 8012f9e:	0f5b      	lsrs	r3, r3, #29
    brrtemp = usartdiv & 0xFFF0;
 8012fa0:	4390      	bics	r0, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012fa2:	4303      	orrs	r3, r0
    huart->Instance->BRR = brrtemp;
 8012fa4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012fa6:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012fa8:	60eb      	str	r3, [r5, #12]
 8012faa:	e7c5      	b.n	8012f38 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012fac:	f7fe ff52 	bl	8011e54 <HAL_RCC_GetSysClockFreq>
 8012fb0:	6861      	ldr	r1, [r4, #4]
 8012fb2:	0040      	lsls	r0, r0, #1
 8012fb4:	f7ed f8cc 	bl	8000150 <__udivsi3>
    huart->Instance->BRR = brrtemp;
 8012fb8:	6825      	ldr	r5, [r4, #0]
 8012fba:	e7ee      	b.n	8012f9a <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012fbc:	6861      	ldr	r1, [r4, #4]
 8012fbe:	4820      	ldr	r0, [pc, #128]	; (8013040 <UART_SetConfig+0x1d8>)
 8012fc0:	e7e9      	b.n	8012f96 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012fc2:	22c0      	movs	r2, #192	; 0xc0
 8012fc4:	2080      	movs	r0, #128	; 0x80
 8012fc6:	4b1b      	ldr	r3, [pc, #108]	; (8013034 <UART_SetConfig+0x1cc>)
 8012fc8:	0312      	lsls	r2, r2, #12
 8012fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fcc:	0300      	lsls	r0, r0, #12
 8012fce:	4013      	ands	r3, r2
 8012fd0:	4283      	cmp	r3, r0
 8012fd2:	d0d9      	beq.n	8012f88 <UART_SetConfig+0x120>
 8012fd4:	d8b1      	bhi.n	8012f3a <UART_SetConfig+0xd2>
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d0a0      	beq.n	8012f1c <UART_SetConfig+0xb4>
 8012fda:	2280      	movs	r2, #128	; 0x80
 8012fdc:	02d2      	lsls	r2, r2, #11
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d100      	bne.n	8012fe4 <UART_SetConfig+0x17c>
 8012fe2:	e78d      	b.n	8012f00 <UART_SetConfig+0x98>
 8012fe4:	e776      	b.n	8012ed4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d09c      	beq.n	8012f24 <UART_SetConfig+0xbc>
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d0ab      	beq.n	8012f46 <UART_SetConfig+0xde>
 8012fee:	e775      	b.n	8012edc <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012ff0:	f7fe ff8c 	bl	8011f0c <HAL_RCC_GetPCLK1Freq>
 8012ff4:	6861      	ldr	r1, [r4, #4]
 8012ff6:	0040      	lsls	r0, r0, #1
 8012ff8:	f7ed f8aa 	bl	8000150 <__udivsi3>
    huart->Instance->BRR = brrtemp;
 8012ffc:	6825      	ldr	r5, [r4, #0]
 8012ffe:	e7cc      	b.n	8012f9a <UART_SetConfig+0x132>
    switch (clocksource)
 8013000:	2b08      	cmp	r3, #8
 8013002:	d0c5      	beq.n	8012f90 <UART_SetConfig+0x128>
 8013004:	e7bc      	b.n	8012f80 <UART_SetConfig+0x118>
 8013006:	46c0      	nop			; (mov r8, r8)
 8013008:	efff69f3 	.word	0xefff69f3
 801300c:	ffffcfff 	.word	0xffffcfff
 8013010:	fffff4ff 	.word	0xfffff4ff
 8013014:	40013800 	.word	0x40013800
 8013018:	40004400 	.word	0x40004400
 801301c:	40004800 	.word	0x40004800
 8013020:	40004c00 	.word	0x40004c00
 8013024:	40005000 	.word	0x40005000
 8013028:	40011400 	.word	0x40011400
 801302c:	40011800 	.word	0x40011800
 8013030:	40011c00 	.word	0x40011c00
 8013034:	40021000 	.word	0x40021000
 8013038:	007a1200 	.word	0x007a1200
 801303c:	0801a354 	.word	0x0801a354
 8013040:	00f42400 	.word	0x00f42400

08013044 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013044:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8013046:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013048:	07da      	lsls	r2, r3, #31
 801304a:	d506      	bpl.n	801305a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801304c:	6801      	ldr	r1, [r0, #0]
 801304e:	4c28      	ldr	r4, [pc, #160]	; (80130f0 <UART_AdvFeatureConfig+0xac>)
 8013050:	684a      	ldr	r2, [r1, #4]
 8013052:	4022      	ands	r2, r4
 8013054:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013056:	4322      	orrs	r2, r4
 8013058:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801305a:	079a      	lsls	r2, r3, #30
 801305c:	d506      	bpl.n	801306c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801305e:	6801      	ldr	r1, [r0, #0]
 8013060:	4c24      	ldr	r4, [pc, #144]	; (80130f4 <UART_AdvFeatureConfig+0xb0>)
 8013062:	684a      	ldr	r2, [r1, #4]
 8013064:	4022      	ands	r2, r4
 8013066:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8013068:	4322      	orrs	r2, r4
 801306a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801306c:	075a      	lsls	r2, r3, #29
 801306e:	d506      	bpl.n	801307e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013070:	6801      	ldr	r1, [r0, #0]
 8013072:	4c21      	ldr	r4, [pc, #132]	; (80130f8 <UART_AdvFeatureConfig+0xb4>)
 8013074:	684a      	ldr	r2, [r1, #4]
 8013076:	4022      	ands	r2, r4
 8013078:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801307a:	4322      	orrs	r2, r4
 801307c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801307e:	071a      	lsls	r2, r3, #28
 8013080:	d506      	bpl.n	8013090 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013082:	6801      	ldr	r1, [r0, #0]
 8013084:	4c1d      	ldr	r4, [pc, #116]	; (80130fc <UART_AdvFeatureConfig+0xb8>)
 8013086:	684a      	ldr	r2, [r1, #4]
 8013088:	4022      	ands	r2, r4
 801308a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801308c:	4322      	orrs	r2, r4
 801308e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013090:	06da      	lsls	r2, r3, #27
 8013092:	d506      	bpl.n	80130a2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013094:	6801      	ldr	r1, [r0, #0]
 8013096:	4c1a      	ldr	r4, [pc, #104]	; (8013100 <UART_AdvFeatureConfig+0xbc>)
 8013098:	688a      	ldr	r2, [r1, #8]
 801309a:	4022      	ands	r2, r4
 801309c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801309e:	4322      	orrs	r2, r4
 80130a0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80130a2:	069a      	lsls	r2, r3, #26
 80130a4:	d506      	bpl.n	80130b4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80130a6:	6801      	ldr	r1, [r0, #0]
 80130a8:	4c16      	ldr	r4, [pc, #88]	; (8013104 <UART_AdvFeatureConfig+0xc0>)
 80130aa:	688a      	ldr	r2, [r1, #8]
 80130ac:	4022      	ands	r2, r4
 80130ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80130b0:	4322      	orrs	r2, r4
 80130b2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80130b4:	065a      	lsls	r2, r3, #25
 80130b6:	d50a      	bpl.n	80130ce <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80130b8:	6801      	ldr	r1, [r0, #0]
 80130ba:	4d13      	ldr	r5, [pc, #76]	; (8013108 <UART_AdvFeatureConfig+0xc4>)
 80130bc:	684a      	ldr	r2, [r1, #4]
 80130be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80130c0:	402a      	ands	r2, r5
 80130c2:	4322      	orrs	r2, r4
 80130c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80130c6:	2280      	movs	r2, #128	; 0x80
 80130c8:	0352      	lsls	r2, r2, #13
 80130ca:	4294      	cmp	r4, r2
 80130cc:	d009      	beq.n	80130e2 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80130ce:	061b      	lsls	r3, r3, #24
 80130d0:	d506      	bpl.n	80130e0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80130d2:	6802      	ldr	r2, [r0, #0]
 80130d4:	490d      	ldr	r1, [pc, #52]	; (801310c <UART_AdvFeatureConfig+0xc8>)
 80130d6:	6853      	ldr	r3, [r2, #4]
 80130d8:	400b      	ands	r3, r1
 80130da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80130dc:	430b      	orrs	r3, r1
 80130de:	6053      	str	r3, [r2, #4]
}
 80130e0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80130e2:	684a      	ldr	r2, [r1, #4]
 80130e4:	4c0a      	ldr	r4, [pc, #40]	; (8013110 <UART_AdvFeatureConfig+0xcc>)
 80130e6:	4022      	ands	r2, r4
 80130e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80130ea:	4322      	orrs	r2, r4
 80130ec:	604a      	str	r2, [r1, #4]
 80130ee:	e7ee      	b.n	80130ce <UART_AdvFeatureConfig+0x8a>
 80130f0:	fffdffff 	.word	0xfffdffff
 80130f4:	fffeffff 	.word	0xfffeffff
 80130f8:	fffbffff 	.word	0xfffbffff
 80130fc:	ffff7fff 	.word	0xffff7fff
 8013100:	ffffefff 	.word	0xffffefff
 8013104:	ffffdfff 	.word	0xffffdfff
 8013108:	ffefffff 	.word	0xffefffff
 801310c:	fff7ffff 	.word	0xfff7ffff
 8013110:	ff9fffff 	.word	0xff9fffff

08013114 <UART_WaitOnFlagUntilTimeout>:
{
 8013114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013116:	46c6      	mov	lr, r8
 8013118:	4690      	mov	r8, r2
 801311a:	b500      	push	{lr}
 801311c:	001d      	movs	r5, r3
 801311e:	0006      	movs	r6, r0
 8013120:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8013122:	f7fc fd51 	bl	800fbc8 <HAL_GetTick>
  if(Status == RESET)
 8013126:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8013128:	0007      	movs	r7, r0
  if(Status == RESET)
 801312a:	2b00      	cmp	r3, #0
 801312c:	d112      	bne.n	8013154 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801312e:	6833      	ldr	r3, [r6, #0]
 8013130:	e001      	b.n	8013136 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8013132:	1c6a      	adds	r2, r5, #1
 8013134:	d117      	bne.n	8013166 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013136:	69da      	ldr	r2, [r3, #28]
 8013138:	4022      	ands	r2, r4
 801313a:	42a2      	cmp	r2, r4
 801313c:	d1f9      	bne.n	8013132 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801313e:	2000      	movs	r0, #0
}
 8013140:	bc80      	pop	{r7}
 8013142:	46b8      	mov	r8, r7
 8013144:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013146:	2d00      	cmp	r5, #0
 8013148:	d015      	beq.n	8013176 <UART_WaitOnFlagUntilTimeout+0x62>
 801314a:	f7fc fd3d 	bl	800fbc8 <HAL_GetTick>
 801314e:	1bc0      	subs	r0, r0, r7
 8013150:	42a8      	cmp	r0, r5
 8013152:	d80f      	bhi.n	8013174 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013154:	6833      	ldr	r3, [r6, #0]
 8013156:	e001      	b.n	801315c <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8013158:	1c6a      	adds	r2, r5, #1
 801315a:	d1f4      	bne.n	8013146 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801315c:	69da      	ldr	r2, [r3, #28]
 801315e:	4022      	ands	r2, r4
 8013160:	42a2      	cmp	r2, r4
 8013162:	d0f9      	beq.n	8013158 <UART_WaitOnFlagUntilTimeout+0x44>
 8013164:	e7eb      	b.n	801313e <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013166:	2d00      	cmp	r5, #0
 8013168:	d005      	beq.n	8013176 <UART_WaitOnFlagUntilTimeout+0x62>
 801316a:	f7fc fd2d 	bl	800fbc8 <HAL_GetTick>
 801316e:	1bc0      	subs	r0, r0, r7
 8013170:	42a8      	cmp	r0, r5
 8013172:	d9dc      	bls.n	801312e <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013174:	6833      	ldr	r3, [r6, #0]
 8013176:	2180      	movs	r1, #128	; 0x80
 8013178:	681a      	ldr	r2, [r3, #0]
          return HAL_TIMEOUT;
 801317a:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801317c:	438a      	bics	r2, r1
 801317e:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	3960      	subs	r1, #96	; 0x60
 8013184:	438a      	bics	r2, r1
 8013186:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4907      	ldr	r1, [pc, #28]	; (80131a8 <UART_WaitOnFlagUntilTimeout+0x94>)
 801318c:	400a      	ands	r2, r1
 801318e:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013190:	689a      	ldr	r2, [r3, #8]
 8013192:	3103      	adds	r1, #3
 8013194:	31ff      	adds	r1, #255	; 0xff
 8013196:	438a      	bics	r2, r1
 8013198:	609a      	str	r2, [r3, #8]
          huart->State = HAL_UART_STATE_READY;
 801319a:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 801319c:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801319e:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80131a0:	3b01      	subs	r3, #1
 80131a2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80131a4:	e7cc      	b.n	8013140 <UART_WaitOnFlagUntilTimeout+0x2c>
 80131a6:	46c0      	nop			; (mov r8, r8)
 80131a8:	fffffeff 	.word	0xfffffeff

080131ac <HAL_UART_Transmit>:
{
 80131ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ae:	464f      	mov	r7, r9
 80131b0:	4646      	mov	r6, r8
 80131b2:	46d6      	mov	lr, sl
 80131b4:	001c      	movs	r4, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80131b6:	2369      	movs	r3, #105	; 0x69
{
 80131b8:	b5c0      	push	{r6, r7, lr}
 80131ba:	000f      	movs	r7, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80131bc:	5cc1      	ldrb	r1, [r0, r3]
{
 80131be:	0006      	movs	r6, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80131c0:	2901      	cmp	r1, #1
 80131c2:	d002      	beq.n	80131ca <HAL_UART_Transmit+0x1e>
 80131c4:	5cc3      	ldrb	r3, [r0, r3]
 80131c6:	2b22      	cmp	r3, #34	; 0x22
 80131c8:	d141      	bne.n	801324e <HAL_UART_Transmit+0xa2>
    if((pData == NULL ) || (Size == 0))
 80131ca:	2f00      	cmp	r7, #0
 80131cc:	d045      	beq.n	801325a <HAL_UART_Transmit+0xae>
 80131ce:	2a00      	cmp	r2, #0
 80131d0:	d043      	beq.n	801325a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80131d2:	2368      	movs	r3, #104	; 0x68
 80131d4:	5cf1      	ldrb	r1, [r6, r3]
 80131d6:	2901      	cmp	r1, #1
 80131d8:	d039      	beq.n	801324e <HAL_UART_Transmit+0xa2>
 80131da:	2101      	movs	r1, #1
 80131dc:	54f1      	strb	r1, [r6, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131de:	2300      	movs	r3, #0
 80131e0:	66f3      	str	r3, [r6, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80131e2:	3369      	adds	r3, #105	; 0x69
 80131e4:	5cf1      	ldrb	r1, [r6, r3]
 80131e6:	2922      	cmp	r1, #34	; 0x22
 80131e8:	d063      	beq.n	80132b2 <HAL_UART_Transmit+0x106>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80131ea:	2112      	movs	r1, #18
 80131ec:	54f1      	strb	r1, [r6, r3]
    huart->TxXferSize = Size;
 80131ee:	2350      	movs	r3, #80	; 0x50
 80131f0:	52f2      	strh	r2, [r6, r3]
      huart->TxXferCount--;
 80131f2:	3302      	adds	r3, #2
 80131f4:	4699      	mov	r9, r3
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80131f6:	2380      	movs	r3, #128	; 0x80
 80131f8:	015b      	lsls	r3, r3, #5
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80131fa:	2580      	movs	r5, #128	; 0x80
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80131fc:	469a      	mov	sl, r3
      huart->TxXferCount--;
 80131fe:	464b      	mov	r3, r9
 8013200:	3a01      	subs	r2, #1
 8013202:	52f2      	strh	r2, [r6, r3]
  uint32_t tickstart = HAL_GetTick();
 8013204:	f7fc fce0 	bl	800fbc8 <HAL_GetTick>
 8013208:	4680      	mov	r8, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801320a:	6833      	ldr	r3, [r6, #0]
 801320c:	e001      	b.n	8013212 <HAL_UART_Transmit+0x66>
      if(Timeout != HAL_MAX_DELAY)
 801320e:	1c62      	adds	r2, r4, #1
 8013210:	d125      	bne.n	801325e <HAL_UART_Transmit+0xb2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013212:	69da      	ldr	r2, [r3, #28]
 8013214:	4215      	tst	r5, r2
 8013216:	d0fa      	beq.n	801320e <HAL_UART_Transmit+0x62>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013218:	68b2      	ldr	r2, [r6, #8]
 801321a:	4552      	cmp	r2, sl
 801321c:	d040      	beq.n	80132a0 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801321e:	783a      	ldrb	r2, [r7, #0]
 8013220:	3701      	adds	r7, #1
 8013222:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8013224:	464b      	mov	r3, r9
 8013226:	5af2      	ldrh	r2, [r6, r3]
 8013228:	2a00      	cmp	r2, #0
 801322a:	d1e8      	bne.n	80131fe <HAL_UART_Transmit+0x52>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801322c:	0023      	movs	r3, r4
 801322e:	2140      	movs	r1, #64	; 0x40
 8013230:	0030      	movs	r0, r6
 8013232:	f7ff ff6f 	bl	8013114 <UART_WaitOnFlagUntilTimeout>
 8013236:	2800      	cmp	r0, #0
 8013238:	d13e      	bne.n	80132b8 <HAL_UART_Transmit+0x10c>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801323a:	2369      	movs	r3, #105	; 0x69
 801323c:	5cf2      	ldrb	r2, [r6, r3]
 801323e:	2a32      	cmp	r2, #50	; 0x32
 8013240:	d03c      	beq.n	80132bc <HAL_UART_Transmit+0x110>
      huart->State = HAL_UART_STATE_READY;
 8013242:	2201      	movs	r2, #1
 8013244:	54f2      	strb	r2, [r6, r3]
    __HAL_UNLOCK(huart);
 8013246:	2368      	movs	r3, #104	; 0x68
 8013248:	2200      	movs	r2, #0
 801324a:	54f2      	strb	r2, [r6, r3]
    return HAL_OK;
 801324c:	e000      	b.n	8013250 <HAL_UART_Transmit+0xa4>
    return HAL_BUSY;
 801324e:	2002      	movs	r0, #2
}
 8013250:	bce0      	pop	{r5, r6, r7}
 8013252:	46ba      	mov	sl, r7
 8013254:	46b1      	mov	r9, r6
 8013256:	46a8      	mov	r8, r5
 8013258:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 801325a:	2001      	movs	r0, #1
 801325c:	e7f8      	b.n	8013250 <HAL_UART_Transmit+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801325e:	2c00      	cmp	r4, #0
 8013260:	d006      	beq.n	8013270 <HAL_UART_Transmit+0xc4>
 8013262:	f7fc fcb1 	bl	800fbc8 <HAL_GetTick>
 8013266:	4643      	mov	r3, r8
 8013268:	1ac0      	subs	r0, r0, r3
 801326a:	4284      	cmp	r4, r0
 801326c:	d2cd      	bcs.n	801320a <HAL_UART_Transmit+0x5e>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801326e:	6833      	ldr	r3, [r6, #0]
 8013270:	2180      	movs	r1, #128	; 0x80
 8013272:	681a      	ldr	r2, [r3, #0]
        return HAL_TIMEOUT;
 8013274:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013276:	438a      	bics	r2, r1
 8013278:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801327a:	681a      	ldr	r2, [r3, #0]
 801327c:	3960      	subs	r1, #96	; 0x60
 801327e:	438a      	bics	r2, r1
 8013280:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	490f      	ldr	r1, [pc, #60]	; (80132c4 <HAL_UART_Transmit+0x118>)
 8013286:	400a      	ands	r2, r1
 8013288:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801328a:	689a      	ldr	r2, [r3, #8]
 801328c:	3103      	adds	r1, #3
 801328e:	31ff      	adds	r1, #255	; 0xff
 8013290:	438a      	bics	r2, r1
 8013292:	609a      	str	r2, [r3, #8]
          huart->State = HAL_UART_STATE_READY;
 8013294:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8013296:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 8013298:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 801329a:	3b01      	subs	r3, #1
 801329c:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801329e:	e7d7      	b.n	8013250 <HAL_UART_Transmit+0xa4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80132a0:	6932      	ldr	r2, [r6, #16]
 80132a2:	2a00      	cmp	r2, #0
 80132a4:	d1bb      	bne.n	801321e <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80132a6:	883a      	ldrh	r2, [r7, #0]
        pData += 2;
 80132a8:	3702      	adds	r7, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80132aa:	05d2      	lsls	r2, r2, #23
 80132ac:	0dd2      	lsrs	r2, r2, #23
 80132ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80132b0:	e7b8      	b.n	8013224 <HAL_UART_Transmit+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80132b2:	3110      	adds	r1, #16
 80132b4:	54f1      	strb	r1, [r6, r3]
 80132b6:	e79a      	b.n	80131ee <HAL_UART_Transmit+0x42>
      return HAL_TIMEOUT;
 80132b8:	2003      	movs	r0, #3
 80132ba:	e7c9      	b.n	8013250 <HAL_UART_Transmit+0xa4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80132bc:	3a10      	subs	r2, #16
 80132be:	54f2      	strb	r2, [r6, r3]
 80132c0:	e7c1      	b.n	8013246 <HAL_UART_Transmit+0x9a>
 80132c2:	46c0      	nop			; (mov r8, r8)
 80132c4:	fffffeff 	.word	0xfffffeff

080132c8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132c8:	2300      	movs	r3, #0
{
 80132ca:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80132cc:	4a1a      	ldr	r2, [pc, #104]	; (8013338 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132ce:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80132d0:	6803      	ldr	r3, [r0, #0]
{
 80132d2:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d00d      	beq.n	80132f4 <UART_CheckIdleState+0x2c>
 80132d8:	4a18      	ldr	r2, [pc, #96]	; (801333c <UART_CheckIdleState+0x74>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	d00a      	beq.n	80132f4 <UART_CheckIdleState+0x2c>
 80132de:	4a18      	ldr	r2, [pc, #96]	; (8013340 <UART_CheckIdleState+0x78>)
 80132e0:	4293      	cmp	r3, r2
 80132e2:	d007      	beq.n	80132f4 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 80132e4:	2369      	movs	r3, #105	; 0x69
 80132e6:	2201      	movs	r2, #1
 80132e8:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80132ea:	2200      	movs	r2, #0
  return HAL_OK;
 80132ec:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80132ee:	3b01      	subs	r3, #1
 80132f0:	54e2      	strb	r2, [r4, r3]
}
 80132f2:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	0712      	lsls	r2, r2, #28
 80132f8:	d40e      	bmi.n	8013318 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	075b      	lsls	r3, r3, #29
 80132fe:	d5f1      	bpl.n	80132e4 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013300:	23fa      	movs	r3, #250	; 0xfa
 8013302:	2180      	movs	r1, #128	; 0x80
 8013304:	2200      	movs	r2, #0
 8013306:	0020      	movs	r0, r4
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	03c9      	lsls	r1, r1, #15
 801330c:	f7ff ff02 	bl	8013114 <UART_WaitOnFlagUntilTimeout>
 8013310:	2800      	cmp	r0, #0
 8013312:	d0e7      	beq.n	80132e4 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8013314:	2003      	movs	r0, #3
 8013316:	e7ec      	b.n	80132f2 <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013318:	23fa      	movs	r3, #250	; 0xfa
 801331a:	2180      	movs	r1, #128	; 0x80
 801331c:	2200      	movs	r2, #0
 801331e:	0020      	movs	r0, r4
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	0389      	lsls	r1, r1, #14
 8013324:	f7ff fef6 	bl	8013114 <UART_WaitOnFlagUntilTimeout>
 8013328:	2800      	cmp	r0, #0
 801332a:	d1f3      	bne.n	8013314 <UART_CheckIdleState+0x4c>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	075b      	lsls	r3, r3, #29
 8013332:	d5d7      	bpl.n	80132e4 <UART_CheckIdleState+0x1c>
 8013334:	e7e4      	b.n	8013300 <UART_CheckIdleState+0x38>
 8013336:	46c0      	nop			; (mov r8, r8)
 8013338:	40013800 	.word	0x40013800
 801333c:	40004400 	.word	0x40004400
 8013340:	40004800 	.word	0x40004800

08013344 <HAL_UART_Init>:
{
 8013344:	b510      	push	{r4, lr}
 8013346:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013348:	d029      	beq.n	801339e <HAL_UART_Init+0x5a>
  if(huart->State == HAL_UART_STATE_RESET)
 801334a:	2369      	movs	r3, #105	; 0x69
 801334c:	5cc3      	ldrb	r3, [r0, r3]
 801334e:	b2da      	uxtb	r2, r3
 8013350:	2b00      	cmp	r3, #0
 8013352:	d026      	beq.n	80133a2 <HAL_UART_Init+0x5e>
  huart->State = HAL_UART_STATE_BUSY;
 8013354:	2369      	movs	r3, #105	; 0x69
 8013356:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8013358:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 801335a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 801335c:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801335e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8013360:	6813      	ldr	r3, [r2, #0]
 8013362:	438b      	bics	r3, r1
 8013364:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013366:	f7ff fd7f 	bl	8012e68 <UART_SetConfig>
 801336a:	2801      	cmp	r0, #1
 801336c:	d017      	beq.n	801339e <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801336e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013370:	2b00      	cmp	r3, #0
 8013372:	d110      	bne.n	8013396 <HAL_UART_Init+0x52>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	490d      	ldr	r1, [pc, #52]	; (80133ac <HAL_UART_Init+0x68>)
 8013378:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801337a:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801337c:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801337e:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013380:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013382:	689a      	ldr	r2, [r3, #8]
 8013384:	438a      	bics	r2, r1
 8013386:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	3929      	subs	r1, #41	; 0x29
 801338c:	430a      	orrs	r2, r1
 801338e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013390:	f7ff ff9a 	bl	80132c8 <UART_CheckIdleState>
}
 8013394:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8013396:	0020      	movs	r0, r4
 8013398:	f7ff fe54 	bl	8013044 <UART_AdvFeatureConfig>
 801339c:	e7ea      	b.n	8013374 <HAL_UART_Init+0x30>
    return HAL_ERROR;
 801339e:	2001      	movs	r0, #1
 80133a0:	e7f8      	b.n	8013394 <HAL_UART_Init+0x50>
    huart->Lock = HAL_UNLOCKED;
 80133a2:	3368      	adds	r3, #104	; 0x68
 80133a4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80133a6:	f7fa fa71 	bl	800d88c <HAL_UART_MspInit>
 80133aa:	e7d3      	b.n	8013354 <HAL_UART_Init+0x10>
 80133ac:	ffffb7ff 	.word	0xffffb7ff

080133b0 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80133b0:	2369      	movs	r3, #105	; 0x69
{
 80133b2:	b510      	push	{r4, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80133b4:	5cc2      	ldrb	r2, [r0, r3]
 80133b6:	2a12      	cmp	r2, #18
 80133b8:	d002      	beq.n	80133c0 <UART_Transmit_IT+0x10>
 80133ba:	5cc3      	ldrb	r3, [r0, r3]
 80133bc:	2b32      	cmp	r3, #50	; 0x32
 80133be:	d11e      	bne.n	80133fe <UART_Transmit_IT+0x4e>
  {

    if(huart->TxXferCount == 0)
 80133c0:	2352      	movs	r3, #82	; 0x52
 80133c2:	5ac3      	ldrh	r3, [r0, r3]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00f      	beq.n	80133e8 <UART_Transmit_IT+0x38>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133c8:	2280      	movs	r2, #128	; 0x80
 80133ca:	6881      	ldr	r1, [r0, #8]
 80133cc:	0152      	lsls	r2, r2, #5
 80133ce:	4291      	cmp	r1, r2
 80133d0:	d017      	beq.n	8013402 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80133d2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80133d4:	1c51      	adds	r1, r2, #1
 80133d6:	64c1      	str	r1, [r0, #76]	; 0x4c
 80133d8:	7812      	ldrb	r2, [r2, #0]
 80133da:	6801      	ldr	r1, [r0, #0]
 80133dc:	850a      	strh	r2, [r1, #40]	; 0x28
      }

      huart->TxXferCount--;
 80133de:	2252      	movs	r2, #82	; 0x52
 80133e0:	3b01      	subs	r3, #1
 80133e2:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80133e4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80133e6:	bd10      	pop	{r4, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133e8:	2180      	movs	r1, #128	; 0x80
 80133ea:	6803      	ldr	r3, [r0, #0]
      return HAL_OK;
 80133ec:	2000      	movs	r0, #0
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	438a      	bics	r2, r1
 80133f2:	601a      	str	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	3940      	subs	r1, #64	; 0x40
 80133f8:	430a      	orrs	r2, r1
 80133fa:	601a      	str	r2, [r3, #0]
      return HAL_OK;
 80133fc:	e7f3      	b.n	80133e6 <UART_Transmit_IT+0x36>
    return HAL_BUSY;
 80133fe:	2002      	movs	r0, #2
 8013400:	e7f1      	b.n	80133e6 <UART_Transmit_IT+0x36>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013402:	6902      	ldr	r2, [r0, #16]
 8013404:	2a00      	cmp	r2, #0
 8013406:	d1e4      	bne.n	80133d2 <UART_Transmit_IT+0x22>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8013408:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801340a:	6804      	ldr	r4, [r0, #0]
 801340c:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2;
 801340e:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013410:	05d2      	lsls	r2, r2, #23
 8013412:	0dd2      	lsrs	r2, r2, #23
 8013414:	8522      	strh	r2, [r4, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013416:	64c1      	str	r1, [r0, #76]	; 0x4c
 8013418:	e7e1      	b.n	80133de <UART_Transmit_IT+0x2e>
 801341a:	46c0      	nop			; (mov r8, r8)

0801341c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801341c:	2140      	movs	r1, #64	; 0x40
 801341e:	6803      	ldr	r3, [r0, #0]
{
 8013420:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	438a      	bics	r2, r1
 8013426:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013428:	2269      	movs	r2, #105	; 0x69
 801342a:	5c81      	ldrb	r1, [r0, r2]
 801342c:	2932      	cmp	r1, #50	; 0x32
 801342e:	d008      	beq.n	8013442 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013430:	2401      	movs	r4, #1
 8013432:	6899      	ldr	r1, [r3, #8]
 8013434:	43a1      	bics	r1, r4
 8013436:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8013438:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 801343a:	f7f9 fe79 	bl	800d130 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801343e:	2000      	movs	r0, #0
 8013440:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013442:	2322      	movs	r3, #34	; 0x22
 8013444:	5483      	strb	r3, [r0, r2]
 8013446:	e7f8      	b.n	801343a <UART_EndTransmit_IT+0x1e>

08013448 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013448:	2269      	movs	r2, #105	; 0x69
{
 801344a:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801344c:	5c81      	ldrb	r1, [r0, r2]
{
 801344e:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013450:	2922      	cmp	r1, #34	; 0x22
 8013452:	d002      	beq.n	801345a <UART_Receive_IT+0x12>
 8013454:	5c82      	ldrb	r2, [r0, r2]
 8013456:	2a32      	cmp	r2, #50	; 0x32
 8013458:	d12d      	bne.n	80134b6 <UART_Receive_IT+0x6e>
  uint16_t uhMask = huart->Mask;
 801345a:	225c      	movs	r2, #92	; 0x5c
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801345c:	2180      	movs	r1, #128	; 0x80
 801345e:	6898      	ldr	r0, [r3, #8]
  uint16_t uhMask = huart->Mask;
 8013460:	5a9a      	ldrh	r2, [r3, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013462:	0149      	lsls	r1, r1, #5
 8013464:	4288      	cmp	r0, r1
 8013466:	d028      	beq.n	80134ba <UART_Receive_IT+0x72>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013468:	6819      	ldr	r1, [r3, #0]
 801346a:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 801346c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801346e:	4002      	ands	r2, r0
 8013470:	1c4c      	adds	r4, r1, #1
 8013472:	655c      	str	r4, [r3, #84]	; 0x54
 8013474:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013476:	215a      	movs	r1, #90	; 0x5a
 8013478:	5a5a      	ldrh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 801347a:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 801347c:	3a01      	subs	r2, #1
 801347e:	b292      	uxth	r2, r2
 8013480:	525a      	strh	r2, [r3, r1]
 8013482:	2a00      	cmp	r2, #0
 8013484:	d116      	bne.n	80134b4 <UART_Receive_IT+0x6c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	3020      	adds	r0, #32
 801348a:	6811      	ldr	r1, [r2, #0]
 801348c:	4381      	bics	r1, r0
 801348e:	6011      	str	r1, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013490:	2169      	movs	r1, #105	; 0x69
 8013492:	5c58      	ldrb	r0, [r3, r1]
 8013494:	2832      	cmp	r0, #50	; 0x32
 8013496:	d01b      	beq.n	80134d0 <UART_Receive_IT+0x88>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013498:	6810      	ldr	r0, [r2, #0]
 801349a:	4c0f      	ldr	r4, [pc, #60]	; (80134d8 <UART_Receive_IT+0x90>)
 801349c:	4020      	ands	r0, r4
 801349e:	6010      	str	r0, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80134a0:	6890      	ldr	r0, [r2, #8]
 80134a2:	3403      	adds	r4, #3
 80134a4:	34ff      	adds	r4, #255	; 0xff
 80134a6:	43a0      	bics	r0, r4
 80134a8:	6090      	str	r0, [r2, #8]
        huart->State = HAL_UART_STATE_READY;
 80134aa:	545c      	strb	r4, [r3, r1]
      HAL_UART_RxCpltCallback(huart);
 80134ac:	0018      	movs	r0, r3
 80134ae:	f7f9 fe7b 	bl	800d1a8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80134b2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80134b4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80134b6:	2002      	movs	r0, #2
 80134b8:	e7fc      	b.n	80134b4 <UART_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134ba:	6919      	ldr	r1, [r3, #16]
 80134bc:	2900      	cmp	r1, #0
 80134be:	d1d3      	bne.n	8013468 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80134c0:	6818      	ldr	r0, [r3, #0]
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80134c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80134c4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80134c6:	4002      	ands	r2, r0
 80134c8:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 80134ca:	3102      	adds	r1, #2
 80134cc:	6559      	str	r1, [r3, #84]	; 0x54
 80134ce:	e7d2      	b.n	8013476 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80134d0:	2212      	movs	r2, #18
 80134d2:	545a      	strb	r2, [r3, r1]
 80134d4:	e7ea      	b.n	80134ac <UART_Receive_IT+0x64>
 80134d6:	46c0      	nop			; (mov r8, r8)
 80134d8:	fffffeff 	.word	0xfffffeff

080134dc <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80134dc:	4770      	bx	lr
 80134de:	46c0      	nop			; (mov r8, r8)

080134e0 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80134e0:	2201      	movs	r2, #1
 80134e2:	6803      	ldr	r3, [r0, #0]
{
 80134e4:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80134e6:	69d9      	ldr	r1, [r3, #28]
{
 80134e8:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80134ea:	420a      	tst	r2, r1
 80134ec:	d002      	beq.n	80134f4 <HAL_UART_IRQHandler+0x14>
 80134ee:	6819      	ldr	r1, [r3, #0]
 80134f0:	05c9      	lsls	r1, r1, #23
 80134f2:	d456      	bmi.n	80135a2 <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80134f4:	2202      	movs	r2, #2
 80134f6:	69d9      	ldr	r1, [r3, #28]
 80134f8:	420a      	tst	r2, r1
 80134fa:	d003      	beq.n	8013504 <HAL_UART_IRQHandler+0x24>
 80134fc:	2101      	movs	r1, #1
 80134fe:	6898      	ldr	r0, [r3, #8]
 8013500:	4201      	tst	r1, r0
 8013502:	d146      	bne.n	8013592 <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013504:	2204      	movs	r2, #4
 8013506:	69d9      	ldr	r1, [r3, #28]
 8013508:	420a      	tst	r2, r1
 801350a:	d003      	beq.n	8013514 <HAL_UART_IRQHandler+0x34>
 801350c:	2101      	movs	r1, #1
 801350e:	6898      	ldr	r0, [r3, #8]
 8013510:	4201      	tst	r1, r0
 8013512:	d136      	bne.n	8013582 <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013514:	2208      	movs	r2, #8
 8013516:	69d9      	ldr	r1, [r3, #28]
 8013518:	420a      	tst	r2, r1
 801351a:	d003      	beq.n	8013524 <HAL_UART_IRQHandler+0x44>
 801351c:	2101      	movs	r1, #1
 801351e:	6898      	ldr	r0, [r3, #8]
 8013520:	4201      	tst	r1, r0
 8013522:	d120      	bne.n	8013566 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013524:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013526:	2a00      	cmp	r2, #0
 8013528:	d126      	bne.n	8013578 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801352a:	2280      	movs	r2, #128	; 0x80
 801352c:	69d9      	ldr	r1, [r3, #28]
 801352e:	0352      	lsls	r2, r2, #13
 8013530:	4211      	tst	r1, r2
 8013532:	d002      	beq.n	801353a <HAL_UART_IRQHandler+0x5a>
 8013534:	6899      	ldr	r1, [r3, #8]
 8013536:	0249      	lsls	r1, r1, #9
 8013538:	d43e      	bmi.n	80135b8 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 801353a:	2220      	movs	r2, #32
 801353c:	69d9      	ldr	r1, [r3, #28]
 801353e:	420a      	tst	r2, r1
 8013540:	d002      	beq.n	8013548 <HAL_UART_IRQHandler+0x68>
 8013542:	6819      	ldr	r1, [r3, #0]
 8013544:	420a      	tst	r2, r1
 8013546:	d140      	bne.n	80135ca <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013548:	2280      	movs	r2, #128	; 0x80
 801354a:	69d9      	ldr	r1, [r3, #28]
 801354c:	420a      	tst	r2, r1
 801354e:	d002      	beq.n	8013556 <HAL_UART_IRQHandler+0x76>
 8013550:	6819      	ldr	r1, [r3, #0]
 8013552:	420a      	tst	r2, r1
 8013554:	d142      	bne.n	80135dc <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013556:	2240      	movs	r2, #64	; 0x40
 8013558:	69d9      	ldr	r1, [r3, #28]
 801355a:	420a      	tst	r2, r1
 801355c:	d002      	beq.n	8013564 <HAL_UART_IRQHandler+0x84>
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	421a      	tst	r2, r3
 8013562:	d125      	bne.n	80135b0 <HAL_UART_IRQHandler+0xd0>
}
 8013564:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013566:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013568:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801356a:	4302      	orrs	r2, r0
 801356c:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801356e:	2269      	movs	r2, #105	; 0x69
 8013570:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013572:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013574:	2a00      	cmp	r2, #0
 8013576:	d0d8      	beq.n	801352a <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8013578:	0020      	movs	r0, r4
 801357a:	f7f9 fdf1 	bl	800d160 <HAL_UART_ErrorCallback>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	e7d3      	b.n	801352a <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013582:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013584:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013586:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013588:	4302      	orrs	r2, r0
 801358a:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801358c:	2269      	movs	r2, #105	; 0x69
 801358e:	54a1      	strb	r1, [r4, r2]
 8013590:	e7c0      	b.n	8013514 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013592:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013594:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013596:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013598:	4302      	orrs	r2, r0
 801359a:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801359c:	2269      	movs	r2, #105	; 0x69
 801359e:	54a1      	strb	r1, [r4, r2]
 80135a0:	e7b0      	b.n	8013504 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80135a2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80135a4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80135a6:	4311      	orrs	r1, r2
 80135a8:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80135aa:	2169      	movs	r1, #105	; 0x69
 80135ac:	5442      	strb	r2, [r0, r1]
 80135ae:	e7a1      	b.n	80134f4 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 80135b0:	0020      	movs	r0, r4
 80135b2:	f7ff ff33 	bl	801341c <UART_EndTransmit_IT>
}
 80135b6:	e7d5      	b.n	8013564 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80135b8:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80135ba:	2369      	movs	r3, #105	; 0x69
 80135bc:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 80135be:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 80135c0:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80135c2:	f7ff ff8b 	bl	80134dc <HAL_UARTEx_WakeupCallback>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80135c6:	6823      	ldr	r3, [r4, #0]
 80135c8:	e7b7      	b.n	801353a <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 80135ca:	0020      	movs	r0, r4
 80135cc:	f7ff ff3c 	bl	8013448 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135d0:	2108      	movs	r1, #8
 80135d2:	6823      	ldr	r3, [r4, #0]
 80135d4:	699a      	ldr	r2, [r3, #24]
 80135d6:	430a      	orrs	r2, r1
 80135d8:	619a      	str	r2, [r3, #24]
 80135da:	e7b5      	b.n	8013548 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 80135dc:	0020      	movs	r0, r4
 80135de:	f7ff fee7 	bl	80133b0 <UART_Transmit_IT>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80135e2:	6823      	ldr	r3, [r4, #0]
 80135e4:	e7b7      	b.n	8013556 <HAL_UART_IRQHandler+0x76>
 80135e6:	46c0      	nop			; (mov r8, r8)

080135e8 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 80135e8:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 80135ea:	f7f0 fb1b 	bl	8003c24 <Module_Init>

	//Don't place your code here.
	for(;;){}
 80135ee:	e7fe      	b.n	80135ee <main+0x6>

080135f0 <UserTask>:

/* User Task */
void UserTask(void *argument){

	// put your code here, to run repeatedly.
	while(1){
 80135f0:	e7fe      	b.n	80135f0 <UserTask>
 80135f2:	46c0      	nop			; (mov r8, r8)

080135f4 <atof>:
 80135f4:	b510      	push	{r4, lr}
 80135f6:	2100      	movs	r1, #0
 80135f8:	f001 fb56 	bl	8014ca8 <strtod>
 80135fc:	bd10      	pop	{r4, pc}

080135fe <atoi>:
 80135fe:	b510      	push	{r4, lr}
 8013600:	220a      	movs	r2, #10
 8013602:	2100      	movs	r1, #0
 8013604:	f001 fc26 	bl	8014e54 <strtol>
 8013608:	bd10      	pop	{r4, pc}

0801360a <atol>:
 801360a:	b510      	push	{r4, lr}
 801360c:	220a      	movs	r2, #10
 801360e:	2100      	movs	r1, #0
 8013610:	f001 fc20 	bl	8014e54 <strtol>
 8013614:	bd10      	pop	{r4, pc}
	...

08013618 <calloc>:
 8013618:	b510      	push	{r4, lr}
 801361a:	4b03      	ldr	r3, [pc, #12]	; (8013628 <calloc+0x10>)
 801361c:	000a      	movs	r2, r1
 801361e:	0001      	movs	r1, r0
 8013620:	6818      	ldr	r0, [r3, #0]
 8013622:	f000 f803 	bl	801362c <_calloc_r>
 8013626:	bd10      	pop	{r4, pc}
 8013628:	200000d0 	.word	0x200000d0

0801362c <_calloc_r>:
 801362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362e:	2500      	movs	r5, #0
 8013630:	000e      	movs	r6, r1
 8013632:	0c0c      	lsrs	r4, r1, #16
 8013634:	0c13      	lsrs	r3, r2, #16
 8013636:	42ac      	cmp	r4, r5
 8013638:	d133      	bne.n	80136a2 <_calloc_r+0x76>
 801363a:	42ab      	cmp	r3, r5
 801363c:	d121      	bne.n	8013682 <_calloc_r+0x56>
 801363e:	b2b6      	uxth	r6, r6
 8013640:	b291      	uxth	r1, r2
 8013642:	4371      	muls	r1, r6
 8013644:	f000 f880 	bl	8013748 <_malloc_r>
 8013648:	1e04      	subs	r4, r0, #0
 801364a:	d033      	beq.n	80136b4 <_calloc_r+0x88>
 801364c:	0003      	movs	r3, r0
 801364e:	3b08      	subs	r3, #8
 8013650:	685a      	ldr	r2, [r3, #4]
 8013652:	2303      	movs	r3, #3
 8013654:	439a      	bics	r2, r3
 8013656:	3a04      	subs	r2, #4
 8013658:	2a24      	cmp	r2, #36	; 0x24
 801365a:	d832      	bhi.n	80136c2 <_calloc_r+0x96>
 801365c:	0003      	movs	r3, r0
 801365e:	2a13      	cmp	r2, #19
 8013660:	d90a      	bls.n	8013678 <_calloc_r+0x4c>
 8013662:	6005      	str	r5, [r0, #0]
 8013664:	6045      	str	r5, [r0, #4]
 8013666:	3308      	adds	r3, #8
 8013668:	2a1b      	cmp	r2, #27
 801366a:	d905      	bls.n	8013678 <_calloc_r+0x4c>
 801366c:	6085      	str	r5, [r0, #8]
 801366e:	60c5      	str	r5, [r0, #12]
 8013670:	2a24      	cmp	r2, #36	; 0x24
 8013672:	d021      	beq.n	80136b8 <_calloc_r+0x8c>
 8013674:	0003      	movs	r3, r0
 8013676:	3310      	adds	r3, #16
 8013678:	2200      	movs	r2, #0
 801367a:	601a      	str	r2, [r3, #0]
 801367c:	605a      	str	r2, [r3, #4]
 801367e:	609a      	str	r2, [r3, #8]
 8013680:	e018      	b.n	80136b4 <_calloc_r+0x88>
 8013682:	1c1c      	adds	r4, r3, #0
 8013684:	1c31      	adds	r1, r6, #0
 8013686:	b2b6      	uxth	r6, r6
 8013688:	b292      	uxth	r2, r2
 801368a:	b289      	uxth	r1, r1
 801368c:	4372      	muls	r2, r6
 801368e:	b2a3      	uxth	r3, r4
 8013690:	434b      	muls	r3, r1
 8013692:	0c11      	lsrs	r1, r2, #16
 8013694:	185b      	adds	r3, r3, r1
 8013696:	0c19      	lsrs	r1, r3, #16
 8013698:	d107      	bne.n	80136aa <_calloc_r+0x7e>
 801369a:	0419      	lsls	r1, r3, #16
 801369c:	b292      	uxth	r2, r2
 801369e:	4311      	orrs	r1, r2
 80136a0:	e7d0      	b.n	8013644 <_calloc_r+0x18>
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d101      	bne.n	80136aa <_calloc_r+0x7e>
 80136a6:	1c11      	adds	r1, r2, #0
 80136a8:	e7ed      	b.n	8013686 <_calloc_r+0x5a>
 80136aa:	f000 f80f 	bl	80136cc <__errno>
 80136ae:	230c      	movs	r3, #12
 80136b0:	2400      	movs	r4, #0
 80136b2:	6003      	str	r3, [r0, #0]
 80136b4:	0020      	movs	r0, r4
 80136b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136b8:	0003      	movs	r3, r0
 80136ba:	6105      	str	r5, [r0, #16]
 80136bc:	3318      	adds	r3, #24
 80136be:	6145      	str	r5, [r0, #20]
 80136c0:	e7da      	b.n	8013678 <_calloc_r+0x4c>
 80136c2:	2100      	movs	r1, #0
 80136c4:	f000 fa69 	bl	8013b9a <memset>
 80136c8:	e7f4      	b.n	80136b4 <_calloc_r+0x88>
	...

080136cc <__errno>:
 80136cc:	4b01      	ldr	r3, [pc, #4]	; (80136d4 <__errno+0x8>)
 80136ce:	6818      	ldr	r0, [r3, #0]
 80136d0:	4770      	bx	lr
 80136d2:	46c0      	nop			; (mov r8, r8)
 80136d4:	200000d0 	.word	0x200000d0

080136d8 <__libc_init_array>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	2600      	movs	r6, #0
 80136dc:	4d0c      	ldr	r5, [pc, #48]	; (8013710 <__libc_init_array+0x38>)
 80136de:	4c0d      	ldr	r4, [pc, #52]	; (8013714 <__libc_init_array+0x3c>)
 80136e0:	1b64      	subs	r4, r4, r5
 80136e2:	10a4      	asrs	r4, r4, #2
 80136e4:	42a6      	cmp	r6, r4
 80136e6:	d109      	bne.n	80136fc <__libc_init_array+0x24>
 80136e8:	2600      	movs	r6, #0
 80136ea:	f006 fad3 	bl	8019c94 <_init>
 80136ee:	4d0a      	ldr	r5, [pc, #40]	; (8013718 <__libc_init_array+0x40>)
 80136f0:	4c0a      	ldr	r4, [pc, #40]	; (801371c <__libc_init_array+0x44>)
 80136f2:	1b64      	subs	r4, r4, r5
 80136f4:	10a4      	asrs	r4, r4, #2
 80136f6:	42a6      	cmp	r6, r4
 80136f8:	d105      	bne.n	8013706 <__libc_init_array+0x2e>
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	00b3      	lsls	r3, r6, #2
 80136fe:	58eb      	ldr	r3, [r5, r3]
 8013700:	4798      	blx	r3
 8013702:	3601      	adds	r6, #1
 8013704:	e7ee      	b.n	80136e4 <__libc_init_array+0xc>
 8013706:	00b3      	lsls	r3, r6, #2
 8013708:	58eb      	ldr	r3, [r5, r3]
 801370a:	4798      	blx	r3
 801370c:	3601      	adds	r6, #1
 801370e:	e7f2      	b.n	80136f6 <__libc_init_array+0x1e>
 8013710:	0801d3c8 	.word	0x0801d3c8
 8013714:	0801d3c8 	.word	0x0801d3c8
 8013718:	0801d3c8 	.word	0x0801d3c8
 801371c:	0801d3d0 	.word	0x0801d3d0

08013720 <malloc>:
 8013720:	b510      	push	{r4, lr}
 8013722:	4b03      	ldr	r3, [pc, #12]	; (8013730 <malloc+0x10>)
 8013724:	0001      	movs	r1, r0
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	f000 f80e 	bl	8013748 <_malloc_r>
 801372c:	bd10      	pop	{r4, pc}
 801372e:	46c0      	nop			; (mov r8, r8)
 8013730:	200000d0 	.word	0x200000d0

08013734 <free>:
 8013734:	b510      	push	{r4, lr}
 8013736:	4b03      	ldr	r3, [pc, #12]	; (8013744 <free+0x10>)
 8013738:	0001      	movs	r1, r0
 801373a:	6818      	ldr	r0, [r3, #0]
 801373c:	f003 fcf8 	bl	8017130 <_free_r>
 8013740:	bd10      	pop	{r4, pc}
 8013742:	46c0      	nop			; (mov r8, r8)
 8013744:	200000d0 	.word	0x200000d0

08013748 <_malloc_r>:
 8013748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801374a:	000d      	movs	r5, r1
 801374c:	b087      	sub	sp, #28
 801374e:	350b      	adds	r5, #11
 8013750:	9001      	str	r0, [sp, #4]
 8013752:	2d16      	cmp	r5, #22
 8013754:	d908      	bls.n	8013768 <_malloc_r+0x20>
 8013756:	2207      	movs	r2, #7
 8013758:	4395      	bics	r5, r2
 801375a:	d506      	bpl.n	801376a <_malloc_r+0x22>
 801375c:	230c      	movs	r3, #12
 801375e:	9a01      	ldr	r2, [sp, #4]
 8013760:	6013      	str	r3, [r2, #0]
 8013762:	2000      	movs	r0, #0
 8013764:	b007      	add	sp, #28
 8013766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013768:	2510      	movs	r5, #16
 801376a:	42a9      	cmp	r1, r5
 801376c:	d8f6      	bhi.n	801375c <_malloc_r+0x14>
 801376e:	9801      	ldr	r0, [sp, #4]
 8013770:	f000 fa1c 	bl	8013bac <__malloc_lock>
 8013774:	23fc      	movs	r3, #252	; 0xfc
 8013776:	48bd      	ldr	r0, [pc, #756]	; (8013a6c <_malloc_r+0x324>)
 8013778:	005b      	lsls	r3, r3, #1
 801377a:	429d      	cmp	r5, r3
 801377c:	d21a      	bcs.n	80137b4 <_malloc_r+0x6c>
 801377e:	002a      	movs	r2, r5
 8013780:	3208      	adds	r2, #8
 8013782:	1882      	adds	r2, r0, r2
 8013784:	0011      	movs	r1, r2
 8013786:	6854      	ldr	r4, [r2, #4]
 8013788:	3908      	subs	r1, #8
 801378a:	08eb      	lsrs	r3, r5, #3
 801378c:	428c      	cmp	r4, r1
 801378e:	d103      	bne.n	8013798 <_malloc_r+0x50>
 8013790:	68d4      	ldr	r4, [r2, #12]
 8013792:	3302      	adds	r3, #2
 8013794:	42a2      	cmp	r2, r4
 8013796:	d023      	beq.n	80137e0 <_malloc_r+0x98>
 8013798:	2303      	movs	r3, #3
 801379a:	6862      	ldr	r2, [r4, #4]
 801379c:	68a1      	ldr	r1, [r4, #8]
 801379e:	439a      	bics	r2, r3
 80137a0:	0013      	movs	r3, r2
 80137a2:	68e2      	ldr	r2, [r4, #12]
 80137a4:	18e3      	adds	r3, r4, r3
 80137a6:	60ca      	str	r2, [r1, #12]
 80137a8:	6091      	str	r1, [r2, #8]
 80137aa:	2201      	movs	r2, #1
 80137ac:	6859      	ldr	r1, [r3, #4]
 80137ae:	430a      	orrs	r2, r1
 80137b0:	605a      	str	r2, [r3, #4]
 80137b2:	e02b      	b.n	801380c <_malloc_r+0xc4>
 80137b4:	233f      	movs	r3, #63	; 0x3f
 80137b6:	0a6a      	lsrs	r2, r5, #9
 80137b8:	d003      	beq.n	80137c2 <_malloc_r+0x7a>
 80137ba:	2a04      	cmp	r2, #4
 80137bc:	d82c      	bhi.n	8013818 <_malloc_r+0xd0>
 80137be:	09ab      	lsrs	r3, r5, #6
 80137c0:	3338      	adds	r3, #56	; 0x38
 80137c2:	2203      	movs	r2, #3
 80137c4:	4694      	mov	ip, r2
 80137c6:	00d9      	lsls	r1, r3, #3
 80137c8:	1809      	adds	r1, r1, r0
 80137ca:	68cc      	ldr	r4, [r1, #12]
 80137cc:	428c      	cmp	r4, r1
 80137ce:	d006      	beq.n	80137de <_malloc_r+0x96>
 80137d0:	4666      	mov	r6, ip
 80137d2:	6862      	ldr	r2, [r4, #4]
 80137d4:	43b2      	bics	r2, r6
 80137d6:	1b57      	subs	r7, r2, r5
 80137d8:	2f0f      	cmp	r7, #15
 80137da:	dd35      	ble.n	8013848 <_malloc_r+0x100>
 80137dc:	3b01      	subs	r3, #1
 80137de:	3301      	adds	r3, #1
 80137e0:	6904      	ldr	r4, [r0, #16]
 80137e2:	49a3      	ldr	r1, [pc, #652]	; (8013a70 <_malloc_r+0x328>)
 80137e4:	428c      	cmp	r4, r1
 80137e6:	d056      	beq.n	8013896 <_malloc_r+0x14e>
 80137e8:	2203      	movs	r2, #3
 80137ea:	6866      	ldr	r6, [r4, #4]
 80137ec:	4396      	bics	r6, r2
 80137ee:	0032      	movs	r2, r6
 80137f0:	1b76      	subs	r6, r6, r5
 80137f2:	2e0f      	cmp	r6, #15
 80137f4:	dd36      	ble.n	8013864 <_malloc_r+0x11c>
 80137f6:	2701      	movs	r7, #1
 80137f8:	1963      	adds	r3, r4, r5
 80137fa:	433d      	orrs	r5, r7
 80137fc:	4337      	orrs	r7, r6
 80137fe:	6065      	str	r5, [r4, #4]
 8013800:	6143      	str	r3, [r0, #20]
 8013802:	6103      	str	r3, [r0, #16]
 8013804:	60d9      	str	r1, [r3, #12]
 8013806:	6099      	str	r1, [r3, #8]
 8013808:	605f      	str	r7, [r3, #4]
 801380a:	50a6      	str	r6, [r4, r2]
 801380c:	9801      	ldr	r0, [sp, #4]
 801380e:	f000 f9d5 	bl	8013bbc <__malloc_unlock>
 8013812:	0020      	movs	r0, r4
 8013814:	3008      	adds	r0, #8
 8013816:	e7a5      	b.n	8013764 <_malloc_r+0x1c>
 8013818:	2a14      	cmp	r2, #20
 801381a:	d802      	bhi.n	8013822 <_malloc_r+0xda>
 801381c:	0013      	movs	r3, r2
 801381e:	335b      	adds	r3, #91	; 0x5b
 8013820:	e7cf      	b.n	80137c2 <_malloc_r+0x7a>
 8013822:	2a54      	cmp	r2, #84	; 0x54
 8013824:	d802      	bhi.n	801382c <_malloc_r+0xe4>
 8013826:	0b2b      	lsrs	r3, r5, #12
 8013828:	336e      	adds	r3, #110	; 0x6e
 801382a:	e7ca      	b.n	80137c2 <_malloc_r+0x7a>
 801382c:	23aa      	movs	r3, #170	; 0xaa
 801382e:	005b      	lsls	r3, r3, #1
 8013830:	429a      	cmp	r2, r3
 8013832:	d802      	bhi.n	801383a <_malloc_r+0xf2>
 8013834:	0beb      	lsrs	r3, r5, #15
 8013836:	3377      	adds	r3, #119	; 0x77
 8013838:	e7c3      	b.n	80137c2 <_malloc_r+0x7a>
 801383a:	498e      	ldr	r1, [pc, #568]	; (8013a74 <_malloc_r+0x32c>)
 801383c:	237e      	movs	r3, #126	; 0x7e
 801383e:	428a      	cmp	r2, r1
 8013840:	d8bf      	bhi.n	80137c2 <_malloc_r+0x7a>
 8013842:	0cab      	lsrs	r3, r5, #18
 8013844:	337c      	adds	r3, #124	; 0x7c
 8013846:	e7bc      	b.n	80137c2 <_malloc_r+0x7a>
 8013848:	68e6      	ldr	r6, [r4, #12]
 801384a:	2f00      	cmp	r7, #0
 801384c:	db08      	blt.n	8013860 <_malloc_r+0x118>
 801384e:	68a3      	ldr	r3, [r4, #8]
 8013850:	60de      	str	r6, [r3, #12]
 8013852:	60b3      	str	r3, [r6, #8]
 8013854:	2301      	movs	r3, #1
 8013856:	18a2      	adds	r2, r4, r2
 8013858:	6851      	ldr	r1, [r2, #4]
 801385a:	430b      	orrs	r3, r1
 801385c:	6053      	str	r3, [r2, #4]
 801385e:	e7d5      	b.n	801380c <_malloc_r+0xc4>
 8013860:	0034      	movs	r4, r6
 8013862:	e7b3      	b.n	80137cc <_malloc_r+0x84>
 8013864:	6141      	str	r1, [r0, #20]
 8013866:	6101      	str	r1, [r0, #16]
 8013868:	2e00      	cmp	r6, #0
 801386a:	daf3      	bge.n	8013854 <_malloc_r+0x10c>
 801386c:	6841      	ldr	r1, [r0, #4]
 801386e:	468c      	mov	ip, r1
 8013870:	2180      	movs	r1, #128	; 0x80
 8013872:	0089      	lsls	r1, r1, #2
 8013874:	428a      	cmp	r2, r1
 8013876:	d300      	bcc.n	801387a <_malloc_r+0x132>
 8013878:	e089      	b.n	801398e <_malloc_r+0x246>
 801387a:	0956      	lsrs	r6, r2, #5
 801387c:	08d1      	lsrs	r1, r2, #3
 801387e:	2201      	movs	r2, #1
 8013880:	40b2      	lsls	r2, r6
 8013882:	4666      	mov	r6, ip
 8013884:	00c9      	lsls	r1, r1, #3
 8013886:	4332      	orrs	r2, r6
 8013888:	6042      	str	r2, [r0, #4]
 801388a:	1808      	adds	r0, r1, r0
 801388c:	6882      	ldr	r2, [r0, #8]
 801388e:	60e0      	str	r0, [r4, #12]
 8013890:	60a2      	str	r2, [r4, #8]
 8013892:	6084      	str	r4, [r0, #8]
 8013894:	60d4      	str	r4, [r2, #12]
 8013896:	2201      	movs	r2, #1
 8013898:	4874      	ldr	r0, [pc, #464]	; (8013a6c <_malloc_r+0x324>)
 801389a:	1099      	asrs	r1, r3, #2
 801389c:	408a      	lsls	r2, r1
 801389e:	6841      	ldr	r1, [r0, #4]
 80138a0:	4291      	cmp	r1, r2
 80138a2:	d325      	bcc.n	80138f0 <_malloc_r+0x1a8>
 80138a4:	420a      	tst	r2, r1
 80138a6:	d105      	bne.n	80138b4 <_malloc_r+0x16c>
 80138a8:	2403      	movs	r4, #3
 80138aa:	43a3      	bics	r3, r4
 80138ac:	0052      	lsls	r2, r2, #1
 80138ae:	3304      	adds	r3, #4
 80138b0:	420a      	tst	r2, r1
 80138b2:	d0fb      	beq.n	80138ac <_malloc_r+0x164>
 80138b4:	00d9      	lsls	r1, r3, #3
 80138b6:	1841      	adds	r1, r0, r1
 80138b8:	468c      	mov	ip, r1
 80138ba:	9302      	str	r3, [sp, #8]
 80138bc:	68cc      	ldr	r4, [r1, #12]
 80138be:	428c      	cmp	r4, r1
 80138c0:	d000      	beq.n	80138c4 <_malloc_r+0x17c>
 80138c2:	e09b      	b.n	80139fc <_malloc_r+0x2b4>
 80138c4:	2603      	movs	r6, #3
 80138c6:	9c02      	ldr	r4, [sp, #8]
 80138c8:	3108      	adds	r1, #8
 80138ca:	3401      	adds	r4, #1
 80138cc:	9402      	str	r4, [sp, #8]
 80138ce:	4234      	tst	r4, r6
 80138d0:	d1f4      	bne.n	80138bc <_malloc_r+0x174>
 80138d2:	2103      	movs	r1, #3
 80138d4:	420b      	tst	r3, r1
 80138d6:	d000      	beq.n	80138da <_malloc_r+0x192>
 80138d8:	e0b7      	b.n	8013a4a <_malloc_r+0x302>
 80138da:	6843      	ldr	r3, [r0, #4]
 80138dc:	4393      	bics	r3, r2
 80138de:	6043      	str	r3, [r0, #4]
 80138e0:	4b62      	ldr	r3, [pc, #392]	; (8013a6c <_malloc_r+0x324>)
 80138e2:	0052      	lsls	r2, r2, #1
 80138e4:	6859      	ldr	r1, [r3, #4]
 80138e6:	4291      	cmp	r1, r2
 80138e8:	d302      	bcc.n	80138f0 <_malloc_r+0x1a8>
 80138ea:	2a00      	cmp	r2, #0
 80138ec:	d000      	beq.n	80138f0 <_malloc_r+0x1a8>
 80138ee:	e0bb      	b.n	8013a68 <_malloc_r+0x320>
 80138f0:	2303      	movs	r3, #3
 80138f2:	6886      	ldr	r6, [r0, #8]
 80138f4:	6872      	ldr	r2, [r6, #4]
 80138f6:	439a      	bics	r2, r3
 80138f8:	9202      	str	r2, [sp, #8]
 80138fa:	42aa      	cmp	r2, r5
 80138fc:	d303      	bcc.n	8013906 <_malloc_r+0x1be>
 80138fe:	1b51      	subs	r1, r2, r5
 8013900:	290f      	cmp	r1, #15
 8013902:	dd00      	ble.n	8013906 <_malloc_r+0x1be>
 8013904:	e123      	b.n	8013b4e <_malloc_r+0x406>
 8013906:	9b02      	ldr	r3, [sp, #8]
 8013908:	2008      	movs	r0, #8
 801390a:	18f3      	adds	r3, r6, r3
 801390c:	9303      	str	r3, [sp, #12]
 801390e:	4b5a      	ldr	r3, [pc, #360]	; (8013a78 <_malloc_r+0x330>)
 8013910:	681f      	ldr	r7, [r3, #0]
 8013912:	f002 fd19 	bl	8016348 <sysconf>
 8013916:	4b59      	ldr	r3, [pc, #356]	; (8013a7c <_malloc_r+0x334>)
 8013918:	3710      	adds	r7, #16
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	197f      	adds	r7, r7, r5
 801391e:	9004      	str	r0, [sp, #16]
 8013920:	3301      	adds	r3, #1
 8013922:	d003      	beq.n	801392c <_malloc_r+0x1e4>
 8013924:	3f01      	subs	r7, #1
 8013926:	183f      	adds	r7, r7, r0
 8013928:	4243      	negs	r3, r0
 801392a:	401f      	ands	r7, r3
 801392c:	0039      	movs	r1, r7
 801392e:	9801      	ldr	r0, [sp, #4]
 8013930:	f000 fb12 	bl	8013f58 <_sbrk_r>
 8013934:	0004      	movs	r4, r0
 8013936:	1c43      	adds	r3, r0, #1
 8013938:	d100      	bne.n	801393c <_malloc_r+0x1f4>
 801393a:	e0df      	b.n	8013afc <_malloc_r+0x3b4>
 801393c:	9b03      	ldr	r3, [sp, #12]
 801393e:	4283      	cmp	r3, r0
 8013940:	d903      	bls.n	801394a <_malloc_r+0x202>
 8013942:	4b4a      	ldr	r3, [pc, #296]	; (8013a6c <_malloc_r+0x324>)
 8013944:	429e      	cmp	r6, r3
 8013946:	d000      	beq.n	801394a <_malloc_r+0x202>
 8013948:	e0d8      	b.n	8013afc <_malloc_r+0x3b4>
 801394a:	4b4d      	ldr	r3, [pc, #308]	; (8013a80 <_malloc_r+0x338>)
 801394c:	9903      	ldr	r1, [sp, #12]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	18ba      	adds	r2, r7, r2
 8013952:	601a      	str	r2, [r3, #0]
 8013954:	9b04      	ldr	r3, [sp, #16]
 8013956:	3b01      	subs	r3, #1
 8013958:	42a1      	cmp	r1, r4
 801395a:	d000      	beq.n	801395e <_malloc_r+0x216>
 801395c:	e096      	b.n	8013a8c <_malloc_r+0x344>
 801395e:	4219      	tst	r1, r3
 8013960:	d000      	beq.n	8013964 <_malloc_r+0x21c>
 8013962:	e093      	b.n	8013a8c <_malloc_r+0x344>
 8013964:	2601      	movs	r6, #1
 8013966:	4b41      	ldr	r3, [pc, #260]	; (8013a6c <_malloc_r+0x324>)
 8013968:	9a02      	ldr	r2, [sp, #8]
 801396a:	689b      	ldr	r3, [r3, #8]
 801396c:	19d7      	adds	r7, r2, r7
 801396e:	433e      	orrs	r6, r7
 8013970:	605e      	str	r6, [r3, #4]
 8013972:	4b43      	ldr	r3, [pc, #268]	; (8013a80 <_malloc_r+0x338>)
 8013974:	4a43      	ldr	r2, [pc, #268]	; (8013a84 <_malloc_r+0x33c>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	6811      	ldr	r1, [r2, #0]
 801397a:	428b      	cmp	r3, r1
 801397c:	d900      	bls.n	8013980 <_malloc_r+0x238>
 801397e:	6013      	str	r3, [r2, #0]
 8013980:	4a41      	ldr	r2, [pc, #260]	; (8013a88 <_malloc_r+0x340>)
 8013982:	6811      	ldr	r1, [r2, #0]
 8013984:	428b      	cmp	r3, r1
 8013986:	d800      	bhi.n	801398a <_malloc_r+0x242>
 8013988:	e0b8      	b.n	8013afc <_malloc_r+0x3b4>
 801398a:	6013      	str	r3, [r2, #0]
 801398c:	e0b6      	b.n	8013afc <_malloc_r+0x3b4>
 801398e:	0a56      	lsrs	r6, r2, #9
 8013990:	2e04      	cmp	r6, #4
 8013992:	d811      	bhi.n	80139b8 <_malloc_r+0x270>
 8013994:	0991      	lsrs	r1, r2, #6
 8013996:	3138      	adds	r1, #56	; 0x38
 8013998:	00cf      	lsls	r7, r1, #3
 801399a:	183f      	adds	r7, r7, r0
 801399c:	68be      	ldr	r6, [r7, #8]
 801399e:	42b7      	cmp	r7, r6
 80139a0:	d125      	bne.n	80139ee <_malloc_r+0x2a6>
 80139a2:	2201      	movs	r2, #1
 80139a4:	1089      	asrs	r1, r1, #2
 80139a6:	408a      	lsls	r2, r1
 80139a8:	4661      	mov	r1, ip
 80139aa:	430a      	orrs	r2, r1
 80139ac:	6042      	str	r2, [r0, #4]
 80139ae:	60e7      	str	r7, [r4, #12]
 80139b0:	60a6      	str	r6, [r4, #8]
 80139b2:	60bc      	str	r4, [r7, #8]
 80139b4:	60f4      	str	r4, [r6, #12]
 80139b6:	e76e      	b.n	8013896 <_malloc_r+0x14e>
 80139b8:	2e14      	cmp	r6, #20
 80139ba:	d802      	bhi.n	80139c2 <_malloc_r+0x27a>
 80139bc:	0031      	movs	r1, r6
 80139be:	315b      	adds	r1, #91	; 0x5b
 80139c0:	e7ea      	b.n	8013998 <_malloc_r+0x250>
 80139c2:	2e54      	cmp	r6, #84	; 0x54
 80139c4:	d802      	bhi.n	80139cc <_malloc_r+0x284>
 80139c6:	0b11      	lsrs	r1, r2, #12
 80139c8:	316e      	adds	r1, #110	; 0x6e
 80139ca:	e7e5      	b.n	8013998 <_malloc_r+0x250>
 80139cc:	21aa      	movs	r1, #170	; 0xaa
 80139ce:	0049      	lsls	r1, r1, #1
 80139d0:	428e      	cmp	r6, r1
 80139d2:	d802      	bhi.n	80139da <_malloc_r+0x292>
 80139d4:	0bd1      	lsrs	r1, r2, #15
 80139d6:	3177      	adds	r1, #119	; 0x77
 80139d8:	e7de      	b.n	8013998 <_malloc_r+0x250>
 80139da:	4f26      	ldr	r7, [pc, #152]	; (8013a74 <_malloc_r+0x32c>)
 80139dc:	217e      	movs	r1, #126	; 0x7e
 80139de:	42be      	cmp	r6, r7
 80139e0:	d8da      	bhi.n	8013998 <_malloc_r+0x250>
 80139e2:	0c91      	lsrs	r1, r2, #18
 80139e4:	317c      	adds	r1, #124	; 0x7c
 80139e6:	e7d7      	b.n	8013998 <_malloc_r+0x250>
 80139e8:	68b6      	ldr	r6, [r6, #8]
 80139ea:	42b7      	cmp	r7, r6
 80139ec:	d004      	beq.n	80139f8 <_malloc_r+0x2b0>
 80139ee:	2003      	movs	r0, #3
 80139f0:	6871      	ldr	r1, [r6, #4]
 80139f2:	4381      	bics	r1, r0
 80139f4:	4291      	cmp	r1, r2
 80139f6:	d8f7      	bhi.n	80139e8 <_malloc_r+0x2a0>
 80139f8:	68f7      	ldr	r7, [r6, #12]
 80139fa:	e7d8      	b.n	80139ae <_malloc_r+0x266>
 80139fc:	2703      	movs	r7, #3
 80139fe:	6866      	ldr	r6, [r4, #4]
 8013a00:	43be      	bics	r6, r7
 8013a02:	9603      	str	r6, [sp, #12]
 8013a04:	1b77      	subs	r7, r6, r5
 8013a06:	68e6      	ldr	r6, [r4, #12]
 8013a08:	2f0f      	cmp	r7, #15
 8013a0a:	dd10      	ble.n	8013a2e <_malloc_r+0x2e6>
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	68a1      	ldr	r1, [r4, #8]
 8013a10:	1963      	adds	r3, r4, r5
 8013a12:	4315      	orrs	r5, r2
 8013a14:	6065      	str	r5, [r4, #4]
 8013a16:	60ce      	str	r6, [r1, #12]
 8013a18:	60b1      	str	r1, [r6, #8]
 8013a1a:	6143      	str	r3, [r0, #20]
 8013a1c:	6103      	str	r3, [r0, #16]
 8013a1e:	4814      	ldr	r0, [pc, #80]	; (8013a70 <_malloc_r+0x328>)
 8013a20:	433a      	orrs	r2, r7
 8013a22:	60d8      	str	r0, [r3, #12]
 8013a24:	6098      	str	r0, [r3, #8]
 8013a26:	605a      	str	r2, [r3, #4]
 8013a28:	9b03      	ldr	r3, [sp, #12]
 8013a2a:	50e7      	str	r7, [r4, r3]
 8013a2c:	e6ee      	b.n	801380c <_malloc_r+0xc4>
 8013a2e:	2f00      	cmp	r7, #0
 8013a30:	db09      	blt.n	8013a46 <_malloc_r+0x2fe>
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	18e1      	adds	r1, r4, r3
 8013a36:	2301      	movs	r3, #1
 8013a38:	684a      	ldr	r2, [r1, #4]
 8013a3a:	4313      	orrs	r3, r2
 8013a3c:	604b      	str	r3, [r1, #4]
 8013a3e:	68a3      	ldr	r3, [r4, #8]
 8013a40:	60de      	str	r6, [r3, #12]
 8013a42:	60b3      	str	r3, [r6, #8]
 8013a44:	e6e2      	b.n	801380c <_malloc_r+0xc4>
 8013a46:	0034      	movs	r4, r6
 8013a48:	e739      	b.n	80138be <_malloc_r+0x176>
 8013a4a:	2108      	movs	r1, #8
 8013a4c:	4249      	negs	r1, r1
 8013a4e:	448c      	add	ip, r1
 8013a50:	4661      	mov	r1, ip
 8013a52:	6889      	ldr	r1, [r1, #8]
 8013a54:	3b01      	subs	r3, #1
 8013a56:	4561      	cmp	r1, ip
 8013a58:	d100      	bne.n	8013a5c <_malloc_r+0x314>
 8013a5a:	e73a      	b.n	80138d2 <_malloc_r+0x18a>
 8013a5c:	e740      	b.n	80138e0 <_malloc_r+0x198>
 8013a5e:	3304      	adds	r3, #4
 8013a60:	0052      	lsls	r2, r2, #1
 8013a62:	420a      	tst	r2, r1
 8013a64:	d0fb      	beq.n	8013a5e <_malloc_r+0x316>
 8013a66:	e725      	b.n	80138b4 <_malloc_r+0x16c>
 8013a68:	9b02      	ldr	r3, [sp, #8]
 8013a6a:	e7fa      	b.n	8013a62 <_malloc_r+0x31a>
 8013a6c:	20000500 	.word	0x20000500
 8013a70:	20000508 	.word	0x20000508
 8013a74:	00000554 	.word	0x00000554
 8013a78:	20006de0 	.word	0x20006de0
 8013a7c:	20000908 	.word	0x20000908
 8013a80:	20006db0 	.word	0x20006db0
 8013a84:	20006dd8 	.word	0x20006dd8
 8013a88:	20006ddc 	.word	0x20006ddc
 8013a8c:	4934      	ldr	r1, [pc, #208]	; (8013b60 <_malloc_r+0x418>)
 8013a8e:	6808      	ldr	r0, [r1, #0]
 8013a90:	3001      	adds	r0, #1
 8013a92:	d141      	bne.n	8013b18 <_malloc_r+0x3d0>
 8013a94:	600c      	str	r4, [r1, #0]
 8013a96:	2207      	movs	r2, #7
 8013a98:	0021      	movs	r1, r4
 8013a9a:	4011      	ands	r1, r2
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	9103      	str	r1, [sp, #12]
 8013aa0:	4214      	tst	r4, r2
 8013aa2:	d002      	beq.n	8013aaa <_malloc_r+0x362>
 8013aa4:	3008      	adds	r0, #8
 8013aa6:	1a40      	subs	r0, r0, r1
 8013aa8:	1824      	adds	r4, r4, r0
 8013aaa:	19e2      	adds	r2, r4, r7
 8013aac:	9205      	str	r2, [sp, #20]
 8013aae:	9f05      	ldr	r7, [sp, #20]
 8013ab0:	9a04      	ldr	r2, [sp, #16]
 8013ab2:	401f      	ands	r7, r3
 8013ab4:	1810      	adds	r0, r2, r0
 8013ab6:	1bc7      	subs	r7, r0, r7
 8013ab8:	401f      	ands	r7, r3
 8013aba:	0039      	movs	r1, r7
 8013abc:	9801      	ldr	r0, [sp, #4]
 8013abe:	f000 fa4b 	bl	8013f58 <_sbrk_r>
 8013ac2:	1c43      	adds	r3, r0, #1
 8013ac4:	d108      	bne.n	8013ad8 <_malloc_r+0x390>
 8013ac6:	9f03      	ldr	r7, [sp, #12]
 8013ac8:	9805      	ldr	r0, [sp, #20]
 8013aca:	2f00      	cmp	r7, #0
 8013acc:	d004      	beq.n	8013ad8 <_malloc_r+0x390>
 8013ace:	0038      	movs	r0, r7
 8013ad0:	2700      	movs	r7, #0
 8013ad2:	9b05      	ldr	r3, [sp, #20]
 8013ad4:	3808      	subs	r0, #8
 8013ad6:	1818      	adds	r0, r3, r0
 8013ad8:	4a22      	ldr	r2, [pc, #136]	; (8013b64 <_malloc_r+0x41c>)
 8013ada:	1b00      	subs	r0, r0, r4
 8013adc:	6813      	ldr	r3, [r2, #0]
 8013ade:	19db      	adds	r3, r3, r7
 8013ae0:	6013      	str	r3, [r2, #0]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	4b20      	ldr	r3, [pc, #128]	; (8013b68 <_malloc_r+0x420>)
 8013ae6:	19c7      	adds	r7, r0, r7
 8013ae8:	4317      	orrs	r7, r2
 8013aea:	609c      	str	r4, [r3, #8]
 8013aec:	6067      	str	r7, [r4, #4]
 8013aee:	429e      	cmp	r6, r3
 8013af0:	d100      	bne.n	8013af4 <_malloc_r+0x3ac>
 8013af2:	e73e      	b.n	8013972 <_malloc_r+0x22a>
 8013af4:	9b02      	ldr	r3, [sp, #8]
 8013af6:	2b0f      	cmp	r3, #15
 8013af8:	d814      	bhi.n	8013b24 <_malloc_r+0x3dc>
 8013afa:	6062      	str	r2, [r4, #4]
 8013afc:	2203      	movs	r2, #3
 8013afe:	4b1a      	ldr	r3, [pc, #104]	; (8013b68 <_malloc_r+0x420>)
 8013b00:	689b      	ldr	r3, [r3, #8]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	4393      	bics	r3, r2
 8013b06:	1b59      	subs	r1, r3, r5
 8013b08:	42ab      	cmp	r3, r5
 8013b0a:	d301      	bcc.n	8013b10 <_malloc_r+0x3c8>
 8013b0c:	290f      	cmp	r1, #15
 8013b0e:	dc1e      	bgt.n	8013b4e <_malloc_r+0x406>
 8013b10:	9801      	ldr	r0, [sp, #4]
 8013b12:	f000 f853 	bl	8013bbc <__malloc_unlock>
 8013b16:	e624      	b.n	8013762 <_malloc_r+0x1a>
 8013b18:	9903      	ldr	r1, [sp, #12]
 8013b1a:	1a61      	subs	r1, r4, r1
 8013b1c:	1889      	adds	r1, r1, r2
 8013b1e:	4a11      	ldr	r2, [pc, #68]	; (8013b64 <_malloc_r+0x41c>)
 8013b20:	6011      	str	r1, [r2, #0]
 8013b22:	e7b8      	b.n	8013a96 <_malloc_r+0x34e>
 8013b24:	2107      	movs	r1, #7
 8013b26:	9b02      	ldr	r3, [sp, #8]
 8013b28:	3b0c      	subs	r3, #12
 8013b2a:	438b      	bics	r3, r1
 8013b2c:	6871      	ldr	r1, [r6, #4]
 8013b2e:	400a      	ands	r2, r1
 8013b30:	2105      	movs	r1, #5
 8013b32:	431a      	orrs	r2, r3
 8013b34:	6072      	str	r2, [r6, #4]
 8013b36:	18f2      	adds	r2, r6, r3
 8013b38:	6051      	str	r1, [r2, #4]
 8013b3a:	6091      	str	r1, [r2, #8]
 8013b3c:	2b0f      	cmp	r3, #15
 8013b3e:	d800      	bhi.n	8013b42 <_malloc_r+0x3fa>
 8013b40:	e717      	b.n	8013972 <_malloc_r+0x22a>
 8013b42:	0031      	movs	r1, r6
 8013b44:	9801      	ldr	r0, [sp, #4]
 8013b46:	3108      	adds	r1, #8
 8013b48:	f003 faf2 	bl	8017130 <_free_r>
 8013b4c:	e711      	b.n	8013972 <_malloc_r+0x22a>
 8013b4e:	2201      	movs	r2, #1
 8013b50:	0013      	movs	r3, r2
 8013b52:	4805      	ldr	r0, [pc, #20]	; (8013b68 <_malloc_r+0x420>)
 8013b54:	432b      	orrs	r3, r5
 8013b56:	6884      	ldr	r4, [r0, #8]
 8013b58:	6063      	str	r3, [r4, #4]
 8013b5a:	1963      	adds	r3, r4, r5
 8013b5c:	6083      	str	r3, [r0, #8]
 8013b5e:	e626      	b.n	80137ae <_malloc_r+0x66>
 8013b60:	20000908 	.word	0x20000908
 8013b64:	20006db0 	.word	0x20006db0
 8013b68:	20000500 	.word	0x20000500

08013b6c <memcmp>:
 8013b6c:	b530      	push	{r4, r5, lr}
 8013b6e:	2400      	movs	r4, #0
 8013b70:	3901      	subs	r1, #1
 8013b72:	42a2      	cmp	r2, r4
 8013b74:	d101      	bne.n	8013b7a <memcmp+0xe>
 8013b76:	2000      	movs	r0, #0
 8013b78:	e005      	b.n	8013b86 <memcmp+0x1a>
 8013b7a:	5d03      	ldrb	r3, [r0, r4]
 8013b7c:	3401      	adds	r4, #1
 8013b7e:	5d0d      	ldrb	r5, [r1, r4]
 8013b80:	42ab      	cmp	r3, r5
 8013b82:	d0f6      	beq.n	8013b72 <memcmp+0x6>
 8013b84:	1b58      	subs	r0, r3, r5
 8013b86:	bd30      	pop	{r4, r5, pc}

08013b88 <memcpy>:
 8013b88:	2300      	movs	r3, #0
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d100      	bne.n	8013b92 <memcpy+0xa>
 8013b90:	bd10      	pop	{r4, pc}
 8013b92:	5ccc      	ldrb	r4, [r1, r3]
 8013b94:	54c4      	strb	r4, [r0, r3]
 8013b96:	3301      	adds	r3, #1
 8013b98:	e7f8      	b.n	8013b8c <memcpy+0x4>

08013b9a <memset>:
 8013b9a:	0003      	movs	r3, r0
 8013b9c:	1882      	adds	r2, r0, r2
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d100      	bne.n	8013ba4 <memset+0xa>
 8013ba2:	4770      	bx	lr
 8013ba4:	7019      	strb	r1, [r3, #0]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	e7f9      	b.n	8013b9e <memset+0x4>
	...

08013bac <__malloc_lock>:
 8013bac:	b510      	push	{r4, lr}
 8013bae:	4802      	ldr	r0, [pc, #8]	; (8013bb8 <__malloc_lock+0xc>)
 8013bb0:	f003 fef2 	bl	8017998 <__retarget_lock_acquire_recursive>
 8013bb4:	bd10      	pop	{r4, pc}
 8013bb6:	46c0      	nop			; (mov r8, r8)
 8013bb8:	20006de5 	.word	0x20006de5

08013bbc <__malloc_unlock>:
 8013bbc:	b510      	push	{r4, lr}
 8013bbe:	4802      	ldr	r0, [pc, #8]	; (8013bc8 <__malloc_unlock+0xc>)
 8013bc0:	f003 feeb 	bl	801799a <__retarget_lock_release_recursive>
 8013bc4:	bd10      	pop	{r4, pc}
 8013bc6:	46c0      	nop			; (mov r8, r8)
 8013bc8:	20006de5 	.word	0x20006de5

08013bcc <rand>:
 8013bcc:	4b09      	ldr	r3, [pc, #36]	; (8013bf4 <rand+0x28>)
 8013bce:	b510      	push	{r4, lr}
 8013bd0:	681c      	ldr	r4, [r3, #0]
 8013bd2:	4a09      	ldr	r2, [pc, #36]	; (8013bf8 <rand+0x2c>)
 8013bd4:	34a8      	adds	r4, #168	; 0xa8
 8013bd6:	6820      	ldr	r0, [r4, #0]
 8013bd8:	6861      	ldr	r1, [r4, #4]
 8013bda:	4b08      	ldr	r3, [pc, #32]	; (8013bfc <rand+0x30>)
 8013bdc:	f7ec fcc6 	bl	800056c <__aeabi_lmul>
 8013be0:	2201      	movs	r2, #1
 8013be2:	2300      	movs	r3, #0
 8013be4:	1880      	adds	r0, r0, r2
 8013be6:	4159      	adcs	r1, r3
 8013be8:	6020      	str	r0, [r4, #0]
 8013bea:	6061      	str	r1, [r4, #4]
 8013bec:	0048      	lsls	r0, r1, #1
 8013bee:	0840      	lsrs	r0, r0, #1
 8013bf0:	bd10      	pop	{r4, pc}
 8013bf2:	46c0      	nop			; (mov r8, r8)
 8013bf4:	200000d0 	.word	0x200000d0
 8013bf8:	4c957f2d 	.word	0x4c957f2d
 8013bfc:	5851f42d 	.word	0x5851f42d

08013c00 <realloc>:
 8013c00:	b510      	push	{r4, lr}
 8013c02:	4b03      	ldr	r3, [pc, #12]	; (8013c10 <realloc+0x10>)
 8013c04:	000a      	movs	r2, r1
 8013c06:	0001      	movs	r1, r0
 8013c08:	6818      	ldr	r0, [r3, #0]
 8013c0a:	f000 f803 	bl	8013c14 <_realloc_r>
 8013c0e:	bd10      	pop	{r4, pc}
 8013c10:	200000d0 	.word	0x200000d0

08013c14 <_realloc_r>:
 8013c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c16:	b087      	sub	sp, #28
 8013c18:	1e0c      	subs	r4, r1, #0
 8013c1a:	9002      	str	r0, [sp, #8]
 8013c1c:	9205      	str	r2, [sp, #20]
 8013c1e:	d106      	bne.n	8013c2e <_realloc_r+0x1a>
 8013c20:	0011      	movs	r1, r2
 8013c22:	f7ff fd91 	bl	8013748 <_malloc_r>
 8013c26:	0007      	movs	r7, r0
 8013c28:	0038      	movs	r0, r7
 8013c2a:	b007      	add	sp, #28
 8013c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c2e:	9802      	ldr	r0, [sp, #8]
 8013c30:	f7ff ffbc 	bl	8013bac <__malloc_lock>
 8013c34:	9b05      	ldr	r3, [sp, #20]
 8013c36:	330b      	adds	r3, #11
 8013c38:	2b16      	cmp	r3, #22
 8013c3a:	d908      	bls.n	8013c4e <_realloc_r+0x3a>
 8013c3c:	2207      	movs	r2, #7
 8013c3e:	4393      	bics	r3, r2
 8013c40:	9301      	str	r3, [sp, #4]
 8013c42:	d506      	bpl.n	8013c52 <_realloc_r+0x3e>
 8013c44:	230c      	movs	r3, #12
 8013c46:	9a02      	ldr	r2, [sp, #8]
 8013c48:	2700      	movs	r7, #0
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	e7ec      	b.n	8013c28 <_realloc_r+0x14>
 8013c4e:	2310      	movs	r3, #16
 8013c50:	9301      	str	r3, [sp, #4]
 8013c52:	9b01      	ldr	r3, [sp, #4]
 8013c54:	9a05      	ldr	r2, [sp, #20]
 8013c56:	4293      	cmp	r3, r2
 8013c58:	d3f4      	bcc.n	8013c44 <_realloc_r+0x30>
 8013c5a:	0023      	movs	r3, r4
 8013c5c:	3b08      	subs	r3, #8
 8013c5e:	685f      	ldr	r7, [r3, #4]
 8013c60:	9304      	str	r3, [sp, #16]
 8013c62:	003a      	movs	r2, r7
 8013c64:	2303      	movs	r3, #3
 8013c66:	439a      	bics	r2, r3
 8013c68:	9b01      	ldr	r3, [sp, #4]
 8013c6a:	9203      	str	r2, [sp, #12]
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	dc00      	bgt.n	8013c72 <_realloc_r+0x5e>
 8013c70:	e167      	b.n	8013f42 <_realloc_r+0x32e>
 8013c72:	9b04      	ldr	r3, [sp, #16]
 8013c74:	48b7      	ldr	r0, [pc, #732]	; (8013f54 <_realloc_r+0x340>)
 8013c76:	189b      	adds	r3, r3, r2
 8013c78:	6882      	ldr	r2, [r0, #8]
 8013c7a:	4694      	mov	ip, r2
 8013c7c:	685a      	ldr	r2, [r3, #4]
 8013c7e:	459c      	cmp	ip, r3
 8013c80:	d006      	beq.n	8013c90 <_realloc_r+0x7c>
 8013c82:	2501      	movs	r5, #1
 8013c84:	0011      	movs	r1, r2
 8013c86:	43a9      	bics	r1, r5
 8013c88:	1859      	adds	r1, r3, r1
 8013c8a:	6849      	ldr	r1, [r1, #4]
 8013c8c:	4229      	tst	r1, r5
 8013c8e:	d126      	bne.n	8013cde <_realloc_r+0xca>
 8013c90:	2103      	movs	r1, #3
 8013c92:	438a      	bics	r2, r1
 8013c94:	9903      	ldr	r1, [sp, #12]
 8013c96:	188e      	adds	r6, r1, r2
 8013c98:	9901      	ldr	r1, [sp, #4]
 8013c9a:	459c      	cmp	ip, r3
 8013c9c:	d117      	bne.n	8013cce <_realloc_r+0xba>
 8013c9e:	3110      	adds	r1, #16
 8013ca0:	42b1      	cmp	r1, r6
 8013ca2:	dc1e      	bgt.n	8013ce2 <_realloc_r+0xce>
 8013ca4:	9b01      	ldr	r3, [sp, #4]
 8013ca6:	9a04      	ldr	r2, [sp, #16]
 8013ca8:	469c      	mov	ip, r3
 8013caa:	1af6      	subs	r6, r6, r3
 8013cac:	2301      	movs	r3, #1
 8013cae:	4462      	add	r2, ip
 8013cb0:	431e      	orrs	r6, r3
 8013cb2:	6082      	str	r2, [r0, #8]
 8013cb4:	6056      	str	r6, [r2, #4]
 8013cb6:	0022      	movs	r2, r4
 8013cb8:	3a08      	subs	r2, #8
 8013cba:	6851      	ldr	r1, [r2, #4]
 8013cbc:	9802      	ldr	r0, [sp, #8]
 8013cbe:	400b      	ands	r3, r1
 8013cc0:	4661      	mov	r1, ip
 8013cc2:	430b      	orrs	r3, r1
 8013cc4:	6053      	str	r3, [r2, #4]
 8013cc6:	f7ff ff79 	bl	8013bbc <__malloc_unlock>
 8013cca:	0027      	movs	r7, r4
 8013ccc:	e7ac      	b.n	8013c28 <_realloc_r+0x14>
 8013cce:	42b1      	cmp	r1, r6
 8013cd0:	dc07      	bgt.n	8013ce2 <_realloc_r+0xce>
 8013cd2:	68da      	ldr	r2, [r3, #12]
 8013cd4:	689b      	ldr	r3, [r3, #8]
 8013cd6:	60da      	str	r2, [r3, #12]
 8013cd8:	6093      	str	r3, [r2, #8]
 8013cda:	9d04      	ldr	r5, [sp, #16]
 8013cdc:	e07f      	b.n	8013dde <_realloc_r+0x1ca>
 8013cde:	2200      	movs	r2, #0
 8013ce0:	0013      	movs	r3, r2
 8013ce2:	07f9      	lsls	r1, r7, #31
 8013ce4:	d500      	bpl.n	8013ce8 <_realloc_r+0xd4>
 8013ce6:	e0e2      	b.n	8013eae <_realloc_r+0x29a>
 8013ce8:	0021      	movs	r1, r4
 8013cea:	3908      	subs	r1, #8
 8013cec:	680d      	ldr	r5, [r1, #0]
 8013cee:	9904      	ldr	r1, [sp, #16]
 8013cf0:	1b4d      	subs	r5, r1, r5
 8013cf2:	2103      	movs	r1, #3
 8013cf4:	686f      	ldr	r7, [r5, #4]
 8013cf6:	438f      	bics	r7, r1
 8013cf8:	9903      	ldr	r1, [sp, #12]
 8013cfa:	187f      	adds	r7, r7, r1
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d100      	bne.n	8013d02 <_realloc_r+0xee>
 8013d00:	e0a0      	b.n	8013e44 <_realloc_r+0x230>
 8013d02:	19d6      	adds	r6, r2, r7
 8013d04:	459c      	cmp	ip, r3
 8013d06:	d149      	bne.n	8013d9c <_realloc_r+0x188>
 8013d08:	9b01      	ldr	r3, [sp, #4]
 8013d0a:	3310      	adds	r3, #16
 8013d0c:	42b3      	cmp	r3, r6
 8013d0e:	dd00      	ble.n	8013d12 <_realloc_r+0xfe>
 8013d10:	e098      	b.n	8013e44 <_realloc_r+0x230>
 8013d12:	68aa      	ldr	r2, [r5, #8]
 8013d14:	68eb      	ldr	r3, [r5, #12]
 8013d16:	002f      	movs	r7, r5
 8013d18:	60d3      	str	r3, [r2, #12]
 8013d1a:	609a      	str	r2, [r3, #8]
 8013d1c:	000a      	movs	r2, r1
 8013d1e:	3a04      	subs	r2, #4
 8013d20:	3708      	adds	r7, #8
 8013d22:	2a24      	cmp	r2, #36	; 0x24
 8013d24:	d835      	bhi.n	8013d92 <_realloc_r+0x17e>
 8013d26:	003b      	movs	r3, r7
 8013d28:	2a13      	cmp	r2, #19
 8013d2a:	d908      	bls.n	8013d3e <_realloc_r+0x12a>
 8013d2c:	6823      	ldr	r3, [r4, #0]
 8013d2e:	60ab      	str	r3, [r5, #8]
 8013d30:	6863      	ldr	r3, [r4, #4]
 8013d32:	60eb      	str	r3, [r5, #12]
 8013d34:	2a1b      	cmp	r2, #27
 8013d36:	d81a      	bhi.n	8013d6e <_realloc_r+0x15a>
 8013d38:	002b      	movs	r3, r5
 8013d3a:	3408      	adds	r4, #8
 8013d3c:	3310      	adds	r3, #16
 8013d3e:	6822      	ldr	r2, [r4, #0]
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	6862      	ldr	r2, [r4, #4]
 8013d44:	605a      	str	r2, [r3, #4]
 8013d46:	68a2      	ldr	r2, [r4, #8]
 8013d48:	609a      	str	r2, [r3, #8]
 8013d4a:	9b01      	ldr	r3, [sp, #4]
 8013d4c:	18ea      	adds	r2, r5, r3
 8013d4e:	4b81      	ldr	r3, [pc, #516]	; (8013f54 <_realloc_r+0x340>)
 8013d50:	609a      	str	r2, [r3, #8]
 8013d52:	9b01      	ldr	r3, [sp, #4]
 8013d54:	1af6      	subs	r6, r6, r3
 8013d56:	2301      	movs	r3, #1
 8013d58:	431e      	orrs	r6, r3
 8013d5a:	6056      	str	r6, [r2, #4]
 8013d5c:	686a      	ldr	r2, [r5, #4]
 8013d5e:	4013      	ands	r3, r2
 8013d60:	9a01      	ldr	r2, [sp, #4]
 8013d62:	4313      	orrs	r3, r2
 8013d64:	606b      	str	r3, [r5, #4]
 8013d66:	9802      	ldr	r0, [sp, #8]
 8013d68:	f7ff ff28 	bl	8013bbc <__malloc_unlock>
 8013d6c:	e75c      	b.n	8013c28 <_realloc_r+0x14>
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	612b      	str	r3, [r5, #16]
 8013d72:	68e3      	ldr	r3, [r4, #12]
 8013d74:	616b      	str	r3, [r5, #20]
 8013d76:	2a24      	cmp	r2, #36	; 0x24
 8013d78:	d003      	beq.n	8013d82 <_realloc_r+0x16e>
 8013d7a:	002b      	movs	r3, r5
 8013d7c:	3410      	adds	r4, #16
 8013d7e:	3318      	adds	r3, #24
 8013d80:	e7dd      	b.n	8013d3e <_realloc_r+0x12a>
 8013d82:	6923      	ldr	r3, [r4, #16]
 8013d84:	61ab      	str	r3, [r5, #24]
 8013d86:	002b      	movs	r3, r5
 8013d88:	6962      	ldr	r2, [r4, #20]
 8013d8a:	3320      	adds	r3, #32
 8013d8c:	61ea      	str	r2, [r5, #28]
 8013d8e:	3418      	adds	r4, #24
 8013d90:	e7d5      	b.n	8013d3e <_realloc_r+0x12a>
 8013d92:	0021      	movs	r1, r4
 8013d94:	0038      	movs	r0, r7
 8013d96:	f003 fe1e 	bl	80179d6 <memmove>
 8013d9a:	e7d6      	b.n	8013d4a <_realloc_r+0x136>
 8013d9c:	9a01      	ldr	r2, [sp, #4]
 8013d9e:	42b2      	cmp	r2, r6
 8013da0:	dc50      	bgt.n	8013e44 <_realloc_r+0x230>
 8013da2:	0028      	movs	r0, r5
 8013da4:	68da      	ldr	r2, [r3, #12]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	3008      	adds	r0, #8
 8013daa:	60da      	str	r2, [r3, #12]
 8013dac:	6093      	str	r3, [r2, #8]
 8013dae:	68aa      	ldr	r2, [r5, #8]
 8013db0:	68eb      	ldr	r3, [r5, #12]
 8013db2:	60d3      	str	r3, [r2, #12]
 8013db4:	609a      	str	r2, [r3, #8]
 8013db6:	9a03      	ldr	r2, [sp, #12]
 8013db8:	3a04      	subs	r2, #4
 8013dba:	2a24      	cmp	r2, #36	; 0x24
 8013dbc:	d83e      	bhi.n	8013e3c <_realloc_r+0x228>
 8013dbe:	2a13      	cmp	r2, #19
 8013dc0:	d907      	bls.n	8013dd2 <_realloc_r+0x1be>
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	60ab      	str	r3, [r5, #8]
 8013dc6:	6863      	ldr	r3, [r4, #4]
 8013dc8:	60eb      	str	r3, [r5, #12]
 8013dca:	2a1b      	cmp	r2, #27
 8013dcc:	d824      	bhi.n	8013e18 <_realloc_r+0x204>
 8013dce:	3408      	adds	r4, #8
 8013dd0:	3008      	adds	r0, #8
 8013dd2:	6823      	ldr	r3, [r4, #0]
 8013dd4:	6003      	str	r3, [r0, #0]
 8013dd6:	6863      	ldr	r3, [r4, #4]
 8013dd8:	6043      	str	r3, [r0, #4]
 8013dda:	68a3      	ldr	r3, [r4, #8]
 8013ddc:	6083      	str	r3, [r0, #8]
 8013dde:	9b01      	ldr	r3, [sp, #4]
 8013de0:	6868      	ldr	r0, [r5, #4]
 8013de2:	1af4      	subs	r4, r6, r3
 8013de4:	2301      	movs	r3, #1
 8013de6:	19aa      	adds	r2, r5, r6
 8013de8:	4018      	ands	r0, r3
 8013dea:	2c0f      	cmp	r4, #15
 8013dec:	d800      	bhi.n	8013df0 <_realloc_r+0x1dc>
 8013dee:	e0aa      	b.n	8013f46 <_realloc_r+0x332>
 8013df0:	9901      	ldr	r1, [sp, #4]
 8013df2:	9e01      	ldr	r6, [sp, #4]
 8013df4:	1869      	adds	r1, r5, r1
 8013df6:	4330      	orrs	r0, r6
 8013df8:	431c      	orrs	r4, r3
 8013dfa:	6068      	str	r0, [r5, #4]
 8013dfc:	604c      	str	r4, [r1, #4]
 8013dfe:	6850      	ldr	r0, [r2, #4]
 8013e00:	3108      	adds	r1, #8
 8013e02:	4303      	orrs	r3, r0
 8013e04:	6053      	str	r3, [r2, #4]
 8013e06:	9802      	ldr	r0, [sp, #8]
 8013e08:	f003 f992 	bl	8017130 <_free_r>
 8013e0c:	9802      	ldr	r0, [sp, #8]
 8013e0e:	3508      	adds	r5, #8
 8013e10:	f7ff fed4 	bl	8013bbc <__malloc_unlock>
 8013e14:	002f      	movs	r7, r5
 8013e16:	e707      	b.n	8013c28 <_realloc_r+0x14>
 8013e18:	68a3      	ldr	r3, [r4, #8]
 8013e1a:	612b      	str	r3, [r5, #16]
 8013e1c:	68e3      	ldr	r3, [r4, #12]
 8013e1e:	616b      	str	r3, [r5, #20]
 8013e20:	2a24      	cmp	r2, #36	; 0x24
 8013e22:	d003      	beq.n	8013e2c <_realloc_r+0x218>
 8013e24:	0028      	movs	r0, r5
 8013e26:	3410      	adds	r4, #16
 8013e28:	3018      	adds	r0, #24
 8013e2a:	e7d2      	b.n	8013dd2 <_realloc_r+0x1be>
 8013e2c:	0028      	movs	r0, r5
 8013e2e:	6923      	ldr	r3, [r4, #16]
 8013e30:	3020      	adds	r0, #32
 8013e32:	61ab      	str	r3, [r5, #24]
 8013e34:	6963      	ldr	r3, [r4, #20]
 8013e36:	3418      	adds	r4, #24
 8013e38:	61eb      	str	r3, [r5, #28]
 8013e3a:	e7ca      	b.n	8013dd2 <_realloc_r+0x1be>
 8013e3c:	0021      	movs	r1, r4
 8013e3e:	f003 fdca 	bl	80179d6 <memmove>
 8013e42:	e7cc      	b.n	8013dde <_realloc_r+0x1ca>
 8013e44:	9b01      	ldr	r3, [sp, #4]
 8013e46:	42bb      	cmp	r3, r7
 8013e48:	dc31      	bgt.n	8013eae <_realloc_r+0x29a>
 8013e4a:	0028      	movs	r0, r5
 8013e4c:	68aa      	ldr	r2, [r5, #8]
 8013e4e:	68eb      	ldr	r3, [r5, #12]
 8013e50:	3008      	adds	r0, #8
 8013e52:	60d3      	str	r3, [r2, #12]
 8013e54:	609a      	str	r2, [r3, #8]
 8013e56:	9a03      	ldr	r2, [sp, #12]
 8013e58:	3a04      	subs	r2, #4
 8013e5a:	2a24      	cmp	r2, #36	; 0x24
 8013e5c:	d823      	bhi.n	8013ea6 <_realloc_r+0x292>
 8013e5e:	2a13      	cmp	r2, #19
 8013e60:	d907      	bls.n	8013e72 <_realloc_r+0x25e>
 8013e62:	6823      	ldr	r3, [r4, #0]
 8013e64:	60ab      	str	r3, [r5, #8]
 8013e66:	6863      	ldr	r3, [r4, #4]
 8013e68:	60eb      	str	r3, [r5, #12]
 8013e6a:	2a1b      	cmp	r2, #27
 8013e6c:	d809      	bhi.n	8013e82 <_realloc_r+0x26e>
 8013e6e:	3408      	adds	r4, #8
 8013e70:	3008      	adds	r0, #8
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	6003      	str	r3, [r0, #0]
 8013e76:	6863      	ldr	r3, [r4, #4]
 8013e78:	6043      	str	r3, [r0, #4]
 8013e7a:	68a3      	ldr	r3, [r4, #8]
 8013e7c:	6083      	str	r3, [r0, #8]
 8013e7e:	003e      	movs	r6, r7
 8013e80:	e7ad      	b.n	8013dde <_realloc_r+0x1ca>
 8013e82:	68a3      	ldr	r3, [r4, #8]
 8013e84:	612b      	str	r3, [r5, #16]
 8013e86:	68e3      	ldr	r3, [r4, #12]
 8013e88:	616b      	str	r3, [r5, #20]
 8013e8a:	2a24      	cmp	r2, #36	; 0x24
 8013e8c:	d003      	beq.n	8013e96 <_realloc_r+0x282>
 8013e8e:	0028      	movs	r0, r5
 8013e90:	3410      	adds	r4, #16
 8013e92:	3018      	adds	r0, #24
 8013e94:	e7ed      	b.n	8013e72 <_realloc_r+0x25e>
 8013e96:	0028      	movs	r0, r5
 8013e98:	6923      	ldr	r3, [r4, #16]
 8013e9a:	3020      	adds	r0, #32
 8013e9c:	61ab      	str	r3, [r5, #24]
 8013e9e:	6963      	ldr	r3, [r4, #20]
 8013ea0:	3418      	adds	r4, #24
 8013ea2:	61eb      	str	r3, [r5, #28]
 8013ea4:	e7e5      	b.n	8013e72 <_realloc_r+0x25e>
 8013ea6:	0021      	movs	r1, r4
 8013ea8:	f003 fd95 	bl	80179d6 <memmove>
 8013eac:	e7e7      	b.n	8013e7e <_realloc_r+0x26a>
 8013eae:	9905      	ldr	r1, [sp, #20]
 8013eb0:	9802      	ldr	r0, [sp, #8]
 8013eb2:	f7ff fc49 	bl	8013748 <_malloc_r>
 8013eb6:	1e07      	subs	r7, r0, #0
 8013eb8:	d100      	bne.n	8013ebc <_realloc_r+0x2a8>
 8013eba:	e754      	b.n	8013d66 <_realloc_r+0x152>
 8013ebc:	0023      	movs	r3, r4
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	3b08      	subs	r3, #8
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	4393      	bics	r3, r2
 8013ec6:	9a04      	ldr	r2, [sp, #16]
 8013ec8:	18d3      	adds	r3, r2, r3
 8013eca:	0002      	movs	r2, r0
 8013ecc:	3a08      	subs	r2, #8
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d105      	bne.n	8013ede <_realloc_r+0x2ca>
 8013ed2:	685e      	ldr	r6, [r3, #4]
 8013ed4:	2303      	movs	r3, #3
 8013ed6:	439e      	bics	r6, r3
 8013ed8:	9b03      	ldr	r3, [sp, #12]
 8013eda:	18f6      	adds	r6, r6, r3
 8013edc:	e6fd      	b.n	8013cda <_realloc_r+0xc6>
 8013ede:	9a03      	ldr	r2, [sp, #12]
 8013ee0:	3a04      	subs	r2, #4
 8013ee2:	2a24      	cmp	r2, #36	; 0x24
 8013ee4:	d829      	bhi.n	8013f3a <_realloc_r+0x326>
 8013ee6:	0003      	movs	r3, r0
 8013ee8:	0021      	movs	r1, r4
 8013eea:	2a13      	cmp	r2, #19
 8013eec:	d908      	bls.n	8013f00 <_realloc_r+0x2ec>
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	6003      	str	r3, [r0, #0]
 8013ef2:	6863      	ldr	r3, [r4, #4]
 8013ef4:	6043      	str	r3, [r0, #4]
 8013ef6:	2a1b      	cmp	r2, #27
 8013ef8:	d80d      	bhi.n	8013f16 <_realloc_r+0x302>
 8013efa:	0003      	movs	r3, r0
 8013efc:	3108      	adds	r1, #8
 8013efe:	3308      	adds	r3, #8
 8013f00:	680a      	ldr	r2, [r1, #0]
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	684a      	ldr	r2, [r1, #4]
 8013f06:	605a      	str	r2, [r3, #4]
 8013f08:	688a      	ldr	r2, [r1, #8]
 8013f0a:	609a      	str	r2, [r3, #8]
 8013f0c:	0021      	movs	r1, r4
 8013f0e:	9802      	ldr	r0, [sp, #8]
 8013f10:	f003 f90e 	bl	8017130 <_free_r>
 8013f14:	e727      	b.n	8013d66 <_realloc_r+0x152>
 8013f16:	68a3      	ldr	r3, [r4, #8]
 8013f18:	6083      	str	r3, [r0, #8]
 8013f1a:	68e3      	ldr	r3, [r4, #12]
 8013f1c:	60c3      	str	r3, [r0, #12]
 8013f1e:	2a24      	cmp	r2, #36	; 0x24
 8013f20:	d003      	beq.n	8013f2a <_realloc_r+0x316>
 8013f22:	0003      	movs	r3, r0
 8013f24:	3110      	adds	r1, #16
 8013f26:	3310      	adds	r3, #16
 8013f28:	e7ea      	b.n	8013f00 <_realloc_r+0x2ec>
 8013f2a:	6923      	ldr	r3, [r4, #16]
 8013f2c:	3118      	adds	r1, #24
 8013f2e:	6103      	str	r3, [r0, #16]
 8013f30:	0003      	movs	r3, r0
 8013f32:	6962      	ldr	r2, [r4, #20]
 8013f34:	3318      	adds	r3, #24
 8013f36:	6142      	str	r2, [r0, #20]
 8013f38:	e7e2      	b.n	8013f00 <_realloc_r+0x2ec>
 8013f3a:	0021      	movs	r1, r4
 8013f3c:	f003 fd4b 	bl	80179d6 <memmove>
 8013f40:	e7e4      	b.n	8013f0c <_realloc_r+0x2f8>
 8013f42:	9e03      	ldr	r6, [sp, #12]
 8013f44:	e6c9      	b.n	8013cda <_realloc_r+0xc6>
 8013f46:	4306      	orrs	r6, r0
 8013f48:	606e      	str	r6, [r5, #4]
 8013f4a:	6851      	ldr	r1, [r2, #4]
 8013f4c:	430b      	orrs	r3, r1
 8013f4e:	6053      	str	r3, [r2, #4]
 8013f50:	e75c      	b.n	8013e0c <_realloc_r+0x1f8>
 8013f52:	46c0      	nop			; (mov r8, r8)
 8013f54:	20000500 	.word	0x20000500

08013f58 <_sbrk_r>:
 8013f58:	2300      	movs	r3, #0
 8013f5a:	b570      	push	{r4, r5, r6, lr}
 8013f5c:	4d06      	ldr	r5, [pc, #24]	; (8013f78 <_sbrk_r+0x20>)
 8013f5e:	0004      	movs	r4, r0
 8013f60:	0008      	movs	r0, r1
 8013f62:	602b      	str	r3, [r5, #0]
 8013f64:	f005 fe7c 	bl	8019c60 <_sbrk>
 8013f68:	1c43      	adds	r3, r0, #1
 8013f6a:	d103      	bne.n	8013f74 <_sbrk_r+0x1c>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d000      	beq.n	8013f74 <_sbrk_r+0x1c>
 8013f72:	6023      	str	r3, [r4, #0]
 8013f74:	bd70      	pop	{r4, r5, r6, pc}
 8013f76:	46c0      	nop			; (mov r8, r8)
 8013f78:	20006de8 	.word	0x20006de8

08013f7c <sprintf>:
 8013f7c:	b40e      	push	{r1, r2, r3}
 8013f7e:	b500      	push	{lr}
 8013f80:	490b      	ldr	r1, [pc, #44]	; (8013fb0 <sprintf+0x34>)
 8013f82:	b09c      	sub	sp, #112	; 0x70
 8013f84:	ab1d      	add	r3, sp, #116	; 0x74
 8013f86:	9002      	str	r0, [sp, #8]
 8013f88:	9006      	str	r0, [sp, #24]
 8013f8a:	9107      	str	r1, [sp, #28]
 8013f8c:	9104      	str	r1, [sp, #16]
 8013f8e:	4809      	ldr	r0, [pc, #36]	; (8013fb4 <sprintf+0x38>)
 8013f90:	4909      	ldr	r1, [pc, #36]	; (8013fb8 <sprintf+0x3c>)
 8013f92:	cb04      	ldmia	r3!, {r2}
 8013f94:	9105      	str	r1, [sp, #20]
 8013f96:	6800      	ldr	r0, [r0, #0]
 8013f98:	a902      	add	r1, sp, #8
 8013f9a:	9301      	str	r3, [sp, #4]
 8013f9c:	f000 ff66 	bl	8014e6c <_svfprintf_r>
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	9a02      	ldr	r2, [sp, #8]
 8013fa4:	7013      	strb	r3, [r2, #0]
 8013fa6:	b01c      	add	sp, #112	; 0x70
 8013fa8:	bc08      	pop	{r3}
 8013faa:	b003      	add	sp, #12
 8013fac:	4718      	bx	r3
 8013fae:	46c0      	nop			; (mov r8, r8)
 8013fb0:	7fffffff 	.word	0x7fffffff
 8013fb4:	200000d0 	.word	0x200000d0
 8013fb8:	ffff0208 	.word	0xffff0208

08013fbc <strcat>:
 8013fbc:	0002      	movs	r2, r0
 8013fbe:	b510      	push	{r4, lr}
 8013fc0:	7813      	ldrb	r3, [r2, #0]
 8013fc2:	0014      	movs	r4, r2
 8013fc4:	3201      	adds	r2, #1
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1fa      	bne.n	8013fc0 <strcat+0x4>
 8013fca:	5cca      	ldrb	r2, [r1, r3]
 8013fcc:	54e2      	strb	r2, [r4, r3]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d1fa      	bne.n	8013fca <strcat+0xe>
 8013fd4:	bd10      	pop	{r4, pc}

08013fd6 <strchr>:
 8013fd6:	b2c9      	uxtb	r1, r1
 8013fd8:	7803      	ldrb	r3, [r0, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d004      	beq.n	8013fe8 <strchr+0x12>
 8013fde:	428b      	cmp	r3, r1
 8013fe0:	d100      	bne.n	8013fe4 <strchr+0xe>
 8013fe2:	4770      	bx	lr
 8013fe4:	3001      	adds	r0, #1
 8013fe6:	e7f7      	b.n	8013fd8 <strchr+0x2>
 8013fe8:	424b      	negs	r3, r1
 8013fea:	4159      	adcs	r1, r3
 8013fec:	4249      	negs	r1, r1
 8013fee:	4008      	ands	r0, r1
 8013ff0:	e7f7      	b.n	8013fe2 <strchr+0xc>

08013ff2 <strcpy>:
 8013ff2:	0003      	movs	r3, r0
 8013ff4:	780a      	ldrb	r2, [r1, #0]
 8013ff6:	3101      	adds	r1, #1
 8013ff8:	701a      	strb	r2, [r3, #0]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	2a00      	cmp	r2, #0
 8013ffe:	d1f9      	bne.n	8013ff4 <strcpy+0x2>
 8014000:	4770      	bx	lr

08014002 <strncmp>:
 8014002:	b530      	push	{r4, r5, lr}
 8014004:	0005      	movs	r5, r0
 8014006:	1e10      	subs	r0, r2, #0
 8014008:	d008      	beq.n	801401c <strncmp+0x1a>
 801400a:	2400      	movs	r4, #0
 801400c:	3a01      	subs	r2, #1
 801400e:	5d2b      	ldrb	r3, [r5, r4]
 8014010:	5d08      	ldrb	r0, [r1, r4]
 8014012:	4283      	cmp	r3, r0
 8014014:	d101      	bne.n	801401a <strncmp+0x18>
 8014016:	4294      	cmp	r4, r2
 8014018:	d101      	bne.n	801401e <strncmp+0x1c>
 801401a:	1a18      	subs	r0, r3, r0
 801401c:	bd30      	pop	{r4, r5, pc}
 801401e:	3401      	adds	r4, #1
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1f4      	bne.n	801400e <strncmp+0xc>
 8014024:	e7f9      	b.n	801401a <strncmp+0x18>

08014026 <strncpy>:
 8014026:	0003      	movs	r3, r0
 8014028:	b530      	push	{r4, r5, lr}
 801402a:	001d      	movs	r5, r3
 801402c:	2a00      	cmp	r2, #0
 801402e:	d006      	beq.n	801403e <strncpy+0x18>
 8014030:	780c      	ldrb	r4, [r1, #0]
 8014032:	3a01      	subs	r2, #1
 8014034:	3301      	adds	r3, #1
 8014036:	702c      	strb	r4, [r5, #0]
 8014038:	3101      	adds	r1, #1
 801403a:	2c00      	cmp	r4, #0
 801403c:	d1f5      	bne.n	801402a <strncpy+0x4>
 801403e:	2100      	movs	r1, #0
 8014040:	189a      	adds	r2, r3, r2
 8014042:	4293      	cmp	r3, r2
 8014044:	d100      	bne.n	8014048 <strncpy+0x22>
 8014046:	bd30      	pop	{r4, r5, pc}
 8014048:	7019      	strb	r1, [r3, #0]
 801404a:	3301      	adds	r3, #1
 801404c:	e7f9      	b.n	8014042 <strncpy+0x1c>
	...

08014050 <sulp>:
 8014050:	b570      	push	{r4, r5, r6, lr}
 8014052:	0016      	movs	r6, r2
 8014054:	000d      	movs	r5, r1
 8014056:	f004 f805 	bl	8018064 <__ulp>
 801405a:	2e00      	cmp	r6, #0
 801405c:	d00d      	beq.n	801407a <sulp+0x2a>
 801405e:	236b      	movs	r3, #107	; 0x6b
 8014060:	006a      	lsls	r2, r5, #1
 8014062:	0d52      	lsrs	r2, r2, #21
 8014064:	1a9b      	subs	r3, r3, r2
 8014066:	2b00      	cmp	r3, #0
 8014068:	dd07      	ble.n	801407a <sulp+0x2a>
 801406a:	2400      	movs	r4, #0
 801406c:	4a03      	ldr	r2, [pc, #12]	; (801407c <sulp+0x2c>)
 801406e:	051b      	lsls	r3, r3, #20
 8014070:	189d      	adds	r5, r3, r2
 8014072:	002b      	movs	r3, r5
 8014074:	0022      	movs	r2, r4
 8014076:	f7ee f837 	bl	80020e8 <__aeabi_dmul>
 801407a:	bd70      	pop	{r4, r5, r6, pc}
 801407c:	3ff00000 	.word	0x3ff00000

08014080 <_strtod_l>:
 8014080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014082:	001d      	movs	r5, r3
 8014084:	2300      	movs	r3, #0
 8014086:	b0a5      	sub	sp, #148	; 0x94
 8014088:	9320      	str	r3, [sp, #128]	; 0x80
 801408a:	4bac      	ldr	r3, [pc, #688]	; (801433c <_strtod_l+0x2bc>)
 801408c:	9005      	str	r0, [sp, #20]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	9108      	str	r1, [sp, #32]
 8014092:	0018      	movs	r0, r3
 8014094:	9307      	str	r3, [sp, #28]
 8014096:	921b      	str	r2, [sp, #108]	; 0x6c
 8014098:	f7ec f83e 	bl	8000118 <strlen>
 801409c:	2600      	movs	r6, #0
 801409e:	0004      	movs	r4, r0
 80140a0:	2700      	movs	r7, #0
 80140a2:	9b08      	ldr	r3, [sp, #32]
 80140a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80140a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80140a8:	7813      	ldrb	r3, [r2, #0]
 80140aa:	2b2b      	cmp	r3, #43	; 0x2b
 80140ac:	d058      	beq.n	8014160 <_strtod_l+0xe0>
 80140ae:	d844      	bhi.n	801413a <_strtod_l+0xba>
 80140b0:	2b0d      	cmp	r3, #13
 80140b2:	d83d      	bhi.n	8014130 <_strtod_l+0xb0>
 80140b4:	2b08      	cmp	r3, #8
 80140b6:	d83d      	bhi.n	8014134 <_strtod_l+0xb4>
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d047      	beq.n	801414c <_strtod_l+0xcc>
 80140bc:	2300      	movs	r3, #0
 80140be:	930e      	str	r3, [sp, #56]	; 0x38
 80140c0:	2200      	movs	r2, #0
 80140c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80140c4:	920a      	str	r2, [sp, #40]	; 0x28
 80140c6:	9306      	str	r3, [sp, #24]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	2b30      	cmp	r3, #48	; 0x30
 80140cc:	d000      	beq.n	80140d0 <_strtod_l+0x50>
 80140ce:	e07f      	b.n	80141d0 <_strtod_l+0x150>
 80140d0:	9b06      	ldr	r3, [sp, #24]
 80140d2:	3220      	adds	r2, #32
 80140d4:	785b      	ldrb	r3, [r3, #1]
 80140d6:	4393      	bics	r3, r2
 80140d8:	2b58      	cmp	r3, #88	; 0x58
 80140da:	d000      	beq.n	80140de <_strtod_l+0x5e>
 80140dc:	e06e      	b.n	80141bc <_strtod_l+0x13c>
 80140de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140e0:	9502      	str	r5, [sp, #8]
 80140e2:	9301      	str	r3, [sp, #4]
 80140e4:	ab20      	add	r3, sp, #128	; 0x80
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	4a95      	ldr	r2, [pc, #596]	; (8014340 <_strtod_l+0x2c0>)
 80140ea:	ab21      	add	r3, sp, #132	; 0x84
 80140ec:	9805      	ldr	r0, [sp, #20]
 80140ee:	a91f      	add	r1, sp, #124	; 0x7c
 80140f0:	f003 f93a 	bl	8017368 <__gethex>
 80140f4:	2307      	movs	r3, #7
 80140f6:	0005      	movs	r5, r0
 80140f8:	0004      	movs	r4, r0
 80140fa:	401d      	ands	r5, r3
 80140fc:	4218      	tst	r0, r3
 80140fe:	d006      	beq.n	801410e <_strtod_l+0x8e>
 8014100:	2d06      	cmp	r5, #6
 8014102:	d12f      	bne.n	8014164 <_strtod_l+0xe4>
 8014104:	9b06      	ldr	r3, [sp, #24]
 8014106:	3301      	adds	r3, #1
 8014108:	931f      	str	r3, [sp, #124]	; 0x7c
 801410a:	2300      	movs	r3, #0
 801410c:	930e      	str	r3, [sp, #56]	; 0x38
 801410e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <_strtod_l+0x9a>
 8014114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014116:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801411c:	2b00      	cmp	r3, #0
 801411e:	d01c      	beq.n	801415a <_strtod_l+0xda>
 8014120:	2380      	movs	r3, #128	; 0x80
 8014122:	0032      	movs	r2, r6
 8014124:	061b      	lsls	r3, r3, #24
 8014126:	18fb      	adds	r3, r7, r3
 8014128:	0010      	movs	r0, r2
 801412a:	0019      	movs	r1, r3
 801412c:	b025      	add	sp, #148	; 0x94
 801412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014130:	2b20      	cmp	r3, #32
 8014132:	d1c3      	bne.n	80140bc <_strtod_l+0x3c>
 8014134:	3201      	adds	r2, #1
 8014136:	921f      	str	r2, [sp, #124]	; 0x7c
 8014138:	e7b5      	b.n	80140a6 <_strtod_l+0x26>
 801413a:	2b2d      	cmp	r3, #45	; 0x2d
 801413c:	d1be      	bne.n	80140bc <_strtod_l+0x3c>
 801413e:	3b2c      	subs	r3, #44	; 0x2c
 8014140:	930e      	str	r3, [sp, #56]	; 0x38
 8014142:	1c53      	adds	r3, r2, #1
 8014144:	931f      	str	r3, [sp, #124]	; 0x7c
 8014146:	7853      	ldrb	r3, [r2, #1]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1b9      	bne.n	80140c0 <_strtod_l+0x40>
 801414c:	9b08      	ldr	r3, [sp, #32]
 801414e:	931f      	str	r3, [sp, #124]	; 0x7c
 8014150:	2300      	movs	r3, #0
 8014152:	930e      	str	r3, [sp, #56]	; 0x38
 8014154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014156:	2b00      	cmp	r3, #0
 8014158:	d1dc      	bne.n	8014114 <_strtod_l+0x94>
 801415a:	0032      	movs	r2, r6
 801415c:	003b      	movs	r3, r7
 801415e:	e7e3      	b.n	8014128 <_strtod_l+0xa8>
 8014160:	2300      	movs	r3, #0
 8014162:	e7ed      	b.n	8014140 <_strtod_l+0xc0>
 8014164:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014166:	2a00      	cmp	r2, #0
 8014168:	d007      	beq.n	801417a <_strtod_l+0xfa>
 801416a:	2135      	movs	r1, #53	; 0x35
 801416c:	a822      	add	r0, sp, #136	; 0x88
 801416e:	f004 f87a 	bl	8018266 <__copybits>
 8014172:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014174:	9805      	ldr	r0, [sp, #20]
 8014176:	f003 fc69 	bl	8017a4c <_Bfree>
 801417a:	1e68      	subs	r0, r5, #1
 801417c:	2804      	cmp	r0, #4
 801417e:	d806      	bhi.n	801418e <_strtod_l+0x10e>
 8014180:	f7eb ffd2 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014184:	1816030b 	.word	0x1816030b
 8014188:	0b          	.byte	0x0b
 8014189:	00          	.byte	0x00
 801418a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801418c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801418e:	0723      	lsls	r3, r4, #28
 8014190:	d5bd      	bpl.n	801410e <_strtod_l+0x8e>
 8014192:	2380      	movs	r3, #128	; 0x80
 8014194:	061b      	lsls	r3, r3, #24
 8014196:	431f      	orrs	r7, r3
 8014198:	e7b9      	b.n	801410e <_strtod_l+0x8e>
 801419a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801419c:	4a69      	ldr	r2, [pc, #420]	; (8014344 <_strtod_l+0x2c4>)
 801419e:	496a      	ldr	r1, [pc, #424]	; (8014348 <_strtod_l+0x2c8>)
 80141a0:	401a      	ands	r2, r3
 80141a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141a4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80141a6:	185b      	adds	r3, r3, r1
 80141a8:	051b      	lsls	r3, r3, #20
 80141aa:	431a      	orrs	r2, r3
 80141ac:	0017      	movs	r7, r2
 80141ae:	e7ee      	b.n	801418e <_strtod_l+0x10e>
 80141b0:	4f66      	ldr	r7, [pc, #408]	; (801434c <_strtod_l+0x2cc>)
 80141b2:	e7ec      	b.n	801418e <_strtod_l+0x10e>
 80141b4:	2601      	movs	r6, #1
 80141b6:	4f66      	ldr	r7, [pc, #408]	; (8014350 <_strtod_l+0x2d0>)
 80141b8:	4276      	negs	r6, r6
 80141ba:	e7e8      	b.n	801418e <_strtod_l+0x10e>
 80141bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80141be:	1c5a      	adds	r2, r3, #1
 80141c0:	921f      	str	r2, [sp, #124]	; 0x7c
 80141c2:	785b      	ldrb	r3, [r3, #1]
 80141c4:	2b30      	cmp	r3, #48	; 0x30
 80141c6:	d0f9      	beq.n	80141bc <_strtod_l+0x13c>
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d0a0      	beq.n	801410e <_strtod_l+0x8e>
 80141cc:	2301      	movs	r3, #1
 80141ce:	930a      	str	r3, [sp, #40]	; 0x28
 80141d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80141d2:	220a      	movs	r2, #10
 80141d4:	9310      	str	r3, [sp, #64]	; 0x40
 80141d6:	2300      	movs	r3, #0
 80141d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80141da:	930b      	str	r3, [sp, #44]	; 0x2c
 80141dc:	9309      	str	r3, [sp, #36]	; 0x24
 80141de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80141e0:	7805      	ldrb	r5, [r0, #0]
 80141e2:	002b      	movs	r3, r5
 80141e4:	3b30      	subs	r3, #48	; 0x30
 80141e6:	b2d9      	uxtb	r1, r3
 80141e8:	2909      	cmp	r1, #9
 80141ea:	d927      	bls.n	801423c <_strtod_l+0x1bc>
 80141ec:	0022      	movs	r2, r4
 80141ee:	9907      	ldr	r1, [sp, #28]
 80141f0:	f7ff ff07 	bl	8014002 <strncmp>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d033      	beq.n	8014260 <_strtod_l+0x1e0>
 80141f8:	2000      	movs	r0, #0
 80141fa:	002b      	movs	r3, r5
 80141fc:	4684      	mov	ip, r0
 80141fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014200:	900c      	str	r0, [sp, #48]	; 0x30
 8014202:	9206      	str	r2, [sp, #24]
 8014204:	2220      	movs	r2, #32
 8014206:	0019      	movs	r1, r3
 8014208:	4391      	bics	r1, r2
 801420a:	000a      	movs	r2, r1
 801420c:	2100      	movs	r1, #0
 801420e:	9107      	str	r1, [sp, #28]
 8014210:	2a45      	cmp	r2, #69	; 0x45
 8014212:	d000      	beq.n	8014216 <_strtod_l+0x196>
 8014214:	e0c5      	b.n	80143a2 <_strtod_l+0x322>
 8014216:	9b06      	ldr	r3, [sp, #24]
 8014218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801421a:	4303      	orrs	r3, r0
 801421c:	4313      	orrs	r3, r2
 801421e:	428b      	cmp	r3, r1
 8014220:	d094      	beq.n	801414c <_strtod_l+0xcc>
 8014222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014224:	9308      	str	r3, [sp, #32]
 8014226:	3301      	adds	r3, #1
 8014228:	931f      	str	r3, [sp, #124]	; 0x7c
 801422a:	9b08      	ldr	r3, [sp, #32]
 801422c:	785b      	ldrb	r3, [r3, #1]
 801422e:	2b2b      	cmp	r3, #43	; 0x2b
 8014230:	d076      	beq.n	8014320 <_strtod_l+0x2a0>
 8014232:	000c      	movs	r4, r1
 8014234:	2b2d      	cmp	r3, #45	; 0x2d
 8014236:	d179      	bne.n	801432c <_strtod_l+0x2ac>
 8014238:	2401      	movs	r4, #1
 801423a:	e072      	b.n	8014322 <_strtod_l+0x2a2>
 801423c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801423e:	2908      	cmp	r1, #8
 8014240:	dc09      	bgt.n	8014256 <_strtod_l+0x1d6>
 8014242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014244:	4351      	muls	r1, r2
 8014246:	185b      	adds	r3, r3, r1
 8014248:	930b      	str	r3, [sp, #44]	; 0x2c
 801424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424c:	3001      	adds	r0, #1
 801424e:	3301      	adds	r3, #1
 8014250:	9309      	str	r3, [sp, #36]	; 0x24
 8014252:	901f      	str	r0, [sp, #124]	; 0x7c
 8014254:	e7c3      	b.n	80141de <_strtod_l+0x15e>
 8014256:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014258:	4351      	muls	r1, r2
 801425a:	185b      	adds	r3, r3, r1
 801425c:	930f      	str	r3, [sp, #60]	; 0x3c
 801425e:	e7f4      	b.n	801424a <_strtod_l+0x1ca>
 8014260:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014264:	191c      	adds	r4, r3, r4
 8014266:	941f      	str	r4, [sp, #124]	; 0x7c
 8014268:	7823      	ldrb	r3, [r4, #0]
 801426a:	2a00      	cmp	r2, #0
 801426c:	d039      	beq.n	80142e2 <_strtod_l+0x262>
 801426e:	900c      	str	r0, [sp, #48]	; 0x30
 8014270:	9206      	str	r2, [sp, #24]
 8014272:	001a      	movs	r2, r3
 8014274:	3a30      	subs	r2, #48	; 0x30
 8014276:	2a09      	cmp	r2, #9
 8014278:	d912      	bls.n	80142a0 <_strtod_l+0x220>
 801427a:	2201      	movs	r2, #1
 801427c:	4694      	mov	ip, r2
 801427e:	e7c1      	b.n	8014204 <_strtod_l+0x184>
 8014280:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014282:	3001      	adds	r0, #1
 8014284:	1c5a      	adds	r2, r3, #1
 8014286:	921f      	str	r2, [sp, #124]	; 0x7c
 8014288:	785b      	ldrb	r3, [r3, #1]
 801428a:	2b30      	cmp	r3, #48	; 0x30
 801428c:	d0f8      	beq.n	8014280 <_strtod_l+0x200>
 801428e:	001a      	movs	r2, r3
 8014290:	3a31      	subs	r2, #49	; 0x31
 8014292:	2a08      	cmp	r2, #8
 8014294:	d83f      	bhi.n	8014316 <_strtod_l+0x296>
 8014296:	900c      	str	r0, [sp, #48]	; 0x30
 8014298:	2000      	movs	r0, #0
 801429a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801429c:	9006      	str	r0, [sp, #24]
 801429e:	9210      	str	r2, [sp, #64]	; 0x40
 80142a0:	001a      	movs	r2, r3
 80142a2:	1c41      	adds	r1, r0, #1
 80142a4:	3a30      	subs	r2, #48	; 0x30
 80142a6:	2b30      	cmp	r3, #48	; 0x30
 80142a8:	d015      	beq.n	80142d6 <_strtod_l+0x256>
 80142aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ac:	185b      	adds	r3, r3, r1
 80142ae:	210a      	movs	r1, #10
 80142b0:	930c      	str	r3, [sp, #48]	; 0x30
 80142b2:	9b06      	ldr	r3, [sp, #24]
 80142b4:	18c4      	adds	r4, r0, r3
 80142b6:	42a3      	cmp	r3, r4
 80142b8:	d115      	bne.n	80142e6 <_strtod_l+0x266>
 80142ba:	9906      	ldr	r1, [sp, #24]
 80142bc:	9b06      	ldr	r3, [sp, #24]
 80142be:	3101      	adds	r1, #1
 80142c0:	1809      	adds	r1, r1, r0
 80142c2:	181b      	adds	r3, r3, r0
 80142c4:	9106      	str	r1, [sp, #24]
 80142c6:	2b08      	cmp	r3, #8
 80142c8:	dc1b      	bgt.n	8014302 <_strtod_l+0x282>
 80142ca:	230a      	movs	r3, #10
 80142cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142ce:	434b      	muls	r3, r1
 80142d0:	2100      	movs	r1, #0
 80142d2:	18d3      	adds	r3, r2, r3
 80142d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80142d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80142d8:	0008      	movs	r0, r1
 80142da:	1c5a      	adds	r2, r3, #1
 80142dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80142de:	785b      	ldrb	r3, [r3, #1]
 80142e0:	e7c7      	b.n	8014272 <_strtod_l+0x1f2>
 80142e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142e4:	e7d1      	b.n	801428a <_strtod_l+0x20a>
 80142e6:	2b08      	cmp	r3, #8
 80142e8:	dc04      	bgt.n	80142f4 <_strtod_l+0x274>
 80142ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80142ec:	434d      	muls	r5, r1
 80142ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80142f0:	3301      	adds	r3, #1
 80142f2:	e7e0      	b.n	80142b6 <_strtod_l+0x236>
 80142f4:	1c5d      	adds	r5, r3, #1
 80142f6:	2d10      	cmp	r5, #16
 80142f8:	dcfa      	bgt.n	80142f0 <_strtod_l+0x270>
 80142fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80142fc:	434d      	muls	r5, r1
 80142fe:	950f      	str	r5, [sp, #60]	; 0x3c
 8014300:	e7f6      	b.n	80142f0 <_strtod_l+0x270>
 8014302:	9b06      	ldr	r3, [sp, #24]
 8014304:	2100      	movs	r1, #0
 8014306:	2b10      	cmp	r3, #16
 8014308:	dce5      	bgt.n	80142d6 <_strtod_l+0x256>
 801430a:	230a      	movs	r3, #10
 801430c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801430e:	4343      	muls	r3, r0
 8014310:	18d3      	adds	r3, r2, r3
 8014312:	930f      	str	r3, [sp, #60]	; 0x3c
 8014314:	e7df      	b.n	80142d6 <_strtod_l+0x256>
 8014316:	2200      	movs	r2, #0
 8014318:	920c      	str	r2, [sp, #48]	; 0x30
 801431a:	9206      	str	r2, [sp, #24]
 801431c:	3201      	adds	r2, #1
 801431e:	e7ad      	b.n	801427c <_strtod_l+0x1fc>
 8014320:	2400      	movs	r4, #0
 8014322:	9b08      	ldr	r3, [sp, #32]
 8014324:	3302      	adds	r3, #2
 8014326:	931f      	str	r3, [sp, #124]	; 0x7c
 8014328:	9b08      	ldr	r3, [sp, #32]
 801432a:	789b      	ldrb	r3, [r3, #2]
 801432c:	001a      	movs	r2, r3
 801432e:	3a30      	subs	r2, #48	; 0x30
 8014330:	2a09      	cmp	r2, #9
 8014332:	d913      	bls.n	801435c <_strtod_l+0x2dc>
 8014334:	9a08      	ldr	r2, [sp, #32]
 8014336:	921f      	str	r2, [sp, #124]	; 0x7c
 8014338:	2200      	movs	r2, #0
 801433a:	e031      	b.n	80143a0 <_strtod_l+0x320>
 801433c:	0801d1f4 	.word	0x0801d1f4
 8014340:	0801d070 	.word	0x0801d070
 8014344:	ffefffff 	.word	0xffefffff
 8014348:	00000433 	.word	0x00000433
 801434c:	7ff00000 	.word	0x7ff00000
 8014350:	7fffffff 	.word	0x7fffffff
 8014354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014356:	1c5a      	adds	r2, r3, #1
 8014358:	921f      	str	r2, [sp, #124]	; 0x7c
 801435a:	785b      	ldrb	r3, [r3, #1]
 801435c:	2b30      	cmp	r3, #48	; 0x30
 801435e:	d0f9      	beq.n	8014354 <_strtod_l+0x2d4>
 8014360:	2200      	movs	r2, #0
 8014362:	9207      	str	r2, [sp, #28]
 8014364:	001a      	movs	r2, r3
 8014366:	3a31      	subs	r2, #49	; 0x31
 8014368:	2a08      	cmp	r2, #8
 801436a:	d81a      	bhi.n	80143a2 <_strtod_l+0x322>
 801436c:	3b30      	subs	r3, #48	; 0x30
 801436e:	001a      	movs	r2, r3
 8014370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014372:	9307      	str	r3, [sp, #28]
 8014374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014376:	1c59      	adds	r1, r3, #1
 8014378:	911f      	str	r1, [sp, #124]	; 0x7c
 801437a:	785b      	ldrb	r3, [r3, #1]
 801437c:	001d      	movs	r5, r3
 801437e:	3d30      	subs	r5, #48	; 0x30
 8014380:	2d09      	cmp	r5, #9
 8014382:	d939      	bls.n	80143f8 <_strtod_l+0x378>
 8014384:	9d07      	ldr	r5, [sp, #28]
 8014386:	1b49      	subs	r1, r1, r5
 8014388:	4db0      	ldr	r5, [pc, #704]	; (801464c <_strtod_l+0x5cc>)
 801438a:	9507      	str	r5, [sp, #28]
 801438c:	2908      	cmp	r1, #8
 801438e:	dc03      	bgt.n	8014398 <_strtod_l+0x318>
 8014390:	9207      	str	r2, [sp, #28]
 8014392:	42aa      	cmp	r2, r5
 8014394:	dd00      	ble.n	8014398 <_strtod_l+0x318>
 8014396:	9507      	str	r5, [sp, #28]
 8014398:	2c00      	cmp	r4, #0
 801439a:	d002      	beq.n	80143a2 <_strtod_l+0x322>
 801439c:	9a07      	ldr	r2, [sp, #28]
 801439e:	4252      	negs	r2, r2
 80143a0:	9207      	str	r2, [sp, #28]
 80143a2:	9a06      	ldr	r2, [sp, #24]
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	d14b      	bne.n	8014440 <_strtod_l+0x3c0>
 80143a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143aa:	4310      	orrs	r0, r2
 80143ac:	d000      	beq.n	80143b0 <_strtod_l+0x330>
 80143ae:	e6ae      	b.n	801410e <_strtod_l+0x8e>
 80143b0:	4662      	mov	r2, ip
 80143b2:	2a00      	cmp	r2, #0
 80143b4:	d000      	beq.n	80143b8 <_strtod_l+0x338>
 80143b6:	e6c9      	b.n	801414c <_strtod_l+0xcc>
 80143b8:	2b69      	cmp	r3, #105	; 0x69
 80143ba:	d025      	beq.n	8014408 <_strtod_l+0x388>
 80143bc:	dc21      	bgt.n	8014402 <_strtod_l+0x382>
 80143be:	2b49      	cmp	r3, #73	; 0x49
 80143c0:	d022      	beq.n	8014408 <_strtod_l+0x388>
 80143c2:	2b4e      	cmp	r3, #78	; 0x4e
 80143c4:	d000      	beq.n	80143c8 <_strtod_l+0x348>
 80143c6:	e6c1      	b.n	801414c <_strtod_l+0xcc>
 80143c8:	49a1      	ldr	r1, [pc, #644]	; (8014650 <_strtod_l+0x5d0>)
 80143ca:	a81f      	add	r0, sp, #124	; 0x7c
 80143cc:	f003 fa1a 	bl	8017804 <__match>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d100      	bne.n	80143d6 <_strtod_l+0x356>
 80143d4:	e6ba      	b.n	801414c <_strtod_l+0xcc>
 80143d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	2b28      	cmp	r3, #40	; 0x28
 80143dc:	d12a      	bne.n	8014434 <_strtod_l+0x3b4>
 80143de:	499d      	ldr	r1, [pc, #628]	; (8014654 <_strtod_l+0x5d4>)
 80143e0:	aa22      	add	r2, sp, #136	; 0x88
 80143e2:	a81f      	add	r0, sp, #124	; 0x7c
 80143e4:	f003 fa22 	bl	801782c <__hexnan>
 80143e8:	2805      	cmp	r0, #5
 80143ea:	d123      	bne.n	8014434 <_strtod_l+0x3b4>
 80143ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80143ee:	4a9a      	ldr	r2, [pc, #616]	; (8014658 <_strtod_l+0x5d8>)
 80143f0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80143f2:	431a      	orrs	r2, r3
 80143f4:	0017      	movs	r7, r2
 80143f6:	e68a      	b.n	801410e <_strtod_l+0x8e>
 80143f8:	210a      	movs	r1, #10
 80143fa:	434a      	muls	r2, r1
 80143fc:	18d2      	adds	r2, r2, r3
 80143fe:	3a30      	subs	r2, #48	; 0x30
 8014400:	e7b8      	b.n	8014374 <_strtod_l+0x2f4>
 8014402:	2b6e      	cmp	r3, #110	; 0x6e
 8014404:	d0e0      	beq.n	80143c8 <_strtod_l+0x348>
 8014406:	e6a1      	b.n	801414c <_strtod_l+0xcc>
 8014408:	4994      	ldr	r1, [pc, #592]	; (801465c <_strtod_l+0x5dc>)
 801440a:	a81f      	add	r0, sp, #124	; 0x7c
 801440c:	f003 f9fa 	bl	8017804 <__match>
 8014410:	2800      	cmp	r0, #0
 8014412:	d100      	bne.n	8014416 <_strtod_l+0x396>
 8014414:	e69a      	b.n	801414c <_strtod_l+0xcc>
 8014416:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014418:	4991      	ldr	r1, [pc, #580]	; (8014660 <_strtod_l+0x5e0>)
 801441a:	3b01      	subs	r3, #1
 801441c:	a81f      	add	r0, sp, #124	; 0x7c
 801441e:	931f      	str	r3, [sp, #124]	; 0x7c
 8014420:	f003 f9f0 	bl	8017804 <__match>
 8014424:	2800      	cmp	r0, #0
 8014426:	d102      	bne.n	801442e <_strtod_l+0x3ae>
 8014428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801442a:	3301      	adds	r3, #1
 801442c:	931f      	str	r3, [sp, #124]	; 0x7c
 801442e:	2600      	movs	r6, #0
 8014430:	4f89      	ldr	r7, [pc, #548]	; (8014658 <_strtod_l+0x5d8>)
 8014432:	e66c      	b.n	801410e <_strtod_l+0x8e>
 8014434:	488b      	ldr	r0, [pc, #556]	; (8014664 <_strtod_l+0x5e4>)
 8014436:	f003 ff8d 	bl	8018354 <nan>
 801443a:	0006      	movs	r6, r0
 801443c:	000f      	movs	r7, r1
 801443e:	e666      	b.n	801410e <_strtod_l+0x8e>
 8014440:	9b07      	ldr	r3, [sp, #28]
 8014442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014444:	1a9b      	subs	r3, r3, r2
 8014446:	930a      	str	r3, [sp, #40]	; 0x28
 8014448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801444a:	2b00      	cmp	r3, #0
 801444c:	d101      	bne.n	8014452 <_strtod_l+0x3d2>
 801444e:	9b06      	ldr	r3, [sp, #24]
 8014450:	9309      	str	r3, [sp, #36]	; 0x24
 8014452:	9c06      	ldr	r4, [sp, #24]
 8014454:	2c10      	cmp	r4, #16
 8014456:	dd00      	ble.n	801445a <_strtod_l+0x3da>
 8014458:	2410      	movs	r4, #16
 801445a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801445c:	f7ee fcc6 	bl	8002dec <__aeabi_ui2d>
 8014460:	9b06      	ldr	r3, [sp, #24]
 8014462:	0006      	movs	r6, r0
 8014464:	000f      	movs	r7, r1
 8014466:	2b09      	cmp	r3, #9
 8014468:	dd15      	ble.n	8014496 <_strtod_l+0x416>
 801446a:	0022      	movs	r2, r4
 801446c:	4b7e      	ldr	r3, [pc, #504]	; (8014668 <_strtod_l+0x5e8>)
 801446e:	3a09      	subs	r2, #9
 8014470:	00d2      	lsls	r2, r2, #3
 8014472:	189b      	adds	r3, r3, r2
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	f7ed fe36 	bl	80020e8 <__aeabi_dmul>
 801447c:	0006      	movs	r6, r0
 801447e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014480:	000f      	movs	r7, r1
 8014482:	f7ee fcb3 	bl	8002dec <__aeabi_ui2d>
 8014486:	0002      	movs	r2, r0
 8014488:	000b      	movs	r3, r1
 801448a:	0030      	movs	r0, r6
 801448c:	0039      	movs	r1, r7
 801448e:	f7ec feed 	bl	800126c <__aeabi_dadd>
 8014492:	0006      	movs	r6, r0
 8014494:	000f      	movs	r7, r1
 8014496:	9b06      	ldr	r3, [sp, #24]
 8014498:	2b0f      	cmp	r3, #15
 801449a:	dc39      	bgt.n	8014510 <_strtod_l+0x490>
 801449c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d100      	bne.n	80144a4 <_strtod_l+0x424>
 80144a2:	e634      	b.n	801410e <_strtod_l+0x8e>
 80144a4:	dd24      	ble.n	80144f0 <_strtod_l+0x470>
 80144a6:	2b16      	cmp	r3, #22
 80144a8:	dc09      	bgt.n	80144be <_strtod_l+0x43e>
 80144aa:	496f      	ldr	r1, [pc, #444]	; (8014668 <_strtod_l+0x5e8>)
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	18c9      	adds	r1, r1, r3
 80144b0:	0032      	movs	r2, r6
 80144b2:	6808      	ldr	r0, [r1, #0]
 80144b4:	6849      	ldr	r1, [r1, #4]
 80144b6:	003b      	movs	r3, r7
 80144b8:	f7ed fe16 	bl	80020e8 <__aeabi_dmul>
 80144bc:	e7bd      	b.n	801443a <_strtod_l+0x3ba>
 80144be:	2325      	movs	r3, #37	; 0x25
 80144c0:	9a06      	ldr	r2, [sp, #24]
 80144c2:	1a9b      	subs	r3, r3, r2
 80144c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144c6:	4293      	cmp	r3, r2
 80144c8:	db22      	blt.n	8014510 <_strtod_l+0x490>
 80144ca:	240f      	movs	r4, #15
 80144cc:	9b06      	ldr	r3, [sp, #24]
 80144ce:	4d66      	ldr	r5, [pc, #408]	; (8014668 <_strtod_l+0x5e8>)
 80144d0:	1ae4      	subs	r4, r4, r3
 80144d2:	00e1      	lsls	r1, r4, #3
 80144d4:	1869      	adds	r1, r5, r1
 80144d6:	0032      	movs	r2, r6
 80144d8:	6808      	ldr	r0, [r1, #0]
 80144da:	6849      	ldr	r1, [r1, #4]
 80144dc:	003b      	movs	r3, r7
 80144de:	f7ed fe03 	bl	80020e8 <__aeabi_dmul>
 80144e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144e4:	1b1c      	subs	r4, r3, r4
 80144e6:	00e4      	lsls	r4, r4, #3
 80144e8:	192c      	adds	r4, r5, r4
 80144ea:	6822      	ldr	r2, [r4, #0]
 80144ec:	6863      	ldr	r3, [r4, #4]
 80144ee:	e7e3      	b.n	80144b8 <_strtod_l+0x438>
 80144f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144f2:	3316      	adds	r3, #22
 80144f4:	db0c      	blt.n	8014510 <_strtod_l+0x490>
 80144f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144f8:	9a07      	ldr	r2, [sp, #28]
 80144fa:	0030      	movs	r0, r6
 80144fc:	1a9a      	subs	r2, r3, r2
 80144fe:	4b5a      	ldr	r3, [pc, #360]	; (8014668 <_strtod_l+0x5e8>)
 8014500:	00d2      	lsls	r2, r2, #3
 8014502:	189b      	adds	r3, r3, r2
 8014504:	0039      	movs	r1, r7
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	f7ed f9eb 	bl	80018e4 <__aeabi_ddiv>
 801450e:	e794      	b.n	801443a <_strtod_l+0x3ba>
 8014510:	9b06      	ldr	r3, [sp, #24]
 8014512:	1b1c      	subs	r4, r3, r4
 8014514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014516:	18e4      	adds	r4, r4, r3
 8014518:	2c00      	cmp	r4, #0
 801451a:	dd72      	ble.n	8014602 <_strtod_l+0x582>
 801451c:	230f      	movs	r3, #15
 801451e:	0021      	movs	r1, r4
 8014520:	4019      	ands	r1, r3
 8014522:	421c      	tst	r4, r3
 8014524:	d00a      	beq.n	801453c <_strtod_l+0x4bc>
 8014526:	00cb      	lsls	r3, r1, #3
 8014528:	494f      	ldr	r1, [pc, #316]	; (8014668 <_strtod_l+0x5e8>)
 801452a:	0032      	movs	r2, r6
 801452c:	18c9      	adds	r1, r1, r3
 801452e:	6808      	ldr	r0, [r1, #0]
 8014530:	6849      	ldr	r1, [r1, #4]
 8014532:	003b      	movs	r3, r7
 8014534:	f7ed fdd8 	bl	80020e8 <__aeabi_dmul>
 8014538:	0006      	movs	r6, r0
 801453a:	000f      	movs	r7, r1
 801453c:	230f      	movs	r3, #15
 801453e:	439c      	bics	r4, r3
 8014540:	d04a      	beq.n	80145d8 <_strtod_l+0x558>
 8014542:	3326      	adds	r3, #38	; 0x26
 8014544:	33ff      	adds	r3, #255	; 0xff
 8014546:	429c      	cmp	r4, r3
 8014548:	dd22      	ble.n	8014590 <_strtod_l+0x510>
 801454a:	2300      	movs	r3, #0
 801454c:	9306      	str	r3, [sp, #24]
 801454e:	9307      	str	r3, [sp, #28]
 8014550:	930b      	str	r3, [sp, #44]	; 0x2c
 8014552:	9309      	str	r3, [sp, #36]	; 0x24
 8014554:	2322      	movs	r3, #34	; 0x22
 8014556:	2600      	movs	r6, #0
 8014558:	9a05      	ldr	r2, [sp, #20]
 801455a:	4f3f      	ldr	r7, [pc, #252]	; (8014658 <_strtod_l+0x5d8>)
 801455c:	6013      	str	r3, [r2, #0]
 801455e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014560:	42b3      	cmp	r3, r6
 8014562:	d100      	bne.n	8014566 <_strtod_l+0x4e6>
 8014564:	e5d3      	b.n	801410e <_strtod_l+0x8e>
 8014566:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014568:	9805      	ldr	r0, [sp, #20]
 801456a:	f003 fa6f 	bl	8017a4c <_Bfree>
 801456e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014570:	9805      	ldr	r0, [sp, #20]
 8014572:	f003 fa6b 	bl	8017a4c <_Bfree>
 8014576:	9907      	ldr	r1, [sp, #28]
 8014578:	9805      	ldr	r0, [sp, #20]
 801457a:	f003 fa67 	bl	8017a4c <_Bfree>
 801457e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014580:	9805      	ldr	r0, [sp, #20]
 8014582:	f003 fa63 	bl	8017a4c <_Bfree>
 8014586:	9906      	ldr	r1, [sp, #24]
 8014588:	9805      	ldr	r0, [sp, #20]
 801458a:	f003 fa5f 	bl	8017a4c <_Bfree>
 801458e:	e5be      	b.n	801410e <_strtod_l+0x8e>
 8014590:	2300      	movs	r3, #0
 8014592:	0030      	movs	r0, r6
 8014594:	0039      	movs	r1, r7
 8014596:	4d35      	ldr	r5, [pc, #212]	; (801466c <_strtod_l+0x5ec>)
 8014598:	1124      	asrs	r4, r4, #4
 801459a:	9308      	str	r3, [sp, #32]
 801459c:	2c01      	cmp	r4, #1
 801459e:	dc1e      	bgt.n	80145de <_strtod_l+0x55e>
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d001      	beq.n	80145a8 <_strtod_l+0x528>
 80145a4:	0006      	movs	r6, r0
 80145a6:	000f      	movs	r7, r1
 80145a8:	4b31      	ldr	r3, [pc, #196]	; (8014670 <_strtod_l+0x5f0>)
 80145aa:	0032      	movs	r2, r6
 80145ac:	18ff      	adds	r7, r7, r3
 80145ae:	9b08      	ldr	r3, [sp, #32]
 80145b0:	00dd      	lsls	r5, r3, #3
 80145b2:	4b2e      	ldr	r3, [pc, #184]	; (801466c <_strtod_l+0x5ec>)
 80145b4:	195d      	adds	r5, r3, r5
 80145b6:	6828      	ldr	r0, [r5, #0]
 80145b8:	6869      	ldr	r1, [r5, #4]
 80145ba:	003b      	movs	r3, r7
 80145bc:	f7ed fd94 	bl	80020e8 <__aeabi_dmul>
 80145c0:	4b25      	ldr	r3, [pc, #148]	; (8014658 <_strtod_l+0x5d8>)
 80145c2:	4a2c      	ldr	r2, [pc, #176]	; (8014674 <_strtod_l+0x5f4>)
 80145c4:	0006      	movs	r6, r0
 80145c6:	400b      	ands	r3, r1
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d8be      	bhi.n	801454a <_strtod_l+0x4ca>
 80145cc:	4a2a      	ldr	r2, [pc, #168]	; (8014678 <_strtod_l+0x5f8>)
 80145ce:	4293      	cmp	r3, r2
 80145d0:	d913      	bls.n	80145fa <_strtod_l+0x57a>
 80145d2:	2601      	movs	r6, #1
 80145d4:	4f29      	ldr	r7, [pc, #164]	; (801467c <_strtod_l+0x5fc>)
 80145d6:	4276      	negs	r6, r6
 80145d8:	2300      	movs	r3, #0
 80145da:	9308      	str	r3, [sp, #32]
 80145dc:	e087      	b.n	80146ee <_strtod_l+0x66e>
 80145de:	2201      	movs	r2, #1
 80145e0:	4214      	tst	r4, r2
 80145e2:	d004      	beq.n	80145ee <_strtod_l+0x56e>
 80145e4:	682a      	ldr	r2, [r5, #0]
 80145e6:	686b      	ldr	r3, [r5, #4]
 80145e8:	f7ed fd7e 	bl	80020e8 <__aeabi_dmul>
 80145ec:	2301      	movs	r3, #1
 80145ee:	9a08      	ldr	r2, [sp, #32]
 80145f0:	1064      	asrs	r4, r4, #1
 80145f2:	3201      	adds	r2, #1
 80145f4:	9208      	str	r2, [sp, #32]
 80145f6:	3508      	adds	r5, #8
 80145f8:	e7d0      	b.n	801459c <_strtod_l+0x51c>
 80145fa:	23d4      	movs	r3, #212	; 0xd4
 80145fc:	049b      	lsls	r3, r3, #18
 80145fe:	18cf      	adds	r7, r1, r3
 8014600:	e7ea      	b.n	80145d8 <_strtod_l+0x558>
 8014602:	2c00      	cmp	r4, #0
 8014604:	d0e8      	beq.n	80145d8 <_strtod_l+0x558>
 8014606:	4264      	negs	r4, r4
 8014608:	220f      	movs	r2, #15
 801460a:	0023      	movs	r3, r4
 801460c:	4013      	ands	r3, r2
 801460e:	4214      	tst	r4, r2
 8014610:	d00a      	beq.n	8014628 <_strtod_l+0x5a8>
 8014612:	00da      	lsls	r2, r3, #3
 8014614:	4b14      	ldr	r3, [pc, #80]	; (8014668 <_strtod_l+0x5e8>)
 8014616:	0030      	movs	r0, r6
 8014618:	189b      	adds	r3, r3, r2
 801461a:	0039      	movs	r1, r7
 801461c:	681a      	ldr	r2, [r3, #0]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	f7ed f960 	bl	80018e4 <__aeabi_ddiv>
 8014624:	0006      	movs	r6, r0
 8014626:	000f      	movs	r7, r1
 8014628:	1124      	asrs	r4, r4, #4
 801462a:	d0d5      	beq.n	80145d8 <_strtod_l+0x558>
 801462c:	2c1f      	cmp	r4, #31
 801462e:	dd27      	ble.n	8014680 <_strtod_l+0x600>
 8014630:	2300      	movs	r3, #0
 8014632:	9306      	str	r3, [sp, #24]
 8014634:	9307      	str	r3, [sp, #28]
 8014636:	930b      	str	r3, [sp, #44]	; 0x2c
 8014638:	9309      	str	r3, [sp, #36]	; 0x24
 801463a:	2322      	movs	r3, #34	; 0x22
 801463c:	9a05      	ldr	r2, [sp, #20]
 801463e:	2600      	movs	r6, #0
 8014640:	6013      	str	r3, [r2, #0]
 8014642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014644:	2700      	movs	r7, #0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d18d      	bne.n	8014566 <_strtod_l+0x4e6>
 801464a:	e560      	b.n	801410e <_strtod_l+0x8e>
 801464c:	00004e1f 	.word	0x00004e1f
 8014650:	0801d0cd 	.word	0x0801d0cd
 8014654:	0801d084 	.word	0x0801d084
 8014658:	7ff00000 	.word	0x7ff00000
 801465c:	0801d0c5 	.word	0x0801d0c5
 8014660:	0801d11b 	.word	0x0801d11b
 8014664:	0801d39f 	.word	0x0801d39f
 8014668:	0801d290 	.word	0x0801d290
 801466c:	0801d268 	.word	0x0801d268
 8014670:	fcb00000 	.word	0xfcb00000
 8014674:	7ca00000 	.word	0x7ca00000
 8014678:	7c900000 	.word	0x7c900000
 801467c:	7fefffff 	.word	0x7fefffff
 8014680:	2310      	movs	r3, #16
 8014682:	0022      	movs	r2, r4
 8014684:	401a      	ands	r2, r3
 8014686:	9208      	str	r2, [sp, #32]
 8014688:	421c      	tst	r4, r3
 801468a:	d001      	beq.n	8014690 <_strtod_l+0x610>
 801468c:	335a      	adds	r3, #90	; 0x5a
 801468e:	9308      	str	r3, [sp, #32]
 8014690:	0030      	movs	r0, r6
 8014692:	0039      	movs	r1, r7
 8014694:	2300      	movs	r3, #0
 8014696:	4dc5      	ldr	r5, [pc, #788]	; (80149ac <_strtod_l+0x92c>)
 8014698:	2201      	movs	r2, #1
 801469a:	4214      	tst	r4, r2
 801469c:	d004      	beq.n	80146a8 <_strtod_l+0x628>
 801469e:	682a      	ldr	r2, [r5, #0]
 80146a0:	686b      	ldr	r3, [r5, #4]
 80146a2:	f7ed fd21 	bl	80020e8 <__aeabi_dmul>
 80146a6:	2301      	movs	r3, #1
 80146a8:	1064      	asrs	r4, r4, #1
 80146aa:	3508      	adds	r5, #8
 80146ac:	2c00      	cmp	r4, #0
 80146ae:	d1f3      	bne.n	8014698 <_strtod_l+0x618>
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d001      	beq.n	80146b8 <_strtod_l+0x638>
 80146b4:	0006      	movs	r6, r0
 80146b6:	000f      	movs	r7, r1
 80146b8:	9b08      	ldr	r3, [sp, #32]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00f      	beq.n	80146de <_strtod_l+0x65e>
 80146be:	236b      	movs	r3, #107	; 0x6b
 80146c0:	007a      	lsls	r2, r7, #1
 80146c2:	0d52      	lsrs	r2, r2, #21
 80146c4:	0039      	movs	r1, r7
 80146c6:	1a9b      	subs	r3, r3, r2
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	dd08      	ble.n	80146de <_strtod_l+0x65e>
 80146cc:	2b1f      	cmp	r3, #31
 80146ce:	dc00      	bgt.n	80146d2 <_strtod_l+0x652>
 80146d0:	e124      	b.n	801491c <_strtod_l+0x89c>
 80146d2:	2600      	movs	r6, #0
 80146d4:	2b34      	cmp	r3, #52	; 0x34
 80146d6:	dc00      	bgt.n	80146da <_strtod_l+0x65a>
 80146d8:	e119      	b.n	801490e <_strtod_l+0x88e>
 80146da:	27dc      	movs	r7, #220	; 0xdc
 80146dc:	04bf      	lsls	r7, r7, #18
 80146de:	2200      	movs	r2, #0
 80146e0:	2300      	movs	r3, #0
 80146e2:	0030      	movs	r0, r6
 80146e4:	0039      	movs	r1, r7
 80146e6:	f7eb feb9 	bl	800045c <__aeabi_dcmpeq>
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d1a0      	bne.n	8014630 <_strtod_l+0x5b0>
 80146ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80146f6:	9b06      	ldr	r3, [sp, #24]
 80146f8:	9805      	ldr	r0, [sp, #20]
 80146fa:	f003 f9f5 	bl	8017ae8 <__s2b>
 80146fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8014700:	2800      	cmp	r0, #0
 8014702:	d100      	bne.n	8014706 <_strtod_l+0x686>
 8014704:	e721      	b.n	801454a <_strtod_l+0x4ca>
 8014706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014708:	9907      	ldr	r1, [sp, #28]
 801470a:	17da      	asrs	r2, r3, #31
 801470c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801470e:	1a5b      	subs	r3, r3, r1
 8014710:	401a      	ands	r2, r3
 8014712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014714:	9215      	str	r2, [sp, #84]	; 0x54
 8014716:	43db      	mvns	r3, r3
 8014718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801471a:	17db      	asrs	r3, r3, #31
 801471c:	401a      	ands	r2, r3
 801471e:	2300      	movs	r3, #0
 8014720:	921a      	str	r2, [sp, #104]	; 0x68
 8014722:	9306      	str	r3, [sp, #24]
 8014724:	9307      	str	r3, [sp, #28]
 8014726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014728:	9805      	ldr	r0, [sp, #20]
 801472a:	6859      	ldr	r1, [r3, #4]
 801472c:	f003 f966 	bl	80179fc <_Balloc>
 8014730:	9009      	str	r0, [sp, #36]	; 0x24
 8014732:	2800      	cmp	r0, #0
 8014734:	d100      	bne.n	8014738 <_strtod_l+0x6b8>
 8014736:	e70d      	b.n	8014554 <_strtod_l+0x4d4>
 8014738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801473a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801473c:	691b      	ldr	r3, [r3, #16]
 801473e:	310c      	adds	r1, #12
 8014740:	1c9a      	adds	r2, r3, #2
 8014742:	0092      	lsls	r2, r2, #2
 8014744:	300c      	adds	r0, #12
 8014746:	930c      	str	r3, [sp, #48]	; 0x30
 8014748:	f7ff fa1e 	bl	8013b88 <memcpy>
 801474c:	ab22      	add	r3, sp, #136	; 0x88
 801474e:	9301      	str	r3, [sp, #4]
 8014750:	ab21      	add	r3, sp, #132	; 0x84
 8014752:	9300      	str	r3, [sp, #0]
 8014754:	0032      	movs	r2, r6
 8014756:	003b      	movs	r3, r7
 8014758:	9805      	ldr	r0, [sp, #20]
 801475a:	9612      	str	r6, [sp, #72]	; 0x48
 801475c:	9713      	str	r7, [sp, #76]	; 0x4c
 801475e:	f003 fcf5 	bl	801814c <__d2b>
 8014762:	9020      	str	r0, [sp, #128]	; 0x80
 8014764:	2800      	cmp	r0, #0
 8014766:	d100      	bne.n	801476a <_strtod_l+0x6ea>
 8014768:	e6f4      	b.n	8014554 <_strtod_l+0x4d4>
 801476a:	2101      	movs	r1, #1
 801476c:	9805      	ldr	r0, [sp, #20]
 801476e:	f003 fa4f 	bl	8017c10 <__i2b>
 8014772:	9007      	str	r0, [sp, #28]
 8014774:	2800      	cmp	r0, #0
 8014776:	d100      	bne.n	801477a <_strtod_l+0x6fa>
 8014778:	e6ec      	b.n	8014554 <_strtod_l+0x4d4>
 801477a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801477c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801477e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014780:	1ad4      	subs	r4, r2, r3
 8014782:	2b00      	cmp	r3, #0
 8014784:	db01      	blt.n	801478a <_strtod_l+0x70a>
 8014786:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014788:	195d      	adds	r5, r3, r5
 801478a:	9908      	ldr	r1, [sp, #32]
 801478c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801478e:	1a5b      	subs	r3, r3, r1
 8014790:	2136      	movs	r1, #54	; 0x36
 8014792:	189b      	adds	r3, r3, r2
 8014794:	1a8a      	subs	r2, r1, r2
 8014796:	4986      	ldr	r1, [pc, #536]	; (80149b0 <_strtod_l+0x930>)
 8014798:	2001      	movs	r0, #1
 801479a:	468c      	mov	ip, r1
 801479c:	2100      	movs	r1, #0
 801479e:	3b01      	subs	r3, #1
 80147a0:	9110      	str	r1, [sp, #64]	; 0x40
 80147a2:	9014      	str	r0, [sp, #80]	; 0x50
 80147a4:	4563      	cmp	r3, ip
 80147a6:	da07      	bge.n	80147b8 <_strtod_l+0x738>
 80147a8:	4661      	mov	r1, ip
 80147aa:	1ac9      	subs	r1, r1, r3
 80147ac:	1a52      	subs	r2, r2, r1
 80147ae:	291f      	cmp	r1, #31
 80147b0:	dd00      	ble.n	80147b4 <_strtod_l+0x734>
 80147b2:	e0b8      	b.n	8014926 <_strtod_l+0x8a6>
 80147b4:	4088      	lsls	r0, r1
 80147b6:	9014      	str	r0, [sp, #80]	; 0x50
 80147b8:	18ab      	adds	r3, r5, r2
 80147ba:	930c      	str	r3, [sp, #48]	; 0x30
 80147bc:	18a4      	adds	r4, r4, r2
 80147be:	9b08      	ldr	r3, [sp, #32]
 80147c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147c2:	191c      	adds	r4, r3, r4
 80147c4:	002b      	movs	r3, r5
 80147c6:	4295      	cmp	r5, r2
 80147c8:	dd00      	ble.n	80147cc <_strtod_l+0x74c>
 80147ca:	0013      	movs	r3, r2
 80147cc:	42a3      	cmp	r3, r4
 80147ce:	dd00      	ble.n	80147d2 <_strtod_l+0x752>
 80147d0:	0023      	movs	r3, r4
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	dd04      	ble.n	80147e0 <_strtod_l+0x760>
 80147d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147d8:	1ae4      	subs	r4, r4, r3
 80147da:	1ad2      	subs	r2, r2, r3
 80147dc:	920c      	str	r2, [sp, #48]	; 0x30
 80147de:	1aed      	subs	r5, r5, r3
 80147e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	dd17      	ble.n	8014816 <_strtod_l+0x796>
 80147e6:	001a      	movs	r2, r3
 80147e8:	9907      	ldr	r1, [sp, #28]
 80147ea:	9805      	ldr	r0, [sp, #20]
 80147ec:	f003 fad6 	bl	8017d9c <__pow5mult>
 80147f0:	9007      	str	r0, [sp, #28]
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d100      	bne.n	80147f8 <_strtod_l+0x778>
 80147f6:	e6ad      	b.n	8014554 <_strtod_l+0x4d4>
 80147f8:	0001      	movs	r1, r0
 80147fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80147fc:	9805      	ldr	r0, [sp, #20]
 80147fe:	f003 fa1d 	bl	8017c3c <__multiply>
 8014802:	900f      	str	r0, [sp, #60]	; 0x3c
 8014804:	2800      	cmp	r0, #0
 8014806:	d100      	bne.n	801480a <_strtod_l+0x78a>
 8014808:	e6a4      	b.n	8014554 <_strtod_l+0x4d4>
 801480a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801480c:	9805      	ldr	r0, [sp, #20]
 801480e:	f003 f91d 	bl	8017a4c <_Bfree>
 8014812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014814:	9320      	str	r3, [sp, #128]	; 0x80
 8014816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014818:	2b00      	cmp	r3, #0
 801481a:	dd00      	ble.n	801481e <_strtod_l+0x79e>
 801481c:	e089      	b.n	8014932 <_strtod_l+0x8b2>
 801481e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014820:	2b00      	cmp	r3, #0
 8014822:	dd08      	ble.n	8014836 <_strtod_l+0x7b6>
 8014824:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014828:	9805      	ldr	r0, [sp, #20]
 801482a:	f003 fab7 	bl	8017d9c <__pow5mult>
 801482e:	9009      	str	r0, [sp, #36]	; 0x24
 8014830:	2800      	cmp	r0, #0
 8014832:	d100      	bne.n	8014836 <_strtod_l+0x7b6>
 8014834:	e68e      	b.n	8014554 <_strtod_l+0x4d4>
 8014836:	2c00      	cmp	r4, #0
 8014838:	dd08      	ble.n	801484c <_strtod_l+0x7cc>
 801483a:	0022      	movs	r2, r4
 801483c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801483e:	9805      	ldr	r0, [sp, #20]
 8014840:	f003 faee 	bl	8017e20 <__lshift>
 8014844:	9009      	str	r0, [sp, #36]	; 0x24
 8014846:	2800      	cmp	r0, #0
 8014848:	d100      	bne.n	801484c <_strtod_l+0x7cc>
 801484a:	e683      	b.n	8014554 <_strtod_l+0x4d4>
 801484c:	2d00      	cmp	r5, #0
 801484e:	dd08      	ble.n	8014862 <_strtod_l+0x7e2>
 8014850:	002a      	movs	r2, r5
 8014852:	9907      	ldr	r1, [sp, #28]
 8014854:	9805      	ldr	r0, [sp, #20]
 8014856:	f003 fae3 	bl	8017e20 <__lshift>
 801485a:	9007      	str	r0, [sp, #28]
 801485c:	2800      	cmp	r0, #0
 801485e:	d100      	bne.n	8014862 <_strtod_l+0x7e2>
 8014860:	e678      	b.n	8014554 <_strtod_l+0x4d4>
 8014862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014864:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014866:	9805      	ldr	r0, [sp, #20]
 8014868:	f003 fb64 	bl	8017f34 <__mdiff>
 801486c:	9006      	str	r0, [sp, #24]
 801486e:	2800      	cmp	r0, #0
 8014870:	d100      	bne.n	8014874 <_strtod_l+0x7f4>
 8014872:	e66f      	b.n	8014554 <_strtod_l+0x4d4>
 8014874:	2200      	movs	r2, #0
 8014876:	68c3      	ldr	r3, [r0, #12]
 8014878:	9907      	ldr	r1, [sp, #28]
 801487a:	60c2      	str	r2, [r0, #12]
 801487c:	930f      	str	r3, [sp, #60]	; 0x3c
 801487e:	f003 fb3d 	bl	8017efc <__mcmp>
 8014882:	2800      	cmp	r0, #0
 8014884:	da5f      	bge.n	8014946 <_strtod_l+0x8c6>
 8014886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014888:	4333      	orrs	r3, r6
 801488a:	d000      	beq.n	801488e <_strtod_l+0x80e>
 801488c:	e08a      	b.n	80149a4 <_strtod_l+0x924>
 801488e:	033b      	lsls	r3, r7, #12
 8014890:	d000      	beq.n	8014894 <_strtod_l+0x814>
 8014892:	e087      	b.n	80149a4 <_strtod_l+0x924>
 8014894:	22d6      	movs	r2, #214	; 0xd6
 8014896:	4b47      	ldr	r3, [pc, #284]	; (80149b4 <_strtod_l+0x934>)
 8014898:	04d2      	lsls	r2, r2, #19
 801489a:	403b      	ands	r3, r7
 801489c:	4293      	cmp	r3, r2
 801489e:	d800      	bhi.n	80148a2 <_strtod_l+0x822>
 80148a0:	e080      	b.n	80149a4 <_strtod_l+0x924>
 80148a2:	9b06      	ldr	r3, [sp, #24]
 80148a4:	695b      	ldr	r3, [r3, #20]
 80148a6:	930a      	str	r3, [sp, #40]	; 0x28
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d104      	bne.n	80148b6 <_strtod_l+0x836>
 80148ac:	9b06      	ldr	r3, [sp, #24]
 80148ae:	691b      	ldr	r3, [r3, #16]
 80148b0:	930a      	str	r3, [sp, #40]	; 0x28
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	dd76      	ble.n	80149a4 <_strtod_l+0x924>
 80148b6:	9906      	ldr	r1, [sp, #24]
 80148b8:	2201      	movs	r2, #1
 80148ba:	9805      	ldr	r0, [sp, #20]
 80148bc:	f003 fab0 	bl	8017e20 <__lshift>
 80148c0:	9907      	ldr	r1, [sp, #28]
 80148c2:	9006      	str	r0, [sp, #24]
 80148c4:	f003 fb1a 	bl	8017efc <__mcmp>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	dd6b      	ble.n	80149a4 <_strtod_l+0x924>
 80148cc:	9908      	ldr	r1, [sp, #32]
 80148ce:	003b      	movs	r3, r7
 80148d0:	4a38      	ldr	r2, [pc, #224]	; (80149b4 <_strtod_l+0x934>)
 80148d2:	2900      	cmp	r1, #0
 80148d4:	d100      	bne.n	80148d8 <_strtod_l+0x858>
 80148d6:	e092      	b.n	80149fe <_strtod_l+0x97e>
 80148d8:	0011      	movs	r1, r2
 80148da:	20d6      	movs	r0, #214	; 0xd6
 80148dc:	4039      	ands	r1, r7
 80148de:	04c0      	lsls	r0, r0, #19
 80148e0:	4281      	cmp	r1, r0
 80148e2:	dd00      	ble.n	80148e6 <_strtod_l+0x866>
 80148e4:	e08b      	b.n	80149fe <_strtod_l+0x97e>
 80148e6:	23dc      	movs	r3, #220	; 0xdc
 80148e8:	049b      	lsls	r3, r3, #18
 80148ea:	4299      	cmp	r1, r3
 80148ec:	dc00      	bgt.n	80148f0 <_strtod_l+0x870>
 80148ee:	e6a4      	b.n	801463a <_strtod_l+0x5ba>
 80148f0:	0030      	movs	r0, r6
 80148f2:	0039      	movs	r1, r7
 80148f4:	2200      	movs	r2, #0
 80148f6:	4b30      	ldr	r3, [pc, #192]	; (80149b8 <_strtod_l+0x938>)
 80148f8:	f7ed fbf6 	bl	80020e8 <__aeabi_dmul>
 80148fc:	0006      	movs	r6, r0
 80148fe:	000f      	movs	r7, r1
 8014900:	4308      	orrs	r0, r1
 8014902:	d000      	beq.n	8014906 <_strtod_l+0x886>
 8014904:	e62f      	b.n	8014566 <_strtod_l+0x4e6>
 8014906:	2322      	movs	r3, #34	; 0x22
 8014908:	9a05      	ldr	r2, [sp, #20]
 801490a:	6013      	str	r3, [r2, #0]
 801490c:	e62b      	b.n	8014566 <_strtod_l+0x4e6>
 801490e:	234b      	movs	r3, #75	; 0x4b
 8014910:	1a9a      	subs	r2, r3, r2
 8014912:	3b4c      	subs	r3, #76	; 0x4c
 8014914:	4093      	lsls	r3, r2
 8014916:	4019      	ands	r1, r3
 8014918:	000f      	movs	r7, r1
 801491a:	e6e0      	b.n	80146de <_strtod_l+0x65e>
 801491c:	2201      	movs	r2, #1
 801491e:	4252      	negs	r2, r2
 8014920:	409a      	lsls	r2, r3
 8014922:	4016      	ands	r6, r2
 8014924:	e6db      	b.n	80146de <_strtod_l+0x65e>
 8014926:	4925      	ldr	r1, [pc, #148]	; (80149bc <_strtod_l+0x93c>)
 8014928:	1acb      	subs	r3, r1, r3
 801492a:	0001      	movs	r1, r0
 801492c:	4099      	lsls	r1, r3
 801492e:	9110      	str	r1, [sp, #64]	; 0x40
 8014930:	e741      	b.n	80147b6 <_strtod_l+0x736>
 8014932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014934:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014936:	9805      	ldr	r0, [sp, #20]
 8014938:	f003 fa72 	bl	8017e20 <__lshift>
 801493c:	9020      	str	r0, [sp, #128]	; 0x80
 801493e:	2800      	cmp	r0, #0
 8014940:	d000      	beq.n	8014944 <_strtod_l+0x8c4>
 8014942:	e76c      	b.n	801481e <_strtod_l+0x79e>
 8014944:	e606      	b.n	8014554 <_strtod_l+0x4d4>
 8014946:	970c      	str	r7, [sp, #48]	; 0x30
 8014948:	2800      	cmp	r0, #0
 801494a:	d176      	bne.n	8014a3a <_strtod_l+0x9ba>
 801494c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801494e:	033b      	lsls	r3, r7, #12
 8014950:	0b1b      	lsrs	r3, r3, #12
 8014952:	2a00      	cmp	r2, #0
 8014954:	d038      	beq.n	80149c8 <_strtod_l+0x948>
 8014956:	4a1a      	ldr	r2, [pc, #104]	; (80149c0 <_strtod_l+0x940>)
 8014958:	4293      	cmp	r3, r2
 801495a:	d138      	bne.n	80149ce <_strtod_l+0x94e>
 801495c:	2201      	movs	r2, #1
 801495e:	9b08      	ldr	r3, [sp, #32]
 8014960:	4252      	negs	r2, r2
 8014962:	0031      	movs	r1, r6
 8014964:	0010      	movs	r0, r2
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00b      	beq.n	8014982 <_strtod_l+0x902>
 801496a:	24d4      	movs	r4, #212	; 0xd4
 801496c:	4b11      	ldr	r3, [pc, #68]	; (80149b4 <_strtod_l+0x934>)
 801496e:	0010      	movs	r0, r2
 8014970:	403b      	ands	r3, r7
 8014972:	04e4      	lsls	r4, r4, #19
 8014974:	42a3      	cmp	r3, r4
 8014976:	d804      	bhi.n	8014982 <_strtod_l+0x902>
 8014978:	306c      	adds	r0, #108	; 0x6c
 801497a:	0d1b      	lsrs	r3, r3, #20
 801497c:	1ac3      	subs	r3, r0, r3
 801497e:	409a      	lsls	r2, r3
 8014980:	0010      	movs	r0, r2
 8014982:	4281      	cmp	r1, r0
 8014984:	d123      	bne.n	80149ce <_strtod_l+0x94e>
 8014986:	4b0f      	ldr	r3, [pc, #60]	; (80149c4 <_strtod_l+0x944>)
 8014988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801498a:	429a      	cmp	r2, r3
 801498c:	d102      	bne.n	8014994 <_strtod_l+0x914>
 801498e:	1c4b      	adds	r3, r1, #1
 8014990:	d100      	bne.n	8014994 <_strtod_l+0x914>
 8014992:	e5df      	b.n	8014554 <_strtod_l+0x4d4>
 8014994:	4b07      	ldr	r3, [pc, #28]	; (80149b4 <_strtod_l+0x934>)
 8014996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014998:	2600      	movs	r6, #0
 801499a:	401a      	ands	r2, r3
 801499c:	0013      	movs	r3, r2
 801499e:	2280      	movs	r2, #128	; 0x80
 80149a0:	0352      	lsls	r2, r2, #13
 80149a2:	189f      	adds	r7, r3, r2
 80149a4:	9b08      	ldr	r3, [sp, #32]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d1a2      	bne.n	80148f0 <_strtod_l+0x870>
 80149aa:	e5dc      	b.n	8014566 <_strtod_l+0x4e6>
 80149ac:	0801d098 	.word	0x0801d098
 80149b0:	fffffc02 	.word	0xfffffc02
 80149b4:	7ff00000 	.word	0x7ff00000
 80149b8:	39500000 	.word	0x39500000
 80149bc:	fffffbe2 	.word	0xfffffbe2
 80149c0:	000fffff 	.word	0x000fffff
 80149c4:	7fefffff 	.word	0x7fefffff
 80149c8:	4333      	orrs	r3, r6
 80149ca:	d100      	bne.n	80149ce <_strtod_l+0x94e>
 80149cc:	e77e      	b.n	80148cc <_strtod_l+0x84c>
 80149ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d01d      	beq.n	8014a10 <_strtod_l+0x990>
 80149d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80149d8:	4213      	tst	r3, r2
 80149da:	d0e3      	beq.n	80149a4 <_strtod_l+0x924>
 80149dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149de:	0030      	movs	r0, r6
 80149e0:	0039      	movs	r1, r7
 80149e2:	9a08      	ldr	r2, [sp, #32]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d017      	beq.n	8014a18 <_strtod_l+0x998>
 80149e8:	f7ff fb32 	bl	8014050 <sulp>
 80149ec:	0002      	movs	r2, r0
 80149ee:	000b      	movs	r3, r1
 80149f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80149f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80149f4:	f7ec fc3a 	bl	800126c <__aeabi_dadd>
 80149f8:	0006      	movs	r6, r0
 80149fa:	000f      	movs	r7, r1
 80149fc:	e7d2      	b.n	80149a4 <_strtod_l+0x924>
 80149fe:	2601      	movs	r6, #1
 8014a00:	4013      	ands	r3, r2
 8014a02:	4a99      	ldr	r2, [pc, #612]	; (8014c68 <_strtod_l+0xbe8>)
 8014a04:	4276      	negs	r6, r6
 8014a06:	189b      	adds	r3, r3, r2
 8014a08:	4a98      	ldr	r2, [pc, #608]	; (8014c6c <_strtod_l+0xbec>)
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	0017      	movs	r7, r2
 8014a0e:	e7c9      	b.n	80149a4 <_strtod_l+0x924>
 8014a10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a12:	4233      	tst	r3, r6
 8014a14:	d0c6      	beq.n	80149a4 <_strtod_l+0x924>
 8014a16:	e7e1      	b.n	80149dc <_strtod_l+0x95c>
 8014a18:	f7ff fb1a 	bl	8014050 <sulp>
 8014a1c:	0002      	movs	r2, r0
 8014a1e:	000b      	movs	r3, r1
 8014a20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014a22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014a24:	f7ed fdcc 	bl	80025c0 <__aeabi_dsub>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	0006      	movs	r6, r0
 8014a2e:	000f      	movs	r7, r1
 8014a30:	f7eb fd14 	bl	800045c <__aeabi_dcmpeq>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d0b5      	beq.n	80149a4 <_strtod_l+0x924>
 8014a38:	e5ff      	b.n	801463a <_strtod_l+0x5ba>
 8014a3a:	9907      	ldr	r1, [sp, #28]
 8014a3c:	9806      	ldr	r0, [sp, #24]
 8014a3e:	f003 fbe9 	bl	8018214 <__ratio>
 8014a42:	2380      	movs	r3, #128	; 0x80
 8014a44:	2200      	movs	r2, #0
 8014a46:	05db      	lsls	r3, r3, #23
 8014a48:	0004      	movs	r4, r0
 8014a4a:	000d      	movs	r5, r1
 8014a4c:	f7eb fd16 	bl	800047c <__aeabi_dcmple>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d075      	beq.n	8014b40 <_strtod_l+0xac0>
 8014a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d047      	beq.n	8014aea <_strtod_l+0xa6a>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	4c84      	ldr	r4, [pc, #528]	; (8014c70 <_strtod_l+0xbf0>)
 8014a5e:	2500      	movs	r5, #0
 8014a60:	9310      	str	r3, [sp, #64]	; 0x40
 8014a62:	9411      	str	r4, [sp, #68]	; 0x44
 8014a64:	4c82      	ldr	r4, [pc, #520]	; (8014c70 <_strtod_l+0xbf0>)
 8014a66:	4a83      	ldr	r2, [pc, #524]	; (8014c74 <_strtod_l+0xbf4>)
 8014a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	9314      	str	r3, [sp, #80]	; 0x50
 8014a6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a70:	4b81      	ldr	r3, [pc, #516]	; (8014c78 <_strtod_l+0xbf8>)
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d000      	beq.n	8014a78 <_strtod_l+0x9f8>
 8014a76:	e0ac      	b.n	8014bd2 <_strtod_l+0xb52>
 8014a78:	4a80      	ldr	r2, [pc, #512]	; (8014c7c <_strtod_l+0xbfc>)
 8014a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a7c:	4694      	mov	ip, r2
 8014a7e:	4463      	add	r3, ip
 8014a80:	001f      	movs	r7, r3
 8014a82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a86:	0030      	movs	r0, r6
 8014a88:	0039      	movs	r1, r7
 8014a8a:	920c      	str	r2, [sp, #48]	; 0x30
 8014a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8014a8e:	f003 fae9 	bl	8018064 <__ulp>
 8014a92:	0002      	movs	r2, r0
 8014a94:	000b      	movs	r3, r1
 8014a96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014a98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a9a:	f7ed fb25 	bl	80020e8 <__aeabi_dmul>
 8014a9e:	0032      	movs	r2, r6
 8014aa0:	003b      	movs	r3, r7
 8014aa2:	f7ec fbe3 	bl	800126c <__aeabi_dadd>
 8014aa6:	4a73      	ldr	r2, [pc, #460]	; (8014c74 <_strtod_l+0xbf4>)
 8014aa8:	4b75      	ldr	r3, [pc, #468]	; (8014c80 <_strtod_l+0xc00>)
 8014aaa:	0006      	movs	r6, r0
 8014aac:	400a      	ands	r2, r1
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d95e      	bls.n	8014b70 <_strtod_l+0xaf0>
 8014ab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014ab4:	4b73      	ldr	r3, [pc, #460]	; (8014c84 <_strtod_l+0xc04>)
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d103      	bne.n	8014ac2 <_strtod_l+0xa42>
 8014aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014abc:	3301      	adds	r3, #1
 8014abe:	d100      	bne.n	8014ac2 <_strtod_l+0xa42>
 8014ac0:	e548      	b.n	8014554 <_strtod_l+0x4d4>
 8014ac2:	2601      	movs	r6, #1
 8014ac4:	4f6f      	ldr	r7, [pc, #444]	; (8014c84 <_strtod_l+0xc04>)
 8014ac6:	4276      	negs	r6, r6
 8014ac8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014aca:	9805      	ldr	r0, [sp, #20]
 8014acc:	f002 ffbe 	bl	8017a4c <_Bfree>
 8014ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ad2:	9805      	ldr	r0, [sp, #20]
 8014ad4:	f002 ffba 	bl	8017a4c <_Bfree>
 8014ad8:	9907      	ldr	r1, [sp, #28]
 8014ada:	9805      	ldr	r0, [sp, #20]
 8014adc:	f002 ffb6 	bl	8017a4c <_Bfree>
 8014ae0:	9906      	ldr	r1, [sp, #24]
 8014ae2:	9805      	ldr	r0, [sp, #20]
 8014ae4:	f002 ffb2 	bl	8017a4c <_Bfree>
 8014ae8:	e61d      	b.n	8014726 <_strtod_l+0x6a6>
 8014aea:	2e00      	cmp	r6, #0
 8014aec:	d11c      	bne.n	8014b28 <_strtod_l+0xaa8>
 8014aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af0:	031b      	lsls	r3, r3, #12
 8014af2:	d11f      	bne.n	8014b34 <_strtod_l+0xab4>
 8014af4:	2200      	movs	r2, #0
 8014af6:	0020      	movs	r0, r4
 8014af8:	0029      	movs	r1, r5
 8014afa:	4b5d      	ldr	r3, [pc, #372]	; (8014c70 <_strtod_l+0xbf0>)
 8014afc:	f7eb fcb4 	bl	8000468 <__aeabi_dcmplt>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d11a      	bne.n	8014b3a <_strtod_l+0xaba>
 8014b04:	0020      	movs	r0, r4
 8014b06:	0029      	movs	r1, r5
 8014b08:	2200      	movs	r2, #0
 8014b0a:	4b5f      	ldr	r3, [pc, #380]	; (8014c88 <_strtod_l+0xc08>)
 8014b0c:	f7ed faec 	bl	80020e8 <__aeabi_dmul>
 8014b10:	0005      	movs	r5, r0
 8014b12:	000c      	movs	r4, r1
 8014b14:	2380      	movs	r3, #128	; 0x80
 8014b16:	061b      	lsls	r3, r3, #24
 8014b18:	18e3      	adds	r3, r4, r3
 8014b1a:	951c      	str	r5, [sp, #112]	; 0x70
 8014b1c:	931d      	str	r3, [sp, #116]	; 0x74
 8014b1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b22:	9210      	str	r2, [sp, #64]	; 0x40
 8014b24:	9311      	str	r3, [sp, #68]	; 0x44
 8014b26:	e79e      	b.n	8014a66 <_strtod_l+0x9e6>
 8014b28:	2e01      	cmp	r6, #1
 8014b2a:	d103      	bne.n	8014b34 <_strtod_l+0xab4>
 8014b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d100      	bne.n	8014b34 <_strtod_l+0xab4>
 8014b32:	e582      	b.n	801463a <_strtod_l+0x5ba>
 8014b34:	2300      	movs	r3, #0
 8014b36:	4c55      	ldr	r4, [pc, #340]	; (8014c8c <_strtod_l+0xc0c>)
 8014b38:	e791      	b.n	8014a5e <_strtod_l+0x9de>
 8014b3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014b3c:	4c52      	ldr	r4, [pc, #328]	; (8014c88 <_strtod_l+0xc08>)
 8014b3e:	e7e9      	b.n	8014b14 <_strtod_l+0xa94>
 8014b40:	2200      	movs	r2, #0
 8014b42:	0020      	movs	r0, r4
 8014b44:	0029      	movs	r1, r5
 8014b46:	4b50      	ldr	r3, [pc, #320]	; (8014c88 <_strtod_l+0xc08>)
 8014b48:	f7ed face 	bl	80020e8 <__aeabi_dmul>
 8014b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b4e:	0005      	movs	r5, r0
 8014b50:	000b      	movs	r3, r1
 8014b52:	000c      	movs	r4, r1
 8014b54:	2a00      	cmp	r2, #0
 8014b56:	d107      	bne.n	8014b68 <_strtod_l+0xae8>
 8014b58:	2280      	movs	r2, #128	; 0x80
 8014b5a:	0612      	lsls	r2, r2, #24
 8014b5c:	188b      	adds	r3, r1, r2
 8014b5e:	9016      	str	r0, [sp, #88]	; 0x58
 8014b60:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b66:	e7dc      	b.n	8014b22 <_strtod_l+0xaa2>
 8014b68:	0002      	movs	r2, r0
 8014b6a:	9216      	str	r2, [sp, #88]	; 0x58
 8014b6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b6e:	e7f8      	b.n	8014b62 <_strtod_l+0xae2>
 8014b70:	23d4      	movs	r3, #212	; 0xd4
 8014b72:	049b      	lsls	r3, r3, #18
 8014b74:	18cf      	adds	r7, r1, r3
 8014b76:	9b08      	ldr	r3, [sp, #32]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d1a5      	bne.n	8014ac8 <_strtod_l+0xa48>
 8014b7c:	4b3d      	ldr	r3, [pc, #244]	; (8014c74 <_strtod_l+0xbf4>)
 8014b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b80:	403b      	ands	r3, r7
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d1a0      	bne.n	8014ac8 <_strtod_l+0xa48>
 8014b86:	0028      	movs	r0, r5
 8014b88:	0021      	movs	r1, r4
 8014b8a:	f7eb fd53 	bl	8000634 <__aeabi_d2lz>
 8014b8e:	f7eb fd8d 	bl	80006ac <__aeabi_l2d>
 8014b92:	0002      	movs	r2, r0
 8014b94:	000b      	movs	r3, r1
 8014b96:	0028      	movs	r0, r5
 8014b98:	0021      	movs	r1, r4
 8014b9a:	f7ed fd11 	bl	80025c0 <__aeabi_dsub>
 8014b9e:	033b      	lsls	r3, r7, #12
 8014ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ba2:	0b1b      	lsrs	r3, r3, #12
 8014ba4:	4333      	orrs	r3, r6
 8014ba6:	4313      	orrs	r3, r2
 8014ba8:	0004      	movs	r4, r0
 8014baa:	000d      	movs	r5, r1
 8014bac:	4a38      	ldr	r2, [pc, #224]	; (8014c90 <_strtod_l+0xc10>)
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d055      	beq.n	8014c5e <_strtod_l+0xbde>
 8014bb2:	4b38      	ldr	r3, [pc, #224]	; (8014c94 <_strtod_l+0xc14>)
 8014bb4:	f7eb fc58 	bl	8000468 <__aeabi_dcmplt>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d000      	beq.n	8014bbe <_strtod_l+0xb3e>
 8014bbc:	e4d3      	b.n	8014566 <_strtod_l+0x4e6>
 8014bbe:	0020      	movs	r0, r4
 8014bc0:	0029      	movs	r1, r5
 8014bc2:	4a35      	ldr	r2, [pc, #212]	; (8014c98 <_strtod_l+0xc18>)
 8014bc4:	4b30      	ldr	r3, [pc, #192]	; (8014c88 <_strtod_l+0xc08>)
 8014bc6:	f7eb fc63 	bl	8000490 <__aeabi_dcmpgt>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d100      	bne.n	8014bd0 <_strtod_l+0xb50>
 8014bce:	e77b      	b.n	8014ac8 <_strtod_l+0xa48>
 8014bd0:	e4c9      	b.n	8014566 <_strtod_l+0x4e6>
 8014bd2:	9b08      	ldr	r3, [sp, #32]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d02b      	beq.n	8014c30 <_strtod_l+0xbb0>
 8014bd8:	23d4      	movs	r3, #212	; 0xd4
 8014bda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014bdc:	04db      	lsls	r3, r3, #19
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d826      	bhi.n	8014c30 <_strtod_l+0xbb0>
 8014be2:	0028      	movs	r0, r5
 8014be4:	0021      	movs	r1, r4
 8014be6:	4a2d      	ldr	r2, [pc, #180]	; (8014c9c <_strtod_l+0xc1c>)
 8014be8:	4b2d      	ldr	r3, [pc, #180]	; (8014ca0 <_strtod_l+0xc20>)
 8014bea:	f7eb fc47 	bl	800047c <__aeabi_dcmple>
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d017      	beq.n	8014c22 <_strtod_l+0xba2>
 8014bf2:	0028      	movs	r0, r5
 8014bf4:	0021      	movs	r1, r4
 8014bf6:	f7eb fcff 	bl	80005f8 <__aeabi_d2uiz>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d100      	bne.n	8014c00 <_strtod_l+0xb80>
 8014bfe:	3001      	adds	r0, #1
 8014c00:	f7ee f8f4 	bl	8002dec <__aeabi_ui2d>
 8014c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c06:	0005      	movs	r5, r0
 8014c08:	000b      	movs	r3, r1
 8014c0a:	000c      	movs	r4, r1
 8014c0c:	2a00      	cmp	r2, #0
 8014c0e:	d122      	bne.n	8014c56 <_strtod_l+0xbd6>
 8014c10:	2280      	movs	r2, #128	; 0x80
 8014c12:	0612      	lsls	r2, r2, #24
 8014c14:	188b      	adds	r3, r1, r2
 8014c16:	9018      	str	r0, [sp, #96]	; 0x60
 8014c18:	9319      	str	r3, [sp, #100]	; 0x64
 8014c1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c1e:	9210      	str	r2, [sp, #64]	; 0x40
 8014c20:	9311      	str	r3, [sp, #68]	; 0x44
 8014c22:	22d6      	movs	r2, #214	; 0xd6
 8014c24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c26:	04d2      	lsls	r2, r2, #19
 8014c28:	189b      	adds	r3, r3, r2
 8014c2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c2c:	1a9b      	subs	r3, r3, r2
 8014c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8014c30:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014c32:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014c34:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014c36:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014c38:	f003 fa14 	bl	8018064 <__ulp>
 8014c3c:	0002      	movs	r2, r0
 8014c3e:	000b      	movs	r3, r1
 8014c40:	0030      	movs	r0, r6
 8014c42:	0039      	movs	r1, r7
 8014c44:	f7ed fa50 	bl	80020e8 <__aeabi_dmul>
 8014c48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c4c:	f7ec fb0e 	bl	800126c <__aeabi_dadd>
 8014c50:	0006      	movs	r6, r0
 8014c52:	000f      	movs	r7, r1
 8014c54:	e78f      	b.n	8014b76 <_strtod_l+0xaf6>
 8014c56:	0002      	movs	r2, r0
 8014c58:	9218      	str	r2, [sp, #96]	; 0x60
 8014c5a:	9319      	str	r3, [sp, #100]	; 0x64
 8014c5c:	e7dd      	b.n	8014c1a <_strtod_l+0xb9a>
 8014c5e:	4b11      	ldr	r3, [pc, #68]	; (8014ca4 <_strtod_l+0xc24>)
 8014c60:	f7eb fc02 	bl	8000468 <__aeabi_dcmplt>
 8014c64:	e7b1      	b.n	8014bca <_strtod_l+0xb4a>
 8014c66:	46c0      	nop			; (mov r8, r8)
 8014c68:	fff00000 	.word	0xfff00000
 8014c6c:	000fffff 	.word	0x000fffff
 8014c70:	3ff00000 	.word	0x3ff00000
 8014c74:	7ff00000 	.word	0x7ff00000
 8014c78:	7fe00000 	.word	0x7fe00000
 8014c7c:	fcb00000 	.word	0xfcb00000
 8014c80:	7c9fffff 	.word	0x7c9fffff
 8014c84:	7fefffff 	.word	0x7fefffff
 8014c88:	3fe00000 	.word	0x3fe00000
 8014c8c:	bff00000 	.word	0xbff00000
 8014c90:	94a03595 	.word	0x94a03595
 8014c94:	3fdfffff 	.word	0x3fdfffff
 8014c98:	35afe535 	.word	0x35afe535
 8014c9c:	ffc00000 	.word	0xffc00000
 8014ca0:	41dfffff 	.word	0x41dfffff
 8014ca4:	3fcfffff 	.word	0x3fcfffff

08014ca8 <strtod>:
 8014ca8:	b510      	push	{r4, lr}
 8014caa:	000a      	movs	r2, r1
 8014cac:	0001      	movs	r1, r0
 8014cae:	4803      	ldr	r0, [pc, #12]	; (8014cbc <strtod+0x14>)
 8014cb0:	4b03      	ldr	r3, [pc, #12]	; (8014cc0 <strtod+0x18>)
 8014cb2:	6800      	ldr	r0, [r0, #0]
 8014cb4:	f7ff f9e4 	bl	8014080 <_strtod_l>
 8014cb8:	bd10      	pop	{r4, pc}
 8014cba:	46c0      	nop			; (mov r8, r8)
 8014cbc:	200000d0 	.word	0x200000d0
 8014cc0:	20000918 	.word	0x20000918

08014cc4 <strtok>:
 8014cc4:	4b03      	ldr	r3, [pc, #12]	; (8014cd4 <strtok+0x10>)
 8014cc6:	b510      	push	{r4, lr}
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	2301      	movs	r3, #1
 8014ccc:	325c      	adds	r2, #92	; 0x5c
 8014cce:	f000 f803 	bl	8014cd8 <__strtok_r>
 8014cd2:	bd10      	pop	{r4, pc}
 8014cd4:	200000d0 	.word	0x200000d0

08014cd8 <__strtok_r>:
 8014cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cda:	2800      	cmp	r0, #0
 8014cdc:	d102      	bne.n	8014ce4 <__strtok_r+0xc>
 8014cde:	6810      	ldr	r0, [r2, #0]
 8014ce0:	2800      	cmp	r0, #0
 8014ce2:	d013      	beq.n	8014d0c <__strtok_r+0x34>
 8014ce4:	0004      	movs	r4, r0
 8014ce6:	0020      	movs	r0, r4
 8014ce8:	000e      	movs	r6, r1
 8014cea:	7805      	ldrb	r5, [r0, #0]
 8014cec:	3401      	adds	r4, #1
 8014cee:	7837      	ldrb	r7, [r6, #0]
 8014cf0:	2f00      	cmp	r7, #0
 8014cf2:	d104      	bne.n	8014cfe <__strtok_r+0x26>
 8014cf4:	2d00      	cmp	r5, #0
 8014cf6:	d10f      	bne.n	8014d18 <__strtok_r+0x40>
 8014cf8:	0028      	movs	r0, r5
 8014cfa:	6015      	str	r5, [r2, #0]
 8014cfc:	e006      	b.n	8014d0c <__strtok_r+0x34>
 8014cfe:	3601      	adds	r6, #1
 8014d00:	42bd      	cmp	r5, r7
 8014d02:	d1f4      	bne.n	8014cee <__strtok_r+0x16>
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d1ee      	bne.n	8014ce6 <__strtok_r+0xe>
 8014d08:	6014      	str	r4, [r2, #0]
 8014d0a:	7003      	strb	r3, [r0, #0]
 8014d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d0e:	002f      	movs	r7, r5
 8014d10:	e00f      	b.n	8014d32 <__strtok_r+0x5a>
 8014d12:	3301      	adds	r3, #1
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	d104      	bne.n	8014d22 <__strtok_r+0x4a>
 8014d18:	0023      	movs	r3, r4
 8014d1a:	3401      	adds	r4, #1
 8014d1c:	781d      	ldrb	r5, [r3, #0]
 8014d1e:	0027      	movs	r7, r4
 8014d20:	000b      	movs	r3, r1
 8014d22:	781e      	ldrb	r6, [r3, #0]
 8014d24:	42b5      	cmp	r5, r6
 8014d26:	d1f4      	bne.n	8014d12 <__strtok_r+0x3a>
 8014d28:	2d00      	cmp	r5, #0
 8014d2a:	d0f0      	beq.n	8014d0e <__strtok_r+0x36>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	3c01      	subs	r4, #1
 8014d30:	7023      	strb	r3, [r4, #0]
 8014d32:	6017      	str	r7, [r2, #0]
 8014d34:	e7ea      	b.n	8014d0c <__strtok_r+0x34>
	...

08014d38 <_strtol_l.constprop.0>:
 8014d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d3a:	b087      	sub	sp, #28
 8014d3c:	001e      	movs	r6, r3
 8014d3e:	9005      	str	r0, [sp, #20]
 8014d40:	9101      	str	r1, [sp, #4]
 8014d42:	9202      	str	r2, [sp, #8]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d045      	beq.n	8014dd4 <_strtol_l.constprop.0+0x9c>
 8014d48:	000b      	movs	r3, r1
 8014d4a:	2e24      	cmp	r6, #36	; 0x24
 8014d4c:	d842      	bhi.n	8014dd4 <_strtol_l.constprop.0+0x9c>
 8014d4e:	4a3f      	ldr	r2, [pc, #252]	; (8014e4c <_strtol_l.constprop.0+0x114>)
 8014d50:	2108      	movs	r1, #8
 8014d52:	4694      	mov	ip, r2
 8014d54:	001a      	movs	r2, r3
 8014d56:	4660      	mov	r0, ip
 8014d58:	7814      	ldrb	r4, [r2, #0]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	5d00      	ldrb	r0, [r0, r4]
 8014d5e:	001d      	movs	r5, r3
 8014d60:	0007      	movs	r7, r0
 8014d62:	400f      	ands	r7, r1
 8014d64:	4208      	tst	r0, r1
 8014d66:	d1f5      	bne.n	8014d54 <_strtol_l.constprop.0+0x1c>
 8014d68:	2c2d      	cmp	r4, #45	; 0x2d
 8014d6a:	d13a      	bne.n	8014de2 <_strtol_l.constprop.0+0xaa>
 8014d6c:	2701      	movs	r7, #1
 8014d6e:	781c      	ldrb	r4, [r3, #0]
 8014d70:	1c95      	adds	r5, r2, #2
 8014d72:	2e00      	cmp	r6, #0
 8014d74:	d065      	beq.n	8014e42 <_strtol_l.constprop.0+0x10a>
 8014d76:	2e10      	cmp	r6, #16
 8014d78:	d109      	bne.n	8014d8e <_strtol_l.constprop.0+0x56>
 8014d7a:	2c30      	cmp	r4, #48	; 0x30
 8014d7c:	d107      	bne.n	8014d8e <_strtol_l.constprop.0+0x56>
 8014d7e:	2220      	movs	r2, #32
 8014d80:	782b      	ldrb	r3, [r5, #0]
 8014d82:	4393      	bics	r3, r2
 8014d84:	2b58      	cmp	r3, #88	; 0x58
 8014d86:	d157      	bne.n	8014e38 <_strtol_l.constprop.0+0x100>
 8014d88:	2610      	movs	r6, #16
 8014d8a:	786c      	ldrb	r4, [r5, #1]
 8014d8c:	3502      	adds	r5, #2
 8014d8e:	4b30      	ldr	r3, [pc, #192]	; (8014e50 <_strtol_l.constprop.0+0x118>)
 8014d90:	0031      	movs	r1, r6
 8014d92:	18fb      	adds	r3, r7, r3
 8014d94:	0018      	movs	r0, r3
 8014d96:	9303      	str	r3, [sp, #12]
 8014d98:	f7eb fa60 	bl	800025c <__aeabi_uidivmod>
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	2201      	movs	r2, #1
 8014da0:	4684      	mov	ip, r0
 8014da2:	0018      	movs	r0, r3
 8014da4:	9104      	str	r1, [sp, #16]
 8014da6:	4252      	negs	r2, r2
 8014da8:	0021      	movs	r1, r4
 8014daa:	3930      	subs	r1, #48	; 0x30
 8014dac:	2909      	cmp	r1, #9
 8014dae:	d81d      	bhi.n	8014dec <_strtol_l.constprop.0+0xb4>
 8014db0:	000c      	movs	r4, r1
 8014db2:	42a6      	cmp	r6, r4
 8014db4:	dd28      	ble.n	8014e08 <_strtol_l.constprop.0+0xd0>
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	db24      	blt.n	8014e04 <_strtol_l.constprop.0+0xcc>
 8014dba:	0013      	movs	r3, r2
 8014dbc:	4584      	cmp	ip, r0
 8014dbe:	d306      	bcc.n	8014dce <_strtol_l.constprop.0+0x96>
 8014dc0:	d102      	bne.n	8014dc8 <_strtol_l.constprop.0+0x90>
 8014dc2:	9904      	ldr	r1, [sp, #16]
 8014dc4:	42a1      	cmp	r1, r4
 8014dc6:	db02      	blt.n	8014dce <_strtol_l.constprop.0+0x96>
 8014dc8:	2301      	movs	r3, #1
 8014dca:	4370      	muls	r0, r6
 8014dcc:	1820      	adds	r0, r4, r0
 8014dce:	782c      	ldrb	r4, [r5, #0]
 8014dd0:	3501      	adds	r5, #1
 8014dd2:	e7e9      	b.n	8014da8 <_strtol_l.constprop.0+0x70>
 8014dd4:	f7fe fc7a 	bl	80136cc <__errno>
 8014dd8:	2316      	movs	r3, #22
 8014dda:	6003      	str	r3, [r0, #0]
 8014ddc:	2000      	movs	r0, #0
 8014dde:	b007      	add	sp, #28
 8014de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014de2:	2c2b      	cmp	r4, #43	; 0x2b
 8014de4:	d1c5      	bne.n	8014d72 <_strtol_l.constprop.0+0x3a>
 8014de6:	781c      	ldrb	r4, [r3, #0]
 8014de8:	1c95      	adds	r5, r2, #2
 8014dea:	e7c2      	b.n	8014d72 <_strtol_l.constprop.0+0x3a>
 8014dec:	0021      	movs	r1, r4
 8014dee:	3941      	subs	r1, #65	; 0x41
 8014df0:	2919      	cmp	r1, #25
 8014df2:	d801      	bhi.n	8014df8 <_strtol_l.constprop.0+0xc0>
 8014df4:	3c37      	subs	r4, #55	; 0x37
 8014df6:	e7dc      	b.n	8014db2 <_strtol_l.constprop.0+0x7a>
 8014df8:	0021      	movs	r1, r4
 8014dfa:	3961      	subs	r1, #97	; 0x61
 8014dfc:	2919      	cmp	r1, #25
 8014dfe:	d803      	bhi.n	8014e08 <_strtol_l.constprop.0+0xd0>
 8014e00:	3c57      	subs	r4, #87	; 0x57
 8014e02:	e7d6      	b.n	8014db2 <_strtol_l.constprop.0+0x7a>
 8014e04:	0013      	movs	r3, r2
 8014e06:	e7e2      	b.n	8014dce <_strtol_l.constprop.0+0x96>
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	da09      	bge.n	8014e20 <_strtol_l.constprop.0+0xe8>
 8014e0c:	2322      	movs	r3, #34	; 0x22
 8014e0e:	9a05      	ldr	r2, [sp, #20]
 8014e10:	9803      	ldr	r0, [sp, #12]
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	9b02      	ldr	r3, [sp, #8]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d0e1      	beq.n	8014dde <_strtol_l.constprop.0+0xa6>
 8014e1a:	1e6b      	subs	r3, r5, #1
 8014e1c:	9301      	str	r3, [sp, #4]
 8014e1e:	e007      	b.n	8014e30 <_strtol_l.constprop.0+0xf8>
 8014e20:	2f00      	cmp	r7, #0
 8014e22:	d000      	beq.n	8014e26 <_strtol_l.constprop.0+0xee>
 8014e24:	4240      	negs	r0, r0
 8014e26:	9a02      	ldr	r2, [sp, #8]
 8014e28:	2a00      	cmp	r2, #0
 8014e2a:	d0d8      	beq.n	8014dde <_strtol_l.constprop.0+0xa6>
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d1f4      	bne.n	8014e1a <_strtol_l.constprop.0+0xe2>
 8014e30:	9b02      	ldr	r3, [sp, #8]
 8014e32:	9a01      	ldr	r2, [sp, #4]
 8014e34:	601a      	str	r2, [r3, #0]
 8014e36:	e7d2      	b.n	8014dde <_strtol_l.constprop.0+0xa6>
 8014e38:	2430      	movs	r4, #48	; 0x30
 8014e3a:	2e00      	cmp	r6, #0
 8014e3c:	d1a7      	bne.n	8014d8e <_strtol_l.constprop.0+0x56>
 8014e3e:	3608      	adds	r6, #8
 8014e40:	e7a5      	b.n	8014d8e <_strtol_l.constprop.0+0x56>
 8014e42:	2c30      	cmp	r4, #48	; 0x30
 8014e44:	d09b      	beq.n	8014d7e <_strtol_l.constprop.0+0x46>
 8014e46:	260a      	movs	r6, #10
 8014e48:	e7a1      	b.n	8014d8e <_strtol_l.constprop.0+0x56>
 8014e4a:	46c0      	nop			; (mov r8, r8)
 8014e4c:	0801cf6a 	.word	0x0801cf6a
 8014e50:	7fffffff 	.word	0x7fffffff

08014e54 <strtol>:
 8014e54:	b510      	push	{r4, lr}
 8014e56:	0013      	movs	r3, r2
 8014e58:	000a      	movs	r2, r1
 8014e5a:	0001      	movs	r1, r0
 8014e5c:	4802      	ldr	r0, [pc, #8]	; (8014e68 <strtol+0x14>)
 8014e5e:	6800      	ldr	r0, [r0, #0]
 8014e60:	f7ff ff6a 	bl	8014d38 <_strtol_l.constprop.0>
 8014e64:	bd10      	pop	{r4, pc}
 8014e66:	46c0      	nop			; (mov r8, r8)
 8014e68:	200000d0 	.word	0x200000d0

08014e6c <_svfprintf_r>:
 8014e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e6e:	b0d9      	sub	sp, #356	; 0x164
 8014e70:	001c      	movs	r4, r3
 8014e72:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e74:	9208      	str	r2, [sp, #32]
 8014e76:	900a      	str	r0, [sp, #40]	; 0x28
 8014e78:	f002 fd88 	bl	801798c <_localeconv_r>
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	0018      	movs	r0, r3
 8014e80:	931c      	str	r3, [sp, #112]	; 0x70
 8014e82:	f7eb f949 	bl	8000118 <strlen>
 8014e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e88:	9016      	str	r0, [sp, #88]	; 0x58
 8014e8a:	899b      	ldrh	r3, [r3, #12]
 8014e8c:	061b      	lsls	r3, r3, #24
 8014e8e:	d518      	bpl.n	8014ec2 <_svfprintf_r+0x56>
 8014e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e92:	691b      	ldr	r3, [r3, #16]
 8014e94:	9309      	str	r3, [sp, #36]	; 0x24
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d113      	bne.n	8014ec2 <_svfprintf_r+0x56>
 8014e9a:	2140      	movs	r1, #64	; 0x40
 8014e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e9e:	f7fe fc53 	bl	8013748 <_malloc_r>
 8014ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ea4:	6018      	str	r0, [r3, #0]
 8014ea6:	6118      	str	r0, [r3, #16]
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	d107      	bne.n	8014ebc <_svfprintf_r+0x50>
 8014eac:	230c      	movs	r3, #12
 8014eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eb0:	6013      	str	r3, [r2, #0]
 8014eb2:	3b0d      	subs	r3, #13
 8014eb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014eb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014eb8:	b059      	add	sp, #356	; 0x164
 8014eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ebc:	2340      	movs	r3, #64	; 0x40
 8014ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ec0:	6153      	str	r3, [r2, #20]
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	932e      	str	r3, [sp, #184]	; 0xb8
 8014ec8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014eca:	930e      	str	r3, [sp, #56]	; 0x38
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9214      	str	r2, [sp, #80]	; 0x50
 8014ed0:	9315      	str	r3, [sp, #84]	; 0x54
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	af2f      	add	r7, sp, #188	; 0xbc
 8014ed6:	972c      	str	r7, [sp, #176]	; 0xb0
 8014ed8:	931f      	str	r3, [sp, #124]	; 0x7c
 8014eda:	931e      	str	r3, [sp, #120]	; 0x78
 8014edc:	9312      	str	r3, [sp, #72]	; 0x48
 8014ede:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ee0:	931d      	str	r3, [sp, #116]	; 0x74
 8014ee2:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ee4:	9d08      	ldr	r5, [sp, #32]
 8014ee6:	782b      	ldrb	r3, [r5, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d002      	beq.n	8014ef2 <_svfprintf_r+0x86>
 8014eec:	2b25      	cmp	r3, #37	; 0x25
 8014eee:	d000      	beq.n	8014ef2 <_svfprintf_r+0x86>
 8014ef0:	e092      	b.n	8015018 <_svfprintf_r+0x1ac>
 8014ef2:	9b08      	ldr	r3, [sp, #32]
 8014ef4:	1aee      	subs	r6, r5, r3
 8014ef6:	429d      	cmp	r5, r3
 8014ef8:	d017      	beq.n	8014f2a <_svfprintf_r+0xbe>
 8014efa:	603b      	str	r3, [r7, #0]
 8014efc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014efe:	607e      	str	r6, [r7, #4]
 8014f00:	199b      	adds	r3, r3, r6
 8014f02:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f06:	3708      	adds	r7, #8
 8014f08:	9309      	str	r3, [sp, #36]	; 0x24
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f0e:	2b07      	cmp	r3, #7
 8014f10:	dd08      	ble.n	8014f24 <_svfprintf_r+0xb8>
 8014f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f16:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f18:	f003 fa22 	bl	8018360 <__ssprint_r>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d000      	beq.n	8014f22 <_svfprintf_r+0xb6>
 8014f20:	e1cf      	b.n	80152c2 <_svfprintf_r+0x456>
 8014f22:	af2f      	add	r7, sp, #188	; 0xbc
 8014f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f26:	199b      	adds	r3, r3, r6
 8014f28:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f2a:	782b      	ldrb	r3, [r5, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <_svfprintf_r+0xc8>
 8014f30:	f001 f9bc 	bl	80162ac <_svfprintf_r+0x1440>
 8014f34:	221b      	movs	r2, #27
 8014f36:	2300      	movs	r3, #0
 8014f38:	a91e      	add	r1, sp, #120	; 0x78
 8014f3a:	1852      	adds	r2, r2, r1
 8014f3c:	7013      	strb	r3, [r2, #0]
 8014f3e:	2201      	movs	r2, #1
 8014f40:	001e      	movs	r6, r3
 8014f42:	4252      	negs	r2, r2
 8014f44:	3501      	adds	r5, #1
 8014f46:	9209      	str	r2, [sp, #36]	; 0x24
 8014f48:	9318      	str	r3, [sp, #96]	; 0x60
 8014f4a:	1c6b      	adds	r3, r5, #1
 8014f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f4e:	782b      	ldrb	r3, [r5, #0]
 8014f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014f54:	3820      	subs	r0, #32
 8014f56:	285a      	cmp	r0, #90	; 0x5a
 8014f58:	d901      	bls.n	8014f5e <_svfprintf_r+0xf2>
 8014f5a:	f000 fe1f 	bl	8015b9c <_svfprintf_r+0xd30>
 8014f5e:	f7eb f8ed 	bl	800013c <__gnu_thumb1_case_uhi>
 8014f62:	0078      	.short	0x0078
 8014f64:	061d061d 	.word	0x061d061d
 8014f68:	061d0082 	.word	0x061d0082
 8014f6c:	061d061d 	.word	0x061d061d
 8014f70:	061d005d 	.word	0x061d005d
 8014f74:	0084061d 	.word	0x0084061d
 8014f78:	061d008c 	.word	0x061d008c
 8014f7c:	0091008a 	.word	0x0091008a
 8014f80:	00b2061d 	.word	0x00b2061d
 8014f84:	00b400b4 	.word	0x00b400b4
 8014f88:	00b400b4 	.word	0x00b400b4
 8014f8c:	00b400b4 	.word	0x00b400b4
 8014f90:	00b400b4 	.word	0x00b400b4
 8014f94:	061d00b4 	.word	0x061d00b4
 8014f98:	061d061d 	.word	0x061d061d
 8014f9c:	061d061d 	.word	0x061d061d
 8014fa0:	061d061d 	.word	0x061d061d
 8014fa4:	061d013b 	.word	0x061d013b
 8014fa8:	00f400e0 	.word	0x00f400e0
 8014fac:	013b013b 	.word	0x013b013b
 8014fb0:	061d013b 	.word	0x061d013b
 8014fb4:	061d061d 	.word	0x061d061d
 8014fb8:	00c7061d 	.word	0x00c7061d
 8014fbc:	061d061d 	.word	0x061d061d
 8014fc0:	061d04d3 	.word	0x061d04d3
 8014fc4:	061d061d 	.word	0x061d061d
 8014fc8:	061d0517 	.word	0x061d0517
 8014fcc:	061d0537 	.word	0x061d0537
 8014fd0:	0564061d 	.word	0x0564061d
 8014fd4:	061d061d 	.word	0x061d061d
 8014fd8:	061d061d 	.word	0x061d061d
 8014fdc:	061d061d 	.word	0x061d061d
 8014fe0:	061d061d 	.word	0x061d061d
 8014fe4:	061d013b 	.word	0x061d013b
 8014fe8:	00f600e0 	.word	0x00f600e0
 8014fec:	013b013b 	.word	0x013b013b
 8014ff0:	00c9013b 	.word	0x00c9013b
 8014ff4:	00dc00f6 	.word	0x00dc00f6
 8014ff8:	00d5061d 	.word	0x00d5061d
 8014ffc:	04b3061d 	.word	0x04b3061d
 8015000:	050604d5 	.word	0x050604d5
 8015004:	061d00dc 	.word	0x061d00dc
 8015008:	00800517 	.word	0x00800517
 801500c:	061d0539 	.word	0x061d0539
 8015010:	0584061d 	.word	0x0584061d
 8015014:	0080061d 	.word	0x0080061d
 8015018:	3501      	adds	r5, #1
 801501a:	e764      	b.n	8014ee6 <_svfprintf_r+0x7a>
 801501c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801501e:	f002 fcb5 	bl	801798c <_localeconv_r>
 8015022:	6843      	ldr	r3, [r0, #4]
 8015024:	0018      	movs	r0, r3
 8015026:	931d      	str	r3, [sp, #116]	; 0x74
 8015028:	f7eb f876 	bl	8000118 <strlen>
 801502c:	901b      	str	r0, [sp, #108]	; 0x6c
 801502e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015030:	f002 fcac 	bl	801798c <_localeconv_r>
 8015034:	6883      	ldr	r3, [r0, #8]
 8015036:	9312      	str	r3, [sp, #72]	; 0x48
 8015038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801503a:	2b00      	cmp	r3, #0
 801503c:	d011      	beq.n	8015062 <_svfprintf_r+0x1f6>
 801503e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015040:	2b00      	cmp	r3, #0
 8015042:	d00e      	beq.n	8015062 <_svfprintf_r+0x1f6>
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d00b      	beq.n	8015062 <_svfprintf_r+0x1f6>
 801504a:	2380      	movs	r3, #128	; 0x80
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	431e      	orrs	r6, r3
 8015050:	e007      	b.n	8015062 <_svfprintf_r+0x1f6>
 8015052:	231b      	movs	r3, #27
 8015054:	aa1e      	add	r2, sp, #120	; 0x78
 8015056:	189b      	adds	r3, r3, r2
 8015058:	781a      	ldrb	r2, [r3, #0]
 801505a:	2a00      	cmp	r2, #0
 801505c:	d101      	bne.n	8015062 <_svfprintf_r+0x1f6>
 801505e:	3220      	adds	r2, #32
 8015060:	701a      	strb	r2, [r3, #0]
 8015062:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015064:	e771      	b.n	8014f4a <_svfprintf_r+0xde>
 8015066:	2301      	movs	r3, #1
 8015068:	e7f1      	b.n	801504e <_svfprintf_r+0x1e2>
 801506a:	cc08      	ldmia	r4!, {r3}
 801506c:	9318      	str	r3, [sp, #96]	; 0x60
 801506e:	2b00      	cmp	r3, #0
 8015070:	daf7      	bge.n	8015062 <_svfprintf_r+0x1f6>
 8015072:	425b      	negs	r3, r3
 8015074:	9318      	str	r3, [sp, #96]	; 0x60
 8015076:	2304      	movs	r3, #4
 8015078:	e7e9      	b.n	801504e <_svfprintf_r+0x1e2>
 801507a:	231b      	movs	r3, #27
 801507c:	aa1e      	add	r2, sp, #120	; 0x78
 801507e:	189b      	adds	r3, r3, r2
 8015080:	222b      	movs	r2, #43	; 0x2b
 8015082:	e7ed      	b.n	8015060 <_svfprintf_r+0x1f4>
 8015084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015086:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015088:	7812      	ldrb	r2, [r2, #0]
 801508a:	3301      	adds	r3, #1
 801508c:	920f      	str	r2, [sp, #60]	; 0x3c
 801508e:	2a2a      	cmp	r2, #42	; 0x2a
 8015090:	d010      	beq.n	80150b4 <_svfprintf_r+0x248>
 8015092:	2200      	movs	r2, #0
 8015094:	9209      	str	r2, [sp, #36]	; 0x24
 8015096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015098:	9313      	str	r3, [sp, #76]	; 0x4c
 801509a:	3a30      	subs	r2, #48	; 0x30
 801509c:	2a09      	cmp	r2, #9
 801509e:	d900      	bls.n	80150a2 <_svfprintf_r+0x236>
 80150a0:	e757      	b.n	8014f52 <_svfprintf_r+0xe6>
 80150a2:	210a      	movs	r1, #10
 80150a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150a6:	4348      	muls	r0, r1
 80150a8:	1882      	adds	r2, r0, r2
 80150aa:	9209      	str	r2, [sp, #36]	; 0x24
 80150ac:	781a      	ldrb	r2, [r3, #0]
 80150ae:	3301      	adds	r3, #1
 80150b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80150b2:	e7f0      	b.n	8015096 <_svfprintf_r+0x22a>
 80150b4:	cc04      	ldmia	r4!, {r2}
 80150b6:	9209      	str	r2, [sp, #36]	; 0x24
 80150b8:	2a00      	cmp	r2, #0
 80150ba:	da02      	bge.n	80150c2 <_svfprintf_r+0x256>
 80150bc:	2201      	movs	r2, #1
 80150be:	4252      	negs	r2, r2
 80150c0:	9209      	str	r2, [sp, #36]	; 0x24
 80150c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80150c4:	e7cd      	b.n	8015062 <_svfprintf_r+0x1f6>
 80150c6:	2380      	movs	r3, #128	; 0x80
 80150c8:	e7c1      	b.n	801504e <_svfprintf_r+0x1e2>
 80150ca:	2200      	movs	r2, #0
 80150cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80150ce:	9218      	str	r2, [sp, #96]	; 0x60
 80150d0:	210a      	movs	r1, #10
 80150d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150d4:	434a      	muls	r2, r1
 80150d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80150d8:	3930      	subs	r1, #48	; 0x30
 80150da:	188a      	adds	r2, r1, r2
 80150dc:	9218      	str	r2, [sp, #96]	; 0x60
 80150de:	001a      	movs	r2, r3
 80150e0:	7812      	ldrb	r2, [r2, #0]
 80150e2:	3301      	adds	r3, #1
 80150e4:	920f      	str	r2, [sp, #60]	; 0x3c
 80150e6:	3a30      	subs	r2, #48	; 0x30
 80150e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80150ea:	2a09      	cmp	r2, #9
 80150ec:	d9f0      	bls.n	80150d0 <_svfprintf_r+0x264>
 80150ee:	e730      	b.n	8014f52 <_svfprintf_r+0xe6>
 80150f0:	2308      	movs	r3, #8
 80150f2:	e7ac      	b.n	801504e <_svfprintf_r+0x1e2>
 80150f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	2b68      	cmp	r3, #104	; 0x68
 80150fa:	d105      	bne.n	8015108 <_svfprintf_r+0x29c>
 80150fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80150fe:	3301      	adds	r3, #1
 8015100:	9313      	str	r3, [sp, #76]	; 0x4c
 8015102:	2380      	movs	r3, #128	; 0x80
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	e7a2      	b.n	801504e <_svfprintf_r+0x1e2>
 8015108:	2340      	movs	r3, #64	; 0x40
 801510a:	e7a0      	b.n	801504e <_svfprintf_r+0x1e2>
 801510c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	2b6c      	cmp	r3, #108	; 0x6c
 8015112:	d104      	bne.n	801511e <_svfprintf_r+0x2b2>
 8015114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015116:	3301      	adds	r3, #1
 8015118:	9313      	str	r3, [sp, #76]	; 0x4c
 801511a:	2320      	movs	r3, #32
 801511c:	e797      	b.n	801504e <_svfprintf_r+0x1e2>
 801511e:	2310      	movs	r3, #16
 8015120:	e795      	b.n	801504e <_svfprintf_r+0x1e2>
 8015122:	0022      	movs	r2, r4
 8015124:	ca08      	ldmia	r2!, {r3}
 8015126:	a83f      	add	r0, sp, #252	; 0xfc
 8015128:	920d      	str	r2, [sp, #52]	; 0x34
 801512a:	221b      	movs	r2, #27
 801512c:	7003      	strb	r3, [r0, #0]
 801512e:	2300      	movs	r3, #0
 8015130:	a91e      	add	r1, sp, #120	; 0x78
 8015132:	1852      	adds	r2, r2, r1
 8015134:	7013      	strb	r3, [r2, #0]
 8015136:	930c      	str	r3, [sp, #48]	; 0x30
 8015138:	3301      	adds	r3, #1
 801513a:	9309      	str	r3, [sp, #36]	; 0x24
 801513c:	2300      	movs	r3, #0
 801513e:	9008      	str	r0, [sp, #32]
 8015140:	001d      	movs	r5, r3
 8015142:	9319      	str	r3, [sp, #100]	; 0x64
 8015144:	9310      	str	r3, [sp, #64]	; 0x40
 8015146:	9311      	str	r3, [sp, #68]	; 0x44
 8015148:	e1f1      	b.n	801552e <_svfprintf_r+0x6c2>
 801514a:	2310      	movs	r3, #16
 801514c:	431e      	orrs	r6, r3
 801514e:	06b3      	lsls	r3, r6, #26
 8015150:	d531      	bpl.n	80151b6 <_svfprintf_r+0x34a>
 8015152:	2307      	movs	r3, #7
 8015154:	3407      	adds	r4, #7
 8015156:	439c      	bics	r4, r3
 8015158:	0022      	movs	r2, r4
 801515a:	ca18      	ldmia	r2!, {r3, r4}
 801515c:	9306      	str	r3, [sp, #24]
 801515e:	9407      	str	r4, [sp, #28]
 8015160:	920d      	str	r2, [sp, #52]	; 0x34
 8015162:	9a07      	ldr	r2, [sp, #28]
 8015164:	2301      	movs	r3, #1
 8015166:	2a00      	cmp	r2, #0
 8015168:	da0b      	bge.n	8015182 <_svfprintf_r+0x316>
 801516a:	9c06      	ldr	r4, [sp, #24]
 801516c:	9d07      	ldr	r5, [sp, #28]
 801516e:	2200      	movs	r2, #0
 8015170:	4261      	negs	r1, r4
 8015172:	41aa      	sbcs	r2, r5
 8015174:	9106      	str	r1, [sp, #24]
 8015176:	9207      	str	r2, [sp, #28]
 8015178:	221b      	movs	r2, #27
 801517a:	a91e      	add	r1, sp, #120	; 0x78
 801517c:	1852      	adds	r2, r2, r1
 801517e:	212d      	movs	r1, #45	; 0x2d
 8015180:	7011      	strb	r1, [r2, #0]
 8015182:	9907      	ldr	r1, [sp, #28]
 8015184:	9a06      	ldr	r2, [sp, #24]
 8015186:	430a      	orrs	r2, r1
 8015188:	9909      	ldr	r1, [sp, #36]	; 0x24
 801518a:	3101      	adds	r1, #1
 801518c:	d101      	bne.n	8015192 <_svfprintf_r+0x326>
 801518e:	f001 f89a 	bl	80162c6 <_svfprintf_r+0x145a>
 8015192:	2180      	movs	r1, #128	; 0x80
 8015194:	0035      	movs	r5, r6
 8015196:	438d      	bics	r5, r1
 8015198:	2a00      	cmp	r2, #0
 801519a:	d001      	beq.n	80151a0 <_svfprintf_r+0x334>
 801519c:	f001 f898 	bl	80162d0 <_svfprintf_r+0x1464>
 80151a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151a2:	2a00      	cmp	r2, #0
 80151a4:	d101      	bne.n	80151aa <_svfprintf_r+0x33e>
 80151a6:	f000 fcec 	bl	8015b82 <_svfprintf_r+0xd16>
 80151aa:	2b01      	cmp	r3, #1
 80151ac:	d001      	beq.n	80151b2 <_svfprintf_r+0x346>
 80151ae:	f001 f893 	bl	80162d8 <_svfprintf_r+0x146c>
 80151b2:	f000 fc7e 	bl	8015ab2 <_svfprintf_r+0xc46>
 80151b6:	0022      	movs	r2, r4
 80151b8:	ca08      	ldmia	r2!, {r3}
 80151ba:	920d      	str	r2, [sp, #52]	; 0x34
 80151bc:	06f2      	lsls	r2, r6, #27
 80151be:	d503      	bpl.n	80151c8 <_svfprintf_r+0x35c>
 80151c0:	9306      	str	r3, [sp, #24]
 80151c2:	17db      	asrs	r3, r3, #31
 80151c4:	9307      	str	r3, [sp, #28]
 80151c6:	e7cc      	b.n	8015162 <_svfprintf_r+0x2f6>
 80151c8:	0672      	lsls	r2, r6, #25
 80151ca:	d501      	bpl.n	80151d0 <_svfprintf_r+0x364>
 80151cc:	b21b      	sxth	r3, r3
 80151ce:	e7f7      	b.n	80151c0 <_svfprintf_r+0x354>
 80151d0:	05b2      	lsls	r2, r6, #22
 80151d2:	d5f5      	bpl.n	80151c0 <_svfprintf_r+0x354>
 80151d4:	b25b      	sxtb	r3, r3
 80151d6:	e7f3      	b.n	80151c0 <_svfprintf_r+0x354>
 80151d8:	2307      	movs	r3, #7
 80151da:	3407      	adds	r4, #7
 80151dc:	439c      	bics	r4, r3
 80151de:	0022      	movs	r2, r4
 80151e0:	ca18      	ldmia	r2!, {r3, r4}
 80151e2:	920d      	str	r2, [sp, #52]	; 0x34
 80151e4:	2201      	movs	r2, #1
 80151e6:	9314      	str	r3, [sp, #80]	; 0x50
 80151e8:	9415      	str	r4, [sp, #84]	; 0x54
 80151ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80151ee:	005c      	lsls	r4, r3, #1
 80151f0:	0864      	lsrs	r4, r4, #1
 80151f2:	0028      	movs	r0, r5
 80151f4:	0021      	movs	r1, r4
 80151f6:	4b3e      	ldr	r3, [pc, #248]	; (80152f0 <_svfprintf_r+0x484>)
 80151f8:	4252      	negs	r2, r2
 80151fa:	f7ed fd73 	bl	8002ce4 <__aeabi_dcmpun>
 80151fe:	2800      	cmp	r0, #0
 8015200:	d126      	bne.n	8015250 <_svfprintf_r+0x3e4>
 8015202:	2201      	movs	r2, #1
 8015204:	0028      	movs	r0, r5
 8015206:	0021      	movs	r1, r4
 8015208:	4b39      	ldr	r3, [pc, #228]	; (80152f0 <_svfprintf_r+0x484>)
 801520a:	4252      	negs	r2, r2
 801520c:	f7eb f936 	bl	800047c <__aeabi_dcmple>
 8015210:	2800      	cmp	r0, #0
 8015212:	d11d      	bne.n	8015250 <_svfprintf_r+0x3e4>
 8015214:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015216:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015218:	2200      	movs	r2, #0
 801521a:	2300      	movs	r3, #0
 801521c:	f7eb f924 	bl	8000468 <__aeabi_dcmplt>
 8015220:	2800      	cmp	r0, #0
 8015222:	d004      	beq.n	801522e <_svfprintf_r+0x3c2>
 8015224:	231b      	movs	r3, #27
 8015226:	aa1e      	add	r2, sp, #120	; 0x78
 8015228:	189b      	adds	r3, r3, r2
 801522a:	222d      	movs	r2, #45	; 0x2d
 801522c:	701a      	strb	r2, [r3, #0]
 801522e:	4b31      	ldr	r3, [pc, #196]	; (80152f4 <_svfprintf_r+0x488>)
 8015230:	9308      	str	r3, [sp, #32]
 8015232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015234:	2b47      	cmp	r3, #71	; 0x47
 8015236:	dd01      	ble.n	801523c <_svfprintf_r+0x3d0>
 8015238:	4b2f      	ldr	r3, [pc, #188]	; (80152f8 <_svfprintf_r+0x48c>)
 801523a:	9308      	str	r3, [sp, #32]
 801523c:	2380      	movs	r3, #128	; 0x80
 801523e:	439e      	bics	r6, r3
 8015240:	2300      	movs	r3, #0
 8015242:	930c      	str	r3, [sp, #48]	; 0x30
 8015244:	3303      	adds	r3, #3
 8015246:	9309      	str	r3, [sp, #36]	; 0x24
 8015248:	2300      	movs	r3, #0
 801524a:	9319      	str	r3, [sp, #100]	; 0x64
 801524c:	f001 f873 	bl	8016336 <_svfprintf_r+0x14ca>
 8015250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015254:	0010      	movs	r0, r2
 8015256:	0019      	movs	r1, r3
 8015258:	f7ed fd44 	bl	8002ce4 <__aeabi_dcmpun>
 801525c:	2800      	cmp	r0, #0
 801525e:	d00e      	beq.n	801527e <_svfprintf_r+0x412>
 8015260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015262:	2b00      	cmp	r3, #0
 8015264:	da04      	bge.n	8015270 <_svfprintf_r+0x404>
 8015266:	231b      	movs	r3, #27
 8015268:	aa1e      	add	r2, sp, #120	; 0x78
 801526a:	189b      	adds	r3, r3, r2
 801526c:	222d      	movs	r2, #45	; 0x2d
 801526e:	701a      	strb	r2, [r3, #0]
 8015270:	4b22      	ldr	r3, [pc, #136]	; (80152fc <_svfprintf_r+0x490>)
 8015272:	9308      	str	r3, [sp, #32]
 8015274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015276:	2b47      	cmp	r3, #71	; 0x47
 8015278:	dde0      	ble.n	801523c <_svfprintf_r+0x3d0>
 801527a:	4b21      	ldr	r3, [pc, #132]	; (8015300 <_svfprintf_r+0x494>)
 801527c:	e7dd      	b.n	801523a <_svfprintf_r+0x3ce>
 801527e:	2320      	movs	r3, #32
 8015280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015282:	439a      	bics	r2, r3
 8015284:	9210      	str	r2, [sp, #64]	; 0x40
 8015286:	2a41      	cmp	r2, #65	; 0x41
 8015288:	d123      	bne.n	80152d2 <_svfprintf_r+0x466>
 801528a:	2230      	movs	r2, #48	; 0x30
 801528c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801528e:	ab25      	add	r3, sp, #148	; 0x94
 8015290:	701a      	strb	r2, [r3, #0]
 8015292:	3248      	adds	r2, #72	; 0x48
 8015294:	2961      	cmp	r1, #97	; 0x61
 8015296:	d000      	beq.n	801529a <_svfprintf_r+0x42e>
 8015298:	3a20      	subs	r2, #32
 801529a:	705a      	strb	r2, [r3, #1]
 801529c:	2302      	movs	r3, #2
 801529e:	431e      	orrs	r6, r3
 80152a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a2:	2b63      	cmp	r3, #99	; 0x63
 80152a4:	dd2e      	ble.n	8015304 <_svfprintf_r+0x498>
 80152a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152a8:	1c59      	adds	r1, r3, #1
 80152aa:	f7fe fa4d 	bl	8013748 <_malloc_r>
 80152ae:	9008      	str	r0, [sp, #32]
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d000      	beq.n	80152b6 <_svfprintf_r+0x44a>
 80152b4:	e221      	b.n	80156fa <_svfprintf_r+0x88e>
 80152b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152b8:	899a      	ldrh	r2, [r3, #12]
 80152ba:	2340      	movs	r3, #64	; 0x40
 80152bc:	4313      	orrs	r3, r2
 80152be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152c0:	8193      	strh	r3, [r2, #12]
 80152c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152c4:	899b      	ldrh	r3, [r3, #12]
 80152c6:	065b      	lsls	r3, r3, #25
 80152c8:	d400      	bmi.n	80152cc <_svfprintf_r+0x460>
 80152ca:	e5f4      	b.n	8014eb6 <_svfprintf_r+0x4a>
 80152cc:	2301      	movs	r3, #1
 80152ce:	425b      	negs	r3, r3
 80152d0:	e5f0      	b.n	8014eb4 <_svfprintf_r+0x48>
 80152d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d4:	900c      	str	r0, [sp, #48]	; 0x30
 80152d6:	3301      	adds	r3, #1
 80152d8:	d100      	bne.n	80152dc <_svfprintf_r+0x470>
 80152da:	e211      	b.n	8015700 <_svfprintf_r+0x894>
 80152dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152de:	2b47      	cmp	r3, #71	; 0x47
 80152e0:	d114      	bne.n	801530c <_svfprintf_r+0x4a0>
 80152e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d111      	bne.n	801530c <_svfprintf_r+0x4a0>
 80152e8:	3301      	adds	r3, #1
 80152ea:	9309      	str	r3, [sp, #36]	; 0x24
 80152ec:	e00e      	b.n	801530c <_svfprintf_r+0x4a0>
 80152ee:	46c0      	nop			; (mov r8, r8)
 80152f0:	7fefffff 	.word	0x7fefffff
 80152f4:	0801d0c0 	.word	0x0801d0c0
 80152f8:	0801d0c4 	.word	0x0801d0c4
 80152fc:	0801d0c8 	.word	0x0801d0c8
 8015300:	0801d0cc 	.word	0x0801d0cc
 8015304:	2300      	movs	r3, #0
 8015306:	930c      	str	r3, [sp, #48]	; 0x30
 8015308:	ab3f      	add	r3, sp, #252	; 0xfc
 801530a:	9308      	str	r3, [sp, #32]
 801530c:	2380      	movs	r3, #128	; 0x80
 801530e:	005b      	lsls	r3, r3, #1
 8015310:	4333      	orrs	r3, r6
 8015312:	931a      	str	r3, [sp, #104]	; 0x68
 8015314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015316:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015318:	2b00      	cmp	r3, #0
 801531a:	db00      	blt.n	801531e <_svfprintf_r+0x4b2>
 801531c:	e1f2      	b.n	8015704 <_svfprintf_r+0x898>
 801531e:	2280      	movs	r2, #128	; 0x80
 8015320:	0612      	lsls	r2, r2, #24
 8015322:	4694      	mov	ip, r2
 8015324:	4463      	add	r3, ip
 8015326:	930e      	str	r3, [sp, #56]	; 0x38
 8015328:	232d      	movs	r3, #45	; 0x2d
 801532a:	9322      	str	r3, [sp, #136]	; 0x88
 801532c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801532e:	2b41      	cmp	r3, #65	; 0x41
 8015330:	d000      	beq.n	8015334 <_svfprintf_r+0x4c8>
 8015332:	e200      	b.n	8015736 <_svfprintf_r+0x8ca>
 8015334:	0028      	movs	r0, r5
 8015336:	aa26      	add	r2, sp, #152	; 0x98
 8015338:	990e      	ldr	r1, [sp, #56]	; 0x38
 801533a:	f002 ffd9 	bl	80182f0 <frexp>
 801533e:	23ff      	movs	r3, #255	; 0xff
 8015340:	2200      	movs	r2, #0
 8015342:	059b      	lsls	r3, r3, #22
 8015344:	f7ec fed0 	bl	80020e8 <__aeabi_dmul>
 8015348:	2200      	movs	r2, #0
 801534a:	2300      	movs	r3, #0
 801534c:	0004      	movs	r4, r0
 801534e:	000d      	movs	r5, r1
 8015350:	f7eb f884 	bl	800045c <__aeabi_dcmpeq>
 8015354:	2800      	cmp	r0, #0
 8015356:	d001      	beq.n	801535c <_svfprintf_r+0x4f0>
 8015358:	2301      	movs	r3, #1
 801535a:	9326      	str	r3, [sp, #152]	; 0x98
 801535c:	4bd4      	ldr	r3, [pc, #848]	; (80156b0 <_svfprintf_r+0x844>)
 801535e:	9319      	str	r3, [sp, #100]	; 0x64
 8015360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015362:	2b61      	cmp	r3, #97	; 0x61
 8015364:	d001      	beq.n	801536a <_svfprintf_r+0x4fe>
 8015366:	4bd3      	ldr	r3, [pc, #844]	; (80156b4 <_svfprintf_r+0x848>)
 8015368:	9319      	str	r3, [sp, #100]	; 0x64
 801536a:	9b08      	ldr	r3, [sp, #32]
 801536c:	930e      	str	r3, [sp, #56]	; 0x38
 801536e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015370:	3b01      	subs	r3, #1
 8015372:	9311      	str	r3, [sp, #68]	; 0x44
 8015374:	2200      	movs	r2, #0
 8015376:	4bd0      	ldr	r3, [pc, #832]	; (80156b8 <_svfprintf_r+0x84c>)
 8015378:	0020      	movs	r0, r4
 801537a:	0029      	movs	r1, r5
 801537c:	f7ec feb4 	bl	80020e8 <__aeabi_dmul>
 8015380:	000d      	movs	r5, r1
 8015382:	0004      	movs	r4, r0
 8015384:	f7ed fccc 	bl	8002d20 <__aeabi_d2iz>
 8015388:	9021      	str	r0, [sp, #132]	; 0x84
 801538a:	f7ed fcff 	bl	8002d8c <__aeabi_i2d>
 801538e:	0002      	movs	r2, r0
 8015390:	000b      	movs	r3, r1
 8015392:	0020      	movs	r0, r4
 8015394:	0029      	movs	r1, r5
 8015396:	f7ed f913 	bl	80025c0 <__aeabi_dsub>
 801539a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801539c:	000d      	movs	r5, r1
 801539e:	001a      	movs	r2, r3
 80153a0:	3201      	adds	r2, #1
 80153a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80153a4:	920e      	str	r2, [sp, #56]	; 0x38
 80153a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80153a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80153aa:	0004      	movs	r4, r0
 80153ac:	5c52      	ldrb	r2, [r2, r1]
 80153ae:	701a      	strb	r2, [r3, #0]
 80153b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153b2:	9320      	str	r3, [sp, #128]	; 0x80
 80153b4:	3301      	adds	r3, #1
 80153b6:	d00a      	beq.n	80153ce <_svfprintf_r+0x562>
 80153b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153ba:	2200      	movs	r2, #0
 80153bc:	3b01      	subs	r3, #1
 80153be:	9311      	str	r3, [sp, #68]	; 0x44
 80153c0:	0020      	movs	r0, r4
 80153c2:	2300      	movs	r3, #0
 80153c4:	0029      	movs	r1, r5
 80153c6:	f7eb f849 	bl	800045c <__aeabi_dcmpeq>
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d0d2      	beq.n	8015374 <_svfprintf_r+0x508>
 80153ce:	2200      	movs	r2, #0
 80153d0:	0020      	movs	r0, r4
 80153d2:	0029      	movs	r1, r5
 80153d4:	4bb9      	ldr	r3, [pc, #740]	; (80156bc <_svfprintf_r+0x850>)
 80153d6:	f7eb f85b 	bl	8000490 <__aeabi_dcmpgt>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d10c      	bne.n	80153f8 <_svfprintf_r+0x58c>
 80153de:	2200      	movs	r2, #0
 80153e0:	0020      	movs	r0, r4
 80153e2:	0029      	movs	r1, r5
 80153e4:	4bb5      	ldr	r3, [pc, #724]	; (80156bc <_svfprintf_r+0x850>)
 80153e6:	f7eb f839 	bl	800045c <__aeabi_dcmpeq>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d100      	bne.n	80153f0 <_svfprintf_r+0x584>
 80153ee:	e19c      	b.n	801572a <_svfprintf_r+0x8be>
 80153f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153f2:	07db      	lsls	r3, r3, #31
 80153f4:	d400      	bmi.n	80153f8 <_svfprintf_r+0x58c>
 80153f6:	e198      	b.n	801572a <_svfprintf_r+0x8be>
 80153f8:	2030      	movs	r0, #48	; 0x30
 80153fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153fc:	932a      	str	r3, [sp, #168]	; 0xa8
 80153fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015400:	7bda      	ldrb	r2, [r3, #15]
 8015402:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015404:	3b01      	subs	r3, #1
 8015406:	932a      	str	r3, [sp, #168]	; 0xa8
 8015408:	7819      	ldrb	r1, [r3, #0]
 801540a:	4291      	cmp	r1, r2
 801540c:	d100      	bne.n	8015410 <_svfprintf_r+0x5a4>
 801540e:	e17c      	b.n	801570a <_svfprintf_r+0x89e>
 8015410:	1c4a      	adds	r2, r1, #1
 8015412:	b2d2      	uxtb	r2, r2
 8015414:	2939      	cmp	r1, #57	; 0x39
 8015416:	d101      	bne.n	801541c <_svfprintf_r+0x5b0>
 8015418:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801541a:	7a92      	ldrb	r2, [r2, #10]
 801541c:	701a      	strb	r2, [r3, #0]
 801541e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015420:	9a08      	ldr	r2, [sp, #32]
 8015422:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015424:	1a9b      	subs	r3, r3, r2
 8015426:	930e      	str	r3, [sp, #56]	; 0x38
 8015428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801542a:	2b47      	cmp	r3, #71	; 0x47
 801542c:	d000      	beq.n	8015430 <_svfprintf_r+0x5c4>
 801542e:	e1d0      	b.n	80157d2 <_svfprintf_r+0x966>
 8015430:	1ceb      	adds	r3, r5, #3
 8015432:	db03      	blt.n	801543c <_svfprintf_r+0x5d0>
 8015434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015436:	42ab      	cmp	r3, r5
 8015438:	db00      	blt.n	801543c <_svfprintf_r+0x5d0>
 801543a:	e1f8      	b.n	801582e <_svfprintf_r+0x9c2>
 801543c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801543e:	3b02      	subs	r3, #2
 8015440:	930f      	str	r3, [sp, #60]	; 0x3c
 8015442:	223c      	movs	r2, #60	; 0x3c
 8015444:	466b      	mov	r3, sp
 8015446:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015448:	189b      	adds	r3, r3, r2
 801544a:	1e6c      	subs	r4, r5, #1
 801544c:	3a1c      	subs	r2, #28
 801544e:	2000      	movs	r0, #0
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	9426      	str	r4, [sp, #152]	; 0x98
 8015454:	4391      	bics	r1, r2
 8015456:	2941      	cmp	r1, #65	; 0x41
 8015458:	d102      	bne.n	8015460 <_svfprintf_r+0x5f4>
 801545a:	330f      	adds	r3, #15
 801545c:	b2db      	uxtb	r3, r3
 801545e:	3001      	adds	r0, #1
 8015460:	a928      	add	r1, sp, #160	; 0xa0
 8015462:	700b      	strb	r3, [r1, #0]
 8015464:	232b      	movs	r3, #43	; 0x2b
 8015466:	2c00      	cmp	r4, #0
 8015468:	da02      	bge.n	8015470 <_svfprintf_r+0x604>
 801546a:	2401      	movs	r4, #1
 801546c:	3302      	adds	r3, #2
 801546e:	1b64      	subs	r4, r4, r5
 8015470:	704b      	strb	r3, [r1, #1]
 8015472:	2c09      	cmp	r4, #9
 8015474:	dc00      	bgt.n	8015478 <_svfprintf_r+0x60c>
 8015476:	e1c6      	b.n	8015806 <_svfprintf_r+0x99a>
 8015478:	2337      	movs	r3, #55	; 0x37
 801547a:	250a      	movs	r5, #10
 801547c:	aa1e      	add	r2, sp, #120	; 0x78
 801547e:	189b      	adds	r3, r3, r2
 8015480:	9310      	str	r3, [sp, #64]	; 0x40
 8015482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015484:	0020      	movs	r0, r4
 8015486:	9309      	str	r3, [sp, #36]	; 0x24
 8015488:	0029      	movs	r1, r5
 801548a:	3b01      	subs	r3, #1
 801548c:	9310      	str	r3, [sp, #64]	; 0x40
 801548e:	f7ea ffcf 	bl	8000430 <__aeabi_idivmod>
 8015492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015494:	3130      	adds	r1, #48	; 0x30
 8015496:	7019      	strb	r1, [r3, #0]
 8015498:	0020      	movs	r0, r4
 801549a:	0029      	movs	r1, r5
 801549c:	9411      	str	r4, [sp, #68]	; 0x44
 801549e:	f7ea fee1 	bl	8000264 <__divsi3>
 80154a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154a4:	0004      	movs	r4, r0
 80154a6:	2b63      	cmp	r3, #99	; 0x63
 80154a8:	dceb      	bgt.n	8015482 <_svfprintf_r+0x616>
 80154aa:	212a      	movs	r1, #42	; 0x2a
 80154ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ae:	a81e      	add	r0, sp, #120	; 0x78
 80154b0:	1e9a      	subs	r2, r3, #2
 80154b2:	1809      	adds	r1, r1, r0
 80154b4:	2037      	movs	r0, #55	; 0x37
 80154b6:	0013      	movs	r3, r2
 80154b8:	3430      	adds	r4, #48	; 0x30
 80154ba:	7014      	strb	r4, [r2, #0]
 80154bc:	ac1e      	add	r4, sp, #120	; 0x78
 80154be:	1900      	adds	r0, r0, r4
 80154c0:	4283      	cmp	r3, r0
 80154c2:	d200      	bcs.n	80154c6 <_svfprintf_r+0x65a>
 80154c4:	e19a      	b.n	80157fc <_svfprintf_r+0x990>
 80154c6:	2300      	movs	r3, #0
 80154c8:	4282      	cmp	r2, r0
 80154ca:	d804      	bhi.n	80154d6 <_svfprintf_r+0x66a>
 80154cc:	aa1e      	add	r2, sp, #120	; 0x78
 80154ce:	3339      	adds	r3, #57	; 0x39
 80154d0:	189b      	adds	r3, r3, r2
 80154d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154d4:	1a9b      	subs	r3, r3, r2
 80154d6:	222a      	movs	r2, #42	; 0x2a
 80154d8:	a91e      	add	r1, sp, #120	; 0x78
 80154da:	1852      	adds	r2, r2, r1
 80154dc:	18d3      	adds	r3, r2, r3
 80154de:	aa28      	add	r2, sp, #160	; 0xa0
 80154e0:	1a9b      	subs	r3, r3, r2
 80154e2:	931e      	str	r3, [sp, #120]	; 0x78
 80154e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80154e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154e8:	4694      	mov	ip, r2
 80154ea:	4463      	add	r3, ip
 80154ec:	9309      	str	r3, [sp, #36]	; 0x24
 80154ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	dc01      	bgt.n	80154f8 <_svfprintf_r+0x68c>
 80154f4:	07f3      	lsls	r3, r6, #31
 80154f6:	d504      	bpl.n	8015502 <_svfprintf_r+0x696>
 80154f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80154fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154fc:	4694      	mov	ip, r2
 80154fe:	4463      	add	r3, ip
 8015500:	9309      	str	r3, [sp, #36]	; 0x24
 8015502:	2280      	movs	r2, #128	; 0x80
 8015504:	4b6e      	ldr	r3, [pc, #440]	; (80156c0 <_svfprintf_r+0x854>)
 8015506:	0052      	lsls	r2, r2, #1
 8015508:	4033      	ands	r3, r6
 801550a:	431a      	orrs	r2, r3
 801550c:	2300      	movs	r3, #0
 801550e:	001d      	movs	r5, r3
 8015510:	921a      	str	r2, [sp, #104]	; 0x68
 8015512:	9310      	str	r3, [sp, #64]	; 0x40
 8015514:	9311      	str	r3, [sp, #68]	; 0x44
 8015516:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015518:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801551a:	9319      	str	r3, [sp, #100]	; 0x64
 801551c:	2b00      	cmp	r3, #0
 801551e:	d006      	beq.n	801552e <_svfprintf_r+0x6c2>
 8015520:	231b      	movs	r3, #27
 8015522:	aa1e      	add	r2, sp, #120	; 0x78
 8015524:	189b      	adds	r3, r3, r2
 8015526:	222d      	movs	r2, #45	; 0x2d
 8015528:	701a      	strb	r2, [r3, #0]
 801552a:	2300      	movs	r3, #0
 801552c:	9319      	str	r3, [sp, #100]	; 0x64
 801552e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015532:	931a      	str	r3, [sp, #104]	; 0x68
 8015534:	4293      	cmp	r3, r2
 8015536:	da00      	bge.n	801553a <_svfprintf_r+0x6ce>
 8015538:	921a      	str	r2, [sp, #104]	; 0x68
 801553a:	231b      	movs	r3, #27
 801553c:	aa1e      	add	r2, sp, #120	; 0x78
 801553e:	189b      	adds	r3, r3, r2
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	1e5a      	subs	r2, r3, #1
 8015544:	4193      	sbcs	r3, r2
 8015546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015548:	18d3      	adds	r3, r2, r3
 801554a:	931a      	str	r3, [sp, #104]	; 0x68
 801554c:	0032      	movs	r2, r6
 801554e:	2302      	movs	r3, #2
 8015550:	401a      	ands	r2, r3
 8015552:	9220      	str	r2, [sp, #128]	; 0x80
 8015554:	421e      	tst	r6, r3
 8015556:	d002      	beq.n	801555e <_svfprintf_r+0x6f2>
 8015558:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801555a:	3302      	adds	r3, #2
 801555c:	931a      	str	r3, [sp, #104]	; 0x68
 801555e:	2384      	movs	r3, #132	; 0x84
 8015560:	0032      	movs	r2, r6
 8015562:	401a      	ands	r2, r3
 8015564:	9221      	str	r2, [sp, #132]	; 0x84
 8015566:	421e      	tst	r6, r3
 8015568:	d120      	bne.n	80155ac <_svfprintf_r+0x740>
 801556a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801556c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801556e:	1a9c      	subs	r4, r3, r2
 8015570:	2c00      	cmp	r4, #0
 8015572:	dd1b      	ble.n	80155ac <_svfprintf_r+0x740>
 8015574:	0039      	movs	r1, r7
 8015576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015578:	4852      	ldr	r0, [pc, #328]	; (80156c4 <_svfprintf_r+0x858>)
 801557a:	9322      	str	r3, [sp, #136]	; 0x88
 801557c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801557e:	3301      	adds	r3, #1
 8015580:	3108      	adds	r1, #8
 8015582:	6038      	str	r0, [r7, #0]
 8015584:	2c10      	cmp	r4, #16
 8015586:	dd00      	ble.n	801558a <_svfprintf_r+0x71e>
 8015588:	e319      	b.n	8015bbe <_svfprintf_r+0xd52>
 801558a:	607c      	str	r4, [r7, #4]
 801558c:	18a4      	adds	r4, r4, r2
 801558e:	000f      	movs	r7, r1
 8015590:	942e      	str	r4, [sp, #184]	; 0xb8
 8015592:	932d      	str	r3, [sp, #180]	; 0xb4
 8015594:	2b07      	cmp	r3, #7
 8015596:	dd09      	ble.n	80155ac <_svfprintf_r+0x740>
 8015598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801559a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801559c:	aa2c      	add	r2, sp, #176	; 0xb0
 801559e:	f002 fedf 	bl	8018360 <__ssprint_r>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d001      	beq.n	80155aa <_svfprintf_r+0x73e>
 80155a6:	f000 fe60 	bl	801626a <_svfprintf_r+0x13fe>
 80155aa:	af2f      	add	r7, sp, #188	; 0xbc
 80155ac:	231b      	movs	r3, #27
 80155ae:	aa1e      	add	r2, sp, #120	; 0x78
 80155b0:	189b      	adds	r3, r3, r2
 80155b2:	781a      	ldrb	r2, [r3, #0]
 80155b4:	2a00      	cmp	r2, #0
 80155b6:	d017      	beq.n	80155e8 <_svfprintf_r+0x77c>
 80155b8:	603b      	str	r3, [r7, #0]
 80155ba:	2301      	movs	r3, #1
 80155bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80155be:	607b      	str	r3, [r7, #4]
 80155c0:	0013      	movs	r3, r2
 80155c2:	3301      	adds	r3, #1
 80155c4:	932e      	str	r3, [sp, #184]	; 0xb8
 80155c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155c8:	3708      	adds	r7, #8
 80155ca:	9322      	str	r3, [sp, #136]	; 0x88
 80155cc:	3301      	adds	r3, #1
 80155ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80155d0:	2b07      	cmp	r3, #7
 80155d2:	dd09      	ble.n	80155e8 <_svfprintf_r+0x77c>
 80155d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80155da:	f002 fec1 	bl	8018360 <__ssprint_r>
 80155de:	2800      	cmp	r0, #0
 80155e0:	d001      	beq.n	80155e6 <_svfprintf_r+0x77a>
 80155e2:	f000 fe42 	bl	801626a <_svfprintf_r+0x13fe>
 80155e6:	af2f      	add	r7, sp, #188	; 0xbc
 80155e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d019      	beq.n	8015622 <_svfprintf_r+0x7b6>
 80155ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155f0:	9320      	str	r3, [sp, #128]	; 0x80
 80155f2:	ab25      	add	r3, sp, #148	; 0x94
 80155f4:	603b      	str	r3, [r7, #0]
 80155f6:	2302      	movs	r3, #2
 80155f8:	607b      	str	r3, [r7, #4]
 80155fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155fc:	3708      	adds	r7, #8
 80155fe:	3302      	adds	r3, #2
 8015600:	932e      	str	r3, [sp, #184]	; 0xb8
 8015602:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015604:	9320      	str	r3, [sp, #128]	; 0x80
 8015606:	3301      	adds	r3, #1
 8015608:	932d      	str	r3, [sp, #180]	; 0xb4
 801560a:	2b07      	cmp	r3, #7
 801560c:	dd09      	ble.n	8015622 <_svfprintf_r+0x7b6>
 801560e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015610:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015612:	aa2c      	add	r2, sp, #176	; 0xb0
 8015614:	f002 fea4 	bl	8018360 <__ssprint_r>
 8015618:	2800      	cmp	r0, #0
 801561a:	d001      	beq.n	8015620 <_svfprintf_r+0x7b4>
 801561c:	f000 fe25 	bl	801626a <_svfprintf_r+0x13fe>
 8015620:	af2f      	add	r7, sp, #188	; 0xbc
 8015622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015624:	2b80      	cmp	r3, #128	; 0x80
 8015626:	d120      	bne.n	801566a <_svfprintf_r+0x7fe>
 8015628:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801562a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801562c:	1a9c      	subs	r4, r3, r2
 801562e:	2c00      	cmp	r4, #0
 8015630:	dd1b      	ble.n	801566a <_svfprintf_r+0x7fe>
 8015632:	0039      	movs	r1, r7
 8015634:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015636:	4824      	ldr	r0, [pc, #144]	; (80156c8 <_svfprintf_r+0x85c>)
 8015638:	9320      	str	r3, [sp, #128]	; 0x80
 801563a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801563c:	3301      	adds	r3, #1
 801563e:	3108      	adds	r1, #8
 8015640:	6038      	str	r0, [r7, #0]
 8015642:	2c10      	cmp	r4, #16
 8015644:	dd00      	ble.n	8015648 <_svfprintf_r+0x7dc>
 8015646:	e2cd      	b.n	8015be4 <_svfprintf_r+0xd78>
 8015648:	607c      	str	r4, [r7, #4]
 801564a:	18a4      	adds	r4, r4, r2
 801564c:	000f      	movs	r7, r1
 801564e:	942e      	str	r4, [sp, #184]	; 0xb8
 8015650:	932d      	str	r3, [sp, #180]	; 0xb4
 8015652:	2b07      	cmp	r3, #7
 8015654:	dd09      	ble.n	801566a <_svfprintf_r+0x7fe>
 8015656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015658:	980a      	ldr	r0, [sp, #40]	; 0x28
 801565a:	aa2c      	add	r2, sp, #176	; 0xb0
 801565c:	f002 fe80 	bl	8018360 <__ssprint_r>
 8015660:	2800      	cmp	r0, #0
 8015662:	d001      	beq.n	8015668 <_svfprintf_r+0x7fc>
 8015664:	f000 fe01 	bl	801626a <_svfprintf_r+0x13fe>
 8015668:	af2f      	add	r7, sp, #188	; 0xbc
 801566a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801566c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801566e:	1a9c      	subs	r4, r3, r2
 8015670:	2c00      	cmp	r4, #0
 8015672:	dd2b      	ble.n	80156cc <_svfprintf_r+0x860>
 8015674:	0039      	movs	r1, r7
 8015676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015678:	4813      	ldr	r0, [pc, #76]	; (80156c8 <_svfprintf_r+0x85c>)
 801567a:	9319      	str	r3, [sp, #100]	; 0x64
 801567c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801567e:	3301      	adds	r3, #1
 8015680:	3108      	adds	r1, #8
 8015682:	6038      	str	r0, [r7, #0]
 8015684:	2c10      	cmp	r4, #16
 8015686:	dd00      	ble.n	801568a <_svfprintf_r+0x81e>
 8015688:	e2bf      	b.n	8015c0a <_svfprintf_r+0xd9e>
 801568a:	18a2      	adds	r2, r4, r2
 801568c:	607c      	str	r4, [r7, #4]
 801568e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015690:	000f      	movs	r7, r1
 8015692:	932d      	str	r3, [sp, #180]	; 0xb4
 8015694:	2b07      	cmp	r3, #7
 8015696:	dd19      	ble.n	80156cc <_svfprintf_r+0x860>
 8015698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801569a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801569c:	aa2c      	add	r2, sp, #176	; 0xb0
 801569e:	f002 fe5f 	bl	8018360 <__ssprint_r>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d001      	beq.n	80156aa <_svfprintf_r+0x83e>
 80156a6:	f000 fde0 	bl	801626a <_svfprintf_r+0x13fe>
 80156aa:	af2f      	add	r7, sp, #188	; 0xbc
 80156ac:	e00e      	b.n	80156cc <_svfprintf_r+0x860>
 80156ae:	46c0      	nop			; (mov r8, r8)
 80156b0:	0801d0d0 	.word	0x0801d0d0
 80156b4:	0801d0e1 	.word	0x0801d0e1
 80156b8:	40300000 	.word	0x40300000
 80156bc:	3fe00000 	.word	0x3fe00000
 80156c0:	fffffbff 	.word	0xfffffbff
 80156c4:	0801d0f4 	.word	0x0801d0f4
 80156c8:	0801d104 	.word	0x0801d104
 80156cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156ce:	9319      	str	r3, [sp, #100]	; 0x64
 80156d0:	05f3      	lsls	r3, r6, #23
 80156d2:	d500      	bpl.n	80156d6 <_svfprintf_r+0x86a>
 80156d4:	e2b2      	b.n	8015c3c <_svfprintf_r+0xdd0>
 80156d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156d8:	9b08      	ldr	r3, [sp, #32]
 80156da:	4694      	mov	ip, r2
 80156dc:	603b      	str	r3, [r7, #0]
 80156de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156e0:	607b      	str	r3, [r7, #4]
 80156e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80156e4:	4463      	add	r3, ip
 80156e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80156e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156ea:	9308      	str	r3, [sp, #32]
 80156ec:	3301      	adds	r3, #1
 80156ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80156f0:	2b07      	cmp	r3, #7
 80156f2:	dd00      	ble.n	80156f6 <_svfprintf_r+0x88a>
 80156f4:	e393      	b.n	8015e1e <_svfprintf_r+0xfb2>
 80156f6:	3708      	adds	r7, #8
 80156f8:	e2e7      	b.n	8015cca <_svfprintf_r+0xe5e>
 80156fa:	9b08      	ldr	r3, [sp, #32]
 80156fc:	930c      	str	r3, [sp, #48]	; 0x30
 80156fe:	e605      	b.n	801530c <_svfprintf_r+0x4a0>
 8015700:	2306      	movs	r3, #6
 8015702:	e5f2      	b.n	80152ea <_svfprintf_r+0x47e>
 8015704:	930e      	str	r3, [sp, #56]	; 0x38
 8015706:	2300      	movs	r3, #0
 8015708:	e60f      	b.n	801532a <_svfprintf_r+0x4be>
 801570a:	7018      	strb	r0, [r3, #0]
 801570c:	e679      	b.n	8015402 <_svfprintf_r+0x596>
 801570e:	7018      	strb	r0, [r3, #0]
 8015710:	3301      	adds	r3, #1
 8015712:	1aca      	subs	r2, r1, r3
 8015714:	d5fb      	bpl.n	801570e <_svfprintf_r+0x8a2>
 8015716:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015718:	2300      	movs	r3, #0
 801571a:	3201      	adds	r2, #1
 801571c:	db01      	blt.n	8015722 <_svfprintf_r+0x8b6>
 801571e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015720:	3301      	adds	r3, #1
 8015722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015724:	18d3      	adds	r3, r2, r3
 8015726:	9323      	str	r3, [sp, #140]	; 0x8c
 8015728:	e679      	b.n	801541e <_svfprintf_r+0x5b2>
 801572a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801572c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801572e:	2030      	movs	r0, #48	; 0x30
 8015730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015732:	1851      	adds	r1, r2, r1
 8015734:	e7ed      	b.n	8015712 <_svfprintf_r+0x8a6>
 8015736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015738:	2303      	movs	r3, #3
 801573a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801573c:	2a46      	cmp	r2, #70	; 0x46
 801573e:	d006      	beq.n	801574e <_svfprintf_r+0x8e2>
 8015740:	0014      	movs	r4, r2
 8015742:	3c45      	subs	r4, #69	; 0x45
 8015744:	4262      	negs	r2, r4
 8015746:	4154      	adcs	r4, r2
 8015748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801574a:	3b01      	subs	r3, #1
 801574c:	1914      	adds	r4, r2, r4
 801574e:	aa2a      	add	r2, sp, #168	; 0xa8
 8015750:	9204      	str	r2, [sp, #16]
 8015752:	aa27      	add	r2, sp, #156	; 0x9c
 8015754:	9203      	str	r2, [sp, #12]
 8015756:	aa26      	add	r2, sp, #152	; 0x98
 8015758:	9202      	str	r2, [sp, #8]
 801575a:	9300      	str	r3, [sp, #0]
 801575c:	002a      	movs	r2, r5
 801575e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015760:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015762:	9401      	str	r4, [sp, #4]
 8015764:	f000 fe9c 	bl	80164a0 <_dtoa_r>
 8015768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801576a:	9008      	str	r0, [sp, #32]
 801576c:	2b47      	cmp	r3, #71	; 0x47
 801576e:	d103      	bne.n	8015778 <_svfprintf_r+0x90c>
 8015770:	07f3      	lsls	r3, r6, #31
 8015772:	d401      	bmi.n	8015778 <_svfprintf_r+0x90c>
 8015774:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015776:	e653      	b.n	8015420 <_svfprintf_r+0x5b4>
 8015778:	9b08      	ldr	r3, [sp, #32]
 801577a:	191b      	adds	r3, r3, r4
 801577c:	9311      	str	r3, [sp, #68]	; 0x44
 801577e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015780:	2b46      	cmp	r3, #70	; 0x46
 8015782:	d113      	bne.n	80157ac <_svfprintf_r+0x940>
 8015784:	9b08      	ldr	r3, [sp, #32]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	2b30      	cmp	r3, #48	; 0x30
 801578a:	d10a      	bne.n	80157a2 <_svfprintf_r+0x936>
 801578c:	2200      	movs	r2, #0
 801578e:	2300      	movs	r3, #0
 8015790:	0028      	movs	r0, r5
 8015792:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015794:	f7ea fe62 	bl	800045c <__aeabi_dcmpeq>
 8015798:	2800      	cmp	r0, #0
 801579a:	d102      	bne.n	80157a2 <_svfprintf_r+0x936>
 801579c:	2301      	movs	r3, #1
 801579e:	1b1c      	subs	r4, r3, r4
 80157a0:	9426      	str	r4, [sp, #152]	; 0x98
 80157a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80157a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157a6:	4694      	mov	ip, r2
 80157a8:	4463      	add	r3, ip
 80157aa:	9311      	str	r3, [sp, #68]	; 0x44
 80157ac:	2200      	movs	r2, #0
 80157ae:	2300      	movs	r3, #0
 80157b0:	0028      	movs	r0, r5
 80157b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80157b4:	f7ea fe52 	bl	800045c <__aeabi_dcmpeq>
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d001      	beq.n	80157c0 <_svfprintf_r+0x954>
 80157bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157be:	932a      	str	r3, [sp, #168]	; 0xa8
 80157c0:	2230      	movs	r2, #48	; 0x30
 80157c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80157c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80157c6:	4299      	cmp	r1, r3
 80157c8:	d9d4      	bls.n	8015774 <_svfprintf_r+0x908>
 80157ca:	1c59      	adds	r1, r3, #1
 80157cc:	912a      	str	r1, [sp, #168]	; 0xa8
 80157ce:	701a      	strb	r2, [r3, #0]
 80157d0:	e7f7      	b.n	80157c2 <_svfprintf_r+0x956>
 80157d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157d4:	2b46      	cmp	r3, #70	; 0x46
 80157d6:	d000      	beq.n	80157da <_svfprintf_r+0x96e>
 80157d8:	e633      	b.n	8015442 <_svfprintf_r+0x5d6>
 80157da:	2201      	movs	r2, #1
 80157dc:	0033      	movs	r3, r6
 80157de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157e0:	4013      	ands	r3, r2
 80157e2:	430b      	orrs	r3, r1
 80157e4:	2d00      	cmp	r5, #0
 80157e6:	dd1c      	ble.n	8015822 <_svfprintf_r+0x9b6>
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d046      	beq.n	801587a <_svfprintf_r+0xa0e>
 80157ec:	000a      	movs	r2, r1
 80157ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80157f0:	18eb      	adds	r3, r5, r3
 80157f2:	18d3      	adds	r3, r2, r3
 80157f4:	9309      	str	r3, [sp, #36]	; 0x24
 80157f6:	2366      	movs	r3, #102	; 0x66
 80157f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80157fa:	e023      	b.n	8015844 <_svfprintf_r+0x9d8>
 80157fc:	781c      	ldrb	r4, [r3, #0]
 80157fe:	3301      	adds	r3, #1
 8015800:	700c      	strb	r4, [r1, #0]
 8015802:	3101      	adds	r1, #1
 8015804:	e65c      	b.n	80154c0 <_svfprintf_r+0x654>
 8015806:	222a      	movs	r2, #42	; 0x2a
 8015808:	ab1e      	add	r3, sp, #120	; 0x78
 801580a:	18d2      	adds	r2, r2, r3
 801580c:	2800      	cmp	r0, #0
 801580e:	d104      	bne.n	801581a <_svfprintf_r+0x9ae>
 8015810:	2330      	movs	r3, #48	; 0x30
 8015812:	222b      	movs	r2, #43	; 0x2b
 8015814:	708b      	strb	r3, [r1, #2]
 8015816:	ab1e      	add	r3, sp, #120	; 0x78
 8015818:	18d2      	adds	r2, r2, r3
 801581a:	3430      	adds	r4, #48	; 0x30
 801581c:	1c53      	adds	r3, r2, #1
 801581e:	7014      	strb	r4, [r2, #0]
 8015820:	e65d      	b.n	80154de <_svfprintf_r+0x672>
 8015822:	2b00      	cmp	r3, #0
 8015824:	d02b      	beq.n	801587e <_svfprintf_r+0xa12>
 8015826:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801582a:	3301      	adds	r3, #1
 801582c:	e7e1      	b.n	80157f2 <_svfprintf_r+0x986>
 801582e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015830:	429d      	cmp	r5, r3
 8015832:	db15      	blt.n	8015860 <_svfprintf_r+0x9f4>
 8015834:	2367      	movs	r3, #103	; 0x67
 8015836:	9509      	str	r5, [sp, #36]	; 0x24
 8015838:	930f      	str	r3, [sp, #60]	; 0x3c
 801583a:	07f3      	lsls	r3, r6, #31
 801583c:	d502      	bpl.n	8015844 <_svfprintf_r+0x9d8>
 801583e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015840:	18eb      	adds	r3, r5, r3
 8015842:	9309      	str	r3, [sp, #36]	; 0x24
 8015844:	2380      	movs	r3, #128	; 0x80
 8015846:	0032      	movs	r2, r6
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	401a      	ands	r2, r3
 801584c:	9211      	str	r2, [sp, #68]	; 0x44
 801584e:	2200      	movs	r2, #0
 8015850:	9210      	str	r2, [sp, #64]	; 0x40
 8015852:	421e      	tst	r6, r3
 8015854:	d100      	bne.n	8015858 <_svfprintf_r+0x9ec>
 8015856:	e65e      	b.n	8015516 <_svfprintf_r+0x6aa>
 8015858:	4295      	cmp	r5, r2
 801585a:	dc32      	bgt.n	80158c2 <_svfprintf_r+0xa56>
 801585c:	9211      	str	r2, [sp, #68]	; 0x44
 801585e:	e65a      	b.n	8015516 <_svfprintf_r+0x6aa>
 8015860:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015864:	4694      	mov	ip, r2
 8015866:	4463      	add	r3, ip
 8015868:	9309      	str	r3, [sp, #36]	; 0x24
 801586a:	2367      	movs	r3, #103	; 0x67
 801586c:	930f      	str	r3, [sp, #60]	; 0x3c
 801586e:	2d00      	cmp	r5, #0
 8015870:	dce8      	bgt.n	8015844 <_svfprintf_r+0x9d8>
 8015872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015874:	1b58      	subs	r0, r3, r5
 8015876:	1c43      	adds	r3, r0, #1
 8015878:	e7e3      	b.n	8015842 <_svfprintf_r+0x9d6>
 801587a:	9509      	str	r5, [sp, #36]	; 0x24
 801587c:	e7bb      	b.n	80157f6 <_svfprintf_r+0x98a>
 801587e:	2366      	movs	r3, #102	; 0x66
 8015880:	9209      	str	r2, [sp, #36]	; 0x24
 8015882:	930f      	str	r3, [sp, #60]	; 0x3c
 8015884:	e7de      	b.n	8015844 <_svfprintf_r+0x9d8>
 8015886:	42ab      	cmp	r3, r5
 8015888:	da0e      	bge.n	80158a8 <_svfprintf_r+0xa3c>
 801588a:	1aed      	subs	r5, r5, r3
 801588c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801588e:	785b      	ldrb	r3, [r3, #1]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d012      	beq.n	80158ba <_svfprintf_r+0xa4e>
 8015894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015896:	3301      	adds	r3, #1
 8015898:	9311      	str	r3, [sp, #68]	; 0x44
 801589a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801589c:	3301      	adds	r3, #1
 801589e:	9312      	str	r3, [sp, #72]	; 0x48
 80158a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	2bff      	cmp	r3, #255	; 0xff
 80158a6:	d1ee      	bne.n	8015886 <_svfprintf_r+0xa1a>
 80158a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158ac:	189b      	adds	r3, r3, r2
 80158ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80158b0:	4353      	muls	r3, r2
 80158b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158b4:	189b      	adds	r3, r3, r2
 80158b6:	9309      	str	r3, [sp, #36]	; 0x24
 80158b8:	e62d      	b.n	8015516 <_svfprintf_r+0x6aa>
 80158ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158bc:	3301      	adds	r3, #1
 80158be:	9310      	str	r3, [sp, #64]	; 0x40
 80158c0:	e7ee      	b.n	80158a0 <_svfprintf_r+0xa34>
 80158c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158c4:	9311      	str	r3, [sp, #68]	; 0x44
 80158c6:	e7eb      	b.n	80158a0 <_svfprintf_r+0xa34>
 80158c8:	1d23      	adds	r3, r4, #4
 80158ca:	930d      	str	r3, [sp, #52]	; 0x34
 80158cc:	06b3      	lsls	r3, r6, #26
 80158ce:	d509      	bpl.n	80158e4 <_svfprintf_r+0xa78>
 80158d0:	6823      	ldr	r3, [r4, #0]
 80158d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	17d2      	asrs	r2, r2, #31
 80158d8:	605a      	str	r2, [r3, #4]
 80158da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80158de:	9308      	str	r3, [sp, #32]
 80158e0:	f7ff fb00 	bl	8014ee4 <_svfprintf_r+0x78>
 80158e4:	06f3      	lsls	r3, r6, #27
 80158e6:	d503      	bpl.n	80158f0 <_svfprintf_r+0xa84>
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	e7f4      	b.n	80158da <_svfprintf_r+0xa6e>
 80158f0:	0673      	lsls	r3, r6, #25
 80158f2:	d503      	bpl.n	80158fc <_svfprintf_r+0xa90>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80158f8:	801a      	strh	r2, [r3, #0]
 80158fa:	e7ee      	b.n	80158da <_svfprintf_r+0xa6e>
 80158fc:	05b3      	lsls	r3, r6, #22
 80158fe:	d5f3      	bpl.n	80158e8 <_svfprintf_r+0xa7c>
 8015900:	6823      	ldr	r3, [r4, #0]
 8015902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015904:	701a      	strb	r2, [r3, #0]
 8015906:	e7e8      	b.n	80158da <_svfprintf_r+0xa6e>
 8015908:	2310      	movs	r3, #16
 801590a:	431e      	orrs	r6, r3
 801590c:	2320      	movs	r3, #32
 801590e:	0030      	movs	r0, r6
 8015910:	4018      	ands	r0, r3
 8015912:	421e      	tst	r6, r3
 8015914:	d00f      	beq.n	8015936 <_svfprintf_r+0xaca>
 8015916:	3b19      	subs	r3, #25
 8015918:	3407      	adds	r4, #7
 801591a:	439c      	bics	r4, r3
 801591c:	0022      	movs	r2, r4
 801591e:	ca18      	ldmia	r2!, {r3, r4}
 8015920:	9306      	str	r3, [sp, #24]
 8015922:	9407      	str	r4, [sp, #28]
 8015924:	920d      	str	r2, [sp, #52]	; 0x34
 8015926:	4bc2      	ldr	r3, [pc, #776]	; (8015c30 <_svfprintf_r+0xdc4>)
 8015928:	401e      	ands	r6, r3
 801592a:	2300      	movs	r3, #0
 801592c:	221b      	movs	r2, #27
 801592e:	a91e      	add	r1, sp, #120	; 0x78
 8015930:	1852      	adds	r2, r2, r1
 8015932:	2100      	movs	r1, #0
 8015934:	e424      	b.n	8015180 <_svfprintf_r+0x314>
 8015936:	0022      	movs	r2, r4
 8015938:	ca08      	ldmia	r2!, {r3}
 801593a:	0031      	movs	r1, r6
 801593c:	920d      	str	r2, [sp, #52]	; 0x34
 801593e:	2210      	movs	r2, #16
 8015940:	4011      	ands	r1, r2
 8015942:	4216      	tst	r6, r2
 8015944:	d002      	beq.n	801594c <_svfprintf_r+0xae0>
 8015946:	9306      	str	r3, [sp, #24]
 8015948:	9007      	str	r0, [sp, #28]
 801594a:	e7ec      	b.n	8015926 <_svfprintf_r+0xaba>
 801594c:	2240      	movs	r2, #64	; 0x40
 801594e:	0030      	movs	r0, r6
 8015950:	4010      	ands	r0, r2
 8015952:	4216      	tst	r6, r2
 8015954:	d003      	beq.n	801595e <_svfprintf_r+0xaf2>
 8015956:	b29b      	uxth	r3, r3
 8015958:	9306      	str	r3, [sp, #24]
 801595a:	9107      	str	r1, [sp, #28]
 801595c:	e7e3      	b.n	8015926 <_svfprintf_r+0xaba>
 801595e:	2280      	movs	r2, #128	; 0x80
 8015960:	0031      	movs	r1, r6
 8015962:	0092      	lsls	r2, r2, #2
 8015964:	4011      	ands	r1, r2
 8015966:	4216      	tst	r6, r2
 8015968:	d0f6      	beq.n	8015958 <_svfprintf_r+0xaec>
 801596a:	b2db      	uxtb	r3, r3
 801596c:	e7eb      	b.n	8015946 <_svfprintf_r+0xada>
 801596e:	0023      	movs	r3, r4
 8015970:	cb04      	ldmia	r3!, {r2}
 8015972:	a925      	add	r1, sp, #148	; 0x94
 8015974:	9206      	str	r2, [sp, #24]
 8015976:	2230      	movs	r2, #48	; 0x30
 8015978:	930d      	str	r3, [sp, #52]	; 0x34
 801597a:	2300      	movs	r3, #0
 801597c:	700a      	strb	r2, [r1, #0]
 801597e:	3248      	adds	r2, #72	; 0x48
 8015980:	704a      	strb	r2, [r1, #1]
 8015982:	49ac      	ldr	r1, [pc, #688]	; (8015c34 <_svfprintf_r+0xdc8>)
 8015984:	9307      	str	r3, [sp, #28]
 8015986:	3302      	adds	r3, #2
 8015988:	431e      	orrs	r6, r3
 801598a:	911f      	str	r1, [sp, #124]	; 0x7c
 801598c:	920f      	str	r2, [sp, #60]	; 0x3c
 801598e:	e7cd      	b.n	801592c <_svfprintf_r+0xac0>
 8015990:	0023      	movs	r3, r4
 8015992:	cb04      	ldmia	r3!, {r2}
 8015994:	2400      	movs	r4, #0
 8015996:	930d      	str	r3, [sp, #52]	; 0x34
 8015998:	231b      	movs	r3, #27
 801599a:	9208      	str	r2, [sp, #32]
 801599c:	aa1e      	add	r2, sp, #120	; 0x78
 801599e:	189b      	adds	r3, r3, r2
 80159a0:	701c      	strb	r4, [r3, #0]
 80159a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a4:	3301      	adds	r3, #1
 80159a6:	d00e      	beq.n	80159c6 <_svfprintf_r+0xb5a>
 80159a8:	0021      	movs	r1, r4
 80159aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159ac:	9808      	ldr	r0, [sp, #32]
 80159ae:	f002 f807 	bl	80179c0 <memchr>
 80159b2:	900c      	str	r0, [sp, #48]	; 0x30
 80159b4:	42a0      	cmp	r0, r4
 80159b6:	d100      	bne.n	80159ba <_svfprintf_r+0xb4e>
 80159b8:	e0fe      	b.n	8015bb8 <_svfprintf_r+0xd4c>
 80159ba:	9a08      	ldr	r2, [sp, #32]
 80159bc:	1a83      	subs	r3, r0, r2
 80159be:	9309      	str	r3, [sp, #36]	; 0x24
 80159c0:	0023      	movs	r3, r4
 80159c2:	940c      	str	r4, [sp, #48]	; 0x30
 80159c4:	e441      	b.n	801524a <_svfprintf_r+0x3de>
 80159c6:	9808      	ldr	r0, [sp, #32]
 80159c8:	f7ea fba6 	bl	8000118 <strlen>
 80159cc:	9009      	str	r0, [sp, #36]	; 0x24
 80159ce:	e7f7      	b.n	80159c0 <_svfprintf_r+0xb54>
 80159d0:	2310      	movs	r3, #16
 80159d2:	431e      	orrs	r6, r3
 80159d4:	2320      	movs	r3, #32
 80159d6:	0030      	movs	r0, r6
 80159d8:	4018      	ands	r0, r3
 80159da:	421e      	tst	r6, r3
 80159dc:	d009      	beq.n	80159f2 <_svfprintf_r+0xb86>
 80159de:	3b19      	subs	r3, #25
 80159e0:	3407      	adds	r4, #7
 80159e2:	439c      	bics	r4, r3
 80159e4:	0022      	movs	r2, r4
 80159e6:	ca18      	ldmia	r2!, {r3, r4}
 80159e8:	9306      	str	r3, [sp, #24]
 80159ea:	9407      	str	r4, [sp, #28]
 80159ec:	920d      	str	r2, [sp, #52]	; 0x34
 80159ee:	2301      	movs	r3, #1
 80159f0:	e79c      	b.n	801592c <_svfprintf_r+0xac0>
 80159f2:	0022      	movs	r2, r4
 80159f4:	ca08      	ldmia	r2!, {r3}
 80159f6:	0031      	movs	r1, r6
 80159f8:	920d      	str	r2, [sp, #52]	; 0x34
 80159fa:	2210      	movs	r2, #16
 80159fc:	4011      	ands	r1, r2
 80159fe:	4216      	tst	r6, r2
 8015a00:	d002      	beq.n	8015a08 <_svfprintf_r+0xb9c>
 8015a02:	9306      	str	r3, [sp, #24]
 8015a04:	9007      	str	r0, [sp, #28]
 8015a06:	e7f2      	b.n	80159ee <_svfprintf_r+0xb82>
 8015a08:	2240      	movs	r2, #64	; 0x40
 8015a0a:	0030      	movs	r0, r6
 8015a0c:	4010      	ands	r0, r2
 8015a0e:	4216      	tst	r6, r2
 8015a10:	d003      	beq.n	8015a1a <_svfprintf_r+0xbae>
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	9306      	str	r3, [sp, #24]
 8015a16:	9107      	str	r1, [sp, #28]
 8015a18:	e7e9      	b.n	80159ee <_svfprintf_r+0xb82>
 8015a1a:	2280      	movs	r2, #128	; 0x80
 8015a1c:	0031      	movs	r1, r6
 8015a1e:	0092      	lsls	r2, r2, #2
 8015a20:	4011      	ands	r1, r2
 8015a22:	4216      	tst	r6, r2
 8015a24:	d0f6      	beq.n	8015a14 <_svfprintf_r+0xba8>
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	e7eb      	b.n	8015a02 <_svfprintf_r+0xb96>
 8015a2a:	4b83      	ldr	r3, [pc, #524]	; (8015c38 <_svfprintf_r+0xdcc>)
 8015a2c:	0030      	movs	r0, r6
 8015a2e:	931f      	str	r3, [sp, #124]	; 0x7c
 8015a30:	2320      	movs	r3, #32
 8015a32:	4018      	ands	r0, r3
 8015a34:	421e      	tst	r6, r3
 8015a36:	d01a      	beq.n	8015a6e <_svfprintf_r+0xc02>
 8015a38:	3b19      	subs	r3, #25
 8015a3a:	3407      	adds	r4, #7
 8015a3c:	439c      	bics	r4, r3
 8015a3e:	0022      	movs	r2, r4
 8015a40:	ca18      	ldmia	r2!, {r3, r4}
 8015a42:	9306      	str	r3, [sp, #24]
 8015a44:	9407      	str	r4, [sp, #28]
 8015a46:	920d      	str	r2, [sp, #52]	; 0x34
 8015a48:	07f3      	lsls	r3, r6, #31
 8015a4a:	d50a      	bpl.n	8015a62 <_svfprintf_r+0xbf6>
 8015a4c:	9b06      	ldr	r3, [sp, #24]
 8015a4e:	9a07      	ldr	r2, [sp, #28]
 8015a50:	4313      	orrs	r3, r2
 8015a52:	d006      	beq.n	8015a62 <_svfprintf_r+0xbf6>
 8015a54:	2230      	movs	r2, #48	; 0x30
 8015a56:	ab25      	add	r3, sp, #148	; 0x94
 8015a58:	701a      	strb	r2, [r3, #0]
 8015a5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a5c:	705a      	strb	r2, [r3, #1]
 8015a5e:	2302      	movs	r3, #2
 8015a60:	431e      	orrs	r6, r3
 8015a62:	4b73      	ldr	r3, [pc, #460]	; (8015c30 <_svfprintf_r+0xdc4>)
 8015a64:	401e      	ands	r6, r3
 8015a66:	2302      	movs	r3, #2
 8015a68:	e760      	b.n	801592c <_svfprintf_r+0xac0>
 8015a6a:	4b72      	ldr	r3, [pc, #456]	; (8015c34 <_svfprintf_r+0xdc8>)
 8015a6c:	e7de      	b.n	8015a2c <_svfprintf_r+0xbc0>
 8015a6e:	0022      	movs	r2, r4
 8015a70:	ca08      	ldmia	r2!, {r3}
 8015a72:	0031      	movs	r1, r6
 8015a74:	920d      	str	r2, [sp, #52]	; 0x34
 8015a76:	2210      	movs	r2, #16
 8015a78:	4011      	ands	r1, r2
 8015a7a:	4216      	tst	r6, r2
 8015a7c:	d002      	beq.n	8015a84 <_svfprintf_r+0xc18>
 8015a7e:	9306      	str	r3, [sp, #24]
 8015a80:	9007      	str	r0, [sp, #28]
 8015a82:	e7e1      	b.n	8015a48 <_svfprintf_r+0xbdc>
 8015a84:	2240      	movs	r2, #64	; 0x40
 8015a86:	0030      	movs	r0, r6
 8015a88:	4010      	ands	r0, r2
 8015a8a:	4216      	tst	r6, r2
 8015a8c:	d003      	beq.n	8015a96 <_svfprintf_r+0xc2a>
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	9306      	str	r3, [sp, #24]
 8015a92:	9107      	str	r1, [sp, #28]
 8015a94:	e7d8      	b.n	8015a48 <_svfprintf_r+0xbdc>
 8015a96:	2280      	movs	r2, #128	; 0x80
 8015a98:	0031      	movs	r1, r6
 8015a9a:	0092      	lsls	r2, r2, #2
 8015a9c:	4011      	ands	r1, r2
 8015a9e:	4216      	tst	r6, r2
 8015aa0:	d0f6      	beq.n	8015a90 <_svfprintf_r+0xc24>
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	e7eb      	b.n	8015a7e <_svfprintf_r+0xc12>
 8015aa6:	9b07      	ldr	r3, [sp, #28]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10b      	bne.n	8015ac4 <_svfprintf_r+0xc58>
 8015aac:	9b06      	ldr	r3, [sp, #24]
 8015aae:	2b09      	cmp	r3, #9
 8015ab0:	d808      	bhi.n	8015ac4 <_svfprintf_r+0xc58>
 8015ab2:	20e7      	movs	r0, #231	; 0xe7
 8015ab4:	ab1e      	add	r3, sp, #120	; 0x78
 8015ab6:	18c0      	adds	r0, r0, r3
 8015ab8:	9b06      	ldr	r3, [sp, #24]
 8015aba:	3330      	adds	r3, #48	; 0x30
 8015abc:	7003      	strb	r3, [r0, #0]
 8015abe:	9008      	str	r0, [sp, #32]
 8015ac0:	f000 fc30 	bl	8016324 <_svfprintf_r+0x14b8>
 8015ac4:	2480      	movs	r4, #128	; 0x80
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	00e4      	lsls	r4, r4, #3
 8015aca:	930e      	str	r3, [sp, #56]	; 0x38
 8015acc:	a858      	add	r0, sp, #352	; 0x160
 8015ace:	402c      	ands	r4, r5
 8015ad0:	1e43      	subs	r3, r0, #1
 8015ad2:	9308      	str	r3, [sp, #32]
 8015ad4:	220a      	movs	r2, #10
 8015ad6:	9806      	ldr	r0, [sp, #24]
 8015ad8:	9907      	ldr	r1, [sp, #28]
 8015ada:	2300      	movs	r3, #0
 8015adc:	f7ea fd26 	bl	800052c <__aeabi_uldivmod>
 8015ae0:	9b08      	ldr	r3, [sp, #32]
 8015ae2:	3230      	adds	r2, #48	; 0x30
 8015ae4:	701a      	strb	r2, [r3, #0]
 8015ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ae8:	3301      	adds	r3, #1
 8015aea:	930e      	str	r3, [sp, #56]	; 0x38
 8015aec:	2c00      	cmp	r4, #0
 8015aee:	d01d      	beq.n	8015b2c <_svfprintf_r+0xcc0>
 8015af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d118      	bne.n	8015b2c <_svfprintf_r+0xcc0>
 8015afa:	2aff      	cmp	r2, #255	; 0xff
 8015afc:	d016      	beq.n	8015b2c <_svfprintf_r+0xcc0>
 8015afe:	9b07      	ldr	r3, [sp, #28]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d102      	bne.n	8015b0a <_svfprintf_r+0xc9e>
 8015b04:	9b06      	ldr	r3, [sp, #24]
 8015b06:	2b09      	cmp	r3, #9
 8015b08:	d910      	bls.n	8015b2c <_svfprintf_r+0xcc0>
 8015b0a:	9b08      	ldr	r3, [sp, #32]
 8015b0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015b0e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015b10:	1a9b      	subs	r3, r3, r2
 8015b12:	0018      	movs	r0, r3
 8015b14:	9308      	str	r3, [sp, #32]
 8015b16:	f7fe fa86 	bl	8014026 <strncpy>
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b1e:	920e      	str	r2, [sp, #56]	; 0x38
 8015b20:	785b      	ldrb	r3, [r3, #1]
 8015b22:	1e5a      	subs	r2, r3, #1
 8015b24:	4193      	sbcs	r3, r2
 8015b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b28:	18d3      	adds	r3, r2, r3
 8015b2a:	9312      	str	r3, [sp, #72]	; 0x48
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	9806      	ldr	r0, [sp, #24]
 8015b30:	9907      	ldr	r1, [sp, #28]
 8015b32:	220a      	movs	r2, #10
 8015b34:	f7ea fcfa 	bl	800052c <__aeabi_uldivmod>
 8015b38:	9b07      	ldr	r3, [sp, #28]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d103      	bne.n	8015b46 <_svfprintf_r+0xcda>
 8015b3e:	9b06      	ldr	r3, [sp, #24]
 8015b40:	2b09      	cmp	r3, #9
 8015b42:	d800      	bhi.n	8015b46 <_svfprintf_r+0xcda>
 8015b44:	e3ee      	b.n	8016324 <_svfprintf_r+0x14b8>
 8015b46:	9006      	str	r0, [sp, #24]
 8015b48:	9107      	str	r1, [sp, #28]
 8015b4a:	9808      	ldr	r0, [sp, #32]
 8015b4c:	e7c0      	b.n	8015ad0 <_svfprintf_r+0xc64>
 8015b4e:	200f      	movs	r0, #15
 8015b50:	ab58      	add	r3, sp, #352	; 0x160
 8015b52:	9308      	str	r3, [sp, #32]
 8015b54:	9b08      	ldr	r3, [sp, #32]
 8015b56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	9308      	str	r3, [sp, #32]
 8015b5c:	9b06      	ldr	r3, [sp, #24]
 8015b5e:	4003      	ands	r3, r0
 8015b60:	5cd3      	ldrb	r3, [r2, r3]
 8015b62:	9a08      	ldr	r2, [sp, #32]
 8015b64:	7013      	strb	r3, [r2, #0]
 8015b66:	9b07      	ldr	r3, [sp, #28]
 8015b68:	0719      	lsls	r1, r3, #28
 8015b6a:	9b06      	ldr	r3, [sp, #24]
 8015b6c:	091a      	lsrs	r2, r3, #4
 8015b6e:	9b07      	ldr	r3, [sp, #28]
 8015b70:	4311      	orrs	r1, r2
 8015b72:	091b      	lsrs	r3, r3, #4
 8015b74:	9307      	str	r3, [sp, #28]
 8015b76:	000b      	movs	r3, r1
 8015b78:	9a07      	ldr	r2, [sp, #28]
 8015b7a:	9106      	str	r1, [sp, #24]
 8015b7c:	4313      	orrs	r3, r2
 8015b7e:	d1e9      	bne.n	8015b54 <_svfprintf_r+0xce8>
 8015b80:	e3d0      	b.n	8016324 <_svfprintf_r+0x14b8>
 8015b82:	aa58      	add	r2, sp, #352	; 0x160
 8015b84:	9208      	str	r2, [sp, #32]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d000      	beq.n	8015b8c <_svfprintf_r+0xd20>
 8015b8a:	e3cb      	b.n	8016324 <_svfprintf_r+0x14b8>
 8015b8c:	07f3      	lsls	r3, r6, #31
 8015b8e:	d400      	bmi.n	8015b92 <_svfprintf_r+0xd26>
 8015b90:	e3c8      	b.n	8016324 <_svfprintf_r+0x14b8>
 8015b92:	20e7      	movs	r0, #231	; 0xe7
 8015b94:	ab1e      	add	r3, sp, #120	; 0x78
 8015b96:	18c0      	adds	r0, r0, r3
 8015b98:	2330      	movs	r3, #48	; 0x30
 8015b9a:	e78f      	b.n	8015abc <_svfprintf_r+0xc50>
 8015b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d100      	bne.n	8015ba4 <_svfprintf_r+0xd38>
 8015ba2:	e383      	b.n	80162ac <_svfprintf_r+0x1440>
 8015ba4:	221b      	movs	r2, #27
 8015ba6:	a83f      	add	r0, sp, #252	; 0xfc
 8015ba8:	7003      	strb	r3, [r0, #0]
 8015baa:	2300      	movs	r3, #0
 8015bac:	a91e      	add	r1, sp, #120	; 0x78
 8015bae:	1852      	adds	r2, r2, r1
 8015bb0:	7013      	strb	r3, [r2, #0]
 8015bb2:	940d      	str	r4, [sp, #52]	; 0x34
 8015bb4:	f7ff fabf 	bl	8015136 <_svfprintf_r+0x2ca>
 8015bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bba:	f7ff fb46 	bl	801524a <_svfprintf_r+0x3de>
 8015bbe:	2010      	movs	r0, #16
 8015bc0:	1812      	adds	r2, r2, r0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	922e      	str	r2, [sp, #184]	; 0xb8
 8015bc6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bc8:	2b07      	cmp	r3, #7
 8015bca:	dd08      	ble.n	8015bde <_svfprintf_r+0xd72>
 8015bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bd0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015bd2:	f002 fbc5 	bl	8018360 <__ssprint_r>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d000      	beq.n	8015bdc <_svfprintf_r+0xd70>
 8015bda:	e346      	b.n	801626a <_svfprintf_r+0x13fe>
 8015bdc:	a92f      	add	r1, sp, #188	; 0xbc
 8015bde:	000f      	movs	r7, r1
 8015be0:	3c10      	subs	r4, #16
 8015be2:	e4c7      	b.n	8015574 <_svfprintf_r+0x708>
 8015be4:	2010      	movs	r0, #16
 8015be6:	1812      	adds	r2, r2, r0
 8015be8:	6078      	str	r0, [r7, #4]
 8015bea:	922e      	str	r2, [sp, #184]	; 0xb8
 8015bec:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bee:	2b07      	cmp	r3, #7
 8015bf0:	dd08      	ble.n	8015c04 <_svfprintf_r+0xd98>
 8015bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bf6:	aa2c      	add	r2, sp, #176	; 0xb0
 8015bf8:	f002 fbb2 	bl	8018360 <__ssprint_r>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d000      	beq.n	8015c02 <_svfprintf_r+0xd96>
 8015c00:	e333      	b.n	801626a <_svfprintf_r+0x13fe>
 8015c02:	a92f      	add	r1, sp, #188	; 0xbc
 8015c04:	000f      	movs	r7, r1
 8015c06:	3c10      	subs	r4, #16
 8015c08:	e513      	b.n	8015632 <_svfprintf_r+0x7c6>
 8015c0a:	2010      	movs	r0, #16
 8015c0c:	1812      	adds	r2, r2, r0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	922e      	str	r2, [sp, #184]	; 0xb8
 8015c12:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c14:	2b07      	cmp	r3, #7
 8015c16:	dd08      	ble.n	8015c2a <_svfprintf_r+0xdbe>
 8015c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c1e:	f002 fb9f 	bl	8018360 <__ssprint_r>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d000      	beq.n	8015c28 <_svfprintf_r+0xdbc>
 8015c26:	e320      	b.n	801626a <_svfprintf_r+0x13fe>
 8015c28:	a92f      	add	r1, sp, #188	; 0xbc
 8015c2a:	000f      	movs	r7, r1
 8015c2c:	3c10      	subs	r4, #16
 8015c2e:	e521      	b.n	8015674 <_svfprintf_r+0x808>
 8015c30:	fffffbff 	.word	0xfffffbff
 8015c34:	0801d0d0 	.word	0x0801d0d0
 8015c38:	0801d0e1 	.word	0x0801d0e1
 8015c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c3e:	2b65      	cmp	r3, #101	; 0x65
 8015c40:	dc00      	bgt.n	8015c44 <_svfprintf_r+0xdd8>
 8015c42:	e257      	b.n	80160f4 <_svfprintf_r+0x1288>
 8015c44:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015c46:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015c48:	2200      	movs	r2, #0
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	f7ea fc06 	bl	800045c <__aeabi_dcmpeq>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d07c      	beq.n	8015d4e <_svfprintf_r+0xee2>
 8015c54:	4b80      	ldr	r3, [pc, #512]	; (8015e58 <_svfprintf_r+0xfec>)
 8015c56:	603b      	str	r3, [r7, #0]
 8015c58:	2301      	movs	r3, #1
 8015c5a:	607b      	str	r3, [r7, #4]
 8015c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c5e:	3708      	adds	r7, #8
 8015c60:	3301      	adds	r3, #1
 8015c62:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c66:	9308      	str	r3, [sp, #32]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c6c:	2b07      	cmp	r3, #7
 8015c6e:	dd08      	ble.n	8015c82 <_svfprintf_r+0xe16>
 8015c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c74:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c76:	f002 fb73 	bl	8018360 <__ssprint_r>
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d000      	beq.n	8015c80 <_svfprintf_r+0xe14>
 8015c7e:	e2f4      	b.n	801626a <_svfprintf_r+0x13fe>
 8015c80:	af2f      	add	r7, sp, #188	; 0xbc
 8015c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c86:	4293      	cmp	r3, r2
 8015c88:	db01      	blt.n	8015c8e <_svfprintf_r+0xe22>
 8015c8a:	07f3      	lsls	r3, r6, #31
 8015c8c:	d51d      	bpl.n	8015cca <_svfprintf_r+0xe5e>
 8015c8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015c90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c92:	4694      	mov	ip, r2
 8015c94:	603b      	str	r3, [r7, #0]
 8015c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015c98:	607b      	str	r3, [r7, #4]
 8015c9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c9c:	3708      	adds	r7, #8
 8015c9e:	4463      	add	r3, ip
 8015ca0:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ca2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ca4:	9308      	str	r3, [sp, #32]
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	932d      	str	r3, [sp, #180]	; 0xb4
 8015caa:	2b07      	cmp	r3, #7
 8015cac:	dd08      	ble.n	8015cc0 <_svfprintf_r+0xe54>
 8015cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cb2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015cb4:	f002 fb54 	bl	8018360 <__ssprint_r>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d000      	beq.n	8015cbe <_svfprintf_r+0xe52>
 8015cbc:	e2d5      	b.n	801626a <_svfprintf_r+0x13fe>
 8015cbe:	af2f      	add	r7, sp, #188	; 0xbc
 8015cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cc2:	2510      	movs	r5, #16
 8015cc4:	1e5c      	subs	r4, r3, #1
 8015cc6:	2c00      	cmp	r4, #0
 8015cc8:	dc2f      	bgt.n	8015d2a <_svfprintf_r+0xebe>
 8015cca:	0773      	lsls	r3, r6, #29
 8015ccc:	d500      	bpl.n	8015cd0 <_svfprintf_r+0xe64>
 8015cce:	e2ae      	b.n	801622e <_svfprintf_r+0x13c2>
 8015cd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015cd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	da00      	bge.n	8015cda <_svfprintf_r+0xe6e>
 8015cd8:	0013      	movs	r3, r2
 8015cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015cdc:	18d3      	adds	r3, r2, r3
 8015cde:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ce0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ce2:	9308      	str	r3, [sp, #32]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d007      	beq.n	8015cf8 <_svfprintf_r+0xe8c>
 8015ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cec:	aa2c      	add	r2, sp, #176	; 0xb0
 8015cee:	f002 fb37 	bl	8018360 <__ssprint_r>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d000      	beq.n	8015cf8 <_svfprintf_r+0xe8c>
 8015cf6:	e2b8      	b.n	801626a <_svfprintf_r+0x13fe>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8015cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d000      	beq.n	8015d04 <_svfprintf_r+0xe98>
 8015d02:	e2ce      	b.n	80162a2 <_svfprintf_r+0x1436>
 8015d04:	af2f      	add	r7, sp, #188	; 0xbc
 8015d06:	e5e8      	b.n	80158da <_svfprintf_r+0xa6e>
 8015d08:	3210      	adds	r2, #16
 8015d0a:	607d      	str	r5, [r7, #4]
 8015d0c:	922e      	str	r2, [sp, #184]	; 0xb8
 8015d0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d10:	2b07      	cmp	r3, #7
 8015d12:	dd08      	ble.n	8015d26 <_svfprintf_r+0xeba>
 8015d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d18:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d1a:	f002 fb21 	bl	8018360 <__ssprint_r>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d000      	beq.n	8015d24 <_svfprintf_r+0xeb8>
 8015d22:	e2a2      	b.n	801626a <_svfprintf_r+0x13fe>
 8015d24:	a92f      	add	r1, sp, #188	; 0xbc
 8015d26:	000f      	movs	r7, r1
 8015d28:	3c10      	subs	r4, #16
 8015d2a:	0039      	movs	r1, r7
 8015d2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d2e:	484b      	ldr	r0, [pc, #300]	; (8015e5c <_svfprintf_r+0xff0>)
 8015d30:	9308      	str	r3, [sp, #32]
 8015d32:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d34:	3301      	adds	r3, #1
 8015d36:	3108      	adds	r1, #8
 8015d38:	6038      	str	r0, [r7, #0]
 8015d3a:	2c10      	cmp	r4, #16
 8015d3c:	dce4      	bgt.n	8015d08 <_svfprintf_r+0xe9c>
 8015d3e:	607c      	str	r4, [r7, #4]
 8015d40:	18a4      	adds	r4, r4, r2
 8015d42:	000f      	movs	r7, r1
 8015d44:	942e      	str	r4, [sp, #184]	; 0xb8
 8015d46:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d48:	2b07      	cmp	r3, #7
 8015d4a:	ddbe      	ble.n	8015cca <_svfprintf_r+0xe5e>
 8015d4c:	e067      	b.n	8015e1e <_svfprintf_r+0xfb2>
 8015d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	dd00      	ble.n	8015d56 <_svfprintf_r+0xeea>
 8015d54:	e084      	b.n	8015e60 <_svfprintf_r+0xff4>
 8015d56:	4b40      	ldr	r3, [pc, #256]	; (8015e58 <_svfprintf_r+0xfec>)
 8015d58:	603b      	str	r3, [r7, #0]
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	607b      	str	r3, [r7, #4]
 8015d5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d60:	3708      	adds	r7, #8
 8015d62:	3301      	adds	r3, #1
 8015d64:	932e      	str	r3, [sp, #184]	; 0xb8
 8015d66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d68:	9309      	str	r3, [sp, #36]	; 0x24
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d6e:	2b07      	cmp	r3, #7
 8015d70:	dd08      	ble.n	8015d84 <_svfprintf_r+0xf18>
 8015d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d76:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d78:	f002 faf2 	bl	8018360 <__ssprint_r>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d000      	beq.n	8015d82 <_svfprintf_r+0xf16>
 8015d80:	e273      	b.n	801626a <_svfprintf_r+0x13fe>
 8015d82:	af2f      	add	r7, sp, #188	; 0xbc
 8015d84:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d8a:	430b      	orrs	r3, r1
 8015d8c:	2101      	movs	r1, #1
 8015d8e:	4031      	ands	r1, r6
 8015d90:	430b      	orrs	r3, r1
 8015d92:	d09a      	beq.n	8015cca <_svfprintf_r+0xe5e>
 8015d94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015d96:	603b      	str	r3, [r7, #0]
 8015d98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015d9a:	607b      	str	r3, [r7, #4]
 8015d9c:	189a      	adds	r2, r3, r2
 8015d9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015da0:	922e      	str	r2, [sp, #184]	; 0xb8
 8015da2:	9309      	str	r3, [sp, #36]	; 0x24
 8015da4:	3301      	adds	r3, #1
 8015da6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015da8:	3708      	adds	r7, #8
 8015daa:	2b07      	cmp	r3, #7
 8015dac:	dd08      	ble.n	8015dc0 <_svfprintf_r+0xf54>
 8015dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015db0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015db2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015db4:	f002 fad4 	bl	8018360 <__ssprint_r>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d000      	beq.n	8015dbe <_svfprintf_r+0xf52>
 8015dbc:	e255      	b.n	801626a <_svfprintf_r+0x13fe>
 8015dbe:	af2f      	add	r7, sp, #188	; 0xbc
 8015dc0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015dc2:	2c00      	cmp	r4, #0
 8015dc4:	da1a      	bge.n	8015dfc <_svfprintf_r+0xf90>
 8015dc6:	0039      	movs	r1, r7
 8015dc8:	2510      	movs	r5, #16
 8015dca:	4264      	negs	r4, r4
 8015dcc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015dce:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8015dd2:	1c5a      	adds	r2, r3, #1
 8015dd4:	4b21      	ldr	r3, [pc, #132]	; (8015e5c <_svfprintf_r+0xff0>)
 8015dd6:	3708      	adds	r7, #8
 8015dd8:	600b      	str	r3, [r1, #0]
 8015dda:	2c10      	cmp	r4, #16
 8015ddc:	dc29      	bgt.n	8015e32 <_svfprintf_r+0xfc6>
 8015dde:	604c      	str	r4, [r1, #4]
 8015de0:	1824      	adds	r4, r4, r0
 8015de2:	942e      	str	r4, [sp, #184]	; 0xb8
 8015de4:	922d      	str	r2, [sp, #180]	; 0xb4
 8015de6:	2a07      	cmp	r2, #7
 8015de8:	dd08      	ble.n	8015dfc <_svfprintf_r+0xf90>
 8015dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dee:	aa2c      	add	r2, sp, #176	; 0xb0
 8015df0:	f002 fab6 	bl	8018360 <__ssprint_r>
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d000      	beq.n	8015dfa <_svfprintf_r+0xf8e>
 8015df8:	e237      	b.n	801626a <_svfprintf_r+0x13fe>
 8015dfa:	af2f      	add	r7, sp, #188	; 0xbc
 8015dfc:	9b08      	ldr	r3, [sp, #32]
 8015dfe:	603b      	str	r3, [r7, #0]
 8015e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e02:	607b      	str	r3, [r7, #4]
 8015e04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015e06:	001a      	movs	r2, r3
 8015e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e0a:	469c      	mov	ip, r3
 8015e0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e0e:	4462      	add	r2, ip
 8015e10:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e12:	1c5a      	adds	r2, r3, #1
 8015e14:	9308      	str	r3, [sp, #32]
 8015e16:	922d      	str	r2, [sp, #180]	; 0xb4
 8015e18:	2a07      	cmp	r2, #7
 8015e1a:	dc00      	bgt.n	8015e1e <_svfprintf_r+0xfb2>
 8015e1c:	e46b      	b.n	80156f6 <_svfprintf_r+0x88a>
 8015e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e22:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e24:	f002 fa9c 	bl	8018360 <__ssprint_r>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d000      	beq.n	8015e2e <_svfprintf_r+0xfc2>
 8015e2c:	e21d      	b.n	801626a <_svfprintf_r+0x13fe>
 8015e2e:	af2f      	add	r7, sp, #188	; 0xbc
 8015e30:	e74b      	b.n	8015cca <_svfprintf_r+0xe5e>
 8015e32:	3010      	adds	r0, #16
 8015e34:	604d      	str	r5, [r1, #4]
 8015e36:	902e      	str	r0, [sp, #184]	; 0xb8
 8015e38:	922d      	str	r2, [sp, #180]	; 0xb4
 8015e3a:	2a07      	cmp	r2, #7
 8015e3c:	dd08      	ble.n	8015e50 <_svfprintf_r+0xfe4>
 8015e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e42:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e44:	f002 fa8c 	bl	8018360 <__ssprint_r>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d000      	beq.n	8015e4e <_svfprintf_r+0xfe2>
 8015e4c:	e20d      	b.n	801626a <_svfprintf_r+0x13fe>
 8015e4e:	af2f      	add	r7, sp, #188	; 0xbc
 8015e50:	0039      	movs	r1, r7
 8015e52:	3c10      	subs	r4, #16
 8015e54:	e7ba      	b.n	8015dcc <_svfprintf_r+0xf60>
 8015e56:	46c0      	nop			; (mov r8, r8)
 8015e58:	0801d0f2 	.word	0x0801d0f2
 8015e5c:	0801d104 	.word	0x0801d104
 8015e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e62:	002c      	movs	r4, r5
 8015e64:	429d      	cmp	r5, r3
 8015e66:	dd00      	ble.n	8015e6a <_svfprintf_r+0xffe>
 8015e68:	001c      	movs	r4, r3
 8015e6a:	2c00      	cmp	r4, #0
 8015e6c:	dd15      	ble.n	8015e9a <_svfprintf_r+0x102e>
 8015e6e:	9b08      	ldr	r3, [sp, #32]
 8015e70:	607c      	str	r4, [r7, #4]
 8015e72:	603b      	str	r3, [r7, #0]
 8015e74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015e76:	3708      	adds	r7, #8
 8015e78:	18e3      	adds	r3, r4, r3
 8015e7a:	932e      	str	r3, [sp, #184]	; 0xb8
 8015e7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8015e80:	3301      	adds	r3, #1
 8015e82:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e84:	2b07      	cmp	r3, #7
 8015e86:	dd08      	ble.n	8015e9a <_svfprintf_r+0x102e>
 8015e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e8e:	f002 fa67 	bl	8018360 <__ssprint_r>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d000      	beq.n	8015e98 <_svfprintf_r+0x102c>
 8015e96:	e1e8      	b.n	801626a <_svfprintf_r+0x13fe>
 8015e98:	af2f      	add	r7, sp, #188	; 0xbc
 8015e9a:	43e3      	mvns	r3, r4
 8015e9c:	17db      	asrs	r3, r3, #31
 8015e9e:	401c      	ands	r4, r3
 8015ea0:	1b2c      	subs	r4, r5, r4
 8015ea2:	2c00      	cmp	r4, #0
 8015ea4:	dd1a      	ble.n	8015edc <_svfprintf_r+0x1070>
 8015ea6:	0039      	movs	r1, r7
 8015ea8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015eaa:	48ca      	ldr	r0, [pc, #808]	; (80161d4 <_svfprintf_r+0x1368>)
 8015eac:	9309      	str	r3, [sp, #36]	; 0x24
 8015eae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	3108      	adds	r1, #8
 8015eb4:	6038      	str	r0, [r7, #0]
 8015eb6:	2c10      	cmp	r4, #16
 8015eb8:	dd00      	ble.n	8015ebc <_svfprintf_r+0x1050>
 8015eba:	e089      	b.n	8015fd0 <_svfprintf_r+0x1164>
 8015ebc:	607c      	str	r4, [r7, #4]
 8015ebe:	18a4      	adds	r4, r4, r2
 8015ec0:	000f      	movs	r7, r1
 8015ec2:	942e      	str	r4, [sp, #184]	; 0xb8
 8015ec4:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ec6:	2b07      	cmp	r3, #7
 8015ec8:	dd08      	ble.n	8015edc <_svfprintf_r+0x1070>
 8015eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ece:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ed0:	f002 fa46 	bl	8018360 <__ssprint_r>
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	d000      	beq.n	8015eda <_svfprintf_r+0x106e>
 8015ed8:	e1c7      	b.n	801626a <_svfprintf_r+0x13fe>
 8015eda:	af2f      	add	r7, sp, #188	; 0xbc
 8015edc:	9b08      	ldr	r3, [sp, #32]
 8015ede:	195d      	adds	r5, r3, r5
 8015ee0:	0573      	lsls	r3, r6, #21
 8015ee2:	d50d      	bpl.n	8015f00 <_svfprintf_r+0x1094>
 8015ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d000      	beq.n	8015eec <_svfprintf_r+0x1080>
 8015eea:	e084      	b.n	8015ff6 <_svfprintf_r+0x118a>
 8015eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d000      	beq.n	8015ef4 <_svfprintf_r+0x1088>
 8015ef2:	e083      	b.n	8015ffc <_svfprintf_r+0x1190>
 8015ef4:	9b08      	ldr	r3, [sp, #32]
 8015ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ef8:	189b      	adds	r3, r3, r2
 8015efa:	429d      	cmp	r5, r3
 8015efc:	d900      	bls.n	8015f00 <_svfprintf_r+0x1094>
 8015efe:	001d      	movs	r5, r3
 8015f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f04:	4293      	cmp	r3, r2
 8015f06:	db01      	blt.n	8015f0c <_svfprintf_r+0x10a0>
 8015f08:	07f3      	lsls	r3, r6, #31
 8015f0a:	d518      	bpl.n	8015f3e <_svfprintf_r+0x10d2>
 8015f0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015f10:	4694      	mov	ip, r2
 8015f12:	603b      	str	r3, [r7, #0]
 8015f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015f16:	607b      	str	r3, [r7, #4]
 8015f18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015f1a:	3708      	adds	r7, #8
 8015f1c:	4463      	add	r3, ip
 8015f1e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015f20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f22:	9309      	str	r3, [sp, #36]	; 0x24
 8015f24:	3301      	adds	r3, #1
 8015f26:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f28:	2b07      	cmp	r3, #7
 8015f2a:	dd08      	ble.n	8015f3e <_svfprintf_r+0x10d2>
 8015f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f30:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f32:	f002 fa15 	bl	8018360 <__ssprint_r>
 8015f36:	2800      	cmp	r0, #0
 8015f38:	d000      	beq.n	8015f3c <_svfprintf_r+0x10d0>
 8015f3a:	e196      	b.n	801626a <_svfprintf_r+0x13fe>
 8015f3c:	af2f      	add	r7, sp, #188	; 0xbc
 8015f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f40:	9808      	ldr	r0, [sp, #32]
 8015f42:	469c      	mov	ip, r3
 8015f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015f46:	4460      	add	r0, ip
 8015f48:	1b40      	subs	r0, r0, r5
 8015f4a:	1a9c      	subs	r4, r3, r2
 8015f4c:	4284      	cmp	r4, r0
 8015f4e:	dd00      	ble.n	8015f52 <_svfprintf_r+0x10e6>
 8015f50:	0004      	movs	r4, r0
 8015f52:	2c00      	cmp	r4, #0
 8015f54:	dd14      	ble.n	8015f80 <_svfprintf_r+0x1114>
 8015f56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015f58:	603d      	str	r5, [r7, #0]
 8015f5a:	191b      	adds	r3, r3, r4
 8015f5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8015f5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f60:	607c      	str	r4, [r7, #4]
 8015f62:	9308      	str	r3, [sp, #32]
 8015f64:	3301      	adds	r3, #1
 8015f66:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f68:	3708      	adds	r7, #8
 8015f6a:	2b07      	cmp	r3, #7
 8015f6c:	dd08      	ble.n	8015f80 <_svfprintf_r+0x1114>
 8015f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f72:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f74:	f002 f9f4 	bl	8018360 <__ssprint_r>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d000      	beq.n	8015f7e <_svfprintf_r+0x1112>
 8015f7c:	e175      	b.n	801626a <_svfprintf_r+0x13fe>
 8015f7e:	af2f      	add	r7, sp, #188	; 0xbc
 8015f80:	43e3      	mvns	r3, r4
 8015f82:	17db      	asrs	r3, r3, #31
 8015f84:	401c      	ands	r4, r3
 8015f86:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f8a:	2510      	movs	r5, #16
 8015f8c:	1a9b      	subs	r3, r3, r2
 8015f8e:	1b1c      	subs	r4, r3, r4
 8015f90:	2c00      	cmp	r4, #0
 8015f92:	dc00      	bgt.n	8015f96 <_svfprintf_r+0x112a>
 8015f94:	e699      	b.n	8015cca <_svfprintf_r+0xe5e>
 8015f96:	0039      	movs	r1, r7
 8015f98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f9a:	488e      	ldr	r0, [pc, #568]	; (80161d4 <_svfprintf_r+0x1368>)
 8015f9c:	9308      	str	r3, [sp, #32]
 8015f9e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	3108      	adds	r1, #8
 8015fa4:	6038      	str	r0, [r7, #0]
 8015fa6:	2c10      	cmp	r4, #16
 8015fa8:	dc00      	bgt.n	8015fac <_svfprintf_r+0x1140>
 8015faa:	e6c8      	b.n	8015d3e <_svfprintf_r+0xed2>
 8015fac:	3210      	adds	r2, #16
 8015fae:	607d      	str	r5, [r7, #4]
 8015fb0:	922e      	str	r2, [sp, #184]	; 0xb8
 8015fb2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fb4:	2b07      	cmp	r3, #7
 8015fb6:	dd08      	ble.n	8015fca <_svfprintf_r+0x115e>
 8015fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fbc:	aa2c      	add	r2, sp, #176	; 0xb0
 8015fbe:	f002 f9cf 	bl	8018360 <__ssprint_r>
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	d000      	beq.n	8015fc8 <_svfprintf_r+0x115c>
 8015fc6:	e150      	b.n	801626a <_svfprintf_r+0x13fe>
 8015fc8:	a92f      	add	r1, sp, #188	; 0xbc
 8015fca:	000f      	movs	r7, r1
 8015fcc:	3c10      	subs	r4, #16
 8015fce:	e7e2      	b.n	8015f96 <_svfprintf_r+0x112a>
 8015fd0:	2010      	movs	r0, #16
 8015fd2:	1812      	adds	r2, r2, r0
 8015fd4:	6078      	str	r0, [r7, #4]
 8015fd6:	922e      	str	r2, [sp, #184]	; 0xb8
 8015fd8:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fda:	2b07      	cmp	r3, #7
 8015fdc:	dd08      	ble.n	8015ff0 <_svfprintf_r+0x1184>
 8015fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fe0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fe2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015fe4:	f002 f9bc 	bl	8018360 <__ssprint_r>
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d000      	beq.n	8015fee <_svfprintf_r+0x1182>
 8015fec:	e13d      	b.n	801626a <_svfprintf_r+0x13fe>
 8015fee:	a92f      	add	r1, sp, #188	; 0xbc
 8015ff0:	000f      	movs	r7, r1
 8015ff2:	3c10      	subs	r4, #16
 8015ff4:	e757      	b.n	8015ea6 <_svfprintf_r+0x103a>
 8015ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d061      	beq.n	80160c0 <_svfprintf_r+0x1254>
 8015ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ffe:	3b01      	subs	r3, #1
 8016000:	9310      	str	r3, [sp, #64]	; 0x40
 8016002:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016006:	4694      	mov	ip, r2
 8016008:	603b      	str	r3, [r7, #0]
 801600a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801600c:	607b      	str	r3, [r7, #4]
 801600e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016010:	3708      	adds	r7, #8
 8016012:	4463      	add	r3, ip
 8016014:	932e      	str	r3, [sp, #184]	; 0xb8
 8016016:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016018:	9309      	str	r3, [sp, #36]	; 0x24
 801601a:	3301      	adds	r3, #1
 801601c:	932d      	str	r3, [sp, #180]	; 0xb4
 801601e:	2b07      	cmp	r3, #7
 8016020:	dd08      	ble.n	8016034 <_svfprintf_r+0x11c8>
 8016022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016024:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016026:	aa2c      	add	r2, sp, #176	; 0xb0
 8016028:	f002 f99a 	bl	8018360 <__ssprint_r>
 801602c:	2800      	cmp	r0, #0
 801602e:	d000      	beq.n	8016032 <_svfprintf_r+0x11c6>
 8016030:	e11b      	b.n	801626a <_svfprintf_r+0x13fe>
 8016032:	af2f      	add	r7, sp, #188	; 0xbc
 8016034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016036:	9b08      	ldr	r3, [sp, #32]
 8016038:	189b      	adds	r3, r3, r2
 801603a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801603c:	1b5b      	subs	r3, r3, r5
 801603e:	7814      	ldrb	r4, [r2, #0]
 8016040:	429c      	cmp	r4, r3
 8016042:	dd00      	ble.n	8016046 <_svfprintf_r+0x11da>
 8016044:	001c      	movs	r4, r3
 8016046:	2c00      	cmp	r4, #0
 8016048:	dd14      	ble.n	8016074 <_svfprintf_r+0x1208>
 801604a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801604c:	603d      	str	r5, [r7, #0]
 801604e:	18e3      	adds	r3, r4, r3
 8016050:	932e      	str	r3, [sp, #184]	; 0xb8
 8016052:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016054:	607c      	str	r4, [r7, #4]
 8016056:	9309      	str	r3, [sp, #36]	; 0x24
 8016058:	3301      	adds	r3, #1
 801605a:	932d      	str	r3, [sp, #180]	; 0xb4
 801605c:	3708      	adds	r7, #8
 801605e:	2b07      	cmp	r3, #7
 8016060:	dd08      	ble.n	8016074 <_svfprintf_r+0x1208>
 8016062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016064:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016066:	aa2c      	add	r2, sp, #176	; 0xb0
 8016068:	f002 f97a 	bl	8018360 <__ssprint_r>
 801606c:	2800      	cmp	r0, #0
 801606e:	d000      	beq.n	8016072 <_svfprintf_r+0x1206>
 8016070:	e0fb      	b.n	801626a <_svfprintf_r+0x13fe>
 8016072:	af2f      	add	r7, sp, #188	; 0xbc
 8016074:	43e3      	mvns	r3, r4
 8016076:	17db      	asrs	r3, r3, #31
 8016078:	401c      	ands	r4, r3
 801607a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	1b1c      	subs	r4, r3, r4
 8016080:	2c00      	cmp	r4, #0
 8016082:	dd19      	ble.n	80160b8 <_svfprintf_r+0x124c>
 8016084:	0039      	movs	r1, r7
 8016086:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016088:	4852      	ldr	r0, [pc, #328]	; (80161d4 <_svfprintf_r+0x1368>)
 801608a:	9309      	str	r3, [sp, #36]	; 0x24
 801608c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801608e:	3301      	adds	r3, #1
 8016090:	3108      	adds	r1, #8
 8016092:	6038      	str	r0, [r7, #0]
 8016094:	2c10      	cmp	r4, #16
 8016096:	dc1a      	bgt.n	80160ce <_svfprintf_r+0x1262>
 8016098:	607c      	str	r4, [r7, #4]
 801609a:	1914      	adds	r4, r2, r4
 801609c:	000f      	movs	r7, r1
 801609e:	942e      	str	r4, [sp, #184]	; 0xb8
 80160a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80160a2:	2b07      	cmp	r3, #7
 80160a4:	dd08      	ble.n	80160b8 <_svfprintf_r+0x124c>
 80160a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80160ac:	f002 f958 	bl	8018360 <__ssprint_r>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d000      	beq.n	80160b6 <_svfprintf_r+0x124a>
 80160b4:	e0d9      	b.n	801626a <_svfprintf_r+0x13fe>
 80160b6:	af2f      	add	r7, sp, #188	; 0xbc
 80160b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	18ed      	adds	r5, r5, r3
 80160be:	e711      	b.n	8015ee4 <_svfprintf_r+0x1078>
 80160c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80160c2:	3b01      	subs	r3, #1
 80160c4:	9312      	str	r3, [sp, #72]	; 0x48
 80160c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160c8:	3b01      	subs	r3, #1
 80160ca:	9311      	str	r3, [sp, #68]	; 0x44
 80160cc:	e799      	b.n	8016002 <_svfprintf_r+0x1196>
 80160ce:	2010      	movs	r0, #16
 80160d0:	1812      	adds	r2, r2, r0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	922e      	str	r2, [sp, #184]	; 0xb8
 80160d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80160d8:	2b07      	cmp	r3, #7
 80160da:	dd08      	ble.n	80160ee <_svfprintf_r+0x1282>
 80160dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80160e2:	f002 f93d 	bl	8018360 <__ssprint_r>
 80160e6:	2800      	cmp	r0, #0
 80160e8:	d000      	beq.n	80160ec <_svfprintf_r+0x1280>
 80160ea:	e0be      	b.n	801626a <_svfprintf_r+0x13fe>
 80160ec:	a92f      	add	r1, sp, #188	; 0xbc
 80160ee:	000f      	movs	r7, r1
 80160f0:	3c10      	subs	r4, #16
 80160f2:	e7c7      	b.n	8016084 <_svfprintf_r+0x1218>
 80160f4:	003c      	movs	r4, r7
 80160f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160f8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80160fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160fc:	9309      	str	r3, [sp, #36]	; 0x24
 80160fe:	3101      	adds	r1, #1
 8016100:	3301      	adds	r3, #1
 8016102:	3408      	adds	r4, #8
 8016104:	2a01      	cmp	r2, #1
 8016106:	dc03      	bgt.n	8016110 <_svfprintf_r+0x12a4>
 8016108:	2201      	movs	r2, #1
 801610a:	4216      	tst	r6, r2
 801610c:	d100      	bne.n	8016110 <_svfprintf_r+0x12a4>
 801610e:	e089      	b.n	8016224 <_svfprintf_r+0x13b8>
 8016110:	9a08      	ldr	r2, [sp, #32]
 8016112:	912e      	str	r1, [sp, #184]	; 0xb8
 8016114:	603a      	str	r2, [r7, #0]
 8016116:	2201      	movs	r2, #1
 8016118:	932d      	str	r3, [sp, #180]	; 0xb4
 801611a:	607a      	str	r2, [r7, #4]
 801611c:	2b07      	cmp	r3, #7
 801611e:	dd08      	ble.n	8016132 <_svfprintf_r+0x12c6>
 8016120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016124:	aa2c      	add	r2, sp, #176	; 0xb0
 8016126:	f002 f91b 	bl	8018360 <__ssprint_r>
 801612a:	2800      	cmp	r0, #0
 801612c:	d000      	beq.n	8016130 <_svfprintf_r+0x12c4>
 801612e:	e09c      	b.n	801626a <_svfprintf_r+0x13fe>
 8016130:	ac2f      	add	r4, sp, #188	; 0xbc
 8016132:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016134:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016136:	4694      	mov	ip, r2
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801613c:	6063      	str	r3, [r4, #4]
 801613e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016140:	3408      	adds	r4, #8
 8016142:	4463      	add	r3, ip
 8016144:	932e      	str	r3, [sp, #184]	; 0xb8
 8016146:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016148:	9309      	str	r3, [sp, #36]	; 0x24
 801614a:	3301      	adds	r3, #1
 801614c:	932d      	str	r3, [sp, #180]	; 0xb4
 801614e:	2b07      	cmp	r3, #7
 8016150:	dd08      	ble.n	8016164 <_svfprintf_r+0x12f8>
 8016152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016156:	aa2c      	add	r2, sp, #176	; 0xb0
 8016158:	f002 f902 	bl	8018360 <__ssprint_r>
 801615c:	2800      	cmp	r0, #0
 801615e:	d000      	beq.n	8016162 <_svfprintf_r+0x12f6>
 8016160:	e083      	b.n	801626a <_svfprintf_r+0x13fe>
 8016162:	ac2f      	add	r4, sp, #188	; 0xbc
 8016164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016166:	2200      	movs	r2, #0
 8016168:	9814      	ldr	r0, [sp, #80]	; 0x50
 801616a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801616c:	1e5d      	subs	r5, r3, #1
 801616e:	2300      	movs	r3, #0
 8016170:	f7ea f974 	bl	800045c <__aeabi_dcmpeq>
 8016174:	2800      	cmp	r0, #0
 8016176:	d12f      	bne.n	80161d8 <_svfprintf_r+0x136c>
 8016178:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801617a:	9808      	ldr	r0, [sp, #32]
 801617c:	9309      	str	r3, [sp, #36]	; 0x24
 801617e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016182:	1c59      	adds	r1, r3, #1
 8016184:	930f      	str	r3, [sp, #60]	; 0x3c
 8016186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016188:	3001      	adds	r0, #1
 801618a:	3b01      	subs	r3, #1
 801618c:	189b      	adds	r3, r3, r2
 801618e:	6020      	str	r0, [r4, #0]
 8016190:	6065      	str	r5, [r4, #4]
 8016192:	932e      	str	r3, [sp, #184]	; 0xb8
 8016194:	912d      	str	r1, [sp, #180]	; 0xb4
 8016196:	3408      	adds	r4, #8
 8016198:	2907      	cmp	r1, #7
 801619a:	dd07      	ble.n	80161ac <_svfprintf_r+0x1340>
 801619c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801619e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80161a2:	f002 f8dd 	bl	8018360 <__ssprint_r>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d15f      	bne.n	801626a <_svfprintf_r+0x13fe>
 80161aa:	ac2f      	add	r4, sp, #188	; 0xbc
 80161ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80161ae:	ab28      	add	r3, sp, #160	; 0xa0
 80161b0:	4694      	mov	ip, r2
 80161b2:	6023      	str	r3, [r4, #0]
 80161b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80161b6:	6063      	str	r3, [r4, #4]
 80161b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161ba:	4463      	add	r3, ip
 80161bc:	932e      	str	r3, [sp, #184]	; 0xb8
 80161be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161c0:	9308      	str	r3, [sp, #32]
 80161c2:	3301      	adds	r3, #1
 80161c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80161c6:	2b07      	cmp	r3, #7
 80161c8:	dd00      	ble.n	80161cc <_svfprintf_r+0x1360>
 80161ca:	e628      	b.n	8015e1e <_svfprintf_r+0xfb2>
 80161cc:	3408      	adds	r4, #8
 80161ce:	0027      	movs	r7, r4
 80161d0:	e57b      	b.n	8015cca <_svfprintf_r+0xe5e>
 80161d2:	46c0      	nop			; (mov r8, r8)
 80161d4:	0801d104 	.word	0x0801d104
 80161d8:	2710      	movs	r7, #16
 80161da:	2d00      	cmp	r5, #0
 80161dc:	dde6      	ble.n	80161ac <_svfprintf_r+0x1340>
 80161de:	0021      	movs	r1, r4
 80161e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161e2:	4857      	ldr	r0, [pc, #348]	; (8016340 <_svfprintf_r+0x14d4>)
 80161e4:	9308      	str	r3, [sp, #32]
 80161e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80161e8:	3301      	adds	r3, #1
 80161ea:	3108      	adds	r1, #8
 80161ec:	6020      	str	r0, [r4, #0]
 80161ee:	2d10      	cmp	r5, #16
 80161f0:	dc07      	bgt.n	8016202 <_svfprintf_r+0x1396>
 80161f2:	6065      	str	r5, [r4, #4]
 80161f4:	000c      	movs	r4, r1
 80161f6:	18ad      	adds	r5, r5, r2
 80161f8:	952e      	str	r5, [sp, #184]	; 0xb8
 80161fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80161fc:	2b07      	cmp	r3, #7
 80161fe:	ddd5      	ble.n	80161ac <_svfprintf_r+0x1340>
 8016200:	e7cc      	b.n	801619c <_svfprintf_r+0x1330>
 8016202:	3210      	adds	r2, #16
 8016204:	6067      	str	r7, [r4, #4]
 8016206:	922e      	str	r2, [sp, #184]	; 0xb8
 8016208:	932d      	str	r3, [sp, #180]	; 0xb4
 801620a:	2b07      	cmp	r3, #7
 801620c:	dd07      	ble.n	801621e <_svfprintf_r+0x13b2>
 801620e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016210:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016212:	aa2c      	add	r2, sp, #176	; 0xb0
 8016214:	f002 f8a4 	bl	8018360 <__ssprint_r>
 8016218:	2800      	cmp	r0, #0
 801621a:	d126      	bne.n	801626a <_svfprintf_r+0x13fe>
 801621c:	a92f      	add	r1, sp, #188	; 0xbc
 801621e:	000c      	movs	r4, r1
 8016220:	3d10      	subs	r5, #16
 8016222:	e7dc      	b.n	80161de <_svfprintf_r+0x1372>
 8016224:	9808      	ldr	r0, [sp, #32]
 8016226:	912e      	str	r1, [sp, #184]	; 0xb8
 8016228:	c705      	stmia	r7!, {r0, r2}
 801622a:	932d      	str	r3, [sp, #180]	; 0xb4
 801622c:	e7e6      	b.n	80161fc <_svfprintf_r+0x1390>
 801622e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016230:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016232:	2510      	movs	r5, #16
 8016234:	1a9c      	subs	r4, r3, r2
 8016236:	2c00      	cmp	r4, #0
 8016238:	dc00      	bgt.n	801623c <_svfprintf_r+0x13d0>
 801623a:	e549      	b.n	8015cd0 <_svfprintf_r+0xe64>
 801623c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801623e:	4941      	ldr	r1, [pc, #260]	; (8016344 <_svfprintf_r+0x14d8>)
 8016240:	9308      	str	r3, [sp, #32]
 8016242:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016244:	3301      	adds	r3, #1
 8016246:	6039      	str	r1, [r7, #0]
 8016248:	2c10      	cmp	r4, #16
 801624a:	dc19      	bgt.n	8016280 <_svfprintf_r+0x1414>
 801624c:	607c      	str	r4, [r7, #4]
 801624e:	18a4      	adds	r4, r4, r2
 8016250:	942e      	str	r4, [sp, #184]	; 0xb8
 8016252:	932d      	str	r3, [sp, #180]	; 0xb4
 8016254:	2b07      	cmp	r3, #7
 8016256:	dc00      	bgt.n	801625a <_svfprintf_r+0x13ee>
 8016258:	e53a      	b.n	8015cd0 <_svfprintf_r+0xe64>
 801625a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801625c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801625e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016260:	f002 f87e 	bl	8018360 <__ssprint_r>
 8016264:	2800      	cmp	r0, #0
 8016266:	d100      	bne.n	801626a <_svfprintf_r+0x13fe>
 8016268:	e532      	b.n	8015cd0 <_svfprintf_r+0xe64>
 801626a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801626c:	2b00      	cmp	r3, #0
 801626e:	d101      	bne.n	8016274 <_svfprintf_r+0x1408>
 8016270:	f7ff f827 	bl	80152c2 <_svfprintf_r+0x456>
 8016274:	0019      	movs	r1, r3
 8016276:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016278:	f000 ff5a 	bl	8017130 <_free_r>
 801627c:	f7ff f821 	bl	80152c2 <_svfprintf_r+0x456>
 8016280:	3210      	adds	r2, #16
 8016282:	607d      	str	r5, [r7, #4]
 8016284:	922e      	str	r2, [sp, #184]	; 0xb8
 8016286:	932d      	str	r3, [sp, #180]	; 0xb4
 8016288:	3708      	adds	r7, #8
 801628a:	2b07      	cmp	r3, #7
 801628c:	dd07      	ble.n	801629e <_svfprintf_r+0x1432>
 801628e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016290:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016292:	aa2c      	add	r2, sp, #176	; 0xb0
 8016294:	f002 f864 	bl	8018360 <__ssprint_r>
 8016298:	2800      	cmp	r0, #0
 801629a:	d1e6      	bne.n	801626a <_svfprintf_r+0x13fe>
 801629c:	af2f      	add	r7, sp, #188	; 0xbc
 801629e:	3c10      	subs	r4, #16
 80162a0:	e7cc      	b.n	801623c <_svfprintf_r+0x13d0>
 80162a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80162a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162a6:	f000 ff43 	bl	8017130 <_free_r>
 80162aa:	e52b      	b.n	8015d04 <_svfprintf_r+0xe98>
 80162ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80162ae:	9306      	str	r3, [sp, #24]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <_svfprintf_r+0x144c>
 80162b4:	f7ff f805 	bl	80152c2 <_svfprintf_r+0x456>
 80162b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80162be:	f002 f84f 	bl	8018360 <__ssprint_r>
 80162c2:	f7fe fffe 	bl	80152c2 <_svfprintf_r+0x456>
 80162c6:	0035      	movs	r5, r6
 80162c8:	2a00      	cmp	r2, #0
 80162ca:	d101      	bne.n	80162d0 <_svfprintf_r+0x1464>
 80162cc:	f7fe ff6d 	bl	80151aa <_svfprintf_r+0x33e>
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d101      	bne.n	80162d8 <_svfprintf_r+0x146c>
 80162d4:	f7ff fbe7 	bl	8015aa6 <_svfprintf_r+0xc3a>
 80162d8:	2b02      	cmp	r3, #2
 80162da:	d100      	bne.n	80162de <_svfprintf_r+0x1472>
 80162dc:	e437      	b.n	8015b4e <_svfprintf_r+0xce2>
 80162de:	2607      	movs	r6, #7
 80162e0:	ab58      	add	r3, sp, #352	; 0x160
 80162e2:	9308      	str	r3, [sp, #32]
 80162e4:	9a08      	ldr	r2, [sp, #32]
 80162e6:	0013      	movs	r3, r2
 80162e8:	3b01      	subs	r3, #1
 80162ea:	9308      	str	r3, [sp, #32]
 80162ec:	9b06      	ldr	r3, [sp, #24]
 80162ee:	9908      	ldr	r1, [sp, #32]
 80162f0:	4033      	ands	r3, r6
 80162f2:	3330      	adds	r3, #48	; 0x30
 80162f4:	700b      	strb	r3, [r1, #0]
 80162f6:	9907      	ldr	r1, [sp, #28]
 80162f8:	074c      	lsls	r4, r1, #29
 80162fa:	9906      	ldr	r1, [sp, #24]
 80162fc:	08c8      	lsrs	r0, r1, #3
 80162fe:	9907      	ldr	r1, [sp, #28]
 8016300:	4304      	orrs	r4, r0
 8016302:	08c9      	lsrs	r1, r1, #3
 8016304:	9107      	str	r1, [sp, #28]
 8016306:	0021      	movs	r1, r4
 8016308:	9807      	ldr	r0, [sp, #28]
 801630a:	9406      	str	r4, [sp, #24]
 801630c:	4301      	orrs	r1, r0
 801630e:	d1e9      	bne.n	80162e4 <_svfprintf_r+0x1478>
 8016310:	07e9      	lsls	r1, r5, #31
 8016312:	d507      	bpl.n	8016324 <_svfprintf_r+0x14b8>
 8016314:	2b30      	cmp	r3, #48	; 0x30
 8016316:	d005      	beq.n	8016324 <_svfprintf_r+0x14b8>
 8016318:	2330      	movs	r3, #48	; 0x30
 801631a:	9808      	ldr	r0, [sp, #32]
 801631c:	3801      	subs	r0, #1
 801631e:	7003      	strb	r3, [r0, #0]
 8016320:	1e93      	subs	r3, r2, #2
 8016322:	9308      	str	r3, [sp, #32]
 8016324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016326:	9a08      	ldr	r2, [sp, #32]
 8016328:	9319      	str	r3, [sp, #100]	; 0x64
 801632a:	ab58      	add	r3, sp, #352	; 0x160
 801632c:	1a9b      	subs	r3, r3, r2
 801632e:	9309      	str	r3, [sp, #36]	; 0x24
 8016330:	2300      	movs	r3, #0
 8016332:	002e      	movs	r6, r5
 8016334:	930c      	str	r3, [sp, #48]	; 0x30
 8016336:	001d      	movs	r5, r3
 8016338:	9310      	str	r3, [sp, #64]	; 0x40
 801633a:	9311      	str	r3, [sp, #68]	; 0x44
 801633c:	f7ff f8f7 	bl	801552e <_svfprintf_r+0x6c2>
 8016340:	0801d104 	.word	0x0801d104
 8016344:	0801d0f4 	.word	0x0801d0f4

08016348 <sysconf>:
 8016348:	2380      	movs	r3, #128	; 0x80
 801634a:	b510      	push	{r4, lr}
 801634c:	015b      	lsls	r3, r3, #5
 801634e:	2808      	cmp	r0, #8
 8016350:	d004      	beq.n	801635c <sysconf+0x14>
 8016352:	f7fd f9bb 	bl	80136cc <__errno>
 8016356:	2316      	movs	r3, #22
 8016358:	6003      	str	r3, [r0, #0]
 801635a:	3b17      	subs	r3, #23
 801635c:	0018      	movs	r0, r3
 801635e:	bd10      	pop	{r4, pc}

08016360 <register_fini>:
 8016360:	4b03      	ldr	r3, [pc, #12]	; (8016370 <register_fini+0x10>)
 8016362:	b510      	push	{r4, lr}
 8016364:	2b00      	cmp	r3, #0
 8016366:	d002      	beq.n	801636e <register_fini+0xe>
 8016368:	4802      	ldr	r0, [pc, #8]	; (8016374 <register_fini+0x14>)
 801636a:	f000 f805 	bl	8016378 <atexit>
 801636e:	bd10      	pop	{r4, pc}
 8016370:	00000000 	.word	0x00000000
 8016374:	08017061 	.word	0x08017061

08016378 <atexit>:
 8016378:	2300      	movs	r3, #0
 801637a:	b510      	push	{r4, lr}
 801637c:	0001      	movs	r1, r0
 801637e:	001a      	movs	r2, r3
 8016380:	0018      	movs	r0, r3
 8016382:	f002 f87b 	bl	801847c <__register_exitproc>
 8016386:	bd10      	pop	{r4, pc}

08016388 <quorem>:
 8016388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801638a:	0006      	movs	r6, r0
 801638c:	690b      	ldr	r3, [r1, #16]
 801638e:	6932      	ldr	r2, [r6, #16]
 8016390:	b087      	sub	sp, #28
 8016392:	2000      	movs	r0, #0
 8016394:	9103      	str	r1, [sp, #12]
 8016396:	429a      	cmp	r2, r3
 8016398:	db65      	blt.n	8016466 <quorem+0xde>
 801639a:	3b01      	subs	r3, #1
 801639c:	009c      	lsls	r4, r3, #2
 801639e:	9300      	str	r3, [sp, #0]
 80163a0:	000b      	movs	r3, r1
 80163a2:	3314      	adds	r3, #20
 80163a4:	9305      	str	r3, [sp, #20]
 80163a6:	191b      	adds	r3, r3, r4
 80163a8:	9304      	str	r3, [sp, #16]
 80163aa:	0033      	movs	r3, r6
 80163ac:	3314      	adds	r3, #20
 80163ae:	9302      	str	r3, [sp, #8]
 80163b0:	191c      	adds	r4, r3, r4
 80163b2:	9b04      	ldr	r3, [sp, #16]
 80163b4:	6827      	ldr	r7, [r4, #0]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	0038      	movs	r0, r7
 80163ba:	1c5d      	adds	r5, r3, #1
 80163bc:	0029      	movs	r1, r5
 80163be:	9301      	str	r3, [sp, #4]
 80163c0:	f7e9 fec6 	bl	8000150 <__udivsi3>
 80163c4:	9001      	str	r0, [sp, #4]
 80163c6:	42af      	cmp	r7, r5
 80163c8:	d324      	bcc.n	8016414 <quorem+0x8c>
 80163ca:	2500      	movs	r5, #0
 80163cc:	46ac      	mov	ip, r5
 80163ce:	9802      	ldr	r0, [sp, #8]
 80163d0:	9f05      	ldr	r7, [sp, #20]
 80163d2:	cf08      	ldmia	r7!, {r3}
 80163d4:	9a01      	ldr	r2, [sp, #4]
 80163d6:	b299      	uxth	r1, r3
 80163d8:	4351      	muls	r1, r2
 80163da:	0c1b      	lsrs	r3, r3, #16
 80163dc:	4353      	muls	r3, r2
 80163de:	1949      	adds	r1, r1, r5
 80163e0:	0c0a      	lsrs	r2, r1, #16
 80163e2:	189b      	adds	r3, r3, r2
 80163e4:	6802      	ldr	r2, [r0, #0]
 80163e6:	b289      	uxth	r1, r1
 80163e8:	b292      	uxth	r2, r2
 80163ea:	4462      	add	r2, ip
 80163ec:	1a52      	subs	r2, r2, r1
 80163ee:	6801      	ldr	r1, [r0, #0]
 80163f0:	0c1d      	lsrs	r5, r3, #16
 80163f2:	0c09      	lsrs	r1, r1, #16
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	1acb      	subs	r3, r1, r3
 80163f8:	1411      	asrs	r1, r2, #16
 80163fa:	185b      	adds	r3, r3, r1
 80163fc:	1419      	asrs	r1, r3, #16
 80163fe:	b292      	uxth	r2, r2
 8016400:	041b      	lsls	r3, r3, #16
 8016402:	431a      	orrs	r2, r3
 8016404:	9b04      	ldr	r3, [sp, #16]
 8016406:	468c      	mov	ip, r1
 8016408:	c004      	stmia	r0!, {r2}
 801640a:	42bb      	cmp	r3, r7
 801640c:	d2e1      	bcs.n	80163d2 <quorem+0x4a>
 801640e:	6823      	ldr	r3, [r4, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d030      	beq.n	8016476 <quorem+0xee>
 8016414:	0030      	movs	r0, r6
 8016416:	9903      	ldr	r1, [sp, #12]
 8016418:	f001 fd70 	bl	8017efc <__mcmp>
 801641c:	2800      	cmp	r0, #0
 801641e:	db21      	blt.n	8016464 <quorem+0xdc>
 8016420:	0030      	movs	r0, r6
 8016422:	2400      	movs	r4, #0
 8016424:	9b01      	ldr	r3, [sp, #4]
 8016426:	9903      	ldr	r1, [sp, #12]
 8016428:	3301      	adds	r3, #1
 801642a:	9301      	str	r3, [sp, #4]
 801642c:	3014      	adds	r0, #20
 801642e:	3114      	adds	r1, #20
 8016430:	6803      	ldr	r3, [r0, #0]
 8016432:	c920      	ldmia	r1!, {r5}
 8016434:	b29a      	uxth	r2, r3
 8016436:	1914      	adds	r4, r2, r4
 8016438:	b2aa      	uxth	r2, r5
 801643a:	1aa2      	subs	r2, r4, r2
 801643c:	0c1b      	lsrs	r3, r3, #16
 801643e:	0c2d      	lsrs	r5, r5, #16
 8016440:	1414      	asrs	r4, r2, #16
 8016442:	1b5b      	subs	r3, r3, r5
 8016444:	191b      	adds	r3, r3, r4
 8016446:	141c      	asrs	r4, r3, #16
 8016448:	b292      	uxth	r2, r2
 801644a:	041b      	lsls	r3, r3, #16
 801644c:	4313      	orrs	r3, r2
 801644e:	c008      	stmia	r0!, {r3}
 8016450:	9b04      	ldr	r3, [sp, #16]
 8016452:	428b      	cmp	r3, r1
 8016454:	d2ec      	bcs.n	8016430 <quorem+0xa8>
 8016456:	9b00      	ldr	r3, [sp, #0]
 8016458:	9a02      	ldr	r2, [sp, #8]
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	18d3      	adds	r3, r2, r3
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	2a00      	cmp	r2, #0
 8016462:	d015      	beq.n	8016490 <quorem+0x108>
 8016464:	9801      	ldr	r0, [sp, #4]
 8016466:	b007      	add	sp, #28
 8016468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646a:	6823      	ldr	r3, [r4, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d106      	bne.n	801647e <quorem+0xf6>
 8016470:	9b00      	ldr	r3, [sp, #0]
 8016472:	3b01      	subs	r3, #1
 8016474:	9300      	str	r3, [sp, #0]
 8016476:	9b02      	ldr	r3, [sp, #8]
 8016478:	3c04      	subs	r4, #4
 801647a:	42a3      	cmp	r3, r4
 801647c:	d3f5      	bcc.n	801646a <quorem+0xe2>
 801647e:	9b00      	ldr	r3, [sp, #0]
 8016480:	6133      	str	r3, [r6, #16]
 8016482:	e7c7      	b.n	8016414 <quorem+0x8c>
 8016484:	681a      	ldr	r2, [r3, #0]
 8016486:	2a00      	cmp	r2, #0
 8016488:	d106      	bne.n	8016498 <quorem+0x110>
 801648a:	9a00      	ldr	r2, [sp, #0]
 801648c:	3a01      	subs	r2, #1
 801648e:	9200      	str	r2, [sp, #0]
 8016490:	9a02      	ldr	r2, [sp, #8]
 8016492:	3b04      	subs	r3, #4
 8016494:	429a      	cmp	r2, r3
 8016496:	d3f5      	bcc.n	8016484 <quorem+0xfc>
 8016498:	9b00      	ldr	r3, [sp, #0]
 801649a:	6133      	str	r3, [r6, #16]
 801649c:	e7e2      	b.n	8016464 <quorem+0xdc>
	...

080164a0 <_dtoa_r>:
 80164a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a2:	0014      	movs	r4, r2
 80164a4:	001d      	movs	r5, r3
 80164a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80164a8:	b09d      	sub	sp, #116	; 0x74
 80164aa:	9408      	str	r4, [sp, #32]
 80164ac:	9509      	str	r5, [sp, #36]	; 0x24
 80164ae:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80164b0:	9004      	str	r0, [sp, #16]
 80164b2:	2900      	cmp	r1, #0
 80164b4:	d009      	beq.n	80164ca <_dtoa_r+0x2a>
 80164b6:	2301      	movs	r3, #1
 80164b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80164ba:	4093      	lsls	r3, r2
 80164bc:	604a      	str	r2, [r1, #4]
 80164be:	608b      	str	r3, [r1, #8]
 80164c0:	f001 fac4 	bl	8017a4c <_Bfree>
 80164c4:	2300      	movs	r3, #0
 80164c6:	9a04      	ldr	r2, [sp, #16]
 80164c8:	6413      	str	r3, [r2, #64]	; 0x40
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	da1e      	bge.n	801650c <_dtoa_r+0x6c>
 80164ce:	2301      	movs	r3, #1
 80164d0:	6033      	str	r3, [r6, #0]
 80164d2:	006b      	lsls	r3, r5, #1
 80164d4:	085b      	lsrs	r3, r3, #1
 80164d6:	9309      	str	r3, [sp, #36]	; 0x24
 80164d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80164da:	4bb6      	ldr	r3, [pc, #728]	; (80167b4 <_dtoa_r+0x314>)
 80164dc:	4ab5      	ldr	r2, [pc, #724]	; (80167b4 <_dtoa_r+0x314>)
 80164de:	403b      	ands	r3, r7
 80164e0:	4293      	cmp	r3, r2
 80164e2:	d116      	bne.n	8016512 <_dtoa_r+0x72>
 80164e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80164e6:	4bb4      	ldr	r3, [pc, #720]	; (80167b8 <_dtoa_r+0x318>)
 80164e8:	6013      	str	r3, [r2, #0]
 80164ea:	033a      	lsls	r2, r7, #12
 80164ec:	0b12      	lsrs	r2, r2, #12
 80164ee:	4314      	orrs	r4, r2
 80164f0:	d101      	bne.n	80164f6 <_dtoa_r+0x56>
 80164f2:	f000 fd9e 	bl	8017032 <_dtoa_r+0xb92>
 80164f6:	48b1      	ldr	r0, [pc, #708]	; (80167bc <_dtoa_r+0x31c>)
 80164f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80164fa:	9006      	str	r0, [sp, #24]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d002      	beq.n	8016506 <_dtoa_r+0x66>
 8016500:	4baf      	ldr	r3, [pc, #700]	; (80167c0 <_dtoa_r+0x320>)
 8016502:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016504:	6013      	str	r3, [r2, #0]
 8016506:	9806      	ldr	r0, [sp, #24]
 8016508:	b01d      	add	sp, #116	; 0x74
 801650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650c:	2300      	movs	r3, #0
 801650e:	6033      	str	r3, [r6, #0]
 8016510:	e7e2      	b.n	80164d8 <_dtoa_r+0x38>
 8016512:	9a08      	ldr	r2, [sp, #32]
 8016514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016516:	9210      	str	r2, [sp, #64]	; 0x40
 8016518:	9311      	str	r3, [sp, #68]	; 0x44
 801651a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801651c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801651e:	2200      	movs	r2, #0
 8016520:	2300      	movs	r3, #0
 8016522:	f7e9 ff9b 	bl	800045c <__aeabi_dcmpeq>
 8016526:	1e06      	subs	r6, r0, #0
 8016528:	d009      	beq.n	801653e <_dtoa_r+0x9e>
 801652a:	2301      	movs	r3, #1
 801652c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801652e:	6013      	str	r3, [r2, #0]
 8016530:	4ba4      	ldr	r3, [pc, #656]	; (80167c4 <_dtoa_r+0x324>)
 8016532:	9306      	str	r3, [sp, #24]
 8016534:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016536:	2b00      	cmp	r3, #0
 8016538:	d0e5      	beq.n	8016506 <_dtoa_r+0x66>
 801653a:	4ba3      	ldr	r3, [pc, #652]	; (80167c8 <_dtoa_r+0x328>)
 801653c:	e7e1      	b.n	8016502 <_dtoa_r+0x62>
 801653e:	ab1a      	add	r3, sp, #104	; 0x68
 8016540:	9301      	str	r3, [sp, #4]
 8016542:	ab1b      	add	r3, sp, #108	; 0x6c
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	9804      	ldr	r0, [sp, #16]
 8016548:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801654a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801654c:	f001 fdfe 	bl	801814c <__d2b>
 8016550:	007b      	lsls	r3, r7, #1
 8016552:	9005      	str	r0, [sp, #20]
 8016554:	0d5b      	lsrs	r3, r3, #21
 8016556:	d100      	bne.n	801655a <_dtoa_r+0xba>
 8016558:	e07c      	b.n	8016654 <_dtoa_r+0x1b4>
 801655a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801655c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801655e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016560:	4c9a      	ldr	r4, [pc, #616]	; (80167cc <_dtoa_r+0x32c>)
 8016562:	0312      	lsls	r2, r2, #12
 8016564:	0b12      	lsrs	r2, r2, #12
 8016566:	4314      	orrs	r4, r2
 8016568:	0021      	movs	r1, r4
 801656a:	4a99      	ldr	r2, [pc, #612]	; (80167d0 <_dtoa_r+0x330>)
 801656c:	9617      	str	r6, [sp, #92]	; 0x5c
 801656e:	189f      	adds	r7, r3, r2
 8016570:	2200      	movs	r2, #0
 8016572:	4b98      	ldr	r3, [pc, #608]	; (80167d4 <_dtoa_r+0x334>)
 8016574:	f7ec f824 	bl	80025c0 <__aeabi_dsub>
 8016578:	4a97      	ldr	r2, [pc, #604]	; (80167d8 <_dtoa_r+0x338>)
 801657a:	4b98      	ldr	r3, [pc, #608]	; (80167dc <_dtoa_r+0x33c>)
 801657c:	f7eb fdb4 	bl	80020e8 <__aeabi_dmul>
 8016580:	4a97      	ldr	r2, [pc, #604]	; (80167e0 <_dtoa_r+0x340>)
 8016582:	4b98      	ldr	r3, [pc, #608]	; (80167e4 <_dtoa_r+0x344>)
 8016584:	f7ea fe72 	bl	800126c <__aeabi_dadd>
 8016588:	0004      	movs	r4, r0
 801658a:	0038      	movs	r0, r7
 801658c:	000d      	movs	r5, r1
 801658e:	f7ec fbfd 	bl	8002d8c <__aeabi_i2d>
 8016592:	4a95      	ldr	r2, [pc, #596]	; (80167e8 <_dtoa_r+0x348>)
 8016594:	4b95      	ldr	r3, [pc, #596]	; (80167ec <_dtoa_r+0x34c>)
 8016596:	f7eb fda7 	bl	80020e8 <__aeabi_dmul>
 801659a:	0002      	movs	r2, r0
 801659c:	000b      	movs	r3, r1
 801659e:	0020      	movs	r0, r4
 80165a0:	0029      	movs	r1, r5
 80165a2:	f7ea fe63 	bl	800126c <__aeabi_dadd>
 80165a6:	0004      	movs	r4, r0
 80165a8:	000d      	movs	r5, r1
 80165aa:	f7ec fbb9 	bl	8002d20 <__aeabi_d2iz>
 80165ae:	2200      	movs	r2, #0
 80165b0:	9003      	str	r0, [sp, #12]
 80165b2:	2300      	movs	r3, #0
 80165b4:	0020      	movs	r0, r4
 80165b6:	0029      	movs	r1, r5
 80165b8:	f7e9 ff56 	bl	8000468 <__aeabi_dcmplt>
 80165bc:	2800      	cmp	r0, #0
 80165be:	d00b      	beq.n	80165d8 <_dtoa_r+0x138>
 80165c0:	9803      	ldr	r0, [sp, #12]
 80165c2:	f7ec fbe3 	bl	8002d8c <__aeabi_i2d>
 80165c6:	002b      	movs	r3, r5
 80165c8:	0022      	movs	r2, r4
 80165ca:	f7e9 ff47 	bl	800045c <__aeabi_dcmpeq>
 80165ce:	4243      	negs	r3, r0
 80165d0:	4158      	adcs	r0, r3
 80165d2:	9b03      	ldr	r3, [sp, #12]
 80165d4:	1a1b      	subs	r3, r3, r0
 80165d6:	9303      	str	r3, [sp, #12]
 80165d8:	2301      	movs	r3, #1
 80165da:	9315      	str	r3, [sp, #84]	; 0x54
 80165dc:	9b03      	ldr	r3, [sp, #12]
 80165de:	2b16      	cmp	r3, #22
 80165e0:	d80f      	bhi.n	8016602 <_dtoa_r+0x162>
 80165e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80165e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80165e6:	00da      	lsls	r2, r3, #3
 80165e8:	4b81      	ldr	r3, [pc, #516]	; (80167f0 <_dtoa_r+0x350>)
 80165ea:	189b      	adds	r3, r3, r2
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	685b      	ldr	r3, [r3, #4]
 80165f0:	f7e9 ff3a 	bl	8000468 <__aeabi_dcmplt>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	d049      	beq.n	801668c <_dtoa_r+0x1ec>
 80165f8:	9b03      	ldr	r3, [sp, #12]
 80165fa:	3b01      	subs	r3, #1
 80165fc:	9303      	str	r3, [sp, #12]
 80165fe:	2300      	movs	r3, #0
 8016600:	9315      	str	r3, [sp, #84]	; 0x54
 8016602:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016604:	1bdf      	subs	r7, r3, r7
 8016606:	2300      	movs	r3, #0
 8016608:	930a      	str	r3, [sp, #40]	; 0x28
 801660a:	003b      	movs	r3, r7
 801660c:	3b01      	subs	r3, #1
 801660e:	930c      	str	r3, [sp, #48]	; 0x30
 8016610:	d504      	bpl.n	801661c <_dtoa_r+0x17c>
 8016612:	2301      	movs	r3, #1
 8016614:	1bdb      	subs	r3, r3, r7
 8016616:	930a      	str	r3, [sp, #40]	; 0x28
 8016618:	2300      	movs	r3, #0
 801661a:	930c      	str	r3, [sp, #48]	; 0x30
 801661c:	9b03      	ldr	r3, [sp, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	db36      	blt.n	8016690 <_dtoa_r+0x1f0>
 8016622:	9a03      	ldr	r2, [sp, #12]
 8016624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016626:	4694      	mov	ip, r2
 8016628:	4463      	add	r3, ip
 801662a:	930c      	str	r3, [sp, #48]	; 0x30
 801662c:	2300      	movs	r3, #0
 801662e:	9214      	str	r2, [sp, #80]	; 0x50
 8016630:	930d      	str	r3, [sp, #52]	; 0x34
 8016632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016634:	2401      	movs	r4, #1
 8016636:	2b09      	cmp	r3, #9
 8016638:	d867      	bhi.n	801670a <_dtoa_r+0x26a>
 801663a:	2b05      	cmp	r3, #5
 801663c:	dd02      	ble.n	8016644 <_dtoa_r+0x1a4>
 801663e:	2400      	movs	r4, #0
 8016640:	3b04      	subs	r3, #4
 8016642:	9322      	str	r3, [sp, #136]	; 0x88
 8016644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016646:	1e98      	subs	r0, r3, #2
 8016648:	2803      	cmp	r0, #3
 801664a:	d867      	bhi.n	801671c <_dtoa_r+0x27c>
 801664c:	f7e9 fd6c 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016650:	5b363829 	.word	0x5b363829
 8016654:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016656:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016658:	189e      	adds	r6, r3, r2
 801665a:	4b66      	ldr	r3, [pc, #408]	; (80167f4 <_dtoa_r+0x354>)
 801665c:	18f2      	adds	r2, r6, r3
 801665e:	2a20      	cmp	r2, #32
 8016660:	dd0f      	ble.n	8016682 <_dtoa_r+0x1e2>
 8016662:	2340      	movs	r3, #64	; 0x40
 8016664:	0038      	movs	r0, r7
 8016666:	1a9b      	subs	r3, r3, r2
 8016668:	4098      	lsls	r0, r3
 801666a:	4b63      	ldr	r3, [pc, #396]	; (80167f8 <_dtoa_r+0x358>)
 801666c:	18f3      	adds	r3, r6, r3
 801666e:	40dc      	lsrs	r4, r3
 8016670:	4320      	orrs	r0, r4
 8016672:	f7ec fbbb 	bl	8002dec <__aeabi_ui2d>
 8016676:	2301      	movs	r3, #1
 8016678:	4c60      	ldr	r4, [pc, #384]	; (80167fc <_dtoa_r+0x35c>)
 801667a:	1e77      	subs	r7, r6, #1
 801667c:	1909      	adds	r1, r1, r4
 801667e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016680:	e776      	b.n	8016570 <_dtoa_r+0xd0>
 8016682:	2320      	movs	r3, #32
 8016684:	0020      	movs	r0, r4
 8016686:	1a9b      	subs	r3, r3, r2
 8016688:	4098      	lsls	r0, r3
 801668a:	e7f2      	b.n	8016672 <_dtoa_r+0x1d2>
 801668c:	9015      	str	r0, [sp, #84]	; 0x54
 801668e:	e7b8      	b.n	8016602 <_dtoa_r+0x162>
 8016690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016692:	9a03      	ldr	r2, [sp, #12]
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	930a      	str	r3, [sp, #40]	; 0x28
 8016698:	4253      	negs	r3, r2
 801669a:	930d      	str	r3, [sp, #52]	; 0x34
 801669c:	2300      	movs	r3, #0
 801669e:	9314      	str	r3, [sp, #80]	; 0x50
 80166a0:	e7c7      	b.n	8016632 <_dtoa_r+0x192>
 80166a2:	2300      	movs	r3, #0
 80166a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80166a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80166a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80166aa:	9307      	str	r3, [sp, #28]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	dc13      	bgt.n	80166d8 <_dtoa_r+0x238>
 80166b0:	2301      	movs	r3, #1
 80166b2:	001a      	movs	r2, r3
 80166b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80166b6:	9307      	str	r3, [sp, #28]
 80166b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80166ba:	e00d      	b.n	80166d8 <_dtoa_r+0x238>
 80166bc:	2301      	movs	r3, #1
 80166be:	e7f1      	b.n	80166a4 <_dtoa_r+0x204>
 80166c0:	2300      	movs	r3, #0
 80166c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80166c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80166c6:	4694      	mov	ip, r2
 80166c8:	9b03      	ldr	r3, [sp, #12]
 80166ca:	4463      	add	r3, ip
 80166cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80166ce:	3301      	adds	r3, #1
 80166d0:	9307      	str	r3, [sp, #28]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	dc00      	bgt.n	80166d8 <_dtoa_r+0x238>
 80166d6:	2301      	movs	r3, #1
 80166d8:	2200      	movs	r2, #0
 80166da:	9904      	ldr	r1, [sp, #16]
 80166dc:	644a      	str	r2, [r1, #68]	; 0x44
 80166de:	3204      	adds	r2, #4
 80166e0:	0010      	movs	r0, r2
 80166e2:	9904      	ldr	r1, [sp, #16]
 80166e4:	3014      	adds	r0, #20
 80166e6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80166e8:	4298      	cmp	r0, r3
 80166ea:	d91b      	bls.n	8016724 <_dtoa_r+0x284>
 80166ec:	9804      	ldr	r0, [sp, #16]
 80166ee:	f001 f985 	bl	80179fc <_Balloc>
 80166f2:	9006      	str	r0, [sp, #24]
 80166f4:	2800      	cmp	r0, #0
 80166f6:	d11a      	bne.n	801672e <_dtoa_r+0x28e>
 80166f8:	21d5      	movs	r1, #213	; 0xd5
 80166fa:	0002      	movs	r2, r0
 80166fc:	4b40      	ldr	r3, [pc, #256]	; (8016800 <_dtoa_r+0x360>)
 80166fe:	0049      	lsls	r1, r1, #1
 8016700:	4840      	ldr	r0, [pc, #256]	; (8016804 <_dtoa_r+0x364>)
 8016702:	f001 fefd 	bl	8018500 <__assert_func>
 8016706:	2301      	movs	r3, #1
 8016708:	e7db      	b.n	80166c2 <_dtoa_r+0x222>
 801670a:	2300      	movs	r3, #0
 801670c:	940f      	str	r4, [sp, #60]	; 0x3c
 801670e:	9322      	str	r3, [sp, #136]	; 0x88
 8016710:	3b01      	subs	r3, #1
 8016712:	930b      	str	r3, [sp, #44]	; 0x2c
 8016714:	9307      	str	r3, [sp, #28]
 8016716:	2200      	movs	r2, #0
 8016718:	3313      	adds	r3, #19
 801671a:	e7cd      	b.n	80166b8 <_dtoa_r+0x218>
 801671c:	2301      	movs	r3, #1
 801671e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016720:	3b02      	subs	r3, #2
 8016722:	e7f6      	b.n	8016712 <_dtoa_r+0x272>
 8016724:	9804      	ldr	r0, [sp, #16]
 8016726:	3101      	adds	r1, #1
 8016728:	6441      	str	r1, [r0, #68]	; 0x44
 801672a:	0052      	lsls	r2, r2, #1
 801672c:	e7d8      	b.n	80166e0 <_dtoa_r+0x240>
 801672e:	9b04      	ldr	r3, [sp, #16]
 8016730:	9a06      	ldr	r2, [sp, #24]
 8016732:	641a      	str	r2, [r3, #64]	; 0x40
 8016734:	9b07      	ldr	r3, [sp, #28]
 8016736:	2b0e      	cmp	r3, #14
 8016738:	d900      	bls.n	801673c <_dtoa_r+0x29c>
 801673a:	e0de      	b.n	80168fa <_dtoa_r+0x45a>
 801673c:	2c00      	cmp	r4, #0
 801673e:	d100      	bne.n	8016742 <_dtoa_r+0x2a2>
 8016740:	e0db      	b.n	80168fa <_dtoa_r+0x45a>
 8016742:	9b03      	ldr	r3, [sp, #12]
 8016744:	2b00      	cmp	r3, #0
 8016746:	dd61      	ble.n	801680c <_dtoa_r+0x36c>
 8016748:	001a      	movs	r2, r3
 801674a:	210f      	movs	r1, #15
 801674c:	4b28      	ldr	r3, [pc, #160]	; (80167f0 <_dtoa_r+0x350>)
 801674e:	400a      	ands	r2, r1
 8016750:	00d2      	lsls	r2, r2, #3
 8016752:	189b      	adds	r3, r3, r2
 8016754:	681d      	ldr	r5, [r3, #0]
 8016756:	685e      	ldr	r6, [r3, #4]
 8016758:	9b03      	ldr	r3, [sp, #12]
 801675a:	2702      	movs	r7, #2
 801675c:	111c      	asrs	r4, r3, #4
 801675e:	05db      	lsls	r3, r3, #23
 8016760:	d50a      	bpl.n	8016778 <_dtoa_r+0x2d8>
 8016762:	4b29      	ldr	r3, [pc, #164]	; (8016808 <_dtoa_r+0x368>)
 8016764:	400c      	ands	r4, r1
 8016766:	6a1a      	ldr	r2, [r3, #32]
 8016768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801676a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801676c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801676e:	f7eb f8b9 	bl	80018e4 <__aeabi_ddiv>
 8016772:	9008      	str	r0, [sp, #32]
 8016774:	9109      	str	r1, [sp, #36]	; 0x24
 8016776:	3701      	adds	r7, #1
 8016778:	4b23      	ldr	r3, [pc, #140]	; (8016808 <_dtoa_r+0x368>)
 801677a:	930e      	str	r3, [sp, #56]	; 0x38
 801677c:	2c00      	cmp	r4, #0
 801677e:	d108      	bne.n	8016792 <_dtoa_r+0x2f2>
 8016780:	9808      	ldr	r0, [sp, #32]
 8016782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016784:	002a      	movs	r2, r5
 8016786:	0033      	movs	r3, r6
 8016788:	f7eb f8ac 	bl	80018e4 <__aeabi_ddiv>
 801678c:	9008      	str	r0, [sp, #32]
 801678e:	9109      	str	r1, [sp, #36]	; 0x24
 8016790:	e057      	b.n	8016842 <_dtoa_r+0x3a2>
 8016792:	2301      	movs	r3, #1
 8016794:	421c      	tst	r4, r3
 8016796:	d009      	beq.n	80167ac <_dtoa_r+0x30c>
 8016798:	18ff      	adds	r7, r7, r3
 801679a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801679c:	0028      	movs	r0, r5
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	0031      	movs	r1, r6
 80167a4:	f7eb fca0 	bl	80020e8 <__aeabi_dmul>
 80167a8:	0005      	movs	r5, r0
 80167aa:	000e      	movs	r6, r1
 80167ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167ae:	1064      	asrs	r4, r4, #1
 80167b0:	3308      	adds	r3, #8
 80167b2:	e7e2      	b.n	801677a <_dtoa_r+0x2da>
 80167b4:	7ff00000 	.word	0x7ff00000
 80167b8:	0000270f 	.word	0x0000270f
 80167bc:	0801d114 	.word	0x0801d114
 80167c0:	0801d117 	.word	0x0801d117
 80167c4:	0801d0f2 	.word	0x0801d0f2
 80167c8:	0801d0f3 	.word	0x0801d0f3
 80167cc:	3ff00000 	.word	0x3ff00000
 80167d0:	fffffc01 	.word	0xfffffc01
 80167d4:	3ff80000 	.word	0x3ff80000
 80167d8:	636f4361 	.word	0x636f4361
 80167dc:	3fd287a7 	.word	0x3fd287a7
 80167e0:	8b60c8b3 	.word	0x8b60c8b3
 80167e4:	3fc68a28 	.word	0x3fc68a28
 80167e8:	509f79fb 	.word	0x509f79fb
 80167ec:	3fd34413 	.word	0x3fd34413
 80167f0:	0801d290 	.word	0x0801d290
 80167f4:	00000432 	.word	0x00000432
 80167f8:	00000412 	.word	0x00000412
 80167fc:	fe100000 	.word	0xfe100000
 8016800:	0801d121 	.word	0x0801d121
 8016804:	0801d132 	.word	0x0801d132
 8016808:	0801d268 	.word	0x0801d268
 801680c:	9b03      	ldr	r3, [sp, #12]
 801680e:	2702      	movs	r7, #2
 8016810:	2b00      	cmp	r3, #0
 8016812:	d016      	beq.n	8016842 <_dtoa_r+0x3a2>
 8016814:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016816:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016818:	425c      	negs	r4, r3
 801681a:	230f      	movs	r3, #15
 801681c:	4ad4      	ldr	r2, [pc, #848]	; (8016b70 <_dtoa_r+0x6d0>)
 801681e:	4023      	ands	r3, r4
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	18d3      	adds	r3, r2, r3
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	f7eb fc5e 	bl	80020e8 <__aeabi_dmul>
 801682c:	2601      	movs	r6, #1
 801682e:	2300      	movs	r3, #0
 8016830:	9008      	str	r0, [sp, #32]
 8016832:	9109      	str	r1, [sp, #36]	; 0x24
 8016834:	4dcf      	ldr	r5, [pc, #828]	; (8016b74 <_dtoa_r+0x6d4>)
 8016836:	1124      	asrs	r4, r4, #4
 8016838:	2c00      	cmp	r4, #0
 801683a:	d000      	beq.n	801683e <_dtoa_r+0x39e>
 801683c:	e08d      	b.n	801695a <_dtoa_r+0x4ba>
 801683e:	2b00      	cmp	r3, #0
 8016840:	d1a4      	bne.n	801678c <_dtoa_r+0x2ec>
 8016842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016844:	2b00      	cmp	r3, #0
 8016846:	d100      	bne.n	801684a <_dtoa_r+0x3aa>
 8016848:	e092      	b.n	8016970 <_dtoa_r+0x4d0>
 801684a:	9c08      	ldr	r4, [sp, #32]
 801684c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801684e:	2200      	movs	r2, #0
 8016850:	0020      	movs	r0, r4
 8016852:	0029      	movs	r1, r5
 8016854:	4bc8      	ldr	r3, [pc, #800]	; (8016b78 <_dtoa_r+0x6d8>)
 8016856:	f7e9 fe07 	bl	8000468 <__aeabi_dcmplt>
 801685a:	2800      	cmp	r0, #0
 801685c:	d100      	bne.n	8016860 <_dtoa_r+0x3c0>
 801685e:	e087      	b.n	8016970 <_dtoa_r+0x4d0>
 8016860:	9b07      	ldr	r3, [sp, #28]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d100      	bne.n	8016868 <_dtoa_r+0x3c8>
 8016866:	e083      	b.n	8016970 <_dtoa_r+0x4d0>
 8016868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801686a:	2b00      	cmp	r3, #0
 801686c:	dd41      	ble.n	80168f2 <_dtoa_r+0x452>
 801686e:	9b03      	ldr	r3, [sp, #12]
 8016870:	2200      	movs	r2, #0
 8016872:	3b01      	subs	r3, #1
 8016874:	930e      	str	r3, [sp, #56]	; 0x38
 8016876:	0020      	movs	r0, r4
 8016878:	0029      	movs	r1, r5
 801687a:	4bc0      	ldr	r3, [pc, #768]	; (8016b7c <_dtoa_r+0x6dc>)
 801687c:	f7eb fc34 	bl	80020e8 <__aeabi_dmul>
 8016880:	9008      	str	r0, [sp, #32]
 8016882:	9109      	str	r1, [sp, #36]	; 0x24
 8016884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8016886:	3701      	adds	r7, #1
 8016888:	0038      	movs	r0, r7
 801688a:	9c08      	ldr	r4, [sp, #32]
 801688c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801688e:	f7ec fa7d 	bl	8002d8c <__aeabi_i2d>
 8016892:	0022      	movs	r2, r4
 8016894:	002b      	movs	r3, r5
 8016896:	f7eb fc27 	bl	80020e8 <__aeabi_dmul>
 801689a:	2200      	movs	r2, #0
 801689c:	4bb8      	ldr	r3, [pc, #736]	; (8016b80 <_dtoa_r+0x6e0>)
 801689e:	f7ea fce5 	bl	800126c <__aeabi_dadd>
 80168a2:	9012      	str	r0, [sp, #72]	; 0x48
 80168a4:	9113      	str	r1, [sp, #76]	; 0x4c
 80168a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168aa:	9208      	str	r2, [sp, #32]
 80168ac:	9309      	str	r3, [sp, #36]	; 0x24
 80168ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168b0:	4ab4      	ldr	r2, [pc, #720]	; (8016b84 <_dtoa_r+0x6e4>)
 80168b2:	189f      	adds	r7, r3, r2
 80168b4:	9709      	str	r7, [sp, #36]	; 0x24
 80168b6:	2e00      	cmp	r6, #0
 80168b8:	d15e      	bne.n	8016978 <_dtoa_r+0x4d8>
 80168ba:	2200      	movs	r2, #0
 80168bc:	0020      	movs	r0, r4
 80168be:	0029      	movs	r1, r5
 80168c0:	4bb1      	ldr	r3, [pc, #708]	; (8016b88 <_dtoa_r+0x6e8>)
 80168c2:	f7eb fe7d 	bl	80025c0 <__aeabi_dsub>
 80168c6:	003b      	movs	r3, r7
 80168c8:	9a08      	ldr	r2, [sp, #32]
 80168ca:	0004      	movs	r4, r0
 80168cc:	000d      	movs	r5, r1
 80168ce:	f7e9 fddf 	bl	8000490 <__aeabi_dcmpgt>
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d000      	beq.n	80168d8 <_dtoa_r+0x438>
 80168d6:	e2a3      	b.n	8016e20 <_dtoa_r+0x980>
 80168d8:	48ac      	ldr	r0, [pc, #688]	; (8016b8c <_dtoa_r+0x6ec>)
 80168da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80168dc:	4684      	mov	ip, r0
 80168de:	4461      	add	r1, ip
 80168e0:	000b      	movs	r3, r1
 80168e2:	0020      	movs	r0, r4
 80168e4:	0029      	movs	r1, r5
 80168e6:	9a08      	ldr	r2, [sp, #32]
 80168e8:	f7e9 fdbe 	bl	8000468 <__aeabi_dcmplt>
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d000      	beq.n	80168f2 <_dtoa_r+0x452>
 80168f0:	e294      	b.n	8016e1c <_dtoa_r+0x97c>
 80168f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80168f6:	9308      	str	r3, [sp, #32]
 80168f8:	9409      	str	r4, [sp, #36]	; 0x24
 80168fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	da00      	bge.n	8016902 <_dtoa_r+0x462>
 8016900:	e16a      	b.n	8016bd8 <_dtoa_r+0x738>
 8016902:	9a03      	ldr	r2, [sp, #12]
 8016904:	2a0e      	cmp	r2, #14
 8016906:	dd00      	ble.n	801690a <_dtoa_r+0x46a>
 8016908:	e166      	b.n	8016bd8 <_dtoa_r+0x738>
 801690a:	4b99      	ldr	r3, [pc, #612]	; (8016b70 <_dtoa_r+0x6d0>)
 801690c:	00d2      	lsls	r2, r2, #3
 801690e:	189b      	adds	r3, r3, r2
 8016910:	681e      	ldr	r6, [r3, #0]
 8016912:	685f      	ldr	r7, [r3, #4]
 8016914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016916:	2b00      	cmp	r3, #0
 8016918:	db00      	blt.n	801691c <_dtoa_r+0x47c>
 801691a:	e0d7      	b.n	8016acc <_dtoa_r+0x62c>
 801691c:	9b07      	ldr	r3, [sp, #28]
 801691e:	2b00      	cmp	r3, #0
 8016920:	dd00      	ble.n	8016924 <_dtoa_r+0x484>
 8016922:	e0d3      	b.n	8016acc <_dtoa_r+0x62c>
 8016924:	d000      	beq.n	8016928 <_dtoa_r+0x488>
 8016926:	e278      	b.n	8016e1a <_dtoa_r+0x97a>
 8016928:	2200      	movs	r2, #0
 801692a:	0030      	movs	r0, r6
 801692c:	0039      	movs	r1, r7
 801692e:	4b96      	ldr	r3, [pc, #600]	; (8016b88 <_dtoa_r+0x6e8>)
 8016930:	f7eb fbda 	bl	80020e8 <__aeabi_dmul>
 8016934:	9a08      	ldr	r2, [sp, #32]
 8016936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016938:	f7e9 fdb4 	bl	80004a4 <__aeabi_dcmpge>
 801693c:	9e07      	ldr	r6, [sp, #28]
 801693e:	0037      	movs	r7, r6
 8016940:	2800      	cmp	r0, #0
 8016942:	d000      	beq.n	8016946 <_dtoa_r+0x4a6>
 8016944:	e24f      	b.n	8016de6 <_dtoa_r+0x946>
 8016946:	9b06      	ldr	r3, [sp, #24]
 8016948:	9a06      	ldr	r2, [sp, #24]
 801694a:	3301      	adds	r3, #1
 801694c:	9308      	str	r3, [sp, #32]
 801694e:	2331      	movs	r3, #49	; 0x31
 8016950:	7013      	strb	r3, [r2, #0]
 8016952:	9b03      	ldr	r3, [sp, #12]
 8016954:	3301      	adds	r3, #1
 8016956:	9303      	str	r3, [sp, #12]
 8016958:	e24a      	b.n	8016df0 <_dtoa_r+0x950>
 801695a:	4234      	tst	r4, r6
 801695c:	d005      	beq.n	801696a <_dtoa_r+0x4ca>
 801695e:	682a      	ldr	r2, [r5, #0]
 8016960:	686b      	ldr	r3, [r5, #4]
 8016962:	f7eb fbc1 	bl	80020e8 <__aeabi_dmul>
 8016966:	0033      	movs	r3, r6
 8016968:	3701      	adds	r7, #1
 801696a:	1064      	asrs	r4, r4, #1
 801696c:	3508      	adds	r5, #8
 801696e:	e763      	b.n	8016838 <_dtoa_r+0x398>
 8016970:	9b03      	ldr	r3, [sp, #12]
 8016972:	9e07      	ldr	r6, [sp, #28]
 8016974:	930e      	str	r3, [sp, #56]	; 0x38
 8016976:	e787      	b.n	8016888 <_dtoa_r+0x3e8>
 8016978:	4b7d      	ldr	r3, [pc, #500]	; (8016b70 <_dtoa_r+0x6d0>)
 801697a:	1e72      	subs	r2, r6, #1
 801697c:	00d2      	lsls	r2, r2, #3
 801697e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016980:	189b      	adds	r3, r3, r2
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	2900      	cmp	r1, #0
 8016988:	d04e      	beq.n	8016a28 <_dtoa_r+0x588>
 801698a:	2000      	movs	r0, #0
 801698c:	4980      	ldr	r1, [pc, #512]	; (8016b90 <_dtoa_r+0x6f0>)
 801698e:	f7ea ffa9 	bl	80018e4 <__aeabi_ddiv>
 8016992:	9a08      	ldr	r2, [sp, #32]
 8016994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016996:	f7eb fe13 	bl	80025c0 <__aeabi_dsub>
 801699a:	9b06      	ldr	r3, [sp, #24]
 801699c:	9012      	str	r0, [sp, #72]	; 0x48
 801699e:	9113      	str	r1, [sp, #76]	; 0x4c
 80169a0:	9316      	str	r3, [sp, #88]	; 0x58
 80169a2:	18f3      	adds	r3, r6, r3
 80169a4:	9319      	str	r3, [sp, #100]	; 0x64
 80169a6:	0020      	movs	r0, r4
 80169a8:	0029      	movs	r1, r5
 80169aa:	f7ec f9b9 	bl	8002d20 <__aeabi_d2iz>
 80169ae:	9018      	str	r0, [sp, #96]	; 0x60
 80169b0:	f7ec f9ec 	bl	8002d8c <__aeabi_i2d>
 80169b4:	0002      	movs	r2, r0
 80169b6:	000b      	movs	r3, r1
 80169b8:	0020      	movs	r0, r4
 80169ba:	0029      	movs	r1, r5
 80169bc:	f7eb fe00 	bl	80025c0 <__aeabi_dsub>
 80169c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169c2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80169c4:	3301      	adds	r3, #1
 80169c6:	9308      	str	r3, [sp, #32]
 80169c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169ca:	3430      	adds	r4, #48	; 0x30
 80169cc:	701c      	strb	r4, [r3, #0]
 80169ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169d2:	0006      	movs	r6, r0
 80169d4:	000f      	movs	r7, r1
 80169d6:	f7e9 fd47 	bl	8000468 <__aeabi_dcmplt>
 80169da:	2800      	cmp	r0, #0
 80169dc:	d16c      	bne.n	8016ab8 <_dtoa_r+0x618>
 80169de:	0032      	movs	r2, r6
 80169e0:	003b      	movs	r3, r7
 80169e2:	2000      	movs	r0, #0
 80169e4:	4964      	ldr	r1, [pc, #400]	; (8016b78 <_dtoa_r+0x6d8>)
 80169e6:	f7eb fdeb 	bl	80025c0 <__aeabi_dsub>
 80169ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169ee:	f7e9 fd3b 	bl	8000468 <__aeabi_dcmplt>
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d000      	beq.n	80169f8 <_dtoa_r+0x558>
 80169f6:	e0cf      	b.n	8016b98 <_dtoa_r+0x6f8>
 80169f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80169fa:	9a08      	ldr	r2, [sp, #32]
 80169fc:	4293      	cmp	r3, r2
 80169fe:	d100      	bne.n	8016a02 <_dtoa_r+0x562>
 8016a00:	e777      	b.n	80168f2 <_dtoa_r+0x452>
 8016a02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a04:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016a06:	2200      	movs	r2, #0
 8016a08:	4b5c      	ldr	r3, [pc, #368]	; (8016b7c <_dtoa_r+0x6dc>)
 8016a0a:	f7eb fb6d 	bl	80020e8 <__aeabi_dmul>
 8016a0e:	4b5b      	ldr	r3, [pc, #364]	; (8016b7c <_dtoa_r+0x6dc>)
 8016a10:	9012      	str	r0, [sp, #72]	; 0x48
 8016a12:	9113      	str	r1, [sp, #76]	; 0x4c
 8016a14:	2200      	movs	r2, #0
 8016a16:	0030      	movs	r0, r6
 8016a18:	0039      	movs	r1, r7
 8016a1a:	f7eb fb65 	bl	80020e8 <__aeabi_dmul>
 8016a1e:	9b08      	ldr	r3, [sp, #32]
 8016a20:	0004      	movs	r4, r0
 8016a22:	000d      	movs	r5, r1
 8016a24:	9316      	str	r3, [sp, #88]	; 0x58
 8016a26:	e7be      	b.n	80169a6 <_dtoa_r+0x506>
 8016a28:	9808      	ldr	r0, [sp, #32]
 8016a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a2c:	f7eb fb5c 	bl	80020e8 <__aeabi_dmul>
 8016a30:	9f06      	ldr	r7, [sp, #24]
 8016a32:	9012      	str	r0, [sp, #72]	; 0x48
 8016a34:	9113      	str	r1, [sp, #76]	; 0x4c
 8016a36:	19bb      	adds	r3, r7, r6
 8016a38:	9316      	str	r3, [sp, #88]	; 0x58
 8016a3a:	0029      	movs	r1, r5
 8016a3c:	0020      	movs	r0, r4
 8016a3e:	f7ec f96f 	bl	8002d20 <__aeabi_d2iz>
 8016a42:	9008      	str	r0, [sp, #32]
 8016a44:	f7ec f9a2 	bl	8002d8c <__aeabi_i2d>
 8016a48:	000b      	movs	r3, r1
 8016a4a:	0002      	movs	r2, r0
 8016a4c:	0029      	movs	r1, r5
 8016a4e:	0020      	movs	r0, r4
 8016a50:	f7eb fdb6 	bl	80025c0 <__aeabi_dsub>
 8016a54:	9b08      	ldr	r3, [sp, #32]
 8016a56:	0004      	movs	r4, r0
 8016a58:	3330      	adds	r3, #48	; 0x30
 8016a5a:	703b      	strb	r3, [r7, #0]
 8016a5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a5e:	3701      	adds	r7, #1
 8016a60:	000d      	movs	r5, r1
 8016a62:	429f      	cmp	r7, r3
 8016a64:	d12b      	bne.n	8016abe <_dtoa_r+0x61e>
 8016a66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a68:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016a6a:	9b06      	ldr	r3, [sp, #24]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	199b      	adds	r3, r3, r6
 8016a70:	9308      	str	r3, [sp, #32]
 8016a72:	4b47      	ldr	r3, [pc, #284]	; (8016b90 <_dtoa_r+0x6f0>)
 8016a74:	f7ea fbfa 	bl	800126c <__aeabi_dadd>
 8016a78:	0002      	movs	r2, r0
 8016a7a:	000b      	movs	r3, r1
 8016a7c:	0020      	movs	r0, r4
 8016a7e:	0029      	movs	r1, r5
 8016a80:	f7e9 fd06 	bl	8000490 <__aeabi_dcmpgt>
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d000      	beq.n	8016a8a <_dtoa_r+0x5ea>
 8016a88:	e086      	b.n	8016b98 <_dtoa_r+0x6f8>
 8016a8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a8e:	2000      	movs	r0, #0
 8016a90:	493f      	ldr	r1, [pc, #252]	; (8016b90 <_dtoa_r+0x6f0>)
 8016a92:	f7eb fd95 	bl	80025c0 <__aeabi_dsub>
 8016a96:	0002      	movs	r2, r0
 8016a98:	000b      	movs	r3, r1
 8016a9a:	0020      	movs	r0, r4
 8016a9c:	0029      	movs	r1, r5
 8016a9e:	f7e9 fce3 	bl	8000468 <__aeabi_dcmplt>
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	d100      	bne.n	8016aa8 <_dtoa_r+0x608>
 8016aa6:	e724      	b.n	80168f2 <_dtoa_r+0x452>
 8016aa8:	9b08      	ldr	r3, [sp, #32]
 8016aaa:	001a      	movs	r2, r3
 8016aac:	3a01      	subs	r2, #1
 8016aae:	9208      	str	r2, [sp, #32]
 8016ab0:	7812      	ldrb	r2, [r2, #0]
 8016ab2:	2a30      	cmp	r2, #48	; 0x30
 8016ab4:	d0f8      	beq.n	8016aa8 <_dtoa_r+0x608>
 8016ab6:	9308      	str	r3, [sp, #32]
 8016ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016aba:	9303      	str	r3, [sp, #12]
 8016abc:	e046      	b.n	8016b4c <_dtoa_r+0x6ac>
 8016abe:	2200      	movs	r2, #0
 8016ac0:	4b2e      	ldr	r3, [pc, #184]	; (8016b7c <_dtoa_r+0x6dc>)
 8016ac2:	f7eb fb11 	bl	80020e8 <__aeabi_dmul>
 8016ac6:	0004      	movs	r4, r0
 8016ac8:	000d      	movs	r5, r1
 8016aca:	e7b6      	b.n	8016a3a <_dtoa_r+0x59a>
 8016acc:	9b06      	ldr	r3, [sp, #24]
 8016ace:	9a06      	ldr	r2, [sp, #24]
 8016ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ad2:	9b07      	ldr	r3, [sp, #28]
 8016ad4:	9c08      	ldr	r4, [sp, #32]
 8016ad6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016ad8:	3b01      	subs	r3, #1
 8016ada:	189b      	adds	r3, r3, r2
 8016adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ade:	0032      	movs	r2, r6
 8016ae0:	003b      	movs	r3, r7
 8016ae2:	0020      	movs	r0, r4
 8016ae4:	0029      	movs	r1, r5
 8016ae6:	f7ea fefd 	bl	80018e4 <__aeabi_ddiv>
 8016aea:	f7ec f919 	bl	8002d20 <__aeabi_d2iz>
 8016aee:	9007      	str	r0, [sp, #28]
 8016af0:	f7ec f94c 	bl	8002d8c <__aeabi_i2d>
 8016af4:	0032      	movs	r2, r6
 8016af6:	003b      	movs	r3, r7
 8016af8:	f7eb faf6 	bl	80020e8 <__aeabi_dmul>
 8016afc:	0002      	movs	r2, r0
 8016afe:	000b      	movs	r3, r1
 8016b00:	0020      	movs	r0, r4
 8016b02:	0029      	movs	r1, r5
 8016b04:	f7eb fd5c 	bl	80025c0 <__aeabi_dsub>
 8016b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b0a:	001a      	movs	r2, r3
 8016b0c:	3201      	adds	r2, #1
 8016b0e:	920a      	str	r2, [sp, #40]	; 0x28
 8016b10:	9208      	str	r2, [sp, #32]
 8016b12:	9a07      	ldr	r2, [sp, #28]
 8016b14:	3230      	adds	r2, #48	; 0x30
 8016b16:	701a      	strb	r2, [r3, #0]
 8016b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d14f      	bne.n	8016bbe <_dtoa_r+0x71e>
 8016b1e:	0002      	movs	r2, r0
 8016b20:	000b      	movs	r3, r1
 8016b22:	f7ea fba3 	bl	800126c <__aeabi_dadd>
 8016b26:	0032      	movs	r2, r6
 8016b28:	003b      	movs	r3, r7
 8016b2a:	0004      	movs	r4, r0
 8016b2c:	000d      	movs	r5, r1
 8016b2e:	f7e9 fcaf 	bl	8000490 <__aeabi_dcmpgt>
 8016b32:	2800      	cmp	r0, #0
 8016b34:	d12e      	bne.n	8016b94 <_dtoa_r+0x6f4>
 8016b36:	0032      	movs	r2, r6
 8016b38:	003b      	movs	r3, r7
 8016b3a:	0020      	movs	r0, r4
 8016b3c:	0029      	movs	r1, r5
 8016b3e:	f7e9 fc8d 	bl	800045c <__aeabi_dcmpeq>
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d002      	beq.n	8016b4c <_dtoa_r+0x6ac>
 8016b46:	9b07      	ldr	r3, [sp, #28]
 8016b48:	07db      	lsls	r3, r3, #31
 8016b4a:	d423      	bmi.n	8016b94 <_dtoa_r+0x6f4>
 8016b4c:	9804      	ldr	r0, [sp, #16]
 8016b4e:	9905      	ldr	r1, [sp, #20]
 8016b50:	f000 ff7c 	bl	8017a4c <_Bfree>
 8016b54:	2300      	movs	r3, #0
 8016b56:	9a08      	ldr	r2, [sp, #32]
 8016b58:	9803      	ldr	r0, [sp, #12]
 8016b5a:	7013      	strb	r3, [r2, #0]
 8016b5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016b5e:	3001      	adds	r0, #1
 8016b60:	6018      	str	r0, [r3, #0]
 8016b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d100      	bne.n	8016b6a <_dtoa_r+0x6ca>
 8016b68:	e4cd      	b.n	8016506 <_dtoa_r+0x66>
 8016b6a:	601a      	str	r2, [r3, #0]
 8016b6c:	e4cb      	b.n	8016506 <_dtoa_r+0x66>
 8016b6e:	46c0      	nop			; (mov r8, r8)
 8016b70:	0801d290 	.word	0x0801d290
 8016b74:	0801d268 	.word	0x0801d268
 8016b78:	3ff00000 	.word	0x3ff00000
 8016b7c:	40240000 	.word	0x40240000
 8016b80:	401c0000 	.word	0x401c0000
 8016b84:	fcc00000 	.word	0xfcc00000
 8016b88:	40140000 	.word	0x40140000
 8016b8c:	7cc00000 	.word	0x7cc00000
 8016b90:	3fe00000 	.word	0x3fe00000
 8016b94:	9b03      	ldr	r3, [sp, #12]
 8016b96:	930e      	str	r3, [sp, #56]	; 0x38
 8016b98:	9b08      	ldr	r3, [sp, #32]
 8016b9a:	9308      	str	r3, [sp, #32]
 8016b9c:	3b01      	subs	r3, #1
 8016b9e:	781a      	ldrb	r2, [r3, #0]
 8016ba0:	2a39      	cmp	r2, #57	; 0x39
 8016ba2:	d108      	bne.n	8016bb6 <_dtoa_r+0x716>
 8016ba4:	9a06      	ldr	r2, [sp, #24]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d1f7      	bne.n	8016b9a <_dtoa_r+0x6fa>
 8016baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bac:	9906      	ldr	r1, [sp, #24]
 8016bae:	3201      	adds	r2, #1
 8016bb0:	920e      	str	r2, [sp, #56]	; 0x38
 8016bb2:	2230      	movs	r2, #48	; 0x30
 8016bb4:	700a      	strb	r2, [r1, #0]
 8016bb6:	781a      	ldrb	r2, [r3, #0]
 8016bb8:	3201      	adds	r2, #1
 8016bba:	701a      	strb	r2, [r3, #0]
 8016bbc:	e77c      	b.n	8016ab8 <_dtoa_r+0x618>
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	4ba7      	ldr	r3, [pc, #668]	; (8016e60 <_dtoa_r+0x9c0>)
 8016bc2:	f7eb fa91 	bl	80020e8 <__aeabi_dmul>
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	2300      	movs	r3, #0
 8016bca:	0004      	movs	r4, r0
 8016bcc:	000d      	movs	r5, r1
 8016bce:	f7e9 fc45 	bl	800045c <__aeabi_dcmpeq>
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d083      	beq.n	8016ade <_dtoa_r+0x63e>
 8016bd6:	e7b9      	b.n	8016b4c <_dtoa_r+0x6ac>
 8016bd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016bda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016bdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016bde:	2f00      	cmp	r7, #0
 8016be0:	d012      	beq.n	8016c08 <_dtoa_r+0x768>
 8016be2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016be4:	2a01      	cmp	r2, #1
 8016be6:	dc6e      	bgt.n	8016cc6 <_dtoa_r+0x826>
 8016be8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016bea:	2a00      	cmp	r2, #0
 8016bec:	d065      	beq.n	8016cba <_dtoa_r+0x81a>
 8016bee:	4a9d      	ldr	r2, [pc, #628]	; (8016e64 <_dtoa_r+0x9c4>)
 8016bf0:	189b      	adds	r3, r3, r2
 8016bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016bf4:	2101      	movs	r1, #1
 8016bf6:	18d2      	adds	r2, r2, r3
 8016bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8016bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016bfc:	9804      	ldr	r0, [sp, #16]
 8016bfe:	18d3      	adds	r3, r2, r3
 8016c00:	930c      	str	r3, [sp, #48]	; 0x30
 8016c02:	f001 f805 	bl	8017c10 <__i2b>
 8016c06:	0007      	movs	r7, r0
 8016c08:	2c00      	cmp	r4, #0
 8016c0a:	dd0e      	ble.n	8016c2a <_dtoa_r+0x78a>
 8016c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	dd0b      	ble.n	8016c2a <_dtoa_r+0x78a>
 8016c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c14:	0023      	movs	r3, r4
 8016c16:	4294      	cmp	r4, r2
 8016c18:	dd00      	ble.n	8016c1c <_dtoa_r+0x77c>
 8016c1a:	0013      	movs	r3, r2
 8016c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c1e:	1ae4      	subs	r4, r4, r3
 8016c20:	1ad2      	subs	r2, r2, r3
 8016c22:	920a      	str	r2, [sp, #40]	; 0x28
 8016c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c26:	1ad3      	subs	r3, r2, r3
 8016c28:	930c      	str	r3, [sp, #48]	; 0x30
 8016c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d01e      	beq.n	8016c6e <_dtoa_r+0x7ce>
 8016c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d05c      	beq.n	8016cf0 <_dtoa_r+0x850>
 8016c36:	2d00      	cmp	r5, #0
 8016c38:	dd10      	ble.n	8016c5c <_dtoa_r+0x7bc>
 8016c3a:	0039      	movs	r1, r7
 8016c3c:	002a      	movs	r2, r5
 8016c3e:	9804      	ldr	r0, [sp, #16]
 8016c40:	f001 f8ac 	bl	8017d9c <__pow5mult>
 8016c44:	9a05      	ldr	r2, [sp, #20]
 8016c46:	0001      	movs	r1, r0
 8016c48:	0007      	movs	r7, r0
 8016c4a:	9804      	ldr	r0, [sp, #16]
 8016c4c:	f000 fff6 	bl	8017c3c <__multiply>
 8016c50:	0006      	movs	r6, r0
 8016c52:	9905      	ldr	r1, [sp, #20]
 8016c54:	9804      	ldr	r0, [sp, #16]
 8016c56:	f000 fef9 	bl	8017a4c <_Bfree>
 8016c5a:	9605      	str	r6, [sp, #20]
 8016c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c5e:	1b5a      	subs	r2, r3, r5
 8016c60:	42ab      	cmp	r3, r5
 8016c62:	d004      	beq.n	8016c6e <_dtoa_r+0x7ce>
 8016c64:	9905      	ldr	r1, [sp, #20]
 8016c66:	9804      	ldr	r0, [sp, #16]
 8016c68:	f001 f898 	bl	8017d9c <__pow5mult>
 8016c6c:	9005      	str	r0, [sp, #20]
 8016c6e:	2101      	movs	r1, #1
 8016c70:	9804      	ldr	r0, [sp, #16]
 8016c72:	f000 ffcd 	bl	8017c10 <__i2b>
 8016c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c78:	0006      	movs	r6, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	dd3a      	ble.n	8016cf4 <_dtoa_r+0x854>
 8016c7e:	001a      	movs	r2, r3
 8016c80:	0001      	movs	r1, r0
 8016c82:	9804      	ldr	r0, [sp, #16]
 8016c84:	f001 f88a 	bl	8017d9c <__pow5mult>
 8016c88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016c8a:	0006      	movs	r6, r0
 8016c8c:	2500      	movs	r5, #0
 8016c8e:	2b01      	cmp	r3, #1
 8016c90:	dc38      	bgt.n	8016d04 <_dtoa_r+0x864>
 8016c92:	2500      	movs	r5, #0
 8016c94:	9b08      	ldr	r3, [sp, #32]
 8016c96:	42ab      	cmp	r3, r5
 8016c98:	d130      	bne.n	8016cfc <_dtoa_r+0x85c>
 8016c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c9c:	031b      	lsls	r3, r3, #12
 8016c9e:	42ab      	cmp	r3, r5
 8016ca0:	d12c      	bne.n	8016cfc <_dtoa_r+0x85c>
 8016ca2:	4b71      	ldr	r3, [pc, #452]	; (8016e68 <_dtoa_r+0x9c8>)
 8016ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ca6:	4213      	tst	r3, r2
 8016ca8:	d028      	beq.n	8016cfc <_dtoa_r+0x85c>
 8016caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cac:	3501      	adds	r5, #1
 8016cae:	3301      	adds	r3, #1
 8016cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8016cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8016cb8:	e020      	b.n	8016cfc <_dtoa_r+0x85c>
 8016cba:	2336      	movs	r3, #54	; 0x36
 8016cbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016cbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016cc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016cc2:	1a9b      	subs	r3, r3, r2
 8016cc4:	e795      	b.n	8016bf2 <_dtoa_r+0x752>
 8016cc6:	9b07      	ldr	r3, [sp, #28]
 8016cc8:	1e5d      	subs	r5, r3, #1
 8016cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ccc:	42ab      	cmp	r3, r5
 8016cce:	db07      	blt.n	8016ce0 <_dtoa_r+0x840>
 8016cd0:	1b5d      	subs	r5, r3, r5
 8016cd2:	9b07      	ldr	r3, [sp, #28]
 8016cd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	da8b      	bge.n	8016bf2 <_dtoa_r+0x752>
 8016cda:	1ae4      	subs	r4, r4, r3
 8016cdc:	2300      	movs	r3, #0
 8016cde:	e788      	b.n	8016bf2 <_dtoa_r+0x752>
 8016ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ce4:	1aeb      	subs	r3, r5, r3
 8016ce6:	18d3      	adds	r3, r2, r3
 8016ce8:	950d      	str	r5, [sp, #52]	; 0x34
 8016cea:	9314      	str	r3, [sp, #80]	; 0x50
 8016cec:	2500      	movs	r5, #0
 8016cee:	e7f0      	b.n	8016cd2 <_dtoa_r+0x832>
 8016cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016cf2:	e7b7      	b.n	8016c64 <_dtoa_r+0x7c4>
 8016cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016cf6:	2500      	movs	r5, #0
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	ddca      	ble.n	8016c92 <_dtoa_r+0x7f2>
 8016cfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cfe:	2001      	movs	r0, #1
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d008      	beq.n	8016d16 <_dtoa_r+0x876>
 8016d04:	6933      	ldr	r3, [r6, #16]
 8016d06:	3303      	adds	r3, #3
 8016d08:	009b      	lsls	r3, r3, #2
 8016d0a:	18f3      	adds	r3, r6, r3
 8016d0c:	6858      	ldr	r0, [r3, #4]
 8016d0e:	f000 ff37 	bl	8017b80 <__hi0bits>
 8016d12:	2320      	movs	r3, #32
 8016d14:	1a18      	subs	r0, r3, r0
 8016d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d18:	221f      	movs	r2, #31
 8016d1a:	1818      	adds	r0, r3, r0
 8016d1c:	0003      	movs	r3, r0
 8016d1e:	4013      	ands	r3, r2
 8016d20:	4210      	tst	r0, r2
 8016d22:	d046      	beq.n	8016db2 <_dtoa_r+0x912>
 8016d24:	3201      	adds	r2, #1
 8016d26:	1ad2      	subs	r2, r2, r3
 8016d28:	2a04      	cmp	r2, #4
 8016d2a:	dd3f      	ble.n	8016dac <_dtoa_r+0x90c>
 8016d2c:	221c      	movs	r2, #28
 8016d2e:	1ad3      	subs	r3, r2, r3
 8016d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d32:	18e4      	adds	r4, r4, r3
 8016d34:	18d2      	adds	r2, r2, r3
 8016d36:	920a      	str	r2, [sp, #40]	; 0x28
 8016d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d3a:	18d3      	adds	r3, r2, r3
 8016d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8016d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	dd05      	ble.n	8016d50 <_dtoa_r+0x8b0>
 8016d44:	001a      	movs	r2, r3
 8016d46:	9905      	ldr	r1, [sp, #20]
 8016d48:	9804      	ldr	r0, [sp, #16]
 8016d4a:	f001 f869 	bl	8017e20 <__lshift>
 8016d4e:	9005      	str	r0, [sp, #20]
 8016d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	dd05      	ble.n	8016d62 <_dtoa_r+0x8c2>
 8016d56:	0031      	movs	r1, r6
 8016d58:	001a      	movs	r2, r3
 8016d5a:	9804      	ldr	r0, [sp, #16]
 8016d5c:	f001 f860 	bl	8017e20 <__lshift>
 8016d60:	0006      	movs	r6, r0
 8016d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d026      	beq.n	8016db6 <_dtoa_r+0x916>
 8016d68:	0031      	movs	r1, r6
 8016d6a:	9805      	ldr	r0, [sp, #20]
 8016d6c:	f001 f8c6 	bl	8017efc <__mcmp>
 8016d70:	2800      	cmp	r0, #0
 8016d72:	da20      	bge.n	8016db6 <_dtoa_r+0x916>
 8016d74:	9b03      	ldr	r3, [sp, #12]
 8016d76:	220a      	movs	r2, #10
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	9303      	str	r3, [sp, #12]
 8016d7c:	9905      	ldr	r1, [sp, #20]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	9804      	ldr	r0, [sp, #16]
 8016d82:	f000 fe6d 	bl	8017a60 <__multadd>
 8016d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d88:	9005      	str	r0, [sp, #20]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d100      	bne.n	8016d90 <_dtoa_r+0x8f0>
 8016d8e:	e15a      	b.n	8017046 <_dtoa_r+0xba6>
 8016d90:	2300      	movs	r3, #0
 8016d92:	0039      	movs	r1, r7
 8016d94:	220a      	movs	r2, #10
 8016d96:	9804      	ldr	r0, [sp, #16]
 8016d98:	f000 fe62 	bl	8017a60 <__multadd>
 8016d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d9e:	0007      	movs	r7, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	dc47      	bgt.n	8016e34 <_dtoa_r+0x994>
 8016da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016da6:	2b02      	cmp	r3, #2
 8016da8:	dc0d      	bgt.n	8016dc6 <_dtoa_r+0x926>
 8016daa:	e043      	b.n	8016e34 <_dtoa_r+0x994>
 8016dac:	2a04      	cmp	r2, #4
 8016dae:	d0c6      	beq.n	8016d3e <_dtoa_r+0x89e>
 8016db0:	0013      	movs	r3, r2
 8016db2:	331c      	adds	r3, #28
 8016db4:	e7bc      	b.n	8016d30 <_dtoa_r+0x890>
 8016db6:	9b07      	ldr	r3, [sp, #28]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	dc35      	bgt.n	8016e28 <_dtoa_r+0x988>
 8016dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016dbe:	2b02      	cmp	r3, #2
 8016dc0:	dd32      	ble.n	8016e28 <_dtoa_r+0x988>
 8016dc2:	9b07      	ldr	r3, [sp, #28]
 8016dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d10c      	bne.n	8016de6 <_dtoa_r+0x946>
 8016dcc:	0031      	movs	r1, r6
 8016dce:	2205      	movs	r2, #5
 8016dd0:	9804      	ldr	r0, [sp, #16]
 8016dd2:	f000 fe45 	bl	8017a60 <__multadd>
 8016dd6:	0006      	movs	r6, r0
 8016dd8:	0001      	movs	r1, r0
 8016dda:	9805      	ldr	r0, [sp, #20]
 8016ddc:	f001 f88e 	bl	8017efc <__mcmp>
 8016de0:	2800      	cmp	r0, #0
 8016de2:	dd00      	ble.n	8016de6 <_dtoa_r+0x946>
 8016de4:	e5af      	b.n	8016946 <_dtoa_r+0x4a6>
 8016de6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016de8:	43db      	mvns	r3, r3
 8016dea:	9303      	str	r3, [sp, #12]
 8016dec:	9b06      	ldr	r3, [sp, #24]
 8016dee:	9308      	str	r3, [sp, #32]
 8016df0:	2500      	movs	r5, #0
 8016df2:	0031      	movs	r1, r6
 8016df4:	9804      	ldr	r0, [sp, #16]
 8016df6:	f000 fe29 	bl	8017a4c <_Bfree>
 8016dfa:	2f00      	cmp	r7, #0
 8016dfc:	d100      	bne.n	8016e00 <_dtoa_r+0x960>
 8016dfe:	e6a5      	b.n	8016b4c <_dtoa_r+0x6ac>
 8016e00:	2d00      	cmp	r5, #0
 8016e02:	d005      	beq.n	8016e10 <_dtoa_r+0x970>
 8016e04:	42bd      	cmp	r5, r7
 8016e06:	d003      	beq.n	8016e10 <_dtoa_r+0x970>
 8016e08:	0029      	movs	r1, r5
 8016e0a:	9804      	ldr	r0, [sp, #16]
 8016e0c:	f000 fe1e 	bl	8017a4c <_Bfree>
 8016e10:	0039      	movs	r1, r7
 8016e12:	9804      	ldr	r0, [sp, #16]
 8016e14:	f000 fe1a 	bl	8017a4c <_Bfree>
 8016e18:	e698      	b.n	8016b4c <_dtoa_r+0x6ac>
 8016e1a:	2600      	movs	r6, #0
 8016e1c:	0037      	movs	r7, r6
 8016e1e:	e7e2      	b.n	8016de6 <_dtoa_r+0x946>
 8016e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e22:	0037      	movs	r7, r6
 8016e24:	9303      	str	r3, [sp, #12]
 8016e26:	e58e      	b.n	8016946 <_dtoa_r+0x4a6>
 8016e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d100      	bne.n	8016e30 <_dtoa_r+0x990>
 8016e2e:	e0c2      	b.n	8016fb6 <_dtoa_r+0xb16>
 8016e30:	9b07      	ldr	r3, [sp, #28]
 8016e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e34:	2c00      	cmp	r4, #0
 8016e36:	dd05      	ble.n	8016e44 <_dtoa_r+0x9a4>
 8016e38:	0039      	movs	r1, r7
 8016e3a:	0022      	movs	r2, r4
 8016e3c:	9804      	ldr	r0, [sp, #16]
 8016e3e:	f000 ffef 	bl	8017e20 <__lshift>
 8016e42:	0007      	movs	r7, r0
 8016e44:	0038      	movs	r0, r7
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	d021      	beq.n	8016e8e <_dtoa_r+0x9ee>
 8016e4a:	6879      	ldr	r1, [r7, #4]
 8016e4c:	9804      	ldr	r0, [sp, #16]
 8016e4e:	f000 fdd5 	bl	80179fc <_Balloc>
 8016e52:	1e04      	subs	r4, r0, #0
 8016e54:	d10e      	bne.n	8016e74 <_dtoa_r+0x9d4>
 8016e56:	0002      	movs	r2, r0
 8016e58:	4b04      	ldr	r3, [pc, #16]	; (8016e6c <_dtoa_r+0x9cc>)
 8016e5a:	4905      	ldr	r1, [pc, #20]	; (8016e70 <_dtoa_r+0x9d0>)
 8016e5c:	e450      	b.n	8016700 <_dtoa_r+0x260>
 8016e5e:	46c0      	nop			; (mov r8, r8)
 8016e60:	40240000 	.word	0x40240000
 8016e64:	00000433 	.word	0x00000433
 8016e68:	7ff00000 	.word	0x7ff00000
 8016e6c:	0801d121 	.word	0x0801d121
 8016e70:	000002ea 	.word	0x000002ea
 8016e74:	0039      	movs	r1, r7
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	310c      	adds	r1, #12
 8016e7a:	1c9a      	adds	r2, r3, #2
 8016e7c:	0092      	lsls	r2, r2, #2
 8016e7e:	300c      	adds	r0, #12
 8016e80:	f7fc fe82 	bl	8013b88 <memcpy>
 8016e84:	2201      	movs	r2, #1
 8016e86:	0021      	movs	r1, r4
 8016e88:	9804      	ldr	r0, [sp, #16]
 8016e8a:	f000 ffc9 	bl	8017e20 <__lshift>
 8016e8e:	9b06      	ldr	r3, [sp, #24]
 8016e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e92:	9307      	str	r3, [sp, #28]
 8016e94:	3b01      	subs	r3, #1
 8016e96:	189b      	adds	r3, r3, r2
 8016e98:	2201      	movs	r2, #1
 8016e9a:	003d      	movs	r5, r7
 8016e9c:	0007      	movs	r7, r0
 8016e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8016ea0:	9b08      	ldr	r3, [sp, #32]
 8016ea2:	4013      	ands	r3, r2
 8016ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8016ea6:	0031      	movs	r1, r6
 8016ea8:	9805      	ldr	r0, [sp, #20]
 8016eaa:	f7ff fa6d 	bl	8016388 <quorem>
 8016eae:	0029      	movs	r1, r5
 8016eb0:	0004      	movs	r4, r0
 8016eb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8016eb4:	9805      	ldr	r0, [sp, #20]
 8016eb6:	f001 f821 	bl	8017efc <__mcmp>
 8016eba:	003a      	movs	r2, r7
 8016ebc:	900c      	str	r0, [sp, #48]	; 0x30
 8016ebe:	0031      	movs	r1, r6
 8016ec0:	9804      	ldr	r0, [sp, #16]
 8016ec2:	f001 f837 	bl	8017f34 <__mdiff>
 8016ec6:	68c3      	ldr	r3, [r0, #12]
 8016ec8:	3430      	adds	r4, #48	; 0x30
 8016eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ecc:	2301      	movs	r3, #1
 8016ece:	930a      	str	r3, [sp, #40]	; 0x28
 8016ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed2:	9008      	str	r0, [sp, #32]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d104      	bne.n	8016ee2 <_dtoa_r+0xa42>
 8016ed8:	0001      	movs	r1, r0
 8016eda:	9805      	ldr	r0, [sp, #20]
 8016edc:	f001 f80e 	bl	8017efc <__mcmp>
 8016ee0:	900a      	str	r0, [sp, #40]	; 0x28
 8016ee2:	9908      	ldr	r1, [sp, #32]
 8016ee4:	9804      	ldr	r0, [sp, #16]
 8016ee6:	f000 fdb1 	bl	8017a4c <_Bfree>
 8016eea:	9b07      	ldr	r3, [sp, #28]
 8016eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eee:	3301      	adds	r3, #1
 8016ef0:	9308      	str	r3, [sp, #32]
 8016ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ef4:	4313      	orrs	r3, r2
 8016ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ef8:	4313      	orrs	r3, r2
 8016efa:	d109      	bne.n	8016f10 <_dtoa_r+0xa70>
 8016efc:	2c39      	cmp	r4, #57	; 0x39
 8016efe:	d022      	beq.n	8016f46 <_dtoa_r+0xaa6>
 8016f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	dd01      	ble.n	8016f0a <_dtoa_r+0xa6a>
 8016f06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016f08:	3431      	adds	r4, #49	; 0x31
 8016f0a:	9b07      	ldr	r3, [sp, #28]
 8016f0c:	701c      	strb	r4, [r3, #0]
 8016f0e:	e770      	b.n	8016df2 <_dtoa_r+0x952>
 8016f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	db04      	blt.n	8016f20 <_dtoa_r+0xa80>
 8016f16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016f18:	4313      	orrs	r3, r2
 8016f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f1c:	4313      	orrs	r3, r2
 8016f1e:	d11e      	bne.n	8016f5e <_dtoa_r+0xabe>
 8016f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	ddf1      	ble.n	8016f0a <_dtoa_r+0xa6a>
 8016f26:	9905      	ldr	r1, [sp, #20]
 8016f28:	2201      	movs	r2, #1
 8016f2a:	9804      	ldr	r0, [sp, #16]
 8016f2c:	f000 ff78 	bl	8017e20 <__lshift>
 8016f30:	0031      	movs	r1, r6
 8016f32:	9005      	str	r0, [sp, #20]
 8016f34:	f000 ffe2 	bl	8017efc <__mcmp>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	dc02      	bgt.n	8016f42 <_dtoa_r+0xaa2>
 8016f3c:	d1e5      	bne.n	8016f0a <_dtoa_r+0xa6a>
 8016f3e:	07e3      	lsls	r3, r4, #31
 8016f40:	d5e3      	bpl.n	8016f0a <_dtoa_r+0xa6a>
 8016f42:	2c39      	cmp	r4, #57	; 0x39
 8016f44:	d1df      	bne.n	8016f06 <_dtoa_r+0xa66>
 8016f46:	2339      	movs	r3, #57	; 0x39
 8016f48:	9a07      	ldr	r2, [sp, #28]
 8016f4a:	7013      	strb	r3, [r2, #0]
 8016f4c:	9b08      	ldr	r3, [sp, #32]
 8016f4e:	9308      	str	r3, [sp, #32]
 8016f50:	3b01      	subs	r3, #1
 8016f52:	781a      	ldrb	r2, [r3, #0]
 8016f54:	2a39      	cmp	r2, #57	; 0x39
 8016f56:	d063      	beq.n	8017020 <_dtoa_r+0xb80>
 8016f58:	3201      	adds	r2, #1
 8016f5a:	701a      	strb	r2, [r3, #0]
 8016f5c:	e749      	b.n	8016df2 <_dtoa_r+0x952>
 8016f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	dd03      	ble.n	8016f6c <_dtoa_r+0xacc>
 8016f64:	2c39      	cmp	r4, #57	; 0x39
 8016f66:	d0ee      	beq.n	8016f46 <_dtoa_r+0xaa6>
 8016f68:	3401      	adds	r4, #1
 8016f6a:	e7ce      	b.n	8016f0a <_dtoa_r+0xa6a>
 8016f6c:	9b07      	ldr	r3, [sp, #28]
 8016f6e:	9a07      	ldr	r2, [sp, #28]
 8016f70:	701c      	strb	r4, [r3, #0]
 8016f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f74:	4293      	cmp	r3, r2
 8016f76:	d03e      	beq.n	8016ff6 <_dtoa_r+0xb56>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	220a      	movs	r2, #10
 8016f7c:	9905      	ldr	r1, [sp, #20]
 8016f7e:	9804      	ldr	r0, [sp, #16]
 8016f80:	f000 fd6e 	bl	8017a60 <__multadd>
 8016f84:	2300      	movs	r3, #0
 8016f86:	9005      	str	r0, [sp, #20]
 8016f88:	220a      	movs	r2, #10
 8016f8a:	0029      	movs	r1, r5
 8016f8c:	9804      	ldr	r0, [sp, #16]
 8016f8e:	42bd      	cmp	r5, r7
 8016f90:	d106      	bne.n	8016fa0 <_dtoa_r+0xb00>
 8016f92:	f000 fd65 	bl	8017a60 <__multadd>
 8016f96:	0005      	movs	r5, r0
 8016f98:	0007      	movs	r7, r0
 8016f9a:	9b08      	ldr	r3, [sp, #32]
 8016f9c:	9307      	str	r3, [sp, #28]
 8016f9e:	e782      	b.n	8016ea6 <_dtoa_r+0xa06>
 8016fa0:	f000 fd5e 	bl	8017a60 <__multadd>
 8016fa4:	0039      	movs	r1, r7
 8016fa6:	0005      	movs	r5, r0
 8016fa8:	2300      	movs	r3, #0
 8016faa:	220a      	movs	r2, #10
 8016fac:	9804      	ldr	r0, [sp, #16]
 8016fae:	f000 fd57 	bl	8017a60 <__multadd>
 8016fb2:	0007      	movs	r7, r0
 8016fb4:	e7f1      	b.n	8016f9a <_dtoa_r+0xafa>
 8016fb6:	9b07      	ldr	r3, [sp, #28]
 8016fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fba:	2500      	movs	r5, #0
 8016fbc:	0031      	movs	r1, r6
 8016fbe:	9805      	ldr	r0, [sp, #20]
 8016fc0:	f7ff f9e2 	bl	8016388 <quorem>
 8016fc4:	9b06      	ldr	r3, [sp, #24]
 8016fc6:	3030      	adds	r0, #48	; 0x30
 8016fc8:	5558      	strb	r0, [r3, r5]
 8016fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fcc:	3501      	adds	r5, #1
 8016fce:	0004      	movs	r4, r0
 8016fd0:	42ab      	cmp	r3, r5
 8016fd2:	dd07      	ble.n	8016fe4 <_dtoa_r+0xb44>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	220a      	movs	r2, #10
 8016fd8:	9905      	ldr	r1, [sp, #20]
 8016fda:	9804      	ldr	r0, [sp, #16]
 8016fdc:	f000 fd40 	bl	8017a60 <__multadd>
 8016fe0:	9005      	str	r0, [sp, #20]
 8016fe2:	e7eb      	b.n	8016fbc <_dtoa_r+0xb1c>
 8016fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	dd00      	ble.n	8016fee <_dtoa_r+0xb4e>
 8016fec:	0018      	movs	r0, r3
 8016fee:	2500      	movs	r5, #0
 8016ff0:	9b06      	ldr	r3, [sp, #24]
 8016ff2:	181b      	adds	r3, r3, r0
 8016ff4:	9308      	str	r3, [sp, #32]
 8016ff6:	9905      	ldr	r1, [sp, #20]
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	9804      	ldr	r0, [sp, #16]
 8016ffc:	f000 ff10 	bl	8017e20 <__lshift>
 8017000:	0031      	movs	r1, r6
 8017002:	9005      	str	r0, [sp, #20]
 8017004:	f000 ff7a 	bl	8017efc <__mcmp>
 8017008:	2800      	cmp	r0, #0
 801700a:	dc9f      	bgt.n	8016f4c <_dtoa_r+0xaac>
 801700c:	d101      	bne.n	8017012 <_dtoa_r+0xb72>
 801700e:	07e3      	lsls	r3, r4, #31
 8017010:	d49c      	bmi.n	8016f4c <_dtoa_r+0xaac>
 8017012:	9b08      	ldr	r3, [sp, #32]
 8017014:	9308      	str	r3, [sp, #32]
 8017016:	3b01      	subs	r3, #1
 8017018:	781a      	ldrb	r2, [r3, #0]
 801701a:	2a30      	cmp	r2, #48	; 0x30
 801701c:	d0fa      	beq.n	8017014 <_dtoa_r+0xb74>
 801701e:	e6e8      	b.n	8016df2 <_dtoa_r+0x952>
 8017020:	9a06      	ldr	r2, [sp, #24]
 8017022:	429a      	cmp	r2, r3
 8017024:	d193      	bne.n	8016f4e <_dtoa_r+0xaae>
 8017026:	9b03      	ldr	r3, [sp, #12]
 8017028:	3301      	adds	r3, #1
 801702a:	9303      	str	r3, [sp, #12]
 801702c:	2331      	movs	r3, #49	; 0x31
 801702e:	7013      	strb	r3, [r2, #0]
 8017030:	e6df      	b.n	8016df2 <_dtoa_r+0x952>
 8017032:	4b09      	ldr	r3, [pc, #36]	; (8017058 <_dtoa_r+0xbb8>)
 8017034:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017036:	9306      	str	r3, [sp, #24]
 8017038:	4b08      	ldr	r3, [pc, #32]	; (801705c <_dtoa_r+0xbbc>)
 801703a:	2a00      	cmp	r2, #0
 801703c:	d001      	beq.n	8017042 <_dtoa_r+0xba2>
 801703e:	f7ff fa60 	bl	8016502 <_dtoa_r+0x62>
 8017042:	f7ff fa60 	bl	8016506 <_dtoa_r+0x66>
 8017046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017048:	2b00      	cmp	r3, #0
 801704a:	dcb6      	bgt.n	8016fba <_dtoa_r+0xb1a>
 801704c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801704e:	2b02      	cmp	r3, #2
 8017050:	dd00      	ble.n	8017054 <_dtoa_r+0xbb4>
 8017052:	e6b8      	b.n	8016dc6 <_dtoa_r+0x926>
 8017054:	e7b1      	b.n	8016fba <_dtoa_r+0xb1a>
 8017056:	46c0      	nop			; (mov r8, r8)
 8017058:	0801d118 	.word	0x0801d118
 801705c:	0801d120 	.word	0x0801d120

08017060 <__libc_fini_array>:
 8017060:	b570      	push	{r4, r5, r6, lr}
 8017062:	4d07      	ldr	r5, [pc, #28]	; (8017080 <__libc_fini_array+0x20>)
 8017064:	4c07      	ldr	r4, [pc, #28]	; (8017084 <__libc_fini_array+0x24>)
 8017066:	1b64      	subs	r4, r4, r5
 8017068:	10a4      	asrs	r4, r4, #2
 801706a:	2c00      	cmp	r4, #0
 801706c:	d102      	bne.n	8017074 <__libc_fini_array+0x14>
 801706e:	f002 fe17 	bl	8019ca0 <_fini>
 8017072:	bd70      	pop	{r4, r5, r6, pc}
 8017074:	3c01      	subs	r4, #1
 8017076:	00a3      	lsls	r3, r4, #2
 8017078:	58eb      	ldr	r3, [r5, r3]
 801707a:	4798      	blx	r3
 801707c:	e7f5      	b.n	801706a <__libc_fini_array+0xa>
 801707e:	46c0      	nop			; (mov r8, r8)
 8017080:	0801d3d0 	.word	0x0801d3d0
 8017084:	0801d3d4 	.word	0x0801d3d4

08017088 <_malloc_trim_r>:
 8017088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801708a:	0004      	movs	r4, r0
 801708c:	2008      	movs	r0, #8
 801708e:	000d      	movs	r5, r1
 8017090:	f7ff f95a 	bl	8016348 <sysconf>
 8017094:	0006      	movs	r6, r0
 8017096:	0020      	movs	r0, r4
 8017098:	f7fc fd88 	bl	8013bac <__malloc_lock>
 801709c:	2203      	movs	r2, #3
 801709e:	4f21      	ldr	r7, [pc, #132]	; (8017124 <_malloc_trim_r+0x9c>)
 80170a0:	0031      	movs	r1, r6
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	4393      	bics	r3, r2
 80170a8:	1b58      	subs	r0, r3, r5
 80170aa:	3811      	subs	r0, #17
 80170ac:	1980      	adds	r0, r0, r6
 80170ae:	9301      	str	r3, [sp, #4]
 80170b0:	f7e9 f84e 	bl	8000150 <__udivsi3>
 80170b4:	1e45      	subs	r5, r0, #1
 80170b6:	4375      	muls	r5, r6
 80170b8:	42ae      	cmp	r6, r5
 80170ba:	dd04      	ble.n	80170c6 <_malloc_trim_r+0x3e>
 80170bc:	0020      	movs	r0, r4
 80170be:	f7fc fd7d 	bl	8013bbc <__malloc_unlock>
 80170c2:	2000      	movs	r0, #0
 80170c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80170c6:	2100      	movs	r1, #0
 80170c8:	0020      	movs	r0, r4
 80170ca:	f7fc ff45 	bl	8013f58 <_sbrk_r>
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	9a01      	ldr	r2, [sp, #4]
 80170d2:	189b      	adds	r3, r3, r2
 80170d4:	4298      	cmp	r0, r3
 80170d6:	d1f1      	bne.n	80170bc <_malloc_trim_r+0x34>
 80170d8:	0020      	movs	r0, r4
 80170da:	4269      	negs	r1, r5
 80170dc:	f7fc ff3c 	bl	8013f58 <_sbrk_r>
 80170e0:	1c43      	adds	r3, r0, #1
 80170e2:	d110      	bne.n	8017106 <_malloc_trim_r+0x7e>
 80170e4:	2100      	movs	r1, #0
 80170e6:	0020      	movs	r0, r4
 80170e8:	f7fc ff36 	bl	8013f58 <_sbrk_r>
 80170ec:	68ba      	ldr	r2, [r7, #8]
 80170ee:	1a81      	subs	r1, r0, r2
 80170f0:	290f      	cmp	r1, #15
 80170f2:	dde3      	ble.n	80170bc <_malloc_trim_r+0x34>
 80170f4:	4b0c      	ldr	r3, [pc, #48]	; (8017128 <_malloc_trim_r+0xa0>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	1ac0      	subs	r0, r0, r3
 80170fa:	4b0c      	ldr	r3, [pc, #48]	; (801712c <_malloc_trim_r+0xa4>)
 80170fc:	6018      	str	r0, [r3, #0]
 80170fe:	2301      	movs	r3, #1
 8017100:	430b      	orrs	r3, r1
 8017102:	6053      	str	r3, [r2, #4]
 8017104:	e7da      	b.n	80170bc <_malloc_trim_r+0x34>
 8017106:	2601      	movs	r6, #1
 8017108:	9b01      	ldr	r3, [sp, #4]
 801710a:	68ba      	ldr	r2, [r7, #8]
 801710c:	1b5b      	subs	r3, r3, r5
 801710e:	4333      	orrs	r3, r6
 8017110:	6053      	str	r3, [r2, #4]
 8017112:	4b06      	ldr	r3, [pc, #24]	; (801712c <_malloc_trim_r+0xa4>)
 8017114:	0020      	movs	r0, r4
 8017116:	681a      	ldr	r2, [r3, #0]
 8017118:	1b55      	subs	r5, r2, r5
 801711a:	601d      	str	r5, [r3, #0]
 801711c:	f7fc fd4e 	bl	8013bbc <__malloc_unlock>
 8017120:	0030      	movs	r0, r6
 8017122:	e7cf      	b.n	80170c4 <_malloc_trim_r+0x3c>
 8017124:	20000500 	.word	0x20000500
 8017128:	20000908 	.word	0x20000908
 801712c:	20006db0 	.word	0x20006db0

08017130 <_free_r>:
 8017130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017132:	1e0d      	subs	r5, r1, #0
 8017134:	9001      	str	r0, [sp, #4]
 8017136:	d02d      	beq.n	8017194 <_free_r+0x64>
 8017138:	f7fc fd38 	bl	8013bac <__malloc_lock>
 801713c:	2301      	movs	r3, #1
 801713e:	0029      	movs	r1, r5
 8017140:	469c      	mov	ip, r3
 8017142:	3908      	subs	r1, #8
 8017144:	684f      	ldr	r7, [r1, #4]
 8017146:	4662      	mov	r2, ip
 8017148:	003b      	movs	r3, r7
 801714a:	4666      	mov	r6, ip
 801714c:	4393      	bics	r3, r2
 801714e:	18c8      	adds	r0, r1, r3
 8017150:	6845      	ldr	r5, [r0, #4]
 8017152:	3202      	adds	r2, #2
 8017154:	4395      	bics	r5, r2
 8017156:	4a4a      	ldr	r2, [pc, #296]	; (8017280 <_free_r+0x150>)
 8017158:	4037      	ands	r7, r6
 801715a:	6896      	ldr	r6, [r2, #8]
 801715c:	4286      	cmp	r6, r0
 801715e:	d11a      	bne.n	8017196 <_free_r+0x66>
 8017160:	195b      	adds	r3, r3, r5
 8017162:	2f00      	cmp	r7, #0
 8017164:	d106      	bne.n	8017174 <_free_r+0x44>
 8017166:	6808      	ldr	r0, [r1, #0]
 8017168:	1a09      	subs	r1, r1, r0
 801716a:	688d      	ldr	r5, [r1, #8]
 801716c:	181b      	adds	r3, r3, r0
 801716e:	68c8      	ldr	r0, [r1, #12]
 8017170:	60e8      	str	r0, [r5, #12]
 8017172:	6085      	str	r5, [r0, #8]
 8017174:	2001      	movs	r0, #1
 8017176:	4318      	orrs	r0, r3
 8017178:	6048      	str	r0, [r1, #4]
 801717a:	6091      	str	r1, [r2, #8]
 801717c:	4a41      	ldr	r2, [pc, #260]	; (8017284 <_free_r+0x154>)
 801717e:	6812      	ldr	r2, [r2, #0]
 8017180:	429a      	cmp	r2, r3
 8017182:	d804      	bhi.n	801718e <_free_r+0x5e>
 8017184:	4b40      	ldr	r3, [pc, #256]	; (8017288 <_free_r+0x158>)
 8017186:	9801      	ldr	r0, [sp, #4]
 8017188:	6819      	ldr	r1, [r3, #0]
 801718a:	f7ff ff7d 	bl	8017088 <_malloc_trim_r>
 801718e:	9801      	ldr	r0, [sp, #4]
 8017190:	f7fc fd14 	bl	8013bbc <__malloc_unlock>
 8017194:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017196:	2600      	movs	r6, #0
 8017198:	6045      	str	r5, [r0, #4]
 801719a:	42b7      	cmp	r7, r6
 801719c:	d109      	bne.n	80171b2 <_free_r+0x82>
 801719e:	680f      	ldr	r7, [r1, #0]
 80171a0:	4c3a      	ldr	r4, [pc, #232]	; (801728c <_free_r+0x15c>)
 80171a2:	1bc9      	subs	r1, r1, r7
 80171a4:	19db      	adds	r3, r3, r7
 80171a6:	688f      	ldr	r7, [r1, #8]
 80171a8:	42a7      	cmp	r7, r4
 80171aa:	d02c      	beq.n	8017206 <_free_r+0xd6>
 80171ac:	68cc      	ldr	r4, [r1, #12]
 80171ae:	60fc      	str	r4, [r7, #12]
 80171b0:	60a7      	str	r7, [r4, #8]
 80171b2:	1947      	adds	r7, r0, r5
 80171b4:	687c      	ldr	r4, [r7, #4]
 80171b6:	2701      	movs	r7, #1
 80171b8:	423c      	tst	r4, r7
 80171ba:	d10b      	bne.n	80171d4 <_free_r+0xa4>
 80171bc:	195b      	adds	r3, r3, r5
 80171be:	6885      	ldr	r5, [r0, #8]
 80171c0:	2e00      	cmp	r6, #0
 80171c2:	d122      	bne.n	801720a <_free_r+0xda>
 80171c4:	4c31      	ldr	r4, [pc, #196]	; (801728c <_free_r+0x15c>)
 80171c6:	42a5      	cmp	r5, r4
 80171c8:	d11f      	bne.n	801720a <_free_r+0xda>
 80171ca:	003e      	movs	r6, r7
 80171cc:	6151      	str	r1, [r2, #20]
 80171ce:	6111      	str	r1, [r2, #16]
 80171d0:	60cd      	str	r5, [r1, #12]
 80171d2:	608d      	str	r5, [r1, #8]
 80171d4:	2501      	movs	r5, #1
 80171d6:	0028      	movs	r0, r5
 80171d8:	4318      	orrs	r0, r3
 80171da:	6048      	str	r0, [r1, #4]
 80171dc:	50cb      	str	r3, [r1, r3]
 80171de:	2e00      	cmp	r6, #0
 80171e0:	d1d5      	bne.n	801718e <_free_r+0x5e>
 80171e2:	2080      	movs	r0, #128	; 0x80
 80171e4:	0080      	lsls	r0, r0, #2
 80171e6:	4283      	cmp	r3, r0
 80171e8:	d213      	bcs.n	8017212 <_free_r+0xe2>
 80171ea:	08d8      	lsrs	r0, r3, #3
 80171ec:	095b      	lsrs	r3, r3, #5
 80171ee:	409d      	lsls	r5, r3
 80171f0:	6853      	ldr	r3, [r2, #4]
 80171f2:	00c0      	lsls	r0, r0, #3
 80171f4:	431d      	orrs	r5, r3
 80171f6:	6055      	str	r5, [r2, #4]
 80171f8:	1882      	adds	r2, r0, r2
 80171fa:	6893      	ldr	r3, [r2, #8]
 80171fc:	60ca      	str	r2, [r1, #12]
 80171fe:	608b      	str	r3, [r1, #8]
 8017200:	6091      	str	r1, [r2, #8]
 8017202:	60d9      	str	r1, [r3, #12]
 8017204:	e7c3      	b.n	801718e <_free_r+0x5e>
 8017206:	4666      	mov	r6, ip
 8017208:	e7d3      	b.n	80171b2 <_free_r+0x82>
 801720a:	68c0      	ldr	r0, [r0, #12]
 801720c:	60e8      	str	r0, [r5, #12]
 801720e:	6085      	str	r5, [r0, #8]
 8017210:	e7e0      	b.n	80171d4 <_free_r+0xa4>
 8017212:	0a5d      	lsrs	r5, r3, #9
 8017214:	2d04      	cmp	r5, #4
 8017216:	d812      	bhi.n	801723e <_free_r+0x10e>
 8017218:	0998      	lsrs	r0, r3, #6
 801721a:	3038      	adds	r0, #56	; 0x38
 801721c:	00c6      	lsls	r6, r0, #3
 801721e:	18b6      	adds	r6, r6, r2
 8017220:	68b5      	ldr	r5, [r6, #8]
 8017222:	2703      	movs	r7, #3
 8017224:	42ae      	cmp	r6, r5
 8017226:	d125      	bne.n	8017274 <_free_r+0x144>
 8017228:	2301      	movs	r3, #1
 801722a:	1080      	asrs	r0, r0, #2
 801722c:	4083      	lsls	r3, r0
 801722e:	6850      	ldr	r0, [r2, #4]
 8017230:	4303      	orrs	r3, r0
 8017232:	6053      	str	r3, [r2, #4]
 8017234:	60ce      	str	r6, [r1, #12]
 8017236:	608d      	str	r5, [r1, #8]
 8017238:	60b1      	str	r1, [r6, #8]
 801723a:	60e9      	str	r1, [r5, #12]
 801723c:	e7a7      	b.n	801718e <_free_r+0x5e>
 801723e:	2d14      	cmp	r5, #20
 8017240:	d802      	bhi.n	8017248 <_free_r+0x118>
 8017242:	0028      	movs	r0, r5
 8017244:	305b      	adds	r0, #91	; 0x5b
 8017246:	e7e9      	b.n	801721c <_free_r+0xec>
 8017248:	2d54      	cmp	r5, #84	; 0x54
 801724a:	d802      	bhi.n	8017252 <_free_r+0x122>
 801724c:	0b18      	lsrs	r0, r3, #12
 801724e:	306e      	adds	r0, #110	; 0x6e
 8017250:	e7e4      	b.n	801721c <_free_r+0xec>
 8017252:	20aa      	movs	r0, #170	; 0xaa
 8017254:	0040      	lsls	r0, r0, #1
 8017256:	4285      	cmp	r5, r0
 8017258:	d802      	bhi.n	8017260 <_free_r+0x130>
 801725a:	0bd8      	lsrs	r0, r3, #15
 801725c:	3077      	adds	r0, #119	; 0x77
 801725e:	e7dd      	b.n	801721c <_free_r+0xec>
 8017260:	4e0b      	ldr	r6, [pc, #44]	; (8017290 <_free_r+0x160>)
 8017262:	207e      	movs	r0, #126	; 0x7e
 8017264:	42b5      	cmp	r5, r6
 8017266:	d8d9      	bhi.n	801721c <_free_r+0xec>
 8017268:	0c98      	lsrs	r0, r3, #18
 801726a:	307c      	adds	r0, #124	; 0x7c
 801726c:	e7d6      	b.n	801721c <_free_r+0xec>
 801726e:	68ad      	ldr	r5, [r5, #8]
 8017270:	42ae      	cmp	r6, r5
 8017272:	d003      	beq.n	801727c <_free_r+0x14c>
 8017274:	686a      	ldr	r2, [r5, #4]
 8017276:	43ba      	bics	r2, r7
 8017278:	429a      	cmp	r2, r3
 801727a:	d8f8      	bhi.n	801726e <_free_r+0x13e>
 801727c:	68ee      	ldr	r6, [r5, #12]
 801727e:	e7d9      	b.n	8017234 <_free_r+0x104>
 8017280:	20000500 	.word	0x20000500
 8017284:	2000090c 	.word	0x2000090c
 8017288:	20006de0 	.word	0x20006de0
 801728c:	20000508 	.word	0x20000508
 8017290:	00000554 	.word	0x00000554

08017294 <rshift>:
 8017294:	0002      	movs	r2, r0
 8017296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017298:	6904      	ldr	r4, [r0, #16]
 801729a:	3214      	adds	r2, #20
 801729c:	0013      	movs	r3, r2
 801729e:	b085      	sub	sp, #20
 80172a0:	114f      	asrs	r7, r1, #5
 80172a2:	42bc      	cmp	r4, r7
 80172a4:	dd31      	ble.n	801730a <rshift+0x76>
 80172a6:	00bb      	lsls	r3, r7, #2
 80172a8:	18d3      	adds	r3, r2, r3
 80172aa:	261f      	movs	r6, #31
 80172ac:	9301      	str	r3, [sp, #4]
 80172ae:	000b      	movs	r3, r1
 80172b0:	00a5      	lsls	r5, r4, #2
 80172b2:	4033      	ands	r3, r6
 80172b4:	1955      	adds	r5, r2, r5
 80172b6:	9302      	str	r3, [sp, #8]
 80172b8:	4231      	tst	r1, r6
 80172ba:	d10c      	bne.n	80172d6 <rshift+0x42>
 80172bc:	0016      	movs	r6, r2
 80172be:	9901      	ldr	r1, [sp, #4]
 80172c0:	428d      	cmp	r5, r1
 80172c2:	d838      	bhi.n	8017336 <rshift+0xa2>
 80172c4:	9901      	ldr	r1, [sp, #4]
 80172c6:	2300      	movs	r3, #0
 80172c8:	3903      	subs	r1, #3
 80172ca:	428d      	cmp	r5, r1
 80172cc:	d301      	bcc.n	80172d2 <rshift+0x3e>
 80172ce:	1be3      	subs	r3, r4, r7
 80172d0:	009b      	lsls	r3, r3, #2
 80172d2:	18d3      	adds	r3, r2, r3
 80172d4:	e019      	b.n	801730a <rshift+0x76>
 80172d6:	2120      	movs	r1, #32
 80172d8:	9b02      	ldr	r3, [sp, #8]
 80172da:	9e01      	ldr	r6, [sp, #4]
 80172dc:	1acb      	subs	r3, r1, r3
 80172de:	9303      	str	r3, [sp, #12]
 80172e0:	ce02      	ldmia	r6!, {r1}
 80172e2:	9b02      	ldr	r3, [sp, #8]
 80172e4:	4694      	mov	ip, r2
 80172e6:	40d9      	lsrs	r1, r3
 80172e8:	9100      	str	r1, [sp, #0]
 80172ea:	42b5      	cmp	r5, r6
 80172ec:	d816      	bhi.n	801731c <rshift+0x88>
 80172ee:	9e01      	ldr	r6, [sp, #4]
 80172f0:	2300      	movs	r3, #0
 80172f2:	3601      	adds	r6, #1
 80172f4:	42b5      	cmp	r5, r6
 80172f6:	d302      	bcc.n	80172fe <rshift+0x6a>
 80172f8:	1be3      	subs	r3, r4, r7
 80172fa:	009b      	lsls	r3, r3, #2
 80172fc:	3b04      	subs	r3, #4
 80172fe:	9900      	ldr	r1, [sp, #0]
 8017300:	18d3      	adds	r3, r2, r3
 8017302:	6019      	str	r1, [r3, #0]
 8017304:	2900      	cmp	r1, #0
 8017306:	d000      	beq.n	801730a <rshift+0x76>
 8017308:	3304      	adds	r3, #4
 801730a:	1a99      	subs	r1, r3, r2
 801730c:	1089      	asrs	r1, r1, #2
 801730e:	6101      	str	r1, [r0, #16]
 8017310:	4293      	cmp	r3, r2
 8017312:	d101      	bne.n	8017318 <rshift+0x84>
 8017314:	2300      	movs	r3, #0
 8017316:	6143      	str	r3, [r0, #20]
 8017318:	b005      	add	sp, #20
 801731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801731c:	6833      	ldr	r3, [r6, #0]
 801731e:	9903      	ldr	r1, [sp, #12]
 8017320:	408b      	lsls	r3, r1
 8017322:	9900      	ldr	r1, [sp, #0]
 8017324:	4319      	orrs	r1, r3
 8017326:	4663      	mov	r3, ip
 8017328:	c302      	stmia	r3!, {r1}
 801732a:	469c      	mov	ip, r3
 801732c:	ce02      	ldmia	r6!, {r1}
 801732e:	9b02      	ldr	r3, [sp, #8]
 8017330:	40d9      	lsrs	r1, r3
 8017332:	9100      	str	r1, [sp, #0]
 8017334:	e7d9      	b.n	80172ea <rshift+0x56>
 8017336:	c908      	ldmia	r1!, {r3}
 8017338:	c608      	stmia	r6!, {r3}
 801733a:	e7c1      	b.n	80172c0 <rshift+0x2c>

0801733c <__hexdig_fun>:
 801733c:	0002      	movs	r2, r0
 801733e:	3a30      	subs	r2, #48	; 0x30
 8017340:	0003      	movs	r3, r0
 8017342:	2a09      	cmp	r2, #9
 8017344:	d802      	bhi.n	801734c <__hexdig_fun+0x10>
 8017346:	3b20      	subs	r3, #32
 8017348:	b2d8      	uxtb	r0, r3
 801734a:	4770      	bx	lr
 801734c:	0002      	movs	r2, r0
 801734e:	3a61      	subs	r2, #97	; 0x61
 8017350:	2a05      	cmp	r2, #5
 8017352:	d801      	bhi.n	8017358 <__hexdig_fun+0x1c>
 8017354:	3b47      	subs	r3, #71	; 0x47
 8017356:	e7f7      	b.n	8017348 <__hexdig_fun+0xc>
 8017358:	001a      	movs	r2, r3
 801735a:	3a41      	subs	r2, #65	; 0x41
 801735c:	2000      	movs	r0, #0
 801735e:	2a05      	cmp	r2, #5
 8017360:	d8f3      	bhi.n	801734a <__hexdig_fun+0xe>
 8017362:	3b27      	subs	r3, #39	; 0x27
 8017364:	e7f0      	b.n	8017348 <__hexdig_fun+0xc>
	...

08017368 <__gethex>:
 8017368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801736a:	b08d      	sub	sp, #52	; 0x34
 801736c:	930a      	str	r3, [sp, #40]	; 0x28
 801736e:	4bbf      	ldr	r3, [pc, #764]	; (801766c <__gethex+0x304>)
 8017370:	9005      	str	r0, [sp, #20]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	9109      	str	r1, [sp, #36]	; 0x24
 8017376:	0018      	movs	r0, r3
 8017378:	9202      	str	r2, [sp, #8]
 801737a:	9307      	str	r3, [sp, #28]
 801737c:	f7e8 fecc 	bl	8000118 <strlen>
 8017380:	2202      	movs	r2, #2
 8017382:	9b07      	ldr	r3, [sp, #28]
 8017384:	4252      	negs	r2, r2
 8017386:	181b      	adds	r3, r3, r0
 8017388:	3b01      	subs	r3, #1
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	9003      	str	r0, [sp, #12]
 801738e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017392:	6819      	ldr	r1, [r3, #0]
 8017394:	1c8b      	adds	r3, r1, #2
 8017396:	1a52      	subs	r2, r2, r1
 8017398:	18d1      	adds	r1, r2, r3
 801739a:	9301      	str	r3, [sp, #4]
 801739c:	9108      	str	r1, [sp, #32]
 801739e:	9901      	ldr	r1, [sp, #4]
 80173a0:	3301      	adds	r3, #1
 80173a2:	7808      	ldrb	r0, [r1, #0]
 80173a4:	2830      	cmp	r0, #48	; 0x30
 80173a6:	d0f7      	beq.n	8017398 <__gethex+0x30>
 80173a8:	f7ff ffc8 	bl	801733c <__hexdig_fun>
 80173ac:	2300      	movs	r3, #0
 80173ae:	001c      	movs	r4, r3
 80173b0:	9304      	str	r3, [sp, #16]
 80173b2:	4298      	cmp	r0, r3
 80173b4:	d11f      	bne.n	80173f6 <__gethex+0x8e>
 80173b6:	9a03      	ldr	r2, [sp, #12]
 80173b8:	9907      	ldr	r1, [sp, #28]
 80173ba:	9801      	ldr	r0, [sp, #4]
 80173bc:	f7fc fe21 	bl	8014002 <strncmp>
 80173c0:	0007      	movs	r7, r0
 80173c2:	42a0      	cmp	r0, r4
 80173c4:	d000      	beq.n	80173c8 <__gethex+0x60>
 80173c6:	e06b      	b.n	80174a0 <__gethex+0x138>
 80173c8:	9b01      	ldr	r3, [sp, #4]
 80173ca:	9a03      	ldr	r2, [sp, #12]
 80173cc:	5c98      	ldrb	r0, [r3, r2]
 80173ce:	189d      	adds	r5, r3, r2
 80173d0:	f7ff ffb4 	bl	801733c <__hexdig_fun>
 80173d4:	2301      	movs	r3, #1
 80173d6:	9304      	str	r3, [sp, #16]
 80173d8:	42a0      	cmp	r0, r4
 80173da:	d030      	beq.n	801743e <__gethex+0xd6>
 80173dc:	9501      	str	r5, [sp, #4]
 80173de:	9b01      	ldr	r3, [sp, #4]
 80173e0:	7818      	ldrb	r0, [r3, #0]
 80173e2:	2830      	cmp	r0, #48	; 0x30
 80173e4:	d009      	beq.n	80173fa <__gethex+0x92>
 80173e6:	f7ff ffa9 	bl	801733c <__hexdig_fun>
 80173ea:	4242      	negs	r2, r0
 80173ec:	4142      	adcs	r2, r0
 80173ee:	2301      	movs	r3, #1
 80173f0:	002c      	movs	r4, r5
 80173f2:	9204      	str	r2, [sp, #16]
 80173f4:	9308      	str	r3, [sp, #32]
 80173f6:	9d01      	ldr	r5, [sp, #4]
 80173f8:	e004      	b.n	8017404 <__gethex+0x9c>
 80173fa:	9b01      	ldr	r3, [sp, #4]
 80173fc:	3301      	adds	r3, #1
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	e7ed      	b.n	80173de <__gethex+0x76>
 8017402:	3501      	adds	r5, #1
 8017404:	7828      	ldrb	r0, [r5, #0]
 8017406:	f7ff ff99 	bl	801733c <__hexdig_fun>
 801740a:	1e07      	subs	r7, r0, #0
 801740c:	d1f9      	bne.n	8017402 <__gethex+0x9a>
 801740e:	0028      	movs	r0, r5
 8017410:	9a03      	ldr	r2, [sp, #12]
 8017412:	9907      	ldr	r1, [sp, #28]
 8017414:	f7fc fdf5 	bl	8014002 <strncmp>
 8017418:	2800      	cmp	r0, #0
 801741a:	d10e      	bne.n	801743a <__gethex+0xd2>
 801741c:	2c00      	cmp	r4, #0
 801741e:	d107      	bne.n	8017430 <__gethex+0xc8>
 8017420:	9b03      	ldr	r3, [sp, #12]
 8017422:	18ed      	adds	r5, r5, r3
 8017424:	002c      	movs	r4, r5
 8017426:	7828      	ldrb	r0, [r5, #0]
 8017428:	f7ff ff88 	bl	801733c <__hexdig_fun>
 801742c:	2800      	cmp	r0, #0
 801742e:	d102      	bne.n	8017436 <__gethex+0xce>
 8017430:	1b64      	subs	r4, r4, r5
 8017432:	00a7      	lsls	r7, r4, #2
 8017434:	e003      	b.n	801743e <__gethex+0xd6>
 8017436:	3501      	adds	r5, #1
 8017438:	e7f5      	b.n	8017426 <__gethex+0xbe>
 801743a:	2c00      	cmp	r4, #0
 801743c:	d1f8      	bne.n	8017430 <__gethex+0xc8>
 801743e:	2220      	movs	r2, #32
 8017440:	782b      	ldrb	r3, [r5, #0]
 8017442:	002e      	movs	r6, r5
 8017444:	4393      	bics	r3, r2
 8017446:	2b50      	cmp	r3, #80	; 0x50
 8017448:	d11d      	bne.n	8017486 <__gethex+0x11e>
 801744a:	786b      	ldrb	r3, [r5, #1]
 801744c:	2b2b      	cmp	r3, #43	; 0x2b
 801744e:	d02c      	beq.n	80174aa <__gethex+0x142>
 8017450:	2b2d      	cmp	r3, #45	; 0x2d
 8017452:	d02e      	beq.n	80174b2 <__gethex+0x14a>
 8017454:	2300      	movs	r3, #0
 8017456:	1c6e      	adds	r6, r5, #1
 8017458:	9306      	str	r3, [sp, #24]
 801745a:	7830      	ldrb	r0, [r6, #0]
 801745c:	f7ff ff6e 	bl	801733c <__hexdig_fun>
 8017460:	1e43      	subs	r3, r0, #1
 8017462:	b2db      	uxtb	r3, r3
 8017464:	2b18      	cmp	r3, #24
 8017466:	d82b      	bhi.n	80174c0 <__gethex+0x158>
 8017468:	3810      	subs	r0, #16
 801746a:	0004      	movs	r4, r0
 801746c:	7870      	ldrb	r0, [r6, #1]
 801746e:	f7ff ff65 	bl	801733c <__hexdig_fun>
 8017472:	1e43      	subs	r3, r0, #1
 8017474:	b2db      	uxtb	r3, r3
 8017476:	3601      	adds	r6, #1
 8017478:	2b18      	cmp	r3, #24
 801747a:	d91c      	bls.n	80174b6 <__gethex+0x14e>
 801747c:	9b06      	ldr	r3, [sp, #24]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d000      	beq.n	8017484 <__gethex+0x11c>
 8017482:	4264      	negs	r4, r4
 8017484:	193f      	adds	r7, r7, r4
 8017486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017488:	601e      	str	r6, [r3, #0]
 801748a:	9b04      	ldr	r3, [sp, #16]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d019      	beq.n	80174c4 <__gethex+0x15c>
 8017490:	2600      	movs	r6, #0
 8017492:	9b08      	ldr	r3, [sp, #32]
 8017494:	42b3      	cmp	r3, r6
 8017496:	d100      	bne.n	801749a <__gethex+0x132>
 8017498:	3606      	adds	r6, #6
 801749a:	0030      	movs	r0, r6
 801749c:	b00d      	add	sp, #52	; 0x34
 801749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174a0:	2301      	movs	r3, #1
 80174a2:	2700      	movs	r7, #0
 80174a4:	9d01      	ldr	r5, [sp, #4]
 80174a6:	9304      	str	r3, [sp, #16]
 80174a8:	e7c9      	b.n	801743e <__gethex+0xd6>
 80174aa:	2300      	movs	r3, #0
 80174ac:	9306      	str	r3, [sp, #24]
 80174ae:	1cae      	adds	r6, r5, #2
 80174b0:	e7d3      	b.n	801745a <__gethex+0xf2>
 80174b2:	2301      	movs	r3, #1
 80174b4:	e7fa      	b.n	80174ac <__gethex+0x144>
 80174b6:	230a      	movs	r3, #10
 80174b8:	435c      	muls	r4, r3
 80174ba:	1824      	adds	r4, r4, r0
 80174bc:	3c10      	subs	r4, #16
 80174be:	e7d5      	b.n	801746c <__gethex+0x104>
 80174c0:	002e      	movs	r6, r5
 80174c2:	e7e0      	b.n	8017486 <__gethex+0x11e>
 80174c4:	9b01      	ldr	r3, [sp, #4]
 80174c6:	9904      	ldr	r1, [sp, #16]
 80174c8:	1aeb      	subs	r3, r5, r3
 80174ca:	3b01      	subs	r3, #1
 80174cc:	2b07      	cmp	r3, #7
 80174ce:	dc0a      	bgt.n	80174e6 <__gethex+0x17e>
 80174d0:	9805      	ldr	r0, [sp, #20]
 80174d2:	f000 fa93 	bl	80179fc <_Balloc>
 80174d6:	1e04      	subs	r4, r0, #0
 80174d8:	d108      	bne.n	80174ec <__gethex+0x184>
 80174da:	0002      	movs	r2, r0
 80174dc:	21de      	movs	r1, #222	; 0xde
 80174de:	4b64      	ldr	r3, [pc, #400]	; (8017670 <__gethex+0x308>)
 80174e0:	4864      	ldr	r0, [pc, #400]	; (8017674 <__gethex+0x30c>)
 80174e2:	f001 f80d 	bl	8018500 <__assert_func>
 80174e6:	3101      	adds	r1, #1
 80174e8:	105b      	asrs	r3, r3, #1
 80174ea:	e7ef      	b.n	80174cc <__gethex+0x164>
 80174ec:	0003      	movs	r3, r0
 80174ee:	3314      	adds	r3, #20
 80174f0:	9304      	str	r3, [sp, #16]
 80174f2:	9309      	str	r3, [sp, #36]	; 0x24
 80174f4:	2300      	movs	r3, #0
 80174f6:	001e      	movs	r6, r3
 80174f8:	9306      	str	r3, [sp, #24]
 80174fa:	9b01      	ldr	r3, [sp, #4]
 80174fc:	42ab      	cmp	r3, r5
 80174fe:	d340      	bcc.n	8017582 <__gethex+0x21a>
 8017500:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017502:	9b04      	ldr	r3, [sp, #16]
 8017504:	c540      	stmia	r5!, {r6}
 8017506:	1aed      	subs	r5, r5, r3
 8017508:	10ad      	asrs	r5, r5, #2
 801750a:	0030      	movs	r0, r6
 801750c:	6125      	str	r5, [r4, #16]
 801750e:	f000 fb37 	bl	8017b80 <__hi0bits>
 8017512:	9b02      	ldr	r3, [sp, #8]
 8017514:	016d      	lsls	r5, r5, #5
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	1a2e      	subs	r6, r5, r0
 801751a:	9301      	str	r3, [sp, #4]
 801751c:	429e      	cmp	r6, r3
 801751e:	dd5a      	ble.n	80175d6 <__gethex+0x26e>
 8017520:	1af6      	subs	r6, r6, r3
 8017522:	0031      	movs	r1, r6
 8017524:	0020      	movs	r0, r4
 8017526:	f000 febf 	bl	80182a8 <__any_on>
 801752a:	1e05      	subs	r5, r0, #0
 801752c:	d016      	beq.n	801755c <__gethex+0x1f4>
 801752e:	2501      	movs	r5, #1
 8017530:	211f      	movs	r1, #31
 8017532:	0028      	movs	r0, r5
 8017534:	1e73      	subs	r3, r6, #1
 8017536:	4019      	ands	r1, r3
 8017538:	4088      	lsls	r0, r1
 801753a:	0001      	movs	r1, r0
 801753c:	115a      	asrs	r2, r3, #5
 801753e:	9804      	ldr	r0, [sp, #16]
 8017540:	0092      	lsls	r2, r2, #2
 8017542:	5812      	ldr	r2, [r2, r0]
 8017544:	420a      	tst	r2, r1
 8017546:	d009      	beq.n	801755c <__gethex+0x1f4>
 8017548:	42ab      	cmp	r3, r5
 801754a:	dd06      	ble.n	801755a <__gethex+0x1f2>
 801754c:	0020      	movs	r0, r4
 801754e:	1eb1      	subs	r1, r6, #2
 8017550:	f000 feaa 	bl	80182a8 <__any_on>
 8017554:	3502      	adds	r5, #2
 8017556:	2800      	cmp	r0, #0
 8017558:	d100      	bne.n	801755c <__gethex+0x1f4>
 801755a:	2502      	movs	r5, #2
 801755c:	0031      	movs	r1, r6
 801755e:	0020      	movs	r0, r4
 8017560:	f7ff fe98 	bl	8017294 <rshift>
 8017564:	19bf      	adds	r7, r7, r6
 8017566:	9b02      	ldr	r3, [sp, #8]
 8017568:	689b      	ldr	r3, [r3, #8]
 801756a:	9303      	str	r3, [sp, #12]
 801756c:	42bb      	cmp	r3, r7
 801756e:	da42      	bge.n	80175f6 <__gethex+0x28e>
 8017570:	0021      	movs	r1, r4
 8017572:	9805      	ldr	r0, [sp, #20]
 8017574:	f000 fa6a 	bl	8017a4c <_Bfree>
 8017578:	2300      	movs	r3, #0
 801757a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801757c:	26a3      	movs	r6, #163	; 0xa3
 801757e:	6013      	str	r3, [r2, #0]
 8017580:	e78b      	b.n	801749a <__gethex+0x132>
 8017582:	1e6b      	subs	r3, r5, #1
 8017584:	9308      	str	r3, [sp, #32]
 8017586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	4293      	cmp	r3, r2
 801758c:	d014      	beq.n	80175b8 <__gethex+0x250>
 801758e:	9b06      	ldr	r3, [sp, #24]
 8017590:	2b20      	cmp	r3, #32
 8017592:	d104      	bne.n	801759e <__gethex+0x236>
 8017594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017596:	c340      	stmia	r3!, {r6}
 8017598:	2600      	movs	r6, #0
 801759a:	9309      	str	r3, [sp, #36]	; 0x24
 801759c:	9606      	str	r6, [sp, #24]
 801759e:	9b08      	ldr	r3, [sp, #32]
 80175a0:	7818      	ldrb	r0, [r3, #0]
 80175a2:	f7ff fecb 	bl	801733c <__hexdig_fun>
 80175a6:	230f      	movs	r3, #15
 80175a8:	4018      	ands	r0, r3
 80175aa:	9b06      	ldr	r3, [sp, #24]
 80175ac:	9d08      	ldr	r5, [sp, #32]
 80175ae:	4098      	lsls	r0, r3
 80175b0:	3304      	adds	r3, #4
 80175b2:	4306      	orrs	r6, r0
 80175b4:	9306      	str	r3, [sp, #24]
 80175b6:	e7a0      	b.n	80174fa <__gethex+0x192>
 80175b8:	2301      	movs	r3, #1
 80175ba:	9a03      	ldr	r2, [sp, #12]
 80175bc:	1a9d      	subs	r5, r3, r2
 80175be:	9b08      	ldr	r3, [sp, #32]
 80175c0:	195d      	adds	r5, r3, r5
 80175c2:	9b01      	ldr	r3, [sp, #4]
 80175c4:	429d      	cmp	r5, r3
 80175c6:	d3e2      	bcc.n	801758e <__gethex+0x226>
 80175c8:	0028      	movs	r0, r5
 80175ca:	9907      	ldr	r1, [sp, #28]
 80175cc:	f7fc fd19 	bl	8014002 <strncmp>
 80175d0:	2800      	cmp	r0, #0
 80175d2:	d1dc      	bne.n	801758e <__gethex+0x226>
 80175d4:	e791      	b.n	80174fa <__gethex+0x192>
 80175d6:	9b01      	ldr	r3, [sp, #4]
 80175d8:	2500      	movs	r5, #0
 80175da:	429e      	cmp	r6, r3
 80175dc:	dac3      	bge.n	8017566 <__gethex+0x1fe>
 80175de:	1b9e      	subs	r6, r3, r6
 80175e0:	0021      	movs	r1, r4
 80175e2:	0032      	movs	r2, r6
 80175e4:	9805      	ldr	r0, [sp, #20]
 80175e6:	f000 fc1b 	bl	8017e20 <__lshift>
 80175ea:	0003      	movs	r3, r0
 80175ec:	3314      	adds	r3, #20
 80175ee:	0004      	movs	r4, r0
 80175f0:	1bbf      	subs	r7, r7, r6
 80175f2:	9304      	str	r3, [sp, #16]
 80175f4:	e7b7      	b.n	8017566 <__gethex+0x1fe>
 80175f6:	9b02      	ldr	r3, [sp, #8]
 80175f8:	685e      	ldr	r6, [r3, #4]
 80175fa:	42be      	cmp	r6, r7
 80175fc:	dd71      	ble.n	80176e2 <__gethex+0x37a>
 80175fe:	9b01      	ldr	r3, [sp, #4]
 8017600:	1bf6      	subs	r6, r6, r7
 8017602:	42b3      	cmp	r3, r6
 8017604:	dc38      	bgt.n	8017678 <__gethex+0x310>
 8017606:	9b02      	ldr	r3, [sp, #8]
 8017608:	68db      	ldr	r3, [r3, #12]
 801760a:	2b02      	cmp	r3, #2
 801760c:	d026      	beq.n	801765c <__gethex+0x2f4>
 801760e:	2b03      	cmp	r3, #3
 8017610:	d028      	beq.n	8017664 <__gethex+0x2fc>
 8017612:	2b01      	cmp	r3, #1
 8017614:	d119      	bne.n	801764a <__gethex+0x2e2>
 8017616:	9b01      	ldr	r3, [sp, #4]
 8017618:	42b3      	cmp	r3, r6
 801761a:	d116      	bne.n	801764a <__gethex+0x2e2>
 801761c:	2b01      	cmp	r3, #1
 801761e:	d10d      	bne.n	801763c <__gethex+0x2d4>
 8017620:	9b02      	ldr	r3, [sp, #8]
 8017622:	2662      	movs	r6, #98	; 0x62
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	9301      	str	r3, [sp, #4]
 8017628:	9a01      	ldr	r2, [sp, #4]
 801762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801762c:	601a      	str	r2, [r3, #0]
 801762e:	2301      	movs	r3, #1
 8017630:	9a04      	ldr	r2, [sp, #16]
 8017632:	6123      	str	r3, [r4, #16]
 8017634:	6013      	str	r3, [r2, #0]
 8017636:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017638:	601c      	str	r4, [r3, #0]
 801763a:	e72e      	b.n	801749a <__gethex+0x132>
 801763c:	9901      	ldr	r1, [sp, #4]
 801763e:	0020      	movs	r0, r4
 8017640:	3901      	subs	r1, #1
 8017642:	f000 fe31 	bl	80182a8 <__any_on>
 8017646:	2800      	cmp	r0, #0
 8017648:	d1ea      	bne.n	8017620 <__gethex+0x2b8>
 801764a:	0021      	movs	r1, r4
 801764c:	9805      	ldr	r0, [sp, #20]
 801764e:	f000 f9fd 	bl	8017a4c <_Bfree>
 8017652:	2300      	movs	r3, #0
 8017654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017656:	2650      	movs	r6, #80	; 0x50
 8017658:	6013      	str	r3, [r2, #0]
 801765a:	e71e      	b.n	801749a <__gethex+0x132>
 801765c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801765e:	2b00      	cmp	r3, #0
 8017660:	d1f3      	bne.n	801764a <__gethex+0x2e2>
 8017662:	e7dd      	b.n	8017620 <__gethex+0x2b8>
 8017664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017666:	2b00      	cmp	r3, #0
 8017668:	d1da      	bne.n	8017620 <__gethex+0x2b8>
 801766a:	e7ee      	b.n	801764a <__gethex+0x2e2>
 801766c:	0801d1f4 	.word	0x0801d1f4
 8017670:	0801d121 	.word	0x0801d121
 8017674:	0801d18d 	.word	0x0801d18d
 8017678:	1e77      	subs	r7, r6, #1
 801767a:	2d00      	cmp	r5, #0
 801767c:	d12f      	bne.n	80176de <__gethex+0x376>
 801767e:	2f00      	cmp	r7, #0
 8017680:	d004      	beq.n	801768c <__gethex+0x324>
 8017682:	0039      	movs	r1, r7
 8017684:	0020      	movs	r0, r4
 8017686:	f000 fe0f 	bl	80182a8 <__any_on>
 801768a:	0005      	movs	r5, r0
 801768c:	231f      	movs	r3, #31
 801768e:	117a      	asrs	r2, r7, #5
 8017690:	401f      	ands	r7, r3
 8017692:	3b1e      	subs	r3, #30
 8017694:	40bb      	lsls	r3, r7
 8017696:	9904      	ldr	r1, [sp, #16]
 8017698:	0092      	lsls	r2, r2, #2
 801769a:	5852      	ldr	r2, [r2, r1]
 801769c:	421a      	tst	r2, r3
 801769e:	d001      	beq.n	80176a4 <__gethex+0x33c>
 80176a0:	2302      	movs	r3, #2
 80176a2:	431d      	orrs	r5, r3
 80176a4:	9b01      	ldr	r3, [sp, #4]
 80176a6:	0031      	movs	r1, r6
 80176a8:	1b9b      	subs	r3, r3, r6
 80176aa:	2602      	movs	r6, #2
 80176ac:	0020      	movs	r0, r4
 80176ae:	9301      	str	r3, [sp, #4]
 80176b0:	f7ff fdf0 	bl	8017294 <rshift>
 80176b4:	9b02      	ldr	r3, [sp, #8]
 80176b6:	685f      	ldr	r7, [r3, #4]
 80176b8:	2d00      	cmp	r5, #0
 80176ba:	d041      	beq.n	8017740 <__gethex+0x3d8>
 80176bc:	9b02      	ldr	r3, [sp, #8]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	2b02      	cmp	r3, #2
 80176c2:	d010      	beq.n	80176e6 <__gethex+0x37e>
 80176c4:	2b03      	cmp	r3, #3
 80176c6:	d012      	beq.n	80176ee <__gethex+0x386>
 80176c8:	2b01      	cmp	r3, #1
 80176ca:	d106      	bne.n	80176da <__gethex+0x372>
 80176cc:	07aa      	lsls	r2, r5, #30
 80176ce:	d504      	bpl.n	80176da <__gethex+0x372>
 80176d0:	9a04      	ldr	r2, [sp, #16]
 80176d2:	6810      	ldr	r0, [r2, #0]
 80176d4:	4305      	orrs	r5, r0
 80176d6:	421d      	tst	r5, r3
 80176d8:	d10c      	bne.n	80176f4 <__gethex+0x38c>
 80176da:	2310      	movs	r3, #16
 80176dc:	e02f      	b.n	801773e <__gethex+0x3d6>
 80176de:	2501      	movs	r5, #1
 80176e0:	e7d4      	b.n	801768c <__gethex+0x324>
 80176e2:	2601      	movs	r6, #1
 80176e4:	e7e8      	b.n	80176b8 <__gethex+0x350>
 80176e6:	2301      	movs	r3, #1
 80176e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80176ea:	1a9b      	subs	r3, r3, r2
 80176ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80176ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d0f2      	beq.n	80176da <__gethex+0x372>
 80176f4:	6923      	ldr	r3, [r4, #16]
 80176f6:	2000      	movs	r0, #0
 80176f8:	9303      	str	r3, [sp, #12]
 80176fa:	009b      	lsls	r3, r3, #2
 80176fc:	9304      	str	r3, [sp, #16]
 80176fe:	0023      	movs	r3, r4
 8017700:	9a04      	ldr	r2, [sp, #16]
 8017702:	3314      	adds	r3, #20
 8017704:	1899      	adds	r1, r3, r2
 8017706:	681a      	ldr	r2, [r3, #0]
 8017708:	1c55      	adds	r5, r2, #1
 801770a:	d01e      	beq.n	801774a <__gethex+0x3e2>
 801770c:	3201      	adds	r2, #1
 801770e:	601a      	str	r2, [r3, #0]
 8017710:	0023      	movs	r3, r4
 8017712:	3314      	adds	r3, #20
 8017714:	2e02      	cmp	r6, #2
 8017716:	d140      	bne.n	801779a <__gethex+0x432>
 8017718:	9a02      	ldr	r2, [sp, #8]
 801771a:	9901      	ldr	r1, [sp, #4]
 801771c:	6812      	ldr	r2, [r2, #0]
 801771e:	3a01      	subs	r2, #1
 8017720:	428a      	cmp	r2, r1
 8017722:	d10b      	bne.n	801773c <__gethex+0x3d4>
 8017724:	114a      	asrs	r2, r1, #5
 8017726:	211f      	movs	r1, #31
 8017728:	9801      	ldr	r0, [sp, #4]
 801772a:	0092      	lsls	r2, r2, #2
 801772c:	4001      	ands	r1, r0
 801772e:	2001      	movs	r0, #1
 8017730:	0005      	movs	r5, r0
 8017732:	408d      	lsls	r5, r1
 8017734:	58d3      	ldr	r3, [r2, r3]
 8017736:	422b      	tst	r3, r5
 8017738:	d000      	beq.n	801773c <__gethex+0x3d4>
 801773a:	2601      	movs	r6, #1
 801773c:	2320      	movs	r3, #32
 801773e:	431e      	orrs	r6, r3
 8017740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017742:	601c      	str	r4, [r3, #0]
 8017744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017746:	601f      	str	r7, [r3, #0]
 8017748:	e6a7      	b.n	801749a <__gethex+0x132>
 801774a:	c301      	stmia	r3!, {r0}
 801774c:	4299      	cmp	r1, r3
 801774e:	d8da      	bhi.n	8017706 <__gethex+0x39e>
 8017750:	9b03      	ldr	r3, [sp, #12]
 8017752:	68a2      	ldr	r2, [r4, #8]
 8017754:	4293      	cmp	r3, r2
 8017756:	db17      	blt.n	8017788 <__gethex+0x420>
 8017758:	6863      	ldr	r3, [r4, #4]
 801775a:	9805      	ldr	r0, [sp, #20]
 801775c:	1c59      	adds	r1, r3, #1
 801775e:	f000 f94d 	bl	80179fc <_Balloc>
 8017762:	1e05      	subs	r5, r0, #0
 8017764:	d103      	bne.n	801776e <__gethex+0x406>
 8017766:	0002      	movs	r2, r0
 8017768:	2184      	movs	r1, #132	; 0x84
 801776a:	4b1c      	ldr	r3, [pc, #112]	; (80177dc <__gethex+0x474>)
 801776c:	e6b8      	b.n	80174e0 <__gethex+0x178>
 801776e:	0021      	movs	r1, r4
 8017770:	6923      	ldr	r3, [r4, #16]
 8017772:	310c      	adds	r1, #12
 8017774:	1c9a      	adds	r2, r3, #2
 8017776:	0092      	lsls	r2, r2, #2
 8017778:	300c      	adds	r0, #12
 801777a:	f7fc fa05 	bl	8013b88 <memcpy>
 801777e:	0021      	movs	r1, r4
 8017780:	9805      	ldr	r0, [sp, #20]
 8017782:	f000 f963 	bl	8017a4c <_Bfree>
 8017786:	002c      	movs	r4, r5
 8017788:	6923      	ldr	r3, [r4, #16]
 801778a:	1c5a      	adds	r2, r3, #1
 801778c:	6122      	str	r2, [r4, #16]
 801778e:	2201      	movs	r2, #1
 8017790:	3304      	adds	r3, #4
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	18e3      	adds	r3, r4, r3
 8017796:	605a      	str	r2, [r3, #4]
 8017798:	e7ba      	b.n	8017710 <__gethex+0x3a8>
 801779a:	6922      	ldr	r2, [r4, #16]
 801779c:	9903      	ldr	r1, [sp, #12]
 801779e:	428a      	cmp	r2, r1
 80177a0:	dd09      	ble.n	80177b6 <__gethex+0x44e>
 80177a2:	2101      	movs	r1, #1
 80177a4:	0020      	movs	r0, r4
 80177a6:	f7ff fd75 	bl	8017294 <rshift>
 80177aa:	9b02      	ldr	r3, [sp, #8]
 80177ac:	3701      	adds	r7, #1
 80177ae:	689b      	ldr	r3, [r3, #8]
 80177b0:	42bb      	cmp	r3, r7
 80177b2:	dac2      	bge.n	801773a <__gethex+0x3d2>
 80177b4:	e6dc      	b.n	8017570 <__gethex+0x208>
 80177b6:	221f      	movs	r2, #31
 80177b8:	9d01      	ldr	r5, [sp, #4]
 80177ba:	9901      	ldr	r1, [sp, #4]
 80177bc:	2601      	movs	r6, #1
 80177be:	4015      	ands	r5, r2
 80177c0:	4211      	tst	r1, r2
 80177c2:	d0bb      	beq.n	801773c <__gethex+0x3d4>
 80177c4:	9a04      	ldr	r2, [sp, #16]
 80177c6:	189b      	adds	r3, r3, r2
 80177c8:	3b04      	subs	r3, #4
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	f000 f9d8 	bl	8017b80 <__hi0bits>
 80177d0:	2320      	movs	r3, #32
 80177d2:	1b5d      	subs	r5, r3, r5
 80177d4:	42a8      	cmp	r0, r5
 80177d6:	dbe4      	blt.n	80177a2 <__gethex+0x43a>
 80177d8:	e7b0      	b.n	801773c <__gethex+0x3d4>
 80177da:	46c0      	nop			; (mov r8, r8)
 80177dc:	0801d121 	.word	0x0801d121

080177e0 <L_shift>:
 80177e0:	2308      	movs	r3, #8
 80177e2:	b570      	push	{r4, r5, r6, lr}
 80177e4:	2520      	movs	r5, #32
 80177e6:	1a9a      	subs	r2, r3, r2
 80177e8:	0092      	lsls	r2, r2, #2
 80177ea:	1aad      	subs	r5, r5, r2
 80177ec:	6843      	ldr	r3, [r0, #4]
 80177ee:	6806      	ldr	r6, [r0, #0]
 80177f0:	001c      	movs	r4, r3
 80177f2:	40ac      	lsls	r4, r5
 80177f4:	40d3      	lsrs	r3, r2
 80177f6:	4334      	orrs	r4, r6
 80177f8:	6004      	str	r4, [r0, #0]
 80177fa:	6043      	str	r3, [r0, #4]
 80177fc:	3004      	adds	r0, #4
 80177fe:	4288      	cmp	r0, r1
 8017800:	d3f4      	bcc.n	80177ec <L_shift+0xc>
 8017802:	bd70      	pop	{r4, r5, r6, pc}

08017804 <__match>:
 8017804:	b530      	push	{r4, r5, lr}
 8017806:	6803      	ldr	r3, [r0, #0]
 8017808:	780c      	ldrb	r4, [r1, #0]
 801780a:	3301      	adds	r3, #1
 801780c:	2c00      	cmp	r4, #0
 801780e:	d102      	bne.n	8017816 <__match+0x12>
 8017810:	6003      	str	r3, [r0, #0]
 8017812:	2001      	movs	r0, #1
 8017814:	bd30      	pop	{r4, r5, pc}
 8017816:	781a      	ldrb	r2, [r3, #0]
 8017818:	0015      	movs	r5, r2
 801781a:	3d41      	subs	r5, #65	; 0x41
 801781c:	2d19      	cmp	r5, #25
 801781e:	d800      	bhi.n	8017822 <__match+0x1e>
 8017820:	3220      	adds	r2, #32
 8017822:	3101      	adds	r1, #1
 8017824:	42a2      	cmp	r2, r4
 8017826:	d0ef      	beq.n	8017808 <__match+0x4>
 8017828:	2000      	movs	r0, #0
 801782a:	e7f3      	b.n	8017814 <__match+0x10>

0801782c <__hexnan>:
 801782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801782e:	680b      	ldr	r3, [r1, #0]
 8017830:	b08b      	sub	sp, #44	; 0x2c
 8017832:	9201      	str	r2, [sp, #4]
 8017834:	9901      	ldr	r1, [sp, #4]
 8017836:	115a      	asrs	r2, r3, #5
 8017838:	0092      	lsls	r2, r2, #2
 801783a:	188a      	adds	r2, r1, r2
 801783c:	9202      	str	r2, [sp, #8]
 801783e:	0019      	movs	r1, r3
 8017840:	221f      	movs	r2, #31
 8017842:	4011      	ands	r1, r2
 8017844:	9008      	str	r0, [sp, #32]
 8017846:	9106      	str	r1, [sp, #24]
 8017848:	4213      	tst	r3, r2
 801784a:	d002      	beq.n	8017852 <__hexnan+0x26>
 801784c:	9b02      	ldr	r3, [sp, #8]
 801784e:	3304      	adds	r3, #4
 8017850:	9302      	str	r3, [sp, #8]
 8017852:	9b02      	ldr	r3, [sp, #8]
 8017854:	2500      	movs	r5, #0
 8017856:	1f1e      	subs	r6, r3, #4
 8017858:	0037      	movs	r7, r6
 801785a:	0034      	movs	r4, r6
 801785c:	9b08      	ldr	r3, [sp, #32]
 801785e:	6035      	str	r5, [r6, #0]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	9507      	str	r5, [sp, #28]
 8017864:	9305      	str	r3, [sp, #20]
 8017866:	9503      	str	r5, [sp, #12]
 8017868:	9b05      	ldr	r3, [sp, #20]
 801786a:	3301      	adds	r3, #1
 801786c:	9309      	str	r3, [sp, #36]	; 0x24
 801786e:	9b05      	ldr	r3, [sp, #20]
 8017870:	785b      	ldrb	r3, [r3, #1]
 8017872:	9304      	str	r3, [sp, #16]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d028      	beq.n	80178ca <__hexnan+0x9e>
 8017878:	9804      	ldr	r0, [sp, #16]
 801787a:	f7ff fd5f 	bl	801733c <__hexdig_fun>
 801787e:	2800      	cmp	r0, #0
 8017880:	d154      	bne.n	801792c <__hexnan+0x100>
 8017882:	9b04      	ldr	r3, [sp, #16]
 8017884:	2b20      	cmp	r3, #32
 8017886:	d819      	bhi.n	80178bc <__hexnan+0x90>
 8017888:	9b03      	ldr	r3, [sp, #12]
 801788a:	9a07      	ldr	r2, [sp, #28]
 801788c:	4293      	cmp	r3, r2
 801788e:	dd12      	ble.n	80178b6 <__hexnan+0x8a>
 8017890:	42bc      	cmp	r4, r7
 8017892:	d206      	bcs.n	80178a2 <__hexnan+0x76>
 8017894:	2d07      	cmp	r5, #7
 8017896:	dc04      	bgt.n	80178a2 <__hexnan+0x76>
 8017898:	002a      	movs	r2, r5
 801789a:	0039      	movs	r1, r7
 801789c:	0020      	movs	r0, r4
 801789e:	f7ff ff9f 	bl	80177e0 <L_shift>
 80178a2:	9b01      	ldr	r3, [sp, #4]
 80178a4:	2508      	movs	r5, #8
 80178a6:	429c      	cmp	r4, r3
 80178a8:	d905      	bls.n	80178b6 <__hexnan+0x8a>
 80178aa:	1f27      	subs	r7, r4, #4
 80178ac:	2500      	movs	r5, #0
 80178ae:	003c      	movs	r4, r7
 80178b0:	9b03      	ldr	r3, [sp, #12]
 80178b2:	603d      	str	r5, [r7, #0]
 80178b4:	9307      	str	r3, [sp, #28]
 80178b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b8:	9305      	str	r3, [sp, #20]
 80178ba:	e7d5      	b.n	8017868 <__hexnan+0x3c>
 80178bc:	9b04      	ldr	r3, [sp, #16]
 80178be:	2b29      	cmp	r3, #41	; 0x29
 80178c0:	d159      	bne.n	8017976 <__hexnan+0x14a>
 80178c2:	9b05      	ldr	r3, [sp, #20]
 80178c4:	9a08      	ldr	r2, [sp, #32]
 80178c6:	3302      	adds	r3, #2
 80178c8:	6013      	str	r3, [r2, #0]
 80178ca:	9b03      	ldr	r3, [sp, #12]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d052      	beq.n	8017976 <__hexnan+0x14a>
 80178d0:	42bc      	cmp	r4, r7
 80178d2:	d206      	bcs.n	80178e2 <__hexnan+0xb6>
 80178d4:	2d07      	cmp	r5, #7
 80178d6:	dc04      	bgt.n	80178e2 <__hexnan+0xb6>
 80178d8:	002a      	movs	r2, r5
 80178da:	0039      	movs	r1, r7
 80178dc:	0020      	movs	r0, r4
 80178de:	f7ff ff7f 	bl	80177e0 <L_shift>
 80178e2:	9b01      	ldr	r3, [sp, #4]
 80178e4:	429c      	cmp	r4, r3
 80178e6:	d935      	bls.n	8017954 <__hexnan+0x128>
 80178e8:	001a      	movs	r2, r3
 80178ea:	0023      	movs	r3, r4
 80178ec:	cb02      	ldmia	r3!, {r1}
 80178ee:	c202      	stmia	r2!, {r1}
 80178f0:	429e      	cmp	r6, r3
 80178f2:	d2fb      	bcs.n	80178ec <__hexnan+0xc0>
 80178f4:	9b02      	ldr	r3, [sp, #8]
 80178f6:	1c61      	adds	r1, r4, #1
 80178f8:	1eda      	subs	r2, r3, #3
 80178fa:	2304      	movs	r3, #4
 80178fc:	4291      	cmp	r1, r2
 80178fe:	d805      	bhi.n	801790c <__hexnan+0xe0>
 8017900:	9b02      	ldr	r3, [sp, #8]
 8017902:	3b04      	subs	r3, #4
 8017904:	1b1b      	subs	r3, r3, r4
 8017906:	089b      	lsrs	r3, r3, #2
 8017908:	3301      	adds	r3, #1
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	9a01      	ldr	r2, [sp, #4]
 801790e:	18d3      	adds	r3, r2, r3
 8017910:	2200      	movs	r2, #0
 8017912:	c304      	stmia	r3!, {r2}
 8017914:	429e      	cmp	r6, r3
 8017916:	d2fc      	bcs.n	8017912 <__hexnan+0xe6>
 8017918:	6833      	ldr	r3, [r6, #0]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d104      	bne.n	8017928 <__hexnan+0xfc>
 801791e:	9b01      	ldr	r3, [sp, #4]
 8017920:	429e      	cmp	r6, r3
 8017922:	d126      	bne.n	8017972 <__hexnan+0x146>
 8017924:	2301      	movs	r3, #1
 8017926:	6033      	str	r3, [r6, #0]
 8017928:	2005      	movs	r0, #5
 801792a:	e025      	b.n	8017978 <__hexnan+0x14c>
 801792c:	9b03      	ldr	r3, [sp, #12]
 801792e:	3501      	adds	r5, #1
 8017930:	3301      	adds	r3, #1
 8017932:	9303      	str	r3, [sp, #12]
 8017934:	2d08      	cmp	r5, #8
 8017936:	dd06      	ble.n	8017946 <__hexnan+0x11a>
 8017938:	9b01      	ldr	r3, [sp, #4]
 801793a:	429c      	cmp	r4, r3
 801793c:	d9bb      	bls.n	80178b6 <__hexnan+0x8a>
 801793e:	2300      	movs	r3, #0
 8017940:	2501      	movs	r5, #1
 8017942:	3c04      	subs	r4, #4
 8017944:	6023      	str	r3, [r4, #0]
 8017946:	220f      	movs	r2, #15
 8017948:	6823      	ldr	r3, [r4, #0]
 801794a:	4010      	ands	r0, r2
 801794c:	011b      	lsls	r3, r3, #4
 801794e:	4318      	orrs	r0, r3
 8017950:	6020      	str	r0, [r4, #0]
 8017952:	e7b0      	b.n	80178b6 <__hexnan+0x8a>
 8017954:	9b06      	ldr	r3, [sp, #24]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d0de      	beq.n	8017918 <__hexnan+0xec>
 801795a:	2120      	movs	r1, #32
 801795c:	9a06      	ldr	r2, [sp, #24]
 801795e:	9b02      	ldr	r3, [sp, #8]
 8017960:	1a89      	subs	r1, r1, r2
 8017962:	2201      	movs	r2, #1
 8017964:	4252      	negs	r2, r2
 8017966:	40ca      	lsrs	r2, r1
 8017968:	3b04      	subs	r3, #4
 801796a:	6819      	ldr	r1, [r3, #0]
 801796c:	400a      	ands	r2, r1
 801796e:	601a      	str	r2, [r3, #0]
 8017970:	e7d2      	b.n	8017918 <__hexnan+0xec>
 8017972:	3e04      	subs	r6, #4
 8017974:	e7d0      	b.n	8017918 <__hexnan+0xec>
 8017976:	2004      	movs	r0, #4
 8017978:	b00b      	add	sp, #44	; 0x2c
 801797a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801797c <__locale_mb_cur_max>:
 801797c:	2394      	movs	r3, #148	; 0x94
 801797e:	4a02      	ldr	r2, [pc, #8]	; (8017988 <__locale_mb_cur_max+0xc>)
 8017980:	005b      	lsls	r3, r3, #1
 8017982:	5cd0      	ldrb	r0, [r2, r3]
 8017984:	4770      	bx	lr
 8017986:	46c0      	nop			; (mov r8, r8)
 8017988:	20000918 	.word	0x20000918

0801798c <_localeconv_r>:
 801798c:	4800      	ldr	r0, [pc, #0]	; (8017990 <_localeconv_r+0x4>)
 801798e:	4770      	bx	lr
 8017990:	20000a08 	.word	0x20000a08

08017994 <__retarget_lock_init_recursive>:
 8017994:	4770      	bx	lr

08017996 <__retarget_lock_close_recursive>:
 8017996:	4770      	bx	lr

08017998 <__retarget_lock_acquire_recursive>:
 8017998:	4770      	bx	lr

0801799a <__retarget_lock_release_recursive>:
 801799a:	4770      	bx	lr

0801799c <__ascii_mbtowc>:
 801799c:	b082      	sub	sp, #8
 801799e:	2900      	cmp	r1, #0
 80179a0:	d100      	bne.n	80179a4 <__ascii_mbtowc+0x8>
 80179a2:	a901      	add	r1, sp, #4
 80179a4:	1e10      	subs	r0, r2, #0
 80179a6:	d006      	beq.n	80179b6 <__ascii_mbtowc+0x1a>
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d006      	beq.n	80179ba <__ascii_mbtowc+0x1e>
 80179ac:	7813      	ldrb	r3, [r2, #0]
 80179ae:	600b      	str	r3, [r1, #0]
 80179b0:	7810      	ldrb	r0, [r2, #0]
 80179b2:	1e43      	subs	r3, r0, #1
 80179b4:	4198      	sbcs	r0, r3
 80179b6:	b002      	add	sp, #8
 80179b8:	4770      	bx	lr
 80179ba:	2002      	movs	r0, #2
 80179bc:	4240      	negs	r0, r0
 80179be:	e7fa      	b.n	80179b6 <__ascii_mbtowc+0x1a>

080179c0 <memchr>:
 80179c0:	b2c9      	uxtb	r1, r1
 80179c2:	1882      	adds	r2, r0, r2
 80179c4:	4290      	cmp	r0, r2
 80179c6:	d101      	bne.n	80179cc <memchr+0xc>
 80179c8:	2000      	movs	r0, #0
 80179ca:	4770      	bx	lr
 80179cc:	7803      	ldrb	r3, [r0, #0]
 80179ce:	428b      	cmp	r3, r1
 80179d0:	d0fb      	beq.n	80179ca <memchr+0xa>
 80179d2:	3001      	adds	r0, #1
 80179d4:	e7f6      	b.n	80179c4 <memchr+0x4>

080179d6 <memmove>:
 80179d6:	b510      	push	{r4, lr}
 80179d8:	4288      	cmp	r0, r1
 80179da:	d902      	bls.n	80179e2 <memmove+0xc>
 80179dc:	188b      	adds	r3, r1, r2
 80179de:	4298      	cmp	r0, r3
 80179e0:	d303      	bcc.n	80179ea <memmove+0x14>
 80179e2:	2300      	movs	r3, #0
 80179e4:	e007      	b.n	80179f6 <memmove+0x20>
 80179e6:	5c8b      	ldrb	r3, [r1, r2]
 80179e8:	5483      	strb	r3, [r0, r2]
 80179ea:	3a01      	subs	r2, #1
 80179ec:	d2fb      	bcs.n	80179e6 <memmove+0x10>
 80179ee:	bd10      	pop	{r4, pc}
 80179f0:	5ccc      	ldrb	r4, [r1, r3]
 80179f2:	54c4      	strb	r4, [r0, r3]
 80179f4:	3301      	adds	r3, #1
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d1fa      	bne.n	80179f0 <memmove+0x1a>
 80179fa:	e7f8      	b.n	80179ee <memmove+0x18>

080179fc <_Balloc>:
 80179fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80179fe:	b570      	push	{r4, r5, r6, lr}
 8017a00:	0006      	movs	r6, r0
 8017a02:	000c      	movs	r4, r1
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d012      	beq.n	8017a2e <_Balloc+0x32>
 8017a08:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8017a0a:	00a3      	lsls	r3, r4, #2
 8017a0c:	18d3      	adds	r3, r2, r3
 8017a0e:	6818      	ldr	r0, [r3, #0]
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d115      	bne.n	8017a40 <_Balloc+0x44>
 8017a14:	2101      	movs	r1, #1
 8017a16:	000d      	movs	r5, r1
 8017a18:	40a5      	lsls	r5, r4
 8017a1a:	1d6a      	adds	r2, r5, #5
 8017a1c:	0030      	movs	r0, r6
 8017a1e:	0092      	lsls	r2, r2, #2
 8017a20:	f7fb fe04 	bl	801362c <_calloc_r>
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d009      	beq.n	8017a3c <_Balloc+0x40>
 8017a28:	6044      	str	r4, [r0, #4]
 8017a2a:	6085      	str	r5, [r0, #8]
 8017a2c:	e00a      	b.n	8017a44 <_Balloc+0x48>
 8017a2e:	2221      	movs	r2, #33	; 0x21
 8017a30:	2104      	movs	r1, #4
 8017a32:	f7fb fdfb 	bl	801362c <_calloc_r>
 8017a36:	64f0      	str	r0, [r6, #76]	; 0x4c
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	d1e5      	bne.n	8017a08 <_Balloc+0xc>
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	bd70      	pop	{r4, r5, r6, pc}
 8017a40:	6802      	ldr	r2, [r0, #0]
 8017a42:	601a      	str	r2, [r3, #0]
 8017a44:	2300      	movs	r3, #0
 8017a46:	6103      	str	r3, [r0, #16]
 8017a48:	60c3      	str	r3, [r0, #12]
 8017a4a:	e7f8      	b.n	8017a3e <_Balloc+0x42>

08017a4c <_Bfree>:
 8017a4c:	2900      	cmp	r1, #0
 8017a4e:	d006      	beq.n	8017a5e <_Bfree+0x12>
 8017a50:	684b      	ldr	r3, [r1, #4]
 8017a52:	009a      	lsls	r2, r3, #2
 8017a54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017a56:	189b      	adds	r3, r3, r2
 8017a58:	681a      	ldr	r2, [r3, #0]
 8017a5a:	600a      	str	r2, [r1, #0]
 8017a5c:	6019      	str	r1, [r3, #0]
 8017a5e:	4770      	bx	lr

08017a60 <__multadd>:
 8017a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a62:	000e      	movs	r6, r1
 8017a64:	9001      	str	r0, [sp, #4]
 8017a66:	000c      	movs	r4, r1
 8017a68:	001d      	movs	r5, r3
 8017a6a:	2000      	movs	r0, #0
 8017a6c:	690f      	ldr	r7, [r1, #16]
 8017a6e:	3614      	adds	r6, #20
 8017a70:	6833      	ldr	r3, [r6, #0]
 8017a72:	3001      	adds	r0, #1
 8017a74:	b299      	uxth	r1, r3
 8017a76:	4351      	muls	r1, r2
 8017a78:	0c1b      	lsrs	r3, r3, #16
 8017a7a:	4353      	muls	r3, r2
 8017a7c:	1949      	adds	r1, r1, r5
 8017a7e:	0c0d      	lsrs	r5, r1, #16
 8017a80:	195b      	adds	r3, r3, r5
 8017a82:	0c1d      	lsrs	r5, r3, #16
 8017a84:	b289      	uxth	r1, r1
 8017a86:	041b      	lsls	r3, r3, #16
 8017a88:	185b      	adds	r3, r3, r1
 8017a8a:	c608      	stmia	r6!, {r3}
 8017a8c:	4287      	cmp	r7, r0
 8017a8e:	dcef      	bgt.n	8017a70 <__multadd+0x10>
 8017a90:	2d00      	cmp	r5, #0
 8017a92:	d022      	beq.n	8017ada <__multadd+0x7a>
 8017a94:	68a3      	ldr	r3, [r4, #8]
 8017a96:	42bb      	cmp	r3, r7
 8017a98:	dc19      	bgt.n	8017ace <__multadd+0x6e>
 8017a9a:	6863      	ldr	r3, [r4, #4]
 8017a9c:	9801      	ldr	r0, [sp, #4]
 8017a9e:	1c59      	adds	r1, r3, #1
 8017aa0:	f7ff ffac 	bl	80179fc <_Balloc>
 8017aa4:	1e06      	subs	r6, r0, #0
 8017aa6:	d105      	bne.n	8017ab4 <__multadd+0x54>
 8017aa8:	0002      	movs	r2, r0
 8017aaa:	21b5      	movs	r1, #181	; 0xb5
 8017aac:	4b0c      	ldr	r3, [pc, #48]	; (8017ae0 <__multadd+0x80>)
 8017aae:	480d      	ldr	r0, [pc, #52]	; (8017ae4 <__multadd+0x84>)
 8017ab0:	f000 fd26 	bl	8018500 <__assert_func>
 8017ab4:	0021      	movs	r1, r4
 8017ab6:	6923      	ldr	r3, [r4, #16]
 8017ab8:	310c      	adds	r1, #12
 8017aba:	1c9a      	adds	r2, r3, #2
 8017abc:	0092      	lsls	r2, r2, #2
 8017abe:	300c      	adds	r0, #12
 8017ac0:	f7fc f862 	bl	8013b88 <memcpy>
 8017ac4:	0021      	movs	r1, r4
 8017ac6:	9801      	ldr	r0, [sp, #4]
 8017ac8:	f7ff ffc0 	bl	8017a4c <_Bfree>
 8017acc:	0034      	movs	r4, r6
 8017ace:	1d3b      	adds	r3, r7, #4
 8017ad0:	009b      	lsls	r3, r3, #2
 8017ad2:	18e3      	adds	r3, r4, r3
 8017ad4:	605d      	str	r5, [r3, #4]
 8017ad6:	1c7b      	adds	r3, r7, #1
 8017ad8:	6123      	str	r3, [r4, #16]
 8017ada:	0020      	movs	r0, r4
 8017adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017ade:	46c0      	nop			; (mov r8, r8)
 8017ae0:	0801d121 	.word	0x0801d121
 8017ae4:	0801d208 	.word	0x0801d208

08017ae8 <__s2b>:
 8017ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017aea:	0006      	movs	r6, r0
 8017aec:	0018      	movs	r0, r3
 8017aee:	000c      	movs	r4, r1
 8017af0:	3008      	adds	r0, #8
 8017af2:	2109      	movs	r1, #9
 8017af4:	9301      	str	r3, [sp, #4]
 8017af6:	0015      	movs	r5, r2
 8017af8:	f7e8 fbb4 	bl	8000264 <__divsi3>
 8017afc:	2301      	movs	r3, #1
 8017afe:	2100      	movs	r1, #0
 8017b00:	4283      	cmp	r3, r0
 8017b02:	db0a      	blt.n	8017b1a <__s2b+0x32>
 8017b04:	0030      	movs	r0, r6
 8017b06:	f7ff ff79 	bl	80179fc <_Balloc>
 8017b0a:	1e01      	subs	r1, r0, #0
 8017b0c:	d108      	bne.n	8017b20 <__s2b+0x38>
 8017b0e:	0002      	movs	r2, r0
 8017b10:	4b19      	ldr	r3, [pc, #100]	; (8017b78 <__s2b+0x90>)
 8017b12:	481a      	ldr	r0, [pc, #104]	; (8017b7c <__s2b+0x94>)
 8017b14:	31ce      	adds	r1, #206	; 0xce
 8017b16:	f000 fcf3 	bl	8018500 <__assert_func>
 8017b1a:	005b      	lsls	r3, r3, #1
 8017b1c:	3101      	adds	r1, #1
 8017b1e:	e7ef      	b.n	8017b00 <__s2b+0x18>
 8017b20:	9b08      	ldr	r3, [sp, #32]
 8017b22:	6143      	str	r3, [r0, #20]
 8017b24:	2301      	movs	r3, #1
 8017b26:	6103      	str	r3, [r0, #16]
 8017b28:	2d09      	cmp	r5, #9
 8017b2a:	dd18      	ble.n	8017b5e <__s2b+0x76>
 8017b2c:	0023      	movs	r3, r4
 8017b2e:	3309      	adds	r3, #9
 8017b30:	001f      	movs	r7, r3
 8017b32:	9300      	str	r3, [sp, #0]
 8017b34:	1964      	adds	r4, r4, r5
 8017b36:	783b      	ldrb	r3, [r7, #0]
 8017b38:	220a      	movs	r2, #10
 8017b3a:	0030      	movs	r0, r6
 8017b3c:	3b30      	subs	r3, #48	; 0x30
 8017b3e:	f7ff ff8f 	bl	8017a60 <__multadd>
 8017b42:	3701      	adds	r7, #1
 8017b44:	0001      	movs	r1, r0
 8017b46:	42a7      	cmp	r7, r4
 8017b48:	d1f5      	bne.n	8017b36 <__s2b+0x4e>
 8017b4a:	002c      	movs	r4, r5
 8017b4c:	9b00      	ldr	r3, [sp, #0]
 8017b4e:	3c08      	subs	r4, #8
 8017b50:	191c      	adds	r4, r3, r4
 8017b52:	002f      	movs	r7, r5
 8017b54:	9b01      	ldr	r3, [sp, #4]
 8017b56:	429f      	cmp	r7, r3
 8017b58:	db04      	blt.n	8017b64 <__s2b+0x7c>
 8017b5a:	0008      	movs	r0, r1
 8017b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b5e:	2509      	movs	r5, #9
 8017b60:	340a      	adds	r4, #10
 8017b62:	e7f6      	b.n	8017b52 <__s2b+0x6a>
 8017b64:	1b63      	subs	r3, r4, r5
 8017b66:	5ddb      	ldrb	r3, [r3, r7]
 8017b68:	220a      	movs	r2, #10
 8017b6a:	0030      	movs	r0, r6
 8017b6c:	3b30      	subs	r3, #48	; 0x30
 8017b6e:	f7ff ff77 	bl	8017a60 <__multadd>
 8017b72:	3701      	adds	r7, #1
 8017b74:	0001      	movs	r1, r0
 8017b76:	e7ed      	b.n	8017b54 <__s2b+0x6c>
 8017b78:	0801d121 	.word	0x0801d121
 8017b7c:	0801d208 	.word	0x0801d208

08017b80 <__hi0bits>:
 8017b80:	0003      	movs	r3, r0
 8017b82:	0c02      	lsrs	r2, r0, #16
 8017b84:	2000      	movs	r0, #0
 8017b86:	4282      	cmp	r2, r0
 8017b88:	d101      	bne.n	8017b8e <__hi0bits+0xe>
 8017b8a:	041b      	lsls	r3, r3, #16
 8017b8c:	3010      	adds	r0, #16
 8017b8e:	0e1a      	lsrs	r2, r3, #24
 8017b90:	d101      	bne.n	8017b96 <__hi0bits+0x16>
 8017b92:	3008      	adds	r0, #8
 8017b94:	021b      	lsls	r3, r3, #8
 8017b96:	0f1a      	lsrs	r2, r3, #28
 8017b98:	d101      	bne.n	8017b9e <__hi0bits+0x1e>
 8017b9a:	3004      	adds	r0, #4
 8017b9c:	011b      	lsls	r3, r3, #4
 8017b9e:	0f9a      	lsrs	r2, r3, #30
 8017ba0:	d101      	bne.n	8017ba6 <__hi0bits+0x26>
 8017ba2:	3002      	adds	r0, #2
 8017ba4:	009b      	lsls	r3, r3, #2
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	db03      	blt.n	8017bb2 <__hi0bits+0x32>
 8017baa:	3001      	adds	r0, #1
 8017bac:	005b      	lsls	r3, r3, #1
 8017bae:	d400      	bmi.n	8017bb2 <__hi0bits+0x32>
 8017bb0:	2020      	movs	r0, #32
 8017bb2:	4770      	bx	lr

08017bb4 <__lo0bits>:
 8017bb4:	6803      	ldr	r3, [r0, #0]
 8017bb6:	0002      	movs	r2, r0
 8017bb8:	2107      	movs	r1, #7
 8017bba:	0018      	movs	r0, r3
 8017bbc:	4008      	ands	r0, r1
 8017bbe:	420b      	tst	r3, r1
 8017bc0:	d00d      	beq.n	8017bde <__lo0bits+0x2a>
 8017bc2:	3906      	subs	r1, #6
 8017bc4:	2000      	movs	r0, #0
 8017bc6:	420b      	tst	r3, r1
 8017bc8:	d105      	bne.n	8017bd6 <__lo0bits+0x22>
 8017bca:	3002      	adds	r0, #2
 8017bcc:	4203      	tst	r3, r0
 8017bce:	d003      	beq.n	8017bd8 <__lo0bits+0x24>
 8017bd0:	40cb      	lsrs	r3, r1
 8017bd2:	0008      	movs	r0, r1
 8017bd4:	6013      	str	r3, [r2, #0]
 8017bd6:	4770      	bx	lr
 8017bd8:	089b      	lsrs	r3, r3, #2
 8017bda:	6013      	str	r3, [r2, #0]
 8017bdc:	e7fb      	b.n	8017bd6 <__lo0bits+0x22>
 8017bde:	b299      	uxth	r1, r3
 8017be0:	2900      	cmp	r1, #0
 8017be2:	d101      	bne.n	8017be8 <__lo0bits+0x34>
 8017be4:	2010      	movs	r0, #16
 8017be6:	0c1b      	lsrs	r3, r3, #16
 8017be8:	b2d9      	uxtb	r1, r3
 8017bea:	2900      	cmp	r1, #0
 8017bec:	d101      	bne.n	8017bf2 <__lo0bits+0x3e>
 8017bee:	3008      	adds	r0, #8
 8017bf0:	0a1b      	lsrs	r3, r3, #8
 8017bf2:	0719      	lsls	r1, r3, #28
 8017bf4:	d101      	bne.n	8017bfa <__lo0bits+0x46>
 8017bf6:	3004      	adds	r0, #4
 8017bf8:	091b      	lsrs	r3, r3, #4
 8017bfa:	0799      	lsls	r1, r3, #30
 8017bfc:	d101      	bne.n	8017c02 <__lo0bits+0x4e>
 8017bfe:	3002      	adds	r0, #2
 8017c00:	089b      	lsrs	r3, r3, #2
 8017c02:	07d9      	lsls	r1, r3, #31
 8017c04:	d4e9      	bmi.n	8017bda <__lo0bits+0x26>
 8017c06:	3001      	adds	r0, #1
 8017c08:	085b      	lsrs	r3, r3, #1
 8017c0a:	d1e6      	bne.n	8017bda <__lo0bits+0x26>
 8017c0c:	2020      	movs	r0, #32
 8017c0e:	e7e2      	b.n	8017bd6 <__lo0bits+0x22>

08017c10 <__i2b>:
 8017c10:	b510      	push	{r4, lr}
 8017c12:	000c      	movs	r4, r1
 8017c14:	2101      	movs	r1, #1
 8017c16:	f7ff fef1 	bl	80179fc <_Balloc>
 8017c1a:	2800      	cmp	r0, #0
 8017c1c:	d106      	bne.n	8017c2c <__i2b+0x1c>
 8017c1e:	21a0      	movs	r1, #160	; 0xa0
 8017c20:	0002      	movs	r2, r0
 8017c22:	4b04      	ldr	r3, [pc, #16]	; (8017c34 <__i2b+0x24>)
 8017c24:	4804      	ldr	r0, [pc, #16]	; (8017c38 <__i2b+0x28>)
 8017c26:	0049      	lsls	r1, r1, #1
 8017c28:	f000 fc6a 	bl	8018500 <__assert_func>
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	6144      	str	r4, [r0, #20]
 8017c30:	6103      	str	r3, [r0, #16]
 8017c32:	bd10      	pop	{r4, pc}
 8017c34:	0801d121 	.word	0x0801d121
 8017c38:	0801d208 	.word	0x0801d208

08017c3c <__multiply>:
 8017c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c3e:	690b      	ldr	r3, [r1, #16]
 8017c40:	0014      	movs	r4, r2
 8017c42:	6912      	ldr	r2, [r2, #16]
 8017c44:	000d      	movs	r5, r1
 8017c46:	b089      	sub	sp, #36	; 0x24
 8017c48:	4293      	cmp	r3, r2
 8017c4a:	da01      	bge.n	8017c50 <__multiply+0x14>
 8017c4c:	0025      	movs	r5, r4
 8017c4e:	000c      	movs	r4, r1
 8017c50:	692f      	ldr	r7, [r5, #16]
 8017c52:	6926      	ldr	r6, [r4, #16]
 8017c54:	6869      	ldr	r1, [r5, #4]
 8017c56:	19bb      	adds	r3, r7, r6
 8017c58:	9302      	str	r3, [sp, #8]
 8017c5a:	68ab      	ldr	r3, [r5, #8]
 8017c5c:	19ba      	adds	r2, r7, r6
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	da00      	bge.n	8017c64 <__multiply+0x28>
 8017c62:	3101      	adds	r1, #1
 8017c64:	f7ff feca 	bl	80179fc <_Balloc>
 8017c68:	9001      	str	r0, [sp, #4]
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	d106      	bne.n	8017c7c <__multiply+0x40>
 8017c6e:	215e      	movs	r1, #94	; 0x5e
 8017c70:	0002      	movs	r2, r0
 8017c72:	4b48      	ldr	r3, [pc, #288]	; (8017d94 <__multiply+0x158>)
 8017c74:	4848      	ldr	r0, [pc, #288]	; (8017d98 <__multiply+0x15c>)
 8017c76:	31ff      	adds	r1, #255	; 0xff
 8017c78:	f000 fc42 	bl	8018500 <__assert_func>
 8017c7c:	9b01      	ldr	r3, [sp, #4]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	3314      	adds	r3, #20
 8017c82:	469c      	mov	ip, r3
 8017c84:	19bb      	adds	r3, r7, r6
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	4463      	add	r3, ip
 8017c8a:	9303      	str	r3, [sp, #12]
 8017c8c:	4663      	mov	r3, ip
 8017c8e:	9903      	ldr	r1, [sp, #12]
 8017c90:	428b      	cmp	r3, r1
 8017c92:	d32c      	bcc.n	8017cee <__multiply+0xb2>
 8017c94:	002b      	movs	r3, r5
 8017c96:	0022      	movs	r2, r4
 8017c98:	3314      	adds	r3, #20
 8017c9a:	00bf      	lsls	r7, r7, #2
 8017c9c:	3214      	adds	r2, #20
 8017c9e:	9306      	str	r3, [sp, #24]
 8017ca0:	00b6      	lsls	r6, r6, #2
 8017ca2:	19db      	adds	r3, r3, r7
 8017ca4:	9304      	str	r3, [sp, #16]
 8017ca6:	1993      	adds	r3, r2, r6
 8017ca8:	9307      	str	r3, [sp, #28]
 8017caa:	2304      	movs	r3, #4
 8017cac:	9305      	str	r3, [sp, #20]
 8017cae:	002b      	movs	r3, r5
 8017cb0:	9904      	ldr	r1, [sp, #16]
 8017cb2:	3315      	adds	r3, #21
 8017cb4:	9200      	str	r2, [sp, #0]
 8017cb6:	4299      	cmp	r1, r3
 8017cb8:	d305      	bcc.n	8017cc6 <__multiply+0x8a>
 8017cba:	1b4b      	subs	r3, r1, r5
 8017cbc:	3b15      	subs	r3, #21
 8017cbe:	089b      	lsrs	r3, r3, #2
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	9305      	str	r3, [sp, #20]
 8017cc6:	9b07      	ldr	r3, [sp, #28]
 8017cc8:	9a00      	ldr	r2, [sp, #0]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d311      	bcc.n	8017cf2 <__multiply+0xb6>
 8017cce:	9b02      	ldr	r3, [sp, #8]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	dd06      	ble.n	8017ce2 <__multiply+0xa6>
 8017cd4:	9b03      	ldr	r3, [sp, #12]
 8017cd6:	3b04      	subs	r3, #4
 8017cd8:	9303      	str	r3, [sp, #12]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	9300      	str	r3, [sp, #0]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d053      	beq.n	8017d8a <__multiply+0x14e>
 8017ce2:	9b01      	ldr	r3, [sp, #4]
 8017ce4:	9a02      	ldr	r2, [sp, #8]
 8017ce6:	0018      	movs	r0, r3
 8017ce8:	611a      	str	r2, [r3, #16]
 8017cea:	b009      	add	sp, #36	; 0x24
 8017cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cee:	c304      	stmia	r3!, {r2}
 8017cf0:	e7cd      	b.n	8017c8e <__multiply+0x52>
 8017cf2:	9b00      	ldr	r3, [sp, #0]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	b298      	uxth	r0, r3
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	d01b      	beq.n	8017d34 <__multiply+0xf8>
 8017cfc:	4667      	mov	r7, ip
 8017cfe:	2400      	movs	r4, #0
 8017d00:	9e06      	ldr	r6, [sp, #24]
 8017d02:	ce02      	ldmia	r6!, {r1}
 8017d04:	683a      	ldr	r2, [r7, #0]
 8017d06:	b28b      	uxth	r3, r1
 8017d08:	4343      	muls	r3, r0
 8017d0a:	b292      	uxth	r2, r2
 8017d0c:	189b      	adds	r3, r3, r2
 8017d0e:	191b      	adds	r3, r3, r4
 8017d10:	0c0c      	lsrs	r4, r1, #16
 8017d12:	4344      	muls	r4, r0
 8017d14:	683a      	ldr	r2, [r7, #0]
 8017d16:	0c11      	lsrs	r1, r2, #16
 8017d18:	1861      	adds	r1, r4, r1
 8017d1a:	0c1c      	lsrs	r4, r3, #16
 8017d1c:	1909      	adds	r1, r1, r4
 8017d1e:	0c0c      	lsrs	r4, r1, #16
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	0409      	lsls	r1, r1, #16
 8017d24:	430b      	orrs	r3, r1
 8017d26:	c708      	stmia	r7!, {r3}
 8017d28:	9b04      	ldr	r3, [sp, #16]
 8017d2a:	42b3      	cmp	r3, r6
 8017d2c:	d8e9      	bhi.n	8017d02 <__multiply+0xc6>
 8017d2e:	4663      	mov	r3, ip
 8017d30:	9a05      	ldr	r2, [sp, #20]
 8017d32:	509c      	str	r4, [r3, r2]
 8017d34:	9b00      	ldr	r3, [sp, #0]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	0c1e      	lsrs	r6, r3, #16
 8017d3a:	d020      	beq.n	8017d7e <__multiply+0x142>
 8017d3c:	4663      	mov	r3, ip
 8017d3e:	002c      	movs	r4, r5
 8017d40:	4660      	mov	r0, ip
 8017d42:	2700      	movs	r7, #0
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	3414      	adds	r4, #20
 8017d48:	6822      	ldr	r2, [r4, #0]
 8017d4a:	b29b      	uxth	r3, r3
 8017d4c:	b291      	uxth	r1, r2
 8017d4e:	4371      	muls	r1, r6
 8017d50:	6802      	ldr	r2, [r0, #0]
 8017d52:	0c12      	lsrs	r2, r2, #16
 8017d54:	1889      	adds	r1, r1, r2
 8017d56:	19cf      	adds	r7, r1, r7
 8017d58:	0439      	lsls	r1, r7, #16
 8017d5a:	430b      	orrs	r3, r1
 8017d5c:	6003      	str	r3, [r0, #0]
 8017d5e:	cc02      	ldmia	r4!, {r1}
 8017d60:	6843      	ldr	r3, [r0, #4]
 8017d62:	0c09      	lsrs	r1, r1, #16
 8017d64:	4371      	muls	r1, r6
 8017d66:	b29b      	uxth	r3, r3
 8017d68:	0c3f      	lsrs	r7, r7, #16
 8017d6a:	18cb      	adds	r3, r1, r3
 8017d6c:	9a04      	ldr	r2, [sp, #16]
 8017d6e:	19db      	adds	r3, r3, r7
 8017d70:	0c1f      	lsrs	r7, r3, #16
 8017d72:	3004      	adds	r0, #4
 8017d74:	42a2      	cmp	r2, r4
 8017d76:	d8e7      	bhi.n	8017d48 <__multiply+0x10c>
 8017d78:	4662      	mov	r2, ip
 8017d7a:	9905      	ldr	r1, [sp, #20]
 8017d7c:	5053      	str	r3, [r2, r1]
 8017d7e:	9b00      	ldr	r3, [sp, #0]
 8017d80:	3304      	adds	r3, #4
 8017d82:	9300      	str	r3, [sp, #0]
 8017d84:	2304      	movs	r3, #4
 8017d86:	449c      	add	ip, r3
 8017d88:	e79d      	b.n	8017cc6 <__multiply+0x8a>
 8017d8a:	9b02      	ldr	r3, [sp, #8]
 8017d8c:	3b01      	subs	r3, #1
 8017d8e:	9302      	str	r3, [sp, #8]
 8017d90:	e79d      	b.n	8017cce <__multiply+0x92>
 8017d92:	46c0      	nop			; (mov r8, r8)
 8017d94:	0801d121 	.word	0x0801d121
 8017d98:	0801d208 	.word	0x0801d208

08017d9c <__pow5mult>:
 8017d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d9e:	2303      	movs	r3, #3
 8017da0:	0015      	movs	r5, r2
 8017da2:	0007      	movs	r7, r0
 8017da4:	000e      	movs	r6, r1
 8017da6:	401a      	ands	r2, r3
 8017da8:	421d      	tst	r5, r3
 8017daa:	d008      	beq.n	8017dbe <__pow5mult+0x22>
 8017dac:	491a      	ldr	r1, [pc, #104]	; (8017e18 <__pow5mult+0x7c>)
 8017dae:	3a01      	subs	r2, #1
 8017db0:	0092      	lsls	r2, r2, #2
 8017db2:	5852      	ldr	r2, [r2, r1]
 8017db4:	2300      	movs	r3, #0
 8017db6:	0031      	movs	r1, r6
 8017db8:	f7ff fe52 	bl	8017a60 <__multadd>
 8017dbc:	0006      	movs	r6, r0
 8017dbe:	10ad      	asrs	r5, r5, #2
 8017dc0:	d027      	beq.n	8017e12 <__pow5mult+0x76>
 8017dc2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8017dc4:	2c00      	cmp	r4, #0
 8017dc6:	d107      	bne.n	8017dd8 <__pow5mult+0x3c>
 8017dc8:	0038      	movs	r0, r7
 8017dca:	4914      	ldr	r1, [pc, #80]	; (8017e1c <__pow5mult+0x80>)
 8017dcc:	f7ff ff20 	bl	8017c10 <__i2b>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	0004      	movs	r4, r0
 8017dd4:	64b8      	str	r0, [r7, #72]	; 0x48
 8017dd6:	6003      	str	r3, [r0, #0]
 8017dd8:	2301      	movs	r3, #1
 8017dda:	421d      	tst	r5, r3
 8017ddc:	d00a      	beq.n	8017df4 <__pow5mult+0x58>
 8017dde:	0031      	movs	r1, r6
 8017de0:	0022      	movs	r2, r4
 8017de2:	0038      	movs	r0, r7
 8017de4:	f7ff ff2a 	bl	8017c3c <__multiply>
 8017de8:	0031      	movs	r1, r6
 8017dea:	9001      	str	r0, [sp, #4]
 8017dec:	0038      	movs	r0, r7
 8017dee:	f7ff fe2d 	bl	8017a4c <_Bfree>
 8017df2:	9e01      	ldr	r6, [sp, #4]
 8017df4:	106d      	asrs	r5, r5, #1
 8017df6:	d00c      	beq.n	8017e12 <__pow5mult+0x76>
 8017df8:	6820      	ldr	r0, [r4, #0]
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d107      	bne.n	8017e0e <__pow5mult+0x72>
 8017dfe:	0022      	movs	r2, r4
 8017e00:	0021      	movs	r1, r4
 8017e02:	0038      	movs	r0, r7
 8017e04:	f7ff ff1a 	bl	8017c3c <__multiply>
 8017e08:	2300      	movs	r3, #0
 8017e0a:	6020      	str	r0, [r4, #0]
 8017e0c:	6003      	str	r3, [r0, #0]
 8017e0e:	0004      	movs	r4, r0
 8017e10:	e7e2      	b.n	8017dd8 <__pow5mult+0x3c>
 8017e12:	0030      	movs	r0, r6
 8017e14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e16:	46c0      	nop			; (mov r8, r8)
 8017e18:	0801d358 	.word	0x0801d358
 8017e1c:	00000271 	.word	0x00000271

08017e20 <__lshift>:
 8017e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e22:	000c      	movs	r4, r1
 8017e24:	0017      	movs	r7, r2
 8017e26:	6923      	ldr	r3, [r4, #16]
 8017e28:	1155      	asrs	r5, r2, #5
 8017e2a:	b087      	sub	sp, #28
 8017e2c:	18eb      	adds	r3, r5, r3
 8017e2e:	9302      	str	r3, [sp, #8]
 8017e30:	3301      	adds	r3, #1
 8017e32:	9301      	str	r3, [sp, #4]
 8017e34:	6849      	ldr	r1, [r1, #4]
 8017e36:	68a3      	ldr	r3, [r4, #8]
 8017e38:	9004      	str	r0, [sp, #16]
 8017e3a:	9a01      	ldr	r2, [sp, #4]
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	db10      	blt.n	8017e62 <__lshift+0x42>
 8017e40:	9804      	ldr	r0, [sp, #16]
 8017e42:	f7ff fddb 	bl	80179fc <_Balloc>
 8017e46:	2300      	movs	r3, #0
 8017e48:	0002      	movs	r2, r0
 8017e4a:	0006      	movs	r6, r0
 8017e4c:	0019      	movs	r1, r3
 8017e4e:	3214      	adds	r2, #20
 8017e50:	4298      	cmp	r0, r3
 8017e52:	d10c      	bne.n	8017e6e <__lshift+0x4e>
 8017e54:	21da      	movs	r1, #218	; 0xda
 8017e56:	0002      	movs	r2, r0
 8017e58:	4b26      	ldr	r3, [pc, #152]	; (8017ef4 <__lshift+0xd4>)
 8017e5a:	4827      	ldr	r0, [pc, #156]	; (8017ef8 <__lshift+0xd8>)
 8017e5c:	31ff      	adds	r1, #255	; 0xff
 8017e5e:	f000 fb4f 	bl	8018500 <__assert_func>
 8017e62:	3101      	adds	r1, #1
 8017e64:	005b      	lsls	r3, r3, #1
 8017e66:	e7e8      	b.n	8017e3a <__lshift+0x1a>
 8017e68:	0098      	lsls	r0, r3, #2
 8017e6a:	5011      	str	r1, [r2, r0]
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	42ab      	cmp	r3, r5
 8017e70:	dbfa      	blt.n	8017e68 <__lshift+0x48>
 8017e72:	43eb      	mvns	r3, r5
 8017e74:	17db      	asrs	r3, r3, #31
 8017e76:	401d      	ands	r5, r3
 8017e78:	211f      	movs	r1, #31
 8017e7a:	0023      	movs	r3, r4
 8017e7c:	0038      	movs	r0, r7
 8017e7e:	00ad      	lsls	r5, r5, #2
 8017e80:	1955      	adds	r5, r2, r5
 8017e82:	6922      	ldr	r2, [r4, #16]
 8017e84:	3314      	adds	r3, #20
 8017e86:	0092      	lsls	r2, r2, #2
 8017e88:	4008      	ands	r0, r1
 8017e8a:	4684      	mov	ip, r0
 8017e8c:	189a      	adds	r2, r3, r2
 8017e8e:	420f      	tst	r7, r1
 8017e90:	d02a      	beq.n	8017ee8 <__lshift+0xc8>
 8017e92:	3101      	adds	r1, #1
 8017e94:	1a09      	subs	r1, r1, r0
 8017e96:	9105      	str	r1, [sp, #20]
 8017e98:	2100      	movs	r1, #0
 8017e9a:	9503      	str	r5, [sp, #12]
 8017e9c:	4667      	mov	r7, ip
 8017e9e:	6818      	ldr	r0, [r3, #0]
 8017ea0:	40b8      	lsls	r0, r7
 8017ea2:	4301      	orrs	r1, r0
 8017ea4:	9803      	ldr	r0, [sp, #12]
 8017ea6:	c002      	stmia	r0!, {r1}
 8017ea8:	cb02      	ldmia	r3!, {r1}
 8017eaa:	9003      	str	r0, [sp, #12]
 8017eac:	9805      	ldr	r0, [sp, #20]
 8017eae:	40c1      	lsrs	r1, r0
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d8f3      	bhi.n	8017e9c <__lshift+0x7c>
 8017eb4:	0020      	movs	r0, r4
 8017eb6:	3015      	adds	r0, #21
 8017eb8:	2304      	movs	r3, #4
 8017eba:	4282      	cmp	r2, r0
 8017ebc:	d304      	bcc.n	8017ec8 <__lshift+0xa8>
 8017ebe:	1b13      	subs	r3, r2, r4
 8017ec0:	3b15      	subs	r3, #21
 8017ec2:	089b      	lsrs	r3, r3, #2
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	009b      	lsls	r3, r3, #2
 8017ec8:	50e9      	str	r1, [r5, r3]
 8017eca:	2900      	cmp	r1, #0
 8017ecc:	d002      	beq.n	8017ed4 <__lshift+0xb4>
 8017ece:	9b02      	ldr	r3, [sp, #8]
 8017ed0:	3302      	adds	r3, #2
 8017ed2:	9301      	str	r3, [sp, #4]
 8017ed4:	9b01      	ldr	r3, [sp, #4]
 8017ed6:	9804      	ldr	r0, [sp, #16]
 8017ed8:	3b01      	subs	r3, #1
 8017eda:	0021      	movs	r1, r4
 8017edc:	6133      	str	r3, [r6, #16]
 8017ede:	f7ff fdb5 	bl	8017a4c <_Bfree>
 8017ee2:	0030      	movs	r0, r6
 8017ee4:	b007      	add	sp, #28
 8017ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ee8:	cb02      	ldmia	r3!, {r1}
 8017eea:	c502      	stmia	r5!, {r1}
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d8fb      	bhi.n	8017ee8 <__lshift+0xc8>
 8017ef0:	e7f0      	b.n	8017ed4 <__lshift+0xb4>
 8017ef2:	46c0      	nop			; (mov r8, r8)
 8017ef4:	0801d121 	.word	0x0801d121
 8017ef8:	0801d208 	.word	0x0801d208

08017efc <__mcmp>:
 8017efc:	6902      	ldr	r2, [r0, #16]
 8017efe:	690b      	ldr	r3, [r1, #16]
 8017f00:	b530      	push	{r4, r5, lr}
 8017f02:	0004      	movs	r4, r0
 8017f04:	1ad0      	subs	r0, r2, r3
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d10d      	bne.n	8017f26 <__mcmp+0x2a>
 8017f0a:	009b      	lsls	r3, r3, #2
 8017f0c:	3414      	adds	r4, #20
 8017f0e:	3114      	adds	r1, #20
 8017f10:	18e2      	adds	r2, r4, r3
 8017f12:	18c9      	adds	r1, r1, r3
 8017f14:	3a04      	subs	r2, #4
 8017f16:	3904      	subs	r1, #4
 8017f18:	6815      	ldr	r5, [r2, #0]
 8017f1a:	680b      	ldr	r3, [r1, #0]
 8017f1c:	429d      	cmp	r5, r3
 8017f1e:	d003      	beq.n	8017f28 <__mcmp+0x2c>
 8017f20:	2001      	movs	r0, #1
 8017f22:	429d      	cmp	r5, r3
 8017f24:	d303      	bcc.n	8017f2e <__mcmp+0x32>
 8017f26:	bd30      	pop	{r4, r5, pc}
 8017f28:	4294      	cmp	r4, r2
 8017f2a:	d3f3      	bcc.n	8017f14 <__mcmp+0x18>
 8017f2c:	e7fb      	b.n	8017f26 <__mcmp+0x2a>
 8017f2e:	4240      	negs	r0, r0
 8017f30:	e7f9      	b.n	8017f26 <__mcmp+0x2a>
	...

08017f34 <__mdiff>:
 8017f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f36:	000e      	movs	r6, r1
 8017f38:	0007      	movs	r7, r0
 8017f3a:	0011      	movs	r1, r2
 8017f3c:	0030      	movs	r0, r6
 8017f3e:	b087      	sub	sp, #28
 8017f40:	0014      	movs	r4, r2
 8017f42:	f7ff ffdb 	bl	8017efc <__mcmp>
 8017f46:	1e05      	subs	r5, r0, #0
 8017f48:	d110      	bne.n	8017f6c <__mdiff+0x38>
 8017f4a:	0001      	movs	r1, r0
 8017f4c:	0038      	movs	r0, r7
 8017f4e:	f7ff fd55 	bl	80179fc <_Balloc>
 8017f52:	1e02      	subs	r2, r0, #0
 8017f54:	d104      	bne.n	8017f60 <__mdiff+0x2c>
 8017f56:	4b40      	ldr	r3, [pc, #256]	; (8018058 <__mdiff+0x124>)
 8017f58:	4940      	ldr	r1, [pc, #256]	; (801805c <__mdiff+0x128>)
 8017f5a:	4841      	ldr	r0, [pc, #260]	; (8018060 <__mdiff+0x12c>)
 8017f5c:	f000 fad0 	bl	8018500 <__assert_func>
 8017f60:	2301      	movs	r3, #1
 8017f62:	6145      	str	r5, [r0, #20]
 8017f64:	6103      	str	r3, [r0, #16]
 8017f66:	0010      	movs	r0, r2
 8017f68:	b007      	add	sp, #28
 8017f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	9301      	str	r3, [sp, #4]
 8017f70:	2800      	cmp	r0, #0
 8017f72:	db04      	blt.n	8017f7e <__mdiff+0x4a>
 8017f74:	0023      	movs	r3, r4
 8017f76:	0034      	movs	r4, r6
 8017f78:	001e      	movs	r6, r3
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	9301      	str	r3, [sp, #4]
 8017f7e:	0038      	movs	r0, r7
 8017f80:	6861      	ldr	r1, [r4, #4]
 8017f82:	f7ff fd3b 	bl	80179fc <_Balloc>
 8017f86:	1e02      	subs	r2, r0, #0
 8017f88:	d103      	bne.n	8017f92 <__mdiff+0x5e>
 8017f8a:	2190      	movs	r1, #144	; 0x90
 8017f8c:	4b32      	ldr	r3, [pc, #200]	; (8018058 <__mdiff+0x124>)
 8017f8e:	0089      	lsls	r1, r1, #2
 8017f90:	e7e3      	b.n	8017f5a <__mdiff+0x26>
 8017f92:	9b01      	ldr	r3, [sp, #4]
 8017f94:	2700      	movs	r7, #0
 8017f96:	60c3      	str	r3, [r0, #12]
 8017f98:	6920      	ldr	r0, [r4, #16]
 8017f9a:	3414      	adds	r4, #20
 8017f9c:	9401      	str	r4, [sp, #4]
 8017f9e:	9b01      	ldr	r3, [sp, #4]
 8017fa0:	0084      	lsls	r4, r0, #2
 8017fa2:	191b      	adds	r3, r3, r4
 8017fa4:	0034      	movs	r4, r6
 8017fa6:	9302      	str	r3, [sp, #8]
 8017fa8:	6933      	ldr	r3, [r6, #16]
 8017faa:	3414      	adds	r4, #20
 8017fac:	0099      	lsls	r1, r3, #2
 8017fae:	1863      	adds	r3, r4, r1
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	0013      	movs	r3, r2
 8017fb4:	3314      	adds	r3, #20
 8017fb6:	469c      	mov	ip, r3
 8017fb8:	9305      	str	r3, [sp, #20]
 8017fba:	9b01      	ldr	r3, [sp, #4]
 8017fbc:	9304      	str	r3, [sp, #16]
 8017fbe:	9b04      	ldr	r3, [sp, #16]
 8017fc0:	cc02      	ldmia	r4!, {r1}
 8017fc2:	cb20      	ldmia	r3!, {r5}
 8017fc4:	9304      	str	r3, [sp, #16]
 8017fc6:	b2ab      	uxth	r3, r5
 8017fc8:	19df      	adds	r7, r3, r7
 8017fca:	b28b      	uxth	r3, r1
 8017fcc:	1afb      	subs	r3, r7, r3
 8017fce:	0c09      	lsrs	r1, r1, #16
 8017fd0:	0c2d      	lsrs	r5, r5, #16
 8017fd2:	1a6d      	subs	r5, r5, r1
 8017fd4:	1419      	asrs	r1, r3, #16
 8017fd6:	186d      	adds	r5, r5, r1
 8017fd8:	4661      	mov	r1, ip
 8017fda:	142f      	asrs	r7, r5, #16
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	042d      	lsls	r5, r5, #16
 8017fe0:	432b      	orrs	r3, r5
 8017fe2:	c108      	stmia	r1!, {r3}
 8017fe4:	9b03      	ldr	r3, [sp, #12]
 8017fe6:	468c      	mov	ip, r1
 8017fe8:	42a3      	cmp	r3, r4
 8017fea:	d8e8      	bhi.n	8017fbe <__mdiff+0x8a>
 8017fec:	0031      	movs	r1, r6
 8017fee:	9c03      	ldr	r4, [sp, #12]
 8017ff0:	3115      	adds	r1, #21
 8017ff2:	2304      	movs	r3, #4
 8017ff4:	428c      	cmp	r4, r1
 8017ff6:	d304      	bcc.n	8018002 <__mdiff+0xce>
 8017ff8:	1ba3      	subs	r3, r4, r6
 8017ffa:	3b15      	subs	r3, #21
 8017ffc:	089b      	lsrs	r3, r3, #2
 8017ffe:	3301      	adds	r3, #1
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	9901      	ldr	r1, [sp, #4]
 8018004:	18cc      	adds	r4, r1, r3
 8018006:	9905      	ldr	r1, [sp, #20]
 8018008:	0026      	movs	r6, r4
 801800a:	18cb      	adds	r3, r1, r3
 801800c:	469c      	mov	ip, r3
 801800e:	9902      	ldr	r1, [sp, #8]
 8018010:	428e      	cmp	r6, r1
 8018012:	d310      	bcc.n	8018036 <__mdiff+0x102>
 8018014:	9e02      	ldr	r6, [sp, #8]
 8018016:	1ee1      	subs	r1, r4, #3
 8018018:	2500      	movs	r5, #0
 801801a:	428e      	cmp	r6, r1
 801801c:	d304      	bcc.n	8018028 <__mdiff+0xf4>
 801801e:	0031      	movs	r1, r6
 8018020:	3103      	adds	r1, #3
 8018022:	1b0c      	subs	r4, r1, r4
 8018024:	08a4      	lsrs	r4, r4, #2
 8018026:	00a5      	lsls	r5, r4, #2
 8018028:	195b      	adds	r3, r3, r5
 801802a:	3b04      	subs	r3, #4
 801802c:	6819      	ldr	r1, [r3, #0]
 801802e:	2900      	cmp	r1, #0
 8018030:	d00f      	beq.n	8018052 <__mdiff+0x11e>
 8018032:	6110      	str	r0, [r2, #16]
 8018034:	e797      	b.n	8017f66 <__mdiff+0x32>
 8018036:	ce02      	ldmia	r6!, {r1}
 8018038:	b28d      	uxth	r5, r1
 801803a:	19ed      	adds	r5, r5, r7
 801803c:	0c0f      	lsrs	r7, r1, #16
 801803e:	1429      	asrs	r1, r5, #16
 8018040:	1879      	adds	r1, r7, r1
 8018042:	140f      	asrs	r7, r1, #16
 8018044:	b2ad      	uxth	r5, r5
 8018046:	0409      	lsls	r1, r1, #16
 8018048:	430d      	orrs	r5, r1
 801804a:	4661      	mov	r1, ip
 801804c:	c120      	stmia	r1!, {r5}
 801804e:	468c      	mov	ip, r1
 8018050:	e7dd      	b.n	801800e <__mdiff+0xda>
 8018052:	3801      	subs	r0, #1
 8018054:	e7e9      	b.n	801802a <__mdiff+0xf6>
 8018056:	46c0      	nop			; (mov r8, r8)
 8018058:	0801d121 	.word	0x0801d121
 801805c:	00000232 	.word	0x00000232
 8018060:	0801d208 	.word	0x0801d208

08018064 <__ulp>:
 8018064:	4b0f      	ldr	r3, [pc, #60]	; (80180a4 <__ulp+0x40>)
 8018066:	4019      	ands	r1, r3
 8018068:	4b0f      	ldr	r3, [pc, #60]	; (80180a8 <__ulp+0x44>)
 801806a:	18c9      	adds	r1, r1, r3
 801806c:	2900      	cmp	r1, #0
 801806e:	dd04      	ble.n	801807a <__ulp+0x16>
 8018070:	2200      	movs	r2, #0
 8018072:	000b      	movs	r3, r1
 8018074:	0010      	movs	r0, r2
 8018076:	0019      	movs	r1, r3
 8018078:	4770      	bx	lr
 801807a:	4249      	negs	r1, r1
 801807c:	2200      	movs	r2, #0
 801807e:	2300      	movs	r3, #0
 8018080:	1509      	asrs	r1, r1, #20
 8018082:	2913      	cmp	r1, #19
 8018084:	dc04      	bgt.n	8018090 <__ulp+0x2c>
 8018086:	2080      	movs	r0, #128	; 0x80
 8018088:	0300      	lsls	r0, r0, #12
 801808a:	4108      	asrs	r0, r1
 801808c:	0003      	movs	r3, r0
 801808e:	e7f1      	b.n	8018074 <__ulp+0x10>
 8018090:	3914      	subs	r1, #20
 8018092:	2001      	movs	r0, #1
 8018094:	291e      	cmp	r1, #30
 8018096:	dc02      	bgt.n	801809e <__ulp+0x3a>
 8018098:	2080      	movs	r0, #128	; 0x80
 801809a:	0600      	lsls	r0, r0, #24
 801809c:	40c8      	lsrs	r0, r1
 801809e:	0002      	movs	r2, r0
 80180a0:	e7e8      	b.n	8018074 <__ulp+0x10>
 80180a2:	46c0      	nop			; (mov r8, r8)
 80180a4:	7ff00000 	.word	0x7ff00000
 80180a8:	fcc00000 	.word	0xfcc00000

080180ac <__b2d>:
 80180ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180ae:	0006      	movs	r6, r0
 80180b0:	6903      	ldr	r3, [r0, #16]
 80180b2:	3614      	adds	r6, #20
 80180b4:	009b      	lsls	r3, r3, #2
 80180b6:	18f3      	adds	r3, r6, r3
 80180b8:	1f1d      	subs	r5, r3, #4
 80180ba:	682c      	ldr	r4, [r5, #0]
 80180bc:	000f      	movs	r7, r1
 80180be:	0020      	movs	r0, r4
 80180c0:	9301      	str	r3, [sp, #4]
 80180c2:	f7ff fd5d 	bl	8017b80 <__hi0bits>
 80180c6:	2320      	movs	r3, #32
 80180c8:	1a1b      	subs	r3, r3, r0
 80180ca:	491f      	ldr	r1, [pc, #124]	; (8018148 <__b2d+0x9c>)
 80180cc:	603b      	str	r3, [r7, #0]
 80180ce:	280a      	cmp	r0, #10
 80180d0:	dc16      	bgt.n	8018100 <__b2d+0x54>
 80180d2:	230b      	movs	r3, #11
 80180d4:	0027      	movs	r7, r4
 80180d6:	1a1b      	subs	r3, r3, r0
 80180d8:	40df      	lsrs	r7, r3
 80180da:	4339      	orrs	r1, r7
 80180dc:	469c      	mov	ip, r3
 80180de:	000b      	movs	r3, r1
 80180e0:	2100      	movs	r1, #0
 80180e2:	42ae      	cmp	r6, r5
 80180e4:	d202      	bcs.n	80180ec <__b2d+0x40>
 80180e6:	9901      	ldr	r1, [sp, #4]
 80180e8:	3908      	subs	r1, #8
 80180ea:	6809      	ldr	r1, [r1, #0]
 80180ec:	3015      	adds	r0, #21
 80180ee:	4084      	lsls	r4, r0
 80180f0:	4660      	mov	r0, ip
 80180f2:	40c1      	lsrs	r1, r0
 80180f4:	430c      	orrs	r4, r1
 80180f6:	0022      	movs	r2, r4
 80180f8:	0010      	movs	r0, r2
 80180fa:	0019      	movs	r1, r3
 80180fc:	b003      	add	sp, #12
 80180fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018100:	2700      	movs	r7, #0
 8018102:	42ae      	cmp	r6, r5
 8018104:	d202      	bcs.n	801810c <__b2d+0x60>
 8018106:	9d01      	ldr	r5, [sp, #4]
 8018108:	3d08      	subs	r5, #8
 801810a:	682f      	ldr	r7, [r5, #0]
 801810c:	230b      	movs	r3, #11
 801810e:	425b      	negs	r3, r3
 8018110:	469c      	mov	ip, r3
 8018112:	4484      	add	ip, r0
 8018114:	280b      	cmp	r0, #11
 8018116:	d013      	beq.n	8018140 <__b2d+0x94>
 8018118:	4663      	mov	r3, ip
 801811a:	2020      	movs	r0, #32
 801811c:	409c      	lsls	r4, r3
 801811e:	1ac0      	subs	r0, r0, r3
 8018120:	003b      	movs	r3, r7
 8018122:	40c3      	lsrs	r3, r0
 8018124:	431c      	orrs	r4, r3
 8018126:	4321      	orrs	r1, r4
 8018128:	000b      	movs	r3, r1
 801812a:	2100      	movs	r1, #0
 801812c:	42b5      	cmp	r5, r6
 801812e:	d901      	bls.n	8018134 <__b2d+0x88>
 8018130:	3d04      	subs	r5, #4
 8018132:	6829      	ldr	r1, [r5, #0]
 8018134:	4664      	mov	r4, ip
 8018136:	40c1      	lsrs	r1, r0
 8018138:	40a7      	lsls	r7, r4
 801813a:	430f      	orrs	r7, r1
 801813c:	003a      	movs	r2, r7
 801813e:	e7db      	b.n	80180f8 <__b2d+0x4c>
 8018140:	4321      	orrs	r1, r4
 8018142:	000b      	movs	r3, r1
 8018144:	e7fa      	b.n	801813c <__b2d+0x90>
 8018146:	46c0      	nop			; (mov r8, r8)
 8018148:	3ff00000 	.word	0x3ff00000

0801814c <__d2b>:
 801814c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801814e:	2101      	movs	r1, #1
 8018150:	0014      	movs	r4, r2
 8018152:	001e      	movs	r6, r3
 8018154:	9f08      	ldr	r7, [sp, #32]
 8018156:	f7ff fc51 	bl	80179fc <_Balloc>
 801815a:	1e05      	subs	r5, r0, #0
 801815c:	d105      	bne.n	801816a <__d2b+0x1e>
 801815e:	0002      	movs	r2, r0
 8018160:	4b26      	ldr	r3, [pc, #152]	; (80181fc <__d2b+0xb0>)
 8018162:	4927      	ldr	r1, [pc, #156]	; (8018200 <__d2b+0xb4>)
 8018164:	4827      	ldr	r0, [pc, #156]	; (8018204 <__d2b+0xb8>)
 8018166:	f000 f9cb 	bl	8018500 <__assert_func>
 801816a:	0333      	lsls	r3, r6, #12
 801816c:	0076      	lsls	r6, r6, #1
 801816e:	0b1b      	lsrs	r3, r3, #12
 8018170:	0d76      	lsrs	r6, r6, #21
 8018172:	d124      	bne.n	80181be <__d2b+0x72>
 8018174:	9301      	str	r3, [sp, #4]
 8018176:	2c00      	cmp	r4, #0
 8018178:	d027      	beq.n	80181ca <__d2b+0x7e>
 801817a:	4668      	mov	r0, sp
 801817c:	9400      	str	r4, [sp, #0]
 801817e:	f7ff fd19 	bl	8017bb4 <__lo0bits>
 8018182:	9c00      	ldr	r4, [sp, #0]
 8018184:	2800      	cmp	r0, #0
 8018186:	d01e      	beq.n	80181c6 <__d2b+0x7a>
 8018188:	9b01      	ldr	r3, [sp, #4]
 801818a:	2120      	movs	r1, #32
 801818c:	001a      	movs	r2, r3
 801818e:	1a09      	subs	r1, r1, r0
 8018190:	408a      	lsls	r2, r1
 8018192:	40c3      	lsrs	r3, r0
 8018194:	4322      	orrs	r2, r4
 8018196:	616a      	str	r2, [r5, #20]
 8018198:	9301      	str	r3, [sp, #4]
 801819a:	9c01      	ldr	r4, [sp, #4]
 801819c:	61ac      	str	r4, [r5, #24]
 801819e:	1e63      	subs	r3, r4, #1
 80181a0:	419c      	sbcs	r4, r3
 80181a2:	3401      	adds	r4, #1
 80181a4:	612c      	str	r4, [r5, #16]
 80181a6:	2e00      	cmp	r6, #0
 80181a8:	d018      	beq.n	80181dc <__d2b+0x90>
 80181aa:	4b17      	ldr	r3, [pc, #92]	; (8018208 <__d2b+0xbc>)
 80181ac:	18f6      	adds	r6, r6, r3
 80181ae:	2335      	movs	r3, #53	; 0x35
 80181b0:	1836      	adds	r6, r6, r0
 80181b2:	1a18      	subs	r0, r3, r0
 80181b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181b6:	603e      	str	r6, [r7, #0]
 80181b8:	6018      	str	r0, [r3, #0]
 80181ba:	0028      	movs	r0, r5
 80181bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80181be:	2280      	movs	r2, #128	; 0x80
 80181c0:	0352      	lsls	r2, r2, #13
 80181c2:	4313      	orrs	r3, r2
 80181c4:	e7d6      	b.n	8018174 <__d2b+0x28>
 80181c6:	616c      	str	r4, [r5, #20]
 80181c8:	e7e7      	b.n	801819a <__d2b+0x4e>
 80181ca:	a801      	add	r0, sp, #4
 80181cc:	f7ff fcf2 	bl	8017bb4 <__lo0bits>
 80181d0:	2401      	movs	r4, #1
 80181d2:	9b01      	ldr	r3, [sp, #4]
 80181d4:	612c      	str	r4, [r5, #16]
 80181d6:	616b      	str	r3, [r5, #20]
 80181d8:	3020      	adds	r0, #32
 80181da:	e7e4      	b.n	80181a6 <__d2b+0x5a>
 80181dc:	4b0b      	ldr	r3, [pc, #44]	; (801820c <__d2b+0xc0>)
 80181de:	18c0      	adds	r0, r0, r3
 80181e0:	4b0b      	ldr	r3, [pc, #44]	; (8018210 <__d2b+0xc4>)
 80181e2:	6038      	str	r0, [r7, #0]
 80181e4:	18e3      	adds	r3, r4, r3
 80181e6:	009b      	lsls	r3, r3, #2
 80181e8:	18eb      	adds	r3, r5, r3
 80181ea:	6958      	ldr	r0, [r3, #20]
 80181ec:	f7ff fcc8 	bl	8017b80 <__hi0bits>
 80181f0:	0164      	lsls	r4, r4, #5
 80181f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181f4:	1a24      	subs	r4, r4, r0
 80181f6:	601c      	str	r4, [r3, #0]
 80181f8:	e7df      	b.n	80181ba <__d2b+0x6e>
 80181fa:	46c0      	nop			; (mov r8, r8)
 80181fc:	0801d121 	.word	0x0801d121
 8018200:	0000030a 	.word	0x0000030a
 8018204:	0801d208 	.word	0x0801d208
 8018208:	fffffbcd 	.word	0xfffffbcd
 801820c:	fffffbce 	.word	0xfffffbce
 8018210:	3fffffff 	.word	0x3fffffff

08018214 <__ratio>:
 8018214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018216:	b087      	sub	sp, #28
 8018218:	000f      	movs	r7, r1
 801821a:	a904      	add	r1, sp, #16
 801821c:	0006      	movs	r6, r0
 801821e:	f7ff ff45 	bl	80180ac <__b2d>
 8018222:	9000      	str	r0, [sp, #0]
 8018224:	9101      	str	r1, [sp, #4]
 8018226:	9c00      	ldr	r4, [sp, #0]
 8018228:	9d01      	ldr	r5, [sp, #4]
 801822a:	0038      	movs	r0, r7
 801822c:	a905      	add	r1, sp, #20
 801822e:	f7ff ff3d 	bl	80180ac <__b2d>
 8018232:	9002      	str	r0, [sp, #8]
 8018234:	9103      	str	r1, [sp, #12]
 8018236:	9a02      	ldr	r2, [sp, #8]
 8018238:	9b03      	ldr	r3, [sp, #12]
 801823a:	6931      	ldr	r1, [r6, #16]
 801823c:	6938      	ldr	r0, [r7, #16]
 801823e:	9e05      	ldr	r6, [sp, #20]
 8018240:	1a08      	subs	r0, r1, r0
 8018242:	9904      	ldr	r1, [sp, #16]
 8018244:	0140      	lsls	r0, r0, #5
 8018246:	1b89      	subs	r1, r1, r6
 8018248:	1841      	adds	r1, r0, r1
 801824a:	0508      	lsls	r0, r1, #20
 801824c:	2900      	cmp	r1, #0
 801824e:	dd07      	ble.n	8018260 <__ratio+0x4c>
 8018250:	9901      	ldr	r1, [sp, #4]
 8018252:	1845      	adds	r5, r0, r1
 8018254:	0020      	movs	r0, r4
 8018256:	0029      	movs	r1, r5
 8018258:	f7e9 fb44 	bl	80018e4 <__aeabi_ddiv>
 801825c:	b007      	add	sp, #28
 801825e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018260:	9903      	ldr	r1, [sp, #12]
 8018262:	1a0b      	subs	r3, r1, r0
 8018264:	e7f6      	b.n	8018254 <__ratio+0x40>

08018266 <__copybits>:
 8018266:	b570      	push	{r4, r5, r6, lr}
 8018268:	0014      	movs	r4, r2
 801826a:	0005      	movs	r5, r0
 801826c:	3901      	subs	r1, #1
 801826e:	6913      	ldr	r3, [r2, #16]
 8018270:	1149      	asrs	r1, r1, #5
 8018272:	3101      	adds	r1, #1
 8018274:	0089      	lsls	r1, r1, #2
 8018276:	3414      	adds	r4, #20
 8018278:	009b      	lsls	r3, r3, #2
 801827a:	1841      	adds	r1, r0, r1
 801827c:	18e3      	adds	r3, r4, r3
 801827e:	42a3      	cmp	r3, r4
 8018280:	d80d      	bhi.n	801829e <__copybits+0x38>
 8018282:	0014      	movs	r4, r2
 8018284:	3411      	adds	r4, #17
 8018286:	2500      	movs	r5, #0
 8018288:	429c      	cmp	r4, r3
 801828a:	d803      	bhi.n	8018294 <__copybits+0x2e>
 801828c:	1a9b      	subs	r3, r3, r2
 801828e:	3b11      	subs	r3, #17
 8018290:	089b      	lsrs	r3, r3, #2
 8018292:	009d      	lsls	r5, r3, #2
 8018294:	2300      	movs	r3, #0
 8018296:	1940      	adds	r0, r0, r5
 8018298:	4281      	cmp	r1, r0
 801829a:	d803      	bhi.n	80182a4 <__copybits+0x3e>
 801829c:	bd70      	pop	{r4, r5, r6, pc}
 801829e:	cc40      	ldmia	r4!, {r6}
 80182a0:	c540      	stmia	r5!, {r6}
 80182a2:	e7ec      	b.n	801827e <__copybits+0x18>
 80182a4:	c008      	stmia	r0!, {r3}
 80182a6:	e7f7      	b.n	8018298 <__copybits+0x32>

080182a8 <__any_on>:
 80182a8:	0002      	movs	r2, r0
 80182aa:	6900      	ldr	r0, [r0, #16]
 80182ac:	b510      	push	{r4, lr}
 80182ae:	3214      	adds	r2, #20
 80182b0:	114b      	asrs	r3, r1, #5
 80182b2:	4298      	cmp	r0, r3
 80182b4:	db13      	blt.n	80182de <__any_on+0x36>
 80182b6:	dd0c      	ble.n	80182d2 <__any_on+0x2a>
 80182b8:	241f      	movs	r4, #31
 80182ba:	0008      	movs	r0, r1
 80182bc:	4020      	ands	r0, r4
 80182be:	4221      	tst	r1, r4
 80182c0:	d007      	beq.n	80182d2 <__any_on+0x2a>
 80182c2:	0099      	lsls	r1, r3, #2
 80182c4:	588c      	ldr	r4, [r1, r2]
 80182c6:	0021      	movs	r1, r4
 80182c8:	40c1      	lsrs	r1, r0
 80182ca:	4081      	lsls	r1, r0
 80182cc:	2001      	movs	r0, #1
 80182ce:	428c      	cmp	r4, r1
 80182d0:	d104      	bne.n	80182dc <__any_on+0x34>
 80182d2:	009b      	lsls	r3, r3, #2
 80182d4:	18d3      	adds	r3, r2, r3
 80182d6:	4293      	cmp	r3, r2
 80182d8:	d803      	bhi.n	80182e2 <__any_on+0x3a>
 80182da:	2000      	movs	r0, #0
 80182dc:	bd10      	pop	{r4, pc}
 80182de:	0003      	movs	r3, r0
 80182e0:	e7f7      	b.n	80182d2 <__any_on+0x2a>
 80182e2:	3b04      	subs	r3, #4
 80182e4:	6819      	ldr	r1, [r3, #0]
 80182e6:	2900      	cmp	r1, #0
 80182e8:	d0f5      	beq.n	80182d6 <__any_on+0x2e>
 80182ea:	2001      	movs	r0, #1
 80182ec:	e7f6      	b.n	80182dc <__any_on+0x34>
	...

080182f0 <frexp>:
 80182f0:	b570      	push	{r4, r5, r6, lr}
 80182f2:	0014      	movs	r4, r2
 80182f4:	2500      	movs	r5, #0
 80182f6:	6025      	str	r5, [r4, #0]
 80182f8:	4d10      	ldr	r5, [pc, #64]	; (801833c <frexp+0x4c>)
 80182fa:	004b      	lsls	r3, r1, #1
 80182fc:	000a      	movs	r2, r1
 80182fe:	085b      	lsrs	r3, r3, #1
 8018300:	42ab      	cmp	r3, r5
 8018302:	dc1a      	bgt.n	801833a <frexp+0x4a>
 8018304:	001d      	movs	r5, r3
 8018306:	4305      	orrs	r5, r0
 8018308:	d017      	beq.n	801833a <frexp+0x4a>
 801830a:	4d0d      	ldr	r5, [pc, #52]	; (8018340 <frexp+0x50>)
 801830c:	4229      	tst	r1, r5
 801830e:	d109      	bne.n	8018324 <frexp+0x34>
 8018310:	2200      	movs	r2, #0
 8018312:	4b0c      	ldr	r3, [pc, #48]	; (8018344 <frexp+0x54>)
 8018314:	f7e9 fee8 	bl	80020e8 <__aeabi_dmul>
 8018318:	2536      	movs	r5, #54	; 0x36
 801831a:	000a      	movs	r2, r1
 801831c:	004b      	lsls	r3, r1, #1
 801831e:	426d      	negs	r5, r5
 8018320:	085b      	lsrs	r3, r3, #1
 8018322:	6025      	str	r5, [r4, #0]
 8018324:	4d08      	ldr	r5, [pc, #32]	; (8018348 <frexp+0x58>)
 8018326:	151b      	asrs	r3, r3, #20
 8018328:	195b      	adds	r3, r3, r5
 801832a:	6825      	ldr	r5, [r4, #0]
 801832c:	18eb      	adds	r3, r5, r3
 801832e:	6023      	str	r3, [r4, #0]
 8018330:	4b06      	ldr	r3, [pc, #24]	; (801834c <frexp+0x5c>)
 8018332:	401a      	ands	r2, r3
 8018334:	4b06      	ldr	r3, [pc, #24]	; (8018350 <frexp+0x60>)
 8018336:	4313      	orrs	r3, r2
 8018338:	0019      	movs	r1, r3
 801833a:	bd70      	pop	{r4, r5, r6, pc}
 801833c:	7fefffff 	.word	0x7fefffff
 8018340:	7ff00000 	.word	0x7ff00000
 8018344:	43500000 	.word	0x43500000
 8018348:	fffffc02 	.word	0xfffffc02
 801834c:	800fffff 	.word	0x800fffff
 8018350:	3fe00000 	.word	0x3fe00000

08018354 <nan>:
 8018354:	2000      	movs	r0, #0
 8018356:	4901      	ldr	r1, [pc, #4]	; (801835c <nan+0x8>)
 8018358:	4770      	bx	lr
 801835a:	46c0      	nop			; (mov r8, r8)
 801835c:	7ff80000 	.word	0x7ff80000

08018360 <__ssprint_r>:
 8018360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018362:	6893      	ldr	r3, [r2, #8]
 8018364:	b087      	sub	sp, #28
 8018366:	000c      	movs	r4, r1
 8018368:	0017      	movs	r7, r2
 801836a:	9002      	str	r0, [sp, #8]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d065      	beq.n	801843c <__ssprint_r+0xdc>
 8018370:	6813      	ldr	r3, [r2, #0]
 8018372:	9303      	str	r3, [sp, #12]
 8018374:	2300      	movs	r3, #0
 8018376:	9305      	str	r3, [sp, #20]
 8018378:	9301      	str	r3, [sp, #4]
 801837a:	9b01      	ldr	r3, [sp, #4]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d02d      	beq.n	80183dc <__ssprint_r+0x7c>
 8018380:	68a6      	ldr	r6, [r4, #8]
 8018382:	429e      	cmp	r6, r3
 8018384:	d849      	bhi.n	801841a <__ssprint_r+0xba>
 8018386:	2390      	movs	r3, #144	; 0x90
 8018388:	89a2      	ldrh	r2, [r4, #12]
 801838a:	00db      	lsls	r3, r3, #3
 801838c:	421a      	tst	r2, r3
 801838e:	d041      	beq.n	8018414 <__ssprint_r+0xb4>
 8018390:	2003      	movs	r0, #3
 8018392:	6921      	ldr	r1, [r4, #16]
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	1a5b      	subs	r3, r3, r1
 8018398:	9304      	str	r3, [sp, #16]
 801839a:	6963      	ldr	r3, [r4, #20]
 801839c:	4343      	muls	r3, r0
 801839e:	0fdd      	lsrs	r5, r3, #31
 80183a0:	18ed      	adds	r5, r5, r3
 80183a2:	9b04      	ldr	r3, [sp, #16]
 80183a4:	9801      	ldr	r0, [sp, #4]
 80183a6:	3301      	adds	r3, #1
 80183a8:	181b      	adds	r3, r3, r0
 80183aa:	106d      	asrs	r5, r5, #1
 80183ac:	42ab      	cmp	r3, r5
 80183ae:	d900      	bls.n	80183b2 <__ssprint_r+0x52>
 80183b0:	001d      	movs	r5, r3
 80183b2:	0553      	lsls	r3, r2, #21
 80183b4:	d546      	bpl.n	8018444 <__ssprint_r+0xe4>
 80183b6:	0029      	movs	r1, r5
 80183b8:	9802      	ldr	r0, [sp, #8]
 80183ba:	f7fb f9c5 	bl	8013748 <_malloc_r>
 80183be:	1e06      	subs	r6, r0, #0
 80183c0:	d116      	bne.n	80183f0 <__ssprint_r+0x90>
 80183c2:	230c      	movs	r3, #12
 80183c4:	9a02      	ldr	r2, [sp, #8]
 80183c6:	2001      	movs	r0, #1
 80183c8:	6013      	str	r3, [r2, #0]
 80183ca:	2340      	movs	r3, #64	; 0x40
 80183cc:	89a2      	ldrh	r2, [r4, #12]
 80183ce:	4240      	negs	r0, r0
 80183d0:	4313      	orrs	r3, r2
 80183d2:	81a3      	strh	r3, [r4, #12]
 80183d4:	2300      	movs	r3, #0
 80183d6:	60bb      	str	r3, [r7, #8]
 80183d8:	607b      	str	r3, [r7, #4]
 80183da:	e031      	b.n	8018440 <__ssprint_r+0xe0>
 80183dc:	9b03      	ldr	r3, [sp, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	9305      	str	r3, [sp, #20]
 80183e2:	9b03      	ldr	r3, [sp, #12]
 80183e4:	685b      	ldr	r3, [r3, #4]
 80183e6:	9301      	str	r3, [sp, #4]
 80183e8:	9b03      	ldr	r3, [sp, #12]
 80183ea:	3308      	adds	r3, #8
 80183ec:	9303      	str	r3, [sp, #12]
 80183ee:	e7c4      	b.n	801837a <__ssprint_r+0x1a>
 80183f0:	9a04      	ldr	r2, [sp, #16]
 80183f2:	6921      	ldr	r1, [r4, #16]
 80183f4:	f7fb fbc8 	bl	8013b88 <memcpy>
 80183f8:	89a3      	ldrh	r3, [r4, #12]
 80183fa:	4a18      	ldr	r2, [pc, #96]	; (801845c <__ssprint_r+0xfc>)
 80183fc:	401a      	ands	r2, r3
 80183fe:	2380      	movs	r3, #128	; 0x80
 8018400:	4313      	orrs	r3, r2
 8018402:	81a3      	strh	r3, [r4, #12]
 8018404:	9b04      	ldr	r3, [sp, #16]
 8018406:	6126      	str	r6, [r4, #16]
 8018408:	18f6      	adds	r6, r6, r3
 801840a:	6026      	str	r6, [r4, #0]
 801840c:	6165      	str	r5, [r4, #20]
 801840e:	9e01      	ldr	r6, [sp, #4]
 8018410:	1aed      	subs	r5, r5, r3
 8018412:	60a5      	str	r5, [r4, #8]
 8018414:	9b01      	ldr	r3, [sp, #4]
 8018416:	429e      	cmp	r6, r3
 8018418:	d900      	bls.n	801841c <__ssprint_r+0xbc>
 801841a:	9e01      	ldr	r6, [sp, #4]
 801841c:	0032      	movs	r2, r6
 801841e:	9905      	ldr	r1, [sp, #20]
 8018420:	6820      	ldr	r0, [r4, #0]
 8018422:	f7ff fad8 	bl	80179d6 <memmove>
 8018426:	68a3      	ldr	r3, [r4, #8]
 8018428:	9a01      	ldr	r2, [sp, #4]
 801842a:	1b9b      	subs	r3, r3, r6
 801842c:	60a3      	str	r3, [r4, #8]
 801842e:	6823      	ldr	r3, [r4, #0]
 8018430:	199e      	adds	r6, r3, r6
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	6026      	str	r6, [r4, #0]
 8018436:	1a9b      	subs	r3, r3, r2
 8018438:	60bb      	str	r3, [r7, #8]
 801843a:	d1cf      	bne.n	80183dc <__ssprint_r+0x7c>
 801843c:	2000      	movs	r0, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	b007      	add	sp, #28
 8018442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018444:	002a      	movs	r2, r5
 8018446:	9802      	ldr	r0, [sp, #8]
 8018448:	f7fb fbe4 	bl	8013c14 <_realloc_r>
 801844c:	1e06      	subs	r6, r0, #0
 801844e:	d1d9      	bne.n	8018404 <__ssprint_r+0xa4>
 8018450:	6921      	ldr	r1, [r4, #16]
 8018452:	9802      	ldr	r0, [sp, #8]
 8018454:	f7fe fe6c 	bl	8017130 <_free_r>
 8018458:	e7b3      	b.n	80183c2 <__ssprint_r+0x62>
 801845a:	46c0      	nop			; (mov r8, r8)
 801845c:	fffffb7f 	.word	0xfffffb7f

08018460 <__ascii_wctomb>:
 8018460:	0003      	movs	r3, r0
 8018462:	1e08      	subs	r0, r1, #0
 8018464:	d005      	beq.n	8018472 <__ascii_wctomb+0x12>
 8018466:	2aff      	cmp	r2, #255	; 0xff
 8018468:	d904      	bls.n	8018474 <__ascii_wctomb+0x14>
 801846a:	228a      	movs	r2, #138	; 0x8a
 801846c:	2001      	movs	r0, #1
 801846e:	601a      	str	r2, [r3, #0]
 8018470:	4240      	negs	r0, r0
 8018472:	4770      	bx	lr
 8018474:	2001      	movs	r0, #1
 8018476:	700a      	strb	r2, [r1, #0]
 8018478:	e7fb      	b.n	8018472 <__ascii_wctomb+0x12>
	...

0801847c <__register_exitproc>:
 801847c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801847e:	4f1e      	ldr	r7, [pc, #120]	; (80184f8 <__register_exitproc+0x7c>)
 8018480:	0004      	movs	r4, r0
 8018482:	6838      	ldr	r0, [r7, #0]
 8018484:	0016      	movs	r6, r2
 8018486:	9100      	str	r1, [sp, #0]
 8018488:	9301      	str	r3, [sp, #4]
 801848a:	f7ff fa85 	bl	8017998 <__retarget_lock_acquire_recursive>
 801848e:	4b1b      	ldr	r3, [pc, #108]	; (80184fc <__register_exitproc+0x80>)
 8018490:	6819      	ldr	r1, [r3, #0]
 8018492:	000b      	movs	r3, r1
 8018494:	33fc      	adds	r3, #252	; 0xfc
 8018496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018498:	2a00      	cmp	r2, #0
 801849a:	d103      	bne.n	80184a4 <__register_exitproc+0x28>
 801849c:	000a      	movs	r2, r1
 801849e:	324d      	adds	r2, #77	; 0x4d
 80184a0:	32ff      	adds	r2, #255	; 0xff
 80184a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80184a4:	6853      	ldr	r3, [r2, #4]
 80184a6:	6838      	ldr	r0, [r7, #0]
 80184a8:	2b1f      	cmp	r3, #31
 80184aa:	dd04      	ble.n	80184b6 <__register_exitproc+0x3a>
 80184ac:	f7ff fa75 	bl	801799a <__retarget_lock_release_recursive>
 80184b0:	2001      	movs	r0, #1
 80184b2:	4240      	negs	r0, r0
 80184b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80184b6:	2c00      	cmp	r4, #0
 80184b8:	d014      	beq.n	80184e4 <__register_exitproc+0x68>
 80184ba:	0099      	lsls	r1, r3, #2
 80184bc:	1851      	adds	r1, r2, r1
 80184be:	000f      	movs	r7, r1
 80184c0:	3788      	adds	r7, #136	; 0x88
 80184c2:	603e      	str	r6, [r7, #0]
 80184c4:	2701      	movs	r7, #1
 80184c6:	0016      	movs	r6, r2
 80184c8:	409f      	lsls	r7, r3
 80184ca:	3685      	adds	r6, #133	; 0x85
 80184cc:	36ff      	adds	r6, #255	; 0xff
 80184ce:	6875      	ldr	r5, [r6, #4]
 80184d0:	31fc      	adds	r1, #252	; 0xfc
 80184d2:	433d      	orrs	r5, r7
 80184d4:	6075      	str	r5, [r6, #4]
 80184d6:	9d01      	ldr	r5, [sp, #4]
 80184d8:	60cd      	str	r5, [r1, #12]
 80184da:	2c02      	cmp	r4, #2
 80184dc:	d102      	bne.n	80184e4 <__register_exitproc+0x68>
 80184de:	68b1      	ldr	r1, [r6, #8]
 80184e0:	430f      	orrs	r7, r1
 80184e2:	60b7      	str	r7, [r6, #8]
 80184e4:	1c59      	adds	r1, r3, #1
 80184e6:	6051      	str	r1, [r2, #4]
 80184e8:	3302      	adds	r3, #2
 80184ea:	9900      	ldr	r1, [sp, #0]
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	5099      	str	r1, [r3, r2]
 80184f0:	f7ff fa53 	bl	801799a <__retarget_lock_release_recursive>
 80184f4:	2000      	movs	r0, #0
 80184f6:	e7dd      	b.n	80184b4 <__register_exitproc+0x38>
 80184f8:	20000910 	.word	0x20000910
 80184fc:	0801d06c 	.word	0x0801d06c

08018500 <__assert_func>:
 8018500:	b530      	push	{r4, r5, lr}
 8018502:	0014      	movs	r4, r2
 8018504:	001a      	movs	r2, r3
 8018506:	4b09      	ldr	r3, [pc, #36]	; (801852c <__assert_func+0x2c>)
 8018508:	0005      	movs	r5, r0
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	b085      	sub	sp, #20
 801850e:	68d8      	ldr	r0, [r3, #12]
 8018510:	4b07      	ldr	r3, [pc, #28]	; (8018530 <__assert_func+0x30>)
 8018512:	2c00      	cmp	r4, #0
 8018514:	d101      	bne.n	801851a <__assert_func+0x1a>
 8018516:	4b07      	ldr	r3, [pc, #28]	; (8018534 <__assert_func+0x34>)
 8018518:	001c      	movs	r4, r3
 801851a:	9301      	str	r3, [sp, #4]
 801851c:	9100      	str	r1, [sp, #0]
 801851e:	002b      	movs	r3, r5
 8018520:	4905      	ldr	r1, [pc, #20]	; (8018538 <__assert_func+0x38>)
 8018522:	9402      	str	r4, [sp, #8]
 8018524:	f000 f80a 	bl	801853c <fiprintf>
 8018528:	f000 fde6 	bl	80190f8 <abort>
 801852c:	200000d0 	.word	0x200000d0
 8018530:	0801d364 	.word	0x0801d364
 8018534:	0801d39f 	.word	0x0801d39f
 8018538:	0801d371 	.word	0x0801d371

0801853c <fiprintf>:
 801853c:	b40e      	push	{r1, r2, r3}
 801853e:	b503      	push	{r0, r1, lr}
 8018540:	0001      	movs	r1, r0
 8018542:	ab03      	add	r3, sp, #12
 8018544:	4804      	ldr	r0, [pc, #16]	; (8018558 <fiprintf+0x1c>)
 8018546:	cb04      	ldmia	r3!, {r2}
 8018548:	6800      	ldr	r0, [r0, #0]
 801854a:	9301      	str	r3, [sp, #4]
 801854c:	f000 f83a 	bl	80185c4 <_vfiprintf_r>
 8018550:	b002      	add	sp, #8
 8018552:	bc08      	pop	{r3}
 8018554:	b003      	add	sp, #12
 8018556:	4718      	bx	r3
 8018558:	200000d0 	.word	0x200000d0

0801855c <__sprint_r>:
 801855c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801855e:	b085      	sub	sp, #20
 8018560:	9001      	str	r0, [sp, #4]
 8018562:	6890      	ldr	r0, [r2, #8]
 8018564:	000d      	movs	r5, r1
 8018566:	0014      	movs	r4, r2
 8018568:	2800      	cmp	r0, #0
 801856a:	d102      	bne.n	8018572 <__sprint_r+0x16>
 801856c:	6050      	str	r0, [r2, #4]
 801856e:	b005      	add	sp, #20
 8018570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018572:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018574:	049b      	lsls	r3, r3, #18
 8018576:	d521      	bpl.n	80185bc <__sprint_r+0x60>
 8018578:	6817      	ldr	r7, [r2, #0]
 801857a:	2600      	movs	r6, #0
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	9302      	str	r3, [sp, #8]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	9300      	str	r3, [sp, #0]
 8018584:	089b      	lsrs	r3, r3, #2
 8018586:	9303      	str	r3, [sp, #12]
 8018588:	9b03      	ldr	r3, [sp, #12]
 801858a:	42b3      	cmp	r3, r6
 801858c:	dc0b      	bgt.n	80185a6 <__sprint_r+0x4a>
 801858e:	2303      	movs	r3, #3
 8018590:	9800      	ldr	r0, [sp, #0]
 8018592:	3708      	adds	r7, #8
 8018594:	4398      	bics	r0, r3
 8018596:	68a3      	ldr	r3, [r4, #8]
 8018598:	1a18      	subs	r0, r3, r0
 801859a:	60a0      	str	r0, [r4, #8]
 801859c:	d1ed      	bne.n	801857a <__sprint_r+0x1e>
 801859e:	2300      	movs	r3, #0
 80185a0:	60a3      	str	r3, [r4, #8]
 80185a2:	6063      	str	r3, [r4, #4]
 80185a4:	e7e3      	b.n	801856e <__sprint_r+0x12>
 80185a6:	9902      	ldr	r1, [sp, #8]
 80185a8:	00b3      	lsls	r3, r6, #2
 80185aa:	58c9      	ldr	r1, [r1, r3]
 80185ac:	002a      	movs	r2, r5
 80185ae:	9801      	ldr	r0, [sp, #4]
 80185b0:	f000 ff20 	bl	80193f4 <_fputwc_r>
 80185b4:	1c43      	adds	r3, r0, #1
 80185b6:	d0f2      	beq.n	801859e <__sprint_r+0x42>
 80185b8:	3601      	adds	r6, #1
 80185ba:	e7e5      	b.n	8018588 <__sprint_r+0x2c>
 80185bc:	9801      	ldr	r0, [sp, #4]
 80185be:	f000 ff43 	bl	8019448 <__sfvwrite_r>
 80185c2:	e7ec      	b.n	801859e <__sprint_r+0x42>

080185c4 <_vfiprintf_r>:
 80185c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185c6:	b0c3      	sub	sp, #268	; 0x10c
 80185c8:	000f      	movs	r7, r1
 80185ca:	001c      	movs	r4, r3
 80185cc:	001e      	movs	r6, r3
 80185ce:	9006      	str	r0, [sp, #24]
 80185d0:	9207      	str	r2, [sp, #28]
 80185d2:	2800      	cmp	r0, #0
 80185d4:	d005      	beq.n	80185e2 <_vfiprintf_r+0x1e>
 80185d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80185d8:	9303      	str	r3, [sp, #12]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d101      	bne.n	80185e2 <_vfiprintf_r+0x1e>
 80185de:	f000 fea1 	bl	8019324 <__sinit>
 80185e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80185e4:	07db      	lsls	r3, r3, #31
 80185e6:	d405      	bmi.n	80185f4 <_vfiprintf_r+0x30>
 80185e8:	89bb      	ldrh	r3, [r7, #12]
 80185ea:	059b      	lsls	r3, r3, #22
 80185ec:	d402      	bmi.n	80185f4 <_vfiprintf_r+0x30>
 80185ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80185f0:	f7ff f9d2 	bl	8017998 <__retarget_lock_acquire_recursive>
 80185f4:	230c      	movs	r3, #12
 80185f6:	5efa      	ldrsh	r2, [r7, r3]
 80185f8:	2380      	movs	r3, #128	; 0x80
 80185fa:	019b      	lsls	r3, r3, #6
 80185fc:	421a      	tst	r2, r3
 80185fe:	d105      	bne.n	801860c <_vfiprintf_r+0x48>
 8018600:	4313      	orrs	r3, r2
 8018602:	81bb      	strh	r3, [r7, #12]
 8018604:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018606:	4ba3      	ldr	r3, [pc, #652]	; (8018894 <_vfiprintf_r+0x2d0>)
 8018608:	4013      	ands	r3, r2
 801860a:	667b      	str	r3, [r7, #100]	; 0x64
 801860c:	89bb      	ldrh	r3, [r7, #12]
 801860e:	071b      	lsls	r3, r3, #28
 8018610:	d502      	bpl.n	8018618 <_vfiprintf_r+0x54>
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d115      	bne.n	8018644 <_vfiprintf_r+0x80>
 8018618:	0039      	movs	r1, r7
 801861a:	9806      	ldr	r0, [sp, #24]
 801861c:	f000 fd08 	bl	8019030 <__swsetup_r>
 8018620:	2800      	cmp	r0, #0
 8018622:	d00f      	beq.n	8018644 <_vfiprintf_r+0x80>
 8018624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018626:	07db      	lsls	r3, r3, #31
 8018628:	d505      	bpl.n	8018636 <_vfiprintf_r+0x72>
 801862a:	2301      	movs	r3, #1
 801862c:	425b      	negs	r3, r3
 801862e:	9308      	str	r3, [sp, #32]
 8018630:	9808      	ldr	r0, [sp, #32]
 8018632:	b043      	add	sp, #268	; 0x10c
 8018634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018636:	89bb      	ldrh	r3, [r7, #12]
 8018638:	059b      	lsls	r3, r3, #22
 801863a:	d4f6      	bmi.n	801862a <_vfiprintf_r+0x66>
 801863c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801863e:	f7ff f9ac 	bl	801799a <__retarget_lock_release_recursive>
 8018642:	e7f2      	b.n	801862a <_vfiprintf_r+0x66>
 8018644:	231a      	movs	r3, #26
 8018646:	89ba      	ldrh	r2, [r7, #12]
 8018648:	4013      	ands	r3, r2
 801864a:	2b0a      	cmp	r3, #10
 801864c:	d113      	bne.n	8018676 <_vfiprintf_r+0xb2>
 801864e:	210e      	movs	r1, #14
 8018650:	5e7b      	ldrsh	r3, [r7, r1]
 8018652:	2b00      	cmp	r3, #0
 8018654:	db0f      	blt.n	8018676 <_vfiprintf_r+0xb2>
 8018656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018658:	07db      	lsls	r3, r3, #31
 801865a:	d404      	bmi.n	8018666 <_vfiprintf_r+0xa2>
 801865c:	0593      	lsls	r3, r2, #22
 801865e:	d402      	bmi.n	8018666 <_vfiprintf_r+0xa2>
 8018660:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018662:	f7ff f99a 	bl	801799a <__retarget_lock_release_recursive>
 8018666:	0023      	movs	r3, r4
 8018668:	0039      	movs	r1, r7
 801866a:	9a07      	ldr	r2, [sp, #28]
 801866c:	9806      	ldr	r0, [sp, #24]
 801866e:	f000 fc9b 	bl	8018fa8 <__sbprintf>
 8018672:	9008      	str	r0, [sp, #32]
 8018674:	e7dc      	b.n	8018630 <_vfiprintf_r+0x6c>
 8018676:	2300      	movs	r3, #0
 8018678:	aa19      	add	r2, sp, #100	; 0x64
 801867a:	9216      	str	r2, [sp, #88]	; 0x58
 801867c:	9318      	str	r3, [sp, #96]	; 0x60
 801867e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018680:	9203      	str	r2, [sp, #12]
 8018682:	930c      	str	r3, [sp, #48]	; 0x30
 8018684:	930d      	str	r3, [sp, #52]	; 0x34
 8018686:	930e      	str	r3, [sp, #56]	; 0x38
 8018688:	930f      	str	r3, [sp, #60]	; 0x3c
 801868a:	9308      	str	r3, [sp, #32]
 801868c:	9c07      	ldr	r4, [sp, #28]
 801868e:	7823      	ldrb	r3, [r4, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d002      	beq.n	801869a <_vfiprintf_r+0xd6>
 8018694:	2b25      	cmp	r3, #37	; 0x25
 8018696:	d000      	beq.n	801869a <_vfiprintf_r+0xd6>
 8018698:	e089      	b.n	80187ae <_vfiprintf_r+0x1ea>
 801869a:	9b07      	ldr	r3, [sp, #28]
 801869c:	1ae5      	subs	r5, r4, r3
 801869e:	429c      	cmp	r4, r3
 80186a0:	d011      	beq.n	80186c6 <_vfiprintf_r+0x102>
 80186a2:	9b03      	ldr	r3, [sp, #12]
 80186a4:	9a07      	ldr	r2, [sp, #28]
 80186a6:	c324      	stmia	r3!, {r2, r5}
 80186a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80186aa:	195b      	adds	r3, r3, r5
 80186ac:	9318      	str	r3, [sp, #96]	; 0x60
 80186ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80186b0:	9304      	str	r3, [sp, #16]
 80186b2:	3301      	adds	r3, #1
 80186b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80186b6:	2b07      	cmp	r3, #7
 80186b8:	dc7b      	bgt.n	80187b2 <_vfiprintf_r+0x1ee>
 80186ba:	9b03      	ldr	r3, [sp, #12]
 80186bc:	3308      	adds	r3, #8
 80186be:	9303      	str	r3, [sp, #12]
 80186c0:	9b08      	ldr	r3, [sp, #32]
 80186c2:	195b      	adds	r3, r3, r5
 80186c4:	9308      	str	r3, [sp, #32]
 80186c6:	7823      	ldrb	r3, [r4, #0]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d101      	bne.n	80186d0 <_vfiprintf_r+0x10c>
 80186cc:	f000 fc29 	bl	8018f22 <_vfiprintf_r+0x95e>
 80186d0:	2200      	movs	r2, #0
 80186d2:	a914      	add	r1, sp, #80	; 0x50
 80186d4:	70ca      	strb	r2, [r1, #3]
 80186d6:	2101      	movs	r1, #1
 80186d8:	1c63      	adds	r3, r4, #1
 80186da:	250a      	movs	r5, #10
 80186dc:	0014      	movs	r4, r2
 80186de:	4249      	negs	r1, r1
 80186e0:	9105      	str	r1, [sp, #20]
 80186e2:	9209      	str	r2, [sp, #36]	; 0x24
 80186e4:	1c5a      	adds	r2, r3, #1
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	9207      	str	r2, [sp, #28]
 80186ea:	0018      	movs	r0, r3
 80186ec:	3820      	subs	r0, #32
 80186ee:	285a      	cmp	r0, #90	; 0x5a
 80186f0:	d900      	bls.n	80186f4 <_vfiprintf_r+0x130>
 80186f2:	e376      	b.n	8018de2 <_vfiprintf_r+0x81e>
 80186f4:	f7e7 fd22 	bl	800013c <__gnu_thumb1_case_uhi>
 80186f8:	037500a2 	.word	0x037500a2
 80186fc:	00ab0375 	.word	0x00ab0375
 8018700:	03750375 	.word	0x03750375
 8018704:	00870375 	.word	0x00870375
 8018708:	03750375 	.word	0x03750375
 801870c:	00b500ad 	.word	0x00b500ad
 8018710:	00b30375 	.word	0x00b30375
 8018714:	037500b9 	.word	0x037500b9
 8018718:	00df00dd 	.word	0x00df00dd
 801871c:	00df00df 	.word	0x00df00df
 8018720:	00df00df 	.word	0x00df00df
 8018724:	00df00df 	.word	0x00df00df
 8018728:	00df00df 	.word	0x00df00df
 801872c:	03750375 	.word	0x03750375
 8018730:	03750375 	.word	0x03750375
 8018734:	03750375 	.word	0x03750375
 8018738:	03750375 	.word	0x03750375
 801873c:	01070375 	.word	0x01070375
 8018740:	037501f9 	.word	0x037501f9
 8018744:	03750375 	.word	0x03750375
 8018748:	03750375 	.word	0x03750375
 801874c:	03750375 	.word	0x03750375
 8018750:	03750375 	.word	0x03750375
 8018754:	02570375 	.word	0x02570375
 8018758:	03750375 	.word	0x03750375
 801875c:	02980375 	.word	0x02980375
 8018760:	02b10375 	.word	0x02b10375
 8018764:	03750375 	.word	0x03750375
 8018768:	037502ec 	.word	0x037502ec
 801876c:	03750375 	.word	0x03750375
 8018770:	03750375 	.word	0x03750375
 8018774:	03750375 	.word	0x03750375
 8018778:	03750375 	.word	0x03750375
 801877c:	01070375 	.word	0x01070375
 8018780:	037501fb 	.word	0x037501fb
 8018784:	03750375 	.word	0x03750375
 8018788:	01fb00f0 	.word	0x01fb00f0
 801878c:	03750103 	.word	0x03750103
 8018790:	037500fc 	.word	0x037500fc
 8018794:	0259023a 	.word	0x0259023a
 8018798:	01030288 	.word	0x01030288
 801879c:	02980375 	.word	0x02980375
 80187a0:	02b300a9 	.word	0x02b300a9
 80187a4:	03750375 	.word	0x03750375
 80187a8:	03750067 	.word	0x03750067
 80187ac:	00a9      	.short	0x00a9
 80187ae:	3401      	adds	r4, #1
 80187b0:	e76d      	b.n	801868e <_vfiprintf_r+0xca>
 80187b2:	0039      	movs	r1, r7
 80187b4:	9806      	ldr	r0, [sp, #24]
 80187b6:	aa16      	add	r2, sp, #88	; 0x58
 80187b8:	f7ff fed0 	bl	801855c <__sprint_r>
 80187bc:	2800      	cmp	r0, #0
 80187be:	d000      	beq.n	80187c2 <_vfiprintf_r+0x1fe>
 80187c0:	e38e      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 80187c2:	ab19      	add	r3, sp, #100	; 0x64
 80187c4:	e77b      	b.n	80186be <_vfiprintf_r+0xfa>
 80187c6:	4a34      	ldr	r2, [pc, #208]	; (8018898 <_vfiprintf_r+0x2d4>)
 80187c8:	0020      	movs	r0, r4
 80187ca:	920c      	str	r2, [sp, #48]	; 0x30
 80187cc:	2220      	movs	r2, #32
 80187ce:	4010      	ands	r0, r2
 80187d0:	4214      	tst	r4, r2
 80187d2:	d100      	bne.n	80187d6 <_vfiprintf_r+0x212>
 80187d4:	e27e      	b.n	8018cd4 <_vfiprintf_r+0x710>
 80187d6:	3a19      	subs	r2, #25
 80187d8:	3607      	adds	r6, #7
 80187da:	4396      	bics	r6, r2
 80187dc:	0030      	movs	r0, r6
 80187de:	c806      	ldmia	r0!, {r1, r2}
 80187e0:	9100      	str	r1, [sp, #0]
 80187e2:	9201      	str	r2, [sp, #4]
 80187e4:	9004      	str	r0, [sp, #16]
 80187e6:	07e2      	lsls	r2, r4, #31
 80187e8:	d509      	bpl.n	80187fe <_vfiprintf_r+0x23a>
 80187ea:	9a00      	ldr	r2, [sp, #0]
 80187ec:	9901      	ldr	r1, [sp, #4]
 80187ee:	430a      	orrs	r2, r1
 80187f0:	d005      	beq.n	80187fe <_vfiprintf_r+0x23a>
 80187f2:	aa15      	add	r2, sp, #84	; 0x54
 80187f4:	2130      	movs	r1, #48	; 0x30
 80187f6:	7053      	strb	r3, [r2, #1]
 80187f8:	2302      	movs	r3, #2
 80187fa:	7011      	strb	r1, [r2, #0]
 80187fc:	431c      	orrs	r4, r3
 80187fe:	4b27      	ldr	r3, [pc, #156]	; (801889c <_vfiprintf_r+0x2d8>)
 8018800:	401c      	ands	r4, r3
 8018802:	2302      	movs	r3, #2
 8018804:	e1e1      	b.n	8018bca <_vfiprintf_r+0x606>
 8018806:	9806      	ldr	r0, [sp, #24]
 8018808:	f7ff f8c0 	bl	801798c <_localeconv_r>
 801880c:	6843      	ldr	r3, [r0, #4]
 801880e:	0018      	movs	r0, r3
 8018810:	930f      	str	r3, [sp, #60]	; 0x3c
 8018812:	f7e7 fc81 	bl	8000118 <strlen>
 8018816:	900e      	str	r0, [sp, #56]	; 0x38
 8018818:	9806      	ldr	r0, [sp, #24]
 801881a:	f7ff f8b7 	bl	801798c <_localeconv_r>
 801881e:	6883      	ldr	r3, [r0, #8]
 8018820:	930d      	str	r3, [sp, #52]	; 0x34
 8018822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018824:	2b00      	cmp	r3, #0
 8018826:	d010      	beq.n	801884a <_vfiprintf_r+0x286>
 8018828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801882a:	2b00      	cmp	r3, #0
 801882c:	d00d      	beq.n	801884a <_vfiprintf_r+0x286>
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d00a      	beq.n	801884a <_vfiprintf_r+0x286>
 8018834:	2380      	movs	r3, #128	; 0x80
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	431c      	orrs	r4, r3
 801883a:	e006      	b.n	801884a <_vfiprintf_r+0x286>
 801883c:	ab14      	add	r3, sp, #80	; 0x50
 801883e:	78da      	ldrb	r2, [r3, #3]
 8018840:	3303      	adds	r3, #3
 8018842:	2a00      	cmp	r2, #0
 8018844:	d101      	bne.n	801884a <_vfiprintf_r+0x286>
 8018846:	3220      	adds	r2, #32
 8018848:	701a      	strb	r2, [r3, #0]
 801884a:	9b07      	ldr	r3, [sp, #28]
 801884c:	e74a      	b.n	80186e4 <_vfiprintf_r+0x120>
 801884e:	2301      	movs	r3, #1
 8018850:	e7f2      	b.n	8018838 <_vfiprintf_r+0x274>
 8018852:	ce08      	ldmia	r6!, {r3}
 8018854:	9309      	str	r3, [sp, #36]	; 0x24
 8018856:	2b00      	cmp	r3, #0
 8018858:	daf7      	bge.n	801884a <_vfiprintf_r+0x286>
 801885a:	425b      	negs	r3, r3
 801885c:	9309      	str	r3, [sp, #36]	; 0x24
 801885e:	2304      	movs	r3, #4
 8018860:	e7ea      	b.n	8018838 <_vfiprintf_r+0x274>
 8018862:	222b      	movs	r2, #43	; 0x2b
 8018864:	ab14      	add	r3, sp, #80	; 0x50
 8018866:	70da      	strb	r2, [r3, #3]
 8018868:	e7ef      	b.n	801884a <_vfiprintf_r+0x286>
 801886a:	9b07      	ldr	r3, [sp, #28]
 801886c:	1c5a      	adds	r2, r3, #1
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	2b2a      	cmp	r3, #42	; 0x2a
 8018872:	d015      	beq.n	80188a0 <_vfiprintf_r+0x2dc>
 8018874:	2100      	movs	r1, #0
 8018876:	9105      	str	r1, [sp, #20]
 8018878:	0019      	movs	r1, r3
 801887a:	3930      	subs	r1, #48	; 0x30
 801887c:	9207      	str	r2, [sp, #28]
 801887e:	2909      	cmp	r1, #9
 8018880:	d900      	bls.n	8018884 <_vfiprintf_r+0x2c0>
 8018882:	e732      	b.n	80186ea <_vfiprintf_r+0x126>
 8018884:	9805      	ldr	r0, [sp, #20]
 8018886:	4368      	muls	r0, r5
 8018888:	1843      	adds	r3, r0, r1
 801888a:	9305      	str	r3, [sp, #20]
 801888c:	7813      	ldrb	r3, [r2, #0]
 801888e:	3201      	adds	r2, #1
 8018890:	e7f2      	b.n	8018878 <_vfiprintf_r+0x2b4>
 8018892:	46c0      	nop			; (mov r8, r8)
 8018894:	ffffdfff 	.word	0xffffdfff
 8018898:	0801d0d0 	.word	0x0801d0d0
 801889c:	fffffbff 	.word	0xfffffbff
 80188a0:	ce08      	ldmia	r6!, {r3}
 80188a2:	9305      	str	r3, [sp, #20]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	da02      	bge.n	80188ae <_vfiprintf_r+0x2ea>
 80188a8:	2301      	movs	r3, #1
 80188aa:	425b      	negs	r3, r3
 80188ac:	9305      	str	r3, [sp, #20]
 80188ae:	9207      	str	r2, [sp, #28]
 80188b0:	e7cb      	b.n	801884a <_vfiprintf_r+0x286>
 80188b2:	2380      	movs	r3, #128	; 0x80
 80188b4:	e7c0      	b.n	8018838 <_vfiprintf_r+0x274>
 80188b6:	2100      	movs	r1, #0
 80188b8:	9a07      	ldr	r2, [sp, #28]
 80188ba:	9109      	str	r1, [sp, #36]	; 0x24
 80188bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80188be:	3b30      	subs	r3, #48	; 0x30
 80188c0:	4369      	muls	r1, r5
 80188c2:	185b      	adds	r3, r3, r1
 80188c4:	9309      	str	r3, [sp, #36]	; 0x24
 80188c6:	0013      	movs	r3, r2
 80188c8:	781b      	ldrb	r3, [r3, #0]
 80188ca:	3201      	adds	r2, #1
 80188cc:	0019      	movs	r1, r3
 80188ce:	3930      	subs	r1, #48	; 0x30
 80188d0:	9207      	str	r2, [sp, #28]
 80188d2:	2909      	cmp	r1, #9
 80188d4:	d9f2      	bls.n	80188bc <_vfiprintf_r+0x2f8>
 80188d6:	e708      	b.n	80186ea <_vfiprintf_r+0x126>
 80188d8:	9b07      	ldr	r3, [sp, #28]
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	2b68      	cmp	r3, #104	; 0x68
 80188de:	d105      	bne.n	80188ec <_vfiprintf_r+0x328>
 80188e0:	9b07      	ldr	r3, [sp, #28]
 80188e2:	3301      	adds	r3, #1
 80188e4:	9307      	str	r3, [sp, #28]
 80188e6:	2380      	movs	r3, #128	; 0x80
 80188e8:	009b      	lsls	r3, r3, #2
 80188ea:	e7a5      	b.n	8018838 <_vfiprintf_r+0x274>
 80188ec:	2340      	movs	r3, #64	; 0x40
 80188ee:	e7a3      	b.n	8018838 <_vfiprintf_r+0x274>
 80188f0:	9b07      	ldr	r3, [sp, #28]
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	2b6c      	cmp	r3, #108	; 0x6c
 80188f6:	d104      	bne.n	8018902 <_vfiprintf_r+0x33e>
 80188f8:	9b07      	ldr	r3, [sp, #28]
 80188fa:	3301      	adds	r3, #1
 80188fc:	9307      	str	r3, [sp, #28]
 80188fe:	2320      	movs	r3, #32
 8018900:	e79a      	b.n	8018838 <_vfiprintf_r+0x274>
 8018902:	2310      	movs	r3, #16
 8018904:	e798      	b.n	8018838 <_vfiprintf_r+0x274>
 8018906:	0032      	movs	r2, r6
 8018908:	2600      	movs	r6, #0
 801890a:	ca08      	ldmia	r2!, {r3}
 801890c:	ad29      	add	r5, sp, #164	; 0xa4
 801890e:	702b      	strb	r3, [r5, #0]
 8018910:	ab14      	add	r3, sp, #80	; 0x50
 8018912:	70de      	strb	r6, [r3, #3]
 8018914:	2301      	movs	r3, #1
 8018916:	9204      	str	r2, [sp, #16]
 8018918:	9305      	str	r3, [sp, #20]
 801891a:	960b      	str	r6, [sp, #44]	; 0x2c
 801891c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801891e:	9a05      	ldr	r2, [sp, #20]
 8018920:	930a      	str	r3, [sp, #40]	; 0x28
 8018922:	4293      	cmp	r3, r2
 8018924:	da00      	bge.n	8018928 <_vfiprintf_r+0x364>
 8018926:	920a      	str	r2, [sp, #40]	; 0x28
 8018928:	ab14      	add	r3, sp, #80	; 0x50
 801892a:	3303      	adds	r3, #3
 801892c:	781b      	ldrb	r3, [r3, #0]
 801892e:	1e5a      	subs	r2, r3, #1
 8018930:	4193      	sbcs	r3, r2
 8018932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018934:	18d3      	adds	r3, r2, r3
 8018936:	930a      	str	r3, [sp, #40]	; 0x28
 8018938:	0022      	movs	r2, r4
 801893a:	2302      	movs	r3, #2
 801893c:	401a      	ands	r2, r3
 801893e:	9210      	str	r2, [sp, #64]	; 0x40
 8018940:	421c      	tst	r4, r3
 8018942:	d002      	beq.n	801894a <_vfiprintf_r+0x386>
 8018944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018946:	3302      	adds	r3, #2
 8018948:	930a      	str	r3, [sp, #40]	; 0x28
 801894a:	2384      	movs	r3, #132	; 0x84
 801894c:	0022      	movs	r2, r4
 801894e:	401a      	ands	r2, r3
 8018950:	9211      	str	r2, [sp, #68]	; 0x44
 8018952:	421c      	tst	r4, r3
 8018954:	d122      	bne.n	801899c <_vfiprintf_r+0x3d8>
 8018956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801895a:	1a9e      	subs	r6, r3, r2
 801895c:	2e00      	cmp	r6, #0
 801895e:	dd1d      	ble.n	801899c <_vfiprintf_r+0x3d8>
 8018960:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018962:	9903      	ldr	r1, [sp, #12]
 8018964:	469c      	mov	ip, r3
 8018966:	48d0      	ldr	r0, [pc, #832]	; (8018ca8 <_vfiprintf_r+0x6e4>)
 8018968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801896a:	9a03      	ldr	r2, [sp, #12]
 801896c:	9312      	str	r3, [sp, #72]	; 0x48
 801896e:	3108      	adds	r1, #8
 8018970:	3301      	adds	r3, #1
 8018972:	6010      	str	r0, [r2, #0]
 8018974:	2e10      	cmp	r6, #16
 8018976:	dd00      	ble.n	801897a <_vfiprintf_r+0x3b6>
 8018978:	e240      	b.n	8018dfc <_vfiprintf_r+0x838>
 801897a:	6056      	str	r6, [r2, #4]
 801897c:	4466      	add	r6, ip
 801897e:	9618      	str	r6, [sp, #96]	; 0x60
 8018980:	9317      	str	r3, [sp, #92]	; 0x5c
 8018982:	9103      	str	r1, [sp, #12]
 8018984:	2b07      	cmp	r3, #7
 8018986:	dd09      	ble.n	801899c <_vfiprintf_r+0x3d8>
 8018988:	0039      	movs	r1, r7
 801898a:	9806      	ldr	r0, [sp, #24]
 801898c:	aa16      	add	r2, sp, #88	; 0x58
 801898e:	f7ff fde5 	bl	801855c <__sprint_r>
 8018992:	2800      	cmp	r0, #0
 8018994:	d000      	beq.n	8018998 <_vfiprintf_r+0x3d4>
 8018996:	e2a3      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018998:	ab19      	add	r3, sp, #100	; 0x64
 801899a:	9303      	str	r3, [sp, #12]
 801899c:	ab14      	add	r3, sp, #80	; 0x50
 801899e:	1cda      	adds	r2, r3, #3
 80189a0:	78db      	ldrb	r3, [r3, #3]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d012      	beq.n	80189cc <_vfiprintf_r+0x408>
 80189a6:	9903      	ldr	r1, [sp, #12]
 80189a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80189aa:	600a      	str	r2, [r1, #0]
 80189ac:	2201      	movs	r2, #1
 80189ae:	9312      	str	r3, [sp, #72]	; 0x48
 80189b0:	604a      	str	r2, [r1, #4]
 80189b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80189b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80189b8:	3201      	adds	r2, #1
 80189ba:	3301      	adds	r3, #1
 80189bc:	9218      	str	r2, [sp, #96]	; 0x60
 80189be:	9317      	str	r3, [sp, #92]	; 0x5c
 80189c0:	2b07      	cmp	r3, #7
 80189c2:	dd00      	ble.n	80189c6 <_vfiprintf_r+0x402>
 80189c4:	e22d      	b.n	8018e22 <_vfiprintf_r+0x85e>
 80189c6:	000b      	movs	r3, r1
 80189c8:	3308      	adds	r3, #8
 80189ca:	9303      	str	r3, [sp, #12]
 80189cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d013      	beq.n	80189fa <_vfiprintf_r+0x436>
 80189d2:	9903      	ldr	r1, [sp, #12]
 80189d4:	aa15      	add	r2, sp, #84	; 0x54
 80189d6:	600a      	str	r2, [r1, #0]
 80189d8:	2202      	movs	r2, #2
 80189da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80189dc:	604a      	str	r2, [r1, #4]
 80189de:	9310      	str	r3, [sp, #64]	; 0x40
 80189e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189e4:	3202      	adds	r2, #2
 80189e6:	9312      	str	r3, [sp, #72]	; 0x48
 80189e8:	3301      	adds	r3, #1
 80189ea:	9218      	str	r2, [sp, #96]	; 0x60
 80189ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80189ee:	2b07      	cmp	r3, #7
 80189f0:	dd00      	ble.n	80189f4 <_vfiprintf_r+0x430>
 80189f2:	e21f      	b.n	8018e34 <_vfiprintf_r+0x870>
 80189f4:	000b      	movs	r3, r1
 80189f6:	3308      	adds	r3, #8
 80189f8:	9303      	str	r3, [sp, #12]
 80189fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80189fc:	2b80      	cmp	r3, #128	; 0x80
 80189fe:	d122      	bne.n	8018a46 <_vfiprintf_r+0x482>
 8018a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a04:	1a9e      	subs	r6, r3, r2
 8018a06:	2e00      	cmp	r6, #0
 8018a08:	dd1d      	ble.n	8018a46 <_vfiprintf_r+0x482>
 8018a0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018a0c:	9903      	ldr	r1, [sp, #12]
 8018a0e:	469c      	mov	ip, r3
 8018a10:	48a6      	ldr	r0, [pc, #664]	; (8018cac <_vfiprintf_r+0x6e8>)
 8018a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a14:	9a03      	ldr	r2, [sp, #12]
 8018a16:	9310      	str	r3, [sp, #64]	; 0x40
 8018a18:	3108      	adds	r1, #8
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	6010      	str	r0, [r2, #0]
 8018a1e:	2e10      	cmp	r6, #16
 8018a20:	dd00      	ble.n	8018a24 <_vfiprintf_r+0x460>
 8018a22:	e210      	b.n	8018e46 <_vfiprintf_r+0x882>
 8018a24:	6056      	str	r6, [r2, #4]
 8018a26:	4466      	add	r6, ip
 8018a28:	9618      	str	r6, [sp, #96]	; 0x60
 8018a2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a2c:	9103      	str	r1, [sp, #12]
 8018a2e:	2b07      	cmp	r3, #7
 8018a30:	dd09      	ble.n	8018a46 <_vfiprintf_r+0x482>
 8018a32:	0039      	movs	r1, r7
 8018a34:	9806      	ldr	r0, [sp, #24]
 8018a36:	aa16      	add	r2, sp, #88	; 0x58
 8018a38:	f7ff fd90 	bl	801855c <__sprint_r>
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d000      	beq.n	8018a42 <_vfiprintf_r+0x47e>
 8018a40:	e24e      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018a42:	ab19      	add	r3, sp, #100	; 0x64
 8018a44:	9303      	str	r3, [sp, #12]
 8018a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a48:	9a05      	ldr	r2, [sp, #20]
 8018a4a:	1a9e      	subs	r6, r3, r2
 8018a4c:	2e00      	cmp	r6, #0
 8018a4e:	dd1d      	ble.n	8018a8c <_vfiprintf_r+0x4c8>
 8018a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018a52:	9903      	ldr	r1, [sp, #12]
 8018a54:	469c      	mov	ip, r3
 8018a56:	4895      	ldr	r0, [pc, #596]	; (8018cac <_vfiprintf_r+0x6e8>)
 8018a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a5a:	9a03      	ldr	r2, [sp, #12]
 8018a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a5e:	3108      	adds	r1, #8
 8018a60:	3301      	adds	r3, #1
 8018a62:	6010      	str	r0, [r2, #0]
 8018a64:	2e10      	cmp	r6, #16
 8018a66:	dd00      	ble.n	8018a6a <_vfiprintf_r+0x4a6>
 8018a68:	e200      	b.n	8018e6c <_vfiprintf_r+0x8a8>
 8018a6a:	6056      	str	r6, [r2, #4]
 8018a6c:	4466      	add	r6, ip
 8018a6e:	9618      	str	r6, [sp, #96]	; 0x60
 8018a70:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a72:	9103      	str	r1, [sp, #12]
 8018a74:	2b07      	cmp	r3, #7
 8018a76:	dd09      	ble.n	8018a8c <_vfiprintf_r+0x4c8>
 8018a78:	0039      	movs	r1, r7
 8018a7a:	9806      	ldr	r0, [sp, #24]
 8018a7c:	aa16      	add	r2, sp, #88	; 0x58
 8018a7e:	f7ff fd6d 	bl	801855c <__sprint_r>
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d000      	beq.n	8018a88 <_vfiprintf_r+0x4c4>
 8018a86:	e22b      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018a88:	ab19      	add	r3, sp, #100	; 0x64
 8018a8a:	9303      	str	r3, [sp, #12]
 8018a8c:	9b03      	ldr	r3, [sp, #12]
 8018a8e:	9a05      	ldr	r2, [sp, #20]
 8018a90:	601d      	str	r5, [r3, #0]
 8018a92:	605a      	str	r2, [r3, #4]
 8018a94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018a96:	0010      	movs	r0, r2
 8018a98:	469c      	mov	ip, r3
 8018a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a9e:	4460      	add	r0, ip
 8018aa0:	9305      	str	r3, [sp, #20]
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	9018      	str	r0, [sp, #96]	; 0x60
 8018aa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8018aa8:	2b07      	cmp	r3, #7
 8018aaa:	dd00      	ble.n	8018aae <_vfiprintf_r+0x4ea>
 8018aac:	e1f1      	b.n	8018e92 <_vfiprintf_r+0x8ce>
 8018aae:	9b03      	ldr	r3, [sp, #12]
 8018ab0:	3308      	adds	r3, #8
 8018ab2:	0762      	lsls	r2, r4, #29
 8018ab4:	d500      	bpl.n	8018ab8 <_vfiprintf_r+0x4f4>
 8018ab6:	e1f5      	b.n	8018ea4 <_vfiprintf_r+0x8e0>
 8018ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018abc:	4293      	cmp	r3, r2
 8018abe:	da00      	bge.n	8018ac2 <_vfiprintf_r+0x4fe>
 8018ac0:	0013      	movs	r3, r2
 8018ac2:	9a08      	ldr	r2, [sp, #32]
 8018ac4:	18d3      	adds	r3, r2, r3
 8018ac6:	9308      	str	r3, [sp, #32]
 8018ac8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018aca:	9303      	str	r3, [sp, #12]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d007      	beq.n	8018ae0 <_vfiprintf_r+0x51c>
 8018ad0:	0039      	movs	r1, r7
 8018ad2:	9806      	ldr	r0, [sp, #24]
 8018ad4:	aa16      	add	r2, sp, #88	; 0x58
 8018ad6:	f7ff fd41 	bl	801855c <__sprint_r>
 8018ada:	2800      	cmp	r0, #0
 8018adc:	d000      	beq.n	8018ae0 <_vfiprintf_r+0x51c>
 8018ade:	e1ff      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	9317      	str	r3, [sp, #92]	; 0x5c
 8018ae4:	ab19      	add	r3, sp, #100	; 0x64
 8018ae6:	9303      	str	r3, [sp, #12]
 8018ae8:	e049      	b.n	8018b7e <_vfiprintf_r+0x5ba>
 8018aea:	2310      	movs	r3, #16
 8018aec:	431c      	orrs	r4, r3
 8018aee:	06a3      	lsls	r3, r4, #26
 8018af0:	d52b      	bpl.n	8018b4a <_vfiprintf_r+0x586>
 8018af2:	2307      	movs	r3, #7
 8018af4:	3607      	adds	r6, #7
 8018af6:	439e      	bics	r6, r3
 8018af8:	0031      	movs	r1, r6
 8018afa:	c90c      	ldmia	r1!, {r2, r3}
 8018afc:	9200      	str	r2, [sp, #0]
 8018afe:	9301      	str	r3, [sp, #4]
 8018b00:	9104      	str	r1, [sp, #16]
 8018b02:	9a01      	ldr	r2, [sp, #4]
 8018b04:	2301      	movs	r3, #1
 8018b06:	2a00      	cmp	r2, #0
 8018b08:	da09      	bge.n	8018b1e <_vfiprintf_r+0x55a>
 8018b0a:	9d00      	ldr	r5, [sp, #0]
 8018b0c:	9e01      	ldr	r6, [sp, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	4269      	negs	r1, r5
 8018b12:	41b2      	sbcs	r2, r6
 8018b14:	9100      	str	r1, [sp, #0]
 8018b16:	9201      	str	r2, [sp, #4]
 8018b18:	212d      	movs	r1, #45	; 0x2d
 8018b1a:	aa14      	add	r2, sp, #80	; 0x50
 8018b1c:	70d1      	strb	r1, [r2, #3]
 8018b1e:	9901      	ldr	r1, [sp, #4]
 8018b20:	9a00      	ldr	r2, [sp, #0]
 8018b22:	430a      	orrs	r2, r1
 8018b24:	9905      	ldr	r1, [sp, #20]
 8018b26:	3101      	adds	r1, #1
 8018b28:	d100      	bne.n	8018b2c <_vfiprintf_r+0x568>
 8018b2a:	e209      	b.n	8018f40 <_vfiprintf_r+0x97c>
 8018b2c:	2180      	movs	r1, #128	; 0x80
 8018b2e:	0020      	movs	r0, r4
 8018b30:	4388      	bics	r0, r1
 8018b32:	900a      	str	r0, [sp, #40]	; 0x28
 8018b34:	2a00      	cmp	r2, #0
 8018b36:	d000      	beq.n	8018b3a <_vfiprintf_r+0x576>
 8018b38:	e206      	b.n	8018f48 <_vfiprintf_r+0x984>
 8018b3a:	9a05      	ldr	r2, [sp, #20]
 8018b3c:	2a00      	cmp	r2, #0
 8018b3e:	d100      	bne.n	8018b42 <_vfiprintf_r+0x57e>
 8018b40:	e143      	b.n	8018dca <_vfiprintf_r+0x806>
 8018b42:	2b01      	cmp	r3, #1
 8018b44:	d000      	beq.n	8018b48 <_vfiprintf_r+0x584>
 8018b46:	e202      	b.n	8018f4e <_vfiprintf_r+0x98a>
 8018b48:	e0e6      	b.n	8018d18 <_vfiprintf_r+0x754>
 8018b4a:	0032      	movs	r2, r6
 8018b4c:	ca08      	ldmia	r2!, {r3}
 8018b4e:	9204      	str	r2, [sp, #16]
 8018b50:	06e2      	lsls	r2, r4, #27
 8018b52:	d503      	bpl.n	8018b5c <_vfiprintf_r+0x598>
 8018b54:	9300      	str	r3, [sp, #0]
 8018b56:	17db      	asrs	r3, r3, #31
 8018b58:	9301      	str	r3, [sp, #4]
 8018b5a:	e7d2      	b.n	8018b02 <_vfiprintf_r+0x53e>
 8018b5c:	0662      	lsls	r2, r4, #25
 8018b5e:	d501      	bpl.n	8018b64 <_vfiprintf_r+0x5a0>
 8018b60:	b21b      	sxth	r3, r3
 8018b62:	e7f7      	b.n	8018b54 <_vfiprintf_r+0x590>
 8018b64:	05a2      	lsls	r2, r4, #22
 8018b66:	d5f5      	bpl.n	8018b54 <_vfiprintf_r+0x590>
 8018b68:	b25b      	sxtb	r3, r3
 8018b6a:	e7f3      	b.n	8018b54 <_vfiprintf_r+0x590>
 8018b6c:	1d33      	adds	r3, r6, #4
 8018b6e:	9304      	str	r3, [sp, #16]
 8018b70:	06a3      	lsls	r3, r4, #26
 8018b72:	d506      	bpl.n	8018b82 <_vfiprintf_r+0x5be>
 8018b74:	6833      	ldr	r3, [r6, #0]
 8018b76:	9a08      	ldr	r2, [sp, #32]
 8018b78:	601a      	str	r2, [r3, #0]
 8018b7a:	17d2      	asrs	r2, r2, #31
 8018b7c:	605a      	str	r2, [r3, #4]
 8018b7e:	9e04      	ldr	r6, [sp, #16]
 8018b80:	e584      	b.n	801868c <_vfiprintf_r+0xc8>
 8018b82:	06e3      	lsls	r3, r4, #27
 8018b84:	d503      	bpl.n	8018b8e <_vfiprintf_r+0x5ca>
 8018b86:	6833      	ldr	r3, [r6, #0]
 8018b88:	9a08      	ldr	r2, [sp, #32]
 8018b8a:	601a      	str	r2, [r3, #0]
 8018b8c:	e7f7      	b.n	8018b7e <_vfiprintf_r+0x5ba>
 8018b8e:	0663      	lsls	r3, r4, #25
 8018b90:	d503      	bpl.n	8018b9a <_vfiprintf_r+0x5d6>
 8018b92:	6833      	ldr	r3, [r6, #0]
 8018b94:	9a08      	ldr	r2, [sp, #32]
 8018b96:	801a      	strh	r2, [r3, #0]
 8018b98:	e7f1      	b.n	8018b7e <_vfiprintf_r+0x5ba>
 8018b9a:	05a3      	lsls	r3, r4, #22
 8018b9c:	d5f3      	bpl.n	8018b86 <_vfiprintf_r+0x5c2>
 8018b9e:	6833      	ldr	r3, [r6, #0]
 8018ba0:	9a08      	ldr	r2, [sp, #32]
 8018ba2:	701a      	strb	r2, [r3, #0]
 8018ba4:	e7eb      	b.n	8018b7e <_vfiprintf_r+0x5ba>
 8018ba6:	2310      	movs	r3, #16
 8018ba8:	431c      	orrs	r4, r3
 8018baa:	2320      	movs	r3, #32
 8018bac:	0020      	movs	r0, r4
 8018bae:	4018      	ands	r0, r3
 8018bb0:	421c      	tst	r4, r3
 8018bb2:	d00d      	beq.n	8018bd0 <_vfiprintf_r+0x60c>
 8018bb4:	3b19      	subs	r3, #25
 8018bb6:	3607      	adds	r6, #7
 8018bb8:	439e      	bics	r6, r3
 8018bba:	0031      	movs	r1, r6
 8018bbc:	c90c      	ldmia	r1!, {r2, r3}
 8018bbe:	9200      	str	r2, [sp, #0]
 8018bc0:	9301      	str	r3, [sp, #4]
 8018bc2:	9104      	str	r1, [sp, #16]
 8018bc4:	4b3a      	ldr	r3, [pc, #232]	; (8018cb0 <_vfiprintf_r+0x6ec>)
 8018bc6:	401c      	ands	r4, r3
 8018bc8:	2300      	movs	r3, #0
 8018bca:	2100      	movs	r1, #0
 8018bcc:	aa14      	add	r2, sp, #80	; 0x50
 8018bce:	e7a5      	b.n	8018b1c <_vfiprintf_r+0x558>
 8018bd0:	0032      	movs	r2, r6
 8018bd2:	ca08      	ldmia	r2!, {r3}
 8018bd4:	0021      	movs	r1, r4
 8018bd6:	9204      	str	r2, [sp, #16]
 8018bd8:	2210      	movs	r2, #16
 8018bda:	4011      	ands	r1, r2
 8018bdc:	4214      	tst	r4, r2
 8018bde:	d002      	beq.n	8018be6 <_vfiprintf_r+0x622>
 8018be0:	9300      	str	r3, [sp, #0]
 8018be2:	9001      	str	r0, [sp, #4]
 8018be4:	e7ee      	b.n	8018bc4 <_vfiprintf_r+0x600>
 8018be6:	2240      	movs	r2, #64	; 0x40
 8018be8:	0020      	movs	r0, r4
 8018bea:	4010      	ands	r0, r2
 8018bec:	4214      	tst	r4, r2
 8018bee:	d003      	beq.n	8018bf8 <_vfiprintf_r+0x634>
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	9300      	str	r3, [sp, #0]
 8018bf4:	9101      	str	r1, [sp, #4]
 8018bf6:	e7e5      	b.n	8018bc4 <_vfiprintf_r+0x600>
 8018bf8:	2280      	movs	r2, #128	; 0x80
 8018bfa:	0021      	movs	r1, r4
 8018bfc:	0092      	lsls	r2, r2, #2
 8018bfe:	4011      	ands	r1, r2
 8018c00:	4214      	tst	r4, r2
 8018c02:	d0f6      	beq.n	8018bf2 <_vfiprintf_r+0x62e>
 8018c04:	b2db      	uxtb	r3, r3
 8018c06:	e7eb      	b.n	8018be0 <_vfiprintf_r+0x61c>
 8018c08:	0033      	movs	r3, r6
 8018c0a:	2130      	movs	r1, #48	; 0x30
 8018c0c:	cb04      	ldmia	r3!, {r2}
 8018c0e:	9304      	str	r3, [sp, #16]
 8018c10:	2300      	movs	r3, #0
 8018c12:	9200      	str	r2, [sp, #0]
 8018c14:	aa15      	add	r2, sp, #84	; 0x54
 8018c16:	7011      	strb	r1, [r2, #0]
 8018c18:	3148      	adds	r1, #72	; 0x48
 8018c1a:	7051      	strb	r1, [r2, #1]
 8018c1c:	4a25      	ldr	r2, [pc, #148]	; (8018cb4 <_vfiprintf_r+0x6f0>)
 8018c1e:	9301      	str	r3, [sp, #4]
 8018c20:	3302      	adds	r3, #2
 8018c22:	431c      	orrs	r4, r3
 8018c24:	920c      	str	r2, [sp, #48]	; 0x30
 8018c26:	e7d0      	b.n	8018bca <_vfiprintf_r+0x606>
 8018c28:	0033      	movs	r3, r6
 8018c2a:	2600      	movs	r6, #0
 8018c2c:	cb20      	ldmia	r3!, {r5}
 8018c2e:	9304      	str	r3, [sp, #16]
 8018c30:	ab14      	add	r3, sp, #80	; 0x50
 8018c32:	70de      	strb	r6, [r3, #3]
 8018c34:	9b05      	ldr	r3, [sp, #20]
 8018c36:	3301      	adds	r3, #1
 8018c38:	d00a      	beq.n	8018c50 <_vfiprintf_r+0x68c>
 8018c3a:	0031      	movs	r1, r6
 8018c3c:	0028      	movs	r0, r5
 8018c3e:	9a05      	ldr	r2, [sp, #20]
 8018c40:	f7fe febe 	bl	80179c0 <memchr>
 8018c44:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c46:	42b0      	cmp	r0, r6
 8018c48:	d100      	bne.n	8018c4c <_vfiprintf_r+0x688>
 8018c4a:	e667      	b.n	801891c <_vfiprintf_r+0x358>
 8018c4c:	1b43      	subs	r3, r0, r5
 8018c4e:	e663      	b.n	8018918 <_vfiprintf_r+0x354>
 8018c50:	0028      	movs	r0, r5
 8018c52:	f7e7 fa61 	bl	8000118 <strlen>
 8018c56:	9005      	str	r0, [sp, #20]
 8018c58:	e65f      	b.n	801891a <_vfiprintf_r+0x356>
 8018c5a:	2310      	movs	r3, #16
 8018c5c:	431c      	orrs	r4, r3
 8018c5e:	2320      	movs	r3, #32
 8018c60:	0020      	movs	r0, r4
 8018c62:	4018      	ands	r0, r3
 8018c64:	421c      	tst	r4, r3
 8018c66:	d009      	beq.n	8018c7c <_vfiprintf_r+0x6b8>
 8018c68:	3b19      	subs	r3, #25
 8018c6a:	3607      	adds	r6, #7
 8018c6c:	439e      	bics	r6, r3
 8018c6e:	0031      	movs	r1, r6
 8018c70:	c90c      	ldmia	r1!, {r2, r3}
 8018c72:	9200      	str	r2, [sp, #0]
 8018c74:	9301      	str	r3, [sp, #4]
 8018c76:	9104      	str	r1, [sp, #16]
 8018c78:	2301      	movs	r3, #1
 8018c7a:	e7a6      	b.n	8018bca <_vfiprintf_r+0x606>
 8018c7c:	0033      	movs	r3, r6
 8018c7e:	cb04      	ldmia	r3!, {r2}
 8018c80:	0021      	movs	r1, r4
 8018c82:	9304      	str	r3, [sp, #16]
 8018c84:	2310      	movs	r3, #16
 8018c86:	4019      	ands	r1, r3
 8018c88:	421c      	tst	r4, r3
 8018c8a:	d003      	beq.n	8018c94 <_vfiprintf_r+0x6d0>
 8018c8c:	9200      	str	r2, [sp, #0]
 8018c8e:	9001      	str	r0, [sp, #4]
 8018c90:	3b0f      	subs	r3, #15
 8018c92:	e79a      	b.n	8018bca <_vfiprintf_r+0x606>
 8018c94:	2340      	movs	r3, #64	; 0x40
 8018c96:	0020      	movs	r0, r4
 8018c98:	4018      	ands	r0, r3
 8018c9a:	421c      	tst	r4, r3
 8018c9c:	d00c      	beq.n	8018cb8 <_vfiprintf_r+0x6f4>
 8018c9e:	b293      	uxth	r3, r2
 8018ca0:	9300      	str	r3, [sp, #0]
 8018ca2:	9101      	str	r1, [sp, #4]
 8018ca4:	e7e8      	b.n	8018c78 <_vfiprintf_r+0x6b4>
 8018ca6:	46c0      	nop			; (mov r8, r8)
 8018ca8:	0801d3a0 	.word	0x0801d3a0
 8018cac:	0801d3b0 	.word	0x0801d3b0
 8018cb0:	fffffbff 	.word	0xfffffbff
 8018cb4:	0801d0d0 	.word	0x0801d0d0
 8018cb8:	2380      	movs	r3, #128	; 0x80
 8018cba:	0021      	movs	r1, r4
 8018cbc:	009b      	lsls	r3, r3, #2
 8018cbe:	4019      	ands	r1, r3
 8018cc0:	421c      	tst	r4, r3
 8018cc2:	d003      	beq.n	8018ccc <_vfiprintf_r+0x708>
 8018cc4:	b2d3      	uxtb	r3, r2
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	9001      	str	r0, [sp, #4]
 8018cca:	e7d5      	b.n	8018c78 <_vfiprintf_r+0x6b4>
 8018ccc:	9200      	str	r2, [sp, #0]
 8018cce:	e7e8      	b.n	8018ca2 <_vfiprintf_r+0x6de>
 8018cd0:	4ab3      	ldr	r2, [pc, #716]	; (8018fa0 <_vfiprintf_r+0x9dc>)
 8018cd2:	e579      	b.n	80187c8 <_vfiprintf_r+0x204>
 8018cd4:	0031      	movs	r1, r6
 8018cd6:	c904      	ldmia	r1!, {r2}
 8018cd8:	0025      	movs	r5, r4
 8018cda:	9104      	str	r1, [sp, #16]
 8018cdc:	2110      	movs	r1, #16
 8018cde:	400d      	ands	r5, r1
 8018ce0:	420c      	tst	r4, r1
 8018ce2:	d002      	beq.n	8018cea <_vfiprintf_r+0x726>
 8018ce4:	9200      	str	r2, [sp, #0]
 8018ce6:	9001      	str	r0, [sp, #4]
 8018ce8:	e57d      	b.n	80187e6 <_vfiprintf_r+0x222>
 8018cea:	2140      	movs	r1, #64	; 0x40
 8018cec:	0020      	movs	r0, r4
 8018cee:	4008      	ands	r0, r1
 8018cf0:	420c      	tst	r4, r1
 8018cf2:	d003      	beq.n	8018cfc <_vfiprintf_r+0x738>
 8018cf4:	b292      	uxth	r2, r2
 8018cf6:	9200      	str	r2, [sp, #0]
 8018cf8:	9501      	str	r5, [sp, #4]
 8018cfa:	e574      	b.n	80187e6 <_vfiprintf_r+0x222>
 8018cfc:	2180      	movs	r1, #128	; 0x80
 8018cfe:	0025      	movs	r5, r4
 8018d00:	0089      	lsls	r1, r1, #2
 8018d02:	400d      	ands	r5, r1
 8018d04:	420c      	tst	r4, r1
 8018d06:	d0f6      	beq.n	8018cf6 <_vfiprintf_r+0x732>
 8018d08:	b2d2      	uxtb	r2, r2
 8018d0a:	e7eb      	b.n	8018ce4 <_vfiprintf_r+0x720>
 8018d0c:	9b01      	ldr	r3, [sp, #4]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d109      	bne.n	8018d26 <_vfiprintf_r+0x762>
 8018d12:	9b00      	ldr	r3, [sp, #0]
 8018d14:	2b09      	cmp	r3, #9
 8018d16:	d806      	bhi.n	8018d26 <_vfiprintf_r+0x762>
 8018d18:	25b7      	movs	r5, #183	; 0xb7
 8018d1a:	ab14      	add	r3, sp, #80	; 0x50
 8018d1c:	18ed      	adds	r5, r5, r3
 8018d1e:	9b00      	ldr	r3, [sp, #0]
 8018d20:	3330      	adds	r3, #48	; 0x30
 8018d22:	702b      	strb	r3, [r5, #0]
 8018d24:	e134      	b.n	8018f90 <_vfiprintf_r+0x9cc>
 8018d26:	2680      	movs	r6, #128	; 0x80
 8018d28:	2400      	movs	r4, #0
 8018d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d2c:	00f6      	lsls	r6, r6, #3
 8018d2e:	ad42      	add	r5, sp, #264	; 0x108
 8018d30:	401e      	ands	r6, r3
 8018d32:	220a      	movs	r2, #10
 8018d34:	9800      	ldr	r0, [sp, #0]
 8018d36:	9901      	ldr	r1, [sp, #4]
 8018d38:	2300      	movs	r3, #0
 8018d3a:	f7e7 fbf7 	bl	800052c <__aeabi_uldivmod>
 8018d3e:	3d01      	subs	r5, #1
 8018d40:	3230      	adds	r2, #48	; 0x30
 8018d42:	702a      	strb	r2, [r5, #0]
 8018d44:	3401      	adds	r4, #1
 8018d46:	2e00      	cmp	r6, #0
 8018d48:	d01a      	beq.n	8018d80 <_vfiprintf_r+0x7bc>
 8018d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	42a3      	cmp	r3, r4
 8018d50:	d116      	bne.n	8018d80 <_vfiprintf_r+0x7bc>
 8018d52:	2cff      	cmp	r4, #255	; 0xff
 8018d54:	d014      	beq.n	8018d80 <_vfiprintf_r+0x7bc>
 8018d56:	9b01      	ldr	r3, [sp, #4]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d102      	bne.n	8018d62 <_vfiprintf_r+0x79e>
 8018d5c:	9b00      	ldr	r3, [sp, #0]
 8018d5e:	2b09      	cmp	r3, #9
 8018d60:	d90e      	bls.n	8018d80 <_vfiprintf_r+0x7bc>
 8018d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018d66:	1aed      	subs	r5, r5, r3
 8018d68:	001a      	movs	r2, r3
 8018d6a:	0028      	movs	r0, r5
 8018d6c:	f7fb f95b 	bl	8014026 <strncpy>
 8018d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d72:	2400      	movs	r4, #0
 8018d74:	785b      	ldrb	r3, [r3, #1]
 8018d76:	1e5a      	subs	r2, r3, #1
 8018d78:	4193      	sbcs	r3, r2
 8018d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018d7c:	18d3      	adds	r3, r2, r3
 8018d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8018d80:	2300      	movs	r3, #0
 8018d82:	9800      	ldr	r0, [sp, #0]
 8018d84:	9901      	ldr	r1, [sp, #4]
 8018d86:	220a      	movs	r2, #10
 8018d88:	f7e7 fbd0 	bl	800052c <__aeabi_uldivmod>
 8018d8c:	9b01      	ldr	r3, [sp, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d103      	bne.n	8018d9a <_vfiprintf_r+0x7d6>
 8018d92:	9b00      	ldr	r3, [sp, #0]
 8018d94:	2b09      	cmp	r3, #9
 8018d96:	d800      	bhi.n	8018d9a <_vfiprintf_r+0x7d6>
 8018d98:	e0fa      	b.n	8018f90 <_vfiprintf_r+0x9cc>
 8018d9a:	9000      	str	r0, [sp, #0]
 8018d9c:	9101      	str	r1, [sp, #4]
 8018d9e:	e7c8      	b.n	8018d32 <_vfiprintf_r+0x76e>
 8018da0:	200f      	movs	r0, #15
 8018da2:	9b00      	ldr	r3, [sp, #0]
 8018da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018da6:	4003      	ands	r3, r0
 8018da8:	5cd3      	ldrb	r3, [r2, r3]
 8018daa:	3d01      	subs	r5, #1
 8018dac:	702b      	strb	r3, [r5, #0]
 8018dae:	9b01      	ldr	r3, [sp, #4]
 8018db0:	0719      	lsls	r1, r3, #28
 8018db2:	9b00      	ldr	r3, [sp, #0]
 8018db4:	091a      	lsrs	r2, r3, #4
 8018db6:	9b01      	ldr	r3, [sp, #4]
 8018db8:	4311      	orrs	r1, r2
 8018dba:	091b      	lsrs	r3, r3, #4
 8018dbc:	9301      	str	r3, [sp, #4]
 8018dbe:	000b      	movs	r3, r1
 8018dc0:	9a01      	ldr	r2, [sp, #4]
 8018dc2:	9100      	str	r1, [sp, #0]
 8018dc4:	4313      	orrs	r3, r2
 8018dc6:	d1ec      	bne.n	8018da2 <_vfiprintf_r+0x7de>
 8018dc8:	e0e2      	b.n	8018f90 <_vfiprintf_r+0x9cc>
 8018dca:	ad42      	add	r5, sp, #264	; 0x108
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d000      	beq.n	8018dd2 <_vfiprintf_r+0x80e>
 8018dd0:	e0de      	b.n	8018f90 <_vfiprintf_r+0x9cc>
 8018dd2:	07e3      	lsls	r3, r4, #31
 8018dd4:	d400      	bmi.n	8018dd8 <_vfiprintf_r+0x814>
 8018dd6:	e0db      	b.n	8018f90 <_vfiprintf_r+0x9cc>
 8018dd8:	25b7      	movs	r5, #183	; 0xb7
 8018dda:	ab14      	add	r3, sp, #80	; 0x50
 8018ddc:	18ed      	adds	r5, r5, r3
 8018dde:	2330      	movs	r3, #48	; 0x30
 8018de0:	e79f      	b.n	8018d22 <_vfiprintf_r+0x75e>
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d100      	bne.n	8018de8 <_vfiprintf_r+0x824>
 8018de6:	e09c      	b.n	8018f22 <_vfiprintf_r+0x95e>
 8018de8:	ad29      	add	r5, sp, #164	; 0xa4
 8018dea:	702b      	strb	r3, [r5, #0]
 8018dec:	2300      	movs	r3, #0
 8018dee:	aa14      	add	r2, sp, #80	; 0x50
 8018df0:	70d3      	strb	r3, [r2, #3]
 8018df2:	2201      	movs	r2, #1
 8018df4:	9604      	str	r6, [sp, #16]
 8018df6:	9205      	str	r2, [sp, #20]
 8018df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018dfa:	e58f      	b.n	801891c <_vfiprintf_r+0x358>
 8018dfc:	2010      	movs	r0, #16
 8018dfe:	6050      	str	r0, [r2, #4]
 8018e00:	4662      	mov	r2, ip
 8018e02:	1812      	adds	r2, r2, r0
 8018e04:	9218      	str	r2, [sp, #96]	; 0x60
 8018e06:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e08:	2b07      	cmp	r3, #7
 8018e0a:	dd07      	ble.n	8018e1c <_vfiprintf_r+0x858>
 8018e0c:	0039      	movs	r1, r7
 8018e0e:	9806      	ldr	r0, [sp, #24]
 8018e10:	aa16      	add	r2, sp, #88	; 0x58
 8018e12:	f7ff fba3 	bl	801855c <__sprint_r>
 8018e16:	2800      	cmp	r0, #0
 8018e18:	d162      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018e1a:	a919      	add	r1, sp, #100	; 0x64
 8018e1c:	3e10      	subs	r6, #16
 8018e1e:	9103      	str	r1, [sp, #12]
 8018e20:	e59e      	b.n	8018960 <_vfiprintf_r+0x39c>
 8018e22:	0039      	movs	r1, r7
 8018e24:	9806      	ldr	r0, [sp, #24]
 8018e26:	aa16      	add	r2, sp, #88	; 0x58
 8018e28:	f7ff fb98 	bl	801855c <__sprint_r>
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d157      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018e30:	ab19      	add	r3, sp, #100	; 0x64
 8018e32:	e5ca      	b.n	80189ca <_vfiprintf_r+0x406>
 8018e34:	0039      	movs	r1, r7
 8018e36:	9806      	ldr	r0, [sp, #24]
 8018e38:	aa16      	add	r2, sp, #88	; 0x58
 8018e3a:	f7ff fb8f 	bl	801855c <__sprint_r>
 8018e3e:	2800      	cmp	r0, #0
 8018e40:	d14e      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018e42:	ab19      	add	r3, sp, #100	; 0x64
 8018e44:	e5d8      	b.n	80189f8 <_vfiprintf_r+0x434>
 8018e46:	2010      	movs	r0, #16
 8018e48:	6050      	str	r0, [r2, #4]
 8018e4a:	4662      	mov	r2, ip
 8018e4c:	1812      	adds	r2, r2, r0
 8018e4e:	9218      	str	r2, [sp, #96]	; 0x60
 8018e50:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e52:	2b07      	cmp	r3, #7
 8018e54:	dd07      	ble.n	8018e66 <_vfiprintf_r+0x8a2>
 8018e56:	0039      	movs	r1, r7
 8018e58:	9806      	ldr	r0, [sp, #24]
 8018e5a:	aa16      	add	r2, sp, #88	; 0x58
 8018e5c:	f7ff fb7e 	bl	801855c <__sprint_r>
 8018e60:	2800      	cmp	r0, #0
 8018e62:	d13d      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018e64:	a919      	add	r1, sp, #100	; 0x64
 8018e66:	3e10      	subs	r6, #16
 8018e68:	9103      	str	r1, [sp, #12]
 8018e6a:	e5ce      	b.n	8018a0a <_vfiprintf_r+0x446>
 8018e6c:	2010      	movs	r0, #16
 8018e6e:	6050      	str	r0, [r2, #4]
 8018e70:	4662      	mov	r2, ip
 8018e72:	1812      	adds	r2, r2, r0
 8018e74:	9218      	str	r2, [sp, #96]	; 0x60
 8018e76:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e78:	2b07      	cmp	r3, #7
 8018e7a:	dd07      	ble.n	8018e8c <_vfiprintf_r+0x8c8>
 8018e7c:	0039      	movs	r1, r7
 8018e7e:	9806      	ldr	r0, [sp, #24]
 8018e80:	aa16      	add	r2, sp, #88	; 0x58
 8018e82:	f7ff fb6b 	bl	801855c <__sprint_r>
 8018e86:	2800      	cmp	r0, #0
 8018e88:	d12a      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018e8a:	a919      	add	r1, sp, #100	; 0x64
 8018e8c:	3e10      	subs	r6, #16
 8018e8e:	9103      	str	r1, [sp, #12]
 8018e90:	e5de      	b.n	8018a50 <_vfiprintf_r+0x48c>
 8018e92:	0039      	movs	r1, r7
 8018e94:	9806      	ldr	r0, [sp, #24]
 8018e96:	aa16      	add	r2, sp, #88	; 0x58
 8018e98:	f7ff fb60 	bl	801855c <__sprint_r>
 8018e9c:	2800      	cmp	r0, #0
 8018e9e:	d11f      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018ea0:	ab19      	add	r3, sp, #100	; 0x64
 8018ea2:	e606      	b.n	8018ab2 <_vfiprintf_r+0x4ee>
 8018ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018ea8:	2510      	movs	r5, #16
 8018eaa:	1a54      	subs	r4, r2, r1
 8018eac:	2c00      	cmp	r4, #0
 8018eae:	dc00      	bgt.n	8018eb2 <_vfiprintf_r+0x8ee>
 8018eb0:	e602      	b.n	8018ab8 <_vfiprintf_r+0x4f4>
 8018eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018eb4:	483b      	ldr	r0, [pc, #236]	; (8018fa4 <_vfiprintf_r+0x9e0>)
 8018eb6:	9203      	str	r2, [sp, #12]
 8018eb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018eba:	3201      	adds	r2, #1
 8018ebc:	6018      	str	r0, [r3, #0]
 8018ebe:	2c10      	cmp	r4, #16
 8018ec0:	dc1e      	bgt.n	8018f00 <_vfiprintf_r+0x93c>
 8018ec2:	605c      	str	r4, [r3, #4]
 8018ec4:	1864      	adds	r4, r4, r1
 8018ec6:	9418      	str	r4, [sp, #96]	; 0x60
 8018ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8018eca:	2a07      	cmp	r2, #7
 8018ecc:	dc00      	bgt.n	8018ed0 <_vfiprintf_r+0x90c>
 8018ece:	e5f3      	b.n	8018ab8 <_vfiprintf_r+0x4f4>
 8018ed0:	0039      	movs	r1, r7
 8018ed2:	9806      	ldr	r0, [sp, #24]
 8018ed4:	aa16      	add	r2, sp, #88	; 0x58
 8018ed6:	f7ff fb41 	bl	801855c <__sprint_r>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d100      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018ede:	e5eb      	b.n	8018ab8 <_vfiprintf_r+0x4f4>
 8018ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ee2:	07db      	lsls	r3, r3, #31
 8018ee4:	d405      	bmi.n	8018ef2 <_vfiprintf_r+0x92e>
 8018ee6:	89bb      	ldrh	r3, [r7, #12]
 8018ee8:	059b      	lsls	r3, r3, #22
 8018eea:	d402      	bmi.n	8018ef2 <_vfiprintf_r+0x92e>
 8018eec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018eee:	f7fe fd54 	bl	801799a <__retarget_lock_release_recursive>
 8018ef2:	89bb      	ldrh	r3, [r7, #12]
 8018ef4:	065b      	lsls	r3, r3, #25
 8018ef6:	d401      	bmi.n	8018efc <_vfiprintf_r+0x938>
 8018ef8:	f7ff fb9a 	bl	8018630 <_vfiprintf_r+0x6c>
 8018efc:	f7ff fb95 	bl	801862a <_vfiprintf_r+0x66>
 8018f00:	3110      	adds	r1, #16
 8018f02:	605d      	str	r5, [r3, #4]
 8018f04:	9118      	str	r1, [sp, #96]	; 0x60
 8018f06:	9217      	str	r2, [sp, #92]	; 0x5c
 8018f08:	3308      	adds	r3, #8
 8018f0a:	2a07      	cmp	r2, #7
 8018f0c:	dd07      	ble.n	8018f1e <_vfiprintf_r+0x95a>
 8018f0e:	0039      	movs	r1, r7
 8018f10:	9806      	ldr	r0, [sp, #24]
 8018f12:	aa16      	add	r2, sp, #88	; 0x58
 8018f14:	f7ff fb22 	bl	801855c <__sprint_r>
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	d1e1      	bne.n	8018ee0 <_vfiprintf_r+0x91c>
 8018f1c:	ab19      	add	r3, sp, #100	; 0x64
 8018f1e:	3c10      	subs	r4, #16
 8018f20:	e7c7      	b.n	8018eb2 <_vfiprintf_r+0x8ee>
 8018f22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f24:	9300      	str	r3, [sp, #0]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d102      	bne.n	8018f30 <_vfiprintf_r+0x96c>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f2e:	e7d7      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018f30:	0039      	movs	r1, r7
 8018f32:	9806      	ldr	r0, [sp, #24]
 8018f34:	aa16      	add	r2, sp, #88	; 0x58
 8018f36:	f7ff fb11 	bl	801855c <__sprint_r>
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	d0f5      	beq.n	8018f2a <_vfiprintf_r+0x966>
 8018f3e:	e7cf      	b.n	8018ee0 <_vfiprintf_r+0x91c>
 8018f40:	940a      	str	r4, [sp, #40]	; 0x28
 8018f42:	2a00      	cmp	r2, #0
 8018f44:	d100      	bne.n	8018f48 <_vfiprintf_r+0x984>
 8018f46:	e5fc      	b.n	8018b42 <_vfiprintf_r+0x57e>
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d100      	bne.n	8018f4e <_vfiprintf_r+0x98a>
 8018f4c:	e6de      	b.n	8018d0c <_vfiprintf_r+0x748>
 8018f4e:	ad42      	add	r5, sp, #264	; 0x108
 8018f50:	2b02      	cmp	r3, #2
 8018f52:	d100      	bne.n	8018f56 <_vfiprintf_r+0x992>
 8018f54:	e724      	b.n	8018da0 <_vfiprintf_r+0x7dc>
 8018f56:	2607      	movs	r6, #7
 8018f58:	9901      	ldr	r1, [sp, #4]
 8018f5a:	9b00      	ldr	r3, [sp, #0]
 8018f5c:	074c      	lsls	r4, r1, #29
 8018f5e:	9900      	ldr	r1, [sp, #0]
 8018f60:	4033      	ands	r3, r6
 8018f62:	08c8      	lsrs	r0, r1, #3
 8018f64:	9901      	ldr	r1, [sp, #4]
 8018f66:	4304      	orrs	r4, r0
 8018f68:	08c9      	lsrs	r1, r1, #3
 8018f6a:	9101      	str	r1, [sp, #4]
 8018f6c:	0021      	movs	r1, r4
 8018f6e:	9801      	ldr	r0, [sp, #4]
 8018f70:	002a      	movs	r2, r5
 8018f72:	3330      	adds	r3, #48	; 0x30
 8018f74:	3d01      	subs	r5, #1
 8018f76:	702b      	strb	r3, [r5, #0]
 8018f78:	9400      	str	r4, [sp, #0]
 8018f7a:	4301      	orrs	r1, r0
 8018f7c:	d1ec      	bne.n	8018f58 <_vfiprintf_r+0x994>
 8018f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018f80:	07c9      	lsls	r1, r1, #31
 8018f82:	d505      	bpl.n	8018f90 <_vfiprintf_r+0x9cc>
 8018f84:	2b30      	cmp	r3, #48	; 0x30
 8018f86:	d003      	beq.n	8018f90 <_vfiprintf_r+0x9cc>
 8018f88:	2330      	movs	r3, #48	; 0x30
 8018f8a:	3d01      	subs	r5, #1
 8018f8c:	702b      	strb	r3, [r5, #0]
 8018f8e:	1e95      	subs	r5, r2, #2
 8018f90:	9b05      	ldr	r3, [sp, #20]
 8018f92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f96:	ab42      	add	r3, sp, #264	; 0x108
 8018f98:	1b5b      	subs	r3, r3, r5
 8018f9a:	9305      	str	r3, [sp, #20]
 8018f9c:	e4be      	b.n	801891c <_vfiprintf_r+0x358>
 8018f9e:	46c0      	nop			; (mov r8, r8)
 8018fa0:	0801d0e1 	.word	0x0801d0e1
 8018fa4:	0801d3a0 	.word	0x0801d3a0

08018fa8 <__sbprintf>:
 8018fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018faa:	0015      	movs	r5, r2
 8018fac:	2202      	movs	r2, #2
 8018fae:	4c1e      	ldr	r4, [pc, #120]	; (8019028 <__sbprintf+0x80>)
 8018fb0:	001f      	movs	r7, r3
 8018fb2:	898b      	ldrh	r3, [r1, #12]
 8018fb4:	44a5      	add	sp, r4
 8018fb6:	4393      	bics	r3, r2
 8018fb8:	466a      	mov	r2, sp
 8018fba:	8193      	strh	r3, [r2, #12]
 8018fbc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018fbe:	0006      	movs	r6, r0
 8018fc0:	9319      	str	r3, [sp, #100]	; 0x64
 8018fc2:	89cb      	ldrh	r3, [r1, #14]
 8018fc4:	a816      	add	r0, sp, #88	; 0x58
 8018fc6:	81d3      	strh	r3, [r2, #14]
 8018fc8:	69cb      	ldr	r3, [r1, #28]
 8018fca:	000c      	movs	r4, r1
 8018fcc:	9307      	str	r3, [sp, #28]
 8018fce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8018fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8018fd2:	ab1a      	add	r3, sp, #104	; 0x68
 8018fd4:	9300      	str	r3, [sp, #0]
 8018fd6:	9304      	str	r3, [sp, #16]
 8018fd8:	2380      	movs	r3, #128	; 0x80
 8018fda:	00db      	lsls	r3, r3, #3
 8018fdc:	9302      	str	r3, [sp, #8]
 8018fde:	9305      	str	r3, [sp, #20]
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	9306      	str	r3, [sp, #24]
 8018fe4:	f7fe fcd6 	bl	8017994 <__retarget_lock_init_recursive>
 8018fe8:	002a      	movs	r2, r5
 8018fea:	003b      	movs	r3, r7
 8018fec:	4669      	mov	r1, sp
 8018fee:	0030      	movs	r0, r6
 8018ff0:	f7ff fae8 	bl	80185c4 <_vfiprintf_r>
 8018ff4:	1e05      	subs	r5, r0, #0
 8018ff6:	db07      	blt.n	8019008 <__sbprintf+0x60>
 8018ff8:	4669      	mov	r1, sp
 8018ffa:	0030      	movs	r0, r6
 8018ffc:	f000 f91c 	bl	8019238 <_fflush_r>
 8019000:	2800      	cmp	r0, #0
 8019002:	d001      	beq.n	8019008 <__sbprintf+0x60>
 8019004:	2501      	movs	r5, #1
 8019006:	426d      	negs	r5, r5
 8019008:	466b      	mov	r3, sp
 801900a:	899a      	ldrh	r2, [r3, #12]
 801900c:	2340      	movs	r3, #64	; 0x40
 801900e:	421a      	tst	r2, r3
 8019010:	d002      	beq.n	8019018 <__sbprintf+0x70>
 8019012:	89a2      	ldrh	r2, [r4, #12]
 8019014:	4313      	orrs	r3, r2
 8019016:	81a3      	strh	r3, [r4, #12]
 8019018:	9816      	ldr	r0, [sp, #88]	; 0x58
 801901a:	f7fe fcbc 	bl	8017996 <__retarget_lock_close_recursive>
 801901e:	0028      	movs	r0, r5
 8019020:	4b02      	ldr	r3, [pc, #8]	; (801902c <__sbprintf+0x84>)
 8019022:	449d      	add	sp, r3
 8019024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019026:	46c0      	nop			; (mov r8, r8)
 8019028:	fffffb94 	.word	0xfffffb94
 801902c:	0000046c 	.word	0x0000046c

08019030 <__swsetup_r>:
 8019030:	4b30      	ldr	r3, [pc, #192]	; (80190f4 <__swsetup_r+0xc4>)
 8019032:	b570      	push	{r4, r5, r6, lr}
 8019034:	0005      	movs	r5, r0
 8019036:	6818      	ldr	r0, [r3, #0]
 8019038:	000c      	movs	r4, r1
 801903a:	2800      	cmp	r0, #0
 801903c:	d004      	beq.n	8019048 <__swsetup_r+0x18>
 801903e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019040:	2b00      	cmp	r3, #0
 8019042:	d101      	bne.n	8019048 <__swsetup_r+0x18>
 8019044:	f000 f96e 	bl	8019324 <__sinit>
 8019048:	230c      	movs	r3, #12
 801904a:	5ee2      	ldrsh	r2, [r4, r3]
 801904c:	b293      	uxth	r3, r2
 801904e:	0711      	lsls	r1, r2, #28
 8019050:	d423      	bmi.n	801909a <__swsetup_r+0x6a>
 8019052:	06d9      	lsls	r1, r3, #27
 8019054:	d407      	bmi.n	8019066 <__swsetup_r+0x36>
 8019056:	2309      	movs	r3, #9
 8019058:	2001      	movs	r0, #1
 801905a:	602b      	str	r3, [r5, #0]
 801905c:	3337      	adds	r3, #55	; 0x37
 801905e:	4313      	orrs	r3, r2
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	4240      	negs	r0, r0
 8019064:	bd70      	pop	{r4, r5, r6, pc}
 8019066:	075b      	lsls	r3, r3, #29
 8019068:	d513      	bpl.n	8019092 <__swsetup_r+0x62>
 801906a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801906c:	2900      	cmp	r1, #0
 801906e:	d008      	beq.n	8019082 <__swsetup_r+0x52>
 8019070:	0023      	movs	r3, r4
 8019072:	3340      	adds	r3, #64	; 0x40
 8019074:	4299      	cmp	r1, r3
 8019076:	d002      	beq.n	801907e <__swsetup_r+0x4e>
 8019078:	0028      	movs	r0, r5
 801907a:	f7fe f859 	bl	8017130 <_free_r>
 801907e:	2300      	movs	r3, #0
 8019080:	6323      	str	r3, [r4, #48]	; 0x30
 8019082:	2224      	movs	r2, #36	; 0x24
 8019084:	89a3      	ldrh	r3, [r4, #12]
 8019086:	4393      	bics	r3, r2
 8019088:	81a3      	strh	r3, [r4, #12]
 801908a:	2300      	movs	r3, #0
 801908c:	6063      	str	r3, [r4, #4]
 801908e:	6923      	ldr	r3, [r4, #16]
 8019090:	6023      	str	r3, [r4, #0]
 8019092:	2308      	movs	r3, #8
 8019094:	89a2      	ldrh	r2, [r4, #12]
 8019096:	4313      	orrs	r3, r2
 8019098:	81a3      	strh	r3, [r4, #12]
 801909a:	6923      	ldr	r3, [r4, #16]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d10b      	bne.n	80190b8 <__swsetup_r+0x88>
 80190a0:	21a0      	movs	r1, #160	; 0xa0
 80190a2:	2280      	movs	r2, #128	; 0x80
 80190a4:	89a3      	ldrh	r3, [r4, #12]
 80190a6:	0089      	lsls	r1, r1, #2
 80190a8:	0092      	lsls	r2, r2, #2
 80190aa:	400b      	ands	r3, r1
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d003      	beq.n	80190b8 <__swsetup_r+0x88>
 80190b0:	0021      	movs	r1, r4
 80190b2:	0028      	movs	r0, r5
 80190b4:	f000 fb84 	bl	80197c0 <__smakebuf_r>
 80190b8:	220c      	movs	r2, #12
 80190ba:	5ea3      	ldrsh	r3, [r4, r2]
 80190bc:	2001      	movs	r0, #1
 80190be:	001a      	movs	r2, r3
 80190c0:	b299      	uxth	r1, r3
 80190c2:	4002      	ands	r2, r0
 80190c4:	4203      	tst	r3, r0
 80190c6:	d00f      	beq.n	80190e8 <__swsetup_r+0xb8>
 80190c8:	2200      	movs	r2, #0
 80190ca:	60a2      	str	r2, [r4, #8]
 80190cc:	6962      	ldr	r2, [r4, #20]
 80190ce:	4252      	negs	r2, r2
 80190d0:	61a2      	str	r2, [r4, #24]
 80190d2:	2000      	movs	r0, #0
 80190d4:	6922      	ldr	r2, [r4, #16]
 80190d6:	4282      	cmp	r2, r0
 80190d8:	d1c4      	bne.n	8019064 <__swsetup_r+0x34>
 80190da:	060a      	lsls	r2, r1, #24
 80190dc:	d5c2      	bpl.n	8019064 <__swsetup_r+0x34>
 80190de:	2240      	movs	r2, #64	; 0x40
 80190e0:	4313      	orrs	r3, r2
 80190e2:	81a3      	strh	r3, [r4, #12]
 80190e4:	3801      	subs	r0, #1
 80190e6:	e7bd      	b.n	8019064 <__swsetup_r+0x34>
 80190e8:	0788      	lsls	r0, r1, #30
 80190ea:	d400      	bmi.n	80190ee <__swsetup_r+0xbe>
 80190ec:	6962      	ldr	r2, [r4, #20]
 80190ee:	60a2      	str	r2, [r4, #8]
 80190f0:	e7ef      	b.n	80190d2 <__swsetup_r+0xa2>
 80190f2:	46c0      	nop			; (mov r8, r8)
 80190f4:	200000d0 	.word	0x200000d0

080190f8 <abort>:
 80190f8:	2006      	movs	r0, #6
 80190fa:	b510      	push	{r4, lr}
 80190fc:	f000 fbd0 	bl	80198a0 <raise>
 8019100:	2001      	movs	r0, #1
 8019102:	f000 fdc5 	bl	8019c90 <_exit>
	...

08019108 <__sflush_r>:
 8019108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801910a:	230c      	movs	r3, #12
 801910c:	5eca      	ldrsh	r2, [r1, r3]
 801910e:	000c      	movs	r4, r1
 8019110:	0005      	movs	r5, r0
 8019112:	b291      	uxth	r1, r2
 8019114:	0713      	lsls	r3, r2, #28
 8019116:	d467      	bmi.n	80191e8 <__sflush_r+0xe0>
 8019118:	2380      	movs	r3, #128	; 0x80
 801911a:	011b      	lsls	r3, r3, #4
 801911c:	4313      	orrs	r3, r2
 801911e:	6862      	ldr	r2, [r4, #4]
 8019120:	81a3      	strh	r3, [r4, #12]
 8019122:	2a00      	cmp	r2, #0
 8019124:	dc04      	bgt.n	8019130 <__sflush_r+0x28>
 8019126:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019128:	2a00      	cmp	r2, #0
 801912a:	dc01      	bgt.n	8019130 <__sflush_r+0x28>
 801912c:	2000      	movs	r0, #0
 801912e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019130:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8019132:	2f00      	cmp	r7, #0
 8019134:	d0fa      	beq.n	801912c <__sflush_r+0x24>
 8019136:	2200      	movs	r2, #0
 8019138:	2180      	movs	r1, #128	; 0x80
 801913a:	682e      	ldr	r6, [r5, #0]
 801913c:	602a      	str	r2, [r5, #0]
 801913e:	001a      	movs	r2, r3
 8019140:	0149      	lsls	r1, r1, #5
 8019142:	400a      	ands	r2, r1
 8019144:	420b      	tst	r3, r1
 8019146:	d038      	beq.n	80191ba <__sflush_r+0xb2>
 8019148:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801914a:	89a3      	ldrh	r3, [r4, #12]
 801914c:	075b      	lsls	r3, r3, #29
 801914e:	d506      	bpl.n	801915e <__sflush_r+0x56>
 8019150:	6863      	ldr	r3, [r4, #4]
 8019152:	1ac0      	subs	r0, r0, r3
 8019154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019156:	2b00      	cmp	r3, #0
 8019158:	d001      	beq.n	801915e <__sflush_r+0x56>
 801915a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801915c:	1ac0      	subs	r0, r0, r3
 801915e:	0002      	movs	r2, r0
 8019160:	69e1      	ldr	r1, [r4, #28]
 8019162:	2300      	movs	r3, #0
 8019164:	0028      	movs	r0, r5
 8019166:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8019168:	47b8      	blx	r7
 801916a:	89a1      	ldrh	r1, [r4, #12]
 801916c:	1c43      	adds	r3, r0, #1
 801916e:	d106      	bne.n	801917e <__sflush_r+0x76>
 8019170:	682b      	ldr	r3, [r5, #0]
 8019172:	2b1d      	cmp	r3, #29
 8019174:	d835      	bhi.n	80191e2 <__sflush_r+0xda>
 8019176:	4a2e      	ldr	r2, [pc, #184]	; (8019230 <__sflush_r+0x128>)
 8019178:	40da      	lsrs	r2, r3
 801917a:	07d3      	lsls	r3, r2, #31
 801917c:	d531      	bpl.n	80191e2 <__sflush_r+0xda>
 801917e:	2200      	movs	r2, #0
 8019180:	4b2c      	ldr	r3, [pc, #176]	; (8019234 <__sflush_r+0x12c>)
 8019182:	6062      	str	r2, [r4, #4]
 8019184:	400b      	ands	r3, r1
 8019186:	6922      	ldr	r2, [r4, #16]
 8019188:	b21b      	sxth	r3, r3
 801918a:	81a3      	strh	r3, [r4, #12]
 801918c:	6022      	str	r2, [r4, #0]
 801918e:	04db      	lsls	r3, r3, #19
 8019190:	d505      	bpl.n	801919e <__sflush_r+0x96>
 8019192:	1c43      	adds	r3, r0, #1
 8019194:	d102      	bne.n	801919c <__sflush_r+0x94>
 8019196:	682b      	ldr	r3, [r5, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d100      	bne.n	801919e <__sflush_r+0x96>
 801919c:	6520      	str	r0, [r4, #80]	; 0x50
 801919e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80191a0:	602e      	str	r6, [r5, #0]
 80191a2:	2900      	cmp	r1, #0
 80191a4:	d0c2      	beq.n	801912c <__sflush_r+0x24>
 80191a6:	0023      	movs	r3, r4
 80191a8:	3340      	adds	r3, #64	; 0x40
 80191aa:	4299      	cmp	r1, r3
 80191ac:	d002      	beq.n	80191b4 <__sflush_r+0xac>
 80191ae:	0028      	movs	r0, r5
 80191b0:	f7fd ffbe 	bl	8017130 <_free_r>
 80191b4:	2000      	movs	r0, #0
 80191b6:	6320      	str	r0, [r4, #48]	; 0x30
 80191b8:	e7b9      	b.n	801912e <__sflush_r+0x26>
 80191ba:	2301      	movs	r3, #1
 80191bc:	0028      	movs	r0, r5
 80191be:	69e1      	ldr	r1, [r4, #28]
 80191c0:	47b8      	blx	r7
 80191c2:	1c43      	adds	r3, r0, #1
 80191c4:	d1c1      	bne.n	801914a <__sflush_r+0x42>
 80191c6:	682b      	ldr	r3, [r5, #0]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d0be      	beq.n	801914a <__sflush_r+0x42>
 80191cc:	2b1d      	cmp	r3, #29
 80191ce:	d001      	beq.n	80191d4 <__sflush_r+0xcc>
 80191d0:	2b16      	cmp	r3, #22
 80191d2:	d101      	bne.n	80191d8 <__sflush_r+0xd0>
 80191d4:	602e      	str	r6, [r5, #0]
 80191d6:	e7a9      	b.n	801912c <__sflush_r+0x24>
 80191d8:	2340      	movs	r3, #64	; 0x40
 80191da:	89a2      	ldrh	r2, [r4, #12]
 80191dc:	4313      	orrs	r3, r2
 80191de:	81a3      	strh	r3, [r4, #12]
 80191e0:	e7a5      	b.n	801912e <__sflush_r+0x26>
 80191e2:	2340      	movs	r3, #64	; 0x40
 80191e4:	430b      	orrs	r3, r1
 80191e6:	e7fa      	b.n	80191de <__sflush_r+0xd6>
 80191e8:	6927      	ldr	r7, [r4, #16]
 80191ea:	2f00      	cmp	r7, #0
 80191ec:	d09e      	beq.n	801912c <__sflush_r+0x24>
 80191ee:	6823      	ldr	r3, [r4, #0]
 80191f0:	6027      	str	r7, [r4, #0]
 80191f2:	1bdb      	subs	r3, r3, r7
 80191f4:	9301      	str	r3, [sp, #4]
 80191f6:	2300      	movs	r3, #0
 80191f8:	078a      	lsls	r2, r1, #30
 80191fa:	d100      	bne.n	80191fe <__sflush_r+0xf6>
 80191fc:	6963      	ldr	r3, [r4, #20]
 80191fe:	60a3      	str	r3, [r4, #8]
 8019200:	9b01      	ldr	r3, [sp, #4]
 8019202:	2b00      	cmp	r3, #0
 8019204:	dc00      	bgt.n	8019208 <__sflush_r+0x100>
 8019206:	e791      	b.n	801912c <__sflush_r+0x24>
 8019208:	003a      	movs	r2, r7
 801920a:	0028      	movs	r0, r5
 801920c:	9b01      	ldr	r3, [sp, #4]
 801920e:	69e1      	ldr	r1, [r4, #28]
 8019210:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019212:	47b0      	blx	r6
 8019214:	2800      	cmp	r0, #0
 8019216:	dc06      	bgt.n	8019226 <__sflush_r+0x11e>
 8019218:	2340      	movs	r3, #64	; 0x40
 801921a:	2001      	movs	r0, #1
 801921c:	89a2      	ldrh	r2, [r4, #12]
 801921e:	4240      	negs	r0, r0
 8019220:	4313      	orrs	r3, r2
 8019222:	81a3      	strh	r3, [r4, #12]
 8019224:	e783      	b.n	801912e <__sflush_r+0x26>
 8019226:	9b01      	ldr	r3, [sp, #4]
 8019228:	183f      	adds	r7, r7, r0
 801922a:	1a1b      	subs	r3, r3, r0
 801922c:	9301      	str	r3, [sp, #4]
 801922e:	e7e7      	b.n	8019200 <__sflush_r+0xf8>
 8019230:	20400001 	.word	0x20400001
 8019234:	fffff7ff 	.word	0xfffff7ff

08019238 <_fflush_r>:
 8019238:	b570      	push	{r4, r5, r6, lr}
 801923a:	0005      	movs	r5, r0
 801923c:	000c      	movs	r4, r1
 801923e:	2800      	cmp	r0, #0
 8019240:	d004      	beq.n	801924c <_fflush_r+0x14>
 8019242:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019244:	2b00      	cmp	r3, #0
 8019246:	d101      	bne.n	801924c <_fflush_r+0x14>
 8019248:	f000 f86c 	bl	8019324 <__sinit>
 801924c:	220c      	movs	r2, #12
 801924e:	5ea3      	ldrsh	r3, [r4, r2]
 8019250:	1e1e      	subs	r6, r3, #0
 8019252:	d015      	beq.n	8019280 <_fflush_r+0x48>
 8019254:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019256:	07d2      	lsls	r2, r2, #31
 8019258:	d404      	bmi.n	8019264 <_fflush_r+0x2c>
 801925a:	059b      	lsls	r3, r3, #22
 801925c:	d402      	bmi.n	8019264 <_fflush_r+0x2c>
 801925e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019260:	f7fe fb9a 	bl	8017998 <__retarget_lock_acquire_recursive>
 8019264:	0021      	movs	r1, r4
 8019266:	0028      	movs	r0, r5
 8019268:	f7ff ff4e 	bl	8019108 <__sflush_r>
 801926c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801926e:	0006      	movs	r6, r0
 8019270:	07db      	lsls	r3, r3, #31
 8019272:	d405      	bmi.n	8019280 <_fflush_r+0x48>
 8019274:	89a3      	ldrh	r3, [r4, #12]
 8019276:	059b      	lsls	r3, r3, #22
 8019278:	d402      	bmi.n	8019280 <_fflush_r+0x48>
 801927a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801927c:	f7fe fb8d 	bl	801799a <__retarget_lock_release_recursive>
 8019280:	0030      	movs	r0, r6
 8019282:	bd70      	pop	{r4, r5, r6, pc}

08019284 <std>:
 8019284:	2300      	movs	r3, #0
 8019286:	b510      	push	{r4, lr}
 8019288:	0004      	movs	r4, r0
 801928a:	6003      	str	r3, [r0, #0]
 801928c:	6043      	str	r3, [r0, #4]
 801928e:	6083      	str	r3, [r0, #8]
 8019290:	8181      	strh	r1, [r0, #12]
 8019292:	6643      	str	r3, [r0, #100]	; 0x64
 8019294:	0019      	movs	r1, r3
 8019296:	81c2      	strh	r2, [r0, #14]
 8019298:	6103      	str	r3, [r0, #16]
 801929a:	2208      	movs	r2, #8
 801929c:	6143      	str	r3, [r0, #20]
 801929e:	6183      	str	r3, [r0, #24]
 80192a0:	305c      	adds	r0, #92	; 0x5c
 80192a2:	f7fa fc7a 	bl	8013b9a <memset>
 80192a6:	0020      	movs	r0, r4
 80192a8:	4b06      	ldr	r3, [pc, #24]	; (80192c4 <std+0x40>)
 80192aa:	61e4      	str	r4, [r4, #28]
 80192ac:	6223      	str	r3, [r4, #32]
 80192ae:	4b06      	ldr	r3, [pc, #24]	; (80192c8 <std+0x44>)
 80192b0:	3058      	adds	r0, #88	; 0x58
 80192b2:	6263      	str	r3, [r4, #36]	; 0x24
 80192b4:	4b05      	ldr	r3, [pc, #20]	; (80192cc <std+0x48>)
 80192b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80192b8:	4b05      	ldr	r3, [pc, #20]	; (80192d0 <std+0x4c>)
 80192ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192bc:	f7fe fb6a 	bl	8017994 <__retarget_lock_init_recursive>
 80192c0:	bd10      	pop	{r4, pc}
 80192c2:	46c0      	nop			; (mov r8, r8)
 80192c4:	080198e1 	.word	0x080198e1
 80192c8:	08019909 	.word	0x08019909
 80192cc:	08019941 	.word	0x08019941
 80192d0:	0801996d 	.word	0x0801996d

080192d4 <_cleanup_r>:
 80192d4:	b510      	push	{r4, lr}
 80192d6:	4902      	ldr	r1, [pc, #8]	; (80192e0 <_cleanup_r+0xc>)
 80192d8:	f000 fa1e 	bl	8019718 <_fwalk_reent>
 80192dc:	bd10      	pop	{r4, pc}
 80192de:	46c0      	nop			; (mov r8, r8)
 80192e0:	08019a99 	.word	0x08019a99

080192e4 <__sfp_lock_acquire>:
 80192e4:	b510      	push	{r4, lr}
 80192e6:	4802      	ldr	r0, [pc, #8]	; (80192f0 <__sfp_lock_acquire+0xc>)
 80192e8:	f7fe fb56 	bl	8017998 <__retarget_lock_acquire_recursive>
 80192ec:	bd10      	pop	{r4, pc}
 80192ee:	46c0      	nop			; (mov r8, r8)
 80192f0:	20006de6 	.word	0x20006de6

080192f4 <__sfp_lock_release>:
 80192f4:	b510      	push	{r4, lr}
 80192f6:	4802      	ldr	r0, [pc, #8]	; (8019300 <__sfp_lock_release+0xc>)
 80192f8:	f7fe fb4f 	bl	801799a <__retarget_lock_release_recursive>
 80192fc:	bd10      	pop	{r4, pc}
 80192fe:	46c0      	nop			; (mov r8, r8)
 8019300:	20006de6 	.word	0x20006de6

08019304 <__sinit_lock_acquire>:
 8019304:	b510      	push	{r4, lr}
 8019306:	4802      	ldr	r0, [pc, #8]	; (8019310 <__sinit_lock_acquire+0xc>)
 8019308:	f7fe fb46 	bl	8017998 <__retarget_lock_acquire_recursive>
 801930c:	bd10      	pop	{r4, pc}
 801930e:	46c0      	nop			; (mov r8, r8)
 8019310:	20006de7 	.word	0x20006de7

08019314 <__sinit_lock_release>:
 8019314:	b510      	push	{r4, lr}
 8019316:	4802      	ldr	r0, [pc, #8]	; (8019320 <__sinit_lock_release+0xc>)
 8019318:	f7fe fb3f 	bl	801799a <__retarget_lock_release_recursive>
 801931c:	bd10      	pop	{r4, pc}
 801931e:	46c0      	nop			; (mov r8, r8)
 8019320:	20006de7 	.word	0x20006de7

08019324 <__sinit>:
 8019324:	b510      	push	{r4, lr}
 8019326:	0004      	movs	r4, r0
 8019328:	f7ff ffec 	bl	8019304 <__sinit_lock_acquire>
 801932c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801932e:	2a00      	cmp	r2, #0
 8019330:	d002      	beq.n	8019338 <__sinit+0x14>
 8019332:	f7ff ffef 	bl	8019314 <__sinit_lock_release>
 8019336:	bd10      	pop	{r4, pc}
 8019338:	4b0e      	ldr	r3, [pc, #56]	; (8019374 <__sinit+0x50>)
 801933a:	2103      	movs	r1, #3
 801933c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801933e:	23b8      	movs	r3, #184	; 0xb8
 8019340:	009b      	lsls	r3, r3, #2
 8019342:	50e2      	str	r2, [r4, r3]
 8019344:	3304      	adds	r3, #4
 8019346:	50e1      	str	r1, [r4, r3]
 8019348:	3308      	adds	r3, #8
 801934a:	18e1      	adds	r1, r4, r3
 801934c:	3b04      	subs	r3, #4
 801934e:	50e1      	str	r1, [r4, r3]
 8019350:	6860      	ldr	r0, [r4, #4]
 8019352:	2104      	movs	r1, #4
 8019354:	f7ff ff96 	bl	8019284 <std>
 8019358:	2201      	movs	r2, #1
 801935a:	2109      	movs	r1, #9
 801935c:	68a0      	ldr	r0, [r4, #8]
 801935e:	f7ff ff91 	bl	8019284 <std>
 8019362:	2202      	movs	r2, #2
 8019364:	2112      	movs	r1, #18
 8019366:	68e0      	ldr	r0, [r4, #12]
 8019368:	f7ff ff8c 	bl	8019284 <std>
 801936c:	2301      	movs	r3, #1
 801936e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019370:	e7df      	b.n	8019332 <__sinit+0xe>
 8019372:	46c0      	nop			; (mov r8, r8)
 8019374:	080192d5 	.word	0x080192d5

08019378 <__fputwc>:
 8019378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801937a:	b085      	sub	sp, #20
 801937c:	000e      	movs	r6, r1
 801937e:	0015      	movs	r5, r2
 8019380:	9001      	str	r0, [sp, #4]
 8019382:	f7fe fafb 	bl	801797c <__locale_mb_cur_max>
 8019386:	0004      	movs	r4, r0
 8019388:	2801      	cmp	r0, #1
 801938a:	d119      	bne.n	80193c0 <__fputwc+0x48>
 801938c:	1e73      	subs	r3, r6, #1
 801938e:	2bfe      	cmp	r3, #254	; 0xfe
 8019390:	d816      	bhi.n	80193c0 <__fputwc+0x48>
 8019392:	ab02      	add	r3, sp, #8
 8019394:	711e      	strb	r6, [r3, #4]
 8019396:	2700      	movs	r7, #0
 8019398:	42a7      	cmp	r7, r4
 801939a:	d020      	beq.n	80193de <__fputwc+0x66>
 801939c:	ab03      	add	r3, sp, #12
 801939e:	5dd9      	ldrb	r1, [r3, r7]
 80193a0:	68ab      	ldr	r3, [r5, #8]
 80193a2:	3b01      	subs	r3, #1
 80193a4:	60ab      	str	r3, [r5, #8]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	da04      	bge.n	80193b4 <__fputwc+0x3c>
 80193aa:	69aa      	ldr	r2, [r5, #24]
 80193ac:	4293      	cmp	r3, r2
 80193ae:	db19      	blt.n	80193e4 <__fputwc+0x6c>
 80193b0:	290a      	cmp	r1, #10
 80193b2:	d017      	beq.n	80193e4 <__fputwc+0x6c>
 80193b4:	682b      	ldr	r3, [r5, #0]
 80193b6:	1c5a      	adds	r2, r3, #1
 80193b8:	602a      	str	r2, [r5, #0]
 80193ba:	7019      	strb	r1, [r3, #0]
 80193bc:	3701      	adds	r7, #1
 80193be:	e7eb      	b.n	8019398 <__fputwc+0x20>
 80193c0:	002b      	movs	r3, r5
 80193c2:	0032      	movs	r2, r6
 80193c4:	9801      	ldr	r0, [sp, #4]
 80193c6:	335c      	adds	r3, #92	; 0x5c
 80193c8:	a903      	add	r1, sp, #12
 80193ca:	f000 fb27 	bl	8019a1c <_wcrtomb_r>
 80193ce:	0004      	movs	r4, r0
 80193d0:	1c43      	adds	r3, r0, #1
 80193d2:	d1e0      	bne.n	8019396 <__fputwc+0x1e>
 80193d4:	2340      	movs	r3, #64	; 0x40
 80193d6:	0006      	movs	r6, r0
 80193d8:	89aa      	ldrh	r2, [r5, #12]
 80193da:	4313      	orrs	r3, r2
 80193dc:	81ab      	strh	r3, [r5, #12]
 80193de:	0030      	movs	r0, r6
 80193e0:	b005      	add	sp, #20
 80193e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193e4:	002a      	movs	r2, r5
 80193e6:	9801      	ldr	r0, [sp, #4]
 80193e8:	f000 fac6 	bl	8019978 <__swbuf_r>
 80193ec:	1c43      	adds	r3, r0, #1
 80193ee:	d1e5      	bne.n	80193bc <__fputwc+0x44>
 80193f0:	0006      	movs	r6, r0
 80193f2:	e7f4      	b.n	80193de <__fputwc+0x66>

080193f4 <_fputwc_r>:
 80193f4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80193f6:	b570      	push	{r4, r5, r6, lr}
 80193f8:	0005      	movs	r5, r0
 80193fa:	000e      	movs	r6, r1
 80193fc:	0014      	movs	r4, r2
 80193fe:	07db      	lsls	r3, r3, #31
 8019400:	d405      	bmi.n	801940e <_fputwc_r+0x1a>
 8019402:	8993      	ldrh	r3, [r2, #12]
 8019404:	059b      	lsls	r3, r3, #22
 8019406:	d402      	bmi.n	801940e <_fputwc_r+0x1a>
 8019408:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801940a:	f7fe fac5 	bl	8017998 <__retarget_lock_acquire_recursive>
 801940e:	230c      	movs	r3, #12
 8019410:	5ee2      	ldrsh	r2, [r4, r3]
 8019412:	2380      	movs	r3, #128	; 0x80
 8019414:	019b      	lsls	r3, r3, #6
 8019416:	421a      	tst	r2, r3
 8019418:	d104      	bne.n	8019424 <_fputwc_r+0x30>
 801941a:	431a      	orrs	r2, r3
 801941c:	81a2      	strh	r2, [r4, #12]
 801941e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019420:	4313      	orrs	r3, r2
 8019422:	6663      	str	r3, [r4, #100]	; 0x64
 8019424:	0028      	movs	r0, r5
 8019426:	0022      	movs	r2, r4
 8019428:	0031      	movs	r1, r6
 801942a:	f7ff ffa5 	bl	8019378 <__fputwc>
 801942e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019430:	0005      	movs	r5, r0
 8019432:	07db      	lsls	r3, r3, #31
 8019434:	d405      	bmi.n	8019442 <_fputwc_r+0x4e>
 8019436:	89a3      	ldrh	r3, [r4, #12]
 8019438:	059b      	lsls	r3, r3, #22
 801943a:	d402      	bmi.n	8019442 <_fputwc_r+0x4e>
 801943c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801943e:	f7fe faac 	bl	801799a <__retarget_lock_release_recursive>
 8019442:	0028      	movs	r0, r5
 8019444:	bd70      	pop	{r4, r5, r6, pc}
	...

08019448 <__sfvwrite_r>:
 8019448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801944a:	6893      	ldr	r3, [r2, #8]
 801944c:	b087      	sub	sp, #28
 801944e:	000c      	movs	r4, r1
 8019450:	0017      	movs	r7, r2
 8019452:	9003      	str	r0, [sp, #12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d102      	bne.n	801945e <__sfvwrite_r+0x16>
 8019458:	2000      	movs	r0, #0
 801945a:	b007      	add	sp, #28
 801945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801945e:	898b      	ldrh	r3, [r1, #12]
 8019460:	071b      	lsls	r3, r3, #28
 8019462:	d559      	bpl.n	8019518 <__sfvwrite_r+0xd0>
 8019464:	690b      	ldr	r3, [r1, #16]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d056      	beq.n	8019518 <__sfvwrite_r+0xd0>
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	2202      	movs	r2, #2
 801946e:	9302      	str	r3, [sp, #8]
 8019470:	89a3      	ldrh	r3, [r4, #12]
 8019472:	0018      	movs	r0, r3
 8019474:	4010      	ands	r0, r2
 8019476:	4213      	tst	r3, r2
 8019478:	d175      	bne.n	8019566 <__sfvwrite_r+0x11e>
 801947a:	2201      	movs	r2, #1
 801947c:	2101      	movs	r1, #1
 801947e:	401a      	ands	r2, r3
 8019480:	420b      	tst	r3, r1
 8019482:	d100      	bne.n	8019486 <__sfvwrite_r+0x3e>
 8019484:	e0ad      	b.n	80195e2 <__sfvwrite_r+0x19a>
 8019486:	0006      	movs	r6, r0
 8019488:	9001      	str	r0, [sp, #4]
 801948a:	9004      	str	r0, [sp, #16]
 801948c:	9b04      	ldr	r3, [sp, #16]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d100      	bne.n	8019494 <__sfvwrite_r+0x4c>
 8019492:	e116      	b.n	80196c2 <__sfvwrite_r+0x27a>
 8019494:	2800      	cmp	r0, #0
 8019496:	d10c      	bne.n	80194b2 <__sfvwrite_r+0x6a>
 8019498:	001a      	movs	r2, r3
 801949a:	210a      	movs	r1, #10
 801949c:	0030      	movs	r0, r6
 801949e:	f7fe fa8f 	bl	80179c0 <memchr>
 80194a2:	9b04      	ldr	r3, [sp, #16]
 80194a4:	3301      	adds	r3, #1
 80194a6:	9301      	str	r3, [sp, #4]
 80194a8:	2800      	cmp	r0, #0
 80194aa:	d002      	beq.n	80194b2 <__sfvwrite_r+0x6a>
 80194ac:	3001      	adds	r0, #1
 80194ae:	1b83      	subs	r3, r0, r6
 80194b0:	9301      	str	r3, [sp, #4]
 80194b2:	9b01      	ldr	r3, [sp, #4]
 80194b4:	9a04      	ldr	r2, [sp, #16]
 80194b6:	9305      	str	r3, [sp, #20]
 80194b8:	4293      	cmp	r3, r2
 80194ba:	d900      	bls.n	80194be <__sfvwrite_r+0x76>
 80194bc:	9205      	str	r2, [sp, #20]
 80194be:	6820      	ldr	r0, [r4, #0]
 80194c0:	6922      	ldr	r2, [r4, #16]
 80194c2:	6963      	ldr	r3, [r4, #20]
 80194c4:	4290      	cmp	r0, r2
 80194c6:	d800      	bhi.n	80194ca <__sfvwrite_r+0x82>
 80194c8:	e104      	b.n	80196d4 <__sfvwrite_r+0x28c>
 80194ca:	68a2      	ldr	r2, [r4, #8]
 80194cc:	189d      	adds	r5, r3, r2
 80194ce:	9a05      	ldr	r2, [sp, #20]
 80194d0:	42aa      	cmp	r2, r5
 80194d2:	dc00      	bgt.n	80194d6 <__sfvwrite_r+0x8e>
 80194d4:	e0fe      	b.n	80196d4 <__sfvwrite_r+0x28c>
 80194d6:	0031      	movs	r1, r6
 80194d8:	002a      	movs	r2, r5
 80194da:	f7fe fa7c 	bl	80179d6 <memmove>
 80194de:	6823      	ldr	r3, [r4, #0]
 80194e0:	0021      	movs	r1, r4
 80194e2:	195b      	adds	r3, r3, r5
 80194e4:	9803      	ldr	r0, [sp, #12]
 80194e6:	6023      	str	r3, [r4, #0]
 80194e8:	f7ff fea6 	bl	8019238 <_fflush_r>
 80194ec:	2800      	cmp	r0, #0
 80194ee:	d173      	bne.n	80195d8 <__sfvwrite_r+0x190>
 80194f0:	9b01      	ldr	r3, [sp, #4]
 80194f2:	2001      	movs	r0, #1
 80194f4:	1b5b      	subs	r3, r3, r5
 80194f6:	9301      	str	r3, [sp, #4]
 80194f8:	d105      	bne.n	8019506 <__sfvwrite_r+0xbe>
 80194fa:	0021      	movs	r1, r4
 80194fc:	9803      	ldr	r0, [sp, #12]
 80194fe:	f7ff fe9b 	bl	8019238 <_fflush_r>
 8019502:	2800      	cmp	r0, #0
 8019504:	d168      	bne.n	80195d8 <__sfvwrite_r+0x190>
 8019506:	9b04      	ldr	r3, [sp, #16]
 8019508:	1976      	adds	r6, r6, r5
 801950a:	1b5b      	subs	r3, r3, r5
 801950c:	9304      	str	r3, [sp, #16]
 801950e:	68bb      	ldr	r3, [r7, #8]
 8019510:	1b5d      	subs	r5, r3, r5
 8019512:	60bd      	str	r5, [r7, #8]
 8019514:	d1ba      	bne.n	801948c <__sfvwrite_r+0x44>
 8019516:	e79f      	b.n	8019458 <__sfvwrite_r+0x10>
 8019518:	0021      	movs	r1, r4
 801951a:	9803      	ldr	r0, [sp, #12]
 801951c:	f7ff fd88 	bl	8019030 <__swsetup_r>
 8019520:	2800      	cmp	r0, #0
 8019522:	d0a2      	beq.n	801946a <__sfvwrite_r+0x22>
 8019524:	2001      	movs	r0, #1
 8019526:	4240      	negs	r0, r0
 8019528:	e797      	b.n	801945a <__sfvwrite_r+0x12>
 801952a:	9b02      	ldr	r3, [sp, #8]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	9301      	str	r3, [sp, #4]
 8019530:	9b02      	ldr	r3, [sp, #8]
 8019532:	685d      	ldr	r5, [r3, #4]
 8019534:	3308      	adds	r3, #8
 8019536:	9302      	str	r3, [sp, #8]
 8019538:	2d00      	cmp	r5, #0
 801953a:	d0f6      	beq.n	801952a <__sfvwrite_r+0xe2>
 801953c:	4a72      	ldr	r2, [pc, #456]	; (8019708 <__sfvwrite_r+0x2c0>)
 801953e:	002b      	movs	r3, r5
 8019540:	4295      	cmp	r5, r2
 8019542:	d900      	bls.n	8019546 <__sfvwrite_r+0xfe>
 8019544:	0013      	movs	r3, r2
 8019546:	9a01      	ldr	r2, [sp, #4]
 8019548:	69e1      	ldr	r1, [r4, #28]
 801954a:	9803      	ldr	r0, [sp, #12]
 801954c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801954e:	47b0      	blx	r6
 8019550:	2800      	cmp	r0, #0
 8019552:	dd41      	ble.n	80195d8 <__sfvwrite_r+0x190>
 8019554:	9b01      	ldr	r3, [sp, #4]
 8019556:	1a2d      	subs	r5, r5, r0
 8019558:	181b      	adds	r3, r3, r0
 801955a:	9301      	str	r3, [sp, #4]
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	1a18      	subs	r0, r3, r0
 8019560:	60b8      	str	r0, [r7, #8]
 8019562:	d1e9      	bne.n	8019538 <__sfvwrite_r+0xf0>
 8019564:	e778      	b.n	8019458 <__sfvwrite_r+0x10>
 8019566:	2300      	movs	r3, #0
 8019568:	001d      	movs	r5, r3
 801956a:	9301      	str	r3, [sp, #4]
 801956c:	e7e4      	b.n	8019538 <__sfvwrite_r+0xf0>
 801956e:	9b02      	ldr	r3, [sp, #8]
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	9304      	str	r3, [sp, #16]
 8019574:	9b02      	ldr	r3, [sp, #8]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	9301      	str	r3, [sp, #4]
 801957a:	9b02      	ldr	r3, [sp, #8]
 801957c:	3308      	adds	r3, #8
 801957e:	9302      	str	r3, [sp, #8]
 8019580:	9b01      	ldr	r3, [sp, #4]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d0f3      	beq.n	801956e <__sfvwrite_r+0x126>
 8019586:	2380      	movs	r3, #128	; 0x80
 8019588:	89a2      	ldrh	r2, [r4, #12]
 801958a:	009b      	lsls	r3, r3, #2
 801958c:	6820      	ldr	r0, [r4, #0]
 801958e:	68a5      	ldr	r5, [r4, #8]
 8019590:	421a      	tst	r2, r3
 8019592:	d064      	beq.n	801965e <__sfvwrite_r+0x216>
 8019594:	9b01      	ldr	r3, [sp, #4]
 8019596:	429d      	cmp	r5, r3
 8019598:	d838      	bhi.n	801960c <__sfvwrite_r+0x1c4>
 801959a:	2390      	movs	r3, #144	; 0x90
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	421a      	tst	r2, r3
 80195a0:	d034      	beq.n	801960c <__sfvwrite_r+0x1c4>
 80195a2:	6921      	ldr	r1, [r4, #16]
 80195a4:	1a43      	subs	r3, r0, r1
 80195a6:	2003      	movs	r0, #3
 80195a8:	9305      	str	r3, [sp, #20]
 80195aa:	6963      	ldr	r3, [r4, #20]
 80195ac:	4358      	muls	r0, r3
 80195ae:	9b05      	ldr	r3, [sp, #20]
 80195b0:	0fc6      	lsrs	r6, r0, #31
 80195b2:	1836      	adds	r6, r6, r0
 80195b4:	9801      	ldr	r0, [sp, #4]
 80195b6:	3301      	adds	r3, #1
 80195b8:	181b      	adds	r3, r3, r0
 80195ba:	1076      	asrs	r6, r6, #1
 80195bc:	42b3      	cmp	r3, r6
 80195be:	d900      	bls.n	80195c2 <__sfvwrite_r+0x17a>
 80195c0:	001e      	movs	r6, r3
 80195c2:	0553      	lsls	r3, r2, #21
 80195c4:	d53c      	bpl.n	8019640 <__sfvwrite_r+0x1f8>
 80195c6:	0031      	movs	r1, r6
 80195c8:	9803      	ldr	r0, [sp, #12]
 80195ca:	f7fa f8bd 	bl	8013748 <_malloc_r>
 80195ce:	1e05      	subs	r5, r0, #0
 80195d0:	d10a      	bne.n	80195e8 <__sfvwrite_r+0x1a0>
 80195d2:	230c      	movs	r3, #12
 80195d4:	9a03      	ldr	r2, [sp, #12]
 80195d6:	6013      	str	r3, [r2, #0]
 80195d8:	2340      	movs	r3, #64	; 0x40
 80195da:	89a2      	ldrh	r2, [r4, #12]
 80195dc:	4313      	orrs	r3, r2
 80195de:	81a3      	strh	r3, [r4, #12]
 80195e0:	e7a0      	b.n	8019524 <__sfvwrite_r+0xdc>
 80195e2:	9204      	str	r2, [sp, #16]
 80195e4:	9201      	str	r2, [sp, #4]
 80195e6:	e7cb      	b.n	8019580 <__sfvwrite_r+0x138>
 80195e8:	9a05      	ldr	r2, [sp, #20]
 80195ea:	6921      	ldr	r1, [r4, #16]
 80195ec:	f7fa facc 	bl	8013b88 <memcpy>
 80195f0:	89a3      	ldrh	r3, [r4, #12]
 80195f2:	4a46      	ldr	r2, [pc, #280]	; (801970c <__sfvwrite_r+0x2c4>)
 80195f4:	401a      	ands	r2, r3
 80195f6:	2380      	movs	r3, #128	; 0x80
 80195f8:	4313      	orrs	r3, r2
 80195fa:	81a3      	strh	r3, [r4, #12]
 80195fc:	9b05      	ldr	r3, [sp, #20]
 80195fe:	6125      	str	r5, [r4, #16]
 8019600:	18ed      	adds	r5, r5, r3
 8019602:	6025      	str	r5, [r4, #0]
 8019604:	6166      	str	r6, [r4, #20]
 8019606:	9d01      	ldr	r5, [sp, #4]
 8019608:	1af6      	subs	r6, r6, r3
 801960a:	60a6      	str	r6, [r4, #8]
 801960c:	9e01      	ldr	r6, [sp, #4]
 801960e:	42b5      	cmp	r5, r6
 8019610:	d900      	bls.n	8019614 <__sfvwrite_r+0x1cc>
 8019612:	0035      	movs	r5, r6
 8019614:	002a      	movs	r2, r5
 8019616:	9904      	ldr	r1, [sp, #16]
 8019618:	6820      	ldr	r0, [r4, #0]
 801961a:	f7fe f9dc 	bl	80179d6 <memmove>
 801961e:	68a3      	ldr	r3, [r4, #8]
 8019620:	1b5b      	subs	r3, r3, r5
 8019622:	60a3      	str	r3, [r4, #8]
 8019624:	6823      	ldr	r3, [r4, #0]
 8019626:	195d      	adds	r5, r3, r5
 8019628:	6025      	str	r5, [r4, #0]
 801962a:	9b04      	ldr	r3, [sp, #16]
 801962c:	199b      	adds	r3, r3, r6
 801962e:	9304      	str	r3, [sp, #16]
 8019630:	9b01      	ldr	r3, [sp, #4]
 8019632:	1b9b      	subs	r3, r3, r6
 8019634:	9301      	str	r3, [sp, #4]
 8019636:	68bb      	ldr	r3, [r7, #8]
 8019638:	1b9e      	subs	r6, r3, r6
 801963a:	60be      	str	r6, [r7, #8]
 801963c:	d1a0      	bne.n	8019580 <__sfvwrite_r+0x138>
 801963e:	e70b      	b.n	8019458 <__sfvwrite_r+0x10>
 8019640:	0032      	movs	r2, r6
 8019642:	9803      	ldr	r0, [sp, #12]
 8019644:	f7fa fae6 	bl	8013c14 <_realloc_r>
 8019648:	1e05      	subs	r5, r0, #0
 801964a:	d1d7      	bne.n	80195fc <__sfvwrite_r+0x1b4>
 801964c:	6921      	ldr	r1, [r4, #16]
 801964e:	9803      	ldr	r0, [sp, #12]
 8019650:	f7fd fd6e 	bl	8017130 <_free_r>
 8019654:	2280      	movs	r2, #128	; 0x80
 8019656:	89a3      	ldrh	r3, [r4, #12]
 8019658:	4393      	bics	r3, r2
 801965a:	81a3      	strh	r3, [r4, #12]
 801965c:	e7b9      	b.n	80195d2 <__sfvwrite_r+0x18a>
 801965e:	6923      	ldr	r3, [r4, #16]
 8019660:	4283      	cmp	r3, r0
 8019662:	d303      	bcc.n	801966c <__sfvwrite_r+0x224>
 8019664:	6966      	ldr	r6, [r4, #20]
 8019666:	9b01      	ldr	r3, [sp, #4]
 8019668:	429e      	cmp	r6, r3
 801966a:	d917      	bls.n	801969c <__sfvwrite_r+0x254>
 801966c:	9b01      	ldr	r3, [sp, #4]
 801966e:	429d      	cmp	r5, r3
 8019670:	d900      	bls.n	8019674 <__sfvwrite_r+0x22c>
 8019672:	001d      	movs	r5, r3
 8019674:	002a      	movs	r2, r5
 8019676:	9904      	ldr	r1, [sp, #16]
 8019678:	f7fe f9ad 	bl	80179d6 <memmove>
 801967c:	68a3      	ldr	r3, [r4, #8]
 801967e:	6822      	ldr	r2, [r4, #0]
 8019680:	1b5b      	subs	r3, r3, r5
 8019682:	1952      	adds	r2, r2, r5
 8019684:	002e      	movs	r6, r5
 8019686:	60a3      	str	r3, [r4, #8]
 8019688:	6022      	str	r2, [r4, #0]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d1cd      	bne.n	801962a <__sfvwrite_r+0x1e2>
 801968e:	0021      	movs	r1, r4
 8019690:	9803      	ldr	r0, [sp, #12]
 8019692:	f7ff fdd1 	bl	8019238 <_fflush_r>
 8019696:	2800      	cmp	r0, #0
 8019698:	d0c7      	beq.n	801962a <__sfvwrite_r+0x1e2>
 801969a:	e79d      	b.n	80195d8 <__sfvwrite_r+0x190>
 801969c:	9a01      	ldr	r2, [sp, #4]
 801969e:	4b1c      	ldr	r3, [pc, #112]	; (8019710 <__sfvwrite_r+0x2c8>)
 80196a0:	0010      	movs	r0, r2
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d900      	bls.n	80196a8 <__sfvwrite_r+0x260>
 80196a6:	481b      	ldr	r0, [pc, #108]	; (8019714 <__sfvwrite_r+0x2cc>)
 80196a8:	0031      	movs	r1, r6
 80196aa:	f7e6 fddb 	bl	8000264 <__divsi3>
 80196ae:	0033      	movs	r3, r6
 80196b0:	9a04      	ldr	r2, [sp, #16]
 80196b2:	4343      	muls	r3, r0
 80196b4:	69e1      	ldr	r1, [r4, #28]
 80196b6:	9803      	ldr	r0, [sp, #12]
 80196b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80196ba:	47a8      	blx	r5
 80196bc:	1e06      	subs	r6, r0, #0
 80196be:	dcb4      	bgt.n	801962a <__sfvwrite_r+0x1e2>
 80196c0:	e78a      	b.n	80195d8 <__sfvwrite_r+0x190>
 80196c2:	9b02      	ldr	r3, [sp, #8]
 80196c4:	2000      	movs	r0, #0
 80196c6:	681e      	ldr	r6, [r3, #0]
 80196c8:	685b      	ldr	r3, [r3, #4]
 80196ca:	9304      	str	r3, [sp, #16]
 80196cc:	9b02      	ldr	r3, [sp, #8]
 80196ce:	3308      	adds	r3, #8
 80196d0:	9302      	str	r3, [sp, #8]
 80196d2:	e6db      	b.n	801948c <__sfvwrite_r+0x44>
 80196d4:	9a05      	ldr	r2, [sp, #20]
 80196d6:	4293      	cmp	r3, r2
 80196d8:	dc08      	bgt.n	80196ec <__sfvwrite_r+0x2a4>
 80196da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80196dc:	0032      	movs	r2, r6
 80196de:	69e1      	ldr	r1, [r4, #28]
 80196e0:	9803      	ldr	r0, [sp, #12]
 80196e2:	47a8      	blx	r5
 80196e4:	1e05      	subs	r5, r0, #0
 80196e6:	dd00      	ble.n	80196ea <__sfvwrite_r+0x2a2>
 80196e8:	e702      	b.n	80194f0 <__sfvwrite_r+0xa8>
 80196ea:	e775      	b.n	80195d8 <__sfvwrite_r+0x190>
 80196ec:	9a05      	ldr	r2, [sp, #20]
 80196ee:	0031      	movs	r1, r6
 80196f0:	f7fe f971 	bl	80179d6 <memmove>
 80196f4:	9a05      	ldr	r2, [sp, #20]
 80196f6:	68a3      	ldr	r3, [r4, #8]
 80196f8:	0015      	movs	r5, r2
 80196fa:	1a9b      	subs	r3, r3, r2
 80196fc:	60a3      	str	r3, [r4, #8]
 80196fe:	6823      	ldr	r3, [r4, #0]
 8019700:	189b      	adds	r3, r3, r2
 8019702:	6023      	str	r3, [r4, #0]
 8019704:	e6f4      	b.n	80194f0 <__sfvwrite_r+0xa8>
 8019706:	46c0      	nop			; (mov r8, r8)
 8019708:	7ffffc00 	.word	0x7ffffc00
 801970c:	fffffb7f 	.word	0xfffffb7f
 8019710:	7ffffffe 	.word	0x7ffffffe
 8019714:	7fffffff 	.word	0x7fffffff

08019718 <_fwalk_reent>:
 8019718:	23b8      	movs	r3, #184	; 0xb8
 801971a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801971c:	0006      	movs	r6, r0
 801971e:	2700      	movs	r7, #0
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	9101      	str	r1, [sp, #4]
 8019724:	18c4      	adds	r4, r0, r3
 8019726:	6863      	ldr	r3, [r4, #4]
 8019728:	68a5      	ldr	r5, [r4, #8]
 801972a:	9300      	str	r3, [sp, #0]
 801972c:	9b00      	ldr	r3, [sp, #0]
 801972e:	3b01      	subs	r3, #1
 8019730:	9300      	str	r3, [sp, #0]
 8019732:	d504      	bpl.n	801973e <_fwalk_reent+0x26>
 8019734:	6824      	ldr	r4, [r4, #0]
 8019736:	2c00      	cmp	r4, #0
 8019738:	d1f5      	bne.n	8019726 <_fwalk_reent+0xe>
 801973a:	0038      	movs	r0, r7
 801973c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801973e:	89ab      	ldrh	r3, [r5, #12]
 8019740:	2b01      	cmp	r3, #1
 8019742:	d908      	bls.n	8019756 <_fwalk_reent+0x3e>
 8019744:	220e      	movs	r2, #14
 8019746:	5eab      	ldrsh	r3, [r5, r2]
 8019748:	3301      	adds	r3, #1
 801974a:	d004      	beq.n	8019756 <_fwalk_reent+0x3e>
 801974c:	0029      	movs	r1, r5
 801974e:	0030      	movs	r0, r6
 8019750:	9b01      	ldr	r3, [sp, #4]
 8019752:	4798      	blx	r3
 8019754:	4307      	orrs	r7, r0
 8019756:	3568      	adds	r5, #104	; 0x68
 8019758:	e7e8      	b.n	801972c <_fwalk_reent+0x14>
	...

0801975c <__swhatbuf_r>:
 801975c:	b570      	push	{r4, r5, r6, lr}
 801975e:	000e      	movs	r6, r1
 8019760:	001d      	movs	r5, r3
 8019762:	230e      	movs	r3, #14
 8019764:	5ec9      	ldrsh	r1, [r1, r3]
 8019766:	0014      	movs	r4, r2
 8019768:	b096      	sub	sp, #88	; 0x58
 801976a:	2900      	cmp	r1, #0
 801976c:	da0c      	bge.n	8019788 <__swhatbuf_r+0x2c>
 801976e:	230c      	movs	r3, #12
 8019770:	5ef1      	ldrsh	r1, [r6, r3]
 8019772:	2280      	movs	r2, #128	; 0x80
 8019774:	2300      	movs	r3, #0
 8019776:	0008      	movs	r0, r1
 8019778:	602b      	str	r3, [r5, #0]
 801977a:	4010      	ands	r0, r2
 801977c:	4211      	tst	r1, r2
 801977e:	d117      	bne.n	80197b0 <__swhatbuf_r+0x54>
 8019780:	2380      	movs	r3, #128	; 0x80
 8019782:	00db      	lsls	r3, r3, #3
 8019784:	6023      	str	r3, [r4, #0]
 8019786:	e016      	b.n	80197b6 <__swhatbuf_r+0x5a>
 8019788:	466a      	mov	r2, sp
 801978a:	f000 f9e5 	bl	8019b58 <_fstat_r>
 801978e:	2800      	cmp	r0, #0
 8019790:	dbed      	blt.n	801976e <__swhatbuf_r+0x12>
 8019792:	23f0      	movs	r3, #240	; 0xf0
 8019794:	9901      	ldr	r1, [sp, #4]
 8019796:	021b      	lsls	r3, r3, #8
 8019798:	4019      	ands	r1, r3
 801979a:	4b08      	ldr	r3, [pc, #32]	; (80197bc <__swhatbuf_r+0x60>)
 801979c:	2080      	movs	r0, #128	; 0x80
 801979e:	18c9      	adds	r1, r1, r3
 80197a0:	424b      	negs	r3, r1
 80197a2:	4159      	adcs	r1, r3
 80197a4:	2380      	movs	r3, #128	; 0x80
 80197a6:	00db      	lsls	r3, r3, #3
 80197a8:	6029      	str	r1, [r5, #0]
 80197aa:	0100      	lsls	r0, r0, #4
 80197ac:	6023      	str	r3, [r4, #0]
 80197ae:	e002      	b.n	80197b6 <__swhatbuf_r+0x5a>
 80197b0:	2240      	movs	r2, #64	; 0x40
 80197b2:	0018      	movs	r0, r3
 80197b4:	6022      	str	r2, [r4, #0]
 80197b6:	b016      	add	sp, #88	; 0x58
 80197b8:	bd70      	pop	{r4, r5, r6, pc}
 80197ba:	46c0      	nop			; (mov r8, r8)
 80197bc:	ffffe000 	.word	0xffffe000

080197c0 <__smakebuf_r>:
 80197c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80197c2:	2602      	movs	r6, #2
 80197c4:	898b      	ldrh	r3, [r1, #12]
 80197c6:	0005      	movs	r5, r0
 80197c8:	000c      	movs	r4, r1
 80197ca:	4233      	tst	r3, r6
 80197cc:	d006      	beq.n	80197dc <__smakebuf_r+0x1c>
 80197ce:	0023      	movs	r3, r4
 80197d0:	3343      	adds	r3, #67	; 0x43
 80197d2:	6023      	str	r3, [r4, #0]
 80197d4:	6123      	str	r3, [r4, #16]
 80197d6:	2301      	movs	r3, #1
 80197d8:	6163      	str	r3, [r4, #20]
 80197da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80197dc:	466a      	mov	r2, sp
 80197de:	ab01      	add	r3, sp, #4
 80197e0:	f7ff ffbc 	bl	801975c <__swhatbuf_r>
 80197e4:	9900      	ldr	r1, [sp, #0]
 80197e6:	0007      	movs	r7, r0
 80197e8:	0028      	movs	r0, r5
 80197ea:	f7f9 ffad 	bl	8013748 <_malloc_r>
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d108      	bne.n	8019804 <__smakebuf_r+0x44>
 80197f2:	220c      	movs	r2, #12
 80197f4:	5ea3      	ldrsh	r3, [r4, r2]
 80197f6:	059a      	lsls	r2, r3, #22
 80197f8:	d4ef      	bmi.n	80197da <__smakebuf_r+0x1a>
 80197fa:	2203      	movs	r2, #3
 80197fc:	4393      	bics	r3, r2
 80197fe:	431e      	orrs	r6, r3
 8019800:	81a6      	strh	r6, [r4, #12]
 8019802:	e7e4      	b.n	80197ce <__smakebuf_r+0xe>
 8019804:	4b0f      	ldr	r3, [pc, #60]	; (8019844 <__smakebuf_r+0x84>)
 8019806:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019808:	2380      	movs	r3, #128	; 0x80
 801980a:	89a2      	ldrh	r2, [r4, #12]
 801980c:	6020      	str	r0, [r4, #0]
 801980e:	4313      	orrs	r3, r2
 8019810:	81a3      	strh	r3, [r4, #12]
 8019812:	9b00      	ldr	r3, [sp, #0]
 8019814:	6120      	str	r0, [r4, #16]
 8019816:	6163      	str	r3, [r4, #20]
 8019818:	9b01      	ldr	r3, [sp, #4]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d00d      	beq.n	801983a <__smakebuf_r+0x7a>
 801981e:	0028      	movs	r0, r5
 8019820:	230e      	movs	r3, #14
 8019822:	5ee1      	ldrsh	r1, [r4, r3]
 8019824:	f000 f9aa 	bl	8019b7c <_isatty_r>
 8019828:	2800      	cmp	r0, #0
 801982a:	d006      	beq.n	801983a <__smakebuf_r+0x7a>
 801982c:	2203      	movs	r2, #3
 801982e:	89a3      	ldrh	r3, [r4, #12]
 8019830:	4393      	bics	r3, r2
 8019832:	001a      	movs	r2, r3
 8019834:	2301      	movs	r3, #1
 8019836:	4313      	orrs	r3, r2
 8019838:	81a3      	strh	r3, [r4, #12]
 801983a:	89a0      	ldrh	r0, [r4, #12]
 801983c:	4307      	orrs	r7, r0
 801983e:	81a7      	strh	r7, [r4, #12]
 8019840:	e7cb      	b.n	80197da <__smakebuf_r+0x1a>
 8019842:	46c0      	nop			; (mov r8, r8)
 8019844:	080192d5 	.word	0x080192d5

08019848 <_raise_r>:
 8019848:	b570      	push	{r4, r5, r6, lr}
 801984a:	0004      	movs	r4, r0
 801984c:	000d      	movs	r5, r1
 801984e:	291f      	cmp	r1, #31
 8019850:	d904      	bls.n	801985c <_raise_r+0x14>
 8019852:	2316      	movs	r3, #22
 8019854:	6003      	str	r3, [r0, #0]
 8019856:	2001      	movs	r0, #1
 8019858:	4240      	negs	r0, r0
 801985a:	bd70      	pop	{r4, r5, r6, pc}
 801985c:	23b7      	movs	r3, #183	; 0xb7
 801985e:	009b      	lsls	r3, r3, #2
 8019860:	58c3      	ldr	r3, [r0, r3]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d004      	beq.n	8019870 <_raise_r+0x28>
 8019866:	008a      	lsls	r2, r1, #2
 8019868:	189b      	adds	r3, r3, r2
 801986a:	681a      	ldr	r2, [r3, #0]
 801986c:	2a00      	cmp	r2, #0
 801986e:	d108      	bne.n	8019882 <_raise_r+0x3a>
 8019870:	0020      	movs	r0, r4
 8019872:	f000 f831 	bl	80198d8 <_getpid_r>
 8019876:	002a      	movs	r2, r5
 8019878:	0001      	movs	r1, r0
 801987a:	0020      	movs	r0, r4
 801987c:	f000 f81a 	bl	80198b4 <_kill_r>
 8019880:	e7eb      	b.n	801985a <_raise_r+0x12>
 8019882:	2000      	movs	r0, #0
 8019884:	2a01      	cmp	r2, #1
 8019886:	d0e8      	beq.n	801985a <_raise_r+0x12>
 8019888:	1c51      	adds	r1, r2, #1
 801988a:	d103      	bne.n	8019894 <_raise_r+0x4c>
 801988c:	2316      	movs	r3, #22
 801988e:	3001      	adds	r0, #1
 8019890:	6023      	str	r3, [r4, #0]
 8019892:	e7e2      	b.n	801985a <_raise_r+0x12>
 8019894:	2400      	movs	r4, #0
 8019896:	0028      	movs	r0, r5
 8019898:	601c      	str	r4, [r3, #0]
 801989a:	4790      	blx	r2
 801989c:	0020      	movs	r0, r4
 801989e:	e7dc      	b.n	801985a <_raise_r+0x12>

080198a0 <raise>:
 80198a0:	b510      	push	{r4, lr}
 80198a2:	4b03      	ldr	r3, [pc, #12]	; (80198b0 <raise+0x10>)
 80198a4:	0001      	movs	r1, r0
 80198a6:	6818      	ldr	r0, [r3, #0]
 80198a8:	f7ff ffce 	bl	8019848 <_raise_r>
 80198ac:	bd10      	pop	{r4, pc}
 80198ae:	46c0      	nop			; (mov r8, r8)
 80198b0:	200000d0 	.word	0x200000d0

080198b4 <_kill_r>:
 80198b4:	2300      	movs	r3, #0
 80198b6:	b570      	push	{r4, r5, r6, lr}
 80198b8:	4d06      	ldr	r5, [pc, #24]	; (80198d4 <_kill_r+0x20>)
 80198ba:	0004      	movs	r4, r0
 80198bc:	0008      	movs	r0, r1
 80198be:	0011      	movs	r1, r2
 80198c0:	602b      	str	r3, [r5, #0]
 80198c2:	f000 f9b5 	bl	8019c30 <_kill>
 80198c6:	1c43      	adds	r3, r0, #1
 80198c8:	d103      	bne.n	80198d2 <_kill_r+0x1e>
 80198ca:	682b      	ldr	r3, [r5, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d000      	beq.n	80198d2 <_kill_r+0x1e>
 80198d0:	6023      	str	r3, [r4, #0]
 80198d2:	bd70      	pop	{r4, r5, r6, pc}
 80198d4:	20006de8 	.word	0x20006de8

080198d8 <_getpid_r>:
 80198d8:	b510      	push	{r4, lr}
 80198da:	f000 f999 	bl	8019c10 <_getpid>
 80198de:	bd10      	pop	{r4, pc}

080198e0 <__sread>:
 80198e0:	b570      	push	{r4, r5, r6, lr}
 80198e2:	000c      	movs	r4, r1
 80198e4:	250e      	movs	r5, #14
 80198e6:	5f49      	ldrsh	r1, [r1, r5]
 80198e8:	f000 f96e 	bl	8019bc8 <_read_r>
 80198ec:	2800      	cmp	r0, #0
 80198ee:	db03      	blt.n	80198f8 <__sread+0x18>
 80198f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80198f2:	181b      	adds	r3, r3, r0
 80198f4:	6523      	str	r3, [r4, #80]	; 0x50
 80198f6:	bd70      	pop	{r4, r5, r6, pc}
 80198f8:	89a3      	ldrh	r3, [r4, #12]
 80198fa:	4a02      	ldr	r2, [pc, #8]	; (8019904 <__sread+0x24>)
 80198fc:	4013      	ands	r3, r2
 80198fe:	81a3      	strh	r3, [r4, #12]
 8019900:	e7f9      	b.n	80198f6 <__sread+0x16>
 8019902:	46c0      	nop			; (mov r8, r8)
 8019904:	ffffefff 	.word	0xffffefff

08019908 <__swrite>:
 8019908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801990a:	001f      	movs	r7, r3
 801990c:	898b      	ldrh	r3, [r1, #12]
 801990e:	0005      	movs	r5, r0
 8019910:	000c      	movs	r4, r1
 8019912:	0016      	movs	r6, r2
 8019914:	05db      	lsls	r3, r3, #23
 8019916:	d505      	bpl.n	8019924 <__swrite+0x1c>
 8019918:	230e      	movs	r3, #14
 801991a:	5ec9      	ldrsh	r1, [r1, r3]
 801991c:	2200      	movs	r2, #0
 801991e:	2302      	movs	r3, #2
 8019920:	f000 f93e 	bl	8019ba0 <_lseek_r>
 8019924:	89a3      	ldrh	r3, [r4, #12]
 8019926:	4a05      	ldr	r2, [pc, #20]	; (801993c <__swrite+0x34>)
 8019928:	0028      	movs	r0, r5
 801992a:	4013      	ands	r3, r2
 801992c:	81a3      	strh	r3, [r4, #12]
 801992e:	0032      	movs	r2, r6
 8019930:	230e      	movs	r3, #14
 8019932:	5ee1      	ldrsh	r1, [r4, r3]
 8019934:	003b      	movs	r3, r7
 8019936:	f000 f889 	bl	8019a4c <_write_r>
 801993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801993c:	ffffefff 	.word	0xffffefff

08019940 <__sseek>:
 8019940:	b570      	push	{r4, r5, r6, lr}
 8019942:	000c      	movs	r4, r1
 8019944:	250e      	movs	r5, #14
 8019946:	5f49      	ldrsh	r1, [r1, r5]
 8019948:	f000 f92a 	bl	8019ba0 <_lseek_r>
 801994c:	89a3      	ldrh	r3, [r4, #12]
 801994e:	1c42      	adds	r2, r0, #1
 8019950:	d103      	bne.n	801995a <__sseek+0x1a>
 8019952:	4a05      	ldr	r2, [pc, #20]	; (8019968 <__sseek+0x28>)
 8019954:	4013      	ands	r3, r2
 8019956:	81a3      	strh	r3, [r4, #12]
 8019958:	bd70      	pop	{r4, r5, r6, pc}
 801995a:	2280      	movs	r2, #128	; 0x80
 801995c:	0152      	lsls	r2, r2, #5
 801995e:	4313      	orrs	r3, r2
 8019960:	81a3      	strh	r3, [r4, #12]
 8019962:	6520      	str	r0, [r4, #80]	; 0x50
 8019964:	e7f8      	b.n	8019958 <__sseek+0x18>
 8019966:	46c0      	nop			; (mov r8, r8)
 8019968:	ffffefff 	.word	0xffffefff

0801996c <__sclose>:
 801996c:	b510      	push	{r4, lr}
 801996e:	230e      	movs	r3, #14
 8019970:	5ec9      	ldrsh	r1, [r1, r3]
 8019972:	f000 f87f 	bl	8019a74 <_close_r>
 8019976:	bd10      	pop	{r4, pc}

08019978 <__swbuf_r>:
 8019978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801997a:	0006      	movs	r6, r0
 801997c:	000d      	movs	r5, r1
 801997e:	0014      	movs	r4, r2
 8019980:	2800      	cmp	r0, #0
 8019982:	d004      	beq.n	801998e <__swbuf_r+0x16>
 8019984:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019986:	2b00      	cmp	r3, #0
 8019988:	d101      	bne.n	801998e <__swbuf_r+0x16>
 801998a:	f7ff fccb 	bl	8019324 <__sinit>
 801998e:	69a3      	ldr	r3, [r4, #24]
 8019990:	60a3      	str	r3, [r4, #8]
 8019992:	89a3      	ldrh	r3, [r4, #12]
 8019994:	071b      	lsls	r3, r3, #28
 8019996:	d52e      	bpl.n	80199f6 <__swbuf_r+0x7e>
 8019998:	6923      	ldr	r3, [r4, #16]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d02b      	beq.n	80199f6 <__swbuf_r+0x7e>
 801999e:	230c      	movs	r3, #12
 80199a0:	5ee2      	ldrsh	r2, [r4, r3]
 80199a2:	2380      	movs	r3, #128	; 0x80
 80199a4:	019b      	lsls	r3, r3, #6
 80199a6:	b2ef      	uxtb	r7, r5
 80199a8:	b2ed      	uxtb	r5, r5
 80199aa:	421a      	tst	r2, r3
 80199ac:	d02c      	beq.n	8019a08 <__swbuf_r+0x90>
 80199ae:	6823      	ldr	r3, [r4, #0]
 80199b0:	6922      	ldr	r2, [r4, #16]
 80199b2:	1a98      	subs	r0, r3, r2
 80199b4:	6963      	ldr	r3, [r4, #20]
 80199b6:	4283      	cmp	r3, r0
 80199b8:	dc05      	bgt.n	80199c6 <__swbuf_r+0x4e>
 80199ba:	0021      	movs	r1, r4
 80199bc:	0030      	movs	r0, r6
 80199be:	f7ff fc3b 	bl	8019238 <_fflush_r>
 80199c2:	2800      	cmp	r0, #0
 80199c4:	d11d      	bne.n	8019a02 <__swbuf_r+0x8a>
 80199c6:	68a3      	ldr	r3, [r4, #8]
 80199c8:	3001      	adds	r0, #1
 80199ca:	3b01      	subs	r3, #1
 80199cc:	60a3      	str	r3, [r4, #8]
 80199ce:	6823      	ldr	r3, [r4, #0]
 80199d0:	1c5a      	adds	r2, r3, #1
 80199d2:	6022      	str	r2, [r4, #0]
 80199d4:	701f      	strb	r7, [r3, #0]
 80199d6:	6963      	ldr	r3, [r4, #20]
 80199d8:	4283      	cmp	r3, r0
 80199da:	d004      	beq.n	80199e6 <__swbuf_r+0x6e>
 80199dc:	89a3      	ldrh	r3, [r4, #12]
 80199de:	07db      	lsls	r3, r3, #31
 80199e0:	d507      	bpl.n	80199f2 <__swbuf_r+0x7a>
 80199e2:	2d0a      	cmp	r5, #10
 80199e4:	d105      	bne.n	80199f2 <__swbuf_r+0x7a>
 80199e6:	0021      	movs	r1, r4
 80199e8:	0030      	movs	r0, r6
 80199ea:	f7ff fc25 	bl	8019238 <_fflush_r>
 80199ee:	2800      	cmp	r0, #0
 80199f0:	d107      	bne.n	8019a02 <__swbuf_r+0x8a>
 80199f2:	0028      	movs	r0, r5
 80199f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199f6:	0021      	movs	r1, r4
 80199f8:	0030      	movs	r0, r6
 80199fa:	f7ff fb19 	bl	8019030 <__swsetup_r>
 80199fe:	2800      	cmp	r0, #0
 8019a00:	d0cd      	beq.n	801999e <__swbuf_r+0x26>
 8019a02:	2501      	movs	r5, #1
 8019a04:	426d      	negs	r5, r5
 8019a06:	e7f4      	b.n	80199f2 <__swbuf_r+0x7a>
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	81a3      	strh	r3, [r4, #12]
 8019a0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a0e:	4b02      	ldr	r3, [pc, #8]	; (8019a18 <__swbuf_r+0xa0>)
 8019a10:	4013      	ands	r3, r2
 8019a12:	6663      	str	r3, [r4, #100]	; 0x64
 8019a14:	e7cb      	b.n	80199ae <__swbuf_r+0x36>
 8019a16:	46c0      	nop			; (mov r8, r8)
 8019a18:	ffffdfff 	.word	0xffffdfff

08019a1c <_wcrtomb_r>:
 8019a1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019a1e:	001d      	movs	r5, r3
 8019a20:	4b09      	ldr	r3, [pc, #36]	; (8019a48 <_wcrtomb_r+0x2c>)
 8019a22:	0004      	movs	r4, r0
 8019a24:	33e0      	adds	r3, #224	; 0xe0
 8019a26:	681e      	ldr	r6, [r3, #0]
 8019a28:	002b      	movs	r3, r5
 8019a2a:	2900      	cmp	r1, #0
 8019a2c:	d101      	bne.n	8019a32 <_wcrtomb_r+0x16>
 8019a2e:	000a      	movs	r2, r1
 8019a30:	a901      	add	r1, sp, #4
 8019a32:	0020      	movs	r0, r4
 8019a34:	47b0      	blx	r6
 8019a36:	1c43      	adds	r3, r0, #1
 8019a38:	d103      	bne.n	8019a42 <_wcrtomb_r+0x26>
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	602b      	str	r3, [r5, #0]
 8019a3e:	338a      	adds	r3, #138	; 0x8a
 8019a40:	6023      	str	r3, [r4, #0]
 8019a42:	b004      	add	sp, #16
 8019a44:	bd70      	pop	{r4, r5, r6, pc}
 8019a46:	46c0      	nop			; (mov r8, r8)
 8019a48:	20000918 	.word	0x20000918

08019a4c <_write_r>:
 8019a4c:	b570      	push	{r4, r5, r6, lr}
 8019a4e:	0004      	movs	r4, r0
 8019a50:	0008      	movs	r0, r1
 8019a52:	0011      	movs	r1, r2
 8019a54:	001a      	movs	r2, r3
 8019a56:	2300      	movs	r3, #0
 8019a58:	4d05      	ldr	r5, [pc, #20]	; (8019a70 <_write_r+0x24>)
 8019a5a:	602b      	str	r3, [r5, #0]
 8019a5c:	f000 f910 	bl	8019c80 <_write>
 8019a60:	1c43      	adds	r3, r0, #1
 8019a62:	d103      	bne.n	8019a6c <_write_r+0x20>
 8019a64:	682b      	ldr	r3, [r5, #0]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d000      	beq.n	8019a6c <_write_r+0x20>
 8019a6a:	6023      	str	r3, [r4, #0]
 8019a6c:	bd70      	pop	{r4, r5, r6, pc}
 8019a6e:	46c0      	nop			; (mov r8, r8)
 8019a70:	20006de8 	.word	0x20006de8

08019a74 <_close_r>:
 8019a74:	2300      	movs	r3, #0
 8019a76:	b570      	push	{r4, r5, r6, lr}
 8019a78:	4d06      	ldr	r5, [pc, #24]	; (8019a94 <_close_r+0x20>)
 8019a7a:	0004      	movs	r4, r0
 8019a7c:	0008      	movs	r0, r1
 8019a7e:	602b      	str	r3, [r5, #0]
 8019a80:	f000 f8b6 	bl	8019bf0 <_close>
 8019a84:	1c43      	adds	r3, r0, #1
 8019a86:	d103      	bne.n	8019a90 <_close_r+0x1c>
 8019a88:	682b      	ldr	r3, [r5, #0]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d000      	beq.n	8019a90 <_close_r+0x1c>
 8019a8e:	6023      	str	r3, [r4, #0]
 8019a90:	bd70      	pop	{r4, r5, r6, pc}
 8019a92:	46c0      	nop			; (mov r8, r8)
 8019a94:	20006de8 	.word	0x20006de8

08019a98 <_fclose_r>:
 8019a98:	b570      	push	{r4, r5, r6, lr}
 8019a9a:	0005      	movs	r5, r0
 8019a9c:	1e0c      	subs	r4, r1, #0
 8019a9e:	d102      	bne.n	8019aa6 <_fclose_r+0xe>
 8019aa0:	2600      	movs	r6, #0
 8019aa2:	0030      	movs	r0, r6
 8019aa4:	bd70      	pop	{r4, r5, r6, pc}
 8019aa6:	2800      	cmp	r0, #0
 8019aa8:	d004      	beq.n	8019ab4 <_fclose_r+0x1c>
 8019aaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d101      	bne.n	8019ab4 <_fclose_r+0x1c>
 8019ab0:	f7ff fc38 	bl	8019324 <__sinit>
 8019ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ab6:	07db      	lsls	r3, r3, #31
 8019ab8:	d405      	bmi.n	8019ac6 <_fclose_r+0x2e>
 8019aba:	89a3      	ldrh	r3, [r4, #12]
 8019abc:	059b      	lsls	r3, r3, #22
 8019abe:	d402      	bmi.n	8019ac6 <_fclose_r+0x2e>
 8019ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ac2:	f7fd ff69 	bl	8017998 <__retarget_lock_acquire_recursive>
 8019ac6:	220c      	movs	r2, #12
 8019ac8:	5ea3      	ldrsh	r3, [r4, r2]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d109      	bne.n	8019ae2 <_fclose_r+0x4a>
 8019ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	0016      	movs	r6, r2
 8019ad4:	401e      	ands	r6, r3
 8019ad6:	421a      	tst	r2, r3
 8019ad8:	d1e2      	bne.n	8019aa0 <_fclose_r+0x8>
 8019ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019adc:	f7fd ff5d 	bl	801799a <__retarget_lock_release_recursive>
 8019ae0:	e7df      	b.n	8019aa2 <_fclose_r+0xa>
 8019ae2:	0021      	movs	r1, r4
 8019ae4:	0028      	movs	r0, r5
 8019ae6:	f7ff fb0f 	bl	8019108 <__sflush_r>
 8019aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019aec:	0006      	movs	r6, r0
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d006      	beq.n	8019b00 <_fclose_r+0x68>
 8019af2:	0028      	movs	r0, r5
 8019af4:	69e1      	ldr	r1, [r4, #28]
 8019af6:	4798      	blx	r3
 8019af8:	2800      	cmp	r0, #0
 8019afa:	da01      	bge.n	8019b00 <_fclose_r+0x68>
 8019afc:	2601      	movs	r6, #1
 8019afe:	4276      	negs	r6, r6
 8019b00:	89a3      	ldrh	r3, [r4, #12]
 8019b02:	061b      	lsls	r3, r3, #24
 8019b04:	d503      	bpl.n	8019b0e <_fclose_r+0x76>
 8019b06:	0028      	movs	r0, r5
 8019b08:	6921      	ldr	r1, [r4, #16]
 8019b0a:	f7fd fb11 	bl	8017130 <_free_r>
 8019b0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019b10:	2900      	cmp	r1, #0
 8019b12:	d008      	beq.n	8019b26 <_fclose_r+0x8e>
 8019b14:	0023      	movs	r3, r4
 8019b16:	3340      	adds	r3, #64	; 0x40
 8019b18:	4299      	cmp	r1, r3
 8019b1a:	d002      	beq.n	8019b22 <_fclose_r+0x8a>
 8019b1c:	0028      	movs	r0, r5
 8019b1e:	f7fd fb07 	bl	8017130 <_free_r>
 8019b22:	2300      	movs	r3, #0
 8019b24:	6323      	str	r3, [r4, #48]	; 0x30
 8019b26:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019b28:	2900      	cmp	r1, #0
 8019b2a:	d004      	beq.n	8019b36 <_fclose_r+0x9e>
 8019b2c:	0028      	movs	r0, r5
 8019b2e:	f7fd faff 	bl	8017130 <_free_r>
 8019b32:	2300      	movs	r3, #0
 8019b34:	6463      	str	r3, [r4, #68]	; 0x44
 8019b36:	f7ff fbd5 	bl	80192e4 <__sfp_lock_acquire>
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	81a3      	strh	r3, [r4, #12]
 8019b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b40:	07db      	lsls	r3, r3, #31
 8019b42:	d402      	bmi.n	8019b4a <_fclose_r+0xb2>
 8019b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b46:	f7fd ff28 	bl	801799a <__retarget_lock_release_recursive>
 8019b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b4c:	f7fd ff23 	bl	8017996 <__retarget_lock_close_recursive>
 8019b50:	f7ff fbd0 	bl	80192f4 <__sfp_lock_release>
 8019b54:	e7a5      	b.n	8019aa2 <_fclose_r+0xa>
	...

08019b58 <_fstat_r>:
 8019b58:	2300      	movs	r3, #0
 8019b5a:	b570      	push	{r4, r5, r6, lr}
 8019b5c:	4d06      	ldr	r5, [pc, #24]	; (8019b78 <_fstat_r+0x20>)
 8019b5e:	0004      	movs	r4, r0
 8019b60:	0008      	movs	r0, r1
 8019b62:	0011      	movs	r1, r2
 8019b64:	602b      	str	r3, [r5, #0]
 8019b66:	f000 f84b 	bl	8019c00 <_fstat>
 8019b6a:	1c43      	adds	r3, r0, #1
 8019b6c:	d103      	bne.n	8019b76 <_fstat_r+0x1e>
 8019b6e:	682b      	ldr	r3, [r5, #0]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d000      	beq.n	8019b76 <_fstat_r+0x1e>
 8019b74:	6023      	str	r3, [r4, #0]
 8019b76:	bd70      	pop	{r4, r5, r6, pc}
 8019b78:	20006de8 	.word	0x20006de8

08019b7c <_isatty_r>:
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	b570      	push	{r4, r5, r6, lr}
 8019b80:	4d06      	ldr	r5, [pc, #24]	; (8019b9c <_isatty_r+0x20>)
 8019b82:	0004      	movs	r4, r0
 8019b84:	0008      	movs	r0, r1
 8019b86:	602b      	str	r3, [r5, #0]
 8019b88:	f000 f84a 	bl	8019c20 <_isatty>
 8019b8c:	1c43      	adds	r3, r0, #1
 8019b8e:	d103      	bne.n	8019b98 <_isatty_r+0x1c>
 8019b90:	682b      	ldr	r3, [r5, #0]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d000      	beq.n	8019b98 <_isatty_r+0x1c>
 8019b96:	6023      	str	r3, [r4, #0]
 8019b98:	bd70      	pop	{r4, r5, r6, pc}
 8019b9a:	46c0      	nop			; (mov r8, r8)
 8019b9c:	20006de8 	.word	0x20006de8

08019ba0 <_lseek_r>:
 8019ba0:	b570      	push	{r4, r5, r6, lr}
 8019ba2:	0004      	movs	r4, r0
 8019ba4:	0008      	movs	r0, r1
 8019ba6:	0011      	movs	r1, r2
 8019ba8:	001a      	movs	r2, r3
 8019baa:	2300      	movs	r3, #0
 8019bac:	4d05      	ldr	r5, [pc, #20]	; (8019bc4 <_lseek_r+0x24>)
 8019bae:	602b      	str	r3, [r5, #0]
 8019bb0:	f000 f846 	bl	8019c40 <_lseek>
 8019bb4:	1c43      	adds	r3, r0, #1
 8019bb6:	d103      	bne.n	8019bc0 <_lseek_r+0x20>
 8019bb8:	682b      	ldr	r3, [r5, #0]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d000      	beq.n	8019bc0 <_lseek_r+0x20>
 8019bbe:	6023      	str	r3, [r4, #0]
 8019bc0:	bd70      	pop	{r4, r5, r6, pc}
 8019bc2:	46c0      	nop			; (mov r8, r8)
 8019bc4:	20006de8 	.word	0x20006de8

08019bc8 <_read_r>:
 8019bc8:	b570      	push	{r4, r5, r6, lr}
 8019bca:	0004      	movs	r4, r0
 8019bcc:	0008      	movs	r0, r1
 8019bce:	0011      	movs	r1, r2
 8019bd0:	001a      	movs	r2, r3
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	4d05      	ldr	r5, [pc, #20]	; (8019bec <_read_r+0x24>)
 8019bd6:	602b      	str	r3, [r5, #0]
 8019bd8:	f000 f83a 	bl	8019c50 <_read>
 8019bdc:	1c43      	adds	r3, r0, #1
 8019bde:	d103      	bne.n	8019be8 <_read_r+0x20>
 8019be0:	682b      	ldr	r3, [r5, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d000      	beq.n	8019be8 <_read_r+0x20>
 8019be6:	6023      	str	r3, [r4, #0]
 8019be8:	bd70      	pop	{r4, r5, r6, pc}
 8019bea:	46c0      	nop			; (mov r8, r8)
 8019bec:	20006de8 	.word	0x20006de8

08019bf0 <_close>:
 8019bf0:	2258      	movs	r2, #88	; 0x58
 8019bf2:	2001      	movs	r0, #1
 8019bf4:	4b01      	ldr	r3, [pc, #4]	; (8019bfc <_close+0xc>)
 8019bf6:	4240      	negs	r0, r0
 8019bf8:	601a      	str	r2, [r3, #0]
 8019bfa:	4770      	bx	lr
 8019bfc:	20006de8 	.word	0x20006de8

08019c00 <_fstat>:
 8019c00:	2258      	movs	r2, #88	; 0x58
 8019c02:	2001      	movs	r0, #1
 8019c04:	4b01      	ldr	r3, [pc, #4]	; (8019c0c <_fstat+0xc>)
 8019c06:	4240      	negs	r0, r0
 8019c08:	601a      	str	r2, [r3, #0]
 8019c0a:	4770      	bx	lr
 8019c0c:	20006de8 	.word	0x20006de8

08019c10 <_getpid>:
 8019c10:	2258      	movs	r2, #88	; 0x58
 8019c12:	2001      	movs	r0, #1
 8019c14:	4b01      	ldr	r3, [pc, #4]	; (8019c1c <_getpid+0xc>)
 8019c16:	4240      	negs	r0, r0
 8019c18:	601a      	str	r2, [r3, #0]
 8019c1a:	4770      	bx	lr
 8019c1c:	20006de8 	.word	0x20006de8

08019c20 <_isatty>:
 8019c20:	2258      	movs	r2, #88	; 0x58
 8019c22:	4b02      	ldr	r3, [pc, #8]	; (8019c2c <_isatty+0xc>)
 8019c24:	2000      	movs	r0, #0
 8019c26:	601a      	str	r2, [r3, #0]
 8019c28:	4770      	bx	lr
 8019c2a:	46c0      	nop			; (mov r8, r8)
 8019c2c:	20006de8 	.word	0x20006de8

08019c30 <_kill>:
 8019c30:	2258      	movs	r2, #88	; 0x58
 8019c32:	2001      	movs	r0, #1
 8019c34:	4b01      	ldr	r3, [pc, #4]	; (8019c3c <_kill+0xc>)
 8019c36:	4240      	negs	r0, r0
 8019c38:	601a      	str	r2, [r3, #0]
 8019c3a:	4770      	bx	lr
 8019c3c:	20006de8 	.word	0x20006de8

08019c40 <_lseek>:
 8019c40:	2258      	movs	r2, #88	; 0x58
 8019c42:	2001      	movs	r0, #1
 8019c44:	4b01      	ldr	r3, [pc, #4]	; (8019c4c <_lseek+0xc>)
 8019c46:	4240      	negs	r0, r0
 8019c48:	601a      	str	r2, [r3, #0]
 8019c4a:	4770      	bx	lr
 8019c4c:	20006de8 	.word	0x20006de8

08019c50 <_read>:
 8019c50:	2258      	movs	r2, #88	; 0x58
 8019c52:	2001      	movs	r0, #1
 8019c54:	4b01      	ldr	r3, [pc, #4]	; (8019c5c <_read+0xc>)
 8019c56:	4240      	negs	r0, r0
 8019c58:	601a      	str	r2, [r3, #0]
 8019c5a:	4770      	bx	lr
 8019c5c:	20006de8 	.word	0x20006de8

08019c60 <_sbrk>:
 8019c60:	4a05      	ldr	r2, [pc, #20]	; (8019c78 <_sbrk+0x18>)
 8019c62:	0003      	movs	r3, r0
 8019c64:	6811      	ldr	r1, [r2, #0]
 8019c66:	2900      	cmp	r1, #0
 8019c68:	d101      	bne.n	8019c6e <_sbrk+0xe>
 8019c6a:	4904      	ldr	r1, [pc, #16]	; (8019c7c <_sbrk+0x1c>)
 8019c6c:	6011      	str	r1, [r2, #0]
 8019c6e:	6810      	ldr	r0, [r2, #0]
 8019c70:	18c3      	adds	r3, r0, r3
 8019c72:	6013      	str	r3, [r2, #0]
 8019c74:	4770      	bx	lr
 8019c76:	46c0      	nop			; (mov r8, r8)
 8019c78:	20006dec 	.word	0x20006dec
 8019c7c:	20006df0 	.word	0x20006df0

08019c80 <_write>:
 8019c80:	2258      	movs	r2, #88	; 0x58
 8019c82:	2001      	movs	r0, #1
 8019c84:	4b01      	ldr	r3, [pc, #4]	; (8019c8c <_write+0xc>)
 8019c86:	4240      	negs	r0, r0
 8019c88:	601a      	str	r2, [r3, #0]
 8019c8a:	4770      	bx	lr
 8019c8c:	20006de8 	.word	0x20006de8

08019c90 <_exit>:
 8019c90:	e7fe      	b.n	8019c90 <_exit>
	...

08019c94 <_init>:
 8019c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c96:	46c0      	nop			; (mov r8, r8)
 8019c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c9a:	bc08      	pop	{r3}
 8019c9c:	469e      	mov	lr, r3
 8019c9e:	4770      	bx	lr

08019ca0 <_fini>:
 8019ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca2:	46c0      	nop			; (mov r8, r8)
 8019ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ca6:	bc08      	pop	{r3}
 8019ca8:	469e      	mov	lr, r3
 8019caa:	4770      	bx	lr
