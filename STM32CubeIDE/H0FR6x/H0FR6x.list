
H0FR6x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017760  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000358c  08017820  08017820  00027820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adac  0801adac  00030a80  2**0
                  CONTENTS
  4 .ARM          00000008  0801adac  0801adac  0002adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adb4  0801adb4  00030a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801adb4  0801adb4  0002adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801adbc  0801adbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801adc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a78  20000008  0801adc8  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006328  20000a80  0801b840  00030a80  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006da8  0801b840  00036da8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005622f  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000970d  00000000  00000000  00086cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ae80  00000000  00000000  000903e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ab0  00000000  00000000  000ab268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002f28  00000000  00000000  000acd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017b97  00000000  00000000  000afc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a6d5  00000000  00000000  000c77d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d1eac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006498  00000000  00000000  000d1f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a80 	.word	0x20000a80
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017804 	.word	0x08017804

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a84 	.word	0x20000a84
 8000100:	08017804 	.word	0x08017804

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fd9b 	bl	8001f88 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fcf3 	bl	8001e48 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd8d 	bl	8001f88 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd83 	bl	8001f88 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd15 	bl	8001ec0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd0b 	bl	8001ec0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fafd 	bl	8000ac0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa7f 	bl	80009d4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 faef 	bl	8000ac0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fae5 	bl	8000ac0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa8d 	bl	8000a24 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fa83 	bl	8000a24 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fdbb 	bl	800114c <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fbf1 	bl	8000dc4 <__aeabi_fsub>
 80005e2:	f000 fdb3 	bl	800114c <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fafd 	bl	8002c04 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ff92 	bl	800253c <__aeabi_dsub>
 8000618:	f002 faf4 	bl	8002c04 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fc71 	bl	8002f30 <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fc6c 	bl	8002f30 <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__aeabi_fdiv>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	4657      	mov	r7, sl
 80007b4:	464e      	mov	r6, r9
 80007b6:	4645      	mov	r5, r8
 80007b8:	46de      	mov	lr, fp
 80007ba:	0244      	lsls	r4, r0, #9
 80007bc:	b5e0      	push	{r5, r6, r7, lr}
 80007be:	0046      	lsls	r6, r0, #1
 80007c0:	4688      	mov	r8, r1
 80007c2:	0a64      	lsrs	r4, r4, #9
 80007c4:	0e36      	lsrs	r6, r6, #24
 80007c6:	0fc7      	lsrs	r7, r0, #31
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d063      	beq.n	8000894 <__aeabi_fdiv+0xe4>
 80007cc:	2eff      	cmp	r6, #255	; 0xff
 80007ce:	d024      	beq.n	800081a <__aeabi_fdiv+0x6a>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	04db      	lsls	r3, r3, #19
 80007d6:	431c      	orrs	r4, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	4699      	mov	r9, r3
 80007dc:	469b      	mov	fp, r3
 80007de:	3e7f      	subs	r6, #127	; 0x7f
 80007e0:	4643      	mov	r3, r8
 80007e2:	4642      	mov	r2, r8
 80007e4:	025d      	lsls	r5, r3, #9
 80007e6:	0fd2      	lsrs	r2, r2, #31
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	0a6d      	lsrs	r5, r5, #9
 80007ec:	0e1b      	lsrs	r3, r3, #24
 80007ee:	4690      	mov	r8, r2
 80007f0:	4692      	mov	sl, r2
 80007f2:	d065      	beq.n	80008c0 <__aeabi_fdiv+0x110>
 80007f4:	2bff      	cmp	r3, #255	; 0xff
 80007f6:	d055      	beq.n	80008a4 <__aeabi_fdiv+0xf4>
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	2100      	movs	r1, #0
 80007fc:	00ed      	lsls	r5, r5, #3
 80007fe:	04d2      	lsls	r2, r2, #19
 8000800:	3b7f      	subs	r3, #127	; 0x7f
 8000802:	4315      	orrs	r5, r2
 8000804:	1af6      	subs	r6, r6, r3
 8000806:	4643      	mov	r3, r8
 8000808:	464a      	mov	r2, r9
 800080a:	407b      	eors	r3, r7
 800080c:	2a0f      	cmp	r2, #15
 800080e:	d900      	bls.n	8000812 <__aeabi_fdiv+0x62>
 8000810:	e08d      	b.n	800092e <__aeabi_fdiv+0x17e>
 8000812:	486d      	ldr	r0, [pc, #436]	; (80009c8 <__aeabi_fdiv+0x218>)
 8000814:	0092      	lsls	r2, r2, #2
 8000816:	5882      	ldr	r2, [r0, r2]
 8000818:	4697      	mov	pc, r2
 800081a:	2c00      	cmp	r4, #0
 800081c:	d154      	bne.n	80008c8 <__aeabi_fdiv+0x118>
 800081e:	2308      	movs	r3, #8
 8000820:	4699      	mov	r9, r3
 8000822:	3b06      	subs	r3, #6
 8000824:	26ff      	movs	r6, #255	; 0xff
 8000826:	469b      	mov	fp, r3
 8000828:	e7da      	b.n	80007e0 <__aeabi_fdiv+0x30>
 800082a:	2500      	movs	r5, #0
 800082c:	4653      	mov	r3, sl
 800082e:	2902      	cmp	r1, #2
 8000830:	d01b      	beq.n	800086a <__aeabi_fdiv+0xba>
 8000832:	2903      	cmp	r1, #3
 8000834:	d100      	bne.n	8000838 <__aeabi_fdiv+0x88>
 8000836:	e0bf      	b.n	80009b8 <__aeabi_fdiv+0x208>
 8000838:	2901      	cmp	r1, #1
 800083a:	d028      	beq.n	800088e <__aeabi_fdiv+0xde>
 800083c:	0030      	movs	r0, r6
 800083e:	307f      	adds	r0, #127	; 0x7f
 8000840:	2800      	cmp	r0, #0
 8000842:	dd20      	ble.n	8000886 <__aeabi_fdiv+0xd6>
 8000844:	076a      	lsls	r2, r5, #29
 8000846:	d004      	beq.n	8000852 <__aeabi_fdiv+0xa2>
 8000848:	220f      	movs	r2, #15
 800084a:	402a      	ands	r2, r5
 800084c:	2a04      	cmp	r2, #4
 800084e:	d000      	beq.n	8000852 <__aeabi_fdiv+0xa2>
 8000850:	3504      	adds	r5, #4
 8000852:	012a      	lsls	r2, r5, #4
 8000854:	d503      	bpl.n	800085e <__aeabi_fdiv+0xae>
 8000856:	0030      	movs	r0, r6
 8000858:	4a5c      	ldr	r2, [pc, #368]	; (80009cc <__aeabi_fdiv+0x21c>)
 800085a:	3080      	adds	r0, #128	; 0x80
 800085c:	4015      	ands	r5, r2
 800085e:	28fe      	cmp	r0, #254	; 0xfe
 8000860:	dc03      	bgt.n	800086a <__aeabi_fdiv+0xba>
 8000862:	01ac      	lsls	r4, r5, #6
 8000864:	0a64      	lsrs	r4, r4, #9
 8000866:	b2c2      	uxtb	r2, r0
 8000868:	e001      	b.n	800086e <__aeabi_fdiv+0xbe>
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	2400      	movs	r4, #0
 800086e:	0264      	lsls	r4, r4, #9
 8000870:	05d2      	lsls	r2, r2, #23
 8000872:	0a60      	lsrs	r0, r4, #9
 8000874:	07db      	lsls	r3, r3, #31
 8000876:	4310      	orrs	r0, r2
 8000878:	4318      	orrs	r0, r3
 800087a:	bc3c      	pop	{r2, r3, r4, r5}
 800087c:	4690      	mov	r8, r2
 800087e:	4699      	mov	r9, r3
 8000880:	46a2      	mov	sl, r4
 8000882:	46ab      	mov	fp, r5
 8000884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000886:	2201      	movs	r2, #1
 8000888:	1a10      	subs	r0, r2, r0
 800088a:	281b      	cmp	r0, #27
 800088c:	dd7c      	ble.n	8000988 <__aeabi_fdiv+0x1d8>
 800088e:	2200      	movs	r2, #0
 8000890:	2400      	movs	r4, #0
 8000892:	e7ec      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d11d      	bne.n	80008d4 <__aeabi_fdiv+0x124>
 8000898:	2304      	movs	r3, #4
 800089a:	4699      	mov	r9, r3
 800089c:	3b03      	subs	r3, #3
 800089e:	2600      	movs	r6, #0
 80008a0:	469b      	mov	fp, r3
 80008a2:	e79d      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008a4:	3eff      	subs	r6, #255	; 0xff
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d120      	bne.n	80008ec <__aeabi_fdiv+0x13c>
 80008aa:	2102      	movs	r1, #2
 80008ac:	4643      	mov	r3, r8
 80008ae:	464a      	mov	r2, r9
 80008b0:	407b      	eors	r3, r7
 80008b2:	430a      	orrs	r2, r1
 80008b4:	2a0f      	cmp	r2, #15
 80008b6:	d8d8      	bhi.n	800086a <__aeabi_fdiv+0xba>
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <__aeabi_fdiv+0x220>)
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	5882      	ldr	r2, [r0, r2]
 80008be:	4697      	mov	pc, r2
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d119      	bne.n	80008f8 <__aeabi_fdiv+0x148>
 80008c4:	2101      	movs	r1, #1
 80008c6:	e7f1      	b.n	80008ac <__aeabi_fdiv+0xfc>
 80008c8:	230c      	movs	r3, #12
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b09      	subs	r3, #9
 80008ce:	26ff      	movs	r6, #255	; 0xff
 80008d0:	469b      	mov	fp, r3
 80008d2:	e785      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008d4:	0020      	movs	r0, r4
 80008d6:	f002 fb0d 	bl	8002ef4 <__clzsi2>
 80008da:	2676      	movs	r6, #118	; 0x76
 80008dc:	1f43      	subs	r3, r0, #5
 80008de:	409c      	lsls	r4, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	4276      	negs	r6, r6
 80008e4:	1a36      	subs	r6, r6, r0
 80008e6:	4699      	mov	r9, r3
 80008e8:	469b      	mov	fp, r3
 80008ea:	e779      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008ec:	464a      	mov	r2, r9
 80008ee:	2303      	movs	r3, #3
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4691      	mov	r9, r2
 80008f4:	2103      	movs	r1, #3
 80008f6:	e786      	b.n	8000806 <__aeabi_fdiv+0x56>
 80008f8:	0028      	movs	r0, r5
 80008fa:	f002 fafb 	bl	8002ef4 <__clzsi2>
 80008fe:	1f43      	subs	r3, r0, #5
 8000900:	1836      	adds	r6, r6, r0
 8000902:	409d      	lsls	r5, r3
 8000904:	3676      	adds	r6, #118	; 0x76
 8000906:	2100      	movs	r1, #0
 8000908:	e77d      	b.n	8000806 <__aeabi_fdiv+0x56>
 800090a:	2480      	movs	r4, #128	; 0x80
 800090c:	2300      	movs	r3, #0
 800090e:	03e4      	lsls	r4, r4, #15
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	e7ac      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000914:	2500      	movs	r5, #0
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	03db      	lsls	r3, r3, #15
 800091a:	421c      	tst	r4, r3
 800091c:	d028      	beq.n	8000970 <__aeabi_fdiv+0x1c0>
 800091e:	421d      	tst	r5, r3
 8000920:	d126      	bne.n	8000970 <__aeabi_fdiv+0x1c0>
 8000922:	432b      	orrs	r3, r5
 8000924:	025c      	lsls	r4, r3, #9
 8000926:	0a64      	lsrs	r4, r4, #9
 8000928:	4643      	mov	r3, r8
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	e79f      	b.n	800086e <__aeabi_fdiv+0xbe>
 800092e:	0162      	lsls	r2, r4, #5
 8000930:	016c      	lsls	r4, r5, #5
 8000932:	42a2      	cmp	r2, r4
 8000934:	d224      	bcs.n	8000980 <__aeabi_fdiv+0x1d0>
 8000936:	211b      	movs	r1, #27
 8000938:	2500      	movs	r5, #0
 800093a:	3e01      	subs	r6, #1
 800093c:	2701      	movs	r7, #1
 800093e:	0010      	movs	r0, r2
 8000940:	006d      	lsls	r5, r5, #1
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	2800      	cmp	r0, #0
 8000946:	db01      	blt.n	800094c <__aeabi_fdiv+0x19c>
 8000948:	4294      	cmp	r4, r2
 800094a:	d801      	bhi.n	8000950 <__aeabi_fdiv+0x1a0>
 800094c:	1b12      	subs	r2, r2, r4
 800094e:	433d      	orrs	r5, r7
 8000950:	3901      	subs	r1, #1
 8000952:	2900      	cmp	r1, #0
 8000954:	d1f3      	bne.n	800093e <__aeabi_fdiv+0x18e>
 8000956:	0014      	movs	r4, r2
 8000958:	1e62      	subs	r2, r4, #1
 800095a:	4194      	sbcs	r4, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	e76d      	b.n	800083c <__aeabi_fdiv+0x8c>
 8000960:	46ba      	mov	sl, r7
 8000962:	4659      	mov	r1, fp
 8000964:	0025      	movs	r5, r4
 8000966:	4653      	mov	r3, sl
 8000968:	2902      	cmp	r1, #2
 800096a:	d000      	beq.n	800096e <__aeabi_fdiv+0x1be>
 800096c:	e761      	b.n	8000832 <__aeabi_fdiv+0x82>
 800096e:	e77c      	b.n	800086a <__aeabi_fdiv+0xba>
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	431c      	orrs	r4, r3
 8000976:	0264      	lsls	r4, r4, #9
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	003b      	movs	r3, r7
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	e776      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000980:	1b12      	subs	r2, r2, r4
 8000982:	211a      	movs	r1, #26
 8000984:	2501      	movs	r5, #1
 8000986:	e7d9      	b.n	800093c <__aeabi_fdiv+0x18c>
 8000988:	369e      	adds	r6, #158	; 0x9e
 800098a:	002a      	movs	r2, r5
 800098c:	40b5      	lsls	r5, r6
 800098e:	002c      	movs	r4, r5
 8000990:	40c2      	lsrs	r2, r0
 8000992:	1e65      	subs	r5, r4, #1
 8000994:	41ac      	sbcs	r4, r5
 8000996:	4314      	orrs	r4, r2
 8000998:	0762      	lsls	r2, r4, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fdiv+0x1f6>
 800099c:	220f      	movs	r2, #15
 800099e:	4022      	ands	r2, r4
 80009a0:	2a04      	cmp	r2, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fdiv+0x1f6>
 80009a4:	3404      	adds	r4, #4
 80009a6:	0162      	lsls	r2, r4, #5
 80009a8:	d403      	bmi.n	80009b2 <__aeabi_fdiv+0x202>
 80009aa:	01a4      	lsls	r4, r4, #6
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	2200      	movs	r2, #0
 80009b0:	e75d      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	e75a      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009b8:	2480      	movs	r4, #128	; 0x80
 80009ba:	03e4      	lsls	r4, r4, #15
 80009bc:	432c      	orrs	r4, r5
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	e753      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	08017ec8 	.word	0x08017ec8
 80009cc:	f7ffffff 	.word	0xf7ffffff
 80009d0:	08017f08 	.word	0x08017f08

080009d4 <__eqsf2>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	0042      	lsls	r2, r0, #1
 80009d8:	024e      	lsls	r6, r1, #9
 80009da:	004c      	lsls	r4, r1, #1
 80009dc:	0245      	lsls	r5, r0, #9
 80009de:	0a6d      	lsrs	r5, r5, #9
 80009e0:	0e12      	lsrs	r2, r2, #24
 80009e2:	0fc3      	lsrs	r3, r0, #31
 80009e4:	0a76      	lsrs	r6, r6, #9
 80009e6:	0e24      	lsrs	r4, r4, #24
 80009e8:	0fc9      	lsrs	r1, r1, #31
 80009ea:	2aff      	cmp	r2, #255	; 0xff
 80009ec:	d00f      	beq.n	8000a0e <__eqsf2+0x3a>
 80009ee:	2cff      	cmp	r4, #255	; 0xff
 80009f0:	d011      	beq.n	8000a16 <__eqsf2+0x42>
 80009f2:	2001      	movs	r0, #1
 80009f4:	42a2      	cmp	r2, r4
 80009f6:	d000      	beq.n	80009fa <__eqsf2+0x26>
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	42b5      	cmp	r5, r6
 80009fc:	d1fc      	bne.n	80009f8 <__eqsf2+0x24>
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d00d      	beq.n	8000a1e <__eqsf2+0x4a>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d1f8      	bne.n	80009f8 <__eqsf2+0x24>
 8000a06:	0028      	movs	r0, r5
 8000a08:	1e45      	subs	r5, r0, #1
 8000a0a:	41a8      	sbcs	r0, r5
 8000a0c:	e7f4      	b.n	80009f8 <__eqsf2+0x24>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d1f1      	bne.n	80009f8 <__eqsf2+0x24>
 8000a14:	e7eb      	b.n	80009ee <__eqsf2+0x1a>
 8000a16:	2001      	movs	r0, #1
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d1ed      	bne.n	80009f8 <__eqsf2+0x24>
 8000a1c:	e7e9      	b.n	80009f2 <__eqsf2+0x1e>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e7ea      	b.n	80009f8 <__eqsf2+0x24>
 8000a22:	46c0      	nop			; (mov r8, r8)

08000a24 <__gesf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	004a      	lsls	r2, r1, #1
 8000a28:	024e      	lsls	r6, r1, #9
 8000a2a:	0245      	lsls	r5, r0, #9
 8000a2c:	0044      	lsls	r4, r0, #1
 8000a2e:	0a6d      	lsrs	r5, r5, #9
 8000a30:	0e24      	lsrs	r4, r4, #24
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2cff      	cmp	r4, #255	; 0xff
 8000a3c:	d015      	beq.n	8000a6a <__gesf2+0x46>
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d00e      	beq.n	8000a60 <__gesf2+0x3c>
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d115      	bne.n	8000a72 <__gesf2+0x4e>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x2a>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d01c      	beq.n	8000a88 <__gesf2+0x64>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d014      	beq.n	8000a7c <__gesf2+0x58>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d027      	beq.n	8000aa6 <__gesf2+0x82>
 8000a56:	2002      	movs	r0, #2
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	4018      	ands	r0, r3
 8000a5c:	3801      	subs	r0, #1
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d0ee      	beq.n	8000a42 <__gesf2+0x1e>
 8000a64:	2002      	movs	r0, #2
 8000a66:	4240      	negs	r0, r0
 8000a68:	e7f9      	b.n	8000a5e <__gesf2+0x3a>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d1fa      	bne.n	8000a64 <__gesf2+0x40>
 8000a6e:	2aff      	cmp	r2, #255	; 0xff
 8000a70:	d00e      	beq.n	8000a90 <__gesf2+0x6c>
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d10e      	bne.n	8000a94 <__gesf2+0x70>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d0ed      	beq.n	8000a56 <__gesf2+0x32>
 8000a7a:	e00b      	b.n	8000a94 <__gesf2+0x70>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	3901      	subs	r1, #1
 8000a80:	4399      	bics	r1, r3
 8000a82:	0008      	movs	r0, r1
 8000a84:	3001      	adds	r0, #1
 8000a86:	e7ea      	b.n	8000a5e <__gesf2+0x3a>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d0e7      	beq.n	8000a5e <__gesf2+0x3a>
 8000a8e:	e7e2      	b.n	8000a56 <__gesf2+0x32>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d1e7      	bne.n	8000a64 <__gesf2+0x40>
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d1de      	bne.n	8000a56 <__gesf2+0x32>
 8000a98:	4294      	cmp	r4, r2
 8000a9a:	dd05      	ble.n	8000aa8 <__gesf2+0x84>
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	4008      	ands	r0, r1
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e7db      	b.n	8000a5e <__gesf2+0x3a>
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	dc04      	bgt.n	8000ab6 <__gesf2+0x92>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d8d2      	bhi.n	8000a56 <__gesf2+0x32>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	42b5      	cmp	r5, r6
 8000ab4:	d2d3      	bcs.n	8000a5e <__gesf2+0x3a>
 8000ab6:	1e58      	subs	r0, r3, #1
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4398      	bics	r0, r3
 8000abc:	3001      	adds	r0, #1
 8000abe:	e7ce      	b.n	8000a5e <__gesf2+0x3a>

08000ac0 <__lesf2>:
 8000ac0:	b530      	push	{r4, r5, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0244      	lsls	r4, r0, #9
 8000ac6:	024d      	lsls	r5, r1, #9
 8000ac8:	0fc3      	lsrs	r3, r0, #31
 8000aca:	0048      	lsls	r0, r1, #1
 8000acc:	0a64      	lsrs	r4, r4, #9
 8000ace:	0e12      	lsrs	r2, r2, #24
 8000ad0:	0a6d      	lsrs	r5, r5, #9
 8000ad2:	0e00      	lsrs	r0, r0, #24
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	2aff      	cmp	r2, #255	; 0xff
 8000ad8:	d012      	beq.n	8000b00 <__lesf2+0x40>
 8000ada:	28ff      	cmp	r0, #255	; 0xff
 8000adc:	d00c      	beq.n	8000af8 <__lesf2+0x38>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d112      	bne.n	8000b08 <__lesf2+0x48>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d119      	bne.n	8000b1a <__lesf2+0x5a>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d117      	bne.n	8000b1a <__lesf2+0x5a>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d02b      	beq.n	8000b46 <__lesf2+0x86>
 8000aee:	2002      	movs	r0, #2
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4018      	ands	r0, r3
 8000af4:	3801      	subs	r0, #1
 8000af6:	e026      	b.n	8000b46 <__lesf2+0x86>
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0f0      	beq.n	8000ade <__lesf2+0x1e>
 8000afc:	2002      	movs	r0, #2
 8000afe:	e022      	b.n	8000b46 <__lesf2+0x86>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d1fb      	bne.n	8000afc <__lesf2+0x3c>
 8000b04:	28ff      	cmp	r0, #255	; 0xff
 8000b06:	d01f      	beq.n	8000b48 <__lesf2+0x88>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d11f      	bne.n	8000b4c <__lesf2+0x8c>
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d11d      	bne.n	8000b4c <__lesf2+0x8c>
 8000b10:	2002      	movs	r0, #2
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4018      	ands	r0, r3
 8000b16:	3801      	subs	r0, #1
 8000b18:	e015      	b.n	8000b46 <__lesf2+0x86>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d00e      	beq.n	8000b3c <__lesf2+0x7c>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d1e5      	bne.n	8000aee <__lesf2+0x2e>
 8000b22:	2200      	movs	r2, #0
 8000b24:	4290      	cmp	r0, r2
 8000b26:	dc04      	bgt.n	8000b32 <__lesf2+0x72>
 8000b28:	42ac      	cmp	r4, r5
 8000b2a:	d8e0      	bhi.n	8000aee <__lesf2+0x2e>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	42ac      	cmp	r4, r5
 8000b30:	d209      	bcs.n	8000b46 <__lesf2+0x86>
 8000b32:	1e58      	subs	r0, r3, #1
 8000b34:	2301      	movs	r3, #1
 8000b36:	4398      	bics	r0, r3
 8000b38:	3001      	adds	r0, #1
 8000b3a:	e004      	b.n	8000b46 <__lesf2+0x86>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	3901      	subs	r1, #1
 8000b40:	4399      	bics	r1, r3
 8000b42:	0008      	movs	r0, r1
 8000b44:	3001      	adds	r0, #1
 8000b46:	bd30      	pop	{r4, r5, pc}
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1d7      	bne.n	8000afc <__lesf2+0x3c>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d1ce      	bne.n	8000aee <__lesf2+0x2e>
 8000b50:	4282      	cmp	r2, r0
 8000b52:	dde7      	ble.n	8000b24 <__lesf2+0x64>
 8000b54:	2102      	movs	r1, #2
 8000b56:	1e58      	subs	r0, r3, #1
 8000b58:	4008      	ands	r0, r1
 8000b5a:	3801      	subs	r0, #1
 8000b5c:	e7f3      	b.n	8000b46 <__lesf2+0x86>
 8000b5e:	46c0      	nop			; (mov r8, r8)

08000b60 <__aeabi_fmul>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	464e      	mov	r6, r9
 8000b64:	4657      	mov	r7, sl
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	0243      	lsls	r3, r0, #9
 8000b6e:	0a5b      	lsrs	r3, r3, #9
 8000b70:	0045      	lsls	r5, r0, #1
 8000b72:	b083      	sub	sp, #12
 8000b74:	1c0f      	adds	r7, r1, #0
 8000b76:	4699      	mov	r9, r3
 8000b78:	0e2d      	lsrs	r5, r5, #24
 8000b7a:	0fc6      	lsrs	r6, r0, #31
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d057      	beq.n	8000c30 <__aeabi_fmul+0xd0>
 8000b80:	2dff      	cmp	r5, #255	; 0xff
 8000b82:	d024      	beq.n	8000bce <__aeabi_fmul+0x6e>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	04c0      	lsls	r0, r0, #19
 8000b8a:	4318      	orrs	r0, r3
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	4681      	mov	r9, r0
 8000b90:	469a      	mov	sl, r3
 8000b92:	469b      	mov	fp, r3
 8000b94:	3d7f      	subs	r5, #127	; 0x7f
 8000b96:	027c      	lsls	r4, r7, #9
 8000b98:	007a      	lsls	r2, r7, #1
 8000b9a:	0ffb      	lsrs	r3, r7, #31
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	d023      	beq.n	8000bec <__aeabi_fmul+0x8c>
 8000ba4:	2aff      	cmp	r2, #255	; 0xff
 8000ba6:	d04b      	beq.n	8000c40 <__aeabi_fmul+0xe0>
 8000ba8:	00e3      	lsls	r3, r4, #3
 8000baa:	2480      	movs	r4, #128	; 0x80
 8000bac:	2000      	movs	r0, #0
 8000bae:	04e4      	lsls	r4, r4, #19
 8000bb0:	3a7f      	subs	r2, #127	; 0x7f
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	18ad      	adds	r5, r5, r2
 8000bb6:	1c6b      	adds	r3, r5, #1
 8000bb8:	4647      	mov	r7, r8
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	4077      	eors	r7, r6
 8000bc0:	003a      	movs	r2, r7
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d848      	bhi.n	8000c58 <__aeabi_fmul+0xf8>
 8000bc6:	497d      	ldr	r1, [pc, #500]	; (8000dbc <__aeabi_fmul+0x25c>)
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	58cb      	ldr	r3, [r1, r3]
 8000bcc:	469f      	mov	pc, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fmul+0x74>
 8000bd2:	e085      	b.n	8000ce0 <__aeabi_fmul+0x180>
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	3b06      	subs	r3, #6
 8000bda:	469b      	mov	fp, r3
 8000bdc:	027c      	lsls	r4, r7, #9
 8000bde:	007a      	lsls	r2, r7, #1
 8000be0:	0ffb      	lsrs	r3, r7, #31
 8000be2:	25ff      	movs	r5, #255	; 0xff
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d1db      	bne.n	8000ba4 <__aeabi_fmul+0x44>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fmul+0x92>
 8000bf0:	e090      	b.n	8000d14 <__aeabi_fmul+0x1b4>
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	4692      	mov	sl, r2
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	e7db      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000bfe:	464c      	mov	r4, r9
 8000c00:	4658      	mov	r0, fp
 8000c02:	0017      	movs	r7, r2
 8000c04:	2802      	cmp	r0, #2
 8000c06:	d024      	beq.n	8000c52 <__aeabi_fmul+0xf2>
 8000c08:	2803      	cmp	r0, #3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0xae>
 8000c0c:	e0cf      	b.n	8000dae <__aeabi_fmul+0x24e>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	2801      	cmp	r0, #1
 8000c14:	d14d      	bne.n	8000cb2 <__aeabi_fmul+0x152>
 8000c16:	0258      	lsls	r0, r3, #9
 8000c18:	05d2      	lsls	r2, r2, #23
 8000c1a:	0a40      	lsrs	r0, r0, #9
 8000c1c:	07ff      	lsls	r7, r7, #31
 8000c1e:	4310      	orrs	r0, r2
 8000c20:	4338      	orrs	r0, r7
 8000c22:	b003      	add	sp, #12
 8000c24:	bc3c      	pop	{r2, r3, r4, r5}
 8000c26:	4690      	mov	r8, r2
 8000c28:	4699      	mov	r9, r3
 8000c2a:	46a2      	mov	sl, r4
 8000c2c:	46ab      	mov	fp, r5
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d15b      	bne.n	8000cec <__aeabi_fmul+0x18c>
 8000c34:	2304      	movs	r3, #4
 8000c36:	469a      	mov	sl, r3
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	469b      	mov	fp, r3
 8000c3e:	e7aa      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000c40:	35ff      	adds	r5, #255	; 0xff
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d160      	bne.n	8000d08 <__aeabi_fmul+0x1a8>
 8000c46:	4652      	mov	r2, sl
 8000c48:	2302      	movs	r3, #2
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	2002      	movs	r0, #2
 8000c50:	e7b1      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	2300      	movs	r3, #0
 8000c56:	e7de      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000c58:	464b      	mov	r3, r9
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	464b      	mov	r3, r9
 8000c60:	0426      	lsls	r6, r4, #16
 8000c62:	0c36      	lsrs	r6, r6, #16
 8000c64:	0418      	lsls	r0, r3, #16
 8000c66:	4661      	mov	r1, ip
 8000c68:	0033      	movs	r3, r6
 8000c6a:	0c22      	lsrs	r2, r4, #16
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	0c00      	lsrs	r0, r0, #16
 8000c70:	4343      	muls	r3, r0
 8000c72:	434e      	muls	r6, r1
 8000c74:	4350      	muls	r0, r2
 8000c76:	4354      	muls	r4, r2
 8000c78:	1980      	adds	r0, r0, r6
 8000c7a:	0c1a      	lsrs	r2, r3, #16
 8000c7c:	1812      	adds	r2, r2, r0
 8000c7e:	4296      	cmp	r6, r2
 8000c80:	d903      	bls.n	8000c8a <__aeabi_fmul+0x12a>
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	0249      	lsls	r1, r1, #9
 8000c86:	468c      	mov	ip, r1
 8000c88:	4464      	add	r4, ip
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	0410      	lsls	r0, r2, #16
 8000c90:	18c0      	adds	r0, r0, r3
 8000c92:	0183      	lsls	r3, r0, #6
 8000c94:	1e5e      	subs	r6, r3, #1
 8000c96:	41b3      	sbcs	r3, r6
 8000c98:	0e80      	lsrs	r0, r0, #26
 8000c9a:	4318      	orrs	r0, r3
 8000c9c:	0c13      	lsrs	r3, r2, #16
 8000c9e:	191b      	adds	r3, r3, r4
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	001c      	movs	r4, r3
 8000ca6:	0123      	lsls	r3, r4, #4
 8000ca8:	d579      	bpl.n	8000d9e <__aeabi_fmul+0x23e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	0862      	lsrs	r2, r4, #1
 8000cae:	401c      	ands	r4, r3
 8000cb0:	4314      	orrs	r4, r2
 8000cb2:	9a01      	ldr	r2, [sp, #4]
 8000cb4:	327f      	adds	r2, #127	; 0x7f
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	dd4d      	ble.n	8000d56 <__aeabi_fmul+0x1f6>
 8000cba:	0763      	lsls	r3, r4, #29
 8000cbc:	d004      	beq.n	8000cc8 <__aeabi_fmul+0x168>
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	4023      	ands	r3, r4
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_fmul+0x168>
 8000cc6:	3404      	adds	r4, #4
 8000cc8:	0123      	lsls	r3, r4, #4
 8000cca:	d503      	bpl.n	8000cd4 <__aeabi_fmul+0x174>
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <__aeabi_fmul+0x260>)
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	3280      	adds	r2, #128	; 0x80
 8000cd4:	2afe      	cmp	r2, #254	; 0xfe
 8000cd6:	dcbc      	bgt.n	8000c52 <__aeabi_fmul+0xf2>
 8000cd8:	01a3      	lsls	r3, r4, #6
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	e79a      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	3b09      	subs	r3, #9
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e754      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000cec:	0018      	movs	r0, r3
 8000cee:	f002 f901 	bl	8002ef4 <__clzsi2>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	2576      	movs	r5, #118	; 0x76
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	426d      	negs	r5, r5
 8000cfe:	4691      	mov	r9, r2
 8000d00:	1a2d      	subs	r5, r5, r0
 8000d02:	469a      	mov	sl, r3
 8000d04:	469b      	mov	fp, r3
 8000d06:	e746      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000d08:	4652      	mov	r2, sl
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4692      	mov	sl, r2
 8000d10:	2003      	movs	r0, #3
 8000d12:	e750      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000d14:	0020      	movs	r0, r4
 8000d16:	f002 f8ed 	bl	8002ef4 <__clzsi2>
 8000d1a:	1f43      	subs	r3, r0, #5
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	409c      	lsls	r4, r3
 8000d20:	3d76      	subs	r5, #118	; 0x76
 8000d22:	2000      	movs	r0, #0
 8000d24:	e747      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	2700      	movs	r7, #0
 8000d2a:	03db      	lsls	r3, r3, #15
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	e772      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d30:	4642      	mov	r2, r8
 8000d32:	e766      	b.n	8000c02 <__aeabi_fmul+0xa2>
 8000d34:	464c      	mov	r4, r9
 8000d36:	0032      	movs	r2, r6
 8000d38:	4658      	mov	r0, fp
 8000d3a:	e762      	b.n	8000c02 <__aeabi_fmul+0xa2>
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	464a      	mov	r2, r9
 8000d40:	03db      	lsls	r3, r3, #15
 8000d42:	421a      	tst	r2, r3
 8000d44:	d022      	beq.n	8000d8c <__aeabi_fmul+0x22c>
 8000d46:	421c      	tst	r4, r3
 8000d48:	d120      	bne.n	8000d8c <__aeabi_fmul+0x22c>
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	4647      	mov	r7, r8
 8000d52:	22ff      	movs	r2, #255	; 0xff
 8000d54:	e75f      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d56:	2301      	movs	r3, #1
 8000d58:	1a9a      	subs	r2, r3, r2
 8000d5a:	2a1b      	cmp	r2, #27
 8000d5c:	dc21      	bgt.n	8000da2 <__aeabi_fmul+0x242>
 8000d5e:	0023      	movs	r3, r4
 8000d60:	9901      	ldr	r1, [sp, #4]
 8000d62:	40d3      	lsrs	r3, r2
 8000d64:	319e      	adds	r1, #158	; 0x9e
 8000d66:	408c      	lsls	r4, r1
 8000d68:	001a      	movs	r2, r3
 8000d6a:	0023      	movs	r3, r4
 8000d6c:	1e5c      	subs	r4, r3, #1
 8000d6e:	41a3      	sbcs	r3, r4
 8000d70:	4313      	orrs	r3, r2
 8000d72:	075a      	lsls	r2, r3, #29
 8000d74:	d004      	beq.n	8000d80 <__aeabi_fmul+0x220>
 8000d76:	220f      	movs	r2, #15
 8000d78:	401a      	ands	r2, r3
 8000d7a:	2a04      	cmp	r2, #4
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fmul+0x220>
 8000d7e:	3304      	adds	r3, #4
 8000d80:	015a      	lsls	r2, r3, #5
 8000d82:	d411      	bmi.n	8000da8 <__aeabi_fmul+0x248>
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e744      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	464a      	mov	r2, r9
 8000d90:	03db      	lsls	r3, r3, #15
 8000d92:	4313      	orrs	r3, r2
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	0037      	movs	r7, r6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e73b      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d9e:	9501      	str	r5, [sp, #4]
 8000da0:	e787      	b.n	8000cb2 <__aeabi_fmul+0x152>
 8000da2:	2200      	movs	r2, #0
 8000da4:	2300      	movs	r3, #0
 8000da6:	e736      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000da8:	2201      	movs	r2, #1
 8000daa:	2300      	movs	r3, #0
 8000dac:	e733      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	03db      	lsls	r3, r3, #15
 8000db2:	4323      	orrs	r3, r4
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	e72c      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000dbc:	08017f48 	.word	0x08017f48
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	0044      	lsls	r4, r0, #1
 8000dcc:	0fc2      	lsrs	r2, r0, #31
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	0247      	lsls	r7, r0, #9
 8000dd2:	0248      	lsls	r0, r1, #9
 8000dd4:	0a40      	lsrs	r0, r0, #9
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	4666      	mov	r6, ip
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a7f      	lsrs	r7, r7, #9
 8000dde:	0e24      	lsrs	r4, r4, #24
 8000de0:	00f6      	lsls	r6, r6, #3
 8000de2:	0025      	movs	r5, r4
 8000de4:	4690      	mov	r8, r2
 8000de6:	00fb      	lsls	r3, r7, #3
 8000de8:	0e00      	lsrs	r0, r0, #24
 8000dea:	0fc9      	lsrs	r1, r1, #31
 8000dec:	46b1      	mov	r9, r6
 8000dee:	28ff      	cmp	r0, #255	; 0xff
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x30>
 8000df2:	e085      	b.n	8000f00 <__aeabi_fsub+0x13c>
 8000df4:	2601      	movs	r6, #1
 8000df6:	4071      	eors	r1, r6
 8000df8:	1a26      	subs	r6, r4, r0
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d057      	beq.n	8000eae <__aeabi_fsub+0xea>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	dd43      	ble.n	8000e8a <__aeabi_fsub+0xc6>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x44>
 8000e06:	e07f      	b.n	8000f08 <__aeabi_fsub+0x144>
 8000e08:	4649      	mov	r1, r9
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x4c>
 8000e0e:	e0aa      	b.n	8000f66 <__aeabi_fsub+0x1a2>
 8000e10:	3e01      	subs	r6, #1
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fsub+0x54>
 8000e16:	e0f7      	b.n	8001008 <__aeabi_fsub+0x244>
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	015a      	lsls	r2, r3, #5
 8000e1c:	d400      	bmi.n	8000e20 <__aeabi_fsub+0x5c>
 8000e1e:	e08b      	b.n	8000f38 <__aeabi_fsub+0x174>
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	099c      	lsrs	r4, r3, #6
 8000e24:	0020      	movs	r0, r4
 8000e26:	f002 f865 	bl	8002ef4 <__clzsi2>
 8000e2a:	3805      	subs	r0, #5
 8000e2c:	4084      	lsls	r4, r0
 8000e2e:	4285      	cmp	r5, r0
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fsub+0x70>
 8000e32:	e0d3      	b.n	8000fdc <__aeabi_fsub+0x218>
 8000e34:	1b45      	subs	r5, r0, r5
 8000e36:	0023      	movs	r3, r4
 8000e38:	2020      	movs	r0, #32
 8000e3a:	3501      	adds	r5, #1
 8000e3c:	40eb      	lsrs	r3, r5
 8000e3e:	1b45      	subs	r5, r0, r5
 8000e40:	40ac      	lsls	r4, r5
 8000e42:	1e62      	subs	r2, r4, #1
 8000e44:	4194      	sbcs	r4, r2
 8000e46:	4323      	orrs	r3, r4
 8000e48:	2407      	movs	r4, #7
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4641      	mov	r1, r8
 8000e52:	400a      	ands	r2, r1
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	d004      	beq.n	8000e62 <__aeabi_fsub+0x9e>
 8000e58:	210f      	movs	r1, #15
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	2904      	cmp	r1, #4
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_fsub+0x9e>
 8000e60:	3304      	adds	r3, #4
 8000e62:	0159      	lsls	r1, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0xa4>
 8000e66:	e080      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000e68:	3501      	adds	r5, #1
 8000e6a:	b2ec      	uxtb	r4, r5
 8000e6c:	2dff      	cmp	r5, #255	; 0xff
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0xae>
 8000e70:	e0a3      	b.n	8000fba <__aeabi_fsub+0x1f6>
 8000e72:	24ff      	movs	r4, #255	; 0xff
 8000e74:	2300      	movs	r3, #0
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	05e4      	lsls	r4, r4, #23
 8000e7a:	0a58      	lsrs	r0, r3, #9
 8000e7c:	07d2      	lsls	r2, r2, #31
 8000e7e:	4320      	orrs	r0, r4
 8000e80:	4310      	orrs	r0, r2
 8000e82:	bc0c      	pop	{r2, r3}
 8000e84:	4690      	mov	r8, r2
 8000e86:	4699      	mov	r9, r3
 8000e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d174      	bne.n	8000f78 <__aeabi_fsub+0x1b4>
 8000e8e:	1c60      	adds	r0, r4, #1
 8000e90:	b2c0      	uxtb	r0, r0
 8000e92:	2801      	cmp	r0, #1
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_fsub+0xd4>
 8000e96:	e0a7      	b.n	8000fe8 <__aeabi_fsub+0x224>
 8000e98:	464a      	mov	r2, r9
 8000e9a:	1a9c      	subs	r4, r3, r2
 8000e9c:	0162      	lsls	r2, r4, #5
 8000e9e:	d500      	bpl.n	8000ea2 <__aeabi_fsub+0xde>
 8000ea0:	e0b6      	b.n	8001010 <__aeabi_fsub+0x24c>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d1be      	bne.n	8000e24 <__aeabi_fsub+0x60>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e7e3      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_fsub+0xf0>
 8000eb2:	e085      	b.n	8000fc0 <__aeabi_fsub+0x1fc>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d046      	beq.n	8000f46 <__aeabi_fsub+0x182>
 8000eb8:	2cff      	cmp	r4, #255	; 0xff
 8000eba:	d049      	beq.n	8000f50 <__aeabi_fsub+0x18c>
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	4648      	mov	r0, r9
 8000ec0:	04d2      	lsls	r2, r2, #19
 8000ec2:	4310      	orrs	r0, r2
 8000ec4:	4681      	mov	r9, r0
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2e1b      	cmp	r6, #27
 8000eca:	dc09      	bgt.n	8000ee0 <__aeabi_fsub+0x11c>
 8000ecc:	2020      	movs	r0, #32
 8000ece:	464c      	mov	r4, r9
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	4084      	lsls	r4, r0
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e44      	subs	r4, r0, #1
 8000edc:	41a0      	sbcs	r0, r4
 8000ede:	4302      	orrs	r2, r0
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	015a      	lsls	r2, r3, #5
 8000ee4:	d528      	bpl.n	8000f38 <__aeabi_fsub+0x174>
 8000ee6:	3501      	adds	r5, #1
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x12a>
 8000eec:	e0a8      	b.n	8001040 <__aeabi_fsub+0x27c>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2407      	movs	r4, #7
 8000ef2:	4994      	ldr	r1, [pc, #592]	; (8001144 <__aeabi_fsub+0x380>)
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	085b      	lsrs	r3, r3, #1
 8000ef8:	400b      	ands	r3, r1
 8000efa:	4313      	orrs	r3, r2
 8000efc:	401c      	ands	r4, r3
 8000efe:	e7a6      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d000      	beq.n	8000f06 <__aeabi_fsub+0x142>
 8000f04:	e778      	b.n	8000df8 <__aeabi_fsub+0x34>
 8000f06:	e775      	b.n	8000df4 <__aeabi_fsub+0x30>
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	d054      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	4649      	mov	r1, r9
 8000f10:	04d2      	lsls	r2, r2, #19
 8000f12:	4311      	orrs	r1, r2
 8000f14:	4689      	mov	r9, r1
 8000f16:	2201      	movs	r2, #1
 8000f18:	2e1b      	cmp	r6, #27
 8000f1a:	dc09      	bgt.n	8000f30 <__aeabi_fsub+0x16c>
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4648      	mov	r0, r9
 8000f20:	1b89      	subs	r1, r1, r6
 8000f22:	4088      	lsls	r0, r1
 8000f24:	464a      	mov	r2, r9
 8000f26:	0001      	movs	r1, r0
 8000f28:	40f2      	lsrs	r2, r6
 8000f2a:	1e48      	subs	r0, r1, #1
 8000f2c:	4181      	sbcs	r1, r0
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	015a      	lsls	r2, r3, #5
 8000f34:	d500      	bpl.n	8000f38 <__aeabi_fsub+0x174>
 8000f36:	e773      	b.n	8000e20 <__aeabi_fsub+0x5c>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	0759      	lsls	r1, r3, #29
 8000f40:	d000      	beq.n	8000f44 <__aeabi_fsub+0x180>
 8000f42:	e789      	b.n	8000e58 <__aeabi_fsub+0x94>
 8000f44:	e011      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000f46:	4648      	mov	r0, r9
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d158      	bne.n	8000ffe <__aeabi_fsub+0x23a>
 8000f4c:	2cff      	cmp	r4, #255	; 0xff
 8000f4e:	d10c      	bne.n	8000f6a <__aeabi_fsub+0x1a6>
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x194>
 8000f56:	e78c      	b.n	8000e72 <__aeabi_fsub+0xae>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	03c0      	lsls	r0, r0, #15
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	025b      	lsls	r3, r3, #9
 8000f60:	0a5b      	lsrs	r3, r3, #9
 8000f62:	24ff      	movs	r4, #255	; 0xff
 8000f64:	e787      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000f66:	2cff      	cmp	r4, #255	; 0xff
 8000f68:	d025      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	2dff      	cmp	r5, #255	; 0xff
 8000f6e:	d0f0      	beq.n	8000f52 <__aeabi_fsub+0x18e>
 8000f70:	025b      	lsls	r3, r3, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	b2ec      	uxtb	r4, r5
 8000f76:	e77e      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	d04d      	beq.n	8001018 <__aeabi_fsub+0x254>
 8000f7c:	28ff      	cmp	r0, #255	; 0xff
 8000f7e:	d018      	beq.n	8000fb2 <__aeabi_fsub+0x1ee>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	04e4      	lsls	r4, r4, #19
 8000f84:	4272      	negs	r2, r6
 8000f86:	4323      	orrs	r3, r4
 8000f88:	2a1b      	cmp	r2, #27
 8000f8a:	dd00      	ble.n	8000f8e <__aeabi_fsub+0x1ca>
 8000f8c:	e0c4      	b.n	8001118 <__aeabi_fsub+0x354>
 8000f8e:	001c      	movs	r4, r3
 8000f90:	2520      	movs	r5, #32
 8000f92:	40d4      	lsrs	r4, r2
 8000f94:	1aaa      	subs	r2, r5, r2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	4193      	sbcs	r3, r2
 8000f9c:	4323      	orrs	r3, r4
 8000f9e:	464a      	mov	r2, r9
 8000fa0:	0005      	movs	r5, r0
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4688      	mov	r8, r1
 8000fa6:	e738      	b.n	8000e1a <__aeabi_fsub+0x56>
 8000fa8:	1c72      	adds	r2, r6, #1
 8000faa:	d0f8      	beq.n	8000f9e <__aeabi_fsub+0x1da>
 8000fac:	43f2      	mvns	r2, r6
 8000fae:	28ff      	cmp	r0, #255	; 0xff
 8000fb0:	d1ea      	bne.n	8000f88 <__aeabi_fsub+0x1c4>
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	25ff      	movs	r5, #255	; 0xff
 8000fb8:	e7d7      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000fba:	019b      	lsls	r3, r3, #6
 8000fbc:	0a5b      	lsrs	r3, r3, #9
 8000fbe:	e75a      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d141      	bne.n	8001048 <__aeabi_fsub+0x284>
 8000fc4:	1c65      	adds	r5, r4, #1
 8000fc6:	b2e9      	uxtb	r1, r5
 8000fc8:	2901      	cmp	r1, #1
 8000fca:	dd45      	ble.n	8001058 <__aeabi_fsub+0x294>
 8000fcc:	2dff      	cmp	r5, #255	; 0xff
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x20e>
 8000fd0:	e74f      	b.n	8000e72 <__aeabi_fsub+0xae>
 8000fd2:	2407      	movs	r4, #7
 8000fd4:	444b      	add	r3, r9
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	401c      	ands	r4, r3
 8000fda:	e738      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000fdc:	2207      	movs	r2, #7
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <__aeabi_fsub+0x384>)
 8000fe0:	1a2d      	subs	r5, r5, r0
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	4014      	ands	r4, r2
 8000fe6:	e732      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000fe8:	2c00      	cmp	r4, #0
 8000fea:	d11d      	bne.n	8001028 <__aeabi_fsub+0x264>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d17a      	bne.n	80010e6 <__aeabi_fsub+0x322>
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x234>
 8000ff6:	e091      	b.n	800111c <__aeabi_fsub+0x358>
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7b5      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000ffe:	3e01      	subs	r6, #1
 8001000:	2e00      	cmp	r6, #0
 8001002:	d119      	bne.n	8001038 <__aeabi_fsub+0x274>
 8001004:	444b      	add	r3, r9
 8001006:	e76c      	b.n	8000ee2 <__aeabi_fsub+0x11e>
 8001008:	2cff      	cmp	r4, #255	; 0xff
 800100a:	d184      	bne.n	8000f16 <__aeabi_fsub+0x152>
 800100c:	25ff      	movs	r5, #255	; 0xff
 800100e:	e7ac      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001010:	464a      	mov	r2, r9
 8001012:	4688      	mov	r8, r1
 8001014:	1ad4      	subs	r4, r2, r3
 8001016:	e705      	b.n	8000e24 <__aeabi_fsub+0x60>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1c5      	bne.n	8000fa8 <__aeabi_fsub+0x1e4>
 800101c:	000a      	movs	r2, r1
 800101e:	28ff      	cmp	r0, #255	; 0xff
 8001020:	d0c8      	beq.n	8000fb4 <__aeabi_fsub+0x1f0>
 8001022:	0005      	movs	r5, r0
 8001024:	464b      	mov	r3, r9
 8001026:	e7a0      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d149      	bne.n	80010c0 <__aeabi_fsub+0x2fc>
 800102c:	464b      	mov	r3, r9
 800102e:	2b00      	cmp	r3, #0
 8001030:	d077      	beq.n	8001122 <__aeabi_fsub+0x35e>
 8001032:	000a      	movs	r2, r1
 8001034:	25ff      	movs	r5, #255	; 0xff
 8001036:	e798      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001038:	2cff      	cmp	r4, #255	; 0xff
 800103a:	d000      	beq.n	800103e <__aeabi_fsub+0x27a>
 800103c:	e743      	b.n	8000ec6 <__aeabi_fsub+0x102>
 800103e:	e787      	b.n	8000f50 <__aeabi_fsub+0x18c>
 8001040:	000a      	movs	r2, r1
 8001042:	24ff      	movs	r4, #255	; 0xff
 8001044:	2300      	movs	r3, #0
 8001046:	e716      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8001048:	2c00      	cmp	r4, #0
 800104a:	d115      	bne.n	8001078 <__aeabi_fsub+0x2b4>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <__aeabi_fsub+0x33c>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d1e6      	bne.n	8001022 <__aeabi_fsub+0x25e>
 8001054:	464b      	mov	r3, r9
 8001056:	e77b      	b.n	8000f50 <__aeabi_fsub+0x18c>
 8001058:	2c00      	cmp	r4, #0
 800105a:	d120      	bne.n	800109e <__aeabi_fsub+0x2da>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d057      	beq.n	8001110 <__aeabi_fsub+0x34c>
 8001060:	4649      	mov	r1, r9
 8001062:	2900      	cmp	r1, #0
 8001064:	d053      	beq.n	800110e <__aeabi_fsub+0x34a>
 8001066:	444b      	add	r3, r9
 8001068:	015a      	lsls	r2, r3, #5
 800106a:	d568      	bpl.n	800113e <__aeabi_fsub+0x37a>
 800106c:	2407      	movs	r4, #7
 800106e:	4a36      	ldr	r2, [pc, #216]	; (8001148 <__aeabi_fsub+0x384>)
 8001070:	401c      	ands	r4, r3
 8001072:	2501      	movs	r5, #1
 8001074:	4013      	ands	r3, r2
 8001076:	e6ea      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8001078:	28ff      	cmp	r0, #255	; 0xff
 800107a:	d0eb      	beq.n	8001054 <__aeabi_fsub+0x290>
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	04d2      	lsls	r2, r2, #19
 8001080:	4276      	negs	r6, r6
 8001082:	4313      	orrs	r3, r2
 8001084:	2e1b      	cmp	r6, #27
 8001086:	dc53      	bgt.n	8001130 <__aeabi_fsub+0x36c>
 8001088:	2520      	movs	r5, #32
 800108a:	1bad      	subs	r5, r5, r6
 800108c:	001a      	movs	r2, r3
 800108e:	40ab      	lsls	r3, r5
 8001090:	40f2      	lsrs	r2, r6
 8001092:	1e5c      	subs	r4, r3, #1
 8001094:	41a3      	sbcs	r3, r4
 8001096:	4313      	orrs	r3, r2
 8001098:	444b      	add	r3, r9
 800109a:	0005      	movs	r5, r0
 800109c:	e721      	b.n	8000ee2 <__aeabi_fsub+0x11e>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0d8      	beq.n	8001054 <__aeabi_fsub+0x290>
 80010a2:	4649      	mov	r1, r9
 80010a4:	2900      	cmp	r1, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_fsub+0x2e6>
 80010a8:	e752      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	03c9      	lsls	r1, r1, #15
 80010ae:	420f      	tst	r7, r1
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x2f0>
 80010b2:	e74d      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010b4:	4660      	mov	r0, ip
 80010b6:	4208      	tst	r0, r1
 80010b8:	d000      	beq.n	80010bc <__aeabi_fsub+0x2f8>
 80010ba:	e749      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010bc:	464b      	mov	r3, r9
 80010be:	e747      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010c0:	4648      	mov	r0, r9
 80010c2:	25ff      	movs	r5, #255	; 0xff
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x306>
 80010c8:	e74f      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	03d2      	lsls	r2, r2, #15
 80010ce:	4217      	tst	r7, r2
 80010d0:	d004      	beq.n	80010dc <__aeabi_fsub+0x318>
 80010d2:	4660      	mov	r0, ip
 80010d4:	4210      	tst	r0, r2
 80010d6:	d101      	bne.n	80010dc <__aeabi_fsub+0x318>
 80010d8:	464b      	mov	r3, r9
 80010da:	4688      	mov	r8, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	4641      	mov	r1, r8
 80010e0:	25ff      	movs	r5, #255	; 0xff
 80010e2:	400a      	ands	r2, r1
 80010e4:	e741      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 80010e6:	4648      	mov	r0, r9
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d01f      	beq.n	800112c <__aeabi_fsub+0x368>
 80010ec:	1a1a      	subs	r2, r3, r0
 80010ee:	0150      	lsls	r0, r2, #5
 80010f0:	d520      	bpl.n	8001134 <__aeabi_fsub+0x370>
 80010f2:	464a      	mov	r2, r9
 80010f4:	2407      	movs	r4, #7
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	401c      	ands	r4, r3
 80010fa:	4688      	mov	r8, r1
 80010fc:	2500      	movs	r5, #0
 80010fe:	e6a6      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8001100:	1c74      	adds	r4, r6, #1
 8001102:	d0c9      	beq.n	8001098 <__aeabi_fsub+0x2d4>
 8001104:	43f6      	mvns	r6, r6
 8001106:	28ff      	cmp	r0, #255	; 0xff
 8001108:	d1bc      	bne.n	8001084 <__aeabi_fsub+0x2c0>
 800110a:	464b      	mov	r3, r9
 800110c:	e720      	b.n	8000f50 <__aeabi_fsub+0x18c>
 800110e:	4699      	mov	r9, r3
 8001110:	464b      	mov	r3, r9
 8001112:	2500      	movs	r5, #0
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	e72b      	b.n	8000f70 <__aeabi_fsub+0x1ac>
 8001118:	2301      	movs	r3, #1
 800111a:	e740      	b.n	8000f9e <__aeabi_fsub+0x1da>
 800111c:	2200      	movs	r2, #0
 800111e:	2300      	movs	r3, #0
 8001120:	e6a9      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	2200      	movs	r2, #0
 8001126:	03db      	lsls	r3, r3, #15
 8001128:	24ff      	movs	r4, #255	; 0xff
 800112a:	e6a4      	b.n	8000e76 <__aeabi_fsub+0xb2>
 800112c:	2500      	movs	r5, #0
 800112e:	e71c      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001130:	2301      	movs	r3, #1
 8001132:	e7b1      	b.n	8001098 <__aeabi_fsub+0x2d4>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d0f1      	beq.n	800111c <__aeabi_fsub+0x358>
 8001138:	0013      	movs	r3, r2
 800113a:	2500      	movs	r5, #0
 800113c:	e6fc      	b.n	8000f38 <__aeabi_fsub+0x174>
 800113e:	2500      	movs	r5, #0
 8001140:	e6fa      	b.n	8000f38 <__aeabi_fsub+0x174>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	7dffffff 	.word	0x7dffffff
 8001148:	fbffffff 	.word	0xfbffffff

0800114c <__aeabi_f2iz>:
 800114c:	0241      	lsls	r1, r0, #9
 800114e:	0042      	lsls	r2, r0, #1
 8001150:	0fc3      	lsrs	r3, r0, #31
 8001152:	0a49      	lsrs	r1, r1, #9
 8001154:	0e12      	lsrs	r2, r2, #24
 8001156:	2000      	movs	r0, #0
 8001158:	2a7e      	cmp	r2, #126	; 0x7e
 800115a:	d90d      	bls.n	8001178 <__aeabi_f2iz+0x2c>
 800115c:	2a9d      	cmp	r2, #157	; 0x9d
 800115e:	d80c      	bhi.n	800117a <__aeabi_f2iz+0x2e>
 8001160:	2080      	movs	r0, #128	; 0x80
 8001162:	0400      	lsls	r0, r0, #16
 8001164:	4301      	orrs	r1, r0
 8001166:	2a95      	cmp	r2, #149	; 0x95
 8001168:	dc0a      	bgt.n	8001180 <__aeabi_f2iz+0x34>
 800116a:	2096      	movs	r0, #150	; 0x96
 800116c:	1a82      	subs	r2, r0, r2
 800116e:	40d1      	lsrs	r1, r2
 8001170:	4248      	negs	r0, r1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_f2iz+0x2c>
 8001176:	0008      	movs	r0, r1
 8001178:	4770      	bx	lr
 800117a:	4a03      	ldr	r2, [pc, #12]	; (8001188 <__aeabi_f2iz+0x3c>)
 800117c:	1898      	adds	r0, r3, r2
 800117e:	e7fb      	b.n	8001178 <__aeabi_f2iz+0x2c>
 8001180:	3a96      	subs	r2, #150	; 0x96
 8001182:	4091      	lsls	r1, r2
 8001184:	e7f4      	b.n	8001170 <__aeabi_f2iz+0x24>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7fffffff 	.word	0x7fffffff

0800118c <__aeabi_ui2f>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	1e04      	subs	r4, r0, #0
 8001190:	d034      	beq.n	80011fc <__aeabi_ui2f+0x70>
 8001192:	f001 feaf 	bl	8002ef4 <__clzsi2>
 8001196:	229e      	movs	r2, #158	; 0x9e
 8001198:	1a12      	subs	r2, r2, r0
 800119a:	2a96      	cmp	r2, #150	; 0x96
 800119c:	dc07      	bgt.n	80011ae <__aeabi_ui2f+0x22>
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	2808      	cmp	r0, #8
 80011a2:	dd2e      	ble.n	8001202 <__aeabi_ui2f+0x76>
 80011a4:	3808      	subs	r0, #8
 80011a6:	4084      	lsls	r4, r0
 80011a8:	0260      	lsls	r0, r4, #9
 80011aa:	0a40      	lsrs	r0, r0, #9
 80011ac:	e021      	b.n	80011f2 <__aeabi_ui2f+0x66>
 80011ae:	2a99      	cmp	r2, #153	; 0x99
 80011b0:	dd09      	ble.n	80011c6 <__aeabi_ui2f+0x3a>
 80011b2:	0003      	movs	r3, r0
 80011b4:	0021      	movs	r1, r4
 80011b6:	331b      	adds	r3, #27
 80011b8:	4099      	lsls	r1, r3
 80011ba:	1e4b      	subs	r3, r1, #1
 80011bc:	4199      	sbcs	r1, r3
 80011be:	2305      	movs	r3, #5
 80011c0:	1a1b      	subs	r3, r3, r0
 80011c2:	40dc      	lsrs	r4, r3
 80011c4:	430c      	orrs	r4, r1
 80011c6:	2805      	cmp	r0, #5
 80011c8:	dd01      	ble.n	80011ce <__aeabi_ui2f+0x42>
 80011ca:	1f43      	subs	r3, r0, #5
 80011cc:	409c      	lsls	r4, r3
 80011ce:	0023      	movs	r3, r4
 80011d0:	490d      	ldr	r1, [pc, #52]	; (8001208 <__aeabi_ui2f+0x7c>)
 80011d2:	400b      	ands	r3, r1
 80011d4:	0765      	lsls	r5, r4, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_ui2f+0x60>
 80011d8:	250f      	movs	r5, #15
 80011da:	402c      	ands	r4, r5
 80011dc:	2c04      	cmp	r4, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_ui2f+0x60>
 80011e0:	3304      	adds	r3, #4
 80011e2:	015c      	lsls	r4, r3, #5
 80011e4:	d502      	bpl.n	80011ec <__aeabi_ui2f+0x60>
 80011e6:	229f      	movs	r2, #159	; 0x9f
 80011e8:	400b      	ands	r3, r1
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	0a58      	lsrs	r0, r3, #9
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	0240      	lsls	r0, r0, #9
 80011f4:	05d2      	lsls	r2, r2, #23
 80011f6:	0a40      	lsrs	r0, r0, #9
 80011f8:	4310      	orrs	r0, r2
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	2200      	movs	r2, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	e7f7      	b.n	80011f2 <__aeabi_ui2f+0x66>
 8001202:	0260      	lsls	r0, r4, #9
 8001204:	0a40      	lsrs	r0, r0, #9
 8001206:	e7f4      	b.n	80011f2 <__aeabi_ui2f+0x66>
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_dadd>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	464f      	mov	r7, r9
 8001210:	4646      	mov	r6, r8
 8001212:	46d6      	mov	lr, sl
 8001214:	000c      	movs	r4, r1
 8001216:	0309      	lsls	r1, r1, #12
 8001218:	b5c0      	push	{r6, r7, lr}
 800121a:	0a49      	lsrs	r1, r1, #9
 800121c:	0f47      	lsrs	r7, r0, #29
 800121e:	005e      	lsls	r6, r3, #1
 8001220:	4339      	orrs	r1, r7
 8001222:	031f      	lsls	r7, r3, #12
 8001224:	0fdb      	lsrs	r3, r3, #31
 8001226:	469c      	mov	ip, r3
 8001228:	0065      	lsls	r5, r4, #1
 800122a:	0a7b      	lsrs	r3, r7, #9
 800122c:	0f57      	lsrs	r7, r2, #29
 800122e:	431f      	orrs	r7, r3
 8001230:	0d6d      	lsrs	r5, r5, #21
 8001232:	0fe4      	lsrs	r4, r4, #31
 8001234:	0d76      	lsrs	r6, r6, #21
 8001236:	46a1      	mov	r9, r4
 8001238:	00c0      	lsls	r0, r0, #3
 800123a:	46b8      	mov	r8, r7
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	1bab      	subs	r3, r5, r6
 8001240:	4564      	cmp	r4, ip
 8001242:	d07b      	beq.n	800133c <__aeabi_dadd+0x130>
 8001244:	2b00      	cmp	r3, #0
 8001246:	dd5f      	ble.n	8001308 <__aeabi_dadd+0xfc>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_dadd+0x42>
 800124c:	e0a4      	b.n	8001398 <__aeabi_dadd+0x18c>
 800124e:	003e      	movs	r6, r7
 8001250:	4316      	orrs	r6, r2
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x4a>
 8001254:	e112      	b.n	800147c <__aeabi_dadd+0x270>
 8001256:	1e5e      	subs	r6, r3, #1
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x52>
 800125c:	e19e      	b.n	800159c <__aeabi_dadd+0x390>
 800125e:	1a87      	subs	r7, r0, r2
 8001260:	4643      	mov	r3, r8
 8001262:	42b8      	cmp	r0, r7
 8001264:	4180      	sbcs	r0, r0
 8001266:	2501      	movs	r5, #1
 8001268:	1ac9      	subs	r1, r1, r3
 800126a:	4240      	negs	r0, r0
 800126c:	1a09      	subs	r1, r1, r0
 800126e:	020b      	lsls	r3, r1, #8
 8001270:	d400      	bmi.n	8001274 <__aeabi_dadd+0x68>
 8001272:	e131      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 8001274:	0249      	lsls	r1, r1, #9
 8001276:	0a4e      	lsrs	r6, r1, #9
 8001278:	2e00      	cmp	r6, #0
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x72>
 800127c:	e16e      	b.n	800155c <__aeabi_dadd+0x350>
 800127e:	0030      	movs	r0, r6
 8001280:	f001 fe38 	bl	8002ef4 <__clzsi2>
 8001284:	0003      	movs	r3, r0
 8001286:	3b08      	subs	r3, #8
 8001288:	2b1f      	cmp	r3, #31
 800128a:	dd00      	ble.n	800128e <__aeabi_dadd+0x82>
 800128c:	e161      	b.n	8001552 <__aeabi_dadd+0x346>
 800128e:	2220      	movs	r2, #32
 8001290:	0039      	movs	r1, r7
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	409e      	lsls	r6, r3
 8001296:	40d1      	lsrs	r1, r2
 8001298:	409f      	lsls	r7, r3
 800129a:	430e      	orrs	r6, r1
 800129c:	429d      	cmp	r5, r3
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dadd+0x96>
 80012a0:	e151      	b.n	8001546 <__aeabi_dadd+0x33a>
 80012a2:	1b5d      	subs	r5, r3, r5
 80012a4:	1c6b      	adds	r3, r5, #1
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dadd+0xa0>
 80012aa:	e17c      	b.n	80015a6 <__aeabi_dadd+0x39a>
 80012ac:	2120      	movs	r1, #32
 80012ae:	1ac9      	subs	r1, r1, r3
 80012b0:	003d      	movs	r5, r7
 80012b2:	0030      	movs	r0, r6
 80012b4:	408f      	lsls	r7, r1
 80012b6:	4088      	lsls	r0, r1
 80012b8:	40dd      	lsrs	r5, r3
 80012ba:	1e79      	subs	r1, r7, #1
 80012bc:	418f      	sbcs	r7, r1
 80012be:	0031      	movs	r1, r6
 80012c0:	2207      	movs	r2, #7
 80012c2:	4328      	orrs	r0, r5
 80012c4:	40d9      	lsrs	r1, r3
 80012c6:	2500      	movs	r5, #0
 80012c8:	4307      	orrs	r7, r0
 80012ca:	403a      	ands	r2, r7
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d009      	beq.n	80012e4 <__aeabi_dadd+0xd8>
 80012d0:	230f      	movs	r3, #15
 80012d2:	403b      	ands	r3, r7
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d005      	beq.n	80012e4 <__aeabi_dadd+0xd8>
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	42bb      	cmp	r3, r7
 80012dc:	41bf      	sbcs	r7, r7
 80012de:	427f      	negs	r7, r7
 80012e0:	19c9      	adds	r1, r1, r7
 80012e2:	001f      	movs	r7, r3
 80012e4:	020b      	lsls	r3, r1, #8
 80012e6:	d400      	bmi.n	80012ea <__aeabi_dadd+0xde>
 80012e8:	e226      	b.n	8001738 <__aeabi_dadd+0x52c>
 80012ea:	1c6a      	adds	r2, r5, #1
 80012ec:	4bc6      	ldr	r3, [pc, #792]	; (8001608 <__aeabi_dadd+0x3fc>)
 80012ee:	0555      	lsls	r5, r2, #21
 80012f0:	0d6d      	lsrs	r5, r5, #21
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0xec>
 80012f6:	e106      	b.n	8001506 <__aeabi_dadd+0x2fa>
 80012f8:	4ac4      	ldr	r2, [pc, #784]	; (800160c <__aeabi_dadd+0x400>)
 80012fa:	08ff      	lsrs	r7, r7, #3
 80012fc:	400a      	ands	r2, r1
 80012fe:	0753      	lsls	r3, r2, #29
 8001300:	0252      	lsls	r2, r2, #9
 8001302:	433b      	orrs	r3, r7
 8001304:	0b12      	lsrs	r2, r2, #12
 8001306:	e08e      	b.n	8001426 <__aeabi_dadd+0x21a>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x102>
 800130c:	e0b8      	b.n	8001480 <__aeabi_dadd+0x274>
 800130e:	1c6b      	adds	r3, r5, #1
 8001310:	055b      	lsls	r3, r3, #21
 8001312:	0d5b      	lsrs	r3, r3, #21
 8001314:	2b01      	cmp	r3, #1
 8001316:	dc00      	bgt.n	800131a <__aeabi_dadd+0x10e>
 8001318:	e130      	b.n	800157c <__aeabi_dadd+0x370>
 800131a:	1a87      	subs	r7, r0, r2
 800131c:	4643      	mov	r3, r8
 800131e:	42b8      	cmp	r0, r7
 8001320:	41b6      	sbcs	r6, r6
 8001322:	1acb      	subs	r3, r1, r3
 8001324:	4276      	negs	r6, r6
 8001326:	1b9e      	subs	r6, r3, r6
 8001328:	0233      	lsls	r3, r6, #8
 800132a:	d500      	bpl.n	800132e <__aeabi_dadd+0x122>
 800132c:	e14c      	b.n	80015c8 <__aeabi_dadd+0x3bc>
 800132e:	003b      	movs	r3, r7
 8001330:	4333      	orrs	r3, r6
 8001332:	d1a1      	bne.n	8001278 <__aeabi_dadd+0x6c>
 8001334:	2200      	movs	r2, #0
 8001336:	2400      	movs	r4, #0
 8001338:	2500      	movs	r5, #0
 800133a:	e070      	b.n	800141e <__aeabi_dadd+0x212>
 800133c:	2b00      	cmp	r3, #0
 800133e:	dc00      	bgt.n	8001342 <__aeabi_dadd+0x136>
 8001340:	e0e5      	b.n	800150e <__aeabi_dadd+0x302>
 8001342:	2e00      	cmp	r6, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x13c>
 8001346:	e083      	b.n	8001450 <__aeabi_dadd+0x244>
 8001348:	4eaf      	ldr	r6, [pc, #700]	; (8001608 <__aeabi_dadd+0x3fc>)
 800134a:	42b5      	cmp	r5, r6
 800134c:	d060      	beq.n	8001410 <__aeabi_dadd+0x204>
 800134e:	2680      	movs	r6, #128	; 0x80
 8001350:	0436      	lsls	r6, r6, #16
 8001352:	4337      	orrs	r7, r6
 8001354:	46b8      	mov	r8, r7
 8001356:	2b38      	cmp	r3, #56	; 0x38
 8001358:	dc00      	bgt.n	800135c <__aeabi_dadd+0x150>
 800135a:	e13e      	b.n	80015da <__aeabi_dadd+0x3ce>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	001f      	movs	r7, r3
 8001362:	1e7a      	subs	r2, r7, #1
 8001364:	4197      	sbcs	r7, r2
 8001366:	183f      	adds	r7, r7, r0
 8001368:	4287      	cmp	r7, r0
 800136a:	4180      	sbcs	r0, r0
 800136c:	4240      	negs	r0, r0
 800136e:	1809      	adds	r1, r1, r0
 8001370:	020b      	lsls	r3, r1, #8
 8001372:	d400      	bmi.n	8001376 <__aeabi_dadd+0x16a>
 8001374:	e0b0      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 8001376:	4ba4      	ldr	r3, [pc, #656]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001378:	3501      	adds	r5, #1
 800137a:	429d      	cmp	r5, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x174>
 800137e:	e0c3      	b.n	8001508 <__aeabi_dadd+0x2fc>
 8001380:	4aa2      	ldr	r2, [pc, #648]	; (800160c <__aeabi_dadd+0x400>)
 8001382:	087b      	lsrs	r3, r7, #1
 8001384:	400a      	ands	r2, r1
 8001386:	2101      	movs	r1, #1
 8001388:	400f      	ands	r7, r1
 800138a:	431f      	orrs	r7, r3
 800138c:	0851      	lsrs	r1, r2, #1
 800138e:	07d3      	lsls	r3, r2, #31
 8001390:	2207      	movs	r2, #7
 8001392:	431f      	orrs	r7, r3
 8001394:	403a      	ands	r2, r7
 8001396:	e799      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001398:	4e9b      	ldr	r6, [pc, #620]	; (8001608 <__aeabi_dadd+0x3fc>)
 800139a:	42b5      	cmp	r5, r6
 800139c:	d038      	beq.n	8001410 <__aeabi_dadd+0x204>
 800139e:	2680      	movs	r6, #128	; 0x80
 80013a0:	0436      	lsls	r6, r6, #16
 80013a2:	4337      	orrs	r7, r6
 80013a4:	46b8      	mov	r8, r7
 80013a6:	2b38      	cmp	r3, #56	; 0x38
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0x1a0>
 80013aa:	e0dc      	b.n	8001566 <__aeabi_dadd+0x35a>
 80013ac:	2b1f      	cmp	r3, #31
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dadd+0x1a6>
 80013b0:	e130      	b.n	8001614 <__aeabi_dadd+0x408>
 80013b2:	001e      	movs	r6, r3
 80013b4:	4647      	mov	r7, r8
 80013b6:	3e20      	subs	r6, #32
 80013b8:	40f7      	lsrs	r7, r6
 80013ba:	46bc      	mov	ip, r7
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d004      	beq.n	80013ca <__aeabi_dadd+0x1be>
 80013c0:	2640      	movs	r6, #64	; 0x40
 80013c2:	1af3      	subs	r3, r6, r3
 80013c4:	4646      	mov	r6, r8
 80013c6:	409e      	lsls	r6, r3
 80013c8:	4332      	orrs	r2, r6
 80013ca:	0017      	movs	r7, r2
 80013cc:	4663      	mov	r3, ip
 80013ce:	1e7a      	subs	r2, r7, #1
 80013d0:	4197      	sbcs	r7, r2
 80013d2:	431f      	orrs	r7, r3
 80013d4:	e0cc      	b.n	8001570 <__aeabi_dadd+0x364>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x1d0>
 80013da:	e204      	b.n	80017e6 <__aeabi_dadd+0x5da>
 80013dc:	4643      	mov	r3, r8
 80013de:	4313      	orrs	r3, r2
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x1d8>
 80013e2:	e159      	b.n	8001698 <__aeabi_dadd+0x48c>
 80013e4:	074b      	lsls	r3, r1, #29
 80013e6:	08c0      	lsrs	r0, r0, #3
 80013e8:	4318      	orrs	r0, r3
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	08c9      	lsrs	r1, r1, #3
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4219      	tst	r1, r3
 80013f2:	d008      	beq.n	8001406 <__aeabi_dadd+0x1fa>
 80013f4:	4645      	mov	r5, r8
 80013f6:	08ed      	lsrs	r5, r5, #3
 80013f8:	421d      	tst	r5, r3
 80013fa:	d104      	bne.n	8001406 <__aeabi_dadd+0x1fa>
 80013fc:	4643      	mov	r3, r8
 80013fe:	08d0      	lsrs	r0, r2, #3
 8001400:	0759      	lsls	r1, r3, #29
 8001402:	4308      	orrs	r0, r1
 8001404:	0029      	movs	r1, r5
 8001406:	0f42      	lsrs	r2, r0, #29
 8001408:	00c9      	lsls	r1, r1, #3
 800140a:	4d7f      	ldr	r5, [pc, #508]	; (8001608 <__aeabi_dadd+0x3fc>)
 800140c:	4311      	orrs	r1, r2
 800140e:	00c0      	lsls	r0, r0, #3
 8001410:	074b      	lsls	r3, r1, #29
 8001412:	08ca      	lsrs	r2, r1, #3
 8001414:	497c      	ldr	r1, [pc, #496]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001416:	08c0      	lsrs	r0, r0, #3
 8001418:	4303      	orrs	r3, r0
 800141a:	428d      	cmp	r5, r1
 800141c:	d068      	beq.n	80014f0 <__aeabi_dadd+0x2e4>
 800141e:	0312      	lsls	r2, r2, #12
 8001420:	056d      	lsls	r5, r5, #21
 8001422:	0b12      	lsrs	r2, r2, #12
 8001424:	0d6d      	lsrs	r5, r5, #21
 8001426:	2100      	movs	r1, #0
 8001428:	0312      	lsls	r2, r2, #12
 800142a:	0018      	movs	r0, r3
 800142c:	0b13      	lsrs	r3, r2, #12
 800142e:	0d0a      	lsrs	r2, r1, #20
 8001430:	0512      	lsls	r2, r2, #20
 8001432:	431a      	orrs	r2, r3
 8001434:	4b76      	ldr	r3, [pc, #472]	; (8001610 <__aeabi_dadd+0x404>)
 8001436:	052d      	lsls	r5, r5, #20
 8001438:	4013      	ands	r3, r2
 800143a:	432b      	orrs	r3, r5
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	07e4      	lsls	r4, r4, #31
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	4323      	orrs	r3, r4
 8001444:	0019      	movs	r1, r3
 8001446:	bc1c      	pop	{r2, r3, r4}
 8001448:	4690      	mov	r8, r2
 800144a:	4699      	mov	r9, r3
 800144c:	46a2      	mov	sl, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	003e      	movs	r6, r7
 8001452:	4316      	orrs	r6, r2
 8001454:	d012      	beq.n	800147c <__aeabi_dadd+0x270>
 8001456:	1e5e      	subs	r6, r3, #1
 8001458:	2e00      	cmp	r6, #0
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x252>
 800145c:	e100      	b.n	8001660 <__aeabi_dadd+0x454>
 800145e:	1887      	adds	r7, r0, r2
 8001460:	4287      	cmp	r7, r0
 8001462:	4180      	sbcs	r0, r0
 8001464:	4441      	add	r1, r8
 8001466:	4240      	negs	r0, r0
 8001468:	1809      	adds	r1, r1, r0
 800146a:	2501      	movs	r5, #1
 800146c:	020b      	lsls	r3, r1, #8
 800146e:	d533      	bpl.n	80014d8 <__aeabi_dadd+0x2cc>
 8001470:	2502      	movs	r5, #2
 8001472:	e785      	b.n	8001380 <__aeabi_dadd+0x174>
 8001474:	4664      	mov	r4, ip
 8001476:	0033      	movs	r3, r6
 8001478:	4641      	mov	r1, r8
 800147a:	0010      	movs	r0, r2
 800147c:	001d      	movs	r5, r3
 800147e:	e7c7      	b.n	8001410 <__aeabi_dadd+0x204>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x27a>
 8001484:	e0da      	b.n	800163c <__aeabi_dadd+0x430>
 8001486:	000c      	movs	r4, r1
 8001488:	4304      	orrs	r4, r0
 800148a:	d0f3      	beq.n	8001474 <__aeabi_dadd+0x268>
 800148c:	1c5c      	adds	r4, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x286>
 8001490:	e19f      	b.n	80017d2 <__aeabi_dadd+0x5c6>
 8001492:	4c5d      	ldr	r4, [pc, #372]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001494:	42a6      	cmp	r6, r4
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x28e>
 8001498:	e12f      	b.n	80016fa <__aeabi_dadd+0x4ee>
 800149a:	43db      	mvns	r3, r3
 800149c:	2b38      	cmp	r3, #56	; 0x38
 800149e:	dd00      	ble.n	80014a2 <__aeabi_dadd+0x296>
 80014a0:	e166      	b.n	8001770 <__aeabi_dadd+0x564>
 80014a2:	2b1f      	cmp	r3, #31
 80014a4:	dd00      	ble.n	80014a8 <__aeabi_dadd+0x29c>
 80014a6:	e183      	b.n	80017b0 <__aeabi_dadd+0x5a4>
 80014a8:	2420      	movs	r4, #32
 80014aa:	0005      	movs	r5, r0
 80014ac:	1ae4      	subs	r4, r4, r3
 80014ae:	000f      	movs	r7, r1
 80014b0:	40dd      	lsrs	r5, r3
 80014b2:	40d9      	lsrs	r1, r3
 80014b4:	40a0      	lsls	r0, r4
 80014b6:	4643      	mov	r3, r8
 80014b8:	40a7      	lsls	r7, r4
 80014ba:	1a5b      	subs	r3, r3, r1
 80014bc:	1e44      	subs	r4, r0, #1
 80014be:	41a0      	sbcs	r0, r4
 80014c0:	4698      	mov	r8, r3
 80014c2:	432f      	orrs	r7, r5
 80014c4:	4338      	orrs	r0, r7
 80014c6:	1a17      	subs	r7, r2, r0
 80014c8:	42ba      	cmp	r2, r7
 80014ca:	4192      	sbcs	r2, r2
 80014cc:	4643      	mov	r3, r8
 80014ce:	4252      	negs	r2, r2
 80014d0:	1a99      	subs	r1, r3, r2
 80014d2:	4664      	mov	r4, ip
 80014d4:	0035      	movs	r5, r6
 80014d6:	e6ca      	b.n	800126e <__aeabi_dadd+0x62>
 80014d8:	2207      	movs	r2, #7
 80014da:	403a      	ands	r2, r7
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x2d6>
 80014e0:	e6f6      	b.n	80012d0 <__aeabi_dadd+0xc4>
 80014e2:	074b      	lsls	r3, r1, #29
 80014e4:	08ca      	lsrs	r2, r1, #3
 80014e6:	4948      	ldr	r1, [pc, #288]	; (8001608 <__aeabi_dadd+0x3fc>)
 80014e8:	08ff      	lsrs	r7, r7, #3
 80014ea:	433b      	orrs	r3, r7
 80014ec:	428d      	cmp	r5, r1
 80014ee:	d196      	bne.n	800141e <__aeabi_dadd+0x212>
 80014f0:	0019      	movs	r1, r3
 80014f2:	4311      	orrs	r1, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x2ec>
 80014f6:	e19e      	b.n	8001836 <__aeabi_dadd+0x62a>
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0309      	lsls	r1, r1, #12
 80014fc:	430a      	orrs	r2, r1
 80014fe:	0312      	lsls	r2, r2, #12
 8001500:	0b12      	lsrs	r2, r2, #12
 8001502:	4d41      	ldr	r5, [pc, #260]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001504:	e78f      	b.n	8001426 <__aeabi_dadd+0x21a>
 8001506:	0015      	movs	r5, r2
 8001508:	2200      	movs	r2, #0
 800150a:	2300      	movs	r3, #0
 800150c:	e78b      	b.n	8001426 <__aeabi_dadd+0x21a>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d000      	beq.n	8001514 <__aeabi_dadd+0x308>
 8001512:	e0c7      	b.n	80016a4 <__aeabi_dadd+0x498>
 8001514:	1c6b      	adds	r3, r5, #1
 8001516:	055f      	lsls	r7, r3, #21
 8001518:	0d7f      	lsrs	r7, r7, #21
 800151a:	2f01      	cmp	r7, #1
 800151c:	dc00      	bgt.n	8001520 <__aeabi_dadd+0x314>
 800151e:	e0f1      	b.n	8001704 <__aeabi_dadd+0x4f8>
 8001520:	4d39      	ldr	r5, [pc, #228]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001522:	42ab      	cmp	r3, r5
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x31c>
 8001526:	e0b9      	b.n	800169c <__aeabi_dadd+0x490>
 8001528:	1885      	adds	r5, r0, r2
 800152a:	000a      	movs	r2, r1
 800152c:	4285      	cmp	r5, r0
 800152e:	4189      	sbcs	r1, r1
 8001530:	4442      	add	r2, r8
 8001532:	4249      	negs	r1, r1
 8001534:	1851      	adds	r1, r2, r1
 8001536:	2207      	movs	r2, #7
 8001538:	07cf      	lsls	r7, r1, #31
 800153a:	086d      	lsrs	r5, r5, #1
 800153c:	432f      	orrs	r7, r5
 800153e:	0849      	lsrs	r1, r1, #1
 8001540:	403a      	ands	r2, r7
 8001542:	001d      	movs	r5, r3
 8001544:	e6c2      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001546:	2207      	movs	r2, #7
 8001548:	4930      	ldr	r1, [pc, #192]	; (800160c <__aeabi_dadd+0x400>)
 800154a:	1aed      	subs	r5, r5, r3
 800154c:	4031      	ands	r1, r6
 800154e:	403a      	ands	r2, r7
 8001550:	e6bc      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001552:	003e      	movs	r6, r7
 8001554:	3828      	subs	r0, #40	; 0x28
 8001556:	4086      	lsls	r6, r0
 8001558:	2700      	movs	r7, #0
 800155a:	e69f      	b.n	800129c <__aeabi_dadd+0x90>
 800155c:	0038      	movs	r0, r7
 800155e:	f001 fcc9 	bl	8002ef4 <__clzsi2>
 8001562:	3020      	adds	r0, #32
 8001564:	e68e      	b.n	8001284 <__aeabi_dadd+0x78>
 8001566:	4643      	mov	r3, r8
 8001568:	4313      	orrs	r3, r2
 800156a:	001f      	movs	r7, r3
 800156c:	1e7a      	subs	r2, r7, #1
 800156e:	4197      	sbcs	r7, r2
 8001570:	1bc7      	subs	r7, r0, r7
 8001572:	42b8      	cmp	r0, r7
 8001574:	4180      	sbcs	r0, r0
 8001576:	4240      	negs	r0, r0
 8001578:	1a09      	subs	r1, r1, r0
 800157a:	e678      	b.n	800126e <__aeabi_dadd+0x62>
 800157c:	000e      	movs	r6, r1
 800157e:	003b      	movs	r3, r7
 8001580:	4306      	orrs	r6, r0
 8001582:	4313      	orrs	r3, r2
 8001584:	2d00      	cmp	r5, #0
 8001586:	d161      	bne.n	800164c <__aeabi_dadd+0x440>
 8001588:	2e00      	cmp	r6, #0
 800158a:	d000      	beq.n	800158e <__aeabi_dadd+0x382>
 800158c:	e0f4      	b.n	8001778 <__aeabi_dadd+0x56c>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x388>
 8001592:	e11b      	b.n	80017cc <__aeabi_dadd+0x5c0>
 8001594:	4664      	mov	r4, ip
 8001596:	0039      	movs	r1, r7
 8001598:	0010      	movs	r0, r2
 800159a:	e739      	b.n	8001410 <__aeabi_dadd+0x204>
 800159c:	4f1a      	ldr	r7, [pc, #104]	; (8001608 <__aeabi_dadd+0x3fc>)
 800159e:	42bb      	cmp	r3, r7
 80015a0:	d07a      	beq.n	8001698 <__aeabi_dadd+0x48c>
 80015a2:	0033      	movs	r3, r6
 80015a4:	e6ff      	b.n	80013a6 <__aeabi_dadd+0x19a>
 80015a6:	0030      	movs	r0, r6
 80015a8:	3d1f      	subs	r5, #31
 80015aa:	40e8      	lsrs	r0, r5
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d003      	beq.n	80015b8 <__aeabi_dadd+0x3ac>
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	1acb      	subs	r3, r1, r3
 80015b4:	409e      	lsls	r6, r3
 80015b6:	4337      	orrs	r7, r6
 80015b8:	1e7b      	subs	r3, r7, #1
 80015ba:	419f      	sbcs	r7, r3
 80015bc:	2207      	movs	r2, #7
 80015be:	4307      	orrs	r7, r0
 80015c0:	403a      	ands	r2, r7
 80015c2:	2100      	movs	r1, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	e789      	b.n	80014dc <__aeabi_dadd+0x2d0>
 80015c8:	1a17      	subs	r7, r2, r0
 80015ca:	4643      	mov	r3, r8
 80015cc:	42ba      	cmp	r2, r7
 80015ce:	41b6      	sbcs	r6, r6
 80015d0:	1a59      	subs	r1, r3, r1
 80015d2:	4276      	negs	r6, r6
 80015d4:	1b8e      	subs	r6, r1, r6
 80015d6:	4664      	mov	r4, ip
 80015d8:	e64e      	b.n	8001278 <__aeabi_dadd+0x6c>
 80015da:	2b1f      	cmp	r3, #31
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_dadd+0x3d4>
 80015de:	e0ad      	b.n	800173c <__aeabi_dadd+0x530>
 80015e0:	2620      	movs	r6, #32
 80015e2:	4647      	mov	r7, r8
 80015e4:	1af6      	subs	r6, r6, r3
 80015e6:	40b7      	lsls	r7, r6
 80015e8:	46b9      	mov	r9, r7
 80015ea:	0017      	movs	r7, r2
 80015ec:	46b2      	mov	sl, r6
 80015ee:	40df      	lsrs	r7, r3
 80015f0:	464e      	mov	r6, r9
 80015f2:	433e      	orrs	r6, r7
 80015f4:	0037      	movs	r7, r6
 80015f6:	4656      	mov	r6, sl
 80015f8:	40b2      	lsls	r2, r6
 80015fa:	1e56      	subs	r6, r2, #1
 80015fc:	41b2      	sbcs	r2, r6
 80015fe:	4317      	orrs	r7, r2
 8001600:	4642      	mov	r2, r8
 8001602:	40da      	lsrs	r2, r3
 8001604:	1889      	adds	r1, r1, r2
 8001606:	e6ae      	b.n	8001366 <__aeabi_dadd+0x15a>
 8001608:	000007ff 	.word	0x000007ff
 800160c:	ff7fffff 	.word	0xff7fffff
 8001610:	800fffff 	.word	0x800fffff
 8001614:	2620      	movs	r6, #32
 8001616:	4647      	mov	r7, r8
 8001618:	1af6      	subs	r6, r6, r3
 800161a:	40b7      	lsls	r7, r6
 800161c:	46b9      	mov	r9, r7
 800161e:	0017      	movs	r7, r2
 8001620:	46b2      	mov	sl, r6
 8001622:	40df      	lsrs	r7, r3
 8001624:	464e      	mov	r6, r9
 8001626:	433e      	orrs	r6, r7
 8001628:	0037      	movs	r7, r6
 800162a:	4656      	mov	r6, sl
 800162c:	40b2      	lsls	r2, r6
 800162e:	1e56      	subs	r6, r2, #1
 8001630:	41b2      	sbcs	r2, r6
 8001632:	4317      	orrs	r7, r2
 8001634:	4642      	mov	r2, r8
 8001636:	40da      	lsrs	r2, r3
 8001638:	1a89      	subs	r1, r1, r2
 800163a:	e799      	b.n	8001570 <__aeabi_dadd+0x364>
 800163c:	4c7f      	ldr	r4, [pc, #508]	; (800183c <__aeabi_dadd+0x630>)
 800163e:	42a6      	cmp	r6, r4
 8001640:	d05b      	beq.n	80016fa <__aeabi_dadd+0x4ee>
 8001642:	2480      	movs	r4, #128	; 0x80
 8001644:	0424      	lsls	r4, r4, #16
 8001646:	425b      	negs	r3, r3
 8001648:	4321      	orrs	r1, r4
 800164a:	e727      	b.n	800149c <__aeabi_dadd+0x290>
 800164c:	2e00      	cmp	r6, #0
 800164e:	d10c      	bne.n	800166a <__aeabi_dadd+0x45e>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x44a>
 8001654:	e0cb      	b.n	80017ee <__aeabi_dadd+0x5e2>
 8001656:	4664      	mov	r4, ip
 8001658:	0039      	movs	r1, r7
 800165a:	0010      	movs	r0, r2
 800165c:	4d77      	ldr	r5, [pc, #476]	; (800183c <__aeabi_dadd+0x630>)
 800165e:	e6d7      	b.n	8001410 <__aeabi_dadd+0x204>
 8001660:	4f76      	ldr	r7, [pc, #472]	; (800183c <__aeabi_dadd+0x630>)
 8001662:	42bb      	cmp	r3, r7
 8001664:	d018      	beq.n	8001698 <__aeabi_dadd+0x48c>
 8001666:	0033      	movs	r3, r6
 8001668:	e675      	b.n	8001356 <__aeabi_dadd+0x14a>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <__aeabi_dadd+0x48c>
 800166e:	074b      	lsls	r3, r1, #29
 8001670:	08c0      	lsrs	r0, r0, #3
 8001672:	4318      	orrs	r0, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	08c9      	lsrs	r1, r1, #3
 8001678:	031b      	lsls	r3, r3, #12
 800167a:	4219      	tst	r1, r3
 800167c:	d007      	beq.n	800168e <__aeabi_dadd+0x482>
 800167e:	08fc      	lsrs	r4, r7, #3
 8001680:	421c      	tst	r4, r3
 8001682:	d104      	bne.n	800168e <__aeabi_dadd+0x482>
 8001684:	0779      	lsls	r1, r7, #29
 8001686:	08d0      	lsrs	r0, r2, #3
 8001688:	4308      	orrs	r0, r1
 800168a:	46e1      	mov	r9, ip
 800168c:	0021      	movs	r1, r4
 800168e:	464c      	mov	r4, r9
 8001690:	0f42      	lsrs	r2, r0, #29
 8001692:	00c9      	lsls	r1, r1, #3
 8001694:	4311      	orrs	r1, r2
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	4d68      	ldr	r5, [pc, #416]	; (800183c <__aeabi_dadd+0x630>)
 800169a:	e6b9      	b.n	8001410 <__aeabi_dadd+0x204>
 800169c:	001d      	movs	r5, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	2300      	movs	r3, #0
 80016a2:	e6c0      	b.n	8001426 <__aeabi_dadd+0x21a>
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d15b      	bne.n	8001760 <__aeabi_dadd+0x554>
 80016a8:	000d      	movs	r5, r1
 80016aa:	4305      	orrs	r5, r0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x4a4>
 80016ae:	e6e2      	b.n	8001476 <__aeabi_dadd+0x26a>
 80016b0:	1c5d      	adds	r5, r3, #1
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x4aa>
 80016b4:	e0b0      	b.n	8001818 <__aeabi_dadd+0x60c>
 80016b6:	4d61      	ldr	r5, [pc, #388]	; (800183c <__aeabi_dadd+0x630>)
 80016b8:	42ae      	cmp	r6, r5
 80016ba:	d01f      	beq.n	80016fc <__aeabi_dadd+0x4f0>
 80016bc:	43db      	mvns	r3, r3
 80016be:	2b38      	cmp	r3, #56	; 0x38
 80016c0:	dc71      	bgt.n	80017a6 <__aeabi_dadd+0x59a>
 80016c2:	2b1f      	cmp	r3, #31
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dadd+0x4bc>
 80016c6:	e096      	b.n	80017f6 <__aeabi_dadd+0x5ea>
 80016c8:	2520      	movs	r5, #32
 80016ca:	000f      	movs	r7, r1
 80016cc:	1aed      	subs	r5, r5, r3
 80016ce:	40af      	lsls	r7, r5
 80016d0:	46b9      	mov	r9, r7
 80016d2:	0007      	movs	r7, r0
 80016d4:	46aa      	mov	sl, r5
 80016d6:	40df      	lsrs	r7, r3
 80016d8:	464d      	mov	r5, r9
 80016da:	433d      	orrs	r5, r7
 80016dc:	002f      	movs	r7, r5
 80016de:	4655      	mov	r5, sl
 80016e0:	40a8      	lsls	r0, r5
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	1e45      	subs	r5, r0, #1
 80016e6:	41a8      	sbcs	r0, r5
 80016e8:	4488      	add	r8, r1
 80016ea:	4307      	orrs	r7, r0
 80016ec:	18bf      	adds	r7, r7, r2
 80016ee:	4297      	cmp	r7, r2
 80016f0:	4192      	sbcs	r2, r2
 80016f2:	4251      	negs	r1, r2
 80016f4:	4441      	add	r1, r8
 80016f6:	0035      	movs	r5, r6
 80016f8:	e63a      	b.n	8001370 <__aeabi_dadd+0x164>
 80016fa:	4664      	mov	r4, ip
 80016fc:	0035      	movs	r5, r6
 80016fe:	4641      	mov	r1, r8
 8001700:	0010      	movs	r0, r2
 8001702:	e685      	b.n	8001410 <__aeabi_dadd+0x204>
 8001704:	000b      	movs	r3, r1
 8001706:	4303      	orrs	r3, r0
 8001708:	2d00      	cmp	r5, #0
 800170a:	d000      	beq.n	800170e <__aeabi_dadd+0x502>
 800170c:	e663      	b.n	80013d6 <__aeabi_dadd+0x1ca>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f5      	beq.n	80016fe <__aeabi_dadd+0x4f2>
 8001712:	4643      	mov	r3, r8
 8001714:	4313      	orrs	r3, r2
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x50e>
 8001718:	e67a      	b.n	8001410 <__aeabi_dadd+0x204>
 800171a:	1887      	adds	r7, r0, r2
 800171c:	4287      	cmp	r7, r0
 800171e:	4180      	sbcs	r0, r0
 8001720:	2207      	movs	r2, #7
 8001722:	4441      	add	r1, r8
 8001724:	4240      	negs	r0, r0
 8001726:	1809      	adds	r1, r1, r0
 8001728:	403a      	ands	r2, r7
 800172a:	020b      	lsls	r3, r1, #8
 800172c:	d400      	bmi.n	8001730 <__aeabi_dadd+0x524>
 800172e:	e6d5      	b.n	80014dc <__aeabi_dadd+0x2d0>
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <__aeabi_dadd+0x634>)
 8001732:	3501      	adds	r5, #1
 8001734:	4019      	ands	r1, r3
 8001736:	e5c9      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001738:	0038      	movs	r0, r7
 800173a:	e669      	b.n	8001410 <__aeabi_dadd+0x204>
 800173c:	001e      	movs	r6, r3
 800173e:	4647      	mov	r7, r8
 8001740:	3e20      	subs	r6, #32
 8001742:	40f7      	lsrs	r7, r6
 8001744:	46bc      	mov	ip, r7
 8001746:	2b20      	cmp	r3, #32
 8001748:	d004      	beq.n	8001754 <__aeabi_dadd+0x548>
 800174a:	2640      	movs	r6, #64	; 0x40
 800174c:	1af3      	subs	r3, r6, r3
 800174e:	4646      	mov	r6, r8
 8001750:	409e      	lsls	r6, r3
 8001752:	4332      	orrs	r2, r6
 8001754:	0017      	movs	r7, r2
 8001756:	4663      	mov	r3, ip
 8001758:	1e7a      	subs	r2, r7, #1
 800175a:	4197      	sbcs	r7, r2
 800175c:	431f      	orrs	r7, r3
 800175e:	e602      	b.n	8001366 <__aeabi_dadd+0x15a>
 8001760:	4d36      	ldr	r5, [pc, #216]	; (800183c <__aeabi_dadd+0x630>)
 8001762:	42ae      	cmp	r6, r5
 8001764:	d0ca      	beq.n	80016fc <__aeabi_dadd+0x4f0>
 8001766:	2580      	movs	r5, #128	; 0x80
 8001768:	042d      	lsls	r5, r5, #16
 800176a:	425b      	negs	r3, r3
 800176c:	4329      	orrs	r1, r5
 800176e:	e7a6      	b.n	80016be <__aeabi_dadd+0x4b2>
 8001770:	4308      	orrs	r0, r1
 8001772:	1e41      	subs	r1, r0, #1
 8001774:	4188      	sbcs	r0, r1
 8001776:	e6a6      	b.n	80014c6 <__aeabi_dadd+0x2ba>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x572>
 800177c:	e648      	b.n	8001410 <__aeabi_dadd+0x204>
 800177e:	1a87      	subs	r7, r0, r2
 8001780:	4643      	mov	r3, r8
 8001782:	42b8      	cmp	r0, r7
 8001784:	41b6      	sbcs	r6, r6
 8001786:	1acb      	subs	r3, r1, r3
 8001788:	4276      	negs	r6, r6
 800178a:	1b9e      	subs	r6, r3, r6
 800178c:	0233      	lsls	r3, r6, #8
 800178e:	d54b      	bpl.n	8001828 <__aeabi_dadd+0x61c>
 8001790:	1a17      	subs	r7, r2, r0
 8001792:	4643      	mov	r3, r8
 8001794:	42ba      	cmp	r2, r7
 8001796:	4192      	sbcs	r2, r2
 8001798:	1a59      	subs	r1, r3, r1
 800179a:	4252      	negs	r2, r2
 800179c:	1a89      	subs	r1, r1, r2
 800179e:	2207      	movs	r2, #7
 80017a0:	4664      	mov	r4, ip
 80017a2:	403a      	ands	r2, r7
 80017a4:	e592      	b.n	80012cc <__aeabi_dadd+0xc0>
 80017a6:	4301      	orrs	r1, r0
 80017a8:	000f      	movs	r7, r1
 80017aa:	1e79      	subs	r1, r7, #1
 80017ac:	418f      	sbcs	r7, r1
 80017ae:	e79d      	b.n	80016ec <__aeabi_dadd+0x4e0>
 80017b0:	001c      	movs	r4, r3
 80017b2:	000f      	movs	r7, r1
 80017b4:	3c20      	subs	r4, #32
 80017b6:	40e7      	lsrs	r7, r4
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d003      	beq.n	80017c4 <__aeabi_dadd+0x5b8>
 80017bc:	2440      	movs	r4, #64	; 0x40
 80017be:	1ae3      	subs	r3, r4, r3
 80017c0:	4099      	lsls	r1, r3
 80017c2:	4308      	orrs	r0, r1
 80017c4:	1e41      	subs	r1, r0, #1
 80017c6:	4188      	sbcs	r0, r1
 80017c8:	4338      	orrs	r0, r7
 80017ca:	e67c      	b.n	80014c6 <__aeabi_dadd+0x2ba>
 80017cc:	2200      	movs	r2, #0
 80017ce:	2400      	movs	r4, #0
 80017d0:	e625      	b.n	800141e <__aeabi_dadd+0x212>
 80017d2:	1a17      	subs	r7, r2, r0
 80017d4:	4643      	mov	r3, r8
 80017d6:	42ba      	cmp	r2, r7
 80017d8:	4192      	sbcs	r2, r2
 80017da:	1a59      	subs	r1, r3, r1
 80017dc:	4252      	negs	r2, r2
 80017de:	1a89      	subs	r1, r1, r2
 80017e0:	4664      	mov	r4, ip
 80017e2:	0035      	movs	r5, r6
 80017e4:	e543      	b.n	800126e <__aeabi_dadd+0x62>
 80017e6:	4641      	mov	r1, r8
 80017e8:	0010      	movs	r0, r2
 80017ea:	4d14      	ldr	r5, [pc, #80]	; (800183c <__aeabi_dadd+0x630>)
 80017ec:	e610      	b.n	8001410 <__aeabi_dadd+0x204>
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	2400      	movs	r4, #0
 80017f2:	0312      	lsls	r2, r2, #12
 80017f4:	e680      	b.n	80014f8 <__aeabi_dadd+0x2ec>
 80017f6:	001d      	movs	r5, r3
 80017f8:	000f      	movs	r7, r1
 80017fa:	3d20      	subs	r5, #32
 80017fc:	40ef      	lsrs	r7, r5
 80017fe:	46bc      	mov	ip, r7
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x600>
 8001804:	2540      	movs	r5, #64	; 0x40
 8001806:	1aeb      	subs	r3, r5, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	0007      	movs	r7, r0
 800180e:	4663      	mov	r3, ip
 8001810:	1e78      	subs	r0, r7, #1
 8001812:	4187      	sbcs	r7, r0
 8001814:	431f      	orrs	r7, r3
 8001816:	e769      	b.n	80016ec <__aeabi_dadd+0x4e0>
 8001818:	1887      	adds	r7, r0, r2
 800181a:	4297      	cmp	r7, r2
 800181c:	419b      	sbcs	r3, r3
 800181e:	4441      	add	r1, r8
 8001820:	425b      	negs	r3, r3
 8001822:	18c9      	adds	r1, r1, r3
 8001824:	0035      	movs	r5, r6
 8001826:	e5a3      	b.n	8001370 <__aeabi_dadd+0x164>
 8001828:	003b      	movs	r3, r7
 800182a:	4333      	orrs	r3, r6
 800182c:	d0ce      	beq.n	80017cc <__aeabi_dadd+0x5c0>
 800182e:	2207      	movs	r2, #7
 8001830:	0031      	movs	r1, r6
 8001832:	403a      	ands	r2, r7
 8001834:	e652      	b.n	80014dc <__aeabi_dadd+0x2d0>
 8001836:	2300      	movs	r3, #0
 8001838:	001a      	movs	r2, r3
 800183a:	e5f4      	b.n	8001426 <__aeabi_dadd+0x21a>
 800183c:	000007ff 	.word	0x000007ff
 8001840:	ff7fffff 	.word	0xff7fffff

08001844 <__aeabi_ddiv>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	4657      	mov	r7, sl
 8001848:	46de      	mov	lr, fp
 800184a:	464e      	mov	r6, r9
 800184c:	4645      	mov	r5, r8
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	4683      	mov	fp, r0
 8001852:	0007      	movs	r7, r0
 8001854:	030e      	lsls	r6, r1, #12
 8001856:	0048      	lsls	r0, r1, #1
 8001858:	b085      	sub	sp, #20
 800185a:	4692      	mov	sl, r2
 800185c:	001c      	movs	r4, r3
 800185e:	0b36      	lsrs	r6, r6, #12
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	0fcd      	lsrs	r5, r1, #31
 8001864:	2800      	cmp	r0, #0
 8001866:	d100      	bne.n	800186a <__aeabi_ddiv+0x26>
 8001868:	e09d      	b.n	80019a6 <__aeabi_ddiv+0x162>
 800186a:	4b95      	ldr	r3, [pc, #596]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 800186c:	4298      	cmp	r0, r3
 800186e:	d039      	beq.n	80018e4 <__aeabi_ddiv+0xa0>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	00f6      	lsls	r6, r6, #3
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431e      	orrs	r6, r3
 8001878:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <__aeabi_ddiv+0x280>)
 800187a:	0f7b      	lsrs	r3, r7, #29
 800187c:	4333      	orrs	r3, r6
 800187e:	4699      	mov	r9, r3
 8001880:	4694      	mov	ip, r2
 8001882:	0003      	movs	r3, r0
 8001884:	4463      	add	r3, ip
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	2600      	movs	r6, #0
 800188c:	00ff      	lsls	r7, r7, #3
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	0323      	lsls	r3, r4, #12
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	4698      	mov	r8, r3
 8001896:	0063      	lsls	r3, r4, #1
 8001898:	0fe4      	lsrs	r4, r4, #31
 800189a:	4652      	mov	r2, sl
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	9401      	str	r4, [sp, #4]
 80018a0:	d100      	bne.n	80018a4 <__aeabi_ddiv+0x60>
 80018a2:	e0b3      	b.n	8001a0c <__aeabi_ddiv+0x1c8>
 80018a4:	4986      	ldr	r1, [pc, #536]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 80018a6:	428b      	cmp	r3, r1
 80018a8:	d100      	bne.n	80018ac <__aeabi_ddiv+0x68>
 80018aa:	e09e      	b.n	80019ea <__aeabi_ddiv+0x1a6>
 80018ac:	4642      	mov	r2, r8
 80018ae:	00d1      	lsls	r1, r2, #3
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	0412      	lsls	r2, r2, #16
 80018b4:	430a      	orrs	r2, r1
 80018b6:	4651      	mov	r1, sl
 80018b8:	0f49      	lsrs	r1, r1, #29
 80018ba:	4311      	orrs	r1, r2
 80018bc:	468b      	mov	fp, r1
 80018be:	4981      	ldr	r1, [pc, #516]	; (8001ac4 <__aeabi_ddiv+0x280>)
 80018c0:	4652      	mov	r2, sl
 80018c2:	468c      	mov	ip, r1
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	4463      	add	r3, ip
 80018c8:	1acb      	subs	r3, r1, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	00d2      	lsls	r2, r2, #3
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	002b      	movs	r3, r5
 80018d2:	4063      	eors	r3, r4
 80018d4:	469a      	mov	sl, r3
 80018d6:	2e0f      	cmp	r6, #15
 80018d8:	d900      	bls.n	80018dc <__aeabi_ddiv+0x98>
 80018da:	e105      	b.n	8001ae8 <__aeabi_ddiv+0x2a4>
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <__aeabi_ddiv+0x284>)
 80018de:	00b6      	lsls	r6, r6, #2
 80018e0:	599b      	ldr	r3, [r3, r6]
 80018e2:	469f      	mov	pc, r3
 80018e4:	465b      	mov	r3, fp
 80018e6:	4333      	orrs	r3, r6
 80018e8:	4699      	mov	r9, r3
 80018ea:	d000      	beq.n	80018ee <__aeabi_ddiv+0xaa>
 80018ec:	e0b8      	b.n	8001a60 <__aeabi_ddiv+0x21c>
 80018ee:	2302      	movs	r3, #2
 80018f0:	2608      	movs	r6, #8
 80018f2:	2700      	movs	r7, #0
 80018f4:	9000      	str	r0, [sp, #0]
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	e7ca      	b.n	8001890 <__aeabi_ddiv+0x4c>
 80018fa:	46cb      	mov	fp, r9
 80018fc:	003a      	movs	r2, r7
 80018fe:	9902      	ldr	r1, [sp, #8]
 8001900:	9501      	str	r5, [sp, #4]
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	469a      	mov	sl, r3
 8001906:	2902      	cmp	r1, #2
 8001908:	d027      	beq.n	800195a <__aeabi_ddiv+0x116>
 800190a:	2903      	cmp	r1, #3
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0xcc>
 800190e:	e280      	b.n	8001e12 <__aeabi_ddiv+0x5ce>
 8001910:	2901      	cmp	r1, #1
 8001912:	d044      	beq.n	800199e <__aeabi_ddiv+0x15a>
 8001914:	496d      	ldr	r1, [pc, #436]	; (8001acc <__aeabi_ddiv+0x288>)
 8001916:	9b00      	ldr	r3, [sp, #0]
 8001918:	468c      	mov	ip, r1
 800191a:	4463      	add	r3, ip
 800191c:	001c      	movs	r4, r3
 800191e:	2c00      	cmp	r4, #0
 8001920:	dd38      	ble.n	8001994 <__aeabi_ddiv+0x150>
 8001922:	0753      	lsls	r3, r2, #29
 8001924:	d000      	beq.n	8001928 <__aeabi_ddiv+0xe4>
 8001926:	e213      	b.n	8001d50 <__aeabi_ddiv+0x50c>
 8001928:	08d2      	lsrs	r2, r2, #3
 800192a:	465b      	mov	r3, fp
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	d509      	bpl.n	8001944 <__aeabi_ddiv+0x100>
 8001930:	4659      	mov	r1, fp
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <__aeabi_ddiv+0x28c>)
 8001934:	4019      	ands	r1, r3
 8001936:	468b      	mov	fp, r1
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	00c9      	lsls	r1, r1, #3
 800193c:	468c      	mov	ip, r1
 800193e:	9b00      	ldr	r3, [sp, #0]
 8001940:	4463      	add	r3, ip
 8001942:	001c      	movs	r4, r3
 8001944:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <__aeabi_ddiv+0x290>)
 8001946:	429c      	cmp	r4, r3
 8001948:	dc07      	bgt.n	800195a <__aeabi_ddiv+0x116>
 800194a:	465b      	mov	r3, fp
 800194c:	0564      	lsls	r4, r4, #21
 800194e:	075f      	lsls	r7, r3, #29
 8001950:	025b      	lsls	r3, r3, #9
 8001952:	4317      	orrs	r7, r2
 8001954:	0b1b      	lsrs	r3, r3, #12
 8001956:	0d62      	lsrs	r2, r4, #21
 8001958:	e002      	b.n	8001960 <__aeabi_ddiv+0x11c>
 800195a:	2300      	movs	r3, #0
 800195c:	2700      	movs	r7, #0
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001960:	2100      	movs	r1, #0
 8001962:	031b      	lsls	r3, r3, #12
 8001964:	0b1c      	lsrs	r4, r3, #12
 8001966:	0d0b      	lsrs	r3, r1, #20
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	4323      	orrs	r3, r4
 800196c:	0514      	lsls	r4, r2, #20
 800196e:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <__aeabi_ddiv+0x294>)
 8001970:	0038      	movs	r0, r7
 8001972:	4013      	ands	r3, r2
 8001974:	431c      	orrs	r4, r3
 8001976:	4653      	mov	r3, sl
 8001978:	0064      	lsls	r4, r4, #1
 800197a:	07db      	lsls	r3, r3, #31
 800197c:	0864      	lsrs	r4, r4, #1
 800197e:	431c      	orrs	r4, r3
 8001980:	0021      	movs	r1, r4
 8001982:	b005      	add	sp, #20
 8001984:	bc3c      	pop	{r2, r3, r4, r5}
 8001986:	4690      	mov	r8, r2
 8001988:	4699      	mov	r9, r3
 800198a:	46a2      	mov	sl, r4
 800198c:	46ab      	mov	fp, r5
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	2201      	movs	r2, #1
 8001992:	4252      	negs	r2, r2
 8001994:	2301      	movs	r3, #1
 8001996:	1b1b      	subs	r3, r3, r4
 8001998:	2b38      	cmp	r3, #56	; 0x38
 800199a:	dc00      	bgt.n	800199e <__aeabi_ddiv+0x15a>
 800199c:	e1ad      	b.n	8001cfa <__aeabi_ddiv+0x4b6>
 800199e:	2200      	movs	r2, #0
 80019a0:	2300      	movs	r3, #0
 80019a2:	2700      	movs	r7, #0
 80019a4:	e7dc      	b.n	8001960 <__aeabi_ddiv+0x11c>
 80019a6:	465b      	mov	r3, fp
 80019a8:	4333      	orrs	r3, r6
 80019aa:	4699      	mov	r9, r3
 80019ac:	d05e      	beq.n	8001a6c <__aeabi_ddiv+0x228>
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d100      	bne.n	80019b4 <__aeabi_ddiv+0x170>
 80019b2:	e18a      	b.n	8001cca <__aeabi_ddiv+0x486>
 80019b4:	0030      	movs	r0, r6
 80019b6:	f001 fa9d 	bl	8002ef4 <__clzsi2>
 80019ba:	0003      	movs	r3, r0
 80019bc:	3b0b      	subs	r3, #11
 80019be:	2b1c      	cmp	r3, #28
 80019c0:	dd00      	ble.n	80019c4 <__aeabi_ddiv+0x180>
 80019c2:	e17b      	b.n	8001cbc <__aeabi_ddiv+0x478>
 80019c4:	221d      	movs	r2, #29
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	465a      	mov	r2, fp
 80019ca:	0001      	movs	r1, r0
 80019cc:	40da      	lsrs	r2, r3
 80019ce:	3908      	subs	r1, #8
 80019d0:	408e      	lsls	r6, r1
 80019d2:	0013      	movs	r3, r2
 80019d4:	465f      	mov	r7, fp
 80019d6:	4333      	orrs	r3, r6
 80019d8:	4699      	mov	r9, r3
 80019da:	408f      	lsls	r7, r1
 80019dc:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <__aeabi_ddiv+0x298>)
 80019de:	2600      	movs	r6, #0
 80019e0:	1a1b      	subs	r3, r3, r0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	e752      	b.n	8001890 <__aeabi_ddiv+0x4c>
 80019ea:	4641      	mov	r1, r8
 80019ec:	4653      	mov	r3, sl
 80019ee:	430b      	orrs	r3, r1
 80019f0:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <__aeabi_ddiv+0x29c>)
 80019f2:	469b      	mov	fp, r3
 80019f4:	468c      	mov	ip, r1
 80019f6:	9b00      	ldr	r3, [sp, #0]
 80019f8:	4463      	add	r3, ip
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	465b      	mov	r3, fp
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13b      	bne.n	8001a7a <__aeabi_ddiv+0x236>
 8001a02:	2302      	movs	r3, #2
 8001a04:	2200      	movs	r2, #0
 8001a06:	431e      	orrs	r6, r3
 8001a08:	2102      	movs	r1, #2
 8001a0a:	e761      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	469b      	mov	fp, r3
 8001a12:	d037      	beq.n	8001a84 <__aeabi_ddiv+0x240>
 8001a14:	4643      	mov	r3, r8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x1d8>
 8001a1a:	e162      	b.n	8001ce2 <__aeabi_ddiv+0x49e>
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	f001 fa69 	bl	8002ef4 <__clzsi2>
 8001a22:	0003      	movs	r3, r0
 8001a24:	3b0b      	subs	r3, #11
 8001a26:	2b1c      	cmp	r3, #28
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_ddiv+0x1e8>
 8001a2a:	e153      	b.n	8001cd4 <__aeabi_ddiv+0x490>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	4641      	mov	r1, r8
 8001a30:	3a08      	subs	r2, #8
 8001a32:	4091      	lsls	r1, r2
 8001a34:	4688      	mov	r8, r1
 8001a36:	211d      	movs	r1, #29
 8001a38:	1acb      	subs	r3, r1, r3
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	000b      	movs	r3, r1
 8001a40:	4641      	mov	r1, r8
 8001a42:	430b      	orrs	r3, r1
 8001a44:	469b      	mov	fp, r3
 8001a46:	4653      	mov	r3, sl
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	9b00      	ldr	r3, [sp, #0]
 8001a4e:	4925      	ldr	r1, [pc, #148]	; (8001ae4 <__aeabi_ddiv+0x2a0>)
 8001a50:	469c      	mov	ip, r3
 8001a52:	4460      	add	r0, ip
 8001a54:	0003      	movs	r3, r0
 8001a56:	468c      	mov	ip, r1
 8001a58:	4463      	add	r3, ip
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	e737      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a60:	2303      	movs	r3, #3
 8001a62:	46b1      	mov	r9, r6
 8001a64:	9000      	str	r0, [sp, #0]
 8001a66:	260c      	movs	r6, #12
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	e711      	b.n	8001890 <__aeabi_ddiv+0x4c>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	2604      	movs	r6, #4
 8001a74:	2700      	movs	r7, #0
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	e70a      	b.n	8001890 <__aeabi_ddiv+0x4c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	46c3      	mov	fp, r8
 8001a7e:	431e      	orrs	r6, r3
 8001a80:	2103      	movs	r1, #3
 8001a82:	e725      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a84:	3301      	adds	r3, #1
 8001a86:	431e      	orrs	r6, r3
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	e720      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	469a      	mov	sl, r3
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	2700      	movs	r7, #0
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001a9a:	e761      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	4219      	tst	r1, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x264>
 8001aa6:	e0e2      	b.n	8001c6e <__aeabi_ddiv+0x42a>
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	4219      	tst	r1, r3
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_ddiv+0x26c>
 8001aae:	e0de      	b.n	8001c6e <__aeabi_ddiv+0x42a>
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	031b      	lsls	r3, r3, #12
 8001ab4:	0017      	movs	r7, r2
 8001ab6:	0b1b      	lsrs	r3, r3, #12
 8001ab8:	46a2      	mov	sl, r4
 8001aba:	4a01      	ldr	r2, [pc, #4]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001abc:	e750      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff
 8001ac4:	fffffc01 	.word	0xfffffc01
 8001ac8:	08017f88 	.word	0x08017f88
 8001acc:	000003ff 	.word	0x000003ff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	000007fe 	.word	0x000007fe
 8001ad8:	800fffff 	.word	0x800fffff
 8001adc:	fffffc0d 	.word	0xfffffc0d
 8001ae0:	fffff801 	.word	0xfffff801
 8001ae4:	000003f3 	.word	0x000003f3
 8001ae8:	45d9      	cmp	r9, fp
 8001aea:	d900      	bls.n	8001aee <__aeabi_ddiv+0x2aa>
 8001aec:	e0cb      	b.n	8001c86 <__aeabi_ddiv+0x442>
 8001aee:	d100      	bne.n	8001af2 <__aeabi_ddiv+0x2ae>
 8001af0:	e0c6      	b.n	8001c80 <__aeabi_ddiv+0x43c>
 8001af2:	003c      	movs	r4, r7
 8001af4:	4648      	mov	r0, r9
 8001af6:	2700      	movs	r7, #0
 8001af8:	9b00      	ldr	r3, [sp, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	465b      	mov	r3, fp
 8001b00:	0e16      	lsrs	r6, r2, #24
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	431e      	orrs	r6, r3
 8001b06:	0213      	lsls	r3, r2, #8
 8001b08:	4698      	mov	r8, r3
 8001b0a:	0433      	lsls	r3, r6, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	4699      	mov	r9, r3
 8001b10:	0c31      	lsrs	r1, r6, #16
 8001b12:	9101      	str	r1, [sp, #4]
 8001b14:	f7fe fba2 	bl	800025c <__aeabi_uidivmod>
 8001b18:	464a      	mov	r2, r9
 8001b1a:	4342      	muls	r2, r0
 8001b1c:	040b      	lsls	r3, r1, #16
 8001b1e:	0c21      	lsrs	r1, r4, #16
 8001b20:	0005      	movs	r5, r0
 8001b22:	4319      	orrs	r1, r3
 8001b24:	428a      	cmp	r2, r1
 8001b26:	d907      	bls.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	3d01      	subs	r5, #1
 8001b2c:	428e      	cmp	r6, r1
 8001b2e:	d803      	bhi.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b30:	428a      	cmp	r2, r1
 8001b32:	d901      	bls.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b34:	1e85      	subs	r5, r0, #2
 8001b36:	1989      	adds	r1, r1, r6
 8001b38:	1a88      	subs	r0, r1, r2
 8001b3a:	9901      	ldr	r1, [sp, #4]
 8001b3c:	f7fe fb8e 	bl	800025c <__aeabi_uidivmod>
 8001b40:	0409      	lsls	r1, r1, #16
 8001b42:	468c      	mov	ip, r1
 8001b44:	464a      	mov	r2, r9
 8001b46:	0421      	lsls	r1, r4, #16
 8001b48:	4664      	mov	r4, ip
 8001b4a:	4342      	muls	r2, r0
 8001b4c:	0c09      	lsrs	r1, r1, #16
 8001b4e:	0003      	movs	r3, r0
 8001b50:	4321      	orrs	r1, r4
 8001b52:	428a      	cmp	r2, r1
 8001b54:	d904      	bls.n	8001b60 <__aeabi_ddiv+0x31c>
 8001b56:	1989      	adds	r1, r1, r6
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	428e      	cmp	r6, r1
 8001b5c:	d800      	bhi.n	8001b60 <__aeabi_ddiv+0x31c>
 8001b5e:	e0f1      	b.n	8001d44 <__aeabi_ddiv+0x500>
 8001b60:	042d      	lsls	r5, r5, #16
 8001b62:	431d      	orrs	r5, r3
 8001b64:	46ab      	mov	fp, r5
 8001b66:	4643      	mov	r3, r8
 8001b68:	1a89      	subs	r1, r1, r2
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	0c28      	lsrs	r0, r5, #16
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	0c1d      	lsrs	r5, r3, #16
 8001b72:	465b      	mov	r3, fp
 8001b74:	0c14      	lsrs	r4, r2, #16
 8001b76:	0022      	movs	r2, r4
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	435a      	muls	r2, r3
 8001b7e:	9403      	str	r4, [sp, #12]
 8001b80:	436b      	muls	r3, r5
 8001b82:	4344      	muls	r4, r0
 8001b84:	9502      	str	r5, [sp, #8]
 8001b86:	4368      	muls	r0, r5
 8001b88:	191b      	adds	r3, r3, r4
 8001b8a:	0c15      	lsrs	r5, r2, #16
 8001b8c:	18eb      	adds	r3, r5, r3
 8001b8e:	429c      	cmp	r4, r3
 8001b90:	d903      	bls.n	8001b9a <__aeabi_ddiv+0x356>
 8001b92:	2480      	movs	r4, #128	; 0x80
 8001b94:	0264      	lsls	r4, r4, #9
 8001b96:	46a4      	mov	ip, r4
 8001b98:	4460      	add	r0, ip
 8001b9a:	0c1c      	lsrs	r4, r3, #16
 8001b9c:	0415      	lsls	r5, r2, #16
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	0c2d      	lsrs	r5, r5, #16
 8001ba2:	1820      	adds	r0, r4, r0
 8001ba4:	195d      	adds	r5, r3, r5
 8001ba6:	4281      	cmp	r1, r0
 8001ba8:	d377      	bcc.n	8001c9a <__aeabi_ddiv+0x456>
 8001baa:	d073      	beq.n	8001c94 <__aeabi_ddiv+0x450>
 8001bac:	1a0c      	subs	r4, r1, r0
 8001bae:	4aa2      	ldr	r2, [pc, #648]	; (8001e38 <__aeabi_ddiv+0x5f4>)
 8001bb0:	1b7d      	subs	r5, r7, r5
 8001bb2:	42af      	cmp	r7, r5
 8001bb4:	41bf      	sbcs	r7, r7
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	9b00      	ldr	r3, [sp, #0]
 8001bba:	427f      	negs	r7, r7
 8001bbc:	4463      	add	r3, ip
 8001bbe:	1be0      	subs	r0, r4, r7
 8001bc0:	001c      	movs	r4, r3
 8001bc2:	4286      	cmp	r6, r0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0x384>
 8001bc6:	e0db      	b.n	8001d80 <__aeabi_ddiv+0x53c>
 8001bc8:	9901      	ldr	r1, [sp, #4]
 8001bca:	f7fe fb47 	bl	800025c <__aeabi_uidivmod>
 8001bce:	464a      	mov	r2, r9
 8001bd0:	4342      	muls	r2, r0
 8001bd2:	040b      	lsls	r3, r1, #16
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	0007      	movs	r7, r0
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	428a      	cmp	r2, r1
 8001bdc:	d907      	bls.n	8001bee <__aeabi_ddiv+0x3aa>
 8001bde:	1989      	adds	r1, r1, r6
 8001be0:	3f01      	subs	r7, #1
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d803      	bhi.n	8001bee <__aeabi_ddiv+0x3aa>
 8001be6:	428a      	cmp	r2, r1
 8001be8:	d901      	bls.n	8001bee <__aeabi_ddiv+0x3aa>
 8001bea:	1e87      	subs	r7, r0, #2
 8001bec:	1989      	adds	r1, r1, r6
 8001bee:	1a88      	subs	r0, r1, r2
 8001bf0:	9901      	ldr	r1, [sp, #4]
 8001bf2:	f7fe fb33 	bl	800025c <__aeabi_uidivmod>
 8001bf6:	0409      	lsls	r1, r1, #16
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	4689      	mov	r9, r1
 8001bfc:	0429      	lsls	r1, r5, #16
 8001bfe:	464d      	mov	r5, r9
 8001c00:	4342      	muls	r2, r0
 8001c02:	0c09      	lsrs	r1, r1, #16
 8001c04:	0003      	movs	r3, r0
 8001c06:	4329      	orrs	r1, r5
 8001c08:	428a      	cmp	r2, r1
 8001c0a:	d907      	bls.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c0c:	1989      	adds	r1, r1, r6
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	428e      	cmp	r6, r1
 8001c12:	d803      	bhi.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c14:	428a      	cmp	r2, r1
 8001c16:	d901      	bls.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c18:	1e83      	subs	r3, r0, #2
 8001c1a:	1989      	adds	r1, r1, r6
 8001c1c:	043f      	lsls	r7, r7, #16
 8001c1e:	1a89      	subs	r1, r1, r2
 8001c20:	003a      	movs	r2, r7
 8001c22:	9f03      	ldr	r7, [sp, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	0038      	movs	r0, r7
 8001c28:	0413      	lsls	r3, r2, #16
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4358      	muls	r0, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	9802      	ldr	r0, [sp, #8]
 8001c32:	0c15      	lsrs	r5, r2, #16
 8001c34:	436f      	muls	r7, r5
 8001c36:	4343      	muls	r3, r0
 8001c38:	4345      	muls	r5, r0
 8001c3a:	4648      	mov	r0, r9
 8001c3c:	0c00      	lsrs	r0, r0, #16
 8001c3e:	4684      	mov	ip, r0
 8001c40:	19db      	adds	r3, r3, r7
 8001c42:	4463      	add	r3, ip
 8001c44:	429f      	cmp	r7, r3
 8001c46:	d903      	bls.n	8001c50 <__aeabi_ddiv+0x40c>
 8001c48:	2080      	movs	r0, #128	; 0x80
 8001c4a:	0240      	lsls	r0, r0, #9
 8001c4c:	4684      	mov	ip, r0
 8001c4e:	4465      	add	r5, ip
 8001c50:	4648      	mov	r0, r9
 8001c52:	0c1f      	lsrs	r7, r3, #16
 8001c54:	0400      	lsls	r0, r0, #16
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c00      	lsrs	r0, r0, #16
 8001c5a:	197d      	adds	r5, r7, r5
 8001c5c:	1818      	adds	r0, r3, r0
 8001c5e:	42a9      	cmp	r1, r5
 8001c60:	d200      	bcs.n	8001c64 <__aeabi_ddiv+0x420>
 8001c62:	e084      	b.n	8001d6e <__aeabi_ddiv+0x52a>
 8001c64:	d100      	bne.n	8001c68 <__aeabi_ddiv+0x424>
 8001c66:	e07f      	b.n	8001d68 <__aeabi_ddiv+0x524>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	e657      	b.n	800191e <__aeabi_ddiv+0xda>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	464a      	mov	r2, r9
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4313      	orrs	r3, r2
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0b1b      	lsrs	r3, r3, #12
 8001c7a:	46aa      	mov	sl, r5
 8001c7c:	4a6f      	ldr	r2, [pc, #444]	; (8001e3c <__aeabi_ddiv+0x5f8>)
 8001c7e:	e66f      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001c80:	42ba      	cmp	r2, r7
 8001c82:	d900      	bls.n	8001c86 <__aeabi_ddiv+0x442>
 8001c84:	e735      	b.n	8001af2 <__aeabi_ddiv+0x2ae>
 8001c86:	464b      	mov	r3, r9
 8001c88:	07dc      	lsls	r4, r3, #31
 8001c8a:	0858      	lsrs	r0, r3, #1
 8001c8c:	087b      	lsrs	r3, r7, #1
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	07ff      	lsls	r7, r7, #31
 8001c92:	e734      	b.n	8001afe <__aeabi_ddiv+0x2ba>
 8001c94:	2400      	movs	r4, #0
 8001c96:	42af      	cmp	r7, r5
 8001c98:	d289      	bcs.n	8001bae <__aeabi_ddiv+0x36a>
 8001c9a:	4447      	add	r7, r8
 8001c9c:	4547      	cmp	r7, r8
 8001c9e:	41a4      	sbcs	r4, r4
 8001ca0:	465b      	mov	r3, fp
 8001ca2:	4264      	negs	r4, r4
 8001ca4:	19a4      	adds	r4, r4, r6
 8001ca6:	1864      	adds	r4, r4, r1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	42a6      	cmp	r6, r4
 8001cac:	d21e      	bcs.n	8001cec <__aeabi_ddiv+0x4a8>
 8001cae:	42a0      	cmp	r0, r4
 8001cb0:	d86d      	bhi.n	8001d8e <__aeabi_ddiv+0x54a>
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_ddiv+0x472>
 8001cb4:	e0b6      	b.n	8001e24 <__aeabi_ddiv+0x5e0>
 8001cb6:	1a24      	subs	r4, r4, r0
 8001cb8:	469b      	mov	fp, r3
 8001cba:	e778      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	465a      	mov	r2, fp
 8001cc0:	3b28      	subs	r3, #40	; 0x28
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	2700      	movs	r7, #0
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	e688      	b.n	80019dc <__aeabi_ddiv+0x198>
 8001cca:	4658      	mov	r0, fp
 8001ccc:	f001 f912 	bl	8002ef4 <__clzsi2>
 8001cd0:	3020      	adds	r0, #32
 8001cd2:	e672      	b.n	80019ba <__aeabi_ddiv+0x176>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	4652      	mov	r2, sl
 8001cd8:	3b28      	subs	r3, #40	; 0x28
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	4693      	mov	fp, r2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	e6b4      	b.n	8001a4c <__aeabi_ddiv+0x208>
 8001ce2:	4650      	mov	r0, sl
 8001ce4:	f001 f906 	bl	8002ef4 <__clzsi2>
 8001ce8:	3020      	adds	r0, #32
 8001cea:	e69a      	b.n	8001a22 <__aeabi_ddiv+0x1de>
 8001cec:	42a6      	cmp	r6, r4
 8001cee:	d1e2      	bne.n	8001cb6 <__aeabi_ddiv+0x472>
 8001cf0:	45b8      	cmp	r8, r7
 8001cf2:	d9dc      	bls.n	8001cae <__aeabi_ddiv+0x46a>
 8001cf4:	1a34      	subs	r4, r6, r0
 8001cf6:	469b      	mov	fp, r3
 8001cf8:	e759      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001cfa:	2b1f      	cmp	r3, #31
 8001cfc:	dc65      	bgt.n	8001dca <__aeabi_ddiv+0x586>
 8001cfe:	4c50      	ldr	r4, [pc, #320]	; (8001e40 <__aeabi_ddiv+0x5fc>)
 8001d00:	9900      	ldr	r1, [sp, #0]
 8001d02:	46a4      	mov	ip, r4
 8001d04:	465c      	mov	r4, fp
 8001d06:	4461      	add	r1, ip
 8001d08:	0008      	movs	r0, r1
 8001d0a:	408c      	lsls	r4, r1
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	4082      	lsls	r2, r0
 8001d10:	40d9      	lsrs	r1, r3
 8001d12:	1e50      	subs	r0, r2, #1
 8001d14:	4182      	sbcs	r2, r0
 8001d16:	430c      	orrs	r4, r1
 8001d18:	4314      	orrs	r4, r2
 8001d1a:	465a      	mov	r2, fp
 8001d1c:	40da      	lsrs	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	0762      	lsls	r2, r4, #29
 8001d22:	d009      	beq.n	8001d38 <__aeabi_ddiv+0x4f4>
 8001d24:	220f      	movs	r2, #15
 8001d26:	4022      	ands	r2, r4
 8001d28:	2a04      	cmp	r2, #4
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_ddiv+0x4f4>
 8001d2c:	0022      	movs	r2, r4
 8001d2e:	1d14      	adds	r4, r2, #4
 8001d30:	4294      	cmp	r4, r2
 8001d32:	4189      	sbcs	r1, r1
 8001d34:	4249      	negs	r1, r1
 8001d36:	185b      	adds	r3, r3, r1
 8001d38:	021a      	lsls	r2, r3, #8
 8001d3a:	d562      	bpl.n	8001e02 <__aeabi_ddiv+0x5be>
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2700      	movs	r7, #0
 8001d42:	e60d      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d800      	bhi.n	8001d4a <__aeabi_ddiv+0x506>
 8001d48:	e70a      	b.n	8001b60 <__aeabi_ddiv+0x31c>
 8001d4a:	1e83      	subs	r3, r0, #2
 8001d4c:	1989      	adds	r1, r1, r6
 8001d4e:	e707      	b.n	8001b60 <__aeabi_ddiv+0x31c>
 8001d50:	230f      	movs	r3, #15
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d100      	bne.n	8001d5a <__aeabi_ddiv+0x516>
 8001d58:	e5e6      	b.n	8001928 <__aeabi_ddiv+0xe4>
 8001d5a:	1d17      	adds	r7, r2, #4
 8001d5c:	4297      	cmp	r7, r2
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4253      	negs	r3, r2
 8001d62:	449b      	add	fp, r3
 8001d64:	08fa      	lsrs	r2, r7, #3
 8001d66:	e5e0      	b.n	800192a <__aeabi_ddiv+0xe6>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x52a>
 8001d6c:	e5d7      	b.n	800191e <__aeabi_ddiv+0xda>
 8001d6e:	1871      	adds	r1, r6, r1
 8001d70:	1e53      	subs	r3, r2, #1
 8001d72:	42b1      	cmp	r1, r6
 8001d74:	d327      	bcc.n	8001dc6 <__aeabi_ddiv+0x582>
 8001d76:	42a9      	cmp	r1, r5
 8001d78:	d315      	bcc.n	8001da6 <__aeabi_ddiv+0x562>
 8001d7a:	d058      	beq.n	8001e2e <__aeabi_ddiv+0x5ea>
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	e773      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_ddiv+0x542>
 8001d84:	e604      	b.n	8001990 <__aeabi_ddiv+0x14c>
 8001d86:	2301      	movs	r3, #1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	449b      	add	fp, r3
 8001d8c:	e5cd      	b.n	800192a <__aeabi_ddiv+0xe6>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	4447      	add	r7, r8
 8001d92:	4547      	cmp	r7, r8
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	425b      	negs	r3, r3
 8001d98:	469c      	mov	ip, r3
 8001d9a:	4249      	negs	r1, r1
 8001d9c:	1989      	adds	r1, r1, r6
 8001d9e:	190c      	adds	r4, r1, r4
 8001da0:	44e3      	add	fp, ip
 8001da2:	1a24      	subs	r4, r4, r0
 8001da4:	e703      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001da6:	4643      	mov	r3, r8
 8001da8:	005f      	lsls	r7, r3, #1
 8001daa:	4547      	cmp	r7, r8
 8001dac:	419b      	sbcs	r3, r3
 8001dae:	46b8      	mov	r8, r7
 8001db0:	425b      	negs	r3, r3
 8001db2:	199e      	adds	r6, r3, r6
 8001db4:	3a02      	subs	r2, #2
 8001db6:	1989      	adds	r1, r1, r6
 8001db8:	42a9      	cmp	r1, r5
 8001dba:	d000      	beq.n	8001dbe <__aeabi_ddiv+0x57a>
 8001dbc:	e754      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_ddiv+0x580>
 8001dc2:	e751      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001dc4:	e5ab      	b.n	800191e <__aeabi_ddiv+0xda>
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	e7f6      	b.n	8001db8 <__aeabi_ddiv+0x574>
 8001dca:	211f      	movs	r1, #31
 8001dcc:	465f      	mov	r7, fp
 8001dce:	4249      	negs	r1, r1
 8001dd0:	1b0c      	subs	r4, r1, r4
 8001dd2:	40e7      	lsrs	r7, r4
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d007      	beq.n	8001de8 <__aeabi_ddiv+0x5a4>
 8001dd8:	491a      	ldr	r1, [pc, #104]	; (8001e44 <__aeabi_ddiv+0x600>)
 8001dda:	9b00      	ldr	r3, [sp, #0]
 8001ddc:	468c      	mov	ip, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	0018      	movs	r0, r3
 8001de2:	465b      	mov	r3, fp
 8001de4:	4083      	lsls	r3, r0
 8001de6:	431a      	orrs	r2, r3
 8001de8:	1e50      	subs	r0, r2, #1
 8001dea:	4182      	sbcs	r2, r0
 8001dec:	433a      	orrs	r2, r7
 8001dee:	2707      	movs	r7, #7
 8001df0:	2300      	movs	r3, #0
 8001df2:	4017      	ands	r7, r2
 8001df4:	d009      	beq.n	8001e0a <__aeabi_ddiv+0x5c6>
 8001df6:	210f      	movs	r1, #15
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4011      	ands	r1, r2
 8001dfc:	0014      	movs	r4, r2
 8001dfe:	2904      	cmp	r1, #4
 8001e00:	d195      	bne.n	8001d2e <__aeabi_ddiv+0x4ea>
 8001e02:	0022      	movs	r2, r4
 8001e04:	075f      	lsls	r7, r3, #29
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	0b1b      	lsrs	r3, r3, #12
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	4317      	orrs	r7, r2
 8001e0e:	2200      	movs	r2, #0
 8001e10:	e5a6      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	4659      	mov	r1, fp
 8001e16:	031b      	lsls	r3, r3, #12
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	031b      	lsls	r3, r3, #12
 8001e1c:	0017      	movs	r7, r2
 8001e1e:	0b1b      	lsrs	r3, r3, #12
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <__aeabi_ddiv+0x5f8>)
 8001e22:	e59d      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001e24:	42bd      	cmp	r5, r7
 8001e26:	d8b2      	bhi.n	8001d8e <__aeabi_ddiv+0x54a>
 8001e28:	469b      	mov	fp, r3
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	e6bf      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001e2e:	4580      	cmp	r8, r0
 8001e30:	d3b9      	bcc.n	8001da6 <__aeabi_ddiv+0x562>
 8001e32:	001a      	movs	r2, r3
 8001e34:	e7c3      	b.n	8001dbe <__aeabi_ddiv+0x57a>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	000003ff 	.word	0x000003ff
 8001e3c:	000007ff 	.word	0x000007ff
 8001e40:	0000041e 	.word	0x0000041e
 8001e44:	0000043e 	.word	0x0000043e

08001e48 <__eqdf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	464f      	mov	r7, r9
 8001e4c:	4646      	mov	r6, r8
 8001e4e:	46d6      	mov	lr, sl
 8001e50:	4684      	mov	ip, r0
 8001e52:	b5c0      	push	{r6, r7, lr}
 8001e54:	4680      	mov	r8, r0
 8001e56:	4e19      	ldr	r6, [pc, #100]	; (8001ebc <__eqdf2+0x74>)
 8001e58:	0318      	lsls	r0, r3, #12
 8001e5a:	030f      	lsls	r7, r1, #12
 8001e5c:	004d      	lsls	r5, r1, #1
 8001e5e:	0b00      	lsrs	r0, r0, #12
 8001e60:	005c      	lsls	r4, r3, #1
 8001e62:	4682      	mov	sl, r0
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d6d      	lsrs	r5, r5, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	4691      	mov	r9, r2
 8001e6c:	0d64      	lsrs	r4, r4, #21
 8001e6e:	0fdb      	lsrs	r3, r3, #31
 8001e70:	2001      	movs	r0, #1
 8001e72:	42b5      	cmp	r5, r6
 8001e74:	d00a      	beq.n	8001e8c <__eqdf2+0x44>
 8001e76:	42b4      	cmp	r4, r6
 8001e78:	d003      	beq.n	8001e82 <__eqdf2+0x3a>
 8001e7a:	42a5      	cmp	r5, r4
 8001e7c:	d101      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e7e:	4557      	cmp	r7, sl
 8001e80:	d00c      	beq.n	8001e9c <__eqdf2+0x54>
 8001e82:	bc1c      	pop	{r2, r3, r4}
 8001e84:	4690      	mov	r8, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	46a2      	mov	sl, r4
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	4666      	mov	r6, ip
 8001e8e:	433e      	orrs	r6, r7
 8001e90:	d1f7      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e92:	42ac      	cmp	r4, r5
 8001e94:	d1f5      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e96:	4654      	mov	r4, sl
 8001e98:	4314      	orrs	r4, r2
 8001e9a:	d1f2      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	45c8      	cmp	r8, r9
 8001ea0:	d1ef      	bne.n	8001e82 <__eqdf2+0x3a>
 8001ea2:	4299      	cmp	r1, r3
 8001ea4:	d007      	beq.n	8001eb6 <__eqdf2+0x6e>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d1eb      	bne.n	8001e82 <__eqdf2+0x3a>
 8001eaa:	4663      	mov	r3, ip
 8001eac:	431f      	orrs	r7, r3
 8001eae:	0038      	movs	r0, r7
 8001eb0:	1e47      	subs	r7, r0, #1
 8001eb2:	41b8      	sbcs	r0, r7
 8001eb4:	e7e5      	b.n	8001e82 <__eqdf2+0x3a>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e7e3      	b.n	8001e82 <__eqdf2+0x3a>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__gedf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	464f      	mov	r7, r9
 8001ec4:	4646      	mov	r6, r8
 8001ec6:	46d6      	mov	lr, sl
 8001ec8:	004d      	lsls	r5, r1, #1
 8001eca:	b5c0      	push	{r6, r7, lr}
 8001ecc:	030e      	lsls	r6, r1, #12
 8001ece:	0fc9      	lsrs	r1, r1, #31
 8001ed0:	468a      	mov	sl, r1
 8001ed2:	492c      	ldr	r1, [pc, #176]	; (8001f84 <__gedf2+0xc4>)
 8001ed4:	031f      	lsls	r7, r3, #12
 8001ed6:	005c      	lsls	r4, r3, #1
 8001ed8:	4680      	mov	r8, r0
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0d6d      	lsrs	r5, r5, #21
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d64      	lsrs	r4, r4, #21
 8001ee4:	0fdb      	lsrs	r3, r3, #31
 8001ee6:	428d      	cmp	r5, r1
 8001ee8:	d01e      	beq.n	8001f28 <__gedf2+0x68>
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d016      	beq.n	8001f1c <__gedf2+0x5c>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d11e      	bne.n	8001f30 <__gedf2+0x70>
 8001ef2:	4330      	orrs	r0, r6
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	2c00      	cmp	r4, #0
 8001ef8:	d101      	bne.n	8001efe <__gedf2+0x3e>
 8001efa:	433a      	orrs	r2, r7
 8001efc:	d023      	beq.n	8001f46 <__gedf2+0x86>
 8001efe:	4662      	mov	r2, ip
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d01a      	beq.n	8001f3a <__gedf2+0x7a>
 8001f04:	459a      	cmp	sl, r3
 8001f06:	d029      	beq.n	8001f5c <__gedf2+0x9c>
 8001f08:	4651      	mov	r1, sl
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	3901      	subs	r1, #1
 8001f0e:	4008      	ands	r0, r1
 8001f10:	3801      	subs	r0, #1
 8001f12:	bc1c      	pop	{r2, r3, r4}
 8001f14:	4690      	mov	r8, r2
 8001f16:	4699      	mov	r9, r3
 8001f18:	46a2      	mov	sl, r4
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	0039      	movs	r1, r7
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	d0e5      	beq.n	8001eee <__gedf2+0x2e>
 8001f22:	2002      	movs	r0, #2
 8001f24:	4240      	negs	r0, r0
 8001f26:	e7f4      	b.n	8001f12 <__gedf2+0x52>
 8001f28:	4330      	orrs	r0, r6
 8001f2a:	d1fa      	bne.n	8001f22 <__gedf2+0x62>
 8001f2c:	42ac      	cmp	r4, r5
 8001f2e:	d00f      	beq.n	8001f50 <__gedf2+0x90>
 8001f30:	2c00      	cmp	r4, #0
 8001f32:	d10f      	bne.n	8001f54 <__gedf2+0x94>
 8001f34:	433a      	orrs	r2, r7
 8001f36:	d0e7      	beq.n	8001f08 <__gedf2+0x48>
 8001f38:	e00c      	b.n	8001f54 <__gedf2+0x94>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	3001      	adds	r0, #1
 8001f44:	e7e5      	b.n	8001f12 <__gedf2+0x52>
 8001f46:	4663      	mov	r3, ip
 8001f48:	2000      	movs	r0, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0e1      	beq.n	8001f12 <__gedf2+0x52>
 8001f4e:	e7db      	b.n	8001f08 <__gedf2+0x48>
 8001f50:	433a      	orrs	r2, r7
 8001f52:	d1e6      	bne.n	8001f22 <__gedf2+0x62>
 8001f54:	459a      	cmp	sl, r3
 8001f56:	d1d7      	bne.n	8001f08 <__gedf2+0x48>
 8001f58:	42a5      	cmp	r5, r4
 8001f5a:	dcd5      	bgt.n	8001f08 <__gedf2+0x48>
 8001f5c:	42a5      	cmp	r5, r4
 8001f5e:	db05      	blt.n	8001f6c <__gedf2+0xac>
 8001f60:	42be      	cmp	r6, r7
 8001f62:	d8d1      	bhi.n	8001f08 <__gedf2+0x48>
 8001f64:	d008      	beq.n	8001f78 <__gedf2+0xb8>
 8001f66:	2000      	movs	r0, #0
 8001f68:	42be      	cmp	r6, r7
 8001f6a:	d2d2      	bcs.n	8001f12 <__gedf2+0x52>
 8001f6c:	4650      	mov	r0, sl
 8001f6e:	2301      	movs	r3, #1
 8001f70:	3801      	subs	r0, #1
 8001f72:	4398      	bics	r0, r3
 8001f74:	3001      	adds	r0, #1
 8001f76:	e7cc      	b.n	8001f12 <__gedf2+0x52>
 8001f78:	45c8      	cmp	r8, r9
 8001f7a:	d8c5      	bhi.n	8001f08 <__gedf2+0x48>
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	45c8      	cmp	r8, r9
 8001f80:	d3f4      	bcc.n	8001f6c <__gedf2+0xac>
 8001f82:	e7c6      	b.n	8001f12 <__gedf2+0x52>
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__ledf2>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	464f      	mov	r7, r9
 8001f8c:	4646      	mov	r6, r8
 8001f8e:	46d6      	mov	lr, sl
 8001f90:	004d      	lsls	r5, r1, #1
 8001f92:	b5c0      	push	{r6, r7, lr}
 8001f94:	030e      	lsls	r6, r1, #12
 8001f96:	0fc9      	lsrs	r1, r1, #31
 8001f98:	468a      	mov	sl, r1
 8001f9a:	492e      	ldr	r1, [pc, #184]	; (8002054 <__ledf2+0xcc>)
 8001f9c:	031f      	lsls	r7, r3, #12
 8001f9e:	005c      	lsls	r4, r3, #1
 8001fa0:	4680      	mov	r8, r0
 8001fa2:	0b36      	lsrs	r6, r6, #12
 8001fa4:	0d6d      	lsrs	r5, r5, #21
 8001fa6:	4691      	mov	r9, r2
 8001fa8:	0b3f      	lsrs	r7, r7, #12
 8001faa:	0d64      	lsrs	r4, r4, #21
 8001fac:	0fdb      	lsrs	r3, r3, #31
 8001fae:	428d      	cmp	r5, r1
 8001fb0:	d018      	beq.n	8001fe4 <__ledf2+0x5c>
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d011      	beq.n	8001fda <__ledf2+0x52>
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	d118      	bne.n	8001fec <__ledf2+0x64>
 8001fba:	4330      	orrs	r0, r6
 8001fbc:	4684      	mov	ip, r0
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d11e      	bne.n	8002000 <__ledf2+0x78>
 8001fc2:	433a      	orrs	r2, r7
 8001fc4:	d11c      	bne.n	8002000 <__ledf2+0x78>
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	2000      	movs	r0, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d030      	beq.n	8002030 <__ledf2+0xa8>
 8001fce:	4651      	mov	r1, sl
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	3901      	subs	r1, #1
 8001fd4:	4008      	ands	r0, r1
 8001fd6:	3801      	subs	r0, #1
 8001fd8:	e02a      	b.n	8002030 <__ledf2+0xa8>
 8001fda:	0039      	movs	r1, r7
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	d0ea      	beq.n	8001fb6 <__ledf2+0x2e>
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e025      	b.n	8002030 <__ledf2+0xa8>
 8001fe4:	4330      	orrs	r0, r6
 8001fe6:	d1fb      	bne.n	8001fe0 <__ledf2+0x58>
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d026      	beq.n	800203a <__ledf2+0xb2>
 8001fec:	2c00      	cmp	r4, #0
 8001fee:	d126      	bne.n	800203e <__ledf2+0xb6>
 8001ff0:	433a      	orrs	r2, r7
 8001ff2:	d124      	bne.n	800203e <__ledf2+0xb6>
 8001ff4:	4651      	mov	r1, sl
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	3901      	subs	r1, #1
 8001ffa:	4008      	ands	r0, r1
 8001ffc:	3801      	subs	r0, #1
 8001ffe:	e017      	b.n	8002030 <__ledf2+0xa8>
 8002000:	4662      	mov	r2, ip
 8002002:	2a00      	cmp	r2, #0
 8002004:	d00f      	beq.n	8002026 <__ledf2+0x9e>
 8002006:	459a      	cmp	sl, r3
 8002008:	d1e1      	bne.n	8001fce <__ledf2+0x46>
 800200a:	42a5      	cmp	r5, r4
 800200c:	db05      	blt.n	800201a <__ledf2+0x92>
 800200e:	42be      	cmp	r6, r7
 8002010:	d8dd      	bhi.n	8001fce <__ledf2+0x46>
 8002012:	d019      	beq.n	8002048 <__ledf2+0xc0>
 8002014:	2000      	movs	r0, #0
 8002016:	42be      	cmp	r6, r7
 8002018:	d20a      	bcs.n	8002030 <__ledf2+0xa8>
 800201a:	4650      	mov	r0, sl
 800201c:	2301      	movs	r3, #1
 800201e:	3801      	subs	r0, #1
 8002020:	4398      	bics	r0, r3
 8002022:	3001      	adds	r0, #1
 8002024:	e004      	b.n	8002030 <__ledf2+0xa8>
 8002026:	2201      	movs	r2, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	4393      	bics	r3, r2
 800202c:	0018      	movs	r0, r3
 800202e:	3001      	adds	r0, #1
 8002030:	bc1c      	pop	{r2, r3, r4}
 8002032:	4690      	mov	r8, r2
 8002034:	4699      	mov	r9, r3
 8002036:	46a2      	mov	sl, r4
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203a:	433a      	orrs	r2, r7
 800203c:	d1d0      	bne.n	8001fe0 <__ledf2+0x58>
 800203e:	459a      	cmp	sl, r3
 8002040:	d1c5      	bne.n	8001fce <__ledf2+0x46>
 8002042:	42a5      	cmp	r5, r4
 8002044:	dcc3      	bgt.n	8001fce <__ledf2+0x46>
 8002046:	e7e0      	b.n	800200a <__ledf2+0x82>
 8002048:	45c8      	cmp	r8, r9
 800204a:	d8c0      	bhi.n	8001fce <__ledf2+0x46>
 800204c:	2000      	movs	r0, #0
 800204e:	45c8      	cmp	r8, r9
 8002050:	d3e3      	bcc.n	800201a <__ledf2+0x92>
 8002052:	e7ed      	b.n	8002030 <__ledf2+0xa8>
 8002054:	000007ff 	.word	0x000007ff

08002058 <__aeabi_dmul>:
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	4657      	mov	r7, sl
 800205c:	46de      	mov	lr, fp
 800205e:	464e      	mov	r6, r9
 8002060:	4645      	mov	r5, r8
 8002062:	b5e0      	push	{r5, r6, r7, lr}
 8002064:	4683      	mov	fp, r0
 8002066:	0006      	movs	r6, r0
 8002068:	030f      	lsls	r7, r1, #12
 800206a:	0048      	lsls	r0, r1, #1
 800206c:	b087      	sub	sp, #28
 800206e:	4692      	mov	sl, r2
 8002070:	001d      	movs	r5, r3
 8002072:	0b3f      	lsrs	r7, r7, #12
 8002074:	0d40      	lsrs	r0, r0, #21
 8002076:	0fcc      	lsrs	r4, r1, #31
 8002078:	2800      	cmp	r0, #0
 800207a:	d100      	bne.n	800207e <__aeabi_dmul+0x26>
 800207c:	e06f      	b.n	800215e <__aeabi_dmul+0x106>
 800207e:	4bde      	ldr	r3, [pc, #888]	; (80023f8 <__aeabi_dmul+0x3a0>)
 8002080:	4298      	cmp	r0, r3
 8002082:	d038      	beq.n	80020f6 <__aeabi_dmul+0x9e>
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	00ff      	lsls	r7, r7, #3
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431f      	orrs	r7, r3
 800208c:	0f73      	lsrs	r3, r6, #29
 800208e:	433b      	orrs	r3, r7
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4bda      	ldr	r3, [pc, #872]	; (80023fc <__aeabi_dmul+0x3a4>)
 8002094:	2700      	movs	r7, #0
 8002096:	4699      	mov	r9, r3
 8002098:	2300      	movs	r3, #0
 800209a:	469b      	mov	fp, r3
 800209c:	00f6      	lsls	r6, r6, #3
 800209e:	4481      	add	r9, r0
 80020a0:	032b      	lsls	r3, r5, #12
 80020a2:	0069      	lsls	r1, r5, #1
 80020a4:	0b1b      	lsrs	r3, r3, #12
 80020a6:	4652      	mov	r2, sl
 80020a8:	4698      	mov	r8, r3
 80020aa:	0d49      	lsrs	r1, r1, #21
 80020ac:	0fed      	lsrs	r5, r5, #31
 80020ae:	2900      	cmp	r1, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dmul+0x5c>
 80020b2:	e085      	b.n	80021c0 <__aeabi_dmul+0x168>
 80020b4:	4bd0      	ldr	r3, [pc, #832]	; (80023f8 <__aeabi_dmul+0x3a0>)
 80020b6:	4299      	cmp	r1, r3
 80020b8:	d100      	bne.n	80020bc <__aeabi_dmul+0x64>
 80020ba:	e073      	b.n	80021a4 <__aeabi_dmul+0x14c>
 80020bc:	4643      	mov	r3, r8
 80020be:	00da      	lsls	r2, r3, #3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4652      	mov	r2, sl
 80020c8:	48cc      	ldr	r0, [pc, #816]	; (80023fc <__aeabi_dmul+0x3a4>)
 80020ca:	0f52      	lsrs	r2, r2, #29
 80020cc:	4684      	mov	ip, r0
 80020ce:	4313      	orrs	r3, r2
 80020d0:	4652      	mov	r2, sl
 80020d2:	2000      	movs	r0, #0
 80020d4:	4461      	add	r1, ip
 80020d6:	00d2      	lsls	r2, r2, #3
 80020d8:	4489      	add	r9, r1
 80020da:	0021      	movs	r1, r4
 80020dc:	4069      	eors	r1, r5
 80020de:	9100      	str	r1, [sp, #0]
 80020e0:	468c      	mov	ip, r1
 80020e2:	2101      	movs	r1, #1
 80020e4:	4449      	add	r1, r9
 80020e6:	468a      	mov	sl, r1
 80020e8:	2f0f      	cmp	r7, #15
 80020ea:	d900      	bls.n	80020ee <__aeabi_dmul+0x96>
 80020ec:	e090      	b.n	8002210 <__aeabi_dmul+0x1b8>
 80020ee:	49c4      	ldr	r1, [pc, #784]	; (8002400 <__aeabi_dmul+0x3a8>)
 80020f0:	00bf      	lsls	r7, r7, #2
 80020f2:	59cf      	ldr	r7, [r1, r7]
 80020f4:	46bf      	mov	pc, r7
 80020f6:	465b      	mov	r3, fp
 80020f8:	433b      	orrs	r3, r7
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	d000      	beq.n	8002100 <__aeabi_dmul+0xa8>
 80020fe:	e16a      	b.n	80023d6 <__aeabi_dmul+0x37e>
 8002100:	2302      	movs	r3, #2
 8002102:	2708      	movs	r7, #8
 8002104:	2600      	movs	r6, #0
 8002106:	4681      	mov	r9, r0
 8002108:	469b      	mov	fp, r3
 800210a:	e7c9      	b.n	80020a0 <__aeabi_dmul+0x48>
 800210c:	0032      	movs	r2, r6
 800210e:	4658      	mov	r0, fp
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	4661      	mov	r1, ip
 8002114:	9100      	str	r1, [sp, #0]
 8002116:	2802      	cmp	r0, #2
 8002118:	d100      	bne.n	800211c <__aeabi_dmul+0xc4>
 800211a:	e075      	b.n	8002208 <__aeabi_dmul+0x1b0>
 800211c:	2803      	cmp	r0, #3
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0xca>
 8002120:	e1fe      	b.n	8002520 <__aeabi_dmul+0x4c8>
 8002122:	2801      	cmp	r0, #1
 8002124:	d000      	beq.n	8002128 <__aeabi_dmul+0xd0>
 8002126:	e12c      	b.n	8002382 <__aeabi_dmul+0x32a>
 8002128:	2300      	movs	r3, #0
 800212a:	2700      	movs	r7, #0
 800212c:	2600      	movs	r6, #0
 800212e:	2500      	movs	r5, #0
 8002130:	033f      	lsls	r7, r7, #12
 8002132:	0d2a      	lsrs	r2, r5, #20
 8002134:	0b3f      	lsrs	r7, r7, #12
 8002136:	48b3      	ldr	r0, [pc, #716]	; (8002404 <__aeabi_dmul+0x3ac>)
 8002138:	0512      	lsls	r2, r2, #20
 800213a:	433a      	orrs	r2, r7
 800213c:	4002      	ands	r2, r0
 800213e:	051b      	lsls	r3, r3, #20
 8002140:	4313      	orrs	r3, r2
 8002142:	9a00      	ldr	r2, [sp, #0]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	07d1      	lsls	r1, r2, #31
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	430b      	orrs	r3, r1
 800214c:	0030      	movs	r0, r6
 800214e:	0019      	movs	r1, r3
 8002150:	b007      	add	sp, #28
 8002152:	bc3c      	pop	{r2, r3, r4, r5}
 8002154:	4690      	mov	r8, r2
 8002156:	4699      	mov	r9, r3
 8002158:	46a2      	mov	sl, r4
 800215a:	46ab      	mov	fp, r5
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215e:	465b      	mov	r3, fp
 8002160:	433b      	orrs	r3, r7
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x110>
 8002166:	e12f      	b.n	80023c8 <__aeabi_dmul+0x370>
 8002168:	2f00      	cmp	r7, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x116>
 800216c:	e1a5      	b.n	80024ba <__aeabi_dmul+0x462>
 800216e:	0038      	movs	r0, r7
 8002170:	f000 fec0 	bl	8002ef4 <__clzsi2>
 8002174:	0003      	movs	r3, r0
 8002176:	3b0b      	subs	r3, #11
 8002178:	2b1c      	cmp	r3, #28
 800217a:	dd00      	ble.n	800217e <__aeabi_dmul+0x126>
 800217c:	e196      	b.n	80024ac <__aeabi_dmul+0x454>
 800217e:	221d      	movs	r2, #29
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	465a      	mov	r2, fp
 8002184:	0001      	movs	r1, r0
 8002186:	40da      	lsrs	r2, r3
 8002188:	465e      	mov	r6, fp
 800218a:	3908      	subs	r1, #8
 800218c:	408f      	lsls	r7, r1
 800218e:	0013      	movs	r3, r2
 8002190:	408e      	lsls	r6, r1
 8002192:	433b      	orrs	r3, r7
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	4b9c      	ldr	r3, [pc, #624]	; (8002408 <__aeabi_dmul+0x3b0>)
 8002198:	2700      	movs	r7, #0
 800219a:	1a1b      	subs	r3, r3, r0
 800219c:	4699      	mov	r9, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	469b      	mov	fp, r3
 80021a2:	e77d      	b.n	80020a0 <__aeabi_dmul+0x48>
 80021a4:	4641      	mov	r1, r8
 80021a6:	4653      	mov	r3, sl
 80021a8:	430b      	orrs	r3, r1
 80021aa:	4993      	ldr	r1, [pc, #588]	; (80023f8 <__aeabi_dmul+0x3a0>)
 80021ac:	468c      	mov	ip, r1
 80021ae:	44e1      	add	r9, ip
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dmul+0x15e>
 80021b4:	e11a      	b.n	80023ec <__aeabi_dmul+0x394>
 80021b6:	2202      	movs	r2, #2
 80021b8:	2002      	movs	r0, #2
 80021ba:	4317      	orrs	r7, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	e78c      	b.n	80020da <__aeabi_dmul+0x82>
 80021c0:	4313      	orrs	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x16e>
 80021c4:	e10d      	b.n	80023e2 <__aeabi_dmul+0x38a>
 80021c6:	4643      	mov	r3, r8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dmul+0x176>
 80021cc:	e181      	b.n	80024d2 <__aeabi_dmul+0x47a>
 80021ce:	4640      	mov	r0, r8
 80021d0:	f000 fe90 	bl	8002ef4 <__clzsi2>
 80021d4:	0002      	movs	r2, r0
 80021d6:	3a0b      	subs	r2, #11
 80021d8:	2a1c      	cmp	r2, #28
 80021da:	dd00      	ble.n	80021de <__aeabi_dmul+0x186>
 80021dc:	e172      	b.n	80024c4 <__aeabi_dmul+0x46c>
 80021de:	0001      	movs	r1, r0
 80021e0:	4643      	mov	r3, r8
 80021e2:	3908      	subs	r1, #8
 80021e4:	408b      	lsls	r3, r1
 80021e6:	4698      	mov	r8, r3
 80021e8:	231d      	movs	r3, #29
 80021ea:	1a9a      	subs	r2, r3, r2
 80021ec:	4653      	mov	r3, sl
 80021ee:	40d3      	lsrs	r3, r2
 80021f0:	001a      	movs	r2, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	4652      	mov	r2, sl
 80021f8:	408a      	lsls	r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	1a08      	subs	r0, r1, r0
 80021fe:	4982      	ldr	r1, [pc, #520]	; (8002408 <__aeabi_dmul+0x3b0>)
 8002200:	4689      	mov	r9, r1
 8002202:	4481      	add	r9, r0
 8002204:	2000      	movs	r0, #0
 8002206:	e768      	b.n	80020da <__aeabi_dmul+0x82>
 8002208:	4b7b      	ldr	r3, [pc, #492]	; (80023f8 <__aeabi_dmul+0x3a0>)
 800220a:	2700      	movs	r7, #0
 800220c:	2600      	movs	r6, #0
 800220e:	e78e      	b.n	800212e <__aeabi_dmul+0xd6>
 8002210:	0c14      	lsrs	r4, r2, #16
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	0c12      	lsrs	r2, r2, #16
 8002216:	0011      	movs	r1, r2
 8002218:	0c37      	lsrs	r7, r6, #16
 800221a:	0436      	lsls	r6, r6, #16
 800221c:	0c35      	lsrs	r5, r6, #16
 800221e:	4379      	muls	r1, r7
 8002220:	0028      	movs	r0, r5
 8002222:	468c      	mov	ip, r1
 8002224:	002e      	movs	r6, r5
 8002226:	4360      	muls	r0, r4
 8002228:	4460      	add	r0, ip
 800222a:	4683      	mov	fp, r0
 800222c:	4356      	muls	r6, r2
 800222e:	0021      	movs	r1, r4
 8002230:	0c30      	lsrs	r0, r6, #16
 8002232:	4680      	mov	r8, r0
 8002234:	4658      	mov	r0, fp
 8002236:	4379      	muls	r1, r7
 8002238:	4440      	add	r0, r8
 800223a:	9102      	str	r1, [sp, #8]
 800223c:	4584      	cmp	ip, r0
 800223e:	d906      	bls.n	800224e <__aeabi_dmul+0x1f6>
 8002240:	4688      	mov	r8, r1
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0249      	lsls	r1, r1, #9
 8002246:	468c      	mov	ip, r1
 8002248:	44e0      	add	r8, ip
 800224a:	4641      	mov	r1, r8
 800224c:	9102      	str	r1, [sp, #8]
 800224e:	0436      	lsls	r6, r6, #16
 8002250:	0c01      	lsrs	r1, r0, #16
 8002252:	0c36      	lsrs	r6, r6, #16
 8002254:	0400      	lsls	r0, r0, #16
 8002256:	468b      	mov	fp, r1
 8002258:	1981      	adds	r1, r0, r6
 800225a:	0c1e      	lsrs	r6, r3, #16
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	9103      	str	r1, [sp, #12]
 8002262:	0019      	movs	r1, r3
 8002264:	4379      	muls	r1, r7
 8002266:	468c      	mov	ip, r1
 8002268:	0028      	movs	r0, r5
 800226a:	4375      	muls	r5, r6
 800226c:	4465      	add	r5, ip
 800226e:	46a8      	mov	r8, r5
 8002270:	4358      	muls	r0, r3
 8002272:	0c05      	lsrs	r5, r0, #16
 8002274:	4445      	add	r5, r8
 8002276:	4377      	muls	r7, r6
 8002278:	42a9      	cmp	r1, r5
 800227a:	d903      	bls.n	8002284 <__aeabi_dmul+0x22c>
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0249      	lsls	r1, r1, #9
 8002280:	468c      	mov	ip, r1
 8002282:	4467      	add	r7, ip
 8002284:	0c29      	lsrs	r1, r5, #16
 8002286:	468c      	mov	ip, r1
 8002288:	0039      	movs	r1, r7
 800228a:	0400      	lsls	r0, r0, #16
 800228c:	0c00      	lsrs	r0, r0, #16
 800228e:	042d      	lsls	r5, r5, #16
 8002290:	182d      	adds	r5, r5, r0
 8002292:	4461      	add	r1, ip
 8002294:	44ab      	add	fp, r5
 8002296:	9105      	str	r1, [sp, #20]
 8002298:	4659      	mov	r1, fp
 800229a:	9104      	str	r1, [sp, #16]
 800229c:	9901      	ldr	r1, [sp, #4]
 800229e:	040f      	lsls	r7, r1, #16
 80022a0:	0c3f      	lsrs	r7, r7, #16
 80022a2:	0c08      	lsrs	r0, r1, #16
 80022a4:	0039      	movs	r1, r7
 80022a6:	4351      	muls	r1, r2
 80022a8:	4342      	muls	r2, r0
 80022aa:	4690      	mov	r8, r2
 80022ac:	0002      	movs	r2, r0
 80022ae:	468c      	mov	ip, r1
 80022b0:	0c09      	lsrs	r1, r1, #16
 80022b2:	468b      	mov	fp, r1
 80022b4:	4362      	muls	r2, r4
 80022b6:	437c      	muls	r4, r7
 80022b8:	4444      	add	r4, r8
 80022ba:	445c      	add	r4, fp
 80022bc:	45a0      	cmp	r8, r4
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x270>
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0249      	lsls	r1, r1, #9
 80022c4:	4688      	mov	r8, r1
 80022c6:	4442      	add	r2, r8
 80022c8:	0c21      	lsrs	r1, r4, #16
 80022ca:	4688      	mov	r8, r1
 80022cc:	4661      	mov	r1, ip
 80022ce:	0409      	lsls	r1, r1, #16
 80022d0:	0c09      	lsrs	r1, r1, #16
 80022d2:	468c      	mov	ip, r1
 80022d4:	0039      	movs	r1, r7
 80022d6:	4359      	muls	r1, r3
 80022d8:	4343      	muls	r3, r0
 80022da:	4370      	muls	r0, r6
 80022dc:	437e      	muls	r6, r7
 80022de:	0c0f      	lsrs	r7, r1, #16
 80022e0:	18f6      	adds	r6, r6, r3
 80022e2:	0424      	lsls	r4, r4, #16
 80022e4:	19be      	adds	r6, r7, r6
 80022e6:	4464      	add	r4, ip
 80022e8:	4442      	add	r2, r8
 80022ea:	468c      	mov	ip, r1
 80022ec:	42b3      	cmp	r3, r6
 80022ee:	d903      	bls.n	80022f8 <__aeabi_dmul+0x2a0>
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	4698      	mov	r8, r3
 80022f6:	4440      	add	r0, r8
 80022f8:	9b02      	ldr	r3, [sp, #8]
 80022fa:	4661      	mov	r1, ip
 80022fc:	4698      	mov	r8, r3
 80022fe:	9b04      	ldr	r3, [sp, #16]
 8002300:	0437      	lsls	r7, r6, #16
 8002302:	4443      	add	r3, r8
 8002304:	469b      	mov	fp, r3
 8002306:	45ab      	cmp	fp, r5
 8002308:	41ad      	sbcs	r5, r5
 800230a:	426b      	negs	r3, r5
 800230c:	040d      	lsls	r5, r1, #16
 800230e:	9905      	ldr	r1, [sp, #20]
 8002310:	0c2d      	lsrs	r5, r5, #16
 8002312:	468c      	mov	ip, r1
 8002314:	197f      	adds	r7, r7, r5
 8002316:	4467      	add	r7, ip
 8002318:	18fd      	adds	r5, r7, r3
 800231a:	46a8      	mov	r8, r5
 800231c:	465d      	mov	r5, fp
 800231e:	192d      	adds	r5, r5, r4
 8002320:	42a5      	cmp	r5, r4
 8002322:	41a4      	sbcs	r4, r4
 8002324:	4693      	mov	fp, r2
 8002326:	4264      	negs	r4, r4
 8002328:	46a4      	mov	ip, r4
 800232a:	44c3      	add	fp, r8
 800232c:	44dc      	add	ip, fp
 800232e:	428f      	cmp	r7, r1
 8002330:	41bf      	sbcs	r7, r7
 8002332:	4598      	cmp	r8, r3
 8002334:	419b      	sbcs	r3, r3
 8002336:	4593      	cmp	fp, r2
 8002338:	4192      	sbcs	r2, r2
 800233a:	45a4      	cmp	ip, r4
 800233c:	41a4      	sbcs	r4, r4
 800233e:	425b      	negs	r3, r3
 8002340:	427f      	negs	r7, r7
 8002342:	431f      	orrs	r7, r3
 8002344:	0c36      	lsrs	r6, r6, #16
 8002346:	4252      	negs	r2, r2
 8002348:	4264      	negs	r4, r4
 800234a:	19bf      	adds	r7, r7, r6
 800234c:	4322      	orrs	r2, r4
 800234e:	18bf      	adds	r7, r7, r2
 8002350:	4662      	mov	r2, ip
 8002352:	1838      	adds	r0, r7, r0
 8002354:	0243      	lsls	r3, r0, #9
 8002356:	0dd2      	lsrs	r2, r2, #23
 8002358:	9903      	ldr	r1, [sp, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	026a      	lsls	r2, r5, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	1e50      	subs	r0, r2, #1
 8002362:	4182      	sbcs	r2, r0
 8002364:	4661      	mov	r1, ip
 8002366:	0ded      	lsrs	r5, r5, #23
 8002368:	432a      	orrs	r2, r5
 800236a:	024e      	lsls	r6, r1, #9
 800236c:	4332      	orrs	r2, r6
 800236e:	01d9      	lsls	r1, r3, #7
 8002370:	d400      	bmi.n	8002374 <__aeabi_dmul+0x31c>
 8002372:	e0b3      	b.n	80024dc <__aeabi_dmul+0x484>
 8002374:	2601      	movs	r6, #1
 8002376:	0850      	lsrs	r0, r2, #1
 8002378:	4032      	ands	r2, r6
 800237a:	4302      	orrs	r2, r0
 800237c:	07de      	lsls	r6, r3, #31
 800237e:	4332      	orrs	r2, r6
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	4c22      	ldr	r4, [pc, #136]	; (800240c <__aeabi_dmul+0x3b4>)
 8002384:	4454      	add	r4, sl
 8002386:	2c00      	cmp	r4, #0
 8002388:	dd62      	ble.n	8002450 <__aeabi_dmul+0x3f8>
 800238a:	0751      	lsls	r1, r2, #29
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x34a>
 800238e:	200f      	movs	r0, #15
 8002390:	4010      	ands	r0, r2
 8002392:	2804      	cmp	r0, #4
 8002394:	d005      	beq.n	80023a2 <__aeabi_dmul+0x34a>
 8002396:	1d10      	adds	r0, r2, #4
 8002398:	4290      	cmp	r0, r2
 800239a:	4192      	sbcs	r2, r2
 800239c:	4252      	negs	r2, r2
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	0002      	movs	r2, r0
 80023a2:	01d9      	lsls	r1, r3, #7
 80023a4:	d504      	bpl.n	80023b0 <__aeabi_dmul+0x358>
 80023a6:	2480      	movs	r4, #128	; 0x80
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <__aeabi_dmul+0x3b8>)
 80023aa:	00e4      	lsls	r4, r4, #3
 80023ac:	4003      	ands	r3, r0
 80023ae:	4454      	add	r4, sl
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <__aeabi_dmul+0x3bc>)
 80023b2:	4284      	cmp	r4, r0
 80023b4:	dd00      	ble.n	80023b8 <__aeabi_dmul+0x360>
 80023b6:	e727      	b.n	8002208 <__aeabi_dmul+0x1b0>
 80023b8:	075e      	lsls	r6, r3, #29
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	08d2      	lsrs	r2, r2, #3
 80023be:	0b1f      	lsrs	r7, r3, #12
 80023c0:	0563      	lsls	r3, r4, #21
 80023c2:	4316      	orrs	r6, r2
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e6b2      	b.n	800212e <__aeabi_dmul+0xd6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	4699      	mov	r9, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	2704      	movs	r7, #4
 80023d0:	2600      	movs	r6, #0
 80023d2:	469b      	mov	fp, r3
 80023d4:	e664      	b.n	80020a0 <__aeabi_dmul+0x48>
 80023d6:	2303      	movs	r3, #3
 80023d8:	9701      	str	r7, [sp, #4]
 80023da:	4681      	mov	r9, r0
 80023dc:	270c      	movs	r7, #12
 80023de:	469b      	mov	fp, r3
 80023e0:	e65e      	b.n	80020a0 <__aeabi_dmul+0x48>
 80023e2:	2201      	movs	r2, #1
 80023e4:	2001      	movs	r0, #1
 80023e6:	4317      	orrs	r7, r2
 80023e8:	2200      	movs	r2, #0
 80023ea:	e676      	b.n	80020da <__aeabi_dmul+0x82>
 80023ec:	2303      	movs	r3, #3
 80023ee:	2003      	movs	r0, #3
 80023f0:	431f      	orrs	r7, r3
 80023f2:	4643      	mov	r3, r8
 80023f4:	e671      	b.n	80020da <__aeabi_dmul+0x82>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	000007ff 	.word	0x000007ff
 80023fc:	fffffc01 	.word	0xfffffc01
 8002400:	08017fc8 	.word	0x08017fc8
 8002404:	800fffff 	.word	0x800fffff
 8002408:	fffffc0d 	.word	0xfffffc0d
 800240c:	000003ff 	.word	0x000003ff
 8002410:	feffffff 	.word	0xfeffffff
 8002414:	000007fe 	.word	0x000007fe
 8002418:	2300      	movs	r3, #0
 800241a:	2780      	movs	r7, #128	; 0x80
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	033f      	lsls	r7, r7, #12
 8002420:	2600      	movs	r6, #0
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <__aeabi_dmul+0x4d8>)
 8002424:	e683      	b.n	800212e <__aeabi_dmul+0xd6>
 8002426:	9b01      	ldr	r3, [sp, #4]
 8002428:	0032      	movs	r2, r6
 800242a:	46a4      	mov	ip, r4
 800242c:	4658      	mov	r0, fp
 800242e:	e670      	b.n	8002112 <__aeabi_dmul+0xba>
 8002430:	46ac      	mov	ip, r5
 8002432:	e66e      	b.n	8002112 <__aeabi_dmul+0xba>
 8002434:	2780      	movs	r7, #128	; 0x80
 8002436:	9901      	ldr	r1, [sp, #4]
 8002438:	033f      	lsls	r7, r7, #12
 800243a:	4239      	tst	r1, r7
 800243c:	d02d      	beq.n	800249a <__aeabi_dmul+0x442>
 800243e:	423b      	tst	r3, r7
 8002440:	d12b      	bne.n	800249a <__aeabi_dmul+0x442>
 8002442:	431f      	orrs	r7, r3
 8002444:	033f      	lsls	r7, r7, #12
 8002446:	0b3f      	lsrs	r7, r7, #12
 8002448:	9500      	str	r5, [sp, #0]
 800244a:	0016      	movs	r6, r2
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <__aeabi_dmul+0x4d8>)
 800244e:	e66e      	b.n	800212e <__aeabi_dmul+0xd6>
 8002450:	2501      	movs	r5, #1
 8002452:	1b2d      	subs	r5, r5, r4
 8002454:	2d38      	cmp	r5, #56	; 0x38
 8002456:	dd00      	ble.n	800245a <__aeabi_dmul+0x402>
 8002458:	e666      	b.n	8002128 <__aeabi_dmul+0xd0>
 800245a:	2d1f      	cmp	r5, #31
 800245c:	dc40      	bgt.n	80024e0 <__aeabi_dmul+0x488>
 800245e:	4835      	ldr	r0, [pc, #212]	; (8002534 <__aeabi_dmul+0x4dc>)
 8002460:	001c      	movs	r4, r3
 8002462:	4450      	add	r0, sl
 8002464:	0016      	movs	r6, r2
 8002466:	4082      	lsls	r2, r0
 8002468:	4084      	lsls	r4, r0
 800246a:	40ee      	lsrs	r6, r5
 800246c:	1e50      	subs	r0, r2, #1
 800246e:	4182      	sbcs	r2, r0
 8002470:	4334      	orrs	r4, r6
 8002472:	4314      	orrs	r4, r2
 8002474:	40eb      	lsrs	r3, r5
 8002476:	0762      	lsls	r2, r4, #29
 8002478:	d009      	beq.n	800248e <__aeabi_dmul+0x436>
 800247a:	220f      	movs	r2, #15
 800247c:	4022      	ands	r2, r4
 800247e:	2a04      	cmp	r2, #4
 8002480:	d005      	beq.n	800248e <__aeabi_dmul+0x436>
 8002482:	0022      	movs	r2, r4
 8002484:	1d14      	adds	r4, r2, #4
 8002486:	4294      	cmp	r4, r2
 8002488:	4180      	sbcs	r0, r0
 800248a:	4240      	negs	r0, r0
 800248c:	181b      	adds	r3, r3, r0
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	d53e      	bpl.n	8002510 <__aeabi_dmul+0x4b8>
 8002492:	2301      	movs	r3, #1
 8002494:	2700      	movs	r7, #0
 8002496:	2600      	movs	r6, #0
 8002498:	e649      	b.n	800212e <__aeabi_dmul+0xd6>
 800249a:	2780      	movs	r7, #128	; 0x80
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	033f      	lsls	r7, r7, #12
 80024a0:	431f      	orrs	r7, r3
 80024a2:	033f      	lsls	r7, r7, #12
 80024a4:	0b3f      	lsrs	r7, r7, #12
 80024a6:	9400      	str	r4, [sp, #0]
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <__aeabi_dmul+0x4d8>)
 80024aa:	e640      	b.n	800212e <__aeabi_dmul+0xd6>
 80024ac:	0003      	movs	r3, r0
 80024ae:	465a      	mov	r2, fp
 80024b0:	3b28      	subs	r3, #40	; 0x28
 80024b2:	409a      	lsls	r2, r3
 80024b4:	2600      	movs	r6, #0
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	e66d      	b.n	8002196 <__aeabi_dmul+0x13e>
 80024ba:	4658      	mov	r0, fp
 80024bc:	f000 fd1a 	bl	8002ef4 <__clzsi2>
 80024c0:	3020      	adds	r0, #32
 80024c2:	e657      	b.n	8002174 <__aeabi_dmul+0x11c>
 80024c4:	0003      	movs	r3, r0
 80024c6:	4652      	mov	r2, sl
 80024c8:	3b28      	subs	r3, #40	; 0x28
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	e693      	b.n	80021fa <__aeabi_dmul+0x1a2>
 80024d2:	4650      	mov	r0, sl
 80024d4:	f000 fd0e 	bl	8002ef4 <__clzsi2>
 80024d8:	3020      	adds	r0, #32
 80024da:	e67b      	b.n	80021d4 <__aeabi_dmul+0x17c>
 80024dc:	46ca      	mov	sl, r9
 80024de:	e750      	b.n	8002382 <__aeabi_dmul+0x32a>
 80024e0:	201f      	movs	r0, #31
 80024e2:	001e      	movs	r6, r3
 80024e4:	4240      	negs	r0, r0
 80024e6:	1b04      	subs	r4, r0, r4
 80024e8:	40e6      	lsrs	r6, r4
 80024ea:	2d20      	cmp	r5, #32
 80024ec:	d003      	beq.n	80024f6 <__aeabi_dmul+0x49e>
 80024ee:	4c12      	ldr	r4, [pc, #72]	; (8002538 <__aeabi_dmul+0x4e0>)
 80024f0:	4454      	add	r4, sl
 80024f2:	40a3      	lsls	r3, r4
 80024f4:	431a      	orrs	r2, r3
 80024f6:	1e50      	subs	r0, r2, #1
 80024f8:	4182      	sbcs	r2, r0
 80024fa:	4332      	orrs	r2, r6
 80024fc:	2607      	movs	r6, #7
 80024fe:	2700      	movs	r7, #0
 8002500:	4016      	ands	r6, r2
 8002502:	d009      	beq.n	8002518 <__aeabi_dmul+0x4c0>
 8002504:	200f      	movs	r0, #15
 8002506:	2300      	movs	r3, #0
 8002508:	4010      	ands	r0, r2
 800250a:	0014      	movs	r4, r2
 800250c:	2804      	cmp	r0, #4
 800250e:	d1b9      	bne.n	8002484 <__aeabi_dmul+0x42c>
 8002510:	0022      	movs	r2, r4
 8002512:	075e      	lsls	r6, r3, #29
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	0b1f      	lsrs	r7, r3, #12
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	4316      	orrs	r6, r2
 800251c:	2300      	movs	r3, #0
 800251e:	e606      	b.n	800212e <__aeabi_dmul+0xd6>
 8002520:	2780      	movs	r7, #128	; 0x80
 8002522:	033f      	lsls	r7, r7, #12
 8002524:	431f      	orrs	r7, r3
 8002526:	033f      	lsls	r7, r7, #12
 8002528:	0b3f      	lsrs	r7, r7, #12
 800252a:	0016      	movs	r6, r2
 800252c:	4b00      	ldr	r3, [pc, #0]	; (8002530 <__aeabi_dmul+0x4d8>)
 800252e:	e5fe      	b.n	800212e <__aeabi_dmul+0xd6>
 8002530:	000007ff 	.word	0x000007ff
 8002534:	0000041e 	.word	0x0000041e
 8002538:	0000043e 	.word	0x0000043e

0800253c <__aeabi_dsub>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	4657      	mov	r7, sl
 8002540:	464e      	mov	r6, r9
 8002542:	4645      	mov	r5, r8
 8002544:	46de      	mov	lr, fp
 8002546:	000c      	movs	r4, r1
 8002548:	0309      	lsls	r1, r1, #12
 800254a:	b5e0      	push	{r5, r6, r7, lr}
 800254c:	0a49      	lsrs	r1, r1, #9
 800254e:	0f46      	lsrs	r6, r0, #29
 8002550:	005f      	lsls	r7, r3, #1
 8002552:	4331      	orrs	r1, r6
 8002554:	031e      	lsls	r6, r3, #12
 8002556:	0fdb      	lsrs	r3, r3, #31
 8002558:	0a76      	lsrs	r6, r6, #9
 800255a:	469b      	mov	fp, r3
 800255c:	0f53      	lsrs	r3, r2, #29
 800255e:	4333      	orrs	r3, r6
 8002560:	4ec8      	ldr	r6, [pc, #800]	; (8002884 <__aeabi_dsub+0x348>)
 8002562:	0065      	lsls	r5, r4, #1
 8002564:	00c0      	lsls	r0, r0, #3
 8002566:	0fe4      	lsrs	r4, r4, #31
 8002568:	00d2      	lsls	r2, r2, #3
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	46a2      	mov	sl, r4
 800256e:	4681      	mov	r9, r0
 8002570:	0d7f      	lsrs	r7, r7, #21
 8002572:	469c      	mov	ip, r3
 8002574:	4690      	mov	r8, r2
 8002576:	42b7      	cmp	r7, r6
 8002578:	d100      	bne.n	800257c <__aeabi_dsub+0x40>
 800257a:	e0b9      	b.n	80026f0 <__aeabi_dsub+0x1b4>
 800257c:	465b      	mov	r3, fp
 800257e:	2601      	movs	r6, #1
 8002580:	4073      	eors	r3, r6
 8002582:	469b      	mov	fp, r3
 8002584:	1bee      	subs	r6, r5, r7
 8002586:	45a3      	cmp	fp, r4
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x50>
 800258a:	e083      	b.n	8002694 <__aeabi_dsub+0x158>
 800258c:	2e00      	cmp	r6, #0
 800258e:	dd63      	ble.n	8002658 <__aeabi_dsub+0x11c>
 8002590:	2f00      	cmp	r7, #0
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x5a>
 8002594:	e0b1      	b.n	80026fa <__aeabi_dsub+0x1be>
 8002596:	4663      	mov	r3, ip
 8002598:	4313      	orrs	r3, r2
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x62>
 800259c:	e123      	b.n	80027e6 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x6a>
 80025a4:	e1ba      	b.n	800291c <__aeabi_dsub+0x3e0>
 80025a6:	1a86      	subs	r6, r0, r2
 80025a8:	4663      	mov	r3, ip
 80025aa:	42b0      	cmp	r0, r6
 80025ac:	4180      	sbcs	r0, r0
 80025ae:	2501      	movs	r5, #1
 80025b0:	1ac9      	subs	r1, r1, r3
 80025b2:	4240      	negs	r0, r0
 80025b4:	1a09      	subs	r1, r1, r0
 80025b6:	020b      	lsls	r3, r1, #8
 80025b8:	d400      	bmi.n	80025bc <__aeabi_dsub+0x80>
 80025ba:	e147      	b.n	800284c <__aeabi_dsub+0x310>
 80025bc:	0249      	lsls	r1, r1, #9
 80025be:	0a4b      	lsrs	r3, r1, #9
 80025c0:	4698      	mov	r8, r3
 80025c2:	4643      	mov	r3, r8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d100      	bne.n	80025ca <__aeabi_dsub+0x8e>
 80025c8:	e189      	b.n	80028de <__aeabi_dsub+0x3a2>
 80025ca:	4640      	mov	r0, r8
 80025cc:	f000 fc92 	bl	8002ef4 <__clzsi2>
 80025d0:	0003      	movs	r3, r0
 80025d2:	3b08      	subs	r3, #8
 80025d4:	2b1f      	cmp	r3, #31
 80025d6:	dd00      	ble.n	80025da <__aeabi_dsub+0x9e>
 80025d8:	e17c      	b.n	80028d4 <__aeabi_dsub+0x398>
 80025da:	2220      	movs	r2, #32
 80025dc:	0030      	movs	r0, r6
 80025de:	1ad2      	subs	r2, r2, r3
 80025e0:	4641      	mov	r1, r8
 80025e2:	40d0      	lsrs	r0, r2
 80025e4:	4099      	lsls	r1, r3
 80025e6:	0002      	movs	r2, r0
 80025e8:	409e      	lsls	r6, r3
 80025ea:	430a      	orrs	r2, r1
 80025ec:	429d      	cmp	r5, r3
 80025ee:	dd00      	ble.n	80025f2 <__aeabi_dsub+0xb6>
 80025f0:	e16a      	b.n	80028c8 <__aeabi_dsub+0x38c>
 80025f2:	1b5d      	subs	r5, r3, r5
 80025f4:	1c6b      	adds	r3, r5, #1
 80025f6:	2b1f      	cmp	r3, #31
 80025f8:	dd00      	ble.n	80025fc <__aeabi_dsub+0xc0>
 80025fa:	e194      	b.n	8002926 <__aeabi_dsub+0x3ea>
 80025fc:	2120      	movs	r1, #32
 80025fe:	0010      	movs	r0, r2
 8002600:	0035      	movs	r5, r6
 8002602:	1ac9      	subs	r1, r1, r3
 8002604:	408e      	lsls	r6, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4088      	lsls	r0, r1
 800260a:	40dd      	lsrs	r5, r3
 800260c:	1e71      	subs	r1, r6, #1
 800260e:	418e      	sbcs	r6, r1
 8002610:	0011      	movs	r1, r2
 8002612:	2207      	movs	r2, #7
 8002614:	4328      	orrs	r0, r5
 8002616:	2500      	movs	r5, #0
 8002618:	4306      	orrs	r6, r0
 800261a:	4032      	ands	r2, r6
 800261c:	2a00      	cmp	r2, #0
 800261e:	d009      	beq.n	8002634 <__aeabi_dsub+0xf8>
 8002620:	230f      	movs	r3, #15
 8002622:	4033      	ands	r3, r6
 8002624:	2b04      	cmp	r3, #4
 8002626:	d005      	beq.n	8002634 <__aeabi_dsub+0xf8>
 8002628:	1d33      	adds	r3, r6, #4
 800262a:	42b3      	cmp	r3, r6
 800262c:	41b6      	sbcs	r6, r6
 800262e:	4276      	negs	r6, r6
 8002630:	1989      	adds	r1, r1, r6
 8002632:	001e      	movs	r6, r3
 8002634:	020b      	lsls	r3, r1, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0xfe>
 8002638:	e23d      	b.n	8002ab6 <__aeabi_dsub+0x57a>
 800263a:	1c6a      	adds	r2, r5, #1
 800263c:	4b91      	ldr	r3, [pc, #580]	; (8002884 <__aeabi_dsub+0x348>)
 800263e:	0555      	lsls	r5, r2, #21
 8002640:	0d6d      	lsrs	r5, r5, #21
 8002642:	429a      	cmp	r2, r3
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x10c>
 8002646:	e119      	b.n	800287c <__aeabi_dsub+0x340>
 8002648:	4a8f      	ldr	r2, [pc, #572]	; (8002888 <__aeabi_dsub+0x34c>)
 800264a:	08f6      	lsrs	r6, r6, #3
 800264c:	400a      	ands	r2, r1
 800264e:	0757      	lsls	r7, r2, #29
 8002650:	0252      	lsls	r2, r2, #9
 8002652:	4337      	orrs	r7, r6
 8002654:	0b12      	lsrs	r2, r2, #12
 8002656:	e09b      	b.n	8002790 <__aeabi_dsub+0x254>
 8002658:	2e00      	cmp	r6, #0
 800265a:	d000      	beq.n	800265e <__aeabi_dsub+0x122>
 800265c:	e0c5      	b.n	80027ea <__aeabi_dsub+0x2ae>
 800265e:	1c6e      	adds	r6, r5, #1
 8002660:	0576      	lsls	r6, r6, #21
 8002662:	0d76      	lsrs	r6, r6, #21
 8002664:	2e01      	cmp	r6, #1
 8002666:	dc00      	bgt.n	800266a <__aeabi_dsub+0x12e>
 8002668:	e148      	b.n	80028fc <__aeabi_dsub+0x3c0>
 800266a:	4667      	mov	r7, ip
 800266c:	1a86      	subs	r6, r0, r2
 800266e:	1bcb      	subs	r3, r1, r7
 8002670:	42b0      	cmp	r0, r6
 8002672:	41bf      	sbcs	r7, r7
 8002674:	427f      	negs	r7, r7
 8002676:	46b8      	mov	r8, r7
 8002678:	001f      	movs	r7, r3
 800267a:	4643      	mov	r3, r8
 800267c:	1aff      	subs	r7, r7, r3
 800267e:	003b      	movs	r3, r7
 8002680:	46b8      	mov	r8, r7
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	d500      	bpl.n	8002688 <__aeabi_dsub+0x14c>
 8002686:	e15f      	b.n	8002948 <__aeabi_dsub+0x40c>
 8002688:	4337      	orrs	r7, r6
 800268a:	d19a      	bne.n	80025c2 <__aeabi_dsub+0x86>
 800268c:	2200      	movs	r2, #0
 800268e:	2400      	movs	r4, #0
 8002690:	2500      	movs	r5, #0
 8002692:	e079      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002694:	2e00      	cmp	r6, #0
 8002696:	dc00      	bgt.n	800269a <__aeabi_dsub+0x15e>
 8002698:	e0fa      	b.n	8002890 <__aeabi_dsub+0x354>
 800269a:	2f00      	cmp	r7, #0
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x164>
 800269e:	e08d      	b.n	80027bc <__aeabi_dsub+0x280>
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <__aeabi_dsub+0x348>)
 80026a2:	429d      	cmp	r5, r3
 80026a4:	d067      	beq.n	8002776 <__aeabi_dsub+0x23a>
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	4667      	mov	r7, ip
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431f      	orrs	r7, r3
 80026ae:	46bc      	mov	ip, r7
 80026b0:	2e38      	cmp	r6, #56	; 0x38
 80026b2:	dc00      	bgt.n	80026b6 <__aeabi_dsub+0x17a>
 80026b4:	e152      	b.n	800295c <__aeabi_dsub+0x420>
 80026b6:	4663      	mov	r3, ip
 80026b8:	4313      	orrs	r3, r2
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	4193      	sbcs	r3, r2
 80026be:	181e      	adds	r6, r3, r0
 80026c0:	4286      	cmp	r6, r0
 80026c2:	4180      	sbcs	r0, r0
 80026c4:	4240      	negs	r0, r0
 80026c6:	1809      	adds	r1, r1, r0
 80026c8:	020b      	lsls	r3, r1, #8
 80026ca:	d400      	bmi.n	80026ce <__aeabi_dsub+0x192>
 80026cc:	e0be      	b.n	800284c <__aeabi_dsub+0x310>
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <__aeabi_dsub+0x348>)
 80026d0:	3501      	adds	r5, #1
 80026d2:	429d      	cmp	r5, r3
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x19c>
 80026d6:	e0d2      	b.n	800287e <__aeabi_dsub+0x342>
 80026d8:	4a6b      	ldr	r2, [pc, #428]	; (8002888 <__aeabi_dsub+0x34c>)
 80026da:	0873      	lsrs	r3, r6, #1
 80026dc:	400a      	ands	r2, r1
 80026de:	2101      	movs	r1, #1
 80026e0:	400e      	ands	r6, r1
 80026e2:	431e      	orrs	r6, r3
 80026e4:	0851      	lsrs	r1, r2, #1
 80026e6:	07d3      	lsls	r3, r2, #31
 80026e8:	2207      	movs	r2, #7
 80026ea:	431e      	orrs	r6, r3
 80026ec:	4032      	ands	r2, r6
 80026ee:	e795      	b.n	800261c <__aeabi_dsub+0xe0>
 80026f0:	001e      	movs	r6, r3
 80026f2:	4316      	orrs	r6, r2
 80026f4:	d000      	beq.n	80026f8 <__aeabi_dsub+0x1bc>
 80026f6:	e745      	b.n	8002584 <__aeabi_dsub+0x48>
 80026f8:	e740      	b.n	800257c <__aeabi_dsub+0x40>
 80026fa:	4b62      	ldr	r3, [pc, #392]	; (8002884 <__aeabi_dsub+0x348>)
 80026fc:	429d      	cmp	r5, r3
 80026fe:	d03a      	beq.n	8002776 <__aeabi_dsub+0x23a>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	4667      	mov	r7, ip
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431f      	orrs	r7, r3
 8002708:	46bc      	mov	ip, r7
 800270a:	2e38      	cmp	r6, #56	; 0x38
 800270c:	dd00      	ble.n	8002710 <__aeabi_dsub+0x1d4>
 800270e:	e0eb      	b.n	80028e8 <__aeabi_dsub+0x3ac>
 8002710:	2e1f      	cmp	r6, #31
 8002712:	dc00      	bgt.n	8002716 <__aeabi_dsub+0x1da>
 8002714:	e13a      	b.n	800298c <__aeabi_dsub+0x450>
 8002716:	0033      	movs	r3, r6
 8002718:	4667      	mov	r7, ip
 800271a:	3b20      	subs	r3, #32
 800271c:	40df      	lsrs	r7, r3
 800271e:	003b      	movs	r3, r7
 8002720:	2e20      	cmp	r6, #32
 8002722:	d005      	beq.n	8002730 <__aeabi_dsub+0x1f4>
 8002724:	2740      	movs	r7, #64	; 0x40
 8002726:	1bbf      	subs	r7, r7, r6
 8002728:	4666      	mov	r6, ip
 800272a:	40be      	lsls	r6, r7
 800272c:	4332      	orrs	r2, r6
 800272e:	4690      	mov	r8, r2
 8002730:	4646      	mov	r6, r8
 8002732:	1e72      	subs	r2, r6, #1
 8002734:	4196      	sbcs	r6, r2
 8002736:	4333      	orrs	r3, r6
 8002738:	e0da      	b.n	80028f0 <__aeabi_dsub+0x3b4>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x204>
 800273e:	e214      	b.n	8002b6a <__aeabi_dsub+0x62e>
 8002740:	4663      	mov	r3, ip
 8002742:	4313      	orrs	r3, r2
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x20c>
 8002746:	e168      	b.n	8002a1a <__aeabi_dsub+0x4de>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	074e      	lsls	r6, r1, #29
 800274c:	08c0      	lsrs	r0, r0, #3
 800274e:	08c9      	lsrs	r1, r1, #3
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	4306      	orrs	r6, r0
 8002754:	4219      	tst	r1, r3
 8002756:	d008      	beq.n	800276a <__aeabi_dsub+0x22e>
 8002758:	4660      	mov	r0, ip
 800275a:	08c0      	lsrs	r0, r0, #3
 800275c:	4218      	tst	r0, r3
 800275e:	d104      	bne.n	800276a <__aeabi_dsub+0x22e>
 8002760:	4663      	mov	r3, ip
 8002762:	0001      	movs	r1, r0
 8002764:	08d2      	lsrs	r2, r2, #3
 8002766:	075e      	lsls	r6, r3, #29
 8002768:	4316      	orrs	r6, r2
 800276a:	00f3      	lsls	r3, r6, #3
 800276c:	4699      	mov	r9, r3
 800276e:	00c9      	lsls	r1, r1, #3
 8002770:	0f72      	lsrs	r2, r6, #29
 8002772:	4d44      	ldr	r5, [pc, #272]	; (8002884 <__aeabi_dsub+0x348>)
 8002774:	4311      	orrs	r1, r2
 8002776:	464b      	mov	r3, r9
 8002778:	08de      	lsrs	r6, r3, #3
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <__aeabi_dsub+0x348>)
 800277c:	074f      	lsls	r7, r1, #29
 800277e:	4337      	orrs	r7, r6
 8002780:	08ca      	lsrs	r2, r1, #3
 8002782:	429d      	cmp	r5, r3
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x24c>
 8002786:	e06e      	b.n	8002866 <__aeabi_dsub+0x32a>
 8002788:	0312      	lsls	r2, r2, #12
 800278a:	056d      	lsls	r5, r5, #21
 800278c:	0b12      	lsrs	r2, r2, #12
 800278e:	0d6d      	lsrs	r5, r5, #21
 8002790:	2100      	movs	r1, #0
 8002792:	0312      	lsls	r2, r2, #12
 8002794:	0b13      	lsrs	r3, r2, #12
 8002796:	0d0a      	lsrs	r2, r1, #20
 8002798:	0512      	lsls	r2, r2, #20
 800279a:	431a      	orrs	r2, r3
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <__aeabi_dsub+0x350>)
 800279e:	052d      	lsls	r5, r5, #20
 80027a0:	4013      	ands	r3, r2
 80027a2:	432b      	orrs	r3, r5
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	07e4      	lsls	r4, r4, #31
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	4323      	orrs	r3, r4
 80027ac:	0038      	movs	r0, r7
 80027ae:	0019      	movs	r1, r3
 80027b0:	bc3c      	pop	{r2, r3, r4, r5}
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	46a2      	mov	sl, r4
 80027b8:	46ab      	mov	fp, r5
 80027ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027bc:	4663      	mov	r3, ip
 80027be:	4313      	orrs	r3, r2
 80027c0:	d011      	beq.n	80027e6 <__aeabi_dsub+0x2aa>
 80027c2:	1e73      	subs	r3, r6, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d000      	beq.n	80027ca <__aeabi_dsub+0x28e>
 80027c8:	e107      	b.n	80029da <__aeabi_dsub+0x49e>
 80027ca:	1886      	adds	r6, r0, r2
 80027cc:	4286      	cmp	r6, r0
 80027ce:	4180      	sbcs	r0, r0
 80027d0:	4461      	add	r1, ip
 80027d2:	4240      	negs	r0, r0
 80027d4:	1809      	adds	r1, r1, r0
 80027d6:	2501      	movs	r5, #1
 80027d8:	020b      	lsls	r3, r1, #8
 80027da:	d537      	bpl.n	800284c <__aeabi_dsub+0x310>
 80027dc:	2502      	movs	r5, #2
 80027de:	e77b      	b.n	80026d8 <__aeabi_dsub+0x19c>
 80027e0:	003e      	movs	r6, r7
 80027e2:	4661      	mov	r1, ip
 80027e4:	4691      	mov	r9, r2
 80027e6:	0035      	movs	r5, r6
 80027e8:	e7c5      	b.n	8002776 <__aeabi_dsub+0x23a>
 80027ea:	465c      	mov	r4, fp
 80027ec:	2d00      	cmp	r5, #0
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x2b6>
 80027f0:	e0e1      	b.n	80029b6 <__aeabi_dsub+0x47a>
 80027f2:	000b      	movs	r3, r1
 80027f4:	4303      	orrs	r3, r0
 80027f6:	d0f3      	beq.n	80027e0 <__aeabi_dsub+0x2a4>
 80027f8:	1c73      	adds	r3, r6, #1
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x2c2>
 80027fc:	e1ac      	b.n	8002b58 <__aeabi_dsub+0x61c>
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <__aeabi_dsub+0x348>)
 8002800:	429f      	cmp	r7, r3
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x2ca>
 8002804:	e13a      	b.n	8002a7c <__aeabi_dsub+0x540>
 8002806:	43f3      	mvns	r3, r6
 8002808:	2b38      	cmp	r3, #56	; 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x2d2>
 800280c:	e16f      	b.n	8002aee <__aeabi_dsub+0x5b2>
 800280e:	2b1f      	cmp	r3, #31
 8002810:	dd00      	ble.n	8002814 <__aeabi_dsub+0x2d8>
 8002812:	e18c      	b.n	8002b2e <__aeabi_dsub+0x5f2>
 8002814:	2520      	movs	r5, #32
 8002816:	000e      	movs	r6, r1
 8002818:	1aed      	subs	r5, r5, r3
 800281a:	40ae      	lsls	r6, r5
 800281c:	46b0      	mov	r8, r6
 800281e:	0006      	movs	r6, r0
 8002820:	46aa      	mov	sl, r5
 8002822:	40de      	lsrs	r6, r3
 8002824:	4645      	mov	r5, r8
 8002826:	4335      	orrs	r5, r6
 8002828:	002e      	movs	r6, r5
 800282a:	4655      	mov	r5, sl
 800282c:	40d9      	lsrs	r1, r3
 800282e:	40a8      	lsls	r0, r5
 8002830:	4663      	mov	r3, ip
 8002832:	1e45      	subs	r5, r0, #1
 8002834:	41a8      	sbcs	r0, r5
 8002836:	1a5b      	subs	r3, r3, r1
 8002838:	469c      	mov	ip, r3
 800283a:	4330      	orrs	r0, r6
 800283c:	1a16      	subs	r6, r2, r0
 800283e:	42b2      	cmp	r2, r6
 8002840:	4192      	sbcs	r2, r2
 8002842:	4663      	mov	r3, ip
 8002844:	4252      	negs	r2, r2
 8002846:	1a99      	subs	r1, r3, r2
 8002848:	003d      	movs	r5, r7
 800284a:	e6b4      	b.n	80025b6 <__aeabi_dsub+0x7a>
 800284c:	2207      	movs	r2, #7
 800284e:	4032      	ands	r2, r6
 8002850:	2a00      	cmp	r2, #0
 8002852:	d000      	beq.n	8002856 <__aeabi_dsub+0x31a>
 8002854:	e6e4      	b.n	8002620 <__aeabi_dsub+0xe4>
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <__aeabi_dsub+0x348>)
 8002858:	08f6      	lsrs	r6, r6, #3
 800285a:	074f      	lsls	r7, r1, #29
 800285c:	4337      	orrs	r7, r6
 800285e:	08ca      	lsrs	r2, r1, #3
 8002860:	429d      	cmp	r5, r3
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x32a>
 8002864:	e790      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002866:	003b      	movs	r3, r7
 8002868:	4313      	orrs	r3, r2
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x332>
 800286c:	e1a6      	b.n	8002bbc <__aeabi_dsub+0x680>
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	431a      	orrs	r2, r3
 8002874:	0312      	lsls	r2, r2, #12
 8002876:	0b12      	lsrs	r2, r2, #12
 8002878:	4d02      	ldr	r5, [pc, #8]	; (8002884 <__aeabi_dsub+0x348>)
 800287a:	e789      	b.n	8002790 <__aeabi_dsub+0x254>
 800287c:	0015      	movs	r5, r2
 800287e:	2200      	movs	r2, #0
 8002880:	2700      	movs	r7, #0
 8002882:	e785      	b.n	8002790 <__aeabi_dsub+0x254>
 8002884:	000007ff 	.word	0x000007ff
 8002888:	ff7fffff 	.word	0xff7fffff
 800288c:	800fffff 	.word	0x800fffff
 8002890:	2e00      	cmp	r6, #0
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x35a>
 8002894:	e0c7      	b.n	8002a26 <__aeabi_dsub+0x4ea>
 8002896:	1c6b      	adds	r3, r5, #1
 8002898:	055e      	lsls	r6, r3, #21
 800289a:	0d76      	lsrs	r6, r6, #21
 800289c:	2e01      	cmp	r6, #1
 800289e:	dc00      	bgt.n	80028a2 <__aeabi_dsub+0x366>
 80028a0:	e0f0      	b.n	8002a84 <__aeabi_dsub+0x548>
 80028a2:	4dc8      	ldr	r5, [pc, #800]	; (8002bc4 <__aeabi_dsub+0x688>)
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x36e>
 80028a8:	e0b9      	b.n	8002a1e <__aeabi_dsub+0x4e2>
 80028aa:	1885      	adds	r5, r0, r2
 80028ac:	000a      	movs	r2, r1
 80028ae:	4285      	cmp	r5, r0
 80028b0:	4189      	sbcs	r1, r1
 80028b2:	4462      	add	r2, ip
 80028b4:	4249      	negs	r1, r1
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	2207      	movs	r2, #7
 80028ba:	07ce      	lsls	r6, r1, #31
 80028bc:	086d      	lsrs	r5, r5, #1
 80028be:	432e      	orrs	r6, r5
 80028c0:	0849      	lsrs	r1, r1, #1
 80028c2:	4032      	ands	r2, r6
 80028c4:	001d      	movs	r5, r3
 80028c6:	e6a9      	b.n	800261c <__aeabi_dsub+0xe0>
 80028c8:	49bf      	ldr	r1, [pc, #764]	; (8002bc8 <__aeabi_dsub+0x68c>)
 80028ca:	1aed      	subs	r5, r5, r3
 80028cc:	4011      	ands	r1, r2
 80028ce:	2207      	movs	r2, #7
 80028d0:	4032      	ands	r2, r6
 80028d2:	e6a3      	b.n	800261c <__aeabi_dsub+0xe0>
 80028d4:	0032      	movs	r2, r6
 80028d6:	3828      	subs	r0, #40	; 0x28
 80028d8:	4082      	lsls	r2, r0
 80028da:	2600      	movs	r6, #0
 80028dc:	e686      	b.n	80025ec <__aeabi_dsub+0xb0>
 80028de:	0030      	movs	r0, r6
 80028e0:	f000 fb08 	bl	8002ef4 <__clzsi2>
 80028e4:	3020      	adds	r0, #32
 80028e6:	e673      	b.n	80025d0 <__aeabi_dsub+0x94>
 80028e8:	4663      	mov	r3, ip
 80028ea:	4313      	orrs	r3, r2
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	4193      	sbcs	r3, r2
 80028f0:	1ac6      	subs	r6, r0, r3
 80028f2:	42b0      	cmp	r0, r6
 80028f4:	4180      	sbcs	r0, r0
 80028f6:	4240      	negs	r0, r0
 80028f8:	1a09      	subs	r1, r1, r0
 80028fa:	e65c      	b.n	80025b6 <__aeabi_dsub+0x7a>
 80028fc:	000e      	movs	r6, r1
 80028fe:	4667      	mov	r7, ip
 8002900:	4306      	orrs	r6, r0
 8002902:	4317      	orrs	r7, r2
 8002904:	2d00      	cmp	r5, #0
 8002906:	d15e      	bne.n	80029c6 <__aeabi_dsub+0x48a>
 8002908:	2e00      	cmp	r6, #0
 800290a:	d000      	beq.n	800290e <__aeabi_dsub+0x3d2>
 800290c:	e0f3      	b.n	8002af6 <__aeabi_dsub+0x5ba>
 800290e:	2f00      	cmp	r7, #0
 8002910:	d100      	bne.n	8002914 <__aeabi_dsub+0x3d8>
 8002912:	e11e      	b.n	8002b52 <__aeabi_dsub+0x616>
 8002914:	465c      	mov	r4, fp
 8002916:	4661      	mov	r1, ip
 8002918:	4691      	mov	r9, r2
 800291a:	e72c      	b.n	8002776 <__aeabi_dsub+0x23a>
 800291c:	4fa9      	ldr	r7, [pc, #676]	; (8002bc4 <__aeabi_dsub+0x688>)
 800291e:	42be      	cmp	r6, r7
 8002920:	d07b      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 8002922:	001e      	movs	r6, r3
 8002924:	e6f1      	b.n	800270a <__aeabi_dsub+0x1ce>
 8002926:	0010      	movs	r0, r2
 8002928:	3d1f      	subs	r5, #31
 800292a:	40e8      	lsrs	r0, r5
 800292c:	2b20      	cmp	r3, #32
 800292e:	d003      	beq.n	8002938 <__aeabi_dsub+0x3fc>
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	409a      	lsls	r2, r3
 8002936:	4316      	orrs	r6, r2
 8002938:	1e73      	subs	r3, r6, #1
 800293a:	419e      	sbcs	r6, r3
 800293c:	2207      	movs	r2, #7
 800293e:	4306      	orrs	r6, r0
 8002940:	4032      	ands	r2, r6
 8002942:	2100      	movs	r1, #0
 8002944:	2500      	movs	r5, #0
 8002946:	e783      	b.n	8002850 <__aeabi_dsub+0x314>
 8002948:	1a16      	subs	r6, r2, r0
 800294a:	4663      	mov	r3, ip
 800294c:	42b2      	cmp	r2, r6
 800294e:	4180      	sbcs	r0, r0
 8002950:	1a59      	subs	r1, r3, r1
 8002952:	4240      	negs	r0, r0
 8002954:	1a0b      	subs	r3, r1, r0
 8002956:	4698      	mov	r8, r3
 8002958:	465c      	mov	r4, fp
 800295a:	e632      	b.n	80025c2 <__aeabi_dsub+0x86>
 800295c:	2e1f      	cmp	r6, #31
 800295e:	dd00      	ble.n	8002962 <__aeabi_dsub+0x426>
 8002960:	e0ab      	b.n	8002aba <__aeabi_dsub+0x57e>
 8002962:	2720      	movs	r7, #32
 8002964:	1bbb      	subs	r3, r7, r6
 8002966:	469a      	mov	sl, r3
 8002968:	4663      	mov	r3, ip
 800296a:	4657      	mov	r7, sl
 800296c:	40bb      	lsls	r3, r7
 800296e:	4699      	mov	r9, r3
 8002970:	0013      	movs	r3, r2
 8002972:	464f      	mov	r7, r9
 8002974:	40f3      	lsrs	r3, r6
 8002976:	431f      	orrs	r7, r3
 8002978:	003b      	movs	r3, r7
 800297a:	4657      	mov	r7, sl
 800297c:	40ba      	lsls	r2, r7
 800297e:	1e57      	subs	r7, r2, #1
 8002980:	41ba      	sbcs	r2, r7
 8002982:	4313      	orrs	r3, r2
 8002984:	4662      	mov	r2, ip
 8002986:	40f2      	lsrs	r2, r6
 8002988:	1889      	adds	r1, r1, r2
 800298a:	e698      	b.n	80026be <__aeabi_dsub+0x182>
 800298c:	2720      	movs	r7, #32
 800298e:	1bbb      	subs	r3, r7, r6
 8002990:	469a      	mov	sl, r3
 8002992:	4663      	mov	r3, ip
 8002994:	4657      	mov	r7, sl
 8002996:	40bb      	lsls	r3, r7
 8002998:	4699      	mov	r9, r3
 800299a:	0013      	movs	r3, r2
 800299c:	464f      	mov	r7, r9
 800299e:	40f3      	lsrs	r3, r6
 80029a0:	431f      	orrs	r7, r3
 80029a2:	003b      	movs	r3, r7
 80029a4:	4657      	mov	r7, sl
 80029a6:	40ba      	lsls	r2, r7
 80029a8:	1e57      	subs	r7, r2, #1
 80029aa:	41ba      	sbcs	r2, r7
 80029ac:	4313      	orrs	r3, r2
 80029ae:	4662      	mov	r2, ip
 80029b0:	40f2      	lsrs	r2, r6
 80029b2:	1a89      	subs	r1, r1, r2
 80029b4:	e79c      	b.n	80028f0 <__aeabi_dsub+0x3b4>
 80029b6:	4b83      	ldr	r3, [pc, #524]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029b8:	429f      	cmp	r7, r3
 80029ba:	d05f      	beq.n	8002a7c <__aeabi_dsub+0x540>
 80029bc:	2580      	movs	r5, #128	; 0x80
 80029be:	042d      	lsls	r5, r5, #16
 80029c0:	4273      	negs	r3, r6
 80029c2:	4329      	orrs	r1, r5
 80029c4:	e720      	b.n	8002808 <__aeabi_dsub+0x2cc>
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	d10c      	bne.n	80029e4 <__aeabi_dsub+0x4a8>
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x494>
 80029ce:	e0d0      	b.n	8002b72 <__aeabi_dsub+0x636>
 80029d0:	465c      	mov	r4, fp
 80029d2:	4661      	mov	r1, ip
 80029d4:	4691      	mov	r9, r2
 80029d6:	4d7b      	ldr	r5, [pc, #492]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029d8:	e6cd      	b.n	8002776 <__aeabi_dsub+0x23a>
 80029da:	4f7a      	ldr	r7, [pc, #488]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029dc:	42be      	cmp	r6, r7
 80029de:	d01c      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 80029e0:	001e      	movs	r6, r3
 80029e2:	e665      	b.n	80026b0 <__aeabi_dsub+0x174>
 80029e4:	2f00      	cmp	r7, #0
 80029e6:	d018      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 80029e8:	08c0      	lsrs	r0, r0, #3
 80029ea:	074e      	lsls	r6, r1, #29
 80029ec:	4306      	orrs	r6, r0
 80029ee:	2080      	movs	r0, #128	; 0x80
 80029f0:	08c9      	lsrs	r1, r1, #3
 80029f2:	0300      	lsls	r0, r0, #12
 80029f4:	4201      	tst	r1, r0
 80029f6:	d008      	beq.n	8002a0a <__aeabi_dsub+0x4ce>
 80029f8:	4663      	mov	r3, ip
 80029fa:	08dc      	lsrs	r4, r3, #3
 80029fc:	4204      	tst	r4, r0
 80029fe:	d104      	bne.n	8002a0a <__aeabi_dsub+0x4ce>
 8002a00:	0021      	movs	r1, r4
 8002a02:	46da      	mov	sl, fp
 8002a04:	08d2      	lsrs	r2, r2, #3
 8002a06:	075e      	lsls	r6, r3, #29
 8002a08:	4316      	orrs	r6, r2
 8002a0a:	00f3      	lsls	r3, r6, #3
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	2401      	movs	r4, #1
 8002a10:	4653      	mov	r3, sl
 8002a12:	00c9      	lsls	r1, r1, #3
 8002a14:	0f72      	lsrs	r2, r6, #29
 8002a16:	4311      	orrs	r1, r2
 8002a18:	401c      	ands	r4, r3
 8002a1a:	4d6a      	ldr	r5, [pc, #424]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002a1c:	e6ab      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a1e:	001d      	movs	r5, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	2700      	movs	r7, #0
 8002a24:	e6b4      	b.n	8002790 <__aeabi_dsub+0x254>
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	d159      	bne.n	8002ade <__aeabi_dsub+0x5a2>
 8002a2a:	000b      	movs	r3, r1
 8002a2c:	4303      	orrs	r3, r0
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x4f6>
 8002a30:	e6d6      	b.n	80027e0 <__aeabi_dsub+0x2a4>
 8002a32:	1c73      	adds	r3, r6, #1
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x4fc>
 8002a36:	e0b2      	b.n	8002b9e <__aeabi_dsub+0x662>
 8002a38:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002a3a:	429f      	cmp	r7, r3
 8002a3c:	d01e      	beq.n	8002a7c <__aeabi_dsub+0x540>
 8002a3e:	43f3      	mvns	r3, r6
 8002a40:	2b38      	cmp	r3, #56	; 0x38
 8002a42:	dc6f      	bgt.n	8002b24 <__aeabi_dsub+0x5e8>
 8002a44:	2b1f      	cmp	r3, #31
 8002a46:	dd00      	ble.n	8002a4a <__aeabi_dsub+0x50e>
 8002a48:	e097      	b.n	8002b7a <__aeabi_dsub+0x63e>
 8002a4a:	2520      	movs	r5, #32
 8002a4c:	000e      	movs	r6, r1
 8002a4e:	1aed      	subs	r5, r5, r3
 8002a50:	40ae      	lsls	r6, r5
 8002a52:	46b0      	mov	r8, r6
 8002a54:	0006      	movs	r6, r0
 8002a56:	46aa      	mov	sl, r5
 8002a58:	40de      	lsrs	r6, r3
 8002a5a:	4645      	mov	r5, r8
 8002a5c:	4335      	orrs	r5, r6
 8002a5e:	002e      	movs	r6, r5
 8002a60:	4655      	mov	r5, sl
 8002a62:	40a8      	lsls	r0, r5
 8002a64:	40d9      	lsrs	r1, r3
 8002a66:	1e45      	subs	r5, r0, #1
 8002a68:	41a8      	sbcs	r0, r5
 8002a6a:	448c      	add	ip, r1
 8002a6c:	4306      	orrs	r6, r0
 8002a6e:	18b6      	adds	r6, r6, r2
 8002a70:	4296      	cmp	r6, r2
 8002a72:	4192      	sbcs	r2, r2
 8002a74:	4251      	negs	r1, r2
 8002a76:	4461      	add	r1, ip
 8002a78:	003d      	movs	r5, r7
 8002a7a:	e625      	b.n	80026c8 <__aeabi_dsub+0x18c>
 8002a7c:	003d      	movs	r5, r7
 8002a7e:	4661      	mov	r1, ip
 8002a80:	4691      	mov	r9, r2
 8002a82:	e678      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a84:	000b      	movs	r3, r1
 8002a86:	4303      	orrs	r3, r0
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	d000      	beq.n	8002a8e <__aeabi_dsub+0x552>
 8002a8c:	e655      	b.n	800273a <__aeabi_dsub+0x1fe>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f5      	beq.n	8002a7e <__aeabi_dsub+0x542>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	d100      	bne.n	8002a9a <__aeabi_dsub+0x55e>
 8002a98:	e66d      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a9a:	1886      	adds	r6, r0, r2
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4461      	add	r1, ip
 8002aa2:	4240      	negs	r0, r0
 8002aa4:	1809      	adds	r1, r1, r0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	020b      	lsls	r3, r1, #8
 8002aaa:	d400      	bmi.n	8002aae <__aeabi_dsub+0x572>
 8002aac:	e6d0      	b.n	8002850 <__aeabi_dsub+0x314>
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <__aeabi_dsub+0x68c>)
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	e5b2      	b.n	800261c <__aeabi_dsub+0xe0>
 8002ab6:	46b1      	mov	r9, r6
 8002ab8:	e65d      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002aba:	0033      	movs	r3, r6
 8002abc:	4667      	mov	r7, ip
 8002abe:	3b20      	subs	r3, #32
 8002ac0:	40df      	lsrs	r7, r3
 8002ac2:	003b      	movs	r3, r7
 8002ac4:	2e20      	cmp	r6, #32
 8002ac6:	d005      	beq.n	8002ad4 <__aeabi_dsub+0x598>
 8002ac8:	2740      	movs	r7, #64	; 0x40
 8002aca:	1bbf      	subs	r7, r7, r6
 8002acc:	4666      	mov	r6, ip
 8002ace:	40be      	lsls	r6, r7
 8002ad0:	4332      	orrs	r2, r6
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4646      	mov	r6, r8
 8002ad6:	1e72      	subs	r2, r6, #1
 8002ad8:	4196      	sbcs	r6, r2
 8002ada:	4333      	orrs	r3, r6
 8002adc:	e5ef      	b.n	80026be <__aeabi_dsub+0x182>
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002ae0:	429f      	cmp	r7, r3
 8002ae2:	d0cb      	beq.n	8002a7c <__aeabi_dsub+0x540>
 8002ae4:	2580      	movs	r5, #128	; 0x80
 8002ae6:	042d      	lsls	r5, r5, #16
 8002ae8:	4273      	negs	r3, r6
 8002aea:	4329      	orrs	r1, r5
 8002aec:	e7a8      	b.n	8002a40 <__aeabi_dsub+0x504>
 8002aee:	4308      	orrs	r0, r1
 8002af0:	1e41      	subs	r1, r0, #1
 8002af2:	4188      	sbcs	r0, r1
 8002af4:	e6a2      	b.n	800283c <__aeabi_dsub+0x300>
 8002af6:	2f00      	cmp	r7, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x5c0>
 8002afa:	e63c      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002afc:	4663      	mov	r3, ip
 8002afe:	1a86      	subs	r6, r0, r2
 8002b00:	1acf      	subs	r7, r1, r3
 8002b02:	42b0      	cmp	r0, r6
 8002b04:	419b      	sbcs	r3, r3
 8002b06:	425b      	negs	r3, r3
 8002b08:	1afb      	subs	r3, r7, r3
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	d54e      	bpl.n	8002bae <__aeabi_dsub+0x672>
 8002b10:	1a16      	subs	r6, r2, r0
 8002b12:	4663      	mov	r3, ip
 8002b14:	42b2      	cmp	r2, r6
 8002b16:	4192      	sbcs	r2, r2
 8002b18:	1a59      	subs	r1, r3, r1
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	1a89      	subs	r1, r1, r2
 8002b1e:	465c      	mov	r4, fp
 8002b20:	2200      	movs	r2, #0
 8002b22:	e57b      	b.n	800261c <__aeabi_dsub+0xe0>
 8002b24:	4301      	orrs	r1, r0
 8002b26:	000e      	movs	r6, r1
 8002b28:	1e71      	subs	r1, r6, #1
 8002b2a:	418e      	sbcs	r6, r1
 8002b2c:	e79f      	b.n	8002a6e <__aeabi_dsub+0x532>
 8002b2e:	001d      	movs	r5, r3
 8002b30:	000e      	movs	r6, r1
 8002b32:	3d20      	subs	r5, #32
 8002b34:	40ee      	lsrs	r6, r5
 8002b36:	46b0      	mov	r8, r6
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d004      	beq.n	8002b46 <__aeabi_dsub+0x60a>
 8002b3c:	2540      	movs	r5, #64	; 0x40
 8002b3e:	1aeb      	subs	r3, r5, r3
 8002b40:	4099      	lsls	r1, r3
 8002b42:	4308      	orrs	r0, r1
 8002b44:	4681      	mov	r9, r0
 8002b46:	4648      	mov	r0, r9
 8002b48:	4643      	mov	r3, r8
 8002b4a:	1e41      	subs	r1, r0, #1
 8002b4c:	4188      	sbcs	r0, r1
 8002b4e:	4318      	orrs	r0, r3
 8002b50:	e674      	b.n	800283c <__aeabi_dsub+0x300>
 8002b52:	2200      	movs	r2, #0
 8002b54:	2400      	movs	r4, #0
 8002b56:	e617      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	003d      	movs	r5, r7
 8002b68:	e525      	b.n	80025b6 <__aeabi_dsub+0x7a>
 8002b6a:	4661      	mov	r1, ip
 8002b6c:	4691      	mov	r9, r2
 8002b6e:	4d15      	ldr	r5, [pc, #84]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002b70:	e601      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	2400      	movs	r4, #0
 8002b76:	0312      	lsls	r2, r2, #12
 8002b78:	e679      	b.n	800286e <__aeabi_dsub+0x332>
 8002b7a:	001d      	movs	r5, r3
 8002b7c:	000e      	movs	r6, r1
 8002b7e:	3d20      	subs	r5, #32
 8002b80:	40ee      	lsrs	r6, r5
 8002b82:	46b0      	mov	r8, r6
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d004      	beq.n	8002b92 <__aeabi_dsub+0x656>
 8002b88:	2540      	movs	r5, #64	; 0x40
 8002b8a:	1aeb      	subs	r3, r5, r3
 8002b8c:	4099      	lsls	r1, r3
 8002b8e:	4308      	orrs	r0, r1
 8002b90:	4681      	mov	r9, r0
 8002b92:	464e      	mov	r6, r9
 8002b94:	4643      	mov	r3, r8
 8002b96:	1e71      	subs	r1, r6, #1
 8002b98:	418e      	sbcs	r6, r1
 8002b9a:	431e      	orrs	r6, r3
 8002b9c:	e767      	b.n	8002a6e <__aeabi_dsub+0x532>
 8002b9e:	1886      	adds	r6, r0, r2
 8002ba0:	4296      	cmp	r6, r2
 8002ba2:	419b      	sbcs	r3, r3
 8002ba4:	4461      	add	r1, ip
 8002ba6:	425b      	negs	r3, r3
 8002ba8:	18c9      	adds	r1, r1, r3
 8002baa:	003d      	movs	r5, r7
 8002bac:	e58c      	b.n	80026c8 <__aeabi_dsub+0x18c>
 8002bae:	4647      	mov	r7, r8
 8002bb0:	4337      	orrs	r7, r6
 8002bb2:	d0ce      	beq.n	8002b52 <__aeabi_dsub+0x616>
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	4032      	ands	r2, r6
 8002bba:	e649      	b.n	8002850 <__aeabi_dsub+0x314>
 8002bbc:	2700      	movs	r7, #0
 8002bbe:	003a      	movs	r2, r7
 8002bc0:	e5e6      	b.n	8002790 <__aeabi_dsub+0x254>
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	ff7fffff 	.word	0xff7fffff

08002bcc <__aeabi_dcmpun>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4e0c      	ldr	r6, [pc, #48]	; (8002c00 <__aeabi_dcmpun+0x34>)
 8002bd0:	030d      	lsls	r5, r1, #12
 8002bd2:	031c      	lsls	r4, r3, #12
 8002bd4:	0049      	lsls	r1, r1, #1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	0b2d      	lsrs	r5, r5, #12
 8002bda:	0d49      	lsrs	r1, r1, #21
 8002bdc:	0b24      	lsrs	r4, r4, #12
 8002bde:	0d5b      	lsrs	r3, r3, #21
 8002be0:	42b1      	cmp	r1, r6
 8002be2:	d008      	beq.n	8002bf6 <__aeabi_dcmpun+0x2a>
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <__aeabi_dcmpun+0x34>)
 8002be6:	2000      	movs	r0, #0
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d103      	bne.n	8002bf4 <__aeabi_dcmpun+0x28>
 8002bec:	4314      	orrs	r4, r2
 8002bee:	0020      	movs	r0, r4
 8002bf0:	1e44      	subs	r4, r0, #1
 8002bf2:	41a0      	sbcs	r0, r4
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
 8002bf6:	4305      	orrs	r5, r0
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d1fa      	bne.n	8002bf4 <__aeabi_dcmpun+0x28>
 8002bfe:	e7f1      	b.n	8002be4 <__aeabi_dcmpun+0x18>
 8002c00:	000007ff 	.word	0x000007ff

08002c04 <__aeabi_d2iz>:
 8002c04:	b530      	push	{r4, r5, lr}
 8002c06:	4d14      	ldr	r5, [pc, #80]	; (8002c58 <__aeabi_d2iz+0x54>)
 8002c08:	030a      	lsls	r2, r1, #12
 8002c0a:	004b      	lsls	r3, r1, #1
 8002c0c:	0b12      	lsrs	r2, r2, #12
 8002c0e:	0d5b      	lsrs	r3, r3, #21
 8002c10:	0fc9      	lsrs	r1, r1, #31
 8002c12:	2400      	movs	r4, #0
 8002c14:	42ab      	cmp	r3, r5
 8002c16:	dd11      	ble.n	8002c3c <__aeabi_d2iz+0x38>
 8002c18:	4c10      	ldr	r4, [pc, #64]	; (8002c5c <__aeabi_d2iz+0x58>)
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	dc10      	bgt.n	8002c40 <__aeabi_d2iz+0x3c>
 8002c1e:	2480      	movs	r4, #128	; 0x80
 8002c20:	0364      	lsls	r4, r4, #13
 8002c22:	4322      	orrs	r2, r4
 8002c24:	4c0e      	ldr	r4, [pc, #56]	; (8002c60 <__aeabi_d2iz+0x5c>)
 8002c26:	1ae4      	subs	r4, r4, r3
 8002c28:	2c1f      	cmp	r4, #31
 8002c2a:	dd0c      	ble.n	8002c46 <__aeabi_d2iz+0x42>
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <__aeabi_d2iz+0x60>)
 8002c2e:	1ac3      	subs	r3, r0, r3
 8002c30:	40da      	lsrs	r2, r3
 8002c32:	0013      	movs	r3, r2
 8002c34:	425c      	negs	r4, r3
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_d2iz+0x38>
 8002c3a:	001c      	movs	r4, r3
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	bd30      	pop	{r4, r5, pc}
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <__aeabi_d2iz+0x64>)
 8002c42:	18cc      	adds	r4, r1, r3
 8002c44:	e7fa      	b.n	8002c3c <__aeabi_d2iz+0x38>
 8002c46:	4d09      	ldr	r5, [pc, #36]	; (8002c6c <__aeabi_d2iz+0x68>)
 8002c48:	40e0      	lsrs	r0, r4
 8002c4a:	46ac      	mov	ip, r5
 8002c4c:	4463      	add	r3, ip
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	4303      	orrs	r3, r0
 8002c54:	e7ee      	b.n	8002c34 <__aeabi_d2iz+0x30>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	000003fe 	.word	0x000003fe
 8002c5c:	0000041d 	.word	0x0000041d
 8002c60:	00000433 	.word	0x00000433
 8002c64:	00000413 	.word	0x00000413
 8002c68:	7fffffff 	.word	0x7fffffff
 8002c6c:	fffffbed 	.word	0xfffffbed

08002c70 <__aeabi_i2d>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d02d      	beq.n	8002cd2 <__aeabi_i2d+0x62>
 8002c76:	17c3      	asrs	r3, r0, #31
 8002c78:	18c5      	adds	r5, r0, r3
 8002c7a:	405d      	eors	r5, r3
 8002c7c:	0fc4      	lsrs	r4, r0, #31
 8002c7e:	0028      	movs	r0, r5
 8002c80:	f000 f938 	bl	8002ef4 <__clzsi2>
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <__aeabi_i2d+0x6c>)
 8002c86:	1a1b      	subs	r3, r3, r0
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	0d5b      	lsrs	r3, r3, #21
 8002c8c:	280a      	cmp	r0, #10
 8002c8e:	dd15      	ble.n	8002cbc <__aeabi_i2d+0x4c>
 8002c90:	380b      	subs	r0, #11
 8002c92:	4085      	lsls	r5, r0
 8002c94:	2200      	movs	r2, #0
 8002c96:	032d      	lsls	r5, r5, #12
 8002c98:	0b2d      	lsrs	r5, r5, #12
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	032d      	lsls	r5, r5, #12
 8002ca0:	0d0a      	lsrs	r2, r1, #20
 8002ca2:	0b2d      	lsrs	r5, r5, #12
 8002ca4:	0512      	lsls	r2, r2, #20
 8002ca6:	432a      	orrs	r2, r5
 8002ca8:	4d0d      	ldr	r5, [pc, #52]	; (8002ce0 <__aeabi_i2d+0x70>)
 8002caa:	051b      	lsls	r3, r3, #20
 8002cac:	402a      	ands	r2, r5
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	07e4      	lsls	r4, r4, #31
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	0019      	movs	r1, r3
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	0029      	movs	r1, r5
 8002cc0:	3215      	adds	r2, #21
 8002cc2:	4091      	lsls	r1, r2
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	210b      	movs	r1, #11
 8002cc8:	1a08      	subs	r0, r1, r0
 8002cca:	40c5      	lsrs	r5, r0
 8002ccc:	032d      	lsls	r5, r5, #12
 8002cce:	0b2d      	lsrs	r5, r5, #12
 8002cd0:	e7e3      	b.n	8002c9a <__aeabi_i2d+0x2a>
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	e7de      	b.n	8002c9a <__aeabi_i2d+0x2a>
 8002cdc:	0000041e 	.word	0x0000041e
 8002ce0:	800fffff 	.word	0x800fffff

08002ce4 <__aeabi_ui2d>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	1e04      	subs	r4, r0, #0
 8002ce8:	d025      	beq.n	8002d36 <__aeabi_ui2d+0x52>
 8002cea:	f000 f903 	bl	8002ef4 <__clzsi2>
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <__aeabi_ui2d+0x5c>)
 8002cf0:	1a1b      	subs	r3, r3, r0
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	280a      	cmp	r0, #10
 8002cf8:	dd12      	ble.n	8002d20 <__aeabi_ui2d+0x3c>
 8002cfa:	380b      	subs	r0, #11
 8002cfc:	4084      	lsls	r4, r0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	0324      	lsls	r4, r4, #12
 8002d02:	0b24      	lsrs	r4, r4, #12
 8002d04:	2100      	movs	r1, #0
 8002d06:	0010      	movs	r0, r2
 8002d08:	0324      	lsls	r4, r4, #12
 8002d0a:	0d0a      	lsrs	r2, r1, #20
 8002d0c:	0b24      	lsrs	r4, r4, #12
 8002d0e:	0512      	lsls	r2, r2, #20
 8002d10:	4322      	orrs	r2, r4
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__aeabi_ui2d+0x60>)
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	4022      	ands	r2, r4
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	0859      	lsrs	r1, r3, #1
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	0002      	movs	r2, r0
 8002d22:	0021      	movs	r1, r4
 8002d24:	3215      	adds	r2, #21
 8002d26:	4091      	lsls	r1, r2
 8002d28:	000a      	movs	r2, r1
 8002d2a:	210b      	movs	r1, #11
 8002d2c:	1a08      	subs	r0, r1, r0
 8002d2e:	40c4      	lsrs	r4, r0
 8002d30:	0324      	lsls	r4, r4, #12
 8002d32:	0b24      	lsrs	r4, r4, #12
 8002d34:	e7e6      	b.n	8002d04 <__aeabi_ui2d+0x20>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2400      	movs	r4, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	e7e2      	b.n	8002d04 <__aeabi_ui2d+0x20>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	0000041e 	.word	0x0000041e
 8002d44:	800fffff 	.word	0x800fffff

08002d48 <__aeabi_f2d>:
 8002d48:	0041      	lsls	r1, r0, #1
 8002d4a:	0e09      	lsrs	r1, r1, #24
 8002d4c:	1c4b      	adds	r3, r1, #1
 8002d4e:	b570      	push	{r4, r5, r6, lr}
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	0246      	lsls	r6, r0, #9
 8002d54:	0a75      	lsrs	r5, r6, #9
 8002d56:	0fc4      	lsrs	r4, r0, #31
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	dd14      	ble.n	8002d86 <__aeabi_f2d+0x3e>
 8002d5c:	23e0      	movs	r3, #224	; 0xe0
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	076d      	lsls	r5, r5, #29
 8002d62:	0b36      	lsrs	r6, r6, #12
 8002d64:	18cb      	adds	r3, r1, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	0d0a      	lsrs	r2, r1, #20
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	0512      	lsls	r2, r2, #20
 8002d6e:	4d1c      	ldr	r5, [pc, #112]	; (8002de0 <__aeabi_f2d+0x98>)
 8002d70:	4332      	orrs	r2, r6
 8002d72:	055b      	lsls	r3, r3, #21
 8002d74:	402a      	ands	r2, r5
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	07e4      	lsls	r4, r4, #31
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	4323      	orrs	r3, r4
 8002d82:	0019      	movs	r1, r3
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d114      	bne.n	8002db4 <__aeabi_f2d+0x6c>
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	d01e      	beq.n	8002dcc <__aeabi_f2d+0x84>
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f000 f8b0 	bl	8002ef4 <__clzsi2>
 8002d94:	280a      	cmp	r0, #10
 8002d96:	dc1c      	bgt.n	8002dd2 <__aeabi_f2d+0x8a>
 8002d98:	230b      	movs	r3, #11
 8002d9a:	002a      	movs	r2, r5
 8002d9c:	1a1b      	subs	r3, r3, r0
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	0003      	movs	r3, r0
 8002da2:	3315      	adds	r3, #21
 8002da4:	409d      	lsls	r5, r3
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <__aeabi_f2d+0x9c>)
 8002da8:	0312      	lsls	r2, r2, #12
 8002daa:	1a1b      	subs	r3, r3, r0
 8002dac:	055b      	lsls	r3, r3, #21
 8002dae:	0b16      	lsrs	r6, r2, #12
 8002db0:	0d5b      	lsrs	r3, r3, #21
 8002db2:	e7d8      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	d006      	beq.n	8002dc6 <__aeabi_f2d+0x7e>
 8002db8:	0b32      	lsrs	r2, r6, #12
 8002dba:	2680      	movs	r6, #128	; 0x80
 8002dbc:	0336      	lsls	r6, r6, #12
 8002dbe:	076d      	lsls	r5, r5, #29
 8002dc0:	4316      	orrs	r6, r2
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <__aeabi_f2d+0xa0>)
 8002dc4:	e7cf      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <__aeabi_f2d+0xa0>)
 8002dc8:	2600      	movs	r6, #0
 8002dca:	e7cc      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2600      	movs	r6, #0
 8002dd0:	e7c9      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	002a      	movs	r2, r5
 8002dd6:	3b0b      	subs	r3, #11
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	2500      	movs	r5, #0
 8002ddc:	e7e3      	b.n	8002da6 <__aeabi_f2d+0x5e>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	800fffff 	.word	0x800fffff
 8002de4:	00000389 	.word	0x00000389
 8002de8:	000007ff 	.word	0x000007ff

08002dec <__aeabi_d2f>:
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	004c      	lsls	r4, r1, #1
 8002df0:	0d64      	lsrs	r4, r4, #21
 8002df2:	030b      	lsls	r3, r1, #12
 8002df4:	1c62      	adds	r2, r4, #1
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	0f46      	lsrs	r6, r0, #29
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	0fc9      	lsrs	r1, r1, #31
 8002dfe:	431e      	orrs	r6, r3
 8002e00:	00c5      	lsls	r5, r0, #3
 8002e02:	0d52      	lsrs	r2, r2, #21
 8002e04:	2a01      	cmp	r2, #1
 8002e06:	dd29      	ble.n	8002e5c <__aeabi_d2f+0x70>
 8002e08:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <__aeabi_d2f+0xfc>)
 8002e0a:	18e7      	adds	r7, r4, r3
 8002e0c:	2ffe      	cmp	r7, #254	; 0xfe
 8002e0e:	dc1c      	bgt.n	8002e4a <__aeabi_d2f+0x5e>
 8002e10:	2f00      	cmp	r7, #0
 8002e12:	dd3b      	ble.n	8002e8c <__aeabi_d2f+0xa0>
 8002e14:	0180      	lsls	r0, r0, #6
 8002e16:	1e43      	subs	r3, r0, #1
 8002e18:	4198      	sbcs	r0, r3
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	00f3      	lsls	r3, r6, #3
 8002e1e:	0f6d      	lsrs	r5, r5, #29
 8002e20:	4303      	orrs	r3, r0
 8002e22:	432b      	orrs	r3, r5
 8002e24:	401a      	ands	r2, r3
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d004      	beq.n	8002e34 <__aeabi_d2f+0x48>
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	2a04      	cmp	r2, #4
 8002e30:	d000      	beq.n	8002e34 <__aeabi_d2f+0x48>
 8002e32:	3304      	adds	r3, #4
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	04d2      	lsls	r2, r2, #19
 8002e38:	401a      	ands	r2, r3
 8002e3a:	d024      	beq.n	8002e86 <__aeabi_d2f+0x9a>
 8002e3c:	3701      	adds	r7, #1
 8002e3e:	b2fa      	uxtb	r2, r7
 8002e40:	2fff      	cmp	r7, #255	; 0xff
 8002e42:	d002      	beq.n	8002e4a <__aeabi_d2f+0x5e>
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	0a58      	lsrs	r0, r3, #9
 8002e48:	e001      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	0240      	lsls	r0, r0, #9
 8002e50:	05d2      	lsls	r2, r2, #23
 8002e52:	0a40      	lsrs	r0, r0, #9
 8002e54:	07c9      	lsls	r1, r1, #31
 8002e56:	4310      	orrs	r0, r2
 8002e58:	4308      	orrs	r0, r1
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5c:	4335      	orrs	r5, r6
 8002e5e:	2c00      	cmp	r4, #0
 8002e60:	d104      	bne.n	8002e6c <__aeabi_d2f+0x80>
 8002e62:	2d00      	cmp	r5, #0
 8002e64:	d10a      	bne.n	8002e7c <__aeabi_d2f+0x90>
 8002e66:	2200      	movs	r2, #0
 8002e68:	2000      	movs	r0, #0
 8002e6a:	e7f0      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e6c:	2d00      	cmp	r5, #0
 8002e6e:	d0ec      	beq.n	8002e4a <__aeabi_d2f+0x5e>
 8002e70:	2080      	movs	r0, #128	; 0x80
 8002e72:	03c0      	lsls	r0, r0, #15
 8002e74:	4330      	orrs	r0, r6
 8002e76:	22ff      	movs	r2, #255	; 0xff
 8002e78:	e7e9      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	0a58      	lsrs	r0, r3, #9
 8002e82:	b2e2      	uxtb	r2, r4
 8002e84:	e7e3      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e86:	08db      	lsrs	r3, r3, #3
 8002e88:	003c      	movs	r4, r7
 8002e8a:	e7f8      	b.n	8002e7e <__aeabi_d2f+0x92>
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	3317      	adds	r3, #23
 8002e90:	dbf3      	blt.n	8002e7a <__aeabi_d2f+0x8e>
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	4333      	orrs	r3, r6
 8002e98:	261e      	movs	r6, #30
 8002e9a:	1bf6      	subs	r6, r6, r7
 8002e9c:	2e1f      	cmp	r6, #31
 8002e9e:	dd14      	ble.n	8002eca <__aeabi_d2f+0xde>
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4252      	negs	r2, r2
 8002ea4:	1bd7      	subs	r7, r2, r7
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	40fa      	lsrs	r2, r7
 8002eaa:	0017      	movs	r7, r2
 8002eac:	2e20      	cmp	r6, #32
 8002eae:	d004      	beq.n	8002eba <__aeabi_d2f+0xce>
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <__aeabi_d2f+0x100>)
 8002eb2:	4694      	mov	ip, r2
 8002eb4:	4464      	add	r4, ip
 8002eb6:	40a3      	lsls	r3, r4
 8002eb8:	431d      	orrs	r5, r3
 8002eba:	002b      	movs	r3, r5
 8002ebc:	1e5d      	subs	r5, r3, #1
 8002ebe:	41ab      	sbcs	r3, r5
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	433b      	orrs	r3, r7
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	2700      	movs	r7, #0
 8002ec8:	e7ad      	b.n	8002e26 <__aeabi_d2f+0x3a>
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <__aeabi_d2f+0x104>)
 8002ecc:	0028      	movs	r0, r5
 8002ece:	18a2      	adds	r2, r4, r2
 8002ed0:	4095      	lsls	r5, r2
 8002ed2:	4093      	lsls	r3, r2
 8002ed4:	1e6c      	subs	r4, r5, #1
 8002ed6:	41a5      	sbcs	r5, r4
 8002ed8:	40f0      	lsrs	r0, r6
 8002eda:	2207      	movs	r2, #7
 8002edc:	432b      	orrs	r3, r5
 8002ede:	4303      	orrs	r3, r0
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	2700      	movs	r7, #0
 8002ee4:	e79f      	b.n	8002e26 <__aeabi_d2f+0x3a>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	fffffc80 	.word	0xfffffc80
 8002eec:	fffffca2 	.word	0xfffffca2
 8002ef0:	fffffc82 	.word	0xfffffc82

08002ef4 <__clzsi2>:
 8002ef4:	211c      	movs	r1, #28
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	4298      	cmp	r0, r3
 8002efc:	d301      	bcc.n	8002f02 <__clzsi2+0xe>
 8002efe:	0c00      	lsrs	r0, r0, #16
 8002f00:	3910      	subs	r1, #16
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	4298      	cmp	r0, r3
 8002f06:	d301      	bcc.n	8002f0c <__clzsi2+0x18>
 8002f08:	0a00      	lsrs	r0, r0, #8
 8002f0a:	3908      	subs	r1, #8
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	4298      	cmp	r0, r3
 8002f10:	d301      	bcc.n	8002f16 <__clzsi2+0x22>
 8002f12:	0900      	lsrs	r0, r0, #4
 8002f14:	3904      	subs	r1, #4
 8002f16:	a202      	add	r2, pc, #8	; (adr r2, 8002f20 <__clzsi2+0x2c>)
 8002f18:	5c10      	ldrb	r0, [r2, r0]
 8002f1a:	1840      	adds	r0, r0, r1
 8002f1c:	4770      	bx	lr
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	02020304 	.word	0x02020304
 8002f24:	01010101 	.word	0x01010101
	...

08002f30 <__clzdi2>:
 8002f30:	b510      	push	{r4, lr}
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d103      	bne.n	8002f3e <__clzdi2+0xe>
 8002f36:	f7ff ffdd 	bl	8002ef4 <__clzsi2>
 8002f3a:	3020      	adds	r0, #32
 8002f3c:	e002      	b.n	8002f44 <__clzdi2+0x14>
 8002f3e:	1c08      	adds	r0, r1, #0
 8002f40:	f7ff ffd8 	bl	8002ef4 <__clzsi2>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)

08002f48 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	46c6      	mov	lr, r8
 8002f4c:	b500      	push	{lr}
 8002f4e:	0006      	movs	r6, r0
 8002f50:	000d      	movs	r5, r1
 8002f52:	4690      	mov	r8, r2
 8002f54:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002f56:	f00a fa03 	bl	800d360 <GetUart>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d01c      	beq.n	8002f98 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <Send_BOS_Message+0x60>)
 8002f60:	00b2      	lsls	r2, r6, #2
 8002f62:	58d0      	ldr	r0, [r2, r3]
 8002f64:	0021      	movs	r1, r4
 8002f66:	f00a fb73 	bl	800d650 <osSemaphoreWait>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d114      	bne.n	8002f98 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002f6e:	4643      	mov	r3, r8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <Send_BOS_Message+0x50>
 8002f74:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002f76:	0030      	movs	r0, r6
 8002f78:	f00a f9f2 	bl	800d360 <GetUart>
 8002f7c:	0029      	movs	r1, r5
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f00f f910 	bl	80121a4 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002f84:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002f86:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002f88:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002f8a:	2002      	movs	r0, #2
				buffer++;
 8002f8c:	3501      	adds	r5, #1
				Delay_ms(2);
 8002f8e:	f00c f9c5 	bl	800f31c <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002f92:	4544      	cmp	r4, r8
 8002f94:	d3ef      	bcc.n	8002f76 <Send_BOS_Message+0x2e>
 8002f96:	e000      	b.n	8002f9a <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002f98:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002f9a:	200a      	movs	r0, #10
 8002f9c:	f00c f9be 	bl	800f31c <HAL_Delay>
	return result;
}
 8002fa0:	0038      	movs	r0, r7
 8002fa2:	bc04      	pop	{r2}
 8002fa4:	4690      	mov	r8, r2
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa8:	200068e4 	.word	0x200068e4

08002fac <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fb2:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002fb4:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fb6:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d035      	beq.n	8003028 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fbc:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002fbe:	d02c      	beq.n	800301a <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <LoadROtopology+0x94>)
 8002fc2:	b2f6      	uxtb	r6, r6
 8002fc4:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <LoadROtopology+0x98>)
 8002fc8:	7013      	strb	r3, [r2, #0]
 8002fca:	466b      	mov	r3, sp
 8002fcc:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fce:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fd4:	469c      	mov	ip, r3
 8002fd6:	4d1c      	ldr	r5, [pc, #112]	; (8003048 <LoadROtopology+0x9c>)
 8002fd8:	4663      	mov	r3, ip
 8002fda:	700b      	strb	r3, [r1, #0]
 8002fdc:	780b      	ldrb	r3, [r1, #0]
 8002fde:	2b0a      	cmp	r3, #10
 8002fe0:	d814      	bhi.n	800300c <LoadROtopology+0x60>
 8002fe2:	1e63      	subs	r3, r4, #1
 8002fe4:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002fe6:	18c0      	adds	r0, r0, r3
 8002fe8:	0040      	lsls	r0, r0, #1
 8002fea:	18c0      	adds	r0, r0, r3
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <LoadROtopology+0x8c>)
 8002fee:	18d7      	adds	r7, r2, r3
 8002ff0:	780b      	ldrb	r3, [r1, #0]
 8002ff2:	883f      	ldrh	r7, [r7, #0]
 8002ff4:	18c3      	adds	r3, r0, r3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ffa:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002ffc:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	700b      	strb	r3, [r1, #0]
 8003004:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8003006:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d9ef      	bls.n	8002fec <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 800300c:	3401      	adds	r4, #1
 800300e:	b2e4      	uxtb	r4, r4
 8003010:	42b4      	cmp	r4, r6
 8003012:	d9e1      	bls.n	8002fd8 <LoadROtopology+0x2c>
 8003014:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8003016:	b003      	add	sp, #12
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 800301a:	2101      	movs	r1, #1
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 800301e:	2601      	movs	r6, #1
			N =1;
 8003020:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <LoadROtopology+0x98>)
 8003024:	7013      	strb	r3, [r2, #0]
 8003026:	e7d0      	b.n	8002fca <LoadROtopology+0x1e>
		N =1;
 8003028:	2201      	movs	r2, #1
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 800302c:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 800302e:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003030:	2200      	movs	r2, #0
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <LoadROtopology+0x98>)
 8003034:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003036:	e7ee      	b.n	8003016 <LoadROtopology+0x6a>
 8003038:	0801d800 	.word	0x0801d800
 800303c:	0000ffff 	.word	0x0000ffff
 8003040:	20000008 	.word	0x20000008
 8003044:	20000aa0 	.word	0x20000aa0
 8003048:	20000edc 	.word	0x20000edc

0800304c <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	46c6      	mov	lr, r8
 8003050:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003052:	4e0f      	ldr	r6, [pc, #60]	; (8003090 <LoadEEportsDir+0x44>)
 8003054:	7833      	ldrb	r3, [r6, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800305a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800305c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800305e:	4698      	mov	r8, r3
 8003060:	4f0c      	ldr	r7, [pc, #48]	; (8003094 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003062:	1e61      	subs	r1, r4, #1
 8003064:	0049      	lsls	r1, r1, #1
 8003066:	1c65      	adds	r5, r4, #1
 8003068:	1879      	adds	r1, r7, r1
 800306a:	b2a8      	uxth	r0, r5
 800306c:	f008 f842 	bl	800b0f4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003070:	2c19      	cmp	r4, #25
 8003072:	d901      	bls.n	8003078 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003074:	230a      	movs	r3, #10
 8003076:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003078:	7833      	ldrb	r3, [r6, #0]
 800307a:	b2ec      	uxtb	r4, r5
 800307c:	42a3      	cmp	r3, r4
 800307e:	d2f0      	bcs.n	8003062 <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8003080:	4640      	mov	r0, r8
 8003082:	bc04      	pop	{r2}
 8003084:	4690      	mov	r8, r2
 8003086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	4698      	mov	r8, r3
 800308c:	e7f8      	b.n	8003080 <LoadEEportsDir+0x34>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000008 	.word	0x20000008
 8003094:	20006d04 	.word	0x20006d04

08003098 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	464e      	mov	r6, r9
 800309c:	46de      	mov	lr, fp
 800309e:	4657      	mov	r7, sl
 80030a0:	4645      	mov	r5, r8
 80030a2:	b5e0      	push	{r5, r6, r7, lr}
 80030a4:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80030a6:	466b      	mov	r3, sp
 80030a8:	1d9e      	adds	r6, r3, #6
 80030aa:	2300      	movs	r3, #0
 80030ac:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ae:	4698      	mov	r8, r3
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 80030b2:	241c      	movs	r4, #28
 80030b4:	469a      	mov	sl, r3
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <LoadEEalias+0x7c>)
 80030b8:	469b      	mov	fp, r3
 80030ba:	4643      	mov	r3, r8
 80030bc:	009f      	lsls	r7, r3, #2
 80030be:	18fd      	adds	r5, r7, r3
 80030c0:	1d63      	adds	r3, r4, #5
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4699      	mov	r9, r3
 80030c6:	006d      	lsls	r5, r5, #1
 80030c8:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030ca:	0020      	movs	r0, r4
 80030cc:	0031      	movs	r1, r6
 80030ce:	f008 f811 	bl	800b0f4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80030d2:	8833      	ldrh	r3, [r6, #0]
 80030d4:	3401      	adds	r4, #1
 80030d6:	706b      	strb	r3, [r5, #1]
 80030d8:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	702b      	strb	r3, [r5, #0]
 80030de:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030e0:	454c      	cmp	r4, r9
 80030e2:	d1f2      	bne.n	80030ca <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80030e4:	2300      	movs	r3, #0
 80030e6:	4447      	add	r7, r8
 80030e8:	007f      	lsls	r7, r7, #1
 80030ea:	4457      	add	r7, sl
 80030ec:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ee:	4643      	mov	r3, r8
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4698      	mov	r8, r3
 80030f6:	465b      	mov	r3, fp
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4543      	cmp	r3, r8
 80030fc:	d2dd      	bcs.n	80030ba <LoadEEalias+0x22>
	}
	
	return result;
}
 80030fe:	2000      	movs	r0, #0
 8003100:	b003      	add	sp, #12
 8003102:	bc3c      	pop	{r2, r3, r4, r5}
 8003104:	4690      	mov	r8, r2
 8003106:	4699      	mov	r9, r3
 8003108:	46a2      	mov	sl, r4
 800310a:	46ab      	mov	fp, r5
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000dcc 	.word	0x20000dcc
 8003114:	20000008 	.word	0x20000008

08003118 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	4646      	mov	r6, r8
 800311c:	46d6      	mov	lr, sl
 800311e:	464f      	mov	r7, r9
 8003120:	b5c0      	push	{r6, r7, lr}
 8003122:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003124:	466b      	mov	r3, sp
 8003126:	1d9e      	adds	r6, r3, #6
 8003128:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800312a:	4c22      	ldr	r4, [pc, #136]	; (80031b4 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 800312c:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 800312e:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8003130:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03a      	beq.n	80031ac <LoadEEgroup+0x94>
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <LoadEEgroup+0xa0>)
 8003138:	2100      	movs	r1, #0
 800313a:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800313c:	1d1f      	adds	r7, r3, #4
 800313e:	0028      	movs	r0, r5
 8003140:	0049      	lsls	r1, r1, #1
 8003142:	30cb      	adds	r0, #203	; 0xcb
 8003144:	1879      	adds	r1, r7, r1
 8003146:	b280      	uxth	r0, r0
		add++;
 8003148:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800314a:	f007 ffd3 	bl	800b0f4 <EE_ReadVariable>
		add++;
 800314e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003150:	7823      	ldrb	r3, [r4, #0]
 8003152:	b2e9      	uxtb	r1, r5
 8003154:	428b      	cmp	r3, r1
 8003156:	d8f2      	bhi.n	800313e <LoadEEgroup+0x26>
 8003158:	2338      	movs	r3, #56	; 0x38
 800315a:	002c      	movs	r4, r5
 800315c:	35cb      	adds	r5, #203	; 0xcb
 800315e:	469c      	mov	ip, r3
 8003160:	b2ab      	uxth	r3, r5
 8003162:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003164:	2300      	movs	r3, #0
 8003166:	469a      	mov	sl, r3
 8003168:	3499      	adds	r4, #153	; 0x99
 800316a:	44e1      	add	r9, ip
 800316c:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 800316e:	464d      	mov	r5, r9
 8003170:	1d67      	adds	r7, r4, #5
 8003172:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003174:	0020      	movs	r0, r4
 8003176:	0031      	movs	r1, r6
 8003178:	f007 ffbc 	bl	800b0f4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 800317c:	8833      	ldrh	r3, [r6, #0]
 800317e:	3401      	adds	r4, #1
 8003180:	706b      	strb	r3, [r5, #1]
 8003182:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	702b      	strb	r3, [r5, #0]
 8003188:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800318a:	42bc      	cmp	r4, r7
 800318c:	d1f2      	bne.n	8003174 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800318e:	464b      	mov	r3, r9
 8003190:	4652      	mov	r2, sl
 8003192:	725a      	strb	r2, [r3, #9]
 8003194:	230a      	movs	r3, #10
 8003196:	469c      	mov	ip, r3
 8003198:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800319a:	45a0      	cmp	r8, r4
 800319c:	d1e7      	bne.n	800316e <LoadEEgroup+0x56>
	}
	
	return result;
}
 800319e:	2000      	movs	r0, #0
 80031a0:	b002      	add	sp, #8
 80031a2:	bc1c      	pop	{r2, r3, r4}
 80031a4:	4690      	mov	r8, r2
 80031a6:	4699      	mov	r9, r3
 80031a8:	46a2      	mov	sl, r4
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <LoadEEgroup+0xa0>)
 80031ae:	4699      	mov	r9, r3
 80031b0:	e7d2      	b.n	8003158 <LoadEEgroup+0x40>
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	20000008 	.word	0x20000008
 80031b8:	20000aa0 	.word	0x20000aa0

080031bc <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	46ce      	mov	lr, r9
 80031c0:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031c2:	260e      	movs	r6, #14
 80031c4:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031ca:	ac03      	add	r4, sp, #12
 80031cc:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031ce:	0021      	movs	r1, r4
 80031d0:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031d2:	8023      	strh	r3, [r4, #0]
 80031d4:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031d6:	f007 ff8d 	bl	800b0f4 <EE_ReadVariable>
	uint8_t direction =0;
 80031da:	2700      	movs	r7, #0
	if(!status1){
 80031dc:	2800      	cmp	r0, #0
 80031de:	d100      	bne.n	80031e2 <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 80031e0:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031e2:	0021      	movs	r1, r4
 80031e4:	20e5      	movs	r0, #229	; 0xe5
 80031e6:	f007 ff85 	bl	800b0f4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031ea:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031ec:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031ee:	20e6      	movs	r0, #230	; 0xe6
 80031f0:	f007 ff80 	bl	800b0f4 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 80031f4:	2300      	movs	r3, #0
	if(!status1 && !status2){
 80031f6:	4305      	orrs	r5, r0
 80031f8:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 80031fa:	4698      	mov	r8, r3
	if(!status1 && !status2){
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	d104      	bne.n	800320a <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8003200:	8823      	ldrh	r3, [r4, #0]
 8003202:	8832      	ldrh	r2, [r6, #0]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	4698      	mov	r8, r3
 8003208:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 800320a:	0021      	movs	r1, r4
 800320c:	20e7      	movs	r0, #231	; 0xe7
 800320e:	f007 ff71 	bl	800b0f4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003212:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003214:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003216:	20e8      	movs	r0, #232	; 0xe8
 8003218:	f007 ff6c 	bl	800b0f4 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 800321c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 800321e:	4305      	orrs	r5, r0
 8003220:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8003222:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003224:	2d00      	cmp	r5, #0
 8003226:	d104      	bne.n	8003232 <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003228:	8823      	ldrh	r3, [r4, #0]
 800322a:	8832      	ldrh	r2, [r6, #0]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	4699      	mov	r9, r3
 8003230:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003232:	0021      	movs	r1, r4
 8003234:	20e9      	movs	r0, #233	; 0xe9
 8003236:	f007 ff5d 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 800323a:	2800      	cmp	r0, #0
 800323c:	d030      	beq.n	80032a0 <LoadEEstreams+0xe4>
 800323e:	4d26      	ldr	r5, [pc, #152]	; (80032d8 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003240:	0021      	movs	r1, r4
 8003242:	20ea      	movs	r0, #234	; 0xea
 8003244:	f007 ff56 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 8003248:	2800      	cmp	r0, #0
 800324a:	d103      	bne.n	8003254 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 800324c:	8823      	ldrh	r3, [r4, #0]
 800324e:	0a1a      	lsrs	r2, r3, #8
 8003250:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8003252:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003254:	0021      	movs	r1, r4
 8003256:	20eb      	movs	r0, #235	; 0xeb
 8003258:	f007 ff4c 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 800325c:	2800      	cmp	r0, #0
 800325e:	d105      	bne.n	800326c <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8003260:	2220      	movs	r2, #32
 8003262:	8823      	ldrh	r3, [r4, #0]
 8003264:	0a19      	lsrs	r1, r3, #8
 8003266:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003268:	3201      	adds	r2, #1
 800326a:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 800326c:	7f2b      	ldrb	r3, [r5, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <LoadEEstreams+0xbc>
 8003272:	7f6a      	ldrb	r2, [r5, #29]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d120      	bne.n	80032ba <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003278:	7fab      	ldrb	r3, [r5, #30]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <LoadEEstreams+0xc8>
 800327e:	7fea      	ldrb	r2, [r5, #31]
 8003280:	2a00      	cmp	r2, #0
 8003282:	d121      	bne.n	80032c8 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003284:	2320      	movs	r3, #32
 8003286:	5ceb      	ldrb	r3, [r5, r3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <LoadEEstreams+0xd8>
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	5caa      	ldrb	r2, [r5, r2]
 8003290:	2a00      	cmp	r2, #0
 8003292:	d10b      	bne.n	80032ac <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003294:	2000      	movs	r0, #0
 8003296:	b005      	add	sp, #20
 8003298:	bc0c      	pop	{r2, r3}
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 80032a0:	8823      	ldrh	r3, [r4, #0]
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <LoadEEstreams+0x11c>)
 80032a4:	0a1a      	lsrs	r2, r3, #8
 80032a6:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 80032a8:	776b      	strb	r3, [r5, #29]
 80032aa:	e7c9      	b.n	8003240 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	4641      	mov	r1, r8
 80032b0:	464a      	mov	r2, r9
 80032b2:	0038      	movs	r0, r7
 80032b4:	f004 fcf8 	bl	8007ca8 <SetupDMAStreams>
 80032b8:	e7ec      	b.n	8003294 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80032ba:	9200      	str	r2, [sp, #0]
 80032bc:	4641      	mov	r1, r8
 80032be:	464a      	mov	r2, r9
 80032c0:	0038      	movs	r0, r7
 80032c2:	f004 fcf1 	bl	8007ca8 <SetupDMAStreams>
 80032c6:	e7d7      	b.n	8003278 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	4641      	mov	r1, r8
 80032cc:	464a      	mov	r2, r9
 80032ce:	0038      	movs	r0, r7
 80032d0:	f004 fcea 	bl	8007ca8 <SetupDMAStreams>
 80032d4:	e7d6      	b.n	8003284 <LoadEEstreams+0xc8>
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	20000b20 	.word	0x20000b20

080032dc <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032dc:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032e2:	ac01      	add	r4, sp, #4
 80032e4:	0021      	movs	r1, r4
 80032e6:	0040      	lsls	r0, r0, #1
 80032e8:	f007 ff04 	bl	800b0f4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d15d      	bne.n	80033ac <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032f0:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80032f2:	8823      	ldrh	r3, [r4, #0]
 80032f4:	4d54      	ldr	r5, [pc, #336]	; (8003448 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032f6:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80032f8:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032fa:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003300:	f007 fef8 	bl	800b0f4 <EE_ReadVariable>

	if(!status1){
 8003304:	2800      	cmp	r0, #0
 8003306:	d15e      	bne.n	80033c6 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003308:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800330a:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800330c:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800330e:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003310:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003312:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003314:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003316:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003318:	f007 feec 	bl	800b0f4 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 800331c:	4d4b      	ldr	r5, [pc, #300]	; (800344c <LoadEEparams+0x170>)
	if(!status1)
 800331e:	2800      	cmp	r0, #0
 8003320:	d15e      	bne.n	80033e0 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003322:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003324:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003326:	0021      	movs	r1, r4
 8003328:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 800332a:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800332c:	f007 fee2 	bl	800b0f4 <EE_ReadVariable>
	if(!status1)
 8003330:	2800      	cmp	r0, #0
 8003332:	d15f      	bne.n	80033f4 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003334:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003336:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003338:	0021      	movs	r1, r4
 800333a:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 800333c:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800333e:	f007 fed9 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 8003342:	2800      	cmp	r0, #0
 8003344:	d160      	bne.n	8003408 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003346:	8823      	ldrh	r3, [r4, #0]
 8003348:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800334e:	208c      	movs	r0, #140	; 0x8c
 8003350:	0021      	movs	r1, r4
 8003352:	0040      	lsls	r0, r0, #1
 8003354:	f007 fece 	bl	800b0f4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003358:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800335a:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800335c:	201a      	movs	r0, #26
 800335e:	1d99      	adds	r1, r3, #6
 8003360:	30ff      	adds	r0, #255	; 0xff
 8003362:	f007 fec7 	bl	800b0f4 <EE_ReadVariable>
	if(!status1 && !status2){
 8003366:	4306      	orrs	r6, r0
 8003368:	b2b6      	uxth	r6, r6
 800336a:	2e00      	cmp	r6, #0
 800336c:	d15f      	bne.n	800342e <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800336e:	466b      	mov	r3, sp
 8003370:	88db      	ldrh	r3, [r3, #6]
 8003372:	8822      	ldrh	r2, [r4, #0]
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	4313      	orrs	r3, r2
 8003378:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800337a:	208d      	movs	r0, #141	; 0x8d
 800337c:	0021      	movs	r1, r4
 800337e:	0040      	lsls	r0, r0, #1
 8003380:	f007 feb8 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 8003384:	2800      	cmp	r0, #0
 8003386:	d145      	bne.n	8003414 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003388:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 800338a:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800338c:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800338e:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003390:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003396:	f007 fead 	bl	800b0f4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800339a:	2800      	cmp	r0, #0
 800339c:	d044      	beq.n	8003428 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800339e:	2326      	movs	r3, #38	; 0x26
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <LoadEEparams+0x174>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	b002      	add	sp, #8
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033ac:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <LoadEEparams+0x174>)
 80033b0:	4d25      	ldr	r5, [pc, #148]	; (8003448 <LoadEEparams+0x16c>)
 80033b2:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033b4:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 80033b6:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80033b8:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033ba:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 80033bc:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033be:	f007 fe99 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d0a0      	beq.n	8003308 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033c6:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033c8:	4b21      	ldr	r3, [pc, #132]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ca:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033cc:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ce:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033d0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80033d2:	895b      	ldrh	r3, [r3, #10]
 80033d4:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033d6:	f007 fe8d 	bl	800b0f4 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80033da:	4d1c      	ldr	r5, [pc, #112]	; (800344c <LoadEEparams+0x170>)
	if(!status1)
 80033dc:	2800      	cmp	r0, #0
 80033de:	d0a0      	beq.n	8003322 <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e0:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e4:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033e6:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e8:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033ea:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033ec:	f007 fe82 	bl	800b0f4 <EE_ReadVariable>
	if(!status1)
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d09f      	beq.n	8003334 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033f4:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033f8:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033fa:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033fc:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033fe:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003400:	f007 fe78 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 8003404:	2800      	cmp	r0, #0
 8003406:	d09e      	beq.n	8003346 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <LoadEEparams+0x174>)
 800340a:	7c1a      	ldrb	r2, [r3, #16]
 800340c:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800340e:	7c5b      	ldrb	r3, [r3, #17]
 8003410:	716b      	strb	r3, [r5, #5]
 8003412:	e79c      	b.n	800334e <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003414:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003416:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800341c:	0021      	movs	r1, r4
 800341e:	30ff      	adds	r0, #255	; 0xff
 8003420:	f007 fe68 	bl	800b0f4 <EE_ReadVariable>
	if(!status1){
 8003424:	2800      	cmp	r0, #0
 8003426:	d1ba      	bne.n	800339e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003428:	8823      	ldrh	r3, [r4, #0]
 800342a:	76ab      	strb	r3, [r5, #26]
 800342c:	e7bb      	b.n	80033a6 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800342e:	2322      	movs	r3, #34	; 0x22
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <LoadEEparams+0x178>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003438:	23e1      	movs	r3, #225	; 0xe1
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	60ab      	str	r3, [r5, #8]
 800343e:	e79c      	b.n	800337a <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <LoadEEparams+0x174>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	60ab      	str	r3, [r5, #8]
 8003446:	e798      	b.n	800337a <LoadEEparams+0x9e>
 8003448:	200067e0 	.word	0x200067e0
 800344c:	20006860 	.word	0x20006860
 8003450:	20000008 	.word	0x20000008
 8003454:	20000b20 	.word	0x20000b20

08003458 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	46de      	mov	lr, fp
 800345c:	4657      	mov	r7, sl
 800345e:	464e      	mov	r6, r9
 8003460:	4645      	mov	r5, r8
 8003462:	b5e0      	push	{r5, r6, r7, lr}
 8003464:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003466:	ab02      	add	r3, sp, #8
 8003468:	469c      	mov	ip, r3
 800346a:	261e      	movs	r6, #30
 800346c:	2300      	movs	r3, #0
 800346e:	4466      	add	r6, ip
 8003470:	8033      	strh	r3, [r6, #0]
 8003472:	330f      	adds	r3, #15
 8003474:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003476:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003478:	2501      	movs	r5, #1
 800347a:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800347c:	469b      	mov	fp, r3
 800347e:	e004      	b.n	800348a <LoadEEbuttons+0x32>
 8003480:	3404      	adds	r4, #4
 8003482:	3501      	adds	r5, #1
 8003484:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003486:	2d07      	cmp	r5, #7
 8003488:	d05e      	beq.n	8003548 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800348a:	0031      	movs	r1, r6
 800348c:	0020      	movs	r0, r4
 800348e:	f007 fe31 	bl	800b0f4 <EE_ReadVariable>
 8003492:	b2eb      	uxtb	r3, r5
 8003494:	1e07      	subs	r7, r0, #0
 8003496:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003498:	d1f2      	bne.n	8003480 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 800349a:	8832      	ldrh	r2, [r6, #0]
 800349c:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800349e:	0919      	lsrs	r1, r3, #4
 80034a0:	42a9      	cmp	r1, r5
 80034a2:	d1ed      	bne.n	8003480 <LoadEEbuttons+0x28>
 80034a4:	4651      	mov	r1, sl
 80034a6:	400b      	ands	r3, r1
 80034a8:	d0ea      	beq.n	8003480 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 80034aa:	482b      	ldr	r0, [pc, #172]	; (8003558 <LoadEEbuttons+0x100>)
 80034ac:	00e9      	lsls	r1, r5, #3
 80034ae:	4680      	mov	r8, r0
 80034b0:	1949      	adds	r1, r1, r5
 80034b2:	4488      	add	r8, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	00a8      	lsls	r0, r5, #2
 80034b8:	704b      	strb	r3, [r1, #1]
 80034ba:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034bc:	0018      	movs	r0, r3
 80034be:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 80034c0:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034c2:	b280      	uxth	r0, r0
 80034c4:	0031      	movs	r1, r6
 80034c6:	9307      	str	r3, [sp, #28]
 80034c8:	f007 fe14 	bl	800b0f4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034cc:	4641      	mov	r1, r8
 80034ce:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034d0:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034d2:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034d4:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034d6:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80034d8:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034da:	b280      	uxth	r0, r0
 80034dc:	0031      	movs	r1, r6
 80034de:	f007 fe09 	bl	800b0f4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034e2:	4641      	mov	r1, r8
 80034e4:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034e6:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034e8:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034ea:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034ec:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80034ee:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034f0:	b280      	uxth	r0, r0
 80034f2:	0031      	movs	r1, r6
 80034f4:	f007 fdfe 	bl	800b0f4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034f8:	4641      	mov	r1, r8
 80034fa:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80034fc:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034fe:	0a1a      	lsrs	r2, r3, #8
 8003500:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003502:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 8003504:	4649      	mov	r1, r9
 8003506:	f008 f9a7 	bl	800b858 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800350a:	4643      	mov	r3, r8
 800350c:	4658      	mov	r0, fp
 800350e:	7a19      	ldrb	r1, [r3, #8]
 8003510:	789b      	ldrb	r3, [r3, #2]
 8003512:	104a      	asrs	r2, r1, #1
 8003514:	4002      	ands	r2, r0
 8003516:	4001      	ands	r1, r0
 8003518:	4640      	mov	r0, r8
 800351a:	9705      	str	r7, [sp, #20]
 800351c:	79c0      	ldrb	r0, [r0, #7]
 800351e:	3404      	adds	r4, #4
 8003520:	9004      	str	r0, [sp, #16]
 8003522:	4640      	mov	r0, r8
 8003524:	7980      	ldrb	r0, [r0, #6]
 8003526:	3501      	adds	r5, #1
 8003528:	9003      	str	r0, [sp, #12]
 800352a:	4640      	mov	r0, r8
 800352c:	7940      	ldrb	r0, [r0, #5]
 800352e:	b2a4      	uxth	r4, r4
 8003530:	9002      	str	r0, [sp, #8]
 8003532:	4640      	mov	r0, r8
 8003534:	7900      	ldrb	r0, [r0, #4]
 8003536:	9001      	str	r0, [sp, #4]
 8003538:	4640      	mov	r0, r8
 800353a:	78c0      	ldrb	r0, [r0, #3]
 800353c:	9000      	str	r0, [sp, #0]
 800353e:	4648      	mov	r0, r9
 8003540:	f008 fa90 	bl	800ba64 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003544:	2d07      	cmp	r5, #7
 8003546:	d1a0      	bne.n	800348a <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003548:	2000      	movs	r0, #0
 800354a:	b00b      	add	sp, #44	; 0x2c
 800354c:	bc3c      	pop	{r2, r3, r4, r5}
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	46a2      	mov	sl, r4
 8003554:	46ab      	mov	fp, r5
 8003556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003558:	200023bc 	.word	0x200023bc

0800355c <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46de      	mov	lr, fp
 8003560:	4645      	mov	r5, r8
 8003562:	4657      	mov	r7, sl
 8003564:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003566:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003568:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800356a:	f00f fb35 	bl	8012bd8 <malloc>
 800356e:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 8003570:	d067      	beq.n	8003642 <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003572:	4c3c      	ldr	r4, [pc, #240]	; (8003664 <LoadROsnippets+0x108>)
		return BOS_ERROR;
 8003574:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003576:	7823      	ldrb	r3, [r4, #0]
 8003578:	2bfe      	cmp	r3, #254	; 0xfe
 800357a:	d158      	bne.n	800362e <LoadROsnippets+0xd2>
 800357c:	1c6b      	adds	r3, r5, #1
 800357e:	4698      	mov	r8, r3
 8003580:	2364      	movs	r3, #100	; 0x64
 8003582:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <LoadROsnippets+0x10c>)
 8003586:	4e39      	ldr	r6, [pc, #228]	; (800366c <LoadROsnippets+0x110>)
 8003588:	469b      	mov	fp, r3
 800358a:	44b1      	add	r9, r6
 800358c:	0020      	movs	r0, r4
 800358e:	46a2      	mov	sl, r4
BOS_Status LoadROsnippets(void){
 8003590:	0023      	movs	r3, r4
 8003592:	3014      	adds	r0, #20
 8003594:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	54ca      	strb	r2, [r1, r3]
 800359a:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800359c:	4283      	cmp	r3, r0
 800359e:	d1fa      	bne.n	8003596 <LoadROsnippets+0x3a>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80035a0:	2214      	movs	r2, #20
 80035a2:	4641      	mov	r1, r8
 80035a4:	0030      	movs	r0, r6
 80035a6:	f00f fd64 	bl	8013072 <memcpy>
		currentAdd=currentAdd+20;
 80035aa:	3428      	adds	r4, #40	; 0x28
		memset(snipBuffer,0,sizeof(snippet_t));
 80035ac:	2100      	movs	r1, #0
 80035ae:	2214      	movs	r2, #20
 80035b0:	0028      	movs	r0, r5
 80035b2:	f00f fd67 	bl	8013084 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035b6:	7821      	ldrb	r1, [r4, #0]
 80035b8:	1c8b      	adds	r3, r1, #2
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d942      	bls.n	8003646 <LoadROsnippets+0xea>
 80035c0:	4657      	mov	r7, sl
 80035c2:	0028      	movs	r0, r5
 80035c4:	375a      	adds	r7, #90	; 0x5a
		i =0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e002      	b.n	80035d0 <LoadROsnippets+0x74>
 80035ca:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035cc:	42a7      	cmp	r7, r4
 80035ce:	d034      	beq.n	800363a <LoadROsnippets+0xde>
			++currentAdd;
 80035d0:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80035d2:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035d4:	7821      	ldrb	r1, [r4, #0]
			++i;
 80035d6:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035d8:	1c8a      	adds	r2, r1, #2
 80035da:	b2d2      	uxtb	r2, r2
			++i;
 80035dc:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035de:	2a01      	cmp	r2, #1
 80035e0:	d8f3      	bhi.n	80035ca <LoadROsnippets+0x6e>
 80035e2:	469a      	mov	sl, r3
 80035e4:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80035e6:	5caa      	ldrb	r2, [r5, r2]
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	d002      	beq.n	80035f2 <LoadROsnippets+0x96>
			++i;	// String termination char was not recorded, then add one
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80035f2:	4650      	mov	r0, sl
 80035f4:	f00f faf0 	bl	8012bd8 <malloc>
 80035f8:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d028      	beq.n	8003650 <LoadROsnippets+0xf4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80035fe:	4652      	mov	r2, sl
 8003600:	0029      	movs	r1, r5
 8003602:	f00f fd36 	bl	8013072 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003606:	465b      	mov	r3, fp
 8003608:	465a      	mov	r2, fp
 800360a:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 800360c:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 800360e:	3301      	adds	r3, #1
 8003610:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003612:	0028      	movs	r0, r5
 8003614:	4652      	mov	r2, sl
 8003616:	f00f fd35 	bl	8013084 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800361a:	7823      	ldrb	r3, [r4, #0]
 800361c:	2bfe      	cmp	r3, #254	; 0xfe
 800361e:	d102      	bne.n	8003626 <LoadROsnippets+0xca>
 8003620:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003622:	45b1      	cmp	r9, r6
 8003624:	d1b2      	bne.n	800358c <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 8003626:	0028      	movs	r0, r5
 8003628:	f00f fae0 	bl	8012bec <free>
	return BOS_OK;
 800362c:	2000      	movs	r0, #0
}
 800362e:	bc3c      	pop	{r2, r3, r4, r5}
 8003630:	4690      	mov	r8, r2
 8003632:	4699      	mov	r9, r3
 8003634:	46a2      	mov	sl, r4
 8003636:	46ab      	mov	fp, r5
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363a:	2332      	movs	r3, #50	; 0x32
 800363c:	2231      	movs	r2, #49	; 0x31
 800363e:	469a      	mov	sl, r3
 8003640:	e7d1      	b.n	80035e6 <LoadROsnippets+0x8a>
		return BOS_MEM_FULL;
 8003642:	20fb      	movs	r0, #251	; 0xfb
 8003644:	e7f3      	b.n	800362e <LoadROsnippets+0xd2>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003646:	2201      	movs	r2, #1
 8003648:	2300      	movs	r3, #0
 800364a:	4252      	negs	r2, r2
 800364c:	469a      	mov	sl, r3
 800364e:	e7ca      	b.n	80035e6 <LoadROsnippets+0x8a>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003650:	2214      	movs	r2, #20
 8003652:	2100      	movs	r1, #0
 8003654:	0030      	movs	r0, r6
 8003656:	f00f fd15 	bl	8013084 <memset>
			free(snipBuffer);
 800365a:	0028      	movs	r0, r5
 800365c:	f00f fac6 	bl	8012bec <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003660:	200e      	movs	r0, #14
 8003662:	e7e4      	b.n	800362e <LoadROsnippets+0xd2>
 8003664:	0801dc00 	.word	0x0801dc00
 8003668:	200016dc 	.word	0x200016dc
 800366c:	2000687c 	.word	0x2000687c

08003670 <LoadEEvars>:
void LoadEEvars(void){
 8003670:	b510      	push	{r4, lr}
	LoadROtopology();
 8003672:	f7ff fc9b 	bl	8002fac <LoadROtopology>
	LoadEEportsDir();
 8003676:	f7ff fce9 	bl	800304c <LoadEEportsDir>
	LoadEEalias();
 800367a:	f7ff fd0d 	bl	8003098 <LoadEEalias>
	LoadEEgroup();
 800367e:	f7ff fd4b 	bl	8003118 <LoadEEgroup>
	LoadEEstreams();
 8003682:	f7ff fd9b 	bl	80031bc <LoadEEstreams>
	LoadEEparams();
 8003686:	f7ff fe29 	bl	80032dc <LoadEEparams>
	LoadEEbuttons();
 800368a:	f7ff fee5 	bl	8003458 <LoadEEbuttons>
	LoadROsnippets();
 800368e:	f7ff ff65 	bl	800355c <LoadROsnippets>
}
 8003692:	bd10      	pop	{r4, pc}

08003694 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003696:	46c6      	mov	lr, r8
 8003698:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800369a:	4e10      	ldr	r6, [pc, #64]	; (80036dc <SaveEEportsDir+0x48>)
 800369c:	7833      	ldrb	r3, [r6, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 80036a2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 80036a4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80036a6:	4698      	mov	r8, r3
 80036a8:	4f0d      	ldr	r7, [pc, #52]	; (80036e0 <SaveEEportsDir+0x4c>)
 80036aa:	e007      	b.n	80036bc <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036ac:	2c19      	cmp	r4, #25
 80036ae:	d901      	bls.n	80036b4 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80036b0:	230a      	movs	r3, #10
 80036b2:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 80036b4:	7833      	ldrb	r3, [r6, #0]
 80036b6:	b2ec      	uxtb	r4, r5
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	d30b      	bcc.n	80036d4 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 80036bc:	1e63      	subs	r3, r4, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	5af9      	ldrh	r1, [r7, r3]
 80036c2:	1c65      	adds	r5, r4, #1
 80036c4:	2900      	cmp	r1, #0
 80036c6:	d0f1      	beq.n	80036ac <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036c8:	b2a8      	uxth	r0, r5
 80036ca:	f007 fd43 	bl	800b154 <EE_WriteVariable>
 80036ce:	e7ed      	b.n	80036ac <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	4698      	mov	r8, r3
	}
	
	return result;
}
 80036d4:	4640      	mov	r0, r8
 80036d6:	bc04      	pop	{r2}
 80036d8:	4690      	mov	r8, r2
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036dc:	20000008 	.word	0x20000008
 80036e0:	20006d04 	.word	0x20006d04

080036e4 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80036e4:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80036e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e8:	4646      	mov	r6, r8
 80036ea:	46d6      	mov	lr, sl
 80036ec:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80036ee:	4698      	mov	r8, r3
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80036f2:	b5c0      	push	{r6, r7, lr}
 80036f4:	4699      	mov	r9, r3
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036f8:	2600      	movs	r6, #0
 80036fa:	469a      	mov	sl, r3
 80036fc:	e005      	b.n	800370a <SaveEEalias+0x26>
 80036fe:	4653      	mov	r3, sl
 8003700:	3601      	adds	r6, #1
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b2f6      	uxtb	r6, r6
 8003706:	42b3      	cmp	r3, r6
 8003708:	d325      	bcc.n	8003756 <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800370a:	464b      	mov	r3, r9
 800370c:	00b4      	lsls	r4, r6, #2
 800370e:	19a4      	adds	r4, r4, r6
 8003710:	0064      	lsls	r4, r4, #1
 8003712:	5d1b      	ldrb	r3, [r3, r4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f2      	beq.n	80036fe <SaveEEalias+0x1a>
 8003718:	4645      	mov	r5, r8
 800371a:	4647      	mov	r7, r8
 800371c:	351c      	adds	r5, #28
 800371e:	3721      	adds	r7, #33	; 0x21
 8003720:	444c      	add	r4, r9
 8003722:	b2ad      	uxth	r5, r5
 8003724:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003726:	7861      	ldrb	r1, [r4, #1]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800372c:	0028      	movs	r0, r5
 800372e:	3501      	adds	r5, #1
 8003730:	b289      	uxth	r1, r1
 8003732:	b2ad      	uxth	r5, r5
 8003734:	f007 fd0e 	bl	800b154 <EE_WriteVariable>
 8003738:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800373a:	42bd      	cmp	r5, r7
 800373c:	d001      	beq.n	8003742 <SaveEEalias+0x5e>
 800373e:	7823      	ldrb	r3, [r4, #0]
 8003740:	e7f1      	b.n	8003726 <SaveEEalias+0x42>
 8003742:	4643      	mov	r3, r8
 8003744:	3305      	adds	r3, #5
 8003746:	b29b      	uxth	r3, r3
 8003748:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800374a:	4653      	mov	r3, sl
 800374c:	3601      	adds	r6, #1
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2f6      	uxtb	r6, r6
 8003752:	42b3      	cmp	r3, r6
 8003754:	d2d9      	bcs.n	800370a <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003756:	2000      	movs	r0, #0
 8003758:	bc1c      	pop	{r2, r3, r4}
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	46a2      	mov	sl, r4
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	20000dcc 	.word	0x20000dcc
 8003768:	20000008 	.word	0x20000008

0800376c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	46de      	mov	lr, fp
 8003770:	4657      	mov	r7, sl
 8003772:	464e      	mov	r6, r9
 8003774:	4645      	mov	r5, r8
 8003776:	468b      	mov	fp, r1
 8003778:	b5e0      	push	{r5, r6, r7, lr}
 800377a:	001e      	movs	r6, r3
 800377c:	ab0a      	add	r3, sp, #40	; 0x28
 800377e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003780:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003782:	469a      	mov	sl, r3
 8003784:	ab0b      	add	r3, sp, #44	; 0x2c
 8003786:	781d      	ldrb	r5, [r3, #0]
 8003788:	ab0c      	add	r3, sp, #48	; 0x30
 800378a:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800378c:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800378e:	4698      	mov	r8, r3
 8003790:	ab0d      	add	r3, sp, #52	; 0x34
 8003792:	781c      	ldrb	r4, [r3, #0]
 8003794:	ab0e      	add	r3, sp, #56	; 0x38
 8003796:	4691      	mov	r9, r2
 8003798:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800379a:	f007 fcdb 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800379e:	465b      	mov	r3, fp
 80037a0:	0a19      	lsrs	r1, r3, #8
 80037a2:	b289      	uxth	r1, r1
 80037a4:	20e5      	movs	r0, #229	; 0xe5
 80037a6:	f007 fcd5 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80037aa:	465b      	mov	r3, fp
 80037ac:	20e6      	movs	r0, #230	; 0xe6
 80037ae:	b299      	uxth	r1, r3
 80037b0:	f007 fcd0 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80037b4:	464b      	mov	r3, r9
 80037b6:	0a19      	lsrs	r1, r3, #8
 80037b8:	b289      	uxth	r1, r1
 80037ba:	20e7      	movs	r0, #231	; 0xe7
 80037bc:	f007 fcca 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c0:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037c2:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c4:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037c6:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c8:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037ca:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037cc:	f007 fcc2 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037d0:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037d2:	b2b1      	uxth	r1, r6
 80037d4:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037d6:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037d8:	f007 fcbc 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037dc:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037de:	b2a9      	uxth	r1, r5
 80037e0:	20ea      	movs	r0, #234	; 0xea
 80037e2:	f007 fcb7 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037e6:	b2a1      	uxth	r1, r4
 80037e8:	20eb      	movs	r0, #235	; 0xeb
 80037ea:	f007 fcb3 	bl	800b154 <EE_WriteVariable>
	
	return result;
}
 80037ee:	2000      	movs	r0, #0
 80037f0:	bc3c      	pop	{r2, r3, r4, r5}
 80037f2:	4690      	mov	r8, r2
 80037f4:	4699      	mov	r9, r3
 80037f6:	46a2      	mov	sl, r4
 80037f8:	46ab      	mov	fp, r5
 80037fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037fc <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037fc:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80037fe:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003800:	4c1e      	ldr	r4, [pc, #120]	; (800387c <SaveEEparams+0x80>)
 8003802:	0040      	lsls	r0, r0, #1
 8003804:	7863      	ldrb	r3, [r4, #1]
 8003806:	7821      	ldrb	r1, [r4, #0]
 8003808:	015b      	lsls	r3, r3, #5
 800380a:	4319      	orrs	r1, r3
 800380c:	f007 fca2 	bl	800b154 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003810:	208e      	movs	r0, #142	; 0x8e
 8003812:	7921      	ldrb	r1, [r4, #4]
 8003814:	88e3      	ldrh	r3, [r4, #6]
 8003816:	03c9      	lsls	r1, r1, #15
 8003818:	4319      	orrs	r1, r3
 800381a:	b289      	uxth	r1, r1
 800381c:	0040      	lsls	r0, r0, #1
 800381e:	f007 fc99 	bl	800b154 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003822:	2016      	movs	r0, #22
 8003824:	4c16      	ldr	r4, [pc, #88]	; (8003880 <SaveEEparams+0x84>)
 8003826:	30ff      	adds	r0, #255	; 0xff
 8003828:	8821      	ldrh	r1, [r4, #0]
 800382a:	f007 fc93 	bl	800b154 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800382e:	208b      	movs	r0, #139	; 0x8b
 8003830:	8861      	ldrh	r1, [r4, #2]
 8003832:	0040      	lsls	r0, r0, #1
 8003834:	f007 fc8e 	bl	800b154 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003838:	2018      	movs	r0, #24
 800383a:	7963      	ldrb	r3, [r4, #5]
 800383c:	7b21      	ldrb	r1, [r4, #12]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	4319      	orrs	r1, r3
 8003842:	30ff      	adds	r0, #255	; 0xff
 8003844:	f007 fc86 	bl	800b154 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003848:	208c      	movs	r0, #140	; 0x8c
 800384a:	8921      	ldrh	r1, [r4, #8]
 800384c:	0040      	lsls	r0, r0, #1
 800384e:	f007 fc81 	bl	800b154 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003852:	201a      	movs	r0, #26
 8003854:	8961      	ldrh	r1, [r4, #10]
 8003856:	30ff      	adds	r0, #255	; 0xff
 8003858:	f007 fc7c 	bl	800b154 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800385c:	208d      	movs	r0, #141	; 0x8d
 800385e:	7b63      	ldrb	r3, [r4, #13]
 8003860:	7921      	ldrb	r1, [r4, #4]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4319      	orrs	r1, r3
 8003866:	0040      	lsls	r0, r0, #1
 8003868:	f007 fc74 	bl	800b154 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 800386c:	201c      	movs	r0, #28
 800386e:	7ea1      	ldrb	r1, [r4, #26]
 8003870:	30ff      	adds	r0, #255	; 0xff
 8003872:	f007 fc6f 	bl	800b154 <EE_WriteVariable>
	
	return result;
}
 8003876:	2000      	movs	r0, #0
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	200067e0 	.word	0x200067e0
 8003880:	20006860 	.word	0x20006860

08003884 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003888:	4f12      	ldr	r7, [pc, #72]	; (80038d4 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 800388a:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800388c:	2234      	movs	r2, #52	; 0x34
 800388e:	2100      	movs	r1, #0
 8003890:	0038      	movs	r0, r7
 8003892:	f00f fbf7 	bl	8013084 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003896:	4e10      	ldr	r6, [pc, #64]	; (80038d8 <ClearEEportsDir+0x54>)
 8003898:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800389a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 80038a0:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 80038a2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80038a4:	4698      	mov	r8, r3
 80038a6:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80038a8:	2c19      	cmp	r4, #25
 80038aa:	d901      	bls.n	80038b0 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 80038ac:	230a      	movs	r3, #10
 80038ae:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 80038b0:	7833      	ldrb	r3, [r6, #0]
 80038b2:	b2ec      	uxtb	r4, r5
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d309      	bcc.n	80038cc <ClearEEportsDir+0x48>
 80038b8:	1e63      	subs	r3, r4, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038be:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d0f1      	beq.n	80038a8 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038c4:	b2a8      	uxth	r0, r5
 80038c6:	f007 fc45 	bl	800b154 <EE_WriteVariable>
 80038ca:	e7ed      	b.n	80038a8 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80038cc:	4640      	mov	r0, r8
 80038ce:	bc04      	pop	{r2}
 80038d0:	4690      	mov	r8, r2
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d4:	20006d04 	.word	0x20006d04
 80038d8:	20000008 	.word	0x20000008

080038dc <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038dc:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80038de:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038e0:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80038e2:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038e4:	ad03      	add	r5, sp, #12
 80038e6:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038e8:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	002a      	movs	r2, r5
 80038ee:	ab06      	add	r3, sp, #24
 80038f0:	a905      	add	r1, sp, #20
 80038f2:	2001      	movs	r0, #1
 80038f4:	f007 feda 	bl	800b6ac <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038f8:	aa04      	add	r2, sp, #16
 80038fa:	ab08      	add	r3, sp, #32
 80038fc:	a907      	add	r1, sp, #28
 80038fe:	9400      	str	r4, [sp, #0]
 8003900:	2002      	movs	r0, #2
 8003902:	f007 fed3 	bl	800b6ac <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003906:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 800390c:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800390e:	a909      	add	r1, sp, #36	; 0x24
 8003910:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003912:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003916:	f00d f823 	bl	8010960 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800391a:	2302      	movs	r3, #2
 800391c:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 800391e:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003920:	a909      	add	r1, sp, #36	; 0x24
 8003922:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003926:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003928:	f00d f81a 	bl	8010960 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800392c:	8829      	ldrh	r1, [r5, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	9805      	ldr	r0, [sp, #20]
 8003932:	f00d f9b5 	bl	8010ca0 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003936:	2005      	movs	r0, #5
 8003938:	f009 fb16 	bl	800cf68 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800393c:	8821      	ldrh	r1, [r4, #0]
 800393e:	9808      	ldr	r0, [sp, #32]
 8003940:	f00d f9a8 	bl	8010c94 <HAL_GPIO_ReadPin>
 8003944:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003946:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10f      	bne.n	800396c <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800394c:	8829      	ldrh	r1, [r5, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	9805      	ldr	r0, [sp, #20]
 8003952:	f00d f9a5 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003956:	2005      	movs	r0, #5
 8003958:	f009 fb06 	bl	800cf68 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800395c:	8821      	ldrh	r1, [r4, #0]
 800395e:	9808      	ldr	r0, [sp, #32]
 8003960:	f00d f998 	bl	8010c94 <HAL_GPIO_ReadPin>
 8003964:	3801      	subs	r0, #1
 8003966:	4243      	negs	r3, r0
 8003968:	4158      	adcs	r0, r3
			return 1;
 800396a:	b2c0      	uxtb	r0, r0
}
 800396c:	b00e      	add	sp, #56	; 0x38
 800396e:	bd70      	pop	{r4, r5, r6, pc}

08003970 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003972:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	f7fc fbc5 	bl	8000104 <strcmp>
 800397a:	4243      	negs	r3, r0
 800397c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800397e:	b2c0      	uxtb	r0, r0
 8003980:	bd10      	pop	{r4, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20000098 	.word	0x20000098

08003988 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	46de      	mov	lr, fp
 800398c:	4657      	mov	r7, sl
 800398e:	464e      	mov	r6, r9
 8003990:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003992:	4923      	ldr	r1, [pc, #140]	; (8003a20 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003994:	b5e0      	push	{r5, r6, r7, lr}
 8003996:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003998:	f7fc fbb4 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800399e:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 80039a0:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80039a2:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 80039a4:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 80039a6:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80039a8:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 80039aa:	4f21      	ldr	r7, [pc, #132]	; (8003a30 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 80039ac:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <IsMathOperator+0xac>)
 80039b0:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	d028      	beq.n	8003a08 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 80039b6:	0039      	movs	r1, r7
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fc fba3 	bl	8000104 <strcmp>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d024      	beq.n	8003a0c <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 80039c2:	4641      	mov	r1, r8
 80039c4:	0020      	movs	r0, r4
 80039c6:	f7fc fb9d 	bl	8000104 <strcmp>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d020      	beq.n	8003a10 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80039ce:	4649      	mov	r1, r9
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc fb97 	bl	8000104 <strcmp>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d01c      	beq.n	8003a14 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80039da:	4651      	mov	r1, sl
 80039dc:	0020      	movs	r0, r4
 80039de:	f7fc fb91 	bl	8000104 <strcmp>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d018      	beq.n	8003a18 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80039e6:	4659      	mov	r1, fp
 80039e8:	0020      	movs	r0, r4
 80039ea:	f7fc fb8b 	bl	8000104 <strcmp>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d014      	beq.n	8003a1c <IsMathOperator+0x94>
 80039f2:	3d01      	subs	r5, #1
 80039f4:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	d1db      	bne.n	80039b2 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	bc3c      	pop	{r2, r3, r4, r5}
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	46a2      	mov	sl, r4
 8003a04:	46ab      	mov	fp, r5
 8003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e7f7      	b.n	80039fc <IsMathOperator+0x74>
			return MATH_GREATER;
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	e7f5      	b.n	80039fc <IsMathOperator+0x74>
			return MATH_SMALLER;
 8003a10:	2003      	movs	r0, #3
 8003a12:	e7f3      	b.n	80039fc <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 8003a14:	2004      	movs	r0, #4
 8003a16:	e7f1      	b.n	80039fc <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 8003a18:	2005      	movs	r0, #5
 8003a1a:	e7ef      	b.n	80039fc <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 8003a1c:	2006      	movs	r0, #6
 8003a1e:	e7ed      	b.n	80039fc <IsMathOperator+0x74>
 8003a20:	08018008 	.word	0x08018008
 8003a24:	08018010 	.word	0x08018010
 8003a28:	08018014 	.word	0x08018014
 8003a2c:	08018018 	.word	0x08018018
 8003a30:	0801800c 	.word	0x0801800c
 8003a34:	0801801c 	.word	0x0801801c

08003a38 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003a38:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003a3a:	f009 f949 	bl	800ccd0 <RTC_Init>
	GetTimeDate();
 8003a3e:	f009 f9ed 	bl	800ce1c <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003a42:	f007 fc6d 	bl	800b320 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003a46:	f007 fddb 	bl	800b600 <GPIO_Init>
	DMA_Init();
 8003a4a:	f006 fd2d 	bl	800a4a8 <DMA_Init>
	TIM_USEC_Init();
 8003a4e:	f009 fa17 	bl	800ce80 <TIM_USEC_Init>
	CRC_Init();
 8003a52:	f007 fa85 	bl	800af60 <CRC_Init>
	TIM_MSEC_Init();
 8003a56:	f009 fa45 	bl	800cee4 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003a5a:	f007 fe85 	bl	800b768 <IsFactoryReset>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d15e      	bne.n	8003b20 <BOS_Init+0xe8>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003a62:	f7ff ff3b 	bl	80038dc <IsLowerCLIbaud>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d04e      	beq.n	8003b08 <BOS_Init+0xd0>
		CLI_LOW_Baudrate_Flag =1;
 8003a6a:	2322      	movs	r3, #34	; 0x22
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4e36      	ldr	r6, [pc, #216]	; (8003b48 <BOS_Init+0x110>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a70:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a72:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 8003a74:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a76:	f009 fa77 	bl	800cf68 <StartMilliDelay>
		Module_Peripheral_Init();
 8003a7a:	f006 fa45 	bl	8009f08 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a7e:	21e1      	movs	r1, #225	; 0xe1
 8003a80:	4d32      	ldr	r5, [pc, #200]	; (8003b4c <BOS_Init+0x114>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a82:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a84:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a86:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a88:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a8a:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a8c:	f009 fc56 	bl	800d33c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a90:	2c06      	cmp	r4, #6
 8003a92:	d007      	beq.n	8003aa4 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a94:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a96:	3401      	adds	r4, #1
 8003a98:	68a9      	ldr	r1, [r5, #8]
 8003a9a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a9c:	f009 fc4e 	bl	800d33c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003aa0:	2c06      	cmp	r4, #6
 8003aa2:	d1f7      	bne.n	8003a94 <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003aa4:	f7ff fde4 	bl	8003670 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003aa8:	f009 fce2 	bl	800d470 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003aac:	f007 f9ac 	bl	800ae08 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003ab0:	2180      	movs	r1, #128	; 0x80
	if(myID == 0) /* Native module */
 8003ab2:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <BOS_Init+0x118>)
		IND_ON();
 8003ab4:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003ab6:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003ab8:	01c9      	lsls	r1, r1, #7
 8003aba:	4826      	ldr	r0, [pc, #152]	; (8003b54 <BOS_Init+0x11c>)
	if(myID == 0) /* Native module */
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02a      	beq.n	8003b16 <BOS_Init+0xde>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003ac0:	f00d f8ee 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003ac4:	20fa      	movs	r0, #250	; 0xfa
 8003ac6:	0040      	lsls	r0, r0, #1
 8003ac8:	f009 fa4e 	bl	800cf68 <StartMilliDelay>
		IND_OFF();
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	2200      	movs	r2, #0
 8003ad0:	01c9      	lsls	r1, r1, #7
 8003ad2:	4820      	ldr	r0, [pc, #128]	; (8003b54 <BOS_Init+0x11c>)
 8003ad4:	f00d f8e4 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003ad8:	2064      	movs	r0, #100	; 0x64
 8003ada:	f009 fa45 	bl	800cf68 <StartMilliDelay>
		IND_ON();
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	481c      	ldr	r0, [pc, #112]	; (8003b54 <BOS_Init+0x11c>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	01c9      	lsls	r1, r1, #7
 8003ae6:	f00d f8db 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003aea:	2064      	movs	r0, #100	; 0x64
 8003aec:	f009 fa3c 	bl	800cf68 <StartMilliDelay>
		IND_OFF();
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	2200      	movs	r2, #0
 8003af4:	01c9      	lsls	r1, r1, #7
 8003af6:	4817      	ldr	r0, [pc, #92]	; (8003b54 <BOS_Init+0x11c>)
 8003af8:	f00d f8d2 	bl	8010ca0 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003afc:	f003 fd5e 	bl	80075bc <ResetUartORE>
	
	BOS_initialized =1;
 8003b00:	2323      	movs	r3, #35	; 0x23
 8003b02:	2201      	movs	r2, #1
 8003b04:	54f2      	strb	r2, [r6, r3]
}
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b08:	2032      	movs	r0, #50	; 0x32
 8003b0a:	f009 fa2d 	bl	800cf68 <StartMilliDelay>
		Module_Peripheral_Init();
 8003b0e:	f006 f9fb 	bl	8009f08 <Module_Peripheral_Init>
 8003b12:	4e0d      	ldr	r6, [pc, #52]	; (8003b48 <BOS_Init+0x110>)
 8003b14:	e7c6      	b.n	8003aa4 <BOS_Init+0x6c>
		IND_ON();
 8003b16:	f00d f8c3 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003b1a:	20fa      	movs	r0, #250	; 0xfa
 8003b1c:	0040      	lsls	r0, r0, #1
 8003b1e:	e7e5      	b.n	8003aec <BOS_Init+0xb4>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <BOS_Init+0x120>)
 8003b22:	4d0e      	ldr	r5, [pc, #56]	; (8003b5c <BOS_Init+0x124>)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	42ab      	cmp	r3, r5
 8003b28:	d004      	beq.n	8003b34 <BOS_Init+0xfc>
		if(EE_Format() == HAL_OK){
 8003b2a:	f007 fba9 	bl	800b280 <EE_Format>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d100      	bne.n	8003b34 <BOS_Init+0xfc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003b32:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b34:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <BOS_Init+0x128>)
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <BOS_Init+0x12c>)
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	e7fd      	b.n	8003b42 <BOS_Init+0x10a>
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	20000b20 	.word	0x20000b20
 8003b4c:	20006860 	.word	0x20006860
 8003b50:	20000aa0 	.word	0x20000aa0
 8003b54:	48000800 	.word	0x48000800
 8003b58:	20007ff0 	.word	0x20007ff0
 8003b5c:	beefdead 	.word	0xbeefdead
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	05fa0004 	.word	0x05fa0004

08003b68 <Module_Init>:
void Module_Init(void){
 8003b68:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003b6a:	f00b fbb9 	bl	800f2e0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003b6e:	f005 ffed 	bl	8009b4c <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003b72:	f7ff ff61 	bl	8003a38 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003b76:	f003 fd3d 	bl	80075f4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003b7a:	f009 fd21 	bl	800d5c0 <osKernelStart>
}
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b84:	4e12      	ldr	r6, [pc, #72]	; (8003bd0 <ExploreNeighbors+0x50>)
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003b88:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b8a:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b8c:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b8e:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b90:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 8003b92:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b94:	b082      	sub	sp, #8
		if(port != ignore){
 8003b96:	42a7      	cmp	r7, r4
 8003b98:	d011      	beq.n	8003bbe <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b9a:	4643      	mov	r3, r8
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 8003ba2:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003ba4:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003ba6:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003ba8:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003baa:	2200      	movs	r2, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	3307      	adds	r3, #7
 8003bb2:	0020      	movs	r0, r4
 8003bb4:	f004 f968 	bl	8007e88 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003bb8:	200a      	movs	r0, #10
 8003bba:	f009 fd07 	bl	800d5cc <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	b2e4      	uxtb	r4, r4
 8003bc2:	2c06      	cmp	r4, #6
 8003bc4:	d1e7      	bne.n	8003b96 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	b002      	add	sp, #8
 8003bca:	bc04      	pop	{r2}
 8003bcc:	4690      	mov	r8, r2
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd0:	20000b20 	.word	0x20000b20
 8003bd4:	20000008 	.word	0x20000008

08003bd8 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bda:	4657      	mov	r7, sl
 8003bdc:	464e      	mov	r6, r9
 8003bde:	4645      	mov	r5, r8
 8003be0:	46de      	mov	lr, fp
 8003be2:	b5e0      	push	{r5, r6, r7, lr}
 8003be4:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003be6:	466a      	mov	r2, sp
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bea:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003bec:	781d      	ldrb	r5, [r3, #0]
 8003bee:	1deb      	adds	r3, r5, #7
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	469d      	mov	sp, r3
 8003bf8:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	d00c      	beq.n	8003c18 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003bfe:	2100      	movs	r1, #0
 8003c00:	1e6c      	subs	r4, r5, #1
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c04:	b2e4      	uxtb	r4, r4
 8003c06:	3401      	adds	r4, #1
 8003c08:	3254      	adds	r2, #84	; 0x54
 8003c0a:	446c      	add	r4, sp
 8003c0c:	7019      	strb	r1, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003c10:	8011      	strh	r1, [r2, #0]
 8003c12:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d1f9      	bne.n	8003c0c <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2216      	movs	r2, #22
 8003c1c:	3801      	subs	r0, #1
 8003c1e:	5433      	strb	r3, [r6, r0]
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <FindBroadcastRoutes+0x148>)
 8003c22:	4342      	muls	r2, r0
 8003c24:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c28:	0040      	lsls	r0, r0, #1
 8003c2a:	1818      	adds	r0, r3, r0
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	3202      	adds	r2, #2
 8003c30:	4462      	add	r2, ip
 8003c32:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c34:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003c36:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c38:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c3a:	469a      	mov	sl, r3
 8003c3c:	46b3      	mov	fp, r6
 8003c3e:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003c40:	8813      	ldrh	r3, [r2, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c46:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c48:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c4a:	46a8      	mov	r8, r5
 8003c4c:	4665      	mov	r5, ip
 8003c4e:	408d      	lsls	r5, r1
 8003c50:	46a9      	mov	r9, r5
 8003c52:	4645      	mov	r5, r8
 8003c54:	464e      	mov	r6, r9
 8003c56:	4335      	orrs	r5, r6
 8003c58:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c5a:	4655      	mov	r5, sl
 8003c5c:	445b      	add	r3, fp
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	701d      	strb	r5, [r3, #0]
 8003c62:	3101      	adds	r1, #1
 8003c64:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003c66:	2906      	cmp	r1, #6
 8003c68:	d1ea      	bne.n	8003c40 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c6a:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003c6c:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c6e:	4692      	mov	sl, r2
 8003c70:	465e      	mov	r6, fp
	++level;												// Move one level
 8003c72:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c76:	687d      	ldr	r5, [r7, #4]
 8003c78:	449a      	add	sl, r3
 8003c7a:	4653      	mov	r3, sl
 8003c7c:	46a8      	mov	r8, r5
 8003c7e:	465d      	mov	r5, fp
 8003c80:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c82:	4643      	mov	r3, r8
		++level;											// Move one level
 8003c84:	3501      	adds	r5, #1
 8003c86:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03b      	beq.n	8003d04 <FindBroadcastRoutes+0x12c>
 8003c8c:	1e6b      	subs	r3, r5, #1
 8003c8e:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003c90:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c92:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003c94:	469c      	mov	ip, r3
 8003c96:	46ab      	mov	fp, r5
 8003c98:	e003      	b.n	8003ca2 <FindBroadcastRoutes+0xca>
 8003c9a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c9c:	b2d3      	uxtb	r3, r2
 8003c9e:	4598      	cmp	r8, r3
 8003ca0:	d92c      	bls.n	8003cfc <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003ca2:	5cb3      	ldrb	r3, [r6, r2]
 8003ca4:	454b      	cmp	r3, r9
 8003ca6:	d1f8      	bne.n	8003c9a <FindBroadcastRoutes+0xc2>
 8003ca8:	2116      	movs	r1, #22
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <FindBroadcastRoutes+0x14c>)
 8003cac:	4351      	muls	r1, r2
 8003cae:	469a      	mov	sl, r3
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4451      	add	r1, sl
 8003cb4:	46e2      	mov	sl, ip
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	0055      	lsls	r5, r2, #1
 8003cba:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003cbc:	880b      	ldrh	r3, [r1, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <FindBroadcastRoutes+0x110>
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	5cf2      	ldrb	r2, [r6, r3]
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d10d      	bne.n	8003ce8 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003ccc:	683c      	ldr	r4, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	5b15      	ldrh	r5, [r2, r4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4082      	lsls	r2, r0
 8003cd6:	4315      	orrs	r5, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003cdc:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003cde:	465a      	mov	r2, fp
						++untaged;
 8003ce0:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ce2:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ce4:	b2e3      	uxtb	r3, r4
 8003ce6:	469a      	mov	sl, r3
 8003ce8:	3001      	adds	r0, #1
 8003cea:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003cec:	2806      	cmp	r0, #6
 8003cee:	d1e5      	bne.n	8003cbc <FindBroadcastRoutes+0xe4>
 8003cf0:	4662      	mov	r2, ip
 8003cf2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003cf4:	b2d3      	uxtb	r3, r2
 8003cf6:	46d4      	mov	ip, sl
 8003cf8:	4598      	cmp	r8, r3
 8003cfa:	d8d2      	bhi.n	8003ca2 <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003cfc:	4663      	mov	r3, ip
 8003cfe:	465d      	mov	r5, fp
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1be      	bne.n	8003c82 <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b003      	add	sp, #12
 8003d0a:	bc3c      	pop	{r2, r3, r4, r5}
 8003d0c:	4690      	mov	r8, r2
 8003d0e:	4699      	mov	r9, r3
 8003d10:	46a2      	mov	sl, r4
 8003d12:	46ab      	mov	fp, r5
 8003d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000008 	.word	0x20000008
 8003d1c:	20000b20 	.word	0x20000b20
 8003d20:	20000edc 	.word	0x20000edc
 8003d24:	20000ede 	.word	0x20000ede

08003d28 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	46de      	mov	lr, fp
 8003d2c:	464e      	mov	r6, r9
 8003d2e:	4645      	mov	r5, r8
 8003d30:	4657      	mov	r7, sl
 8003d32:	b5e0      	push	{r5, r6, r7, lr}
 8003d34:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003d36:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d38:	0005      	movs	r5, r0
 8003d3a:	000e      	movs	r6, r1
 8003d3c:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	2100      	movs	r1, #0
 8003d42:	0020      	movs	r0, r4
 8003d44:	f00f f99e 	bl	8013084 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003d48:	221a      	movs	r2, #26
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4862      	ldr	r0, [pc, #392]	; (8003ed8 <FindRoute+0x1b0>)
 8003d4e:	f00f f999 	bl	8013084 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d52:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d54:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d56:	4b61      	ldr	r3, [pc, #388]	; (8003edc <FindRoute+0x1b4>)
 8003d58:	1e6a      	subs	r2, r5, #1
 8003d5a:	469c      	mov	ip, r3
 8003d5c:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d5e:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d60:	7219      	strb	r1, [r3, #8]
 8003d62:	2316      	movs	r3, #22
 8003d64:	4353      	muls	r3, r2
 8003d66:	4a5e      	ldr	r2, [pc, #376]	; (8003ee0 <FindRoute+0x1b8>)
 8003d68:	3302      	adds	r3, #2
 8003d6a:	4693      	mov	fp, r2
 8003d6c:	445b      	add	r3, fp
 8003d6e:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d70:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003d72:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003d74:	b2b1      	uxth	r1, r6
 8003d76:	8813      	ldrh	r3, [r2, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <FindRoute+0x5c>
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	428b      	cmp	r3, r1
 8003d80:	d100      	bne.n	8003d84 <FindRoute+0x5c>
 8003d82:	e099      	b.n	8003eb8 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003d84:	3001      	adds	r0, #1
 8003d86:	3202      	adds	r2, #2
 8003d88:	2807      	cmp	r0, #7
 8003d8a:	d1f4      	bne.n	8003d76 <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <FindRoute+0x1bc>)
 8003d8e:	7819      	ldrb	r1, [r3, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	2900      	cmp	r1, #0
 8003d94:	d100      	bne.n	8003d98 <FindRoute+0x70>
 8003d96:	e09a      	b.n	8003ece <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4462      	add	r2, ip
 8003d9c:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003da2:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003da4:	4692      	mov	sl, r2
 8003da6:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003da8:	429d      	cmp	r5, r3
 8003daa:	d005      	beq.n	8003db8 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003dac:	4640      	mov	r0, r8
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003db2:	4650      	mov	r0, sl
 8003db4:	18b2      	adds	r2, r6, r2
 8003db6:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003db8:	3301      	adds	r3, #1
 8003dba:	428b      	cmp	r3, r1
 8003dbc:	ddf4      	ble.n	8003da8 <FindRoute+0x80>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	4463      	add	r3, ip
	uint8_t u =0;
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003dc6:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003dc8:	2300      	movs	r3, #0
		temp &=Q[i];
 8003dca:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003dcc:	3301      	adds	r3, #1
		temp &=Q[i];
 8003dce:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	dbfa      	blt.n	8003dca <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d000      	beq.n	8003dda <FindRoute+0xb2>
 8003dd8:	e07c      	b.n	8003ed4 <FindRoute+0x1ac>
 8003dda:	4663      	mov	r3, ip
 8003ddc:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003dde:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003de0:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d000      	beq.n	8003de8 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003de6:	20ff      	movs	r0, #255	; 0xff
 8003de8:	2500      	movs	r5, #0
 8003dea:	2300      	movs	r3, #0
 8003dec:	e001      	b.n	8003df2 <FindRoute+0xca>
 8003dee:	4642      	mov	r2, r8
 8003df0:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003df2:	4290      	cmp	r0, r2
 8003df4:	d904      	bls.n	8003e00 <FindRoute+0xd8>
 8003df6:	5ce6      	ldrb	r6, [r4, r3]
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	d101      	bne.n	8003e00 <FindRoute+0xd8>
			index =i;
 8003dfc:	0010      	movs	r0, r2
 8003dfe:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003e00:	3301      	adds	r3, #1
 8003e02:	428b      	cmp	r3, r1
 8003e04:	dbf3      	blt.n	8003dee <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e06:	3501      	adds	r5, #1
		if(u == desID){
 8003e08:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e0a:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003e0c:	429d      	cmp	r5, r3
 8003e0e:	d023      	beq.n	8003e58 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003e10:	2301      	movs	r3, #1
 8003e12:	1e6f      	subs	r7, r5, #1
 8003e14:	55e3      	strb	r3, [r4, r7]
 8003e16:	2316      	movs	r3, #22
 8003e18:	465e      	mov	r6, fp
 8003e1a:	437b      	muls	r3, r7
 8003e1c:	360e      	adds	r6, #14
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	445a      	add	r2, fp
 8003e22:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e24:	4467      	add	r7, ip
 8003e26:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003e28:	8813      	ldrh	r3, [r2, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00f      	beq.n	8003e4e <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003e2e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	5ce0      	ldrb	r0, [r4, r3]
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d109      	bne.n	8003e4e <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e3a:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e3c:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e3e:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e40:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e42:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e44:	4281      	cmp	r1, r0
 8003e46:	d902      	bls.n	8003e4e <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003e48:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003e4a:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003e4c:	545d      	strb	r5, [r3, r1]
 8003e4e:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e50:	42b2      	cmp	r2, r6
 8003e52:	d1e9      	bne.n	8003e28 <FindRoute+0x100>
 8003e54:	9900      	ldr	r1, [sp, #0]
 8003e56:	e7b6      	b.n	8003dc6 <FindRoute+0x9e>
 8003e58:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	4463      	add	r3, ip
 8003e5e:	5c9a      	ldrb	r2, [r3, r2]
 8003e60:	2300      	movs	r3, #0
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	d101      	bne.n	8003e6a <FindRoute+0x142>
 8003e66:	e00b      	b.n	8003e80 <FindRoute+0x158>
 8003e68:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <FindRoute+0x1b0>)
 8003e6c:	1c58      	adds	r0, r3, #1
 8003e6e:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e70:	4663      	mov	r3, ip
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	3323      	adds	r3, #35	; 0x23
 8003e76:	7819      	ldrb	r1, [r3, #0]
 8003e78:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003e7a:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e7c:	2900      	cmp	r1, #0
 8003e7e:	d1f3      	bne.n	8003e68 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003e80:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003e82:	464c      	mov	r4, r9
 8003e84:	9b01      	ldr	r3, [sp, #4]
 8003e86:	4463      	add	r3, ip
 8003e88:	8822      	ldrh	r2, [r4, #0]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d008      	beq.n	8003ea0 <FindRoute+0x178>
 8003e8e:	4d12      	ldr	r5, [pc, #72]	; (8003ed8 <FindRoute+0x1b0>)
 8003e90:	79d9      	ldrb	r1, [r3, #7]
 8003e92:	46ac      	mov	ip, r5
 8003e94:	4461      	add	r1, ip
 8003e96:	3901      	subs	r1, #1
 8003e98:	7809      	ldrb	r1, [r1, #0]
 8003e9a:	08d2      	lsrs	r2, r2, #3
 8003e9c:	4291      	cmp	r1, r2
 8003e9e:	d014      	beq.n	8003eca <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	3402      	adds	r4, #2
 8003ea4:	2807      	cmp	r0, #7
 8003ea6:	d1ef      	bne.n	8003e88 <FindRoute+0x160>
	return 0;
 8003ea8:	2000      	movs	r0, #0
}
 8003eaa:	b011      	add	sp, #68	; 0x44
 8003eac:	bc3c      	pop	{r2, r3, r4, r5}
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	46a2      	mov	sl, r4
 8003eb4:	46ab      	mov	fp, r5
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003eb8:	9901      	ldr	r1, [sp, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	000b      	movs	r3, r1
 8003ebe:	4463      	add	r3, ip
 8003ec0:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <FindRoute+0x1b0>)
			return col;
 8003ec4:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003ec6:	7019      	strb	r1, [r3, #0]
			return col;
 8003ec8:	e7ef      	b.n	8003eaa <FindRoute+0x182>
			return col;
 8003eca:	b2c0      	uxtb	r0, r0
 8003ecc:	e7ed      	b.n	8003eaa <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003ece:	425b      	negs	r3, r3
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	e7c2      	b.n	8003e5a <FindRoute+0x132>
 8003ed4:	1e6b      	subs	r3, r5, #1
 8003ed6:	e7c0      	b.n	8003e5a <FindRoute+0x132>
 8003ed8:	20006928 	.word	0x20006928
 8003edc:	20000ba0 	.word	0x20000ba0
 8003ee0:	20000edc 	.word	0x20000edc
 8003ee4:	20000008 	.word	0x20000008

08003ee8 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003eea:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003eec:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003eee:	4645      	mov	r5, r8
 8003ef0:	464e      	mov	r6, r9
 8003ef2:	46de      	mov	lr, fp
 8003ef4:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ef6:	3440      	adds	r4, #64	; 0x40
 8003ef8:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003efa:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003efc:	4698      	mov	r8, r3
 8003efe:	4b57      	ldr	r3, [pc, #348]	; (800405c <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003f00:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f02:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f04:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f06:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f08:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003f0a:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f10:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f12:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f14:	0021      	movs	r1, r4
 8003f16:	2332      	movs	r3, #50	; 0x32
 8003f18:	9500      	str	r5, [sp, #0]
 8003f1a:	2211      	movs	r2, #17
 8003f1c:	0038      	movs	r0, r7
 8003f1e:	f009 f9bb 	bl	800d298 <writePxMutex>
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <DisplayTopology+0x178>)
 8003f24:	2601      	movs	r6, #1
 8003f26:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003f28:	0032      	movs	r2, r6
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f00f faa3 	bl	8013478 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f32:	0020      	movs	r0, r4
 8003f34:	f7fc f8f0 	bl	8000118 <strlen>
 8003f38:	3601      	adds	r6, #1
 8003f3a:	b282      	uxth	r2, r0
 8003f3c:	9500      	str	r5, [sp, #0]
 8003f3e:	2332      	movs	r3, #50	; 0x32
 8003f40:	0021      	movs	r1, r4
 8003f42:	0038      	movs	r0, r7
 8003f44:	f009 f9a8 	bl	800d298 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f48:	2e06      	cmp	r6, #6
 8003f4a:	d1ed      	bne.n	8003f28 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f4c:	2332      	movs	r3, #50	; 0x32
 8003f4e:	9500      	str	r5, [sp, #0]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4944      	ldr	r1, [pc, #272]	; (8004064 <DisplayTopology+0x17c>)
 8003f54:	0038      	movs	r0, r7
 8003f56:	f009 f99f 	bl	800d298 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <DisplayTopology+0x180>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d061      	beq.n	8004026 <DisplayTopology+0x13e>
 8003f62:	4b42      	ldr	r3, [pc, #264]	; (800406c <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f64:	4645      	mov	r5, r8
 8003f66:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003f70:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f72:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f74:	3540      	adds	r5, #64	; 0x40
 8003f76:	1c63      	adds	r3, r4, #1
 8003f78:	001a      	movs	r2, r3
 8003f7a:	493e      	ldr	r1, [pc, #248]	; (8004074 <DisplayTopology+0x18c>)
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	469a      	mov	sl, r3
 8003f80:	f00f fa7a 	bl	8013478 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f84:	0028      	movs	r0, r5
 8003f86:	f7fc f8c7 	bl	8000118 <strlen>
 8003f8a:	4643      	mov	r3, r8
 8003f8c:	b282      	uxth	r2, r0
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	0029      	movs	r1, r5
 8003f92:	2332      	movs	r3, #50	; 0x32
 8003f94:	0038      	movs	r0, r7
 8003f96:	f009 f97f 	bl	800d298 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003f9a:	2316      	movs	r3, #22
 8003f9c:	435c      	muls	r4, r3
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	5b1b      	ldrh	r3, [r3, r4]
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	0059      	lsls	r1, r3, #1
 8003fa6:	18c9      	adds	r1, r1, r3
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <DisplayTopology+0x190>)
 8003faa:	0049      	lsls	r1, r1, #1
 8003fac:	469c      	mov	ip, r3
 8003fae:	0028      	movs	r0, r5
 8003fb0:	4461      	add	r1, ip
 8003fb2:	f00f fab6 	bl	8013522 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	2205      	movs	r2, #5
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	2332      	movs	r3, #50	; 0x32
 8003fc0:	0038      	movs	r0, r7
 8003fc2:	f009 f969 	bl	800d298 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003fc6:	4643      	mov	r3, r8
 8003fc8:	2201      	movs	r2, #1
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	492b      	ldr	r1, [pc, #172]	; (800407c <DisplayTopology+0x194>)
 8003fce:	2332      	movs	r3, #50	; 0x32
 8003fd0:	0038      	movs	r0, r7
 8003fd2:	f009 f961 	bl	800d298 <writePxMutex>
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1ca6      	adds	r6, r4, #2
 8003fda:	330c      	adds	r3, #12
 8003fdc:	444e      	add	r6, r9
 8003fde:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003fe0:	8832      	ldrh	r2, [r6, #0]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d12f      	bne.n	8004046 <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003fe6:	4926      	ldr	r1, [pc, #152]	; (8004080 <DisplayTopology+0x198>)
 8003fe8:	0028      	movs	r0, r5
 8003fea:	f00f fa45 	bl	8013478 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fee:	0028      	movs	r0, r5
 8003ff0:	f7fc f892 	bl	8000118 <strlen>
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	b282      	uxth	r2, r0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	0029      	movs	r1, r5
 8003ffc:	2332      	movs	r3, #50	; 0x32
 8003ffe:	0038      	movs	r0, r7
 8004000:	3602      	adds	r6, #2
 8004002:	f009 f949 	bl	800d298 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004006:	42a6      	cmp	r6, r4
 8004008:	d1ea      	bne.n	8003fe0 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 800400a:	4643      	mov	r3, r8
 800400c:	2202      	movs	r2, #2
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	491c      	ldr	r1, [pc, #112]	; (8004084 <DisplayTopology+0x19c>)
 8004012:	2332      	movs	r3, #50	; 0x32
 8004014:	0038      	movs	r0, r7
 8004016:	f009 f93f 	bl	800d298 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800401a:	4653      	mov	r3, sl
 800401c:	b2dc      	uxtb	r4, r3
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <DisplayTopology+0x180>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	42a3      	cmp	r3, r4
 8004024:	d8a7      	bhi.n	8003f76 <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004026:	2301      	movs	r3, #1
 8004028:	425b      	negs	r3, r3
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2201      	movs	r2, #1
 800402e:	3333      	adds	r3, #51	; 0x33
 8004030:	4915      	ldr	r1, [pc, #84]	; (8004088 <DisplayTopology+0x1a0>)
 8004032:	0038      	movs	r0, r7
 8004034:	f009 f930 	bl	800d298 <writePxMutex>
}
 8004038:	b003      	add	sp, #12
 800403a:	bc3c      	pop	{r2, r3, r4, r5}
 800403c:	4690      	mov	r8, r2
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	46ab      	mov	fp, r5
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004046:	2307      	movs	r3, #7
 8004048:	4659      	mov	r1, fp
 800404a:	4013      	ands	r3, r2
 800404c:	0028      	movs	r0, r5
 800404e:	08d2      	lsrs	r2, r2, #3
 8004050:	f00f fa12 	bl	8013478 <sprintf>
 8004054:	e7cb      	b.n	8003fee <DisplayTopology+0x106>
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	20000ba0 	.word	0x20000ba0
 800405c:	08018020 	.word	0x08018020
 8004060:	08018034 	.word	0x08018034
 8004064:	08018ec0 	.word	0x08018ec0
 8004068:	20000008 	.word	0x20000008
 800406c:	20000edc 	.word	0x20000edc
 8004070:	0801804c 	.word	0x0801804c
 8004074:	0801803c 	.word	0x0801803c
 8004078:	080178cc 	.word	0x080178cc
 800407c:	08018030 	.word	0x08018030
 8004080:	08018048 	.word	0x08018048
 8004084:	08018158 	.word	0x08018158
 8004088:	08019934 	.word	0x08019934

0800408c <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	4645      	mov	r5, r8
 8004090:	46de      	mov	lr, fp
 8004092:	4657      	mov	r7, sl
 8004094:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8004098:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800409a:	3140      	adds	r1, #64	; 0x40
 800409c:	000a      	movs	r2, r1
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 80040a0:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040a2:	cb31      	ldmia	r3!, {r0, r4, r5}
 80040a4:	c231      	stmia	r2!, {r0, r4, r5}
 80040a6:	cb31      	ldmia	r3!, {r0, r4, r5}
 80040a8:	c231      	stmia	r2!, {r0, r4, r5}
 80040aa:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 80040ac:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040ae:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040b0:	2301      	movs	r3, #1
 80040b2:	425b      	negs	r3, r3
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	221b      	movs	r2, #27
 80040b8:	3333      	adds	r3, #51	; 0x33
 80040ba:	4650      	mov	r0, sl
 80040bc:	f009 f8ec 	bl	800d298 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <DisplayPortsDir+0xe4>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d035      	beq.n	8004134 <DisplayPortsDir+0xa8>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4699      	mov	r9, r3
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <DisplayPortsDir+0xe8>)
 80040ce:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <DisplayPortsDir+0xec>)
 80040d2:	469b      	mov	fp, r3
 80040d4:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040d6:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040d8:	4f23      	ldr	r7, [pc, #140]	; (8004168 <DisplayPortsDir+0xdc>)
 80040da:	1e5d      	subs	r5, r3, #1
 80040dc:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 80040de:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040e0:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040e2:	3740      	adds	r7, #64	; 0x40
 80040e4:	e002      	b.n	80040ec <DisplayPortsDir+0x60>
 80040e6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80040e8:	2c0a      	cmp	r4, #10
 80040ea:	d01b      	beq.n	8004124 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040ec:	0031      	movs	r1, r6
 80040ee:	4642      	mov	r2, r8
 80040f0:	4119      	asrs	r1, r3
 80040f2:	5b52      	ldrh	r2, [r2, r5]
 80040f4:	1c5c      	adds	r4, r3, #1
 80040f6:	4211      	tst	r1, r2
 80040f8:	d0f5      	beq.n	80040e6 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040fa:	0023      	movs	r3, r4
 80040fc:	464a      	mov	r2, r9
 80040fe:	4659      	mov	r1, fp
 8004100:	0038      	movs	r0, r7
 8004102:	f00f f9b9 	bl	8013478 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004106:	0038      	movs	r0, r7
 8004108:	f7fc f806 	bl	8000118 <strlen>
 800410c:	2301      	movs	r3, #1
 800410e:	425b      	negs	r3, r3
 8004110:	b282      	uxth	r2, r0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	0039      	movs	r1, r7
 8004116:	3333      	adds	r3, #51	; 0x33
 8004118:	4650      	mov	r0, sl
 800411a:	f009 f8bd 	bl	800d298 <writePxMutex>
 800411e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8004120:	2c0a      	cmp	r4, #10
 8004122:	d1e3      	bne.n	80040ec <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8004124:	464b      	mov	r3, r9
 8004126:	3301      	adds	r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4699      	mov	r9, r3
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <DisplayPortsDir+0xe4>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	454b      	cmp	r3, r9
 8004132:	d2cf      	bcs.n	80040d4 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <DisplayPortsDir+0xdc>)
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <DisplayPortsDir+0xf0>)
 8004138:	3140      	adds	r1, #64	; 0x40
 800413a:	000a      	movs	r2, r1
 800413c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800413e:	c231      	stmia	r2!, {r0, r4, r5}
 8004140:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004142:	c231      	stmia	r2!, {r0, r4, r5}
 8004144:	cb11      	ldmia	r3!, {r0, r4}
 8004146:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004148:	2301      	movs	r3, #1
 800414a:	425b      	negs	r3, r3
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	221f      	movs	r2, #31
 8004150:	3333      	adds	r3, #51	; 0x33
 8004152:	4650      	mov	r0, sl
 8004154:	f009 f8a0 	bl	800d298 <writePxMutex>
	HAL_MAX_DELAY);
}
 8004158:	b003      	add	sp, #12
 800415a:	bc3c      	pop	{r2, r3, r4, r5}
 800415c:	4690      	mov	r8, r2
 800415e:	4699      	mov	r9, r3
 8004160:	46a2      	mov	sl, r4
 8004162:	46ab      	mov	fp, r5
 8004164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000ba0 	.word	0x20000ba0
 800416c:	08018054 	.word	0x08018054
 8004170:	20000008 	.word	0x20000008
 8004174:	20006d04 	.word	0x20006d04
 8004178:	08018070 	.word	0x08018070
 800417c:	08018084 	.word	0x08018084

08004180 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	46de      	mov	lr, fp
 8004184:	464e      	mov	r6, r9
 8004186:	4645      	mov	r5, r8
 8004188:	4657      	mov	r7, sl
 800418a:	b5e0      	push	{r5, r6, r7, lr}
 800418c:	b085      	sub	sp, #20
 800418e:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004190:	f009 fb24 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8004194:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004196:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004198:	4d98      	ldr	r5, [pc, #608]	; (80043fc <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 800419a:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800419c:	4b98      	ldr	r3, [pc, #608]	; (8004400 <DisplayModuleStatus+0x280>)
 800419e:	3540      	adds	r5, #64	; 0x40
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4998      	ldr	r1, [pc, #608]	; (8004404 <DisplayModuleStatus+0x284>)
 80041a4:	0028      	movs	r0, r5
 80041a6:	f00f f967 	bl	8013478 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041aa:	0029      	movs	r1, r5
 80041ac:	0020      	movs	r0, r4
 80041ae:	f00f f983 	bl	80134b8 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <DisplayModuleStatus+0x288>)
 80041b4:	4995      	ldr	r1, [pc, #596]	; (800440c <DisplayModuleStatus+0x28c>)
 80041b6:	7c1a      	ldrb	r2, [r3, #16]
 80041b8:	0028      	movs	r0, r5
 80041ba:	4698      	mov	r8, r3
 80041bc:	f00f f95c 	bl	8013478 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041c0:	0029      	movs	r1, r5
 80041c2:	0020      	movs	r0, r4
 80041c4:	f00f f978 	bl	80134b8 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80041c8:	2306      	movs	r3, #6
 80041ca:	2200      	movs	r2, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4990      	ldr	r1, [pc, #576]	; (8004410 <DisplayModuleStatus+0x290>)
 80041d0:	3b04      	subs	r3, #4
 80041d2:	0028      	movs	r0, r5
 80041d4:	f00f f950 	bl	8013478 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80041d8:	0029      	movs	r1, r5
 80041da:	0020      	movs	r0, r4
 80041dc:	f00f f96c 	bl	80134b8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80041e0:	4a8c      	ldr	r2, [pc, #560]	; (8004414 <DisplayModuleStatus+0x294>)
 80041e2:	498d      	ldr	r1, [pc, #564]	; (8004418 <DisplayModuleStatus+0x298>)
 80041e4:	0028      	movs	r0, r5
 80041e6:	f00f f947 	bl	8013478 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041ea:	0029      	movs	r1, r5
 80041ec:	0020      	movs	r0, r4
 80041ee:	f00f f963 	bl	80134b8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80041f2:	4a8a      	ldr	r2, [pc, #552]	; (800441c <DisplayModuleStatus+0x29c>)
 80041f4:	498a      	ldr	r1, [pc, #552]	; (8004420 <DisplayModuleStatus+0x2a0>)
 80041f6:	0028      	movs	r0, r5
 80041f8:	f00f f93e 	bl	8013478 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041fc:	0029      	movs	r1, r5
 80041fe:	0020      	movs	r0, r4
 8004200:	f00f f95a 	bl	80134b8 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004204:	002a      	movs	r2, r5
 8004206:	4b87      	ldr	r3, [pc, #540]	; (8004424 <DisplayModuleStatus+0x2a4>)
 8004208:	cb43      	ldmia	r3!, {r0, r1, r6}
 800420a:	c243      	stmia	r2!, {r0, r1, r6}
 800420c:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 800420e:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8004214:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004216:	8091      	strh	r1, [r2, #4]
 8004218:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 800421a:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 800421c:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 800421e:	f00f f94b 	bl	80134b8 <strcat>
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <DisplayModuleStatus+0x2a8>)
 8004224:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004226:	4b81      	ldr	r3, [pc, #516]	; (800442c <DisplayModuleStatus+0x2ac>)
 8004228:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800422a:	4b81      	ldr	r3, [pc, #516]	; (8004430 <DisplayModuleStatus+0x2b0>)
 800422c:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 800422e:	0032      	movs	r2, r6
 8004230:	4649      	mov	r1, r9
 8004232:	0028      	movs	r0, r5
 8004234:	f00f f920 	bl	8013478 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004238:	0029      	movs	r1, r5
 800423a:	0020      	movs	r0, r4
 800423c:	f00f f93c 	bl	80134b8 <strcat>
		switch(portStatus[i]){
 8004240:	4643      	mov	r3, r8
 8004242:	3314      	adds	r3, #20
 8004244:	5cf3      	ldrb	r3, [r6, r3]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d80b      	bhi.n	8004262 <DisplayModuleStatus+0xe2>
 800424a:	4652      	mov	r2, sl
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	58d3      	ldr	r3, [r2, r3]
 8004250:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004252:	002a      	movs	r2, r5
 8004254:	4b77      	ldr	r3, [pc, #476]	; (8004434 <DisplayModuleStatus+0x2b4>)
 8004256:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004258:	c283      	stmia	r2!, {r0, r1, r7}
 800425a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800425c:	c283      	stmia	r2!, {r0, r1, r7}
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004262:	0029      	movs	r1, r5
 8004264:	0020      	movs	r0, r4
 8004266:	3601      	adds	r6, #1
 8004268:	f00f f926 	bl	80134b8 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800426c:	2e06      	cmp	r6, #6
 800426e:	d1de      	bne.n	800422e <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004270:	002a      	movs	r2, r5
 8004272:	4b71      	ldr	r3, [pc, #452]	; (8004438 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004274:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004276:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004278:	c243      	stmia	r2!, {r0, r1, r6}
 800427a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800427c:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800427e:	0029      	movs	r1, r5
 8004280:	0020      	movs	r0, r4
 8004282:	f00f f919 	bl	80134b8 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004286:	4b6d      	ldr	r3, [pc, #436]	; (800443c <DisplayModuleStatus+0x2bc>)
 8004288:	4e6d      	ldr	r6, [pc, #436]	; (8004440 <DisplayModuleStatus+0x2c0>)
 800428a:	469b      	mov	fp, r3
 800428c:	4b6d      	ldr	r3, [pc, #436]	; (8004444 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 800428e:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004290:	469a      	mov	sl, r3
 8004292:	e01d      	b.n	80042d0 <DisplayModuleStatus+0x150>
 8004294:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004296:	f005 fe71 	bl	8009f7c <GetPort>
 800429a:	465a      	mov	r2, fp
 800429c:	00ab      	lsls	r3, r5, #2
 800429e:	3b04      	subs	r3, #4
 80042a0:	0004      	movs	r4, r0
 80042a2:	58d0      	ldr	r0, [r2, r3]
 80042a4:	f005 fe6a 	bl	8009f7c <GetPort>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	4699      	mov	r9, r3
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <DisplayModuleStatus+0x27c>)
 80042ae:	002a      	movs	r2, r5
 80042b0:	469c      	mov	ip, r3
 80042b2:	44e1      	add	r9, ip
 80042b4:	9000      	str	r0, [sp, #0]
 80042b6:	0023      	movs	r3, r4
 80042b8:	4651      	mov	r1, sl
 80042ba:	4648      	mov	r0, r9
 80042bc:	f00f f8dc 	bl	8013478 <sprintf>
 80042c0:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042c2:	4649      	mov	r1, r9
 80042c4:	4640      	mov	r0, r8
 80042c6:	f00f f8f7 	bl	80134b8 <strcat>
 80042ca:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042cc:	2d07      	cmp	r5, #7
 80042ce:	d011      	beq.n	80042f4 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 80042d0:	6833      	ldr	r3, [r6, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1de      	bne.n	8004294 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80042d6:	4c49      	ldr	r4, [pc, #292]	; (80043fc <DisplayModuleStatus+0x27c>)
 80042d8:	002a      	movs	r2, r5
 80042da:	3440      	adds	r4, #64	; 0x40
 80042dc:	495a      	ldr	r1, [pc, #360]	; (8004448 <DisplayModuleStatus+0x2c8>)
 80042de:	0020      	movs	r0, r4
 80042e0:	f00f f8ca 	bl	8013478 <sprintf>
 80042e4:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042e6:	0021      	movs	r1, r4
 80042e8:	4640      	mov	r0, r8
 80042ea:	f00f f8e5 	bl	80134b8 <strcat>
 80042ee:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042f0:	2d07      	cmp	r5, #7
 80042f2:	d1ed      	bne.n	80042d0 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80042f4:	4640      	mov	r0, r8
 80042f6:	f7fb ff0f 	bl	8000118 <strlen>
 80042fa:	4644      	mov	r4, r8
 80042fc:	0005      	movs	r5, r0
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <DisplayModuleStatus+0x2cc>)
 8004300:	2202      	movs	r2, #2
 8004302:	0019      	movs	r1, r3
 8004304:	1820      	adds	r0, r4, r0
 8004306:	4698      	mov	r8, r3
 8004308:	f00e feb3 	bl	8013072 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 800430c:	1ca8      	adds	r0, r5, #2
 800430e:	221d      	movs	r2, #29
 8004310:	1820      	adds	r0, r4, r0
 8004312:	494f      	ldr	r1, [pc, #316]	; (8004450 <DisplayModuleStatus+0x2d0>)
 8004314:	f00e fead 	bl	8013072 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004318:	231e      	movs	r3, #30
 800431a:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 800431e:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 8004320:	4699      	mov	r9, r3
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	469a      	mov	sl, r3
 8004326:	4b35      	ldr	r3, [pc, #212]	; (80043fc <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004328:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 800432a:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 800432c:	2200      	movs	r2, #0
 800432e:	4e4a      	ldr	r6, [pc, #296]	; (8004458 <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004330:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004332:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004334:	0029      	movs	r1, r5
 8004336:	4111      	asrs	r1, r2
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <DisplayModuleStatus+0x280>)
 800433a:	1c57      	adds	r7, r2, #1
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	5af3      	ldrh	r3, [r6, r3]
 8004344:	4219      	tst	r1, r3
 8004346:	d148      	bne.n	80043da <DisplayModuleStatus+0x25a>
 8004348:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800434a:	2f05      	cmp	r7, #5
 800434c:	d1f2      	bne.n	8004334 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800434e:	0020      	movs	r0, r4
 8004350:	f7fb fee2 	bl	8000118 <strlen>
 8004354:	465b      	mov	r3, fp
 8004356:	b29b      	uxth	r3, r3
 8004358:	0005      	movs	r5, r0
 800435a:	1820      	adds	r0, r4, r0
 800435c:	42ab      	cmp	r3, r5
 800435e:	d046      	beq.n	80043ee <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004360:	2203      	movs	r2, #3
 8004362:	4641      	mov	r1, r8
 8004364:	f00e fe85 	bl	8013072 <memcpy>
	
	/* Display output */
	if(port)
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800436e:	0020      	movs	r0, r4
 8004370:	f7fb fed2 	bl	8000118 <strlen>
 8004374:	2301      	movs	r3, #1
 8004376:	425b      	negs	r3, r3
 8004378:	b282      	uxth	r2, r0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	0021      	movs	r1, r4
 800437e:	3333      	adds	r3, #51	; 0x33
 8004380:	9803      	ldr	r0, [sp, #12]
 8004382:	f008 ff89 	bl	800d298 <writePxMutex>
	
}
 8004386:	b005      	add	sp, #20
 8004388:	bc3c      	pop	{r2, r3, r4, r5}
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	46a2      	mov	sl, r4
 8004390:	46ab      	mov	fp, r5
 8004392:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004394:	002a      	movs	r2, r5
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <DisplayModuleStatus+0x2dc>)
 8004398:	cb83      	ldmia	r3!, {r0, r1, r7}
 800439a:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800439c:	e761      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800439e:	002a      	movs	r2, r5
 80043a0:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <DisplayModuleStatus+0x2e0>)
 80043a2:	cb83      	ldmia	r3!, {r0, r1, r7}
 80043a4:	c283      	stmia	r2!, {r0, r1, r7}
 80043a6:	cb03      	ldmia	r3!, {r0, r1}
 80043a8:	c203      	stmia	r2!, {r0, r1}
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	7013      	strb	r3, [r2, #0]
				break;
 80043ae:	e758      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80043b0:	002b      	movs	r3, r5
 80043b2:	465a      	mov	r2, fp
 80043b4:	ca83      	ldmia	r2!, {r0, r1, r7}
 80043b6:	c383      	stmia	r3!, {r0, r1, r7}
 80043b8:	ca83      	ldmia	r2!, {r0, r1, r7}
 80043ba:	c383      	stmia	r3!, {r0, r1, r7}
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	6019      	str	r1, [r3, #0]
 80043c0:	8891      	ldrh	r1, [r2, #4]
 80043c2:	8099      	strh	r1, [r3, #4]
 80043c4:	7992      	ldrb	r2, [r2, #6]
 80043c6:	719a      	strb	r2, [r3, #6]
				break;
 80043c8:	e74b      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <DisplayModuleStatus+0x2e4>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	602a      	str	r2, [r5, #0]
 80043d0:	889a      	ldrh	r2, [r3, #4]
 80043d2:	80aa      	strh	r2, [r5, #4]
 80043d4:	799b      	ldrb	r3, [r3, #6]
 80043d6:	71ab      	strb	r3, [r5, #6]
				break;
 80043d8:	e743      	b.n	8004262 <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 80043da:	4649      	mov	r1, r9
 80043dc:	003a      	movs	r2, r7
 80043de:	4650      	mov	r0, sl
 80043e0:	f00f f84a 	bl	8013478 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80043e4:	4651      	mov	r1, sl
 80043e6:	0020      	movs	r0, r4
 80043e8:	f00f f866 	bl	80134b8 <strcat>
 80043ec:	e7ac      	b.n	8004348 <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 80043ee:	2205      	movs	r2, #5
 80043f0:	491d      	ldr	r1, [pc, #116]	; (8004468 <DisplayModuleStatus+0x2e8>)
 80043f2:	f00e fe3e 	bl	8013072 <memcpy>
 80043f6:	1d28      	adds	r0, r5, #4
 80043f8:	1820      	adds	r0, r4, r0
 80043fa:	e7b1      	b.n	8004360 <DisplayModuleStatus+0x1e0>
 80043fc:	20000ba0 	.word	0x20000ba0
 8004400:	20000aa0 	.word	0x20000aa0
 8004404:	080180a4 	.word	0x080180a4
 8004408:	20000c20 	.word	0x20000c20
 800440c:	080180c0 	.word	0x080180c0
 8004410:	080180dc 	.word	0x080180dc
 8004414:	080180fc 	.word	0x080180fc
 8004418:	08018108 	.word	0x08018108
 800441c:	08018120 	.word	0x08018120
 8004420:	0801812c 	.word	0x0801812c
 8004424:	08018148 	.word	0x08018148
 8004428:	0801815c 	.word	0x0801815c
 800442c:	08017820 	.word	0x08017820
 8004430:	080181ac 	.word	0x080181ac
 8004434:	08018190 	.word	0x08018190
 8004438:	080181cc 	.word	0x080181cc
 800443c:	20001858 	.word	0x20001858
 8004440:	20002070 	.word	0x20002070
 8004444:	08018200 	.word	0x08018200
 8004448:	080181e4 	.word	0x080181e4
 800444c:	08018158 	.word	0x08018158
 8004450:	08018230 	.word	0x08018230
 8004454:	08018250 	.word	0x08018250
 8004458:	20006d04 	.word	0x20006d04
 800445c:	08018184 	.word	0x08018184
 8004460:	0801816c 	.word	0x0801816c
 8004464:	08018164 	.word	0x08018164
 8004468:	08018258 	.word	0x08018258

0800446c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004470:	4929      	ldr	r1, [pc, #164]	; (8004518 <GetID+0xac>)
int16_t GetID(char *string){
 8004472:	b500      	push	{lr}
 8004474:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004476:	f7fb fe45 	bl	8000104 <strcmp>
 800447a:	2800      	cmp	r0, #0
 800447c:	d02c      	beq.n	80044d8 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 800447e:	4927      	ldr	r1, [pc, #156]	; (800451c <GetID+0xb0>)
 8004480:	0030      	movs	r0, r6
 8004482:	f7fb fe3f 	bl	8000104 <strcmp>
 8004486:	2800      	cmp	r0, #0
 8004488:	d02b      	beq.n	80044e2 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800448a:	7833      	ldrb	r3, [r6, #0]
 800448c:	4698      	mov	r8, r3
 800448e:	2b23      	cmp	r3, #35	; 0x23
 8004490:	d030      	beq.n	80044f4 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <GetID+0xb4>)
 8004494:	781f      	ldrb	r7, [r3, #0]
 8004496:	2f00      	cmp	r7, #0
 8004498:	d00f      	beq.n	80044ba <GetID+0x4e>
 800449a:	2400      	movs	r4, #0
 800449c:	4d21      	ldr	r5, [pc, #132]	; (8004524 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800449e:	0029      	movs	r1, r5
 80044a0:	0030      	movs	r0, r6
 80044a2:	f7fb fe2f 	bl	8000104 <strcmp>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d102      	bne.n	80044b0 <GetID+0x44>
 80044aa:	4643      	mov	r3, r8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11a      	bne.n	80044e6 <GetID+0x7a>
		for(i =0; i < N; i++){
 80044b0:	3401      	adds	r4, #1
 80044b2:	b2e4      	uxtb	r4, r4
 80044b4:	350a      	adds	r5, #10
 80044b6:	42a7      	cmp	r7, r4
 80044b8:	d1f1      	bne.n	800449e <GetID+0x32>
 80044ba:	2400      	movs	r4, #0
 80044bc:	4d1a      	ldr	r5, [pc, #104]	; (8004528 <GetID+0xbc>)
 80044be:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 80044c0:	0029      	movs	r1, r5
 80044c2:	0030      	movs	r0, r6
 80044c4:	f7fb fe1e 	bl	8000104 <strcmp>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d00e      	beq.n	80044ea <GetID+0x7e>
 80044cc:	3401      	adds	r4, #1
 80044ce:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80044d0:	2c0a      	cmp	r4, #10
 80044d2:	d1f5      	bne.n	80044c0 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	e001      	b.n	80044dc <GetID+0x70>
		return myID;
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <GetID+0xbc>)
 80044da:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80044dc:	bc04      	pop	{r2}
 80044de:	4690      	mov	r8, r2
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80044e2:	20ff      	movs	r0, #255	; 0xff
 80044e4:	e7fa      	b.n	80044dc <GetID+0x70>
				return (i);
 80044e6:	b220      	sxth	r0, r4
 80044e8:	e7f8      	b.n	80044dc <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80044ea:	20fe      	movs	r0, #254	; 0xfe
 80044ec:	0224      	lsls	r4, r4, #8
 80044ee:	4320      	orrs	r0, r4
 80044f0:	b200      	sxth	r0, r0
 80044f2:	e7f3      	b.n	80044dc <GetID+0x70>
		id =atol(string + 1);
 80044f4:	1c70      	adds	r0, r6, #1
 80044f6:	f00e fafc 	bl	8012af2 <atol>
 80044fa:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <GetID+0x9c>
 8004500:	4a07      	ldr	r2, [pc, #28]	; (8004520 <GetID+0xb4>)
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d204      	bcs.n	8004512 <GetID+0xa6>
		else if(id == myID)
 8004508:	4a07      	ldr	r2, [pc, #28]	; (8004528 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800450a:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d1e4      	bne.n	80044dc <GetID+0x70>
			return myID;
 8004512:	b218      	sxth	r0, r3
 8004514:	e7e2      	b.n	80044dc <GetID+0x70>
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	08018260 	.word	0x08018260
 800451c:	08018264 	.word	0x08018264
 8004520:	20000008 	.word	0x20000008
 8004524:	20000dcc 	.word	0x20000dcc
 8004528:	20000aa0 	.word	0x20000aa0

0800452c <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	46c6      	mov	lr, r8
 8004530:	4c2c      	ldr	r4, [pc, #176]	; (80045e4 <NameModule+0xb8>)
 8004532:	0007      	movs	r7, r0
 8004534:	0026      	movs	r6, r4
 8004536:	000d      	movs	r5, r1
 8004538:	b500      	push	{lr}
 800453a:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800453c:	0021      	movs	r1, r4
 800453e:	0028      	movs	r0, r5
 8004540:	f7fb fde0 	bl	8000104 <strcmp>
 8004544:	2800      	cmp	r0, #0
 8004546:	d040      	beq.n	80045ca <NameModule+0x9e>
 8004548:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800454a:	42a6      	cmp	r6, r4
 800454c:	d1f6      	bne.n	800453c <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800454e:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <NameModule+0xbc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d914      	bls.n	8004580 <NameModule+0x54>
 8004556:	4c25      	ldr	r4, [pc, #148]	; (80045ec <NameModule+0xc0>)
 8004558:	009e      	lsls	r6, r3, #2
 800455a:	18f6      	adds	r6, r6, r3
 800455c:	0023      	movs	r3, r4
 800455e:	0076      	lsls	r6, r6, #1
 8004560:	3b0a      	subs	r3, #10
 8004562:	18f6      	adds	r6, r6, r3
 8004564:	e002      	b.n	800456c <NameModule+0x40>
 8004566:	340a      	adds	r4, #10
 8004568:	42b4      	cmp	r4, r6
 800456a:	d009      	beq.n	8004580 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 800456c:	0021      	movs	r1, r4
 800456e:	0028      	movs	r0, r5
 8004570:	f7fb fdc8 	bl	8000104 <strcmp>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1f6      	bne.n	8004566 <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004578:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 800457a:	bc04      	pop	{r2}
 800457c:	4690      	mov	r8, r2
 800457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004580:	4e1b      	ldr	r6, [pc, #108]	; (80045f0 <NameModule+0xc4>)
 8004582:	0034      	movs	r4, r6
 8004584:	369c      	adds	r6, #156	; 0x9c
 8004586:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004588:	0021      	movs	r1, r4
 800458a:	0028      	movs	r0, r5
 800458c:	f7fb fdba 	bl	8000104 <strcmp>
 8004590:	2800      	cmp	r0, #0
 8004592:	d0f1      	beq.n	8004578 <NameModule+0x4c>
 8004594:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004596:	42a6      	cmp	r6, r4
 8004598:	d1f6      	bne.n	8004588 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <NameModule+0xc8>)
 800459c:	4c16      	ldr	r4, [pc, #88]	; (80045f8 <NameModule+0xcc>)
 800459e:	4698      	mov	r8, r3
 80045a0:	61dc      	str	r4, [r3, #28]
 80045a2:	e004      	b.n	80045ae <NameModule+0x82>
 80045a4:	4643      	mov	r3, r8
 80045a6:	6864      	ldr	r4, [r4, #4]
 80045a8:	61dc      	str	r4, [r3, #28]
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d00f      	beq.n	80045ce <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045b2:	0030      	movs	r0, r6
 80045b4:	f7fb fdb0 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045b8:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045ba:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045bc:	0028      	movs	r0, r5
 80045be:	f00e ff9f 	bl	8013500 <strncmp>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1ee      	bne.n	80045a4 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 80045c6:	2008      	movs	r0, #8
 80045c8:	e7d7      	b.n	800457a <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80045ca:	2006      	movs	r0, #6
 80045cc:	e7d5      	b.n	800457a <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80045ce:	00b8      	lsls	r0, r7, #2
 80045d0:	19c0      	adds	r0, r0, r7
 80045d2:	4f0a      	ldr	r7, [pc, #40]	; (80045fc <NameModule+0xd0>)
 80045d4:	0040      	lsls	r0, r0, #1
 80045d6:	0029      	movs	r1, r5
 80045d8:	19c0      	adds	r0, r0, r7
 80045da:	f00e ff89 	bl	80134f0 <strcpy>
	result =SaveEEalias();
 80045de:	f7ff f881 	bl	80036e4 <SaveEEalias>
	return result;
 80045e2:	e7ca      	b.n	800457a <NameModule+0x4e>
 80045e4:	0801787c 	.word	0x0801787c
 80045e8:	20000008 	.word	0x20000008
 80045ec:	20000dd6 	.word	0x20000dd6
 80045f0:	20000aa0 	.word	0x20000aa0
 80045f4:	20000c20 	.word	0x20000c20
 80045f8:	200000c0 	.word	0x200000c0
 80045fc:	20000dcc 	.word	0x20000dcc

08004600 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	464f      	mov	r7, r9
 8004604:	4646      	mov	r6, r8
 8004606:	46d6      	mov	lr, sl
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <AddModuleToGroup+0x104>)
 800460a:	b5c0      	push	{r6, r7, lr}
 800460c:	001f      	movs	r7, r3
 800460e:	3738      	adds	r7, #56	; 0x38
 8004610:	4680      	mov	r8, r0
 8004612:	000e      	movs	r6, r1
 8004614:	4699      	mov	r9, r3
 8004616:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004618:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800461a:	0021      	movs	r1, r4
 800461c:	0030      	movs	r0, r6
 800461e:	f7fb fd71 	bl	8000104 <strcmp>
 8004622:	2800      	cmp	r0, #0
 8004624:	d02a      	beq.n	800467c <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 8004626:	3501      	adds	r5, #1
 8004628:	340a      	adds	r4, #10
 800462a:	2d0a      	cmp	r5, #10
 800462c:	d1f5      	bne.n	800461a <AddModuleToGroup+0x1a>
 800462e:	4c36      	ldr	r4, [pc, #216]	; (8004708 <AddModuleToGroup+0x108>)
 8004630:	0025      	movs	r5, r4
 8004632:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004634:	0021      	movs	r1, r4
 8004636:	0030      	movs	r0, r6
 8004638:	f7fb fd64 	bl	8000104 <strcmp>
 800463c:	2800      	cmp	r0, #0
 800463e:	d051      	beq.n	80046e4 <AddModuleToGroup+0xe4>
 8004640:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004642:	42a5      	cmp	r5, r4
 8004644:	d1f6      	bne.n	8004634 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <AddModuleToGroup+0x10c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d920      	bls.n	8004690 <AddModuleToGroup+0x90>
 800464e:	4c30      	ldr	r4, [pc, #192]	; (8004710 <AddModuleToGroup+0x110>)
 8004650:	009d      	lsls	r5, r3, #2
 8004652:	18ed      	adds	r5, r5, r3
 8004654:	0023      	movs	r3, r4
 8004656:	006d      	lsls	r5, r5, #1
 8004658:	3b0a      	subs	r3, #10
 800465a:	18ed      	adds	r5, r5, r3
 800465c:	e002      	b.n	8004664 <AddModuleToGroup+0x64>
 800465e:	340a      	adds	r4, #10
 8004660:	42a5      	cmp	r5, r4
 8004662:	d015      	beq.n	8004690 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004664:	0021      	movs	r1, r4
 8004666:	0030      	movs	r0, r6
 8004668:	f7fb fd4c 	bl	8000104 <strcmp>
 800466c:	2800      	cmp	r0, #0
 800466e:	d1f6      	bne.n	800465e <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 8004670:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004672:	bc1c      	pop	{r2, r3, r4}
 8004674:	4690      	mov	r8, r2
 8004676:	4699      	mov	r9, r3
 8004678:	46a2      	mov	sl, r4
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 800467c:	2201      	movs	r2, #1
 800467e:	4647      	mov	r7, r8
 8004680:	40aa      	lsls	r2, r5
 8004682:	3f01      	subs	r7, #1
 8004684:	007f      	lsls	r7, r7, #1
 8004686:	444f      	add	r7, r9
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	4313      	orrs	r3, r2
 800468c:	80bb      	strh	r3, [r7, #4]
			return result;
 800468e:	e7f0      	b.n	8004672 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <AddModuleToGroup+0x114>)
 8004692:	4c21      	ldr	r4, [pc, #132]	; (8004718 <AddModuleToGroup+0x118>)
 8004694:	469a      	mov	sl, r3
 8004696:	621c      	str	r4, [r3, #32]
 8004698:	e004      	b.n	80046a4 <AddModuleToGroup+0xa4>
 800469a:	4653      	mov	r3, sl
 800469c:	6864      	ldr	r4, [r4, #4]
 800469e:	621c      	str	r4, [r3, #32]
 80046a0:	2c00      	cmp	r4, #0
 80046a2:	d00d      	beq.n	80046c0 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80046a8:	0028      	movs	r0, r5
 80046aa:	f7fb fd35 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80046ae:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80046b0:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80046b2:	0030      	movs	r0, r6
 80046b4:	f00e ff24 	bl	8013500 <strncmp>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1ee      	bne.n	800469a <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 80046bc:	2008      	movs	r0, #8
 80046be:	e7d8      	b.n	8004672 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 80046c0:	783b      	ldrb	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d010      	beq.n	80046e8 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 80046c6:	3401      	adds	r4, #1
 80046c8:	370a      	adds	r7, #10
 80046ca:	2c0a      	cmp	r4, #10
 80046cc:	d1f8      	bne.n	80046c0 <AddModuleToGroup+0xc0>
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80046d2:	4647      	mov	r7, r8
 80046d4:	3f01      	subs	r7, #1
 80046d6:	007f      	lsls	r7, r7, #1
 80046d8:	444f      	add	r7, r9
 80046da:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80046dc:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80046de:	4313      	orrs	r3, r2
 80046e0:	80bb      	strh	r3, [r7, #4]
	return result;
 80046e2:	e7c6      	b.n	8004672 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80046e4:	2006      	movs	r0, #6
 80046e6:	e7c4      	b.n	8004672 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80046e8:	464b      	mov	r3, r9
 80046ea:	00a0      	lsls	r0, r4, #2
 80046ec:	1900      	adds	r0, r0, r4
 80046ee:	3338      	adds	r3, #56	; 0x38
 80046f0:	0040      	lsls	r0, r0, #1
 80046f2:	1818      	adds	r0, r3, r0
 80046f4:	0031      	movs	r1, r6
 80046f6:	f00e fefb 	bl	80134f0 <strcpy>
 80046fa:	2301      	movs	r3, #1
 80046fc:	40a3      	lsls	r3, r4
 80046fe:	b21b      	sxth	r3, r3
			break;
 8004700:	e7e7      	b.n	80046d2 <AddModuleToGroup+0xd2>
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	20000aa0 	.word	0x20000aa0
 8004708:	0801787c 	.word	0x0801787c
 800470c:	20000008 	.word	0x20000008
 8004710:	20000dd6 	.word	0x20000dd6
 8004714:	20000c20 	.word	0x20000c20
 8004718:	200000c0 	.word	0x200000c0

0800471c <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	4645      	mov	r5, r8
 8004720:	4657      	mov	r7, sl
 8004722:	464e      	mov	r6, r9
 8004724:	46de      	mov	lr, fp
 8004726:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004728:	4f82      	ldr	r7, [pc, #520]	; (8004934 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800472a:	b083      	sub	sp, #12
 800472c:	ac0c      	add	r4, sp, #48	; 0x30
 800472e:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004730:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004732:	9001      	str	r0, [sp, #4]
 8004734:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004736:	46a8      	mov	r8, r5
	if(timeout)
 8004738:	2e00      	cmp	r6, #0
 800473a:	d059      	beq.n	80047f0 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 800473c:	2520      	movs	r5, #32
 800473e:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004740:	4265      	negs	r5, r4
 8004742:	416c      	adcs	r4, r5
 8004744:	2501      	movs	r5, #1
 8004746:	2022      	movs	r0, #34	; 0x22
 8004748:	4264      	negs	r4, r4
 800474a:	43ac      	bics	r4, r5
 800474c:	46a3      	mov	fp, r4
 800474e:	4684      	mov	ip, r0
 8004750:	b2d5      	uxtb	r5, r2
 8004752:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004754:	4d78      	ldr	r5, [pc, #480]	; (8004938 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004756:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004758:	42aa      	cmp	r2, r5
 800475a:	d829      	bhi.n	80047b0 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 800475c:	2224      	movs	r2, #36	; 0x24
 800475e:	464c      	mov	r4, r9
 8004760:	4d76      	ldr	r5, [pc, #472]	; (800493c <WriteToRemote+0x220>)
 8004762:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004764:	002a      	movs	r2, r5
 8004766:	3224      	adds	r2, #36	; 0x24
 8004768:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 800476a:	2b08      	cmp	r3, #8
 800476c:	d814      	bhi.n	8004798 <WriteToRemote+0x7c>
 800476e:	4a74      	ldr	r2, [pc, #464]	; (8004940 <WriteToRemote+0x224>)
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	58d3      	ldr	r3, [r2, r3]
 8004774:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004776:	680b      	ldr	r3, [r1, #0]
 8004778:	3524      	adds	r5, #36	; 0x24
 800477a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	121b      	asrs	r3, r3, #8
 8004780:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004782:	680b      	ldr	r3, [r1, #0]
 8004784:	141b      	asrs	r3, r3, #16
 8004786:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 800478c:	220a      	movs	r2, #10
 800478e:	4659      	mov	r1, fp
 8004790:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004792:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004794:	f003 fdd8 	bl	8008348 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004798:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 800479a:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 800479c:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800479e:	2e00      	cmp	r6, #0
 80047a0:	d128      	bne.n	80047f4 <WriteToRemote+0xd8>
}
 80047a2:	b003      	add	sp, #12
 80047a4:	bc3c      	pop	{r2, r3, r4, r5}
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	46a2      	mov	sl, r4
 80047ac:	46ab      	mov	fp, r5
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 80047b0:	2024      	movs	r0, #36	; 0x24
 80047b2:	4684      	mov	ip, r0
 80047b4:	2000      	movs	r0, #0
 80047b6:	4682      	mov	sl, r0
 80047b8:	4660      	mov	r0, ip
 80047ba:	4654      	mov	r4, sl
 80047bc:	4d5f      	ldr	r5, [pc, #380]	; (800493c <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 80047be:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047c0:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047c2:	4660      	mov	r0, ip
 80047c4:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047c6:	0e10      	lsrs	r0, r2, #24
 80047c8:	4682      	mov	sl, r0
 80047ca:	4660      	mov	r0, ip
 80047cc:	4654      	mov	r4, sl
 80047ce:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047d0:	0c10      	lsrs	r0, r2, #16
 80047d2:	4682      	mov	sl, r0
 80047d4:	4660      	mov	r0, ip
 80047d6:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047d8:	0a12      	lsrs	r2, r2, #8
 80047da:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047dc:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047de:	4662      	mov	r2, ip
 80047e0:	4648      	mov	r0, r9
 80047e2:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d8d7      	bhi.n	8004798 <WriteToRemote+0x7c>
 80047e8:	4a56      	ldr	r2, [pc, #344]	; (8004944 <WriteToRemote+0x228>)
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	58d3      	ldr	r3, [r2, r3]
 80047ee:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047f0:	703e      	strb	r6, [r7, #0]
 80047f2:	e7a5      	b.n	8004740 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047f4:	f00a fd8c 	bl	800f310 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047f8:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047fa:	0007      	movs	r7, r0
 80047fc:	4d52      	ldr	r5, [pc, #328]	; (8004948 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047fe:	5d28      	ldrb	r0, [r5, r4]
 8004800:	2800      	cmp	r0, #0
 8004802:	d0ce      	beq.n	80047a2 <WriteToRemote+0x86>
 8004804:	f00a fd84 	bl	800f310 <HAL_GetTick>
 8004808:	1bc0      	subs	r0, r0, r7
 800480a:	42b0      	cmp	r0, r6
 800480c:	d3f7      	bcc.n	80047fe <WriteToRemote+0xe2>
 800480e:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 8004810:	e7c7      	b.n	80047a2 <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004812:	780b      	ldrb	r3, [r1, #0]
 8004814:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004816:	2203      	movs	r2, #3
 8004818:	2120      	movs	r1, #32
 800481a:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 800481c:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800481e:	f003 fd93 	bl	8008348 <SendMessageToModule>
				break;
 8004822:	e7b9      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004824:	780b      	ldrb	r3, [r1, #0]
 8004826:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004828:	2207      	movs	r2, #7
 800482a:	4659      	mov	r1, fp
 800482c:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800482e:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004830:	f003 fd8a 	bl	8008348 <SendMessageToModule>
				break;
 8004834:	e7b0      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004836:	680b      	ldr	r3, [r1, #0]
 8004838:	3524      	adds	r5, #36	; 0x24
 800483a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004848:	680b      	ldr	r3, [r1, #0]
 800484a:	0e1b      	lsrs	r3, r3, #24
 800484c:	e79e      	b.n	800478c <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800484e:	780b      	ldrb	r3, [r1, #0]
 8004850:	3524      	adds	r5, #36	; 0x24
 8004852:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004854:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004856:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004858:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800485a:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485c:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800485e:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004860:	78cb      	ldrb	r3, [r1, #3]
 8004862:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004864:	790b      	ldrb	r3, [r1, #4]
 8004866:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004868:	794b      	ldrb	r3, [r1, #5]
 800486a:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 800486c:	798b      	ldrb	r3, [r1, #6]
 800486e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004870:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004872:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004874:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004876:	f003 fd67 	bl	8008348 <SendMessageToModule>
				break;
 800487a:	e78d      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 800487c:	780b      	ldrb	r3, [r1, #0]
 800487e:	3524      	adds	r5, #36	; 0x24
 8004880:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004882:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004884:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004886:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004888:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 800488a:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800488c:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800488e:	78cb      	ldrb	r3, [r1, #3]
 8004890:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004892:	790b      	ldrb	r3, [r1, #4]
 8004894:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004896:	794b      	ldrb	r3, [r1, #5]
 8004898:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800489a:	798b      	ldrb	r3, [r1, #6]
 800489c:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800489e:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 80048a0:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 80048a2:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 80048a4:	f003 fd50 	bl	8008348 <SendMessageToModule>
				break;
 80048a8:	e776      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048aa:	880b      	ldrh	r3, [r1, #0]
 80048ac:	3524      	adds	r5, #36	; 0x24
 80048ae:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048b0:	880b      	ldrh	r3, [r1, #0]
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 80048b6:	2208      	movs	r2, #8
 80048b8:	4659      	mov	r1, fp
 80048ba:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048bc:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 80048be:	f003 fd43 	bl	8008348 <SendMessageToModule>
				break;
 80048c2:	e769      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048c4:	880b      	ldrh	r3, [r1, #0]
 80048c6:	3524      	adds	r5, #36	; 0x24
 80048c8:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048ca:	880b      	ldrh	r3, [r1, #0]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	e7f2      	b.n	80048b6 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	3524      	adds	r5, #36	; 0x24
 80048d4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	121b      	asrs	r3, r3, #8
 80048da:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	141b      	asrs	r3, r3, #16
 80048e0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048e2:	680b      	ldr	r3, [r1, #0]
 80048e4:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048e6:	2206      	movs	r2, #6
 80048e8:	2120      	movs	r1, #32
 80048ea:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048ec:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048ee:	f003 fd2b 	bl	8008348 <SendMessageToModule>
				break;
 80048f2:	e751      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	3524      	adds	r5, #36	; 0x24
 80048f8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048fa:	680b      	ldr	r3, [r1, #0]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004906:	680b      	ldr	r3, [r1, #0]
 8004908:	0e1b      	lsrs	r3, r3, #24
 800490a:	e7ec      	b.n	80048e6 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 800490c:	880b      	ldrh	r3, [r1, #0]
 800490e:	3524      	adds	r5, #36	; 0x24
 8004910:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004912:	880b      	ldrh	r3, [r1, #0]
 8004914:	b21b      	sxth	r3, r3
 8004916:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004918:	2204      	movs	r2, #4
 800491a:	2120      	movs	r1, #32
 800491c:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800491e:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004920:	f003 fd12 	bl	8008348 <SendMessageToModule>
				break;
 8004924:	e738      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004926:	880b      	ldrh	r3, [r1, #0]
 8004928:	3524      	adds	r5, #36	; 0x24
 800492a:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800492c:	880b      	ldrh	r3, [r1, #0]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	e7f2      	b.n	8004918 <WriteToRemote+0x1fc>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	200067e0 	.word	0x200067e0
 8004938:	07ffffff 	.word	0x07ffffff
 800493c:	20000b20 	.word	0x20000b20
 8004940:	08017834 	.word	0x08017834
 8004944:	08017858 	.word	0x08017858
 8004948:	20000c20 	.word	0x20000c20

0800494c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800494c:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800494e:	2101      	movs	r1, #1
char* GetDateString(void){
 8004950:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 8004952:	201e      	movs	r0, #30
 8004954:	f00e f8d4 	bl	8012b00 <calloc>
 8004958:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 800495a:	4809      	ldr	r0, [pc, #36]	; (8004980 <GetDateString+0x34>)
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <GetDateString+0x38>)
 800495e:	7d02      	ldrb	r2, [r0, #20]
 8004960:	8b05      	ldrh	r5, [r0, #24]
 8004962:	7d83      	ldrb	r3, [r0, #22]
 8004964:	3a01      	subs	r2, #1
 8004966:	9501      	str	r5, [sp, #4]
 8004968:	7d40      	ldrb	r0, [r0, #21]
 800496a:	0092      	lsls	r2, r2, #2
 800496c:	188a      	adds	r2, r1, r2
 800496e:	9000      	str	r0, [sp, #0]
 8004970:	6912      	ldr	r2, [r2, #16]
 8004972:	312c      	adds	r1, #44	; 0x2c
 8004974:	0020      	movs	r0, r4
 8004976:	f00e fd7f 	bl	8013478 <sprintf>
	return buffer;
}
 800497a:	0020      	movs	r0, r4
 800497c:	b003      	add	sp, #12
 800497e:	bd30      	pop	{r4, r5, pc}
 8004980:	20006860 	.word	0x20006860
 8004984:	0801787c 	.word	0x0801787c

08004988 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004988:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800498c:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800498e:	7819      	ldrb	r1, [r3, #0]
 8004990:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004992:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	3b02      	subs	r3, #2
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	3303      	adds	r3, #3
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	000b      	movs	r3, r1
 80049a2:	f003 fcf5 	bl	8008390 <StartScastDMAStream>
}
 80049a6:	b005      	add	sp, #20
 80049a8:	bd00      	pop	{pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000aa0 	.word	0x20000aa0

080049b0 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049b0:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80049b2:	b530      	push	{r4, r5, lr}
 80049b4:	0004      	movs	r4, r0
 80049b6:	000d      	movs	r5, r1
 80049b8:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7fe fecf 	bl	800376c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ce:	1e60      	subs	r0, r4, #1
 80049d0:	00c3      	lsls	r3, r0, #3
 80049d2:	4912      	ldr	r1, [pc, #72]	; (8004a1c <Unbridge+0x6c>)
 80049d4:	1a1b      	subs	r3, r3, r0
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	585b      	ldr	r3, [r3, r1]
 80049da:	1e6a      	subs	r2, r5, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <Unbridge+0x56>
 80049e0:	00d3      	lsls	r3, r2, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049e8:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049ee:	f006 fa4b 	bl	800ae88 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049f2:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049f4:	b007      	add	sp, #28
 80049f6:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049f8:	f006 fa46 	bl	800ae88 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049fc:	0028      	movs	r0, r5
 80049fe:	f006 fa43 	bl	800ae88 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7f6      	b.n	80049f4 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 8004a06:	00d3      	lsls	r3, r2, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	585b      	ldr	r3, [r3, r1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 8004a12:	0028      	movs	r0, r5
 8004a14:	e7eb      	b.n	80049ee <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8004a16:	2068      	movs	r0, #104	; 0x68
 8004a18:	e7ec      	b.n	80049f4 <Unbridge+0x44>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	20002070 	.word	0x20002070

08004a20 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	46d6      	mov	lr, sl
 8004a24:	4646      	mov	r6, r8
 8004a26:	464f      	mov	r7, r9
 8004a28:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a2a:	4e27      	ldr	r6, [pc, #156]	; (8004ac8 <AddSnippet.part.0+0xa8>)
 8004a2c:	4d27      	ldr	r5, [pc, #156]	; (8004acc <AddSnippet.part.0+0xac>)
 8004a2e:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a30:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a32:	3b01      	subs	r3, #1
 8004a34:	009c      	lsls	r4, r3, #2
 8004a36:	18e4      	adds	r4, r4, r3
 8004a38:	00a4      	lsls	r4, r4, #2
 8004a3a:	192c      	adds	r4, r5, r4
 8004a3c:	68e3      	ldr	r3, [r4, #12]
 8004a3e:	469a      	mov	sl, r3
 8004a40:	f7fb fb6a 	bl	8000118 <strlen>
 8004a44:	4653      	mov	r3, sl
 8004a46:	4681      	mov	r9, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02e      	beq.n	8004aaa <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f7fb fb63 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a52:	4649      	mov	r1, r9
 8004a54:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a56:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a58:	1809      	adds	r1, r1, r0
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f00e fb44 	bl	80130e8 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a60:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a62:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0093      	lsls	r3, r2, #2
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	18eb      	adds	r3, r5, r3
 8004a6e:	68d8      	ldr	r0, [r3, #12]
 8004a70:	1c7a      	adds	r2, r7, #1
 8004a72:	1880      	adds	r0, r0, r2
 8004a74:	4641      	mov	r1, r8
 8004a76:	f00e fd3b 	bl	80134f0 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a7a:	7832      	ldrb	r2, [r6, #0]
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0093      	lsls	r3, r2, #2
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	2213      	movs	r2, #19
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	18eb      	adds	r3, r5, r3
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	55da      	strb	r2, [r3, r7]
 8004a8c:	7833      	ldrb	r3, [r6, #0]
 8004a8e:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a90:	0098      	lsls	r0, r3, #2
 8004a92:	18c0      	adds	r0, r0, r3
 8004a94:	0080      	lsls	r0, r0, #2
 8004a96:	1828      	adds	r0, r5, r0
 8004a98:	68c3      	ldr	r3, [r0, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a9e:	2000      	movs	r0, #0
}
 8004aa0:	bc1c      	pop	{r2, r3, r4}
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	46a2      	mov	sl, r4
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f00e f894 	bl	8012bd8 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004ab0:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004ab2:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004ab4:	f00e fd1c 	bl	80134f0 <strcpy>
 8004ab8:	e7f1      	b.n	8004a9e <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004aba:	2214      	movs	r2, #20
 8004abc:	2100      	movs	r1, #0
 8004abe:	f00e fae1 	bl	8013084 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004ac2:	200e      	movs	r0, #14
 8004ac4:	e7ec      	b.n	8004aa0 <AddSnippet.part.0+0x80>
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	200016dc 	.word	0x200016dc
 8004acc:	2000687c 	.word	0x2000687c

08004ad0 <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004ad0:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004ad2:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004ad4:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d00d      	beq.n	8004af6 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004ada:	2603      	movs	r6, #3
 8004adc:	f00e f86e 	bl	8012bbc <__locale_ctype_ptr>
 8004ae0:	1900      	adds	r0, r0, r4
 8004ae2:	7842      	ldrb	r2, [r0, #1]
 8004ae4:	4032      	ands	r2, r6
 8004ae6:	2a01      	cmp	r2, #1
 8004ae8:	d100      	bne.n	8004aec <StringToLowerCase+0x1c>
 8004aea:	3420      	adds	r4, #32
 8004aec:	702c      	strb	r4, [r5, #0]
 8004aee:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004af0:	782c      	ldrb	r4, [r5, #0]
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	d1f2      	bne.n	8004adc <StringToLowerCase+0xc>
}
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afa:	4657      	mov	r7, sl
 8004afc:	464e      	mov	r6, r9
 8004afe:	46de      	mov	lr, fp
 8004b00:	4645      	mov	r5, r8
 8004b02:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b04:	4ed8      	ldr	r6, [pc, #864]	; (8004e68 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004b06:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b08:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004b0a:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b0c:	2c05      	cmp	r4, #5
 8004b0e:	d067      	beq.n	8004be0 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b10:	00a3      	lsls	r3, r4, #2
 8004b12:	4dd6      	ldr	r5, [pc, #856]	; (8004e6c <ParseSnippetCondition+0x374>)
 8004b14:	1918      	adds	r0, r3, r4
 8004b16:	0080      	lsls	r0, r0, #2
 8004b18:	469a      	mov	sl, r3
 8004b1a:	182b      	adds	r3, r5, r0
 8004b1c:	4699      	mov	r9, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b22:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b24:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b26:	1828      	adds	r0, r5, r0
 8004b28:	2204      	movs	r2, #4
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f00e faaa 	bl	8013084 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b30:	783b      	ldrb	r3, [r7, #0]
 8004b32:	2b62      	cmp	r3, #98	; 0x62
 8004b34:	d102      	bne.n	8004b3c <ParseSnippetCondition+0x44>
 8004b36:	78bb      	ldrb	r3, [r7, #2]
 8004b38:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3a:	d057      	beq.n	8004bec <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b3c:	1d33      	adds	r3, r6, #4
 8004b3e:	4698      	mov	r8, r3
 8004b40:	0018      	movs	r0, r3
 8004b42:	0039      	movs	r1, r7
 8004b44:	f00e fcd4 	bl	80134f0 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b48:	4cc9      	ldr	r4, [pc, #804]	; (8004e70 <ParseSnippetCondition+0x378>)
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	0021      	movs	r1, r4
 8004b4e:	f00f fb4f 	bl	80141f0 <strtok>
		secondPart =strtok( NULL," ");
 8004b52:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b54:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b56:	2000      	movs	r0, #0
 8004b58:	f00f fb4a 	bl	80141f0 <strtok>
		thirdPart =strtok( NULL," ");
 8004b5c:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b5e:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b60:	2000      	movs	r0, #0
 8004b62:	f00f fb45 	bl	80141f0 <strtok>
 8004b66:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	d02f      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b6c:	0038      	movs	r0, r7
 8004b6e:	f7fe feff 	bl	8003970 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b72:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b74:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b76:	d036      	beq.n	8004be6 <ParseSnippetCondition+0xee>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	d025      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b80:	0020      	movs	r0, r4
 8004b82:	f7fe fef5 	bl	8003970 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d06b      	beq.n	8004c62 <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	7833      	ldrb	r3, [r6, #0]
 8004b8e:	009c      	lsls	r4, r3, #2
 8004b90:	4699      	mov	r9, r3
 8004b92:	18e3      	adds	r3, r4, r3
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b98:	18eb      	adds	r3, r5, r3
 8004b9a:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b9c:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f7fe fef2 	bl	8003988 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba4:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004ba6:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba8:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004baa:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bac:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bae:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bb0:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bb2:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bb4:	18ed      	adds	r5, r5, r3
 8004bb6:	786b      	ldrb	r3, [r5, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004bbc:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	e004      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d100      	bne.n	8004bcc <ParseSnippetCondition+0xd4>
 8004bca:	e07f      	b.n	8004ccc <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bcc:	2367      	movs	r3, #103	; 0x67
 8004bce:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	b00b      	add	sp, #44	; 0x2c
 8004bd4:	bc3c      	pop	{r2, r3, r4, r5}
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	46a2      	mov	sl, r4
 8004bdc:	46ab      	mov	fp, r5
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004be0:	230e      	movs	r3, #14
 8004be2:	4698      	mov	r8, r3
 8004be4:	e7f4      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1c8      	bne.n	8004b7c <ParseSnippetCondition+0x84>
 8004bea:	e7ef      	b.n	8004bcc <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	3b30      	subs	r3, #48	; 0x30
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bf8:	465b      	mov	r3, fp
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d8e8      	bhi.n	8004bd0 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bfe:	4649      	mov	r1, r9
 8004c00:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004c02:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004c04:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004c06:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004c08:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	4999      	ldr	r1, [pc, #612]	; (8004e74 <ParseSnippetCondition+0x37c>)
 8004c0e:	0018      	movs	r0, r3
 8004c10:	9307      	str	r3, [sp, #28]
 8004c12:	f00e fc75 	bl	8013500 <strncmp>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d03d      	beq.n	8004c96 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004c1a:	220e      	movs	r2, #14
 8004c1c:	4996      	ldr	r1, [pc, #600]	; (8004e78 <ParseSnippetCondition+0x380>)
 8004c1e:	9807      	ldr	r0, [sp, #28]
 8004c20:	f00e fc6e 	bl	8013500 <strncmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d15e      	bne.n	8004ce6 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c28:	2306      	movs	r3, #6
 8004c2a:	464a      	mov	r2, r9
 8004c2c:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c2e:	465b      	mov	r3, fp
 8004c30:	00da      	lsls	r2, r3, #3
 8004c32:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004c34:	445a      	add	r2, fp
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	7a1b      	ldrb	r3, [r3, #8]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	d40e      	bmi.n	8004c5c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c3e:	2301      	movs	r3, #1
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	4643      	mov	r3, r8
 8004c44:	2201      	movs	r2, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	2300      	movs	r3, #0
 8004c54:	4658      	mov	r0, fp
 8004c56:	f006 ff05 	bl	800ba64 <SetButtonEvents>
 8004c5a:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c5c:	3401      	adds	r4, #1
 8004c5e:	7034      	strb	r4, [r6, #0]
 8004c60:	e7b6      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c62:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c64:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c66:	0093      	lsls	r3, r2, #2
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c70:	18eb      	adds	r3, r5, r3
 8004c72:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c74:	f00d ff32 	bl	8012adc <atof>
 8004c78:	f7fe f8b8 	bl	8002dec <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c7c:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c7e:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c80:	009c      	lsls	r4, r3, #2
 8004c82:	18e0      	adds	r0, r4, r3
 8004c84:	0080      	lsls	r0, r0, #2
 8004c86:	3006      	adds	r0, #6
 8004c88:	1828      	adds	r0, r5, r0
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	a909      	add	r1, sp, #36	; 0x24
 8004c8e:	4699      	mov	r9, r3
 8004c90:	f00e f9ef 	bl	8013072 <memcpy>
 8004c94:	e783      	b.n	8004b9e <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c96:	2305      	movs	r3, #5
 8004c98:	4649      	mov	r1, r9
 8004c9a:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	4b77      	ldr	r3, [pc, #476]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	445a      	add	r2, fp
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	7a1b      	ldrb	r3, [r3, #8]
 8004caa:	421a      	tst	r2, r3
 8004cac:	d1d6      	bne.n	8004c5c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	4643      	mov	r3, r8
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	9304      	str	r3, [sp, #16]
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	9302      	str	r3, [sp, #8]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f006 fece 	bl	800ba64 <SetButtonEvents>
 8004cc8:	7834      	ldrb	r4, [r6, #0]
 8004cca:	e7c7      	b.n	8004c5c <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ccc:	2102      	movs	r1, #2
 8004cce:	7832      	ldrb	r2, [r6, #0]
 8004cd0:	0093      	lsls	r3, r2, #2
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cd8:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cda:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cdc:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cde:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ce0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004ce2:	4698      	mov	r8, r3
 8004ce4:	e774      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	4965      	ldr	r1, [pc, #404]	; (8004e80 <ParseSnippetCondition+0x388>)
 8004cea:	9807      	ldr	r0, [sp, #28]
 8004cec:	f00e fc08 	bl	8013500 <strncmp>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d131      	bne.n	8004d58 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004cfa:	445a      	add	r2, fp
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	789a      	ldrb	r2, [r3, #2]
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d063      	beq.n	8004dcc <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004d04:	78da      	ldrb	r2, [r3, #3]
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d07d      	beq.n	8004e06 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d0a:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004d0c:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d0e:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1a3      	bne.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d14:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d16:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d18:	4453      	add	r3, sl
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	18eb      	adds	r3, r5, r3
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d22:	300f      	adds	r0, #15
 8004d24:	f00d fedf 	bl	8012ae6 <atoi>
 8004d28:	7832      	ldrb	r2, [r6, #0]
 8004d2a:	b2c0      	uxtb	r0, r0
 8004d2c:	0093      	lsls	r3, r2, #2
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d34:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d36:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	9302      	str	r3, [sp, #8]
 8004d46:	9001      	str	r0, [sp, #4]
 8004d48:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f006 fe8a 	bl	800ba64 <SetButtonEvents>
					status =BOS_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	7834      	ldrb	r4, [r6, #0]
 8004d54:	4698      	mov	r8, r3
 8004d56:	e781      	b.n	8004c5c <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d58:	220d      	movs	r2, #13
 8004d5a:	494a      	ldr	r1, [pc, #296]	; (8004e84 <ParseSnippetCondition+0x38c>)
 8004d5c:	9807      	ldr	r0, [sp, #28]
 8004d5e:	f00e fbcf 	bl	8013500 <strncmp>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d000      	beq.n	8004d68 <ParseSnippetCondition+0x270>
 8004d66:	e779      	b.n	8004c5c <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d68:	465b      	mov	r3, fp
 8004d6a:	4a44      	ldr	r2, [pc, #272]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004d6c:	00d9      	lsls	r1, r3, #3
 8004d6e:	18cb      	adds	r3, r1, r3
 8004d70:	18d3      	adds	r3, r2, r3
 8004d72:	7958      	ldrb	r0, [r3, #5]
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d05e      	beq.n	8004e36 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d78:	799b      	ldrb	r3, [r3, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d100      	bne.n	8004d80 <ParseSnippetCondition+0x288>
 8004d7e:	e083      	b.n	8004e88 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d80:	4459      	add	r1, fp
 8004d82:	1852      	adds	r2, r2, r1
 8004d84:	79d3      	ldrb	r3, [r2, #7]
 8004d86:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d88:	230d      	movs	r3, #13
 8004d8a:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d000      	beq.n	8004d94 <ParseSnippetCondition+0x29c>
 8004d92:	e763      	b.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d94:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d96:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d98:	4698      	mov	r8, r3
 8004d9a:	435c      	muls	r4, r3
 8004d9c:	3b06      	subs	r3, #6
 8004d9e:	192c      	adds	r4, r5, r4
 8004da0:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004da2:	3010      	adds	r0, #16
 8004da4:	f00d fe9f 	bl	8012ae6 <atoi>
 8004da8:	4642      	mov	r2, r8
 8004daa:	7833      	ldrb	r3, [r6, #0]
 8004dac:	b2c0      	uxtb	r0, r0
 8004dae:	4353      	muls	r3, r2
 8004db0:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004db2:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004db4:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004db6:	9305      	str	r3, [sp, #20]
 8004db8:	464b      	mov	r3, r9
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	9302      	str	r3, [sp, #8]
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9004      	str	r0, [sp, #16]
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	0019      	movs	r1, r3
 8004dca:	e7be      	b.n	8004d4a <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dcc:	2309      	movs	r3, #9
 8004dce:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd0:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dd2:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd4:	300f      	adds	r0, #15
 8004dd6:	f00d fe86 	bl	8012ae6 <atoi>
 8004dda:	7831      	ldrb	r1, [r6, #0]
 8004ddc:	b2c3      	uxtb	r3, r0
 8004dde:	008a      	lsls	r2, r1, #2
 8004de0:	1852      	adds	r2, r2, r1
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004de6:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004de8:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dea:	9205      	str	r2, [sp, #20]
 8004dec:	4642      	mov	r2, r8
 8004dee:	9204      	str	r2, [sp, #16]
 8004df0:	9203      	str	r2, [sp, #12]
 8004df2:	9202      	str	r2, [sp, #8]
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f006 fe31 	bl	800ba64 <SetButtonEvents>
 8004e02:	7834      	ldrb	r4, [r6, #0]
 8004e04:	e72a      	b.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e06:	230a      	movs	r3, #10
 8004e08:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e0c:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0e:	300f      	adds	r0, #15
 8004e10:	f00d fe69 	bl	8012ae6 <atoi>
 8004e14:	7832      	ldrb	r2, [r6, #0]
 8004e16:	b2c0      	uxtb	r0, r0
 8004e18:	0093      	lsls	r3, r2, #2
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e20:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e22:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	4643      	mov	r3, r8
 8004e28:	9000      	str	r0, [sp, #0]
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e32:	2300      	movs	r3, #0
 8004e34:	e7e0      	b.n	8004df8 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e36:	230c      	movs	r3, #12
 8004e38:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e3c:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3e:	3010      	adds	r0, #16
 8004e40:	f00d fe51 	bl	8012ae6 <atoi>
 8004e44:	7832      	ldrb	r2, [r6, #0]
 8004e46:	b2c0      	uxtb	r0, r0
 8004e48:	0093      	lsls	r3, r2, #2
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e50:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e52:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e54:	9305      	str	r3, [sp, #20]
 8004e56:	4643      	mov	r3, r8
 8004e58:	9002      	str	r0, [sp, #8]
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	9303      	str	r3, [sp, #12]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2300      	movs	r3, #0
 8004e64:	e7c8      	b.n	8004df8 <ParseSnippetCondition+0x300>
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	200016dc 	.word	0x200016dc
 8004e6c:	2000687c 	.word	0x2000687c
 8004e70:	08018160 	.word	0x08018160
 8004e74:	08018ef4 	.word	0x08018ef4
 8004e78:	08018728 	.word	0x08018728
 8004e7c:	200023bc 	.word	0x200023bc
 8004e80:	08018738 	.word	0x08018738
 8004e84:	08018748 	.word	0x08018748
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e88:	0023      	movs	r3, r4
 8004e8a:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e8c:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e8e:	4453      	add	r3, sl
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18eb      	adds	r3, r5, r3
 8004e94:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e96:	3010      	adds	r0, #16
 8004e98:	f00d fe25 	bl	8012ae6 <atoi>
 8004e9c:	7832      	ldrb	r2, [r6, #0]
 8004e9e:	b2c0      	uxtb	r0, r0
 8004ea0:	0093      	lsls	r3, r2, #2
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004ea8:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004eaa:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004eac:	9305      	str	r3, [sp, #20]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9003      	str	r0, [sp, #12]
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	9302      	str	r3, [sp, #8]
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	e744      	b.n	8004d4a <ParseSnippetCondition+0x252>

08004ec0 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	46de      	mov	lr, fp
 8004ec4:	4657      	mov	r7, sl
 8004ec6:	4645      	mov	r5, r8
 8004ec8:	464e      	mov	r6, r9
 8004eca:	468a      	mov	sl, r1
 8004ecc:	b5e0      	push	{r5, r6, r7, lr}
 8004ece:	b08b      	sub	sp, #44	; 0x2c
 8004ed0:	9002      	str	r0, [sp, #8]
 8004ed2:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2209      	movs	r2, #9
 8004ed8:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004eda:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004edc:	f00e f8d2 	bl	8013084 <memset>
 8004ee0:	4bcd      	ldr	r3, [pc, #820]	; (8005218 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ee6:	4bcd      	ldr	r3, [pc, #820]	; (800521c <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ee8:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004eea:	469b      	mov	fp, r3
 8004eec:	e02d      	b.n	8004f4a <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004eee:	2206      	movs	r2, #6
 8004ef0:	49cb      	ldr	r1, [pc, #812]	; (8005220 <CLI_CommandParser+0x360>)
 8004ef2:	0028      	movs	r0, r5
 8004ef4:	f00e fb04 	bl	8013500 <strncmp>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d057      	beq.n	8004fac <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004efc:	2f02      	cmp	r7, #2
 8004efe:	d100      	bne.n	8004f02 <CLI_CommandParser+0x42>
 8004f00:	e0d2      	b.n	80050a8 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004f02:	212e      	movs	r1, #46	; 0x2e
 8004f04:	0028      	movs	r0, r5
 8004f06:	f00e fae5 	bl	80134d4 <strchr>
 8004f0a:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004f0c:	d007      	beq.n	8004f1e <CLI_CommandParser+0x5e>
 8004f0e:	3803      	subs	r0, #3
 8004f10:	2203      	movs	r2, #3
 8004f12:	4659      	mov	r1, fp
 8004f14:	f00e faf4 	bl	8013500 <strncmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d000      	beq.n	8004f1e <CLI_CommandParser+0x5e>
 8004f1c:	e079      	b.n	8005012 <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f1e:	2299      	movs	r2, #153	; 0x99
 8004f20:	0021      	movs	r1, r4
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0028      	movs	r0, r5
 8004f26:	f008 fbe1 	bl	800d6ec <FreeRTOS_CLIProcessCommand>
 8004f2a:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f2c:	7823      	ldrb	r3, [r4, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d139      	bne.n	8004fa6 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f32:	0020      	movs	r0, r4
 8004f34:	f7fb f8f0 	bl	8000118 <strlen>
 8004f38:	2100      	movs	r1, #0
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	0020      	movs	r0, r4
 8004f3e:	f00e f8a1 	bl	8013084 <memset>
	} while(xReturned != pdFALSE);
 8004f42:	4653      	mov	r3, sl
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d100      	bne.n	8004f4a <CLI_CommandParser+0x8a>
 8004f48:	e1d0      	b.n	80052ec <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	f7ff fdc0 	bl	8004ad0 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f50:	2336      	movs	r3, #54	; 0x36
 8004f52:	4699      	mov	r9, r3
 8004f54:	4643      	mov	r3, r8
 8004f56:	464a      	mov	r2, r9
 8004f58:	5c9f      	ldrb	r7, [r3, r2]
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	d1c7      	bne.n	8004eee <CLI_CommandParser+0x2e>
 8004f5e:	3a33      	subs	r2, #51	; 0x33
 8004f60:	49b0      	ldr	r1, [pc, #704]	; (8005224 <CLI_CommandParser+0x364>)
 8004f62:	0028      	movs	r0, r5
 8004f64:	f00e facc 	bl	8013500 <strncmp>
 8004f68:	1e07      	subs	r7, r0, #0
 8004f6a:	d1ca      	bne.n	8004f02 <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f6c:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f6e:	f7ff fdc3 	bl	8004af8 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d000      	beq.n	8004f78 <CLI_CommandParser+0xb8>
 8004f76:	e09f      	b.n	80050b8 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f80:	330b      	adds	r3, #11
 8004f82:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	d027      	beq.n	8004fd8 <CLI_CommandParser+0x118>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f8c:	0020      	movs	r0, r4
 8004f8e:	f7fb f8c3 	bl	8000118 <strlen>
 8004f92:	2301      	movs	r3, #1
 8004f94:	425b      	negs	r3, r3
 8004f96:	b282      	uxth	r2, r0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	0021      	movs	r1, r4
 8004f9c:	3333      	adds	r3, #51	; 0x33
 8004f9e:	9802      	ldr	r0, [sp, #8]
 8004fa0:	f008 f97a 	bl	800d298 <writePxMutex>
 8004fa4:	e7c5      	b.n	8004f32 <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d0c3      	beq.n	8004f32 <CLI_CommandParser+0x72>
 8004faa:	e7ef      	b.n	8004f8c <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004fac:	4643      	mov	r3, r8
 8004fae:	464a      	mov	r2, r9
 8004fb0:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0093      	lsls	r3, r2, #2
 8004fb8:	189b      	adds	r3, r3, r2
 8004fba:	4a9b      	ldr	r2, [pc, #620]	; (8005228 <CLI_CommandParser+0x368>)
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fc4:	f004 fe1a 	bl	8009bfc <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fc8:	2241      	movs	r2, #65	; 0x41
 8004fca:	4998      	ldr	r1, [pc, #608]	; (800522c <CLI_CommandParser+0x36c>)
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f00e f850 	bl	8013072 <memcpy>
 8004fd2:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1d5      	bne.n	8004f84 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f7fb f89d 	bl	8000118 <strlen>
 8004fde:	2100      	movs	r1, #0
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	0020      	movs	r0, r4
 8004fe4:	46b2      	mov	sl, r6
 8004fe6:	f00e f84d 	bl	8013084 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fea:	2209      	movs	r2, #9
 8004fec:	2100      	movs	r1, #0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f00e f848 	bl	8013084 <memset>
	if(!recordSnippet && enableOutput)
 8004ff4:	2336      	movs	r3, #54	; 0x36
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <CLI_CommandParser+0x144>
 8004ffe:	4653      	mov	r3, sl
 8005000:	2b00      	cmp	r3, #0
 8005002:	d16a      	bne.n	80050da <CLI_CommandParser+0x21a>
}
 8005004:	b00b      	add	sp, #44	; 0x2c
 8005006:	bc3c      	pop	{r2, r3, r4, r5}
 8005008:	4690      	mov	r8, r2
 800500a:	4699      	mov	r9, r3
 800500c:	46a2      	mov	sl, r4
 800500e:	46ab      	mov	fp, r5
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005012:	f00d fdd3 	bl	8012bbc <__locale_ctype_ptr>
 8005016:	787b      	ldrb	r3, [r7, #1]
 8005018:	18c0      	adds	r0, r0, r3
 800501a:	7843      	ldrb	r3, [r0, #1]
 800501c:	075b      	lsls	r3, r3, #29
 800501e:	d500      	bpl.n	8005022 <CLI_CommandParser+0x162>
 8005020:	e77d      	b.n	8004f1e <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005022:	1b7a      	subs	r2, r7, r5
 8005024:	0029      	movs	r1, r5
 8005026:	a807      	add	r0, sp, #28
 8005028:	f00e fa7b 	bl	8013522 <strncpy>
				id =GetID(idString);
 800502c:	a807      	add	r0, sp, #28
 800502e:	f7ff fa1d 	bl	800446c <GetID>
				if(id == myID){
 8005032:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005034:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	4298      	cmp	r0, r3
 800503c:	d057      	beq.n	80050ee <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d100      	bne.n	8005046 <CLI_CommandParser+0x186>
 8005044:	e0da      	b.n	80051fc <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	2b66      	cmp	r3, #102	; 0x66
 800504a:	d100      	bne.n	800504e <CLI_CommandParser+0x18e>
 800504c:	e0dd      	b.n	800520a <CLI_CommandParser+0x34a>
 800504e:	1c7b      	adds	r3, r7, #1
 8005050:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	2bff      	cmp	r3, #255	; 0xff
 8005056:	d100      	bne.n	800505a <CLI_CommandParser+0x19a>
 8005058:	e08b      	b.n	8005172 <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 800505a:	466b      	mov	r3, sp
 800505c:	7b1b      	ldrb	r3, [r3, #12]
 800505e:	4699      	mov	r9, r3
 8005060:	2bfe      	cmp	r3, #254	; 0xfe
 8005062:	d100      	bne.n	8005066 <CLI_CommandParser+0x1a6>
 8005064:	e102      	b.n	800526c <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005066:	2206      	movs	r2, #6
 8005068:	4972      	ldr	r1, [pc, #456]	; (8005234 <CLI_CommandParser+0x374>)
 800506a:	9804      	ldr	r0, [sp, #16]
 800506c:	f00e fa48 	bl	8013500 <strncmp>
 8005070:	2800      	cmp	r0, #0
 8005072:	d144      	bne.n	80050fe <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005074:	4b70      	ldr	r3, [pc, #448]	; (8005238 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005076:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005078:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 800507a:	2119      	movs	r1, #25
 800507c:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800507e:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8005080:	f003 f962 	bl	8008348 <SendMessageToModule>
						osDelay(100);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f008 faa1 	bl	800d5cc <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <CLI_CommandParser+0x37c>)
 800508c:	4649      	mov	r1, r9
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	4b67      	ldr	r3, [pc, #412]	; (8005230 <CLI_CommandParser+0x370>)
 8005092:	7818      	ldrb	r0, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	f004 fed5 	bl	8009e44 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800509a:	4653      	mov	r3, sl
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b60      	cmp	r3, #96	; 0x60
 80050a0:	d100      	bne.n	80050a4 <CLI_CommandParser+0x1e4>
 80050a2:	e095      	b.n	80051d0 <CLI_CommandParser+0x310>
 80050a4:	7823      	ldrb	r3, [r4, #0]
 80050a6:	e795      	b.n	8004fd4 <CLI_CommandParser+0x114>
 80050a8:	0028      	movs	r0, r5
 80050aa:	f7ff fcb9 	bl	8004a20 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d10c      	bne.n	80050cc <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 80050b2:	230d      	movs	r3, #13
 80050b4:	7023      	strb	r3, [r4, #0]
 80050b6:	e765      	b.n	8004f84 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b8:	2252      	movs	r2, #82	; 0x52
 80050ba:	4961      	ldr	r1, [pc, #388]	; (8005240 <CLI_CommandParser+0x380>)
 80050bc:	0020      	movs	r0, r4
 80050be:	f00d ffd8 	bl	8013072 <memcpy>
				recordSnippet =0;
 80050c2:	4643      	mov	r3, r8
 80050c4:	464a      	mov	r2, r9
 80050c6:	549f      	strb	r7, [r3, r2]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	e783      	b.n	8004fd4 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050cc:	2252      	movs	r2, #82	; 0x52
 80050ce:	495c      	ldr	r1, [pc, #368]	; (8005240 <CLI_CommandParser+0x380>)
 80050d0:	0020      	movs	r0, r4
 80050d2:	f00d ffce 	bl	8013072 <memcpy>
 80050d6:	7823      	ldrb	r3, [r4, #0]
 80050d8:	e77c      	b.n	8004fd4 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050da:	2301      	movs	r3, #1
 80050dc:	425b      	negs	r3, r3
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2238      	movs	r2, #56	; 0x38
 80050e2:	3333      	adds	r3, #51	; 0x33
 80050e4:	4957      	ldr	r1, [pc, #348]	; (8005244 <CLI_CommandParser+0x384>)
 80050e6:	9802      	ldr	r0, [sp, #8]
 80050e8:	f008 f8d6 	bl	800d298 <writePxMutex>
}
 80050ec:	e78a      	b.n	8005004 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050ee:	2299      	movs	r2, #153	; 0x99
 80050f0:	1c78      	adds	r0, r7, #1
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	0021      	movs	r1, r4
 80050f6:	f008 faf9 	bl	800d6ec <FreeRTOS_CLIProcessCommand>
 80050fa:	4682      	mov	sl, r0
 80050fc:	e716      	b.n	8004f2c <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050fe:	0028      	movs	r0, r5
 8005100:	f7fb f80a 	bl	8000118 <strlen>
 8005104:	0007      	movs	r7, r0
 8005106:	a807      	add	r0, sp, #28
 8005108:	f7fb f806 	bl	8000118 <strlen>
 800510c:	4682      	mov	sl, r0
 800510e:	1e7a      	subs	r2, r7, #1
 8005110:	1a12      	subs	r2, r2, r0
 8005112:	9904      	ldr	r1, [sp, #16]
 8005114:	484c      	ldr	r0, [pc, #304]	; (8005248 <CLI_CommandParser+0x388>)
 8005116:	f00e fa04 	bl	8013522 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 800511a:	0028      	movs	r0, r5
 800511c:	f7fa fffc 	bl	8000118 <strlen>
 8005120:	4653      	mov	r3, sl
 8005122:	3801      	subs	r0, #1
 8005124:	1ac2      	subs	r2, r0, r3
 8005126:	b292      	uxth	r2, r2
 8005128:	2117      	movs	r1, #23
 800512a:	4648      	mov	r0, r9
 800512c:	f003 f90c 	bl	8008348 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005130:	9a03      	ldr	r2, [sp, #12]
 8005132:	4946      	ldr	r1, [pc, #280]	; (800524c <CLI_CommandParser+0x38c>)
 8005134:	0020      	movs	r0, r4
 8005136:	f00e f99f 	bl	8013478 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800513a:	7823      	ldrb	r3, [r4, #0]
 800513c:	0020      	movs	r0, r4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <CLI_CommandParser+0x29e>
 8005142:	f7fa ffe9 	bl	8000118 <strlen>
 8005146:	0002      	movs	r2, r0
 8005148:	2e00      	cmp	r6, #0
 800514a:	d00b      	beq.n	8005164 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800514c:	2301      	movs	r3, #1
 800514e:	b282      	uxth	r2, r0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0021      	movs	r1, r4
 8005154:	3331      	adds	r3, #49	; 0x31
 8005156:	9802      	ldr	r0, [sp, #8]
 8005158:	f008 f89e 	bl	800d298 <writePxMutex>
 800515c:	0020      	movs	r0, r4
 800515e:	f7fa ffdb 	bl	8000118 <strlen>
 8005162:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005164:	2100      	movs	r1, #0
 8005166:	0020      	movs	r0, r4
 8005168:	f00d ff8c 	bl	8013084 <memset>
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <CLI_CommandParser+0x378>)
 800516e:	469a      	mov	sl, r3
 8005170:	e793      	b.n	800509a <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005172:	221a      	movs	r2, #26
 8005174:	2100      	movs	r1, #0
 8005176:	4836      	ldr	r0, [pc, #216]	; (8005250 <CLI_CommandParser+0x390>)
 8005178:	f00d ff84 	bl	8013084 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800517c:	0028      	movs	r0, r5
 800517e:	f7fa ffcb 	bl	8000118 <strlen>
 8005182:	0007      	movs	r7, r0
 8005184:	a807      	add	r0, sp, #28
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	4681      	mov	r9, r0
 800518c:	3f01      	subs	r7, #1
 800518e:	1a3a      	subs	r2, r7, r0
 8005190:	9f04      	ldr	r7, [sp, #16]
 8005192:	482d      	ldr	r0, [pc, #180]	; (8005248 <CLI_CommandParser+0x388>)
 8005194:	0039      	movs	r1, r7
 8005196:	f00e f9c4 	bl	8013522 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800519a:	0028      	movs	r0, r5
 800519c:	f7fa ffbc 	bl	8000118 <strlen>
 80051a0:	464b      	mov	r3, r9
 80051a2:	1ac3      	subs	r3, r0, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2217      	movs	r2, #23
 80051a8:	21ff      	movs	r1, #255	; 0xff
 80051aa:	9805      	ldr	r0, [sp, #20]
 80051ac:	f003 f886 	bl	80082bc <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80051b0:	2299      	movs	r2, #153	; 0x99
 80051b2:	0021      	movs	r1, r4
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	0038      	movs	r0, r7
 80051b8:	f008 fa98 	bl	800d6ec <FreeRTOS_CLIProcessCommand>
 80051bc:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051be:	0020      	movs	r0, r4
 80051c0:	f7fa ffaa 	bl	8000118 <strlen>
 80051c4:	221d      	movs	r2, #29
 80051c6:	1820      	adds	r0, r4, r0
 80051c8:	4922      	ldr	r1, [pc, #136]	; (8005254 <CLI_CommandParser+0x394>)
 80051ca:	f00d ff52 	bl	8013072 <memcpy>
 80051ce:	e6ad      	b.n	8004f2c <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051d0:	21fa      	movs	r1, #250	; 0xfa
 80051d2:	2001      	movs	r0, #1
 80051d4:	0089      	lsls	r1, r1, #2
 80051d6:	f009 fcb1 	bl	800eb3c <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <CLI_CommandParser+0x398>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d100      	bne.n	80051e4 <CLI_CommandParser+0x324>
 80051e2:	e75f      	b.n	80050a4 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051e6:	491e      	ldr	r1, [pc, #120]	; (8005260 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051e8:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051ea:	0020      	movs	r0, r4
							++timedoutMsg;
 80051ec:	3301      	adds	r3, #1
 80051ee:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	0022      	movs	r2, r4
 80051f4:	f00e f940 	bl	8013478 <sprintf>
 80051f8:	7823      	ldrb	r3, [r4, #0]
 80051fa:	e6eb      	b.n	8004fd4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051fc:	2227      	movs	r2, #39	; 0x27
 80051fe:	4919      	ldr	r1, [pc, #100]	; (8005264 <CLI_CommandParser+0x3a4>)
 8005200:	0020      	movs	r0, r4
 8005202:	f00d ff36 	bl	8013072 <memcpy>
 8005206:	7823      	ldrb	r3, [r4, #0]
 8005208:	e6e4      	b.n	8004fd4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800520a:	2225      	movs	r2, #37	; 0x25
 800520c:	4916      	ldr	r1, [pc, #88]	; (8005268 <CLI_CommandParser+0x3a8>)
 800520e:	0020      	movs	r0, r4
 8005210:	f00d ff2f 	bl	8013072 <memcpy>
 8005214:	7823      	ldrb	r3, [r4, #0]
 8005216:	e6dd      	b.n	8004fd4 <CLI_CommandParser+0x114>
 8005218:	200016dc 	.word	0x200016dc
 800521c:	080187fc 	.word	0x080187fc
 8005220:	080187b0 	.word	0x080187b0
 8005224:	08018758 	.word	0x08018758
 8005228:	2000687c 	.word	0x2000687c
 800522c:	080187b8 	.word	0x080187b8
 8005230:	20000aa0 	.word	0x20000aa0
 8005234:	0801889c 	.word	0x0801889c
 8005238:	200067e0 	.word	0x200067e0
 800523c:	20000c30 	.word	0x20000c30
 8005240:	0801875c 	.word	0x0801875c
 8005244:	080188e8 	.word	0x080188e8
 8005248:	20000b44 	.word	0x20000b44
 800524c:	080188a4 	.word	0x080188a4
 8005250:	20000db0 	.word	0x20000db0
 8005254:	08018850 	.word	0x08018850
 8005258:	20000c44 	.word	0x20000c44
 800525c:	20001fac 	.word	0x20001fac
 8005260:	080188c8 	.word	0x080188c8
 8005264:	08018800 	.word	0x08018800
 8005268:	08018828 	.word	0x08018828
					group =id >> 8;
 800526c:	4640      	mov	r0, r8
 800526e:	2237      	movs	r2, #55	; 0x37
 8005270:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005272:	2100      	movs	r1, #0
					group =id >> 8;
 8005274:	121f      	asrs	r7, r3, #8
 8005276:	b2fb      	uxtb	r3, r7
 8005278:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800527a:	3a1d      	subs	r2, #29
 800527c:	481c      	ldr	r0, [pc, #112]	; (80052f0 <CLI_CommandParser+0x430>)
					group =id >> 8;
 800527e:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005280:	f00d ff00 	bl	8013084 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005284:	0028      	movs	r0, r5
 8005286:	f7fa ff47 	bl	8000118 <strlen>
 800528a:	0007      	movs	r7, r0
 800528c:	a807      	add	r0, sp, #28
 800528e:	f7fa ff43 	bl	8000118 <strlen>
 8005292:	4681      	mov	r9, r0
 8005294:	3f01      	subs	r7, #1
 8005296:	1a3a      	subs	r2, r7, r0
 8005298:	9904      	ldr	r1, [sp, #16]
 800529a:	4816      	ldr	r0, [pc, #88]	; (80052f4 <CLI_CommandParser+0x434>)
 800529c:	f00e f941 	bl	8013522 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80052a0:	0028      	movs	r0, r5
 80052a2:	f7fa ff39 	bl	8000118 <strlen>
 80052a6:	464f      	mov	r7, r9
 80052a8:	1bc3      	subs	r3, r0, r7
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2217      	movs	r2, #23
 80052ae:	9903      	ldr	r1, [sp, #12]
 80052b0:	9805      	ldr	r0, [sp, #20]
 80052b2:	f003 f803 	bl	80082bc <BroadcastMessage>
					if(InGroup(myID,group))
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <CLI_CommandParser+0x438>)
 80052b8:	4a10      	ldr	r2, [pc, #64]	; (80052fc <CLI_CommandParser+0x43c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4641      	mov	r1, r8
 80052be:	3b01      	subs	r3, #1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	5a9b      	ldrh	r3, [r3, r2]
 80052c4:	2237      	movs	r2, #55	; 0x37
 80052c6:	5c8a      	ldrb	r2, [r1, r2]
 80052c8:	4113      	asrs	r3, r2
 80052ca:	07db      	lsls	r3, r3, #31
 80052cc:	d406      	bmi.n	80052dc <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052ce:	ab07      	add	r3, sp, #28
 80052d0:	0022      	movs	r2, r4
 80052d2:	490b      	ldr	r1, [pc, #44]	; (8005300 <CLI_CommandParser+0x440>)
 80052d4:	0020      	movs	r0, r4
 80052d6:	f00e f8cf 	bl	8013478 <sprintf>
 80052da:	e627      	b.n	8004f2c <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052dc:	2299      	movs	r2, #153	; 0x99
 80052de:	0021      	movs	r1, r4
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	9804      	ldr	r0, [sp, #16]
 80052e4:	f008 fa02 	bl	800d6ec <FreeRTOS_CLIProcessCommand>
 80052e8:	4682      	mov	sl, r0
 80052ea:	e7f0      	b.n	80052ce <CLI_CommandParser+0x40e>
 80052ec:	46b2      	mov	sl, r6
 80052ee:	e67c      	b.n	8004fea <CLI_CommandParser+0x12a>
 80052f0:	20000db0 	.word	0x20000db0
 80052f4:	20000b44 	.word	0x20000b44
 80052f8:	20000aa0 	.word	0x20000aa0
 80052fc:	20000aa4 	.word	0x20000aa4
 8005300:	08018870 	.word	0x08018870

08005304 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005306:	46de      	mov	lr, fp
 8005308:	4645      	mov	r5, r8
 800530a:	4657      	mov	r7, sl
 800530c:	464e      	mov	r6, r9
 800530e:	b5e0      	push	{r5, r6, r7, lr}
 8005310:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 8005312:	ab02      	add	r3, sp, #8
 8005314:	469c      	mov	ip, r3
 8005316:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005318:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 800531a:	2300      	movs	r3, #0
 800531c:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800531e:	4249      	negs	r1, r1
 8005320:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005322:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005324:	f009 fc0a 	bl	800eb3c <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005328:	f008 fa58 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800532c:	23e1      	movs	r3, #225	; 0xe1
 800532e:	4a50      	ldr	r2, [pc, #320]	; (8005470 <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005330:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	429a      	cmp	r2, r3
 8005338:	d100      	bne.n	800533c <prvCLITask+0x38>
 800533a:	e094      	b.n	8005466 <prvCLITask+0x162>
 800533c:	4b4d      	ldr	r3, [pc, #308]	; (8005474 <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800533e:	2401      	movs	r4, #1
 8005340:	001e      	movs	r6, r3
 8005342:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 8005344:	428c      	cmp	r4, r1
 8005346:	d005      	beq.n	8005354 <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005348:	21e1      	movs	r1, #225	; 0xe1
 800534a:	0020      	movs	r0, r4
 800534c:	0309      	lsls	r1, r1, #12
 800534e:	f007 fff5 	bl	800d33c <UpdateBaudrate>
 8005352:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005354:	3401      	adds	r4, #1
 8005356:	b2e4      	uxtb	r4, r4
 8005358:	2c06      	cmp	r4, #6
 800535a:	d1f3      	bne.n	8005344 <prvCLITask+0x40>
 800535c:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800535e:	4846      	ldr	r0, [pc, #280]	; (8005478 <prvCLITask+0x174>)
 8005360:	4b46      	ldr	r3, [pc, #280]	; (800547c <prvCLITask+0x178>)
 8005362:	0004      	movs	r4, r0
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	3438      	adds	r4, #56	; 0x38
 8005368:	0053      	lsls	r3, r2, #1
 800536a:	189b      	adds	r3, r3, r2
 800536c:	4a44      	ldr	r2, [pc, #272]	; (8005480 <prvCLITask+0x17c>)
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	189b      	adds	r3, r3, r2
 8005372:	4a44      	ldr	r2, [pc, #272]	; (8005484 <prvCLITask+0x180>)
 8005374:	4683      	mov	fp, r0
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	0020      	movs	r0, r4
 800537a:	9100      	str	r1, [sp, #0]
 800537c:	4942      	ldr	r1, [pc, #264]	; (8005488 <prvCLITask+0x184>)
 800537e:	f00e f87b 	bl	8013478 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005382:	464b      	mov	r3, r9
 8005384:	22a4      	movs	r2, #164	; 0xa4
 8005386:	4941      	ldr	r1, [pc, #260]	; (800548c <prvCLITask+0x188>)
 8005388:	0092      	lsls	r2, r2, #2
 800538a:	7818      	ldrb	r0, [r3, #0]
 800538c:	230a      	movs	r3, #10
 800538e:	f007 ffb5 	bl	800d2fc <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005392:	0020      	movs	r0, r4
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	464b      	mov	r3, r9
 800539a:	b282      	uxth	r2, r0
 800539c:	0021      	movs	r1, r4
 800539e:	7818      	ldrb	r0, [r3, #0]
 80053a0:	230a      	movs	r3, #10
 80053a2:	f007 ffab 	bl	800d2fc <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053a6:	2214      	movs	r2, #20
 80053a8:	4694      	mov	ip, r2
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 80053ac:	2600      	movs	r6, #0
 80053ae:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053b0:	4b38      	ldr	r3, [pc, #224]	; (8005494 <prvCLITask+0x190>)
 80053b2:	4c39      	ldr	r4, [pc, #228]	; (8005498 <prvCLITask+0x194>)
 80053b4:	4463      	add	r3, ip
 80053b6:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 80053b8:	2360      	movs	r3, #96	; 0x60
 80053ba:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 80053bc:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 80053be:	44e3      	add	fp, ip
 80053c0:	e001      	b.n	80053c6 <prvCLITask+0xc2>
		taskYIELD();
 80053c2:	f009 fe5f 	bl	800f084 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80053c6:	7823      	ldrb	r3, [r4, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d1fa      	bne.n	80053c2 <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80053cc:	464b      	mov	r3, r9
 80053ce:	4642      	mov	r2, r8
 80053d0:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80053d2:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80053d4:	1e43      	subs	r3, r0, #1
 80053d6:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80053d8:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80053da:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80053dc:	4642      	mov	r2, r8
 80053de:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80053e0:	230a      	movs	r3, #10
 80053e2:	2201      	movs	r2, #1
 80053e4:	f007 ff8a 	bl	800d2fc <writePxITMutex>
			if(cRxedChar == '\r'){
 80053e8:	782b      	ldrb	r3, [r5, #0]
 80053ea:	2b0d      	cmp	r3, #13
 80053ec:	d01b      	beq.n	8005426 <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80053ee:	2b0a      	cmp	r3, #10
 80053f0:	d0e7      	beq.n	80053c2 <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d00d      	beq.n	8005412 <prvCLITask+0x10e>
 80053f6:	2b7f      	cmp	r3, #127	; 0x7f
 80053f8:	d00b      	beq.n	8005412 <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80053fa:	001a      	movs	r2, r3
 80053fc:	3a20      	subs	r2, #32
 80053fe:	2a5e      	cmp	r2, #94	; 0x5e
 8005400:	d8df      	bhi.n	80053c2 <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005402:	2e31      	cmp	r6, #49	; 0x31
 8005404:	dcdd      	bgt.n	80053c2 <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 8005406:	4a23      	ldr	r2, [pc, #140]	; (8005494 <prvCLITask+0x190>)
 8005408:	1992      	adds	r2, r2, r6
							cInputIndex++;
 800540a:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 800540c:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 800540e:	b276      	sxtb	r6, r6
 8005410:	e7d7      	b.n	80053c2 <prvCLITask+0xbe>
					if(cInputIndex > 0){
 8005412:	2e00      	cmp	r6, #0
 8005414:	d0d5      	beq.n	80053c2 <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <prvCLITask+0x190>)
						cInputIndex--;
 8005418:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 800541a:	4694      	mov	ip, r2
						cInputIndex--;
 800541c:	b2f3      	uxtb	r3, r6
 800541e:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 8005420:	4463      	add	r3, ip
 8005422:	751f      	strb	r7, [r3, #20]
 8005424:	e7cd      	b.n	80053c2 <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005426:	464b      	mov	r3, r9
 8005428:	2202      	movs	r2, #2
 800542a:	7818      	ldrb	r0, [r3, #0]
 800542c:	491b      	ldr	r1, [pc, #108]	; (800549c <prvCLITask+0x198>)
 800542e:	230a      	movs	r3, #10
 8005430:	f007 ff64 	bl	800d2fc <writePxITMutex>
				if(cInputIndex == 0){
 8005434:	2e00      	cmp	r6, #0
 8005436:	d011      	beq.n	800545c <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005438:	464b      	mov	r3, r9
 800543a:	4652      	mov	r2, sl
 800543c:	7818      	ldrb	r0, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	f7ff fd3d 	bl	8004ec0 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005446:	4651      	mov	r1, sl
 8005448:	4658      	mov	r0, fp
 800544a:	f00e f851 	bl	80134f0 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800544e:	2232      	movs	r2, #50	; 0x32
 8005450:	2100      	movs	r1, #0
 8005452:	4650      	mov	r0, sl
 8005454:	f00d fe16 	bl	8013084 <memset>
				cInputIndex =0;
 8005458:	2600      	movs	r6, #0
 800545a:	e7b2      	b.n	80053c2 <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 800545c:	4659      	mov	r1, fp
 800545e:	4650      	mov	r0, sl
 8005460:	f00e f846 	bl	80134f0 <strcpy>
 8005464:	e7e8      	b.n	8005438 <prvCLITask+0x134>
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <prvCLITask+0x170>)
 8005468:	4699      	mov	r9, r3
 800546a:	7819      	ldrb	r1, [r3, #0]
 800546c:	e777      	b.n	800535e <prvCLITask+0x5a>
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	20006860 	.word	0x20006860
 8005474:	20000c30 	.word	0x20000c30
 8005478:	200016dc 	.word	0x200016dc
 800547c:	20000030 	.word	0x20000030
 8005480:	080178cc 	.word	0x080178cc
 8005484:	20000aa0 	.word	0x20000aa0
 8005488:	08018924 	.word	0x08018924
 800548c:	08018950 	.word	0x08018950
 8005490:	20001c9c 	.word	0x20001c9c
 8005494:	2000175c 	.word	0x2000175c
 8005498:	200016d9 	.word	0x200016d9
 800549c:	0801a140 	.word	0x0801a140

080054a0 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054a4:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	0093      	lsls	r3, r2, #2
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <ParseSnippetCommand+0x70>)
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054ba:	4e16      	ldr	r6, [pc, #88]	; (8005514 <ParseSnippetCommand+0x74>)
 80054bc:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d016      	beq.n	80054f0 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054c2:	782b      	ldrb	r3, [r5, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054c8:	2113      	movs	r1, #19
 80054ca:	0028      	movs	r0, r5
 80054cc:	f00e f802 	bl	80134d4 <strchr>
 80054d0:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80054d2:	d010      	beq.n	80054f6 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80054d4:	1b42      	subs	r2, r0, r5
 80054d6:	0029      	movs	r1, r5
 80054d8:	0020      	movs	r0, r4
 80054da:	f00e f822 	bl	8013522 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80054de:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80054e0:	3701      	adds	r7, #1
 80054e2:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80054e6:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80054e8:	2000      	movs	r0, #0
 80054ea:	e7fb      	b.n	80054e4 <ParseSnippetCommand+0x44>
		return false;
 80054ec:	2000      	movs	r0, #0
 80054ee:	e7f9      	b.n	80054e4 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80054f0:	64b0      	str	r0, [r6, #72]	; 0x48
 80054f2:	0005      	movs	r5, r0
 80054f4:	e7e5      	b.n	80054c2 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80054f6:	0029      	movs	r1, r5
 80054f8:	0020      	movs	r0, r4
 80054fa:	f00d fff9 	bl	80134f0 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80054fe:	0020      	movs	r0, r4
 8005500:	f7fa fe0a 	bl	8000118 <strlen>
 8005504:	182d      	adds	r5, r5, r0
 8005506:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005508:	2001      	movs	r0, #1
 800550a:	e7eb      	b.n	80054e4 <ParseSnippetCommand+0x44>
 800550c:	200016dc 	.word	0x200016dc
 8005510:	2000687c 	.word	0x2000687c
 8005514:	2000175c 	.word	0x2000175c

08005518 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005518:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800551a:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 800551c:	1818      	adds	r0, r3, r0
 800551e:	492e      	ldr	r1, [pc, #184]	; (80055d8 <CheckSnippetCondition+0xc0>)
 8005520:	0080      	lsls	r0, r0, #2
 8005522:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005524:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005526:	2b01      	cmp	r3, #1
 8005528:	d020      	beq.n	800556c <CheckSnippetCondition+0x54>
 800552a:	2b03      	cmp	r3, #3
 800552c:	d11b      	bne.n	8005566 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800552e:	180c      	adds	r4, r1, r0
 8005530:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005532:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005534:	3a01      	subs	r2, #1
 8005536:	0053      	lsls	r3, r2, #1
 8005538:	189b      	adds	r3, r3, r2
 800553a:	4a28      	ldr	r2, [pc, #160]	; (80055dc <CheckSnippetCondition+0xc4>)
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005540:	1841      	adds	r1, r0, r1
 8005542:	2204      	movs	r2, #4
 8005544:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005546:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005548:	f00d fd93 	bl	8013072 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 800554c:	7863      	ldrb	r3, [r4, #1]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d809      	bhi.n	8005566 <CheckSnippetCondition+0x4e>
 8005552:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <CheckSnippetCondition+0xc8>)
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	58d3      	ldr	r3, [r2, r3]
 8005558:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800555a:	1c29      	adds	r1, r5, #0
 800555c:	9801      	ldr	r0, [sp, #4]
 800555e:	f7fa ffd1 	bl	8000504 <__aeabi_fcmpgt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d114      	bne.n	8005590 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005566:	2000      	movs	r0, #0
}
 8005568:	b003      	add	sp, #12
 800556a:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800556c:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800556e:	7882      	ldrb	r2, [r0, #2]
 8005570:	78c0      	ldrb	r0, [r0, #3]
 8005572:	00d3      	lsls	r3, r2, #3
 8005574:	189b      	adds	r3, r3, r2
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <CheckSnippetCondition+0xcc>)
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	1a18      	subs	r0, r3, r0
 800557c:	4243      	negs	r3, r0
 800557e:	4158      	adcs	r0, r3
 8005580:	b2c0      	uxtb	r0, r0
 8005582:	e7f1      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005584:	1c29      	adds	r1, r5, #0
 8005586:	9801      	ldr	r0, [sp, #4]
 8005588:	f7fa ffa2 	bl	80004d0 <__aeabi_fcmpeq>
 800558c:	2800      	cmp	r0, #0
 800558e:	d1ea      	bne.n	8005566 <CheckSnippetCondition+0x4e>
 8005590:	2100      	movs	r1, #0
 8005592:	1c28      	adds	r0, r5, #0
 8005594:	f7fa ff9c 	bl	80004d0 <__aeabi_fcmpeq>
 8005598:	4243      	negs	r3, r0
 800559a:	4158      	adcs	r0, r3
 800559c:	e7e4      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800559e:	1c29      	adds	r1, r5, #0
 80055a0:	9801      	ldr	r0, [sp, #4]
 80055a2:	f7fa ff95 	bl	80004d0 <__aeabi_fcmpeq>
 80055a6:	1e43      	subs	r3, r0, #1
 80055a8:	4198      	sbcs	r0, r3
 80055aa:	e7dd      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055ac:	1c29      	adds	r1, r5, #0
 80055ae:	9801      	ldr	r0, [sp, #4]
 80055b0:	f7fa ff94 	bl	80004dc <__aeabi_fcmplt>
 80055b4:	1e43      	subs	r3, r0, #1
 80055b6:	4198      	sbcs	r0, r3
 80055b8:	e7d6      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055ba:	1c29      	adds	r1, r5, #0
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	f7fa ff97 	bl	80004f0 <__aeabi_fcmple>
 80055c2:	1e43      	subs	r3, r0, #1
 80055c4:	4198      	sbcs	r0, r3
 80055c6:	e7cf      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055c8:	1c29      	adds	r1, r5, #0
 80055ca:	9801      	ldr	r0, [sp, #4]
 80055cc:	f7fa ffa4 	bl	8000518 <__aeabi_fcmpge>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1dd      	bne.n	8005590 <CheckSnippetCondition+0x78>
 80055d4:	e7c7      	b.n	8005566 <CheckSnippetCondition+0x4e>
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	2000687c 	.word	0x2000687c
 80055dc:	20000098 	.word	0x20000098
 80055e0:	0801798c 	.word	0x0801798c
 80055e4:	200023bc 	.word	0x200023bc

080055e8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	46de      	mov	lr, fp
 80055ec:	464e      	mov	r6, r9
 80055ee:	4645      	mov	r5, r8
 80055f0:	4657      	mov	r7, sl
 80055f2:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055f4:	f008 f8f2 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80055f8:	4b23      	ldr	r3, [pc, #140]	; (8005688 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055fa:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80055fc:	4698      	mov	r8, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d039      	beq.n	8005678 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <ExecuteSnippet+0xa4>)
 8005606:	4f22      	ldr	r7, [pc, #136]	; (8005690 <ExecuteSnippet+0xa8>)
 8005608:	469b      	mov	fp, r3
 800560a:	2320      	movs	r3, #32
 800560c:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800560e:	4b21      	ldr	r3, [pc, #132]	; (8005694 <ExecuteSnippet+0xac>)
 8005610:	4d21      	ldr	r5, [pc, #132]	; (8005698 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005612:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005614:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005616:	4699      	mov	r9, r3
 8005618:	e006      	b.n	8005628 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 800561a:	4643      	mov	r3, r8
 800561c:	3401      	adds	r4, #1
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2a4      	uxth	r4, r4
 8005622:	3514      	adds	r5, #20
 8005624:	42a3      	cmp	r3, r4
 8005626:	d927      	bls.n	8005678 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005628:	7c2b      	ldrb	r3, [r5, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f5      	beq.n	800561a <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800562e:	b2e0      	uxtb	r0, r4
 8005630:	f7ff ff72 	bl	8005518 <CheckSnippetCondition>
 8005634:	2800      	cmp	r0, #0
 8005636:	d0f0      	beq.n	800561a <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005638:	465b      	mov	r3, fp
 800563a:	4652      	mov	r2, sl
 800563c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800563e:	e00e      	b.n	800565e <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005640:	464b      	mov	r3, r9
 8005642:	003a      	movs	r2, r7
 8005644:	7818      	ldrb	r0, [r3, #0]
 8005646:	2100      	movs	r1, #0
 8005648:	0033      	movs	r3, r6
 800564a:	f7ff fc39 	bl	8004ec0 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800564e:	0030      	movs	r0, r6
 8005650:	f7fa fd62 	bl	8000118 <strlen>
 8005654:	2100      	movs	r1, #0
 8005656:	0002      	movs	r2, r0
 8005658:	0030      	movs	r0, r6
 800565a:	f00d fd13 	bl	8013084 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800565e:	0039      	movs	r1, r7
 8005660:	68e8      	ldr	r0, [r5, #12]
 8005662:	f7ff ff1d 	bl	80054a0 <ParseSnippetCommand>
 8005666:	2800      	cmp	r0, #0
 8005668:	d1ea      	bne.n	8005640 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800566a:	4643      	mov	r3, r8
 800566c:	3401      	adds	r4, #1
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2a4      	uxth	r4, r4
 8005672:	3514      	adds	r5, #20
 8005674:	42a3      	cmp	r3, r4
 8005676:	d8d7      	bhi.n	8005628 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005678:	2000      	movs	r0, #0
 800567a:	bc3c      	pop	{r2, r3, r4, r5}
 800567c:	4690      	mov	r8, r2
 800567e:	4699      	mov	r9, r3
 8005680:	46a2      	mov	sl, r4
 8005682:	46ab      	mov	fp, r5
 8005684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	200016dc 	.word	0x200016dc
 800568c:	200067e0 	.word	0x200067e0
 8005690:	2000175c 	.word	0x2000175c
 8005694:	20000c30 	.word	0x20000c30
 8005698:	2000687c 	.word	0x2000687c

0800569c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800569c:	2000      	movs	r0, #0
 800569e:	4770      	bx	lr

080056a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80056a2:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <flashsizeCommand+0x10>)
 80056a4:	4903      	ldr	r1, [pc, #12]	; (80056b4 <flashsizeCommand+0x14>)
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	f00d fee6 	bl	8013478 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80056ac:	2000      	movs	r0, #0
 80056ae:	bd10      	pop	{r4, pc}
 80056b0:	1ffff7cc 	.word	0x1ffff7cc
 80056b4:	08018be4 	.word	0x08018be4

080056b8 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056b8:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056ba:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056bc:	0004      	movs	r4, r0
 80056be:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056c0:	a901      	add	r1, sp, #4
 80056c2:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056c8:	f006 fb44 	bl	800bd54 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056cc:	4669      	mov	r1, sp
 80056ce:	0020      	movs	r0, r4
 80056d0:	f00d ff0e 	bl	80134f0 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80056d4:	9801      	ldr	r0, [sp, #4]
 80056d6:	f7fd fb37 	bl	8002d48 <__aeabi_f2d>
 80056da:	0002      	movs	r2, r0
 80056dc:	000b      	movs	r3, r1
 80056de:	0020      	movs	r0, r4
 80056e0:	4902      	ldr	r1, [pc, #8]	; (80056ec <ReadVrefCommand+0x34>)
 80056e2:	f00d fec9 	bl	8013478 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80056e6:	2000      	movs	r0, #0
 80056e8:	b002      	add	sp, #8
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	08018c04 	.word	0x08018c04

080056f0 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f0:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056f2:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f4:	0004      	movs	r4, r0
 80056f6:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056f8:	a901      	add	r1, sp, #4
 80056fa:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005700:	f006 fb28 	bl	800bd54 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005704:	4669      	mov	r1, sp
 8005706:	0020      	movs	r0, r4
 8005708:	f00d fef2 	bl	80134f0 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 800570c:	9800      	ldr	r0, [sp, #0]
 800570e:	f7fd fb1b 	bl	8002d48 <__aeabi_f2d>
 8005712:	0002      	movs	r2, r0
 8005714:	000b      	movs	r3, r1
 8005716:	0020      	movs	r0, r4
 8005718:	4902      	ldr	r1, [pc, #8]	; (8005724 <ReadTempCommand+0x34>)
 800571a:	f00d fead 	bl	8013478 <sprintf>
}
 800571e:	2000      	movs	r0, #0
 8005720:	b002      	add	sp, #8
 8005722:	bd10      	pop	{r4, pc}
 8005724:	08018c2c 	.word	0x08018c2c

08005728 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005728:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800572a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572c:	0014      	movs	r4, r2
 800572e:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005730:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005732:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005734:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005736:	aa01      	add	r2, sp, #4
 8005738:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800573a:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800573c:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 800573e:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005740:	f008 f850 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8005744:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005746:	aa02      	add	r2, sp, #8
 8005748:	2102      	movs	r1, #2
 800574a:	0020      	movs	r0, r4
 800574c:	f008 f84a 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005750:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005752:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005754:	3b32      	subs	r3, #50	; 0x32
 8005756:	2b01      	cmp	r3, #1
 8005758:	d907      	bls.n	800576a <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800575a:	2215      	movs	r2, #21
 800575c:	4919      	ldr	r1, [pc, #100]	; (80057c4 <ADCReadCommand+0x9c>)
 800575e:	0030      	movs	r0, r6
 8005760:	f00d fc87 	bl	8013072 <memcpy>
}
 8005764:	2000      	movs	r0, #0
 8005766:	b005      	add	sp, #20
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800576a:	0028      	movs	r0, r5
 800576c:	f00d f9c1 	bl	8012af2 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005770:	4d15      	ldr	r5, [pc, #84]	; (80057c8 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005772:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005774:	0029      	movs	r1, r5
 8005776:	0038      	movs	r0, r7
 8005778:	f7fa fcc4 	bl	8000104 <strcmp>
 800577c:	2800      	cmp	r0, #0
 800577e:	d005      	beq.n	800578c <ADCReadCommand+0x64>
 8005780:	4912      	ldr	r1, [pc, #72]	; (80057cc <ADCReadCommand+0xa4>)
 8005782:	0038      	movs	r0, r7
 8005784:	f7fa fcbe 	bl	8000104 <strcmp>
 8005788:	2800      	cmp	r0, #0
 800578a:	d115      	bne.n	80057b8 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 800578c:	0029      	movs	r1, r5
 800578e:	0020      	movs	r0, r4
 8005790:	f006 fca6 	bl	800c0e0 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005794:	aa03      	add	r2, sp, #12
 8005796:	0029      	movs	r1, r5
 8005798:	0020      	movs	r0, r4
 800579a:	f006 fcf1 	bl	800c180 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800579e:	a903      	add	r1, sp, #12
 80057a0:	0030      	movs	r0, r6
 80057a2:	f00d fea5 	bl	80134f0 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80057a6:	9803      	ldr	r0, [sp, #12]
 80057a8:	f7fa ff0a 	bl	80005c0 <__aeabi_f2uiz>
 80057ac:	4908      	ldr	r1, [pc, #32]	; (80057d0 <ADCReadCommand+0xa8>)
 80057ae:	b282      	uxth	r2, r0
 80057b0:	0030      	movs	r0, r6
 80057b2:	f00d fe61 	bl	8013478 <sprintf>
 80057b6:	e7d5      	b.n	8005764 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057b8:	2212      	movs	r2, #18
 80057ba:	4906      	ldr	r1, [pc, #24]	; (80057d4 <ADCReadCommand+0xac>)
 80057bc:	0030      	movs	r0, r6
 80057be:	f00d fc58 	bl	8013072 <memcpy>
 80057c2:	e7cf      	b.n	8005764 <ADCReadCommand+0x3c>
 80057c4:	08018c80 	.word	0x08018c80
 80057c8:	08018c50 	.word	0x08018c50
 80057cc:	08018c54 	.word	0x08018c54
 80057d0:	08018c5c 	.word	0x08018c5c
 80057d4:	08018c6c 	.word	0x08018c6c

080057d8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	4657      	mov	r7, sl
 80057dc:	46de      	mov	lr, fp
 80057de:	464e      	mov	r6, r9
 80057e0:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80057e2:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057e4:	b5e0      	push	{r5, r6, r7, lr}
 80057e6:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80057e8:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80057ea:	4b5b      	ldr	r3, [pc, #364]	; (8005958 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ec:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80057ee:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f0:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80057f2:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f4:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057f6:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80057f8:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057fa:	f007 fff3 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057fe:	4957      	ldr	r1, [pc, #348]	; (800595c <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005800:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005802:	f7fa fc7f 	bl	8000104 <strcmp>
 8005806:	2800      	cmp	r0, #0
 8005808:	d15c      	bne.n	80058c4 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800580a:	4d55      	ldr	r5, [pc, #340]	; (8005960 <testportCommand+0x188>)
 800580c:	4a55      	ldr	r2, [pc, #340]	; (8005964 <testportCommand+0x18c>)
 800580e:	782b      	ldrb	r3, [r5, #0]
 8005810:	2401      	movs	r4, #1
 8005812:	18d2      	adds	r2, r2, r3
 8005814:	3a01      	subs	r2, #1
 8005816:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005818:	4a53      	ldr	r2, [pc, #332]	; (8005968 <testportCommand+0x190>)
 800581a:	4691      	mov	r9, r2
 800581c:	e003      	b.n	8005826 <testportCommand+0x4e>
 800581e:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005820:	2c06      	cmp	r4, #6
 8005822:	d047      	beq.n	80058b4 <testportCommand+0xdc>
 8005824:	782b      	ldrb	r3, [r5, #0]
 8005826:	b2e2      	uxtb	r2, r4
 8005828:	4690      	mov	r8, r2
			if(PcPort != ports){
 800582a:	4293      	cmp	r3, r2
 800582c:	d0f7      	beq.n	800581e <testportCommand+0x46>
				WriteVaule[0] =rand();
 800582e:	f00d fc41 	bl	80130b4 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005832:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005834:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005836:	2201      	movs	r2, #1
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	0039      	movs	r1, r7
 800583c:	469b      	mov	fp, r3
 800583e:	4640      	mov	r0, r8
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	f007 fd29 	bl	800d298 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005846:	4640      	mov	r0, r8
 8005848:	f007 fd8a 	bl	800d360 <GetUart>
 800584c:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800584e:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005850:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005852:	b2db      	uxtb	r3, r3
 8005854:	429a      	cmp	r2, r3
 8005856:	d03f      	beq.n	80058d8 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005858:	0022      	movs	r2, r4
 800585a:	4944      	ldr	r1, [pc, #272]	; (800596c <testportCommand+0x194>)
 800585c:	4650      	mov	r0, sl
 800585e:	f00d fe0b 	bl	8013478 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005862:	4650      	mov	r0, sl
 8005864:	f7fa fc58 	bl	8000118 <strlen>
 8005868:	465b      	mov	r3, fp
 800586a:	b282      	uxth	r2, r0
 800586c:	4651      	mov	r1, sl
 800586e:	7828      	ldrb	r0, [r5, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	230a      	movs	r3, #10
 8005874:	f007 fd10 	bl	800d298 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005878:	2254      	movs	r2, #84	; 0x54
 800587a:	493d      	ldr	r1, [pc, #244]	; (8005970 <testportCommand+0x198>)
 800587c:	4650      	mov	r0, sl
 800587e:	f00d fbf8 	bl	8013072 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005882:	2364      	movs	r3, #100	; 0x64
 8005884:	7828      	ldrb	r0, [r5, #0]
 8005886:	2253      	movs	r2, #83	; 0x53
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4651      	mov	r1, sl
 800588c:	3b5a      	subs	r3, #90	; 0x5a
 800588e:	f007 fd03 	bl	800d298 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005892:	3601      	adds	r6, #1
 8005894:	e002      	b.n	800589c <testportCommand+0xc4>
					Delay_ms(1);
 8005896:	2001      	movs	r0, #1
 8005898:	f009 fd40 	bl	800f31c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800589c:	782a      	ldrb	r2, [r5, #0]
 800589e:	3a01      	subs	r2, #1
 80058a0:	0053      	lsls	r3, r2, #1
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	444b      	add	r3, r9
 80058a8:	5d9b      	ldrb	r3, [r3, r6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f3      	beq.n	8005896 <testportCommand+0xbe>
 80058ae:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80058b0:	2c06      	cmp	r4, #6
 80058b2:	d1b7      	bne.n	8005824 <testportCommand+0x4c>
}
 80058b4:	2000      	movs	r0, #0
 80058b6:	b005      	add	sp, #20
 80058b8:	bc3c      	pop	{r2, r3, r4, r5}
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	46a2      	mov	sl, r4
 80058c0:	46ab      	mov	fp, r5
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 80058c4:	2300      	movs	r3, #0
 80058c6:	56e3      	ldrsb	r3, [r4, r3]
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d016      	beq.n	80058fa <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058cc:	220f      	movs	r2, #15
 80058ce:	4929      	ldr	r1, [pc, #164]	; (8005974 <testportCommand+0x19c>)
 80058d0:	4650      	mov	r0, sl
 80058d2:	f00d fbce 	bl	8013072 <memcpy>
 80058d6:	e7ed      	b.n	80058b4 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80058d8:	0022      	movs	r2, r4
 80058da:	4927      	ldr	r1, [pc, #156]	; (8005978 <testportCommand+0x1a0>)
 80058dc:	4650      	mov	r0, sl
 80058de:	f00d fdcb 	bl	8013478 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80058e2:	4650      	mov	r0, sl
 80058e4:	f7fa fc18 	bl	8000118 <strlen>
 80058e8:	465b      	mov	r3, fp
 80058ea:	b282      	uxth	r2, r0
 80058ec:	4651      	mov	r1, sl
 80058ee:	7828      	ldrb	r0, [r5, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	3b5a      	subs	r3, #90	; 0x5a
 80058f4:	f007 fcd0 	bl	800d298 <writePxMutex>
 80058f8:	e7be      	b.n	8005878 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058fa:	1c60      	adds	r0, r4, #1
 80058fc:	f00d f8f9 	bl	8012af2 <atol>
 8005900:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005902:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005904:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005906:	2b04      	cmp	r3, #4
 8005908:	d905      	bls.n	8005916 <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800590a:	221b      	movs	r2, #27
 800590c:	491b      	ldr	r1, [pc, #108]	; (800597c <testportCommand+0x1a4>)
 800590e:	4650      	mov	r0, sl
 8005910:	f00d fbaf 	bl	8013072 <memcpy>
 8005914:	e7ce      	b.n	80058b4 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 8005916:	f00d fbcd 	bl	80130b4 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800591a:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 800591c:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800591e:	2201      	movs	r2, #1
 8005920:	0039      	movs	r1, r7
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	0028      	movs	r0, r5
 8005926:	3b32      	subs	r3, #50	; 0x32
 8005928:	f007 fcb6 	bl	800d298 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800592c:	2000      	movs	r0, #0
 800592e:	f007 fd17 	bl	800d360 <GetUart>
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005936:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800593a:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <testportCommand+0x194>)
 8005944:	4650      	mov	r0, sl
 8005946:	f00d fd97 	bl	8013478 <sprintf>
 800594a:	e7b3      	b.n	80058b4 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 800594c:	490a      	ldr	r1, [pc, #40]	; (8005978 <testportCommand+0x1a0>)
 800594e:	4650      	mov	r0, sl
 8005950:	f00d fd92 	bl	8013478 <sprintf>
 8005954:	e7ae      	b.n	80058b4 <testportCommand+0xdc>
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	08017c04 	.word	0x08017c04
 800595c:	08018264 	.word	0x08018264
 8005960:	20000c30 	.word	0x20000c30
 8005964:	2000189c 	.word	0x2000189c
 8005968:	200018dc 	.word	0x200018dc
 800596c:	08018cb4 	.word	0x08018cb4
 8005970:	08018cc8 	.word	0x08018cc8
 8005974:	08018d38 	.word	0x08018d38
 8005978:	08018c98 	.word	0x08018c98
 800597c:	08018d1c 	.word	0x08018d1c

08005980 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005984:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005986:	b082      	sub	sp, #8
 8005988:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800598a:	466a      	mov	r2, sp
 800598c:	2101      	movs	r1, #1
 800598e:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005994:	f007 ff26 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005998:	2300      	movs	r3, #0
 800599a:	56c3      	ldrsb	r3, [r0, r3]
 800599c:	2b70      	cmp	r3, #112	; 0x70
 800599e:	d010      	beq.n	80059c2 <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059a0:	aa01      	add	r2, sp, #4
 80059a2:	2102      	movs	r1, #2
 80059a4:	0020      	movs	r0, r4
 80059a6:	f007 ff1d 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059aa:	2300      	movs	r3, #0
 80059ac:	56c3      	ldrsb	r3, [r0, r3]
 80059ae:	2b70      	cmp	r3, #112	; 0x70
 80059b0:	d027      	beq.n	8005a02 <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059b2:	220f      	movs	r2, #15
 80059b4:	4919      	ldr	r1, [pc, #100]	; (8005a1c <unbridgeCommand+0x9c>)
 80059b6:	0028      	movs	r0, r5
 80059b8:	f00d fb5b 	bl	8013072 <memcpy>
}
 80059bc:	2000      	movs	r0, #0
 80059be:	b002      	add	sp, #8
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059c2:	3001      	adds	r0, #1
 80059c4:	f00d f895 	bl	8012af2 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059c8:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059ca:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059cc:	2102      	movs	r1, #2
 80059ce:	0020      	movs	r0, r4
 80059d0:	f007 ff08 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059d4:	2300      	movs	r3, #0
 80059d6:	56c3      	ldrsb	r3, [r0, r3]
 80059d8:	2b70      	cmp	r3, #112	; 0x70
 80059da:	d1ea      	bne.n	80059b2 <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059dc:	3001      	adds	r0, #1
 80059de:	f00d f888 	bl	8012af2 <atol>
 80059e2:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80059e4:	b2c1      	uxtb	r1, r0
 80059e6:	b2f0      	uxtb	r0, r6
 80059e8:	f7fe ffe2 	bl	80049b0 <Unbridge>
	if(result == BOS_OK)
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d10c      	bne.n	8005a0a <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	0023      	movs	r3, r4
 80059f4:	490a      	ldr	r1, [pc, #40]	; (8005a20 <unbridgeCommand+0xa0>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	0028      	movs	r0, r5
 80059fa:	4032      	ands	r2, r6
 80059fc:	f00d fd3c 	bl	8013478 <sprintf>
 8005a00:	e7dc      	b.n	80059bc <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a02:	3001      	adds	r0, #1
 8005a04:	f00d f875 	bl	8012af2 <atol>
 8005a08:	e7d3      	b.n	80059b2 <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 8005a0a:	2867      	cmp	r0, #103	; 0x67
 8005a0c:	d0d1      	beq.n	80059b2 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a0e:	2219      	movs	r2, #25
 8005a10:	4904      	ldr	r1, [pc, #16]	; (8005a24 <unbridgeCommand+0xa4>)
 8005a12:	0028      	movs	r0, r5
 8005a14:	f00d fb2d 	bl	8013072 <memcpy>
	return pdFALSE;
 8005a18:	e7d0      	b.n	80059bc <unbridgeCommand+0x3c>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	08018d38 	.word	0x08018d38
 8005a20:	08018d48 	.word	0x08018d48
 8005a24:	08018d68 	.word	0x08018d68

08005a28 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a2c:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a2e:	b082      	sub	sp, #8
 8005a30:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a32:	466a      	mov	r2, sp
 8005a34:	2101      	movs	r1, #1
 8005a36:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a3c:	f007 fed2 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a40:	2300      	movs	r3, #0
 8005a42:	56c3      	ldrsb	r3, [r0, r3]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d010      	beq.n	8005a6a <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a48:	aa01      	add	r2, sp, #4
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f007 fec9 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a52:	2300      	movs	r3, #0
 8005a54:	56c3      	ldrsb	r3, [r0, r3]
 8005a56:	2b70      	cmp	r3, #112	; 0x70
 8005a58:	d027      	beq.n	8005aaa <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	4919      	ldr	r1, [pc, #100]	; (8005ac4 <bridgeCommand+0x9c>)
 8005a5e:	0028      	movs	r0, r5
 8005a60:	f00d fb07 	bl	8013072 <memcpy>
}
 8005a64:	2000      	movs	r0, #0
 8005a66:	b002      	add	sp, #8
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f00d f841 	bl	8012af2 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a70:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a72:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a74:	2102      	movs	r1, #2
 8005a76:	0020      	movs	r0, r4
 8005a78:	f007 feb4 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	56c3      	ldrsb	r3, [r0, r3]
 8005a80:	2b70      	cmp	r3, #112	; 0x70
 8005a82:	d1ea      	bne.n	8005a5a <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a84:	3001      	adds	r0, #1
 8005a86:	f00d f834 	bl	8012af2 <atol>
 8005a8a:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005a8c:	b2c1      	uxtb	r1, r0
 8005a8e:	b2f0      	uxtb	r0, r6
 8005a90:	f7fe ff7a 	bl	8004988 <Bridge>
	if(result == BOS_OK)
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d10c      	bne.n	8005ab2 <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a98:	22ff      	movs	r2, #255	; 0xff
 8005a9a:	0023      	movs	r3, r4
 8005a9c:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <bridgeCommand+0xa0>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	4032      	ands	r2, r6
 8005aa4:	f00d fce8 	bl	8013478 <sprintf>
 8005aa8:	e7dc      	b.n	8005a64 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f00d f821 	bl	8012af2 <atol>
 8005ab0:	e7d3      	b.n	8005a5a <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 8005ab2:	2867      	cmp	r0, #103	; 0x67
 8005ab4:	d0d1      	beq.n	8005a5a <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005ab6:	2217      	movs	r2, #23
 8005ab8:	4904      	ldr	r1, [pc, #16]	; (8005acc <bridgeCommand+0xa4>)
 8005aba:	0028      	movs	r0, r5
 8005abc:	f00d fad9 	bl	8013072 <memcpy>
	return pdFALSE;
 8005ac0:	e7d0      	b.n	8005a64 <bridgeCommand+0x3c>
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	08018d38 	.word	0x08018d38
 8005ac8:	08018d84 	.word	0x08018d84
 8005acc:	08018da8 	.word	0x08018da8

08005ad0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad2:	46d6      	mov	lr, sl
 8005ad4:	4646      	mov	r6, r8
 8005ad6:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005ad8:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ada:	b5c0      	push	{r6, r7, lr}
 8005adc:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ade:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ae0:	0006      	movs	r6, r0
 8005ae2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005ae6:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae8:	f007 fe7c 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aec:	f00c fffb 	bl	8012ae6 <atoi>
 8005af0:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	d003      	beq.n	8005afe <delSnipCommand+0x2e>
 8005af6:	4f30      	ldr	r7, [pc, #192]	; (8005bb8 <delSnipCommand+0xe8>)
 8005af8:	783b      	ldrb	r3, [r7, #0]
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	d20b      	bcs.n	8005b16 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005afe:	2223      	movs	r2, #35	; 0x23
 8005b00:	492e      	ldr	r1, [pc, #184]	; (8005bbc <delSnipCommand+0xec>)
 8005b02:	0030      	movs	r0, r6
 8005b04:	f00d fab5 	bl	8013072 <memcpy>
}
 8005b08:	2000      	movs	r0, #0
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bc1c      	pop	{r2, r3, r4}
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	46a2      	mov	sl, r4
 8005b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005b16:	23ff      	movs	r3, #255	; 0xff
 8005b18:	4003      	ands	r3, r0
 8005b1a:	469a      	mov	sl, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	0098      	lsls	r0, r3, #2
 8005b20:	18c0      	adds	r0, r0, r3
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <delSnipCommand+0xf0>)
 8005b24:	0080      	lsls	r0, r0, #2
 8005b26:	4699      	mov	r9, r3
 8005b28:	4680      	mov	r8, r0
 8005b2a:	44c8      	add	r8, r9
 8005b2c:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b2e:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 8005b30:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b32:	2204      	movs	r2, #4
 8005b34:	2100      	movs	r1, #0
 8005b36:	4448      	add	r0, r9
 8005b38:	f00d faa4 	bl	8013084 <memset>
		snippets[index - 1].state = false;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 8005b42:	68d0      	ldr	r0, [r2, #12]
 8005b44:	f00d f852 	bl	8012bec <free>
		snippets[index - 1].cmd = NULL;
 8005b48:	4643      	mov	r3, r8
 8005b4a:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b4c:	783b      	ldrb	r3, [r7, #0]
 8005b4e:	42ab      	cmp	r3, r5
 8005b50:	d92e      	bls.n	8005bb0 <delSnipCommand+0xe0>
 8005b52:	3b01      	subs	r3, #1
 8005b54:	1b58      	subs	r0, r3, r5
 8005b56:	b2c0      	uxtb	r0, r0
 8005b58:	4450      	add	r0, sl
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	0085      	lsls	r5, r0, #2
 8005b5e:	182d      	adds	r5, r5, r0
 8005b60:	4648      	mov	r0, r9
 8005b62:	0094      	lsls	r4, r2, #2
 8005b64:	4454      	add	r4, sl
 8005b66:	00a4      	lsls	r4, r4, #2
 8005b68:	00ad      	lsls	r5, r5, #2
 8005b6a:	3014      	adds	r0, #20
 8005b6c:	444c      	add	r4, r9
 8005b6e:	4698      	mov	r8, r3
 8005b70:	182d      	adds	r5, r5, r0
 8005b72:	e002      	b.n	8005b7a <delSnipCommand+0xaa>
 8005b74:	3414      	adds	r4, #20
 8005b76:	42ac      	cmp	r4, r5
 8005b78:	d010      	beq.n	8005b9c <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005b7a:	7823      	ldrb	r3, [r4, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f9      	beq.n	8005b74 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b80:	0020      	movs	r0, r4
 8005b82:	0021      	movs	r1, r4
 8005b84:	2214      	movs	r2, #20
 8005b86:	3814      	subs	r0, #20
 8005b88:	f00d fa73 	bl	8013072 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	2214      	movs	r2, #20
 8005b90:	2100      	movs	r1, #0
 8005b92:	3414      	adds	r4, #20
 8005b94:	f00d fa76 	bl	8013084 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b98:	42ac      	cmp	r4, r5
 8005b9a:	d1ee      	bne.n	8005b7a <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005ba0:	f004 f82c 	bl	8009bfc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005ba4:	2236      	movs	r2, #54	; 0x36
 8005ba6:	4907      	ldr	r1, [pc, #28]	; (8005bc4 <delSnipCommand+0xf4>)
 8005ba8:	0030      	movs	r0, r6
 8005baa:	f00d fa62 	bl	8013072 <memcpy>
 8005bae:	e7ab      	b.n	8005b08 <delSnipCommand+0x38>
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	e7f2      	b.n	8005b9c <delSnipCommand+0xcc>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	200016dc 	.word	0x200016dc
 8005bbc:	08018df8 	.word	0x08018df8
 8005bc0:	2000687c 	.word	0x2000687c
 8005bc4:	08018dc0 	.word	0x08018dc0

08005bc8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bc8:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005bca:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bce:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bd0:	0005      	movs	r5, r0
 8005bd2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bd4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd6:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bd8:	f007 fe04 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bdc:	f00c ff83 	bl	8012ae6 <atoi>
 8005be0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <pauseSnipCommand+0x26>
 8005be6:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <pauseSnipCommand+0x58>)
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d207      	bcs.n	8005bfe <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bee:	2223      	movs	r2, #35	; 0x23
 8005bf0:	490c      	ldr	r1, [pc, #48]	; (8005c24 <pauseSnipCommand+0x5c>)
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	f00d fa3d 	bl	8013072 <memcpy>
}
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	b003      	add	sp, #12
 8005bfc:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 8005bfe:	23ff      	movs	r3, #255	; 0xff
 8005c00:	4018      	ands	r0, r3
 8005c02:	3801      	subs	r0, #1
 8005c04:	0083      	lsls	r3, r0, #2
 8005c06:	1818      	adds	r0, r3, r0
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <pauseSnipCommand+0x60>)
 8005c0a:	0080      	lsls	r0, r0, #2
 8005c0c:	1818      	adds	r0, r3, r0
 8005c0e:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 8005c10:	f003 fff4 	bl	8009bfc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c14:	2235      	movs	r2, #53	; 0x35
 8005c16:	4905      	ldr	r1, [pc, #20]	; (8005c2c <pauseSnipCommand+0x64>)
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f00d fa2a 	bl	8013072 <memcpy>
 8005c1e:	e7eb      	b.n	8005bf8 <pauseSnipCommand+0x30>
 8005c20:	200016dc 	.word	0x200016dc
 8005c24:	08018df8 	.word	0x08018df8
 8005c28:	2000687c 	.word	0x2000687c
 8005c2c:	08018e1c 	.word	0x08018e1c

08005c30 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005c30:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c32:	b510      	push	{r4, lr}
 8005c34:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c36:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c38:	0004      	movs	r4, r0
 8005c3a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c3c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005c3e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c40:	f007 fdd0 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c44:	f00c ff4f 	bl	8012ae6 <atoi>
 8005c48:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <actSnipCommand+0x26>
 8005c4e:	4a0f      	ldr	r2, [pc, #60]	; (8005c8c <actSnipCommand+0x5c>)
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d207      	bcs.n	8005c66 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c56:	2223      	movs	r2, #35	; 0x23
 8005c58:	490d      	ldr	r1, [pc, #52]	; (8005c90 <actSnipCommand+0x60>)
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f00d fa09 	bl	8013072 <memcpy>
}
 8005c60:	2000      	movs	r0, #0
 8005c62:	b002      	add	sp, #8
 8005c64:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c66:	23ff      	movs	r3, #255	; 0xff
 8005c68:	4018      	ands	r0, r3
 8005c6a:	3801      	subs	r0, #1
 8005c6c:	0083      	lsls	r3, r0, #2
 8005c6e:	1818      	adds	r0, r3, r0
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <actSnipCommand+0x64>)
 8005c72:	0080      	lsls	r0, r0, #2
 8005c74:	1818      	adds	r0, r3, r0
 8005c76:	2301      	movs	r3, #1
 8005c78:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c7a:	f003 ffbf 	bl	8009bfc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c7e:	2238      	movs	r2, #56	; 0x38
 8005c80:	4905      	ldr	r1, [pc, #20]	; (8005c98 <actSnipCommand+0x68>)
 8005c82:	0020      	movs	r0, r4
 8005c84:	f00d f9f5 	bl	8013072 <memcpy>
 8005c88:	e7ea      	b.n	8005c60 <actSnipCommand+0x30>
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	200016dc 	.word	0x200016dc
 8005c90:	08018df8 	.word	0x08018df8
 8005c94:	2000687c 	.word	0x2000687c
 8005c98:	08018e54 	.word	0x08018e54

08005c9c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	46de      	mov	lr, fp
 8005ca0:	4657      	mov	r7, sl
 8005ca2:	464e      	mov	r6, r9
 8005ca4:	4645      	mov	r5, r8
 8005ca6:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005caa:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005cac:	3304      	adds	r3, #4
 8005cae:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cb0:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005cb2:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005cb4:	c213      	stmia	r2!, {r0, r1, r4}
 8005cb6:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cb8:	4979      	ldr	r1, [pc, #484]	; (8005ea0 <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005cba:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cbc:	4b79      	ldr	r3, [pc, #484]	; (8005ea4 <snipCommand+0x208>)
 8005cbe:	2237      	movs	r2, #55	; 0x37
 8005cc0:	7818      	ldrb	r0, [r3, #0]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	3333      	adds	r3, #51	; 0x33
 8005cca:	f007 fae5 	bl	800d298 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005cce:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <snipCommand+0x20c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d044      	beq.n	8005d60 <snipCommand+0xc4>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	4b74      	ldr	r3, [pc, #464]	; (8005eac <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005cda:	46a8      	mov	r8, r5
 8005cdc:	469a      	mov	sl, r3
 8005cde:	4c74      	ldr	r4, [pc, #464]	; (8005eb0 <snipCommand+0x214>)
 8005ce0:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005ce2:	009d      	lsls	r5, r3, #2
 8005ce4:	18e9      	adds	r1, r5, r3
 8005ce6:	1c5e      	adds	r6, r3, #1
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	469b      	mov	fp, r3
 8005cec:	4653      	mov	r3, sl
 8005cee:	465a      	mov	r2, fp
 8005cf0:	5c9b      	ldrb	r3, [r3, r2]
 8005cf2:	b2f6      	uxtb	r6, r6
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d140      	bne.n	8005d7a <snipCommand+0xde>
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	4451      	add	r1, sl
 8005cfc:	68c8      	ldr	r0, [r1, #12]
 8005cfe:	4445      	add	r5, r8
 8005d00:	00ad      	lsls	r5, r5, #2
 8005d02:	4455      	add	r5, sl
 8005d04:	e00e      	b.n	8005d24 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005d06:	0023      	movs	r3, r4
 8005d08:	003a      	movs	r2, r7
 8005d0a:	496a      	ldr	r1, [pc, #424]	; (8005eb4 <snipCommand+0x218>)
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	f00d fbb3 	bl	8013478 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005d12:	0020      	movs	r0, r4
 8005d14:	f7fa fa00 	bl	8000118 <strlen>
 8005d18:	2100      	movs	r1, #0
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	f00d f9b1 	bl	8013084 <memset>
 8005d22:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005d24:	0021      	movs	r1, r4
 8005d26:	f7ff fbbb 	bl	80054a0 <ParseSnippetCommand>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d1eb      	bne.n	8005d06 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005d2e:	0038      	movs	r0, r7
 8005d30:	f7fa f9f2 	bl	8000118 <strlen>
 8005d34:	220c      	movs	r2, #12
 8005d36:	0005      	movs	r5, r0
 8005d38:	495f      	ldr	r1, [pc, #380]	; (8005eb8 <snipCommand+0x21c>)
 8005d3a:	1838      	adds	r0, r7, r0
 8005d3c:	f00d f999 	bl	8013072 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005d40:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <snipCommand+0x208>)
 8005d42:	350b      	adds	r5, #11
 8005d44:	7818      	ldrb	r0, [r3, #0]
 8005d46:	2301      	movs	r3, #1
 8005d48:	425b      	negs	r3, r3
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	b2aa      	uxth	r2, r5
 8005d4e:	3333      	adds	r3, #51	; 0x33
 8005d50:	0039      	movs	r1, r7
 8005d52:	f007 faa1 	bl	800d298 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005d56:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <snipCommand+0x20c>)
 8005d58:	46b0      	mov	r8, r6
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	42b3      	cmp	r3, r6
 8005d5e:	d8bf      	bhi.n	8005ce0 <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005d60:	22b5      	movs	r2, #181	; 0xb5
 8005d62:	4956      	ldr	r1, [pc, #344]	; (8005ebc <snipCommand+0x220>)
 8005d64:	0038      	movs	r0, r7
 8005d66:	f00d f984 	bl	8013072 <memcpy>
}
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	b00b      	add	sp, #44	; 0x2c
 8005d6e:	bc3c      	pop	{r2, r3, r4, r5}
 8005d70:	4690      	mov	r8, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	46a2      	mov	sl, r4
 8005d76:	46ab      	mov	fp, r5
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005d7a:	46d1      	mov	r9, sl
 8005d7c:	44d9      	add	r9, fp
 8005d7e:	464b      	mov	r3, r9
 8005d80:	7c1a      	ldrb	r2, [r3, #16]
 8005d82:	494f      	ldr	r1, [pc, #316]	; (8005ec0 <snipCommand+0x224>)
 8005d84:	00d3      	lsls	r3, r2, #3
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	aa06      	add	r2, sp, #24
 8005d8a:	4694      	mov	ip, r2
 8005d8c:	0038      	movs	r0, r7
 8005d8e:	4463      	add	r3, ip
 8005d90:	0032      	movs	r2, r6
 8005d92:	f00d fb71 	bl	8013478 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005d96:	4653      	mov	r3, sl
 8005d98:	465a      	mov	r2, fp
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d029      	beq.n	8005df4 <snipCommand+0x158>
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d175      	bne.n	8005e90 <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005da4:	4659      	mov	r1, fp
 8005da6:	3106      	adds	r1, #6
 8005da8:	4451      	add	r1, sl
 8005daa:	2204      	movs	r2, #4
 8005dac:	a805      	add	r0, sp, #20
 8005dae:	f00d f960 	bl	8013072 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005db2:	464b      	mov	r3, r9
 8005db4:	78da      	ldrb	r2, [r3, #3]
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	0053      	lsls	r3, r2, #1
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <snipCommand+0x228>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	18d3      	adds	r3, r2, r3
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	469b      	mov	fp, r3
 8005dc8:	f7fc ffbe 	bl	8002d48 <__aeabi_f2d>
 8005dcc:	464b      	mov	r3, r9
 8005dce:	9002      	str	r0, [sp, #8]
 8005dd0:	9103      	str	r1, [sp, #12]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	4a31      	ldr	r2, [pc, #196]	; (8005e9c <snipCommand+0x200>)
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	0059      	lsls	r1, r3, #1
 8005dda:	3214      	adds	r2, #20
 8005ddc:	18cb      	adds	r3, r1, r3
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	003a      	movs	r2, r7
 8005de4:	465b      	mov	r3, fp
 8005de6:	4938      	ldr	r1, [pc, #224]	; (8005ec8 <snipCommand+0x22c>)
 8005de8:	0038      	movs	r0, r7
 8005dea:	f00d fb45 	bl	8013478 <sprintf>
 8005dee:	464b      	mov	r3, r9
 8005df0:	68d8      	ldr	r0, [r3, #12]
				break;
 8005df2:	e784      	b.n	8005cfe <snipCommand+0x62>
 8005df4:	464b      	mov	r3, r9
 8005df6:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005df8:	78db      	ldrb	r3, [r3, #3]
 8005dfa:	3b05      	subs	r3, #5
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b09      	cmp	r3, #9
 8005e00:	d900      	bls.n	8005e04 <snipCommand+0x168>
 8005e02:	e77c      	b.n	8005cfe <snipCommand+0x62>
 8005e04:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <snipCommand+0x230>)
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	58d3      	ldr	r3, [r2, r3]
 8005e0a:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18eb      	adds	r3, r5, r3
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4453      	add	r3, sl
 8005e14:	4699      	mov	r9, r3
 8005e16:	464a      	mov	r2, r9
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	9001      	str	r0, [sp, #4]
 8005e1c:	7912      	ldrb	r2, [r2, #4]
 8005e1e:	492c      	ldr	r1, [pc, #176]	; (8005ed0 <snipCommand+0x234>)
 8005e20:	9200      	str	r2, [sp, #0]
 8005e22:	0038      	movs	r0, r7
 8005e24:	003a      	movs	r2, r7
 8005e26:	f00d fb27 	bl	8013478 <sprintf>
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e2e:	e766      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e30:	4643      	mov	r3, r8
 8005e32:	18eb      	adds	r3, r5, r3
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4453      	add	r3, sl
 8005e38:	4699      	mov	r9, r3
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	789b      	ldrb	r3, [r3, #2]
 8005e3e:	9001      	str	r0, [sp, #4]
 8005e40:	7912      	ldrb	r2, [r2, #4]
 8005e42:	4924      	ldr	r1, [pc, #144]	; (8005ed4 <snipCommand+0x238>)
 8005e44:	9200      	str	r2, [sp, #0]
 8005e46:	0038      	movs	r0, r7
 8005e48:	003a      	movs	r2, r7
 8005e4a:	f00d fb15 	bl	8013478 <sprintf>
 8005e4e:	464b      	mov	r3, r9
 8005e50:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e52:	e754      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e54:	4643      	mov	r3, r8
 8005e56:	18eb      	adds	r3, r5, r3
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4453      	add	r3, sl
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	003a      	movs	r2, r7
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	491d      	ldr	r1, [pc, #116]	; (8005ed8 <snipCommand+0x23c>)
 8005e64:	9000      	str	r0, [sp, #0]
 8005e66:	0038      	movs	r0, r7
 8005e68:	f00d fb06 	bl	8013478 <sprintf>
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e70:	e745      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e72:	4643      	mov	r3, r8
 8005e74:	18eb      	adds	r3, r5, r3
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4453      	add	r3, sl
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	003a      	movs	r2, r7
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	4916      	ldr	r1, [pc, #88]	; (8005edc <snipCommand+0x240>)
 8005e82:	9000      	str	r0, [sp, #0]
 8005e84:	0038      	movs	r0, r7
 8005e86:	f00d faf7 	bl	8013478 <sprintf>
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e8e:	e736      	b.n	8005cfe <snipCommand+0x62>
 8005e90:	2314      	movs	r3, #20
 8005e92:	4642      	mov	r2, r8
 8005e94:	4353      	muls	r3, r2
 8005e96:	4453      	add	r3, sl
 8005e98:	68d8      	ldr	r0, [r3, #12]
 8005e9a:	e730      	b.n	8005cfe <snipCommand+0x62>
 8005e9c:	08017c04 	.word	0x08017c04
 8005ea0:	08018e8c 	.word	0x08018e8c
 8005ea4:	20000c30 	.word	0x20000c30
 8005ea8:	200016dc 	.word	0x200016dc
 8005eac:	2000687c 	.word	0x2000687c
 8005eb0:	200017dc 	.word	0x200017dc
 8005eb4:	08018f40 	.word	0x08018f40
 8005eb8:	08018f48 	.word	0x08018f48
 8005ebc:	08018f54 	.word	0x08018f54
 8005ec0:	08018ec4 	.word	0x08018ec4
 8005ec4:	20000098 	.word	0x20000098
 8005ec8:	08018f30 	.word	0x08018f30
 8005ecc:	080179a8 	.word	0x080179a8
 8005ed0:	08018f14 	.word	0x08018f14
 8005ed4:	08018efc 	.word	0x08018efc
 8005ed8:	08018ee4 	.word	0x08018ee4
 8005edc:	08018ed0 	.word	0x08018ed0

08005ee0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005ee4:	f009 fa2e 	bl	800f344 <HAL_GetDEVID>
	switch(dev){
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <idcodeCommand+0x78>)
 8005eea:	0400      	lsls	r0, r0, #16
 8005eec:	469c      	mov	ip, r3
 8005eee:	0c00      	lsrs	r0, r0, #16
 8005ef0:	4460      	add	r0, ip
 8005ef2:	2808      	cmp	r0, #8
 8005ef4:	d82a      	bhi.n	8005f4c <idcodeCommand+0x6c>
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <idcodeCommand+0x7c>)
 8005ef8:	0080      	lsls	r0, r0, #2
 8005efa:	581b      	ldr	r3, [r3, r0]
 8005efc:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <idcodeCommand+0x80>)
 8005f00:	4918      	ldr	r1, [pc, #96]	; (8005f64 <idcodeCommand+0x84>)
 8005f02:	0020      	movs	r0, r4
 8005f04:	f00d fab8 	bl	8013478 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005f08:	f009 fa16 	bl	800f338 <HAL_GetREVID>
 8005f0c:	0022      	movs	r2, r4
 8005f0e:	0b03      	lsrs	r3, r0, #12
 8005f10:	4915      	ldr	r1, [pc, #84]	; (8005f68 <idcodeCommand+0x88>)
 8005f12:	0020      	movs	r0, r4
 8005f14:	f00d fab0 	bl	8013478 <sprintf>
}
 8005f18:	2000      	movs	r0, #0
 8005f1a:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <idcodeCommand+0x8c>)
 8005f1e:	4911      	ldr	r1, [pc, #68]	; (8005f64 <idcodeCommand+0x84>)
 8005f20:	0020      	movs	r0, r4
 8005f22:	f00d faa9 	bl	8013478 <sprintf>
			break;
 8005f26:	e7ef      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005f28:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <idcodeCommand+0x90>)
 8005f2a:	490e      	ldr	r1, [pc, #56]	; (8005f64 <idcodeCommand+0x84>)
 8005f2c:	0020      	movs	r0, r4
 8005f2e:	f00d faa3 	bl	8013478 <sprintf>
			break;
 8005f32:	e7e9      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005f34:	4a0f      	ldr	r2, [pc, #60]	; (8005f74 <idcodeCommand+0x94>)
 8005f36:	490b      	ldr	r1, [pc, #44]	; (8005f64 <idcodeCommand+0x84>)
 8005f38:	0020      	movs	r0, r4
 8005f3a:	f00d fa9d 	bl	8013478 <sprintf>
			break;
 8005f3e:	e7e3      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <idcodeCommand+0x98>)
 8005f42:	4908      	ldr	r1, [pc, #32]	; (8005f64 <idcodeCommand+0x84>)
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00d fa97 	bl	8013478 <sprintf>
			break;
 8005f4a:	e7dd      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005f4c:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <idcodeCommand+0x9c>)
 8005f4e:	4905      	ldr	r1, [pc, #20]	; (8005f64 <idcodeCommand+0x84>)
 8005f50:	0020      	movs	r0, r4
 8005f52:	f00d fa91 	bl	8013478 <sprintf>
			break;
 8005f56:	e7d7      	b.n	8005f08 <idcodeCommand+0x28>
 8005f58:	fffffbc0 	.word	0xfffffbc0
 8005f5c:	080179d0 	.word	0x080179d0
 8005f60:	08019044 	.word	0x08019044
 8005f64:	08019018 	.word	0x08019018
 8005f68:	08019064 	.word	0x08019064
 8005f6c:	08019038 	.word	0x08019038
 8005f70:	08019050 	.word	0x08019050
 8005f74:	0801900c 	.word	0x0801900c
 8005f78:	0801902c 	.word	0x0801902c
 8005f7c:	0801905c 	.word	0x0801905c

08005f80 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f84:	220e      	movs	r2, #14
 8005f86:	4911      	ldr	r1, [pc, #68]	; (8005fcc <uuidCommand+0x4c>)
 8005f88:	f00d f873 	bl	8013072 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f8c:	4d10      	ldr	r5, [pc, #64]	; (8005fd0 <uuidCommand+0x50>)
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <uuidCommand+0x54>)
 8005f90:	0029      	movs	r1, r5
 8005f92:	0022      	movs	r2, r4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00d fa6e 	bl	8013478 <sprintf>
 8005f9c:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <uuidCommand+0x58>)
 8005f9e:	0029      	movs	r1, r5
 8005fa0:	0022      	movs	r2, r4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	f00d fa67 	bl	8013478 <sprintf>
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <uuidCommand+0x5c>)
 8005fac:	0029      	movs	r1, r5
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	f00d fa60 	bl	8013478 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005fb8:	0020      	movs	r0, r4
 8005fba:	f7fa f8ad 	bl	8000118 <strlen>
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	1820      	adds	r0, r4, r0
 8005fc2:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <uuidCommand+0x60>)
 8005fc4:	f00d f855 	bl	8013072 <memcpy>
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	0801907c 	.word	0x0801907c
 8005fd0:	0801908c 	.word	0x0801908c
 8005fd4:	1ffff7ac 	.word	0x1ffff7ac
 8005fd8:	1ffff7b0 	.word	0x1ffff7b0
 8005fdc:	1ffff7b4 	.word	0x1ffff7b4
 8005fe0:	0801a140 	.word	0x0801a140

08005fe4 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	0004      	movs	r4, r0
	GetTimeDate();
 8005fe8:	f006 ff18 	bl	800ce1c <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005fec:	f7fe fcae 	bl	800494c <GetDateString>
 8005ff0:	4903      	ldr	r1, [pc, #12]	; (8006000 <dateCommand+0x1c>)
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	f00d fa3f 	bl	8013478 <sprintf>
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	08019094 	.word	0x08019094

08006004 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	46ce      	mov	lr, r9
 8006008:	4647      	mov	r7, r8
 800600a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800600c:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800600e:	b580      	push	{r7, lr}
 8006010:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006012:	466a      	mov	r2, sp
 8006014:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006016:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006018:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800601e:	f007 fbe1 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8006022:	4b6b      	ldr	r3, [pc, #428]	; (80061d0 <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006024:	2204      	movs	r2, #4
 8006026:	496b      	ldr	r1, [pc, #428]	; (80061d4 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006028:	0004      	movs	r4, r0
 800602a:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800602c:	f00d fa68 	bl	8013500 <strncmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	d119      	bne.n	8006068 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006034:	9b00      	ldr	r3, [sp, #0]
 8006036:	1d27      	adds	r7, r4, #4
 8006038:	1f1d      	subs	r5, r3, #4
 800603a:	002a      	movs	r2, r5
 800603c:	4966      	ldr	r1, [pc, #408]	; (80061d8 <getCommand+0x1d4>)
 800603e:	0038      	movs	r0, r7
 8006040:	f00d fa5e 	bl	8013500 <strncmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	d121      	bne.n	800608c <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006048:	4b64      	ldr	r3, [pc, #400]	; (80061dc <getCommand+0x1d8>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b60      	cmp	r3, #96	; 0x60
 800604e:	d100      	bne.n	8006052 <getCommand+0x4e>
 8006050:	e071      	b.n	8006136 <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006052:	2b20      	cmp	r3, #32
 8006054:	d069      	beq.n	800612a <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006056:	2b00      	cmp	r3, #0
 8006058:	d100      	bne.n	800605c <getCommand+0x58>
 800605a:	e096      	b.n	800618a <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800605c:	0022      	movs	r2, r4
 800605e:	4960      	ldr	r1, [pc, #384]	; (80061e0 <getCommand+0x1dc>)
 8006060:	0030      	movs	r0, r6
 8006062:	f00d fa09 	bl	8013478 <sprintf>
 8006066:	e00b      	b.n	8006080 <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006068:	2205      	movs	r2, #5
 800606a:	495e      	ldr	r1, [pc, #376]	; (80061e4 <getCommand+0x1e0>)
 800606c:	0020      	movs	r0, r4
 800606e:	f00d fa47 	bl	8013500 <strncmp>
 8006072:	2800      	cmp	r0, #0
 8006074:	d03b      	beq.n	80060ee <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006076:	2213      	movs	r2, #19
 8006078:	495b      	ldr	r1, [pc, #364]	; (80061e8 <getCommand+0x1e4>)
 800607a:	0030      	movs	r0, r6
 800607c:	f00c fff9 	bl	8013072 <memcpy>
}
 8006080:	2000      	movs	r0, #0
 8006082:	b003      	add	sp, #12
 8006084:	bc0c      	pop	{r2, r3}
 8006086:	4690      	mov	r8, r2
 8006088:	4699      	mov	r9, r3
 800608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800608c:	002a      	movs	r2, r5
 800608e:	4957      	ldr	r1, [pc, #348]	; (80061ec <getCommand+0x1e8>)
 8006090:	0038      	movs	r0, r7
 8006092:	f00d fa35 	bl	8013500 <strncmp>
 8006096:	2800      	cmp	r0, #0
 8006098:	d041      	beq.n	800611e <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800609a:	002a      	movs	r2, r5
 800609c:	4954      	ldr	r1, [pc, #336]	; (80061f0 <getCommand+0x1ec>)
 800609e:	0038      	movs	r0, r7
 80060a0:	f00d fa2e 	bl	8013500 <strncmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d07d      	beq.n	80061a4 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80060a8:	002a      	movs	r2, r5
 80060aa:	4952      	ldr	r1, [pc, #328]	; (80061f4 <getCommand+0x1f0>)
 80060ac:	0038      	movs	r0, r7
 80060ae:	f00d fa27 	bl	8013500 <strncmp>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d07d      	beq.n	80061b2 <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80060b6:	002a      	movs	r2, r5
 80060b8:	494f      	ldr	r1, [pc, #316]	; (80061f8 <getCommand+0x1f4>)
 80060ba:	0038      	movs	r0, r7
 80060bc:	f00d fa20 	bl	8013500 <strncmp>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d068      	beq.n	8006196 <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80060c4:	002a      	movs	r2, r5
 80060c6:	494d      	ldr	r1, [pc, #308]	; (80061fc <getCommand+0x1f8>)
 80060c8:	0038      	movs	r0, r7
 80060ca:	f00d fa19 	bl	8013500 <strncmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d076      	beq.n	80061c0 <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80060d2:	002a      	movs	r2, r5
 80060d4:	494a      	ldr	r1, [pc, #296]	; (8006200 <getCommand+0x1fc>)
 80060d6:	0038      	movs	r0, r7
 80060d8:	f00d fa12 	bl	8013500 <strncmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1ca      	bne.n	8006076 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80060e0:	4b48      	ldr	r3, [pc, #288]	; (8006204 <getCommand+0x200>)
 80060e2:	4949      	ldr	r1, [pc, #292]	; (8006208 <getCommand+0x204>)
 80060e4:	795a      	ldrb	r2, [r3, #5]
 80060e6:	0030      	movs	r0, r6
 80060e8:	f00d f9c6 	bl	8013478 <sprintf>
 80060ec:	e7c8      	b.n	8006080 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060ee:	0028      	movs	r0, r5
 80060f0:	aa01      	add	r2, sp, #4
 80060f2:	2102      	movs	r1, #2
 80060f4:	f007 fb76 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 80060f8:	2400      	movs	r4, #0
 80060fa:	0007      	movs	r7, r0
 80060fc:	4d43      	ldr	r5, [pc, #268]	; (800620c <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80060fe:	0029      	movs	r1, r5
 8006100:	0038      	movs	r0, r7
 8006102:	f7f9 ffff 	bl	8000104 <strcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	d01b      	beq.n	8006142 <getCommand+0x13e>
 800610a:	3401      	adds	r4, #1
 800610c:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 800610e:	2c0a      	cmp	r4, #10
 8006110:	d1f5      	bne.n	80060fe <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006112:	003a      	movs	r2, r7
 8006114:	493e      	ldr	r1, [pc, #248]	; (8006210 <getCommand+0x20c>)
 8006116:	0030      	movs	r0, r6
 8006118:	f00d f9ae 	bl	8013478 <sprintf>
			return pdFALSE;
 800611c:	e7b0      	b.n	8006080 <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 800611e:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <getCommand+0x1d8>)
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d007      	beq.n	8006136 <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006126:	2b01      	cmp	r3, #1
 8006128:	d195      	bne.n	8006056 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <getCommand+0x210>)
 800612c:	493a      	ldr	r1, [pc, #232]	; (8006218 <getCommand+0x214>)
 800612e:	0030      	movs	r0, r6
 8006130:	f00d f9a2 	bl	8013478 <sprintf>
 8006134:	e7a4      	b.n	8006080 <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006136:	4a39      	ldr	r2, [pc, #228]	; (800621c <getCommand+0x218>)
 8006138:	4937      	ldr	r1, [pc, #220]	; (8006218 <getCommand+0x214>)
 800613a:	0030      	movs	r0, r6
 800613c:	f00d f99c 	bl	8013478 <sprintf>
 8006140:	e79e      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006142:	003a      	movs	r2, r7
 8006144:	4936      	ldr	r1, [pc, #216]	; (8006220 <getCommand+0x21c>)
 8006146:	0030      	movs	r0, r6
 8006148:	f00d f996 	bl	8013478 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800614c:	4f35      	ldr	r7, [pc, #212]	; (8006224 <getCommand+0x220>)
 800614e:	783b      	ldrb	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d095      	beq.n	8006080 <getCommand+0x7c>
 8006154:	2501      	movs	r5, #1
 8006156:	4b34      	ldr	r3, [pc, #208]	; (8006228 <getCommand+0x224>)
 8006158:	40a5      	lsls	r5, r4
 800615a:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800615c:	4b33      	ldr	r3, [pc, #204]	; (800622c <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 800615e:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006160:	4699      	mov	r9, r3
 8006162:	e005      	b.n	8006170 <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8006164:	3401      	adds	r4, #1
 8006166:	783b      	ldrb	r3, [r7, #0]
 8006168:	b2e4      	uxtb	r4, r4
 800616a:	42a3      	cmp	r3, r4
 800616c:	d200      	bcs.n	8006170 <getCommand+0x16c>
 800616e:	e787      	b.n	8006080 <getCommand+0x7c>
				if(InGroup(j,i)){
 8006170:	4642      	mov	r2, r8
 8006172:	1e63      	subs	r3, r4, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	5ad3      	ldrh	r3, [r2, r3]
 8006178:	421d      	tst	r5, r3
 800617a:	d0f3      	beq.n	8006164 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800617c:	0023      	movs	r3, r4
 800617e:	0032      	movs	r2, r6
 8006180:	4649      	mov	r1, r9
 8006182:	0030      	movs	r0, r6
 8006184:	f00d f978 	bl	8013478 <sprintf>
 8006188:	e7ec      	b.n	8006164 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <getCommand+0x22c>)
 800618c:	4922      	ldr	r1, [pc, #136]	; (8006218 <getCommand+0x214>)
 800618e:	0030      	movs	r0, r6
 8006190:	f00d f972 	bl	8013478 <sprintf>
 8006194:	e774      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <getCommand+0x200>)
 8006198:	491b      	ldr	r1, [pc, #108]	; (8006208 <getCommand+0x204>)
 800619a:	885a      	ldrh	r2, [r3, #2]
 800619c:	0030      	movs	r0, r6
 800619e:	f00d f96b 	bl	8013478 <sprintf>
 80061a2:	e76d      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <getCommand+0x200>)
 80061a6:	4918      	ldr	r1, [pc, #96]	; (8006208 <getCommand+0x204>)
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	0030      	movs	r0, r6
 80061ac:	f00d f964 	bl	8013478 <sprintf>
 80061b0:	e766      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <getCommand+0x200>)
 80061b4:	4914      	ldr	r1, [pc, #80]	; (8006208 <getCommand+0x204>)
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	0030      	movs	r0, r6
 80061ba:	f00d f95d 	bl	8013478 <sprintf>
 80061be:	e75f      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <getCommand+0x200>)
 80061c2:	4911      	ldr	r1, [pc, #68]	; (8006208 <getCommand+0x204>)
 80061c4:	791a      	ldrb	r2, [r3, #4]
 80061c6:	0030      	movs	r0, r6
 80061c8:	f00d f956 	bl	8013478 <sprintf>
 80061cc:	e758      	b.n	8006080 <getCommand+0x7c>
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	200017dc 	.word	0x200017dc
 80061d4:	080190ac 	.word	0x080190ac
 80061d8:	080190b4 	.word	0x080190b4
 80061dc:	200067e0 	.word	0x200067e0
 80061e0:	08019148 	.word	0x08019148
 80061e4:	08019124 	.word	0x08019124
 80061e8:	08019134 	.word	0x08019134
 80061ec:	080190cc 	.word	0x080190cc
 80061f0:	080190d4 	.word	0x080190d4
 80061f4:	080190e0 	.word	0x080190e0
 80061f8:	080190ec 	.word	0x080190ec
 80061fc:	080190fc 	.word	0x080190fc
 8006200:	08019110 	.word	0x08019110
 8006204:	20006860 	.word	0x20006860
 8006208:	080188c0 	.word	0x080188c0
 800620c:	20000ad8 	.word	0x20000ad8
 8006210:	08019168 	.word	0x08019168
 8006214:	080190c0 	.word	0x080190c0
 8006218:	08018140 	.word	0x08018140
 800621c:	08018264 	.word	0x08018264
 8006220:	08019184 	.word	0x08019184
 8006224:	20000008 	.word	0x20000008
 8006228:	20000aa4 	.word	0x20000aa4
 800622c:	0801912c 	.word	0x0801912c
 8006230:	080190c4 	.word	0x080190c4

08006234 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006234:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800623a:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800623c:	0006      	movs	r6, r0
 800623e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006240:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006242:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006244:	f007 face 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006248:	9d01      	ldr	r5, [sp, #4]
 800624a:	491f      	ldr	r1, [pc, #124]	; (80062c8 <defaultCommand+0x94>)
 800624c:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800624e:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006250:	f00d f956 	bl	8013500 <strncmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	d026      	beq.n	80062a6 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006258:	002a      	movs	r2, r5
 800625a:	491c      	ldr	r1, [pc, #112]	; (80062cc <defaultCommand+0x98>)
 800625c:	0020      	movs	r0, r4
 800625e:	f00d f94f 	bl	8013500 <strncmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	d119      	bne.n	800629a <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006266:	2116      	movs	r1, #22
 8006268:	2200      	movs	r2, #0
 800626a:	20ff      	movs	r0, #255	; 0xff
 800626c:	f002 f86c 	bl	8008348 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006270:	2202      	movs	r2, #2
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <defaultCommand+0x9c>)
		osDelay(100);
 8006274:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006276:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006278:	f007 f9a8 	bl	800d5cc <osDelay>
		ClearEEportsDir();
 800627c:	f7fd fb02 	bl	8003884 <ClearEEportsDir>
		ClearROtopology();
 8006280:	f003 fdb4 	bl	8009dec <ClearROtopology>
		osDelay(100);
 8006284:	2064      	movs	r0, #100	; 0x64
 8006286:	f007 f9a1 	bl	800d5cc <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	4911      	ldr	r1, [pc, #68]	; (80062d4 <defaultCommand+0xa0>)
 800628e:	0030      	movs	r0, r6
 8006290:	f00c feef 	bl	8013072 <memcpy>
}
 8006294:	2000      	movs	r0, #0
 8006296:	b002      	add	sp, #8
 8006298:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800629a:	220f      	movs	r2, #15
 800629c:	490e      	ldr	r1, [pc, #56]	; (80062d8 <defaultCommand+0xa4>)
 800629e:	0030      	movs	r0, r6
 80062a0:	f00c fee7 	bl	8013072 <memcpy>
 80062a4:	e7f6      	b.n	8006294 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80062a6:	490d      	ldr	r1, [pc, #52]	; (80062dc <defaultCommand+0xa8>)
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <defaultCommand+0xac>)
 80062aa:	000a      	movs	r2, r1
 80062ac:	cb13      	ldmia	r3!, {r0, r1, r4}
 80062ae:	c213      	stmia	r2!, {r0, r1, r4}
 80062b0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80062b2:	c213      	stmia	r2!, {r0, r1, r4}
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80062b8:	f7fd faa0 	bl	80037fc <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80062bc:	2227      	movs	r2, #39	; 0x27
 80062be:	4909      	ldr	r1, [pc, #36]	; (80062e4 <defaultCommand+0xb0>)
 80062c0:	0030      	movs	r0, r6
 80062c2:	f00c fed6 	bl	8013072 <memcpy>
 80062c6:	e7e5      	b.n	8006294 <defaultCommand+0x60>
 80062c8:	08019198 	.word	0x08019198
 80062cc:	080191c8 	.word	0x080191c8
 80062d0:	20001146 	.word	0x20001146
 80062d4:	080191e0 	.word	0x080191e0
 80062d8:	080191d0 	.word	0x080191d0
 80062dc:	20006860 	.word	0x20006860
 80062e0:	20000014 	.word	0x20000014
 80062e4:	080191a0 	.word	0x080191a0

080062e8 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ea:	46de      	mov	lr, fp
 80062ec:	4657      	mov	r7, sl
 80062ee:	464e      	mov	r6, r9
 80062f0:	4645      	mov	r5, r8
 80062f2:	b5e0      	push	{r5, r6, r7, lr}
 80062f4:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80062f6:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f8:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062fa:	aa09      	add	r2, sp, #36	; 0x24
 80062fc:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062fe:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006300:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	930a      	str	r3, [sp, #40]	; 0x28
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006308:	930c      	str	r3, [sp, #48]	; 0x30
 800630a:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630c:	f007 fa6a 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8006310:	4ccf      	ldr	r4, [pc, #828]	; (8006650 <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006312:	2204      	movs	r2, #4
 8006314:	49cf      	ldr	r1, [pc, #828]	; (8006654 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006316:	0006      	movs	r6, r0
 8006318:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800631a:	f00d f8f1 	bl	8013500 <strncmp>
 800631e:	2800      	cmp	r0, #0
 8006320:	d100      	bne.n	8006324 <setCommand+0x3c>
 8006322:	e082      	b.n	800642a <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006324:	2204      	movs	r2, #4
 8006326:	49cc      	ldr	r1, [pc, #816]	; (8006658 <setCommand+0x370>)
 8006328:	0030      	movs	r0, r6
 800632a:	f00d f8e9 	bl	8013500 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d014      	beq.n	800635c <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006332:	2204      	movs	r2, #4
 8006334:	49c9      	ldr	r1, [pc, #804]	; (800665c <setCommand+0x374>)
 8006336:	0030      	movs	r0, r6
 8006338:	f00d f8e2 	bl	8013500 <strncmp>
 800633c:	2800      	cmp	r0, #0
 800633e:	d100      	bne.n	8006342 <setCommand+0x5a>
 8006340:	e0e0      	b.n	8006504 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006342:	2213      	movs	r2, #19
 8006344:	49c6      	ldr	r1, [pc, #792]	; (8006660 <setCommand+0x378>)
 8006346:	0028      	movs	r0, r5
 8006348:	f00c fe93 	bl	8013072 <memcpy>
}
 800634c:	2000      	movs	r0, #0
 800634e:	b00f      	add	sp, #60	; 0x3c
 8006350:	bc3c      	pop	{r2, r3, r4, r5}
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	46a2      	mov	sl, r4
 8006358:	46ab      	mov	fp, r5
 800635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800635c:	aa0a      	add	r2, sp, #40	; 0x28
 800635e:	2102      	movs	r1, #2
 8006360:	0038      	movs	r0, r7
 8006362:	f007 fa3f 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006366:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006368:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800636a:	2103      	movs	r1, #3
 800636c:	0038      	movs	r0, r7
 800636e:	f007 fa39 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006372:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006374:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006376:	2104      	movs	r1, #4
 8006378:	0038      	movs	r0, r7
 800637a:	f007 fa33 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800637e:	aa0d      	add	r2, sp, #52	; 0x34
 8006380:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006382:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006384:	0038      	movs	r0, r7
 8006386:	f007 fa2d 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 800638a:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800638c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800638e:	f00c fbaa 	bl	8012ae6 <atoi>
 8006392:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006394:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006396:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006398:	f00c fba5 	bl	8012ae6 <atoi>
 800639c:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800639e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80063a0:	f00c fba1 	bl	8012ae6 <atoi>
		if(pcParameterString5 != NULL){
 80063a4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80063a6:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	d010      	beq.n	80063ce <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80063ac:	2202      	movs	r2, #2
 80063ae:	49ad      	ldr	r1, [pc, #692]	; (8006664 <setCommand+0x37c>)
 80063b0:	0030      	movs	r0, r6
 80063b2:	f00d f8a5 	bl	8013500 <strncmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d100      	bne.n	80063bc <setCommand+0xd4>
 80063ba:	e145      	b.n	8006648 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80063bc:	2202      	movs	r2, #2
 80063be:	49aa      	ldr	r1, [pc, #680]	; (8006668 <setCommand+0x380>)
 80063c0:	0030      	movs	r0, r6
 80063c2:	f00d f89d 	bl	8013500 <strncmp>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d129      	bne.n	800641e <setCommand+0x136>
				temp84 =RTC_PM;
 80063ca:	2302      	movs	r3, #2
 80063cc:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063ce:	464b      	mov	r3, r9
 80063d0:	2b17      	cmp	r3, #23
 80063d2:	d824      	bhi.n	800641e <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80063d4:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063d6:	2f3b      	cmp	r7, #59	; 0x3b
 80063d8:	d821      	bhi.n	800641e <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80063da:	4653      	mov	r3, sl
 80063dc:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063de:	2e3b      	cmp	r6, #59	; 0x3b
 80063e0:	d81d      	bhi.n	800641e <setCommand+0x136>
				GetTimeDate();
 80063e2:	f006 fd1b 	bl	800ce1c <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80063e6:	4ba1      	ldr	r3, [pc, #644]	; (800666c <setCommand+0x384>)
 80063e8:	7d1a      	ldrb	r2, [r3, #20]
 80063ea:	7d59      	ldrb	r1, [r3, #21]
 80063ec:	7d98      	ldrb	r0, [r3, #22]
 80063ee:	4694      	mov	ip, r2
 80063f0:	8b1a      	ldrh	r2, [r3, #24]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	9701      	str	r7, [sp, #4]
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	4643      	mov	r3, r8
 80063fc:	9303      	str	r3, [sp, #12]
 80063fe:	464b      	mov	r3, r9
 8006400:	9600      	str	r6, [sp, #0]
 8006402:	9302      	str	r3, [sp, #8]
 8006404:	4663      	mov	r3, ip
 8006406:	f006 fcaf 	bl	800cd68 <BOS_CalendarConfig>
 800640a:	4681      	mov	r9, r0
	if(result == BOS_OK){
 800640c:	464b      	mov	r3, r9
 800640e:	2b00      	cmp	r3, #0
 8006410:	d100      	bne.n	8006414 <setCommand+0x12c>
 8006412:	e24d      	b.n	80068b0 <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 8006414:	464b      	mov	r3, r9
 8006416:	2b67      	cmp	r3, #103	; 0x67
 8006418:	d093      	beq.n	8006342 <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 800641a:	2b68      	cmp	r3, #104	; 0x68
 800641c:	d196      	bne.n	800634c <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800641e:	220f      	movs	r2, #15
 8006420:	4993      	ldr	r1, [pc, #588]	; (8006670 <setCommand+0x388>)
 8006422:	0028      	movs	r0, r5
 8006424:	f00c fe25 	bl	8013072 <memcpy>
 8006428:	e790      	b.n	800634c <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800642a:	aa0a      	add	r2, sp, #40	; 0x28
 800642c:	2102      	movs	r1, #2
 800642e:	0038      	movs	r0, r7
 8006430:	f007 f9d8 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006436:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006438:	1d1e      	adds	r6, r3, #4
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800643c:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800643e:	1f1f      	subs	r7, r3, #4
 8006440:	4b8c      	ldr	r3, [pc, #560]	; (8006674 <setCommand+0x38c>)
 8006442:	003a      	movs	r2, r7
 8006444:	0019      	movs	r1, r3
 8006446:	0030      	movs	r0, r6
 8006448:	4699      	mov	r9, r3
 800644a:	f00d f859 	bl	8013500 <strncmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d128      	bne.n	80064a4 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006452:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006454:	4988      	ldr	r1, [pc, #544]	; (8006678 <setCommand+0x390>)
 8006456:	0032      	movs	r2, r6
 8006458:	4640      	mov	r0, r8
 800645a:	f00d f851 	bl	8013500 <strncmp>
 800645e:	2800      	cmp	r0, #0
 8006460:	d100      	bne.n	8006464 <setCommand+0x17c>
 8006462:	e21a      	b.n	800689a <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006464:	0032      	movs	r2, r6
 8006466:	4985      	ldr	r1, [pc, #532]	; (800667c <setCommand+0x394>)
 8006468:	4640      	mov	r0, r8
 800646a:	f00d f849 	bl	8013500 <strncmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	d100      	bne.n	8006474 <setCommand+0x18c>
 8006472:	e256      	b.n	8006922 <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006474:	0032      	movs	r2, r6
 8006476:	4982      	ldr	r1, [pc, #520]	; (8006680 <setCommand+0x398>)
 8006478:	4640      	mov	r0, r8
 800647a:	f00d f841 	bl	8013500 <strncmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	d100      	bne.n	8006484 <setCommand+0x19c>
 8006482:	e222      	b.n	80068ca <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006484:	0032      	movs	r2, r6
 8006486:	497f      	ldr	r1, [pc, #508]	; (8006684 <setCommand+0x39c>)
 8006488:	4640      	mov	r0, r8
 800648a:	f00d f839 	bl	8013500 <strncmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	d1c5      	bne.n	800641e <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006492:	4b7d      	ldr	r3, [pc, #500]	; (8006688 <setCommand+0x3a0>)
 8006494:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006496:	208a      	movs	r0, #138	; 0x8a
 8006498:	7859      	ldrb	r1, [r3, #1]
 800649a:	0040      	lsls	r0, r0, #1
 800649c:	0209      	lsls	r1, r1, #8
 800649e:	f004 fe59 	bl	800b154 <EE_WriteVariable>
 80064a2:	e205      	b.n	80068b0 <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064a4:	003a      	movs	r2, r7
 80064a6:	4979      	ldr	r1, [pc, #484]	; (800668c <setCommand+0x3a4>)
 80064a8:	0030      	movs	r0, r6
 80064aa:	f00d f829 	bl	8013500 <strncmp>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d000      	beq.n	80064b4 <setCommand+0x1cc>
 80064b2:	e08d      	b.n	80065d0 <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064b6:	4970      	ldr	r1, [pc, #448]	; (8006678 <setCommand+0x390>)
 80064b8:	0032      	movs	r2, r6
 80064ba:	4640      	mov	r0, r8
 80064bc:	f00d f820 	bl	8013500 <strncmp>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d100      	bne.n	80064c6 <setCommand+0x1de>
 80064c4:	e239      	b.n	800693a <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064c6:	0032      	movs	r2, r6
 80064c8:	496c      	ldr	r1, [pc, #432]	; (800667c <setCommand+0x394>)
 80064ca:	4640      	mov	r0, r8
 80064cc:	f00d f818 	bl	8013500 <strncmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d100      	bne.n	80064d6 <setCommand+0x1ee>
 80064d4:	e213      	b.n	80068fe <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064d6:	0032      	movs	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	f00d f810 	bl	8013500 <strncmp>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d100      	bne.n	80064e6 <setCommand+0x1fe>
 80064e4:	e274      	b.n	80069d0 <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80064e6:	0032      	movs	r2, r6
 80064e8:	4966      	ldr	r1, [pc, #408]	; (8006684 <setCommand+0x39c>)
 80064ea:	4640      	mov	r0, r8
 80064ec:	f00d f808 	bl	8013500 <strncmp>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d194      	bne.n	800641e <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80064f4:	4b64      	ldr	r3, [pc, #400]	; (8006688 <setCommand+0x3a0>)
 80064f6:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064f8:	3015      	adds	r0, #21
 80064fa:	7819      	ldrb	r1, [r3, #0]
 80064fc:	30ff      	adds	r0, #255	; 0xff
 80064fe:	f004 fe29 	bl	800b154 <EE_WriteVariable>
 8006502:	e1d5      	b.n	80068b0 <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006504:	aa0a      	add	r2, sp, #40	; 0x28
 8006506:	2102      	movs	r1, #2
 8006508:	0038      	movs	r0, r7
 800650a:	f007 f96b 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800650e:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006510:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006512:	2103      	movs	r1, #3
 8006514:	0038      	movs	r0, r7
 8006516:	f007 f965 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800651a:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800651c:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800651e:	2104      	movs	r1, #4
 8006520:	0038      	movs	r0, r7
 8006522:	f007 f95f 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006526:	aa0d      	add	r2, sp, #52	; 0x34
 8006528:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800652a:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800652c:	0038      	movs	r0, r7
 800652e:	f007 f959 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8006532:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006534:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006536:	f00c fad6 	bl	8012ae6 <atoi>
 800653a:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 800653c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800653e:	f00c fad2 	bl	8012ae6 <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006542:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006544:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006546:	2206      	movs	r2, #6
 8006548:	4951      	ldr	r1, [pc, #324]	; (8006690 <setCommand+0x3a8>)
 800654a:	0038      	movs	r0, r7
 800654c:	f00c ffd8 	bl	8013500 <strncmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	d100      	bne.n	8006556 <setCommand+0x26e>
 8006554:	e0b6      	b.n	80066c4 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006556:	2207      	movs	r2, #7
 8006558:	494e      	ldr	r1, [pc, #312]	; (8006694 <setCommand+0x3ac>)
 800655a:	0038      	movs	r0, r7
 800655c:	f00c ffd0 	bl	8013500 <strncmp>
 8006560:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	2207      	movs	r2, #7
 8006566:	494c      	ldr	r1, [pc, #304]	; (8006698 <setCommand+0x3b0>)
 8006568:	0030      	movs	r0, r6
 800656a:	f00c ffc9 	bl	8013500 <strncmp>
 800656e:	9b06      	ldr	r3, [sp, #24]
 8006570:	4681      	mov	r9, r0
 8006572:	9007      	str	r0, [sp, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d100      	bne.n	800657a <setCommand+0x292>
 8006578:	e1a4      	b.n	80068c4 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800657a:	2209      	movs	r2, #9
 800657c:	4947      	ldr	r1, [pc, #284]	; (800669c <setCommand+0x3b4>)
 800657e:	0038      	movs	r0, r7
 8006580:	f00c ffbe 	bl	8013500 <strncmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	d100      	bne.n	800658a <setCommand+0x2a2>
 8006588:	e211      	b.n	80069ae <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800658a:	2208      	movs	r2, #8
 800658c:	4944      	ldr	r1, [pc, #272]	; (80066a0 <setCommand+0x3b8>)
 800658e:	0038      	movs	r0, r7
 8006590:	f00c ffb6 	bl	8013500 <strncmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	d100      	bne.n	800659a <setCommand+0x2b2>
 8006598:	e220      	b.n	80069dc <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800659a:	2206      	movs	r2, #6
 800659c:	4941      	ldr	r1, [pc, #260]	; (80066a4 <setCommand+0x3bc>)
 800659e:	0038      	movs	r0, r7
 80065a0:	f00c ffae 	bl	8013500 <strncmp>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d100      	bne.n	80065aa <setCommand+0x2c2>
 80065a8:	e22e      	b.n	8006a08 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80065aa:	2208      	movs	r2, #8
 80065ac:	493e      	ldr	r1, [pc, #248]	; (80066a8 <setCommand+0x3c0>)
 80065ae:	0038      	movs	r0, r7
 80065b0:	f00c ffa6 	bl	8013500 <strncmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x2d2>
 80065b8:	e229      	b.n	8006a0e <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80065ba:	2206      	movs	r2, #6
 80065bc:	493b      	ldr	r1, [pc, #236]	; (80066ac <setCommand+0x3c4>)
 80065be:	0038      	movs	r0, r7
 80065c0:	f00c ff9e 	bl	8013500 <strncmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d000      	beq.n	80065ca <setCommand+0x2e2>
 80065c8:	e262      	b.n	8006a90 <setCommand+0x7a8>
			temp81 =SUNDAY;
 80065ca:	2307      	movs	r3, #7
 80065cc:	469b      	mov	fp, r3
 80065ce:	e082      	b.n	80066d6 <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80065d0:	003a      	movs	r2, r7
 80065d2:	4937      	ldr	r1, [pc, #220]	; (80066b0 <setCommand+0x3c8>)
 80065d4:	0030      	movs	r0, r6
 80065d6:	f00c ff93 	bl	8013500 <strncmp>
 80065da:	4681      	mov	r9, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d100      	bne.n	80065e2 <setCommand+0x2fa>
 80065e0:	e1b7      	b.n	8006952 <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80065e2:	003a      	movs	r2, r7
 80065e4:	4933      	ldr	r1, [pc, #204]	; (80066b4 <setCommand+0x3cc>)
 80065e6:	0030      	movs	r0, r6
 80065e8:	f00c ff8a 	bl	8013500 <strncmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d100      	bne.n	80065f2 <setCommand+0x30a>
 80065f0:	e177      	b.n	80068e2 <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	4930      	ldr	r1, [pc, #192]	; (80066b8 <setCommand+0x3d0>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00c ff82 	bl	8013500 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d100      	bne.n	8006602 <setCommand+0x31a>
 8006600:	e1d8      	b.n	80069b4 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006602:	003a      	movs	r2, r7
 8006604:	492d      	ldr	r1, [pc, #180]	; (80066bc <setCommand+0x3d4>)
 8006606:	0030      	movs	r0, r6
 8006608:	f00c ff7a 	bl	8013500 <strncmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	d100      	bne.n	8006612 <setCommand+0x32a>
 8006610:	e1e7      	b.n	80069e2 <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006612:	003a      	movs	r2, r7
 8006614:	492a      	ldr	r1, [pc, #168]	; (80066c0 <setCommand+0x3d8>)
 8006616:	0030      	movs	r0, r6
 8006618:	f00c ff72 	bl	8013500 <strncmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	d000      	beq.n	8006622 <setCommand+0x33a>
 8006620:	e68f      	b.n	8006342 <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 8006622:	4640      	mov	r0, r8
 8006624:	f00c fa5f 	bl	8012ae6 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006628:	1e43      	subs	r3, r0, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	2bfe      	cmp	r3, #254	; 0xfe
 800662e:	d900      	bls.n	8006632 <setCommand+0x34a>
 8006630:	e6f5      	b.n	800641e <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006634:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 8006636:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006638:	0200      	lsls	r0, r0, #8
 800663a:	4301      	orrs	r1, r0
 800663c:	2018      	movs	r0, #24
 800663e:	b289      	uxth	r1, r1
 8006640:	30ff      	adds	r0, #255	; 0xff
 8006642:	f004 fd87 	bl	800b154 <EE_WriteVariable>
 8006646:	e133      	b.n	80068b0 <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006648:	2301      	movs	r3, #1
 800664a:	4698      	mov	r8, r3
 800664c:	e6bf      	b.n	80063ce <setCommand+0xe6>
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	200017dc 	.word	0x200017dc
 8006654:	080190ac 	.word	0x080190ac
 8006658:	08019324 	.word	0x08019324
 800665c:	08019334 	.word	0x08019334
 8006660:	08019134 	.word	0x08019134
 8006664:	0801932c 	.word	0x0801932c
 8006668:	08019330 	.word	0x08019330
 800666c:	20006860 	.word	0x20006860
 8006670:	080191d0 	.word	0x080191d0
 8006674:	080190b4 	.word	0x080190b4
 8006678:	08018264 	.word	0x08018264
 800667c:	08019220 	.word	0x08019220
 8006680:	08019228 	.word	0x08019228
 8006684:	080190c4 	.word	0x080190c4
 8006688:	200067e0 	.word	0x200067e0
 800668c:	080190cc 	.word	0x080190cc
 8006690:	0801933c 	.word	0x0801933c
 8006694:	08019344 	.word	0x08019344
 8006698:	0801934c 	.word	0x0801934c
 800669c:	08019354 	.word	0x08019354
 80066a0:	08019360 	.word	0x08019360
 80066a4:	0801936c 	.word	0x0801936c
 80066a8:	08019374 	.word	0x08019374
 80066ac:	08019380 	.word	0x08019380
 80066b0:	080190d4 	.word	0x080190d4
 80066b4:	080190e0 	.word	0x080190e0
 80066b8:	080190ec 	.word	0x080190ec
 80066bc:	080190fc 	.word	0x080190fc
 80066c0:	08019110 	.word	0x08019110
 80066c4:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80066c6:	2207      	movs	r2, #7
 80066c8:	49d3      	ldr	r1, [pc, #844]	; (8006a18 <setCommand+0x730>)
 80066ca:	0030      	movs	r0, r6
 80066cc:	f00c ff18 	bl	8013500 <strncmp>
			temp81 =MONDAY;
 80066d0:	2301      	movs	r3, #1
 80066d2:	4681      	mov	r9, r0
 80066d4:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066d6:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80066d8:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d123      	bne.n	8006726 <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066de:	4643      	mov	r3, r8
 80066e0:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066e2:	1e73      	subs	r3, r6, #1
 80066e4:	2b1e      	cmp	r3, #30
 80066e6:	d900      	bls.n	80066ea <setCommand+0x402>
 80066e8:	e699      	b.n	800641e <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066ea:	4653      	mov	r3, sl
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066f0:	4bca      	ldr	r3, [pc, #808]	; (8006a1c <setCommand+0x734>)
 80066f2:	4453      	add	r3, sl
 80066f4:	2b64      	cmp	r3, #100	; 0x64
 80066f6:	d900      	bls.n	80066fa <setCommand+0x412>
 80066f8:	e691      	b.n	800641e <setCommand+0x136>
				GetTimeDate();
 80066fa:	f006 fb8f 	bl	800ce1c <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066fe:	220c      	movs	r2, #12
 8006700:	4bc7      	ldr	r3, [pc, #796]	; (8006a20 <setCommand+0x738>)
 8006702:	0031      	movs	r1, r6
 8006704:	569a      	ldrsb	r2, [r3, r2]
 8006706:	0038      	movs	r0, r7
 8006708:	9204      	str	r2, [sp, #16]
 800670a:	7cda      	ldrb	r2, [r3, #19]
 800670c:	9203      	str	r2, [sp, #12]
 800670e:	7c9a      	ldrb	r2, [r3, #18]
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	7c5a      	ldrb	r2, [r3, #17]
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	4652      	mov	r2, sl
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	465b      	mov	r3, fp
 800671e:	f006 fb23 	bl	800cd68 <BOS_CalendarConfig>
 8006722:	4681      	mov	r9, r0
 8006724:	e672      	b.n	800640c <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006726:	2202      	movs	r2, #2
 8006728:	49be      	ldr	r1, [pc, #760]	; (8006a24 <setCommand+0x73c>)
 800672a:	0030      	movs	r0, r6
 800672c:	f00c fee8 	bl	8013500 <strncmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	d0d4      	beq.n	80066de <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006734:	2208      	movs	r2, #8
 8006736:	49bc      	ldr	r1, [pc, #752]	; (8006a28 <setCommand+0x740>)
 8006738:	0030      	movs	r0, r6
 800673a:	f00c fee1 	bl	8013500 <strncmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	d100      	bne.n	8006744 <setCommand+0x45c>
 8006742:	e1c8      	b.n	8006ad6 <setCommand+0x7ee>
 8006744:	2202      	movs	r2, #2
 8006746:	49b9      	ldr	r1, [pc, #740]	; (8006a2c <setCommand+0x744>)
 8006748:	0030      	movs	r0, r6
 800674a:	f00c fed9 	bl	8013500 <strncmp>
 800674e:	2800      	cmp	r0, #0
 8006750:	d100      	bne.n	8006754 <setCommand+0x46c>
 8006752:	e1c0      	b.n	8006ad6 <setCommand+0x7ee>
 8006754:	2300      	movs	r3, #0
 8006756:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006758:	2205      	movs	r2, #5
 800675a:	49b5      	ldr	r1, [pc, #724]	; (8006a30 <setCommand+0x748>)
 800675c:	0030      	movs	r0, r6
 800675e:	f00c fecf 	bl	8013500 <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d100      	bne.n	8006768 <setCommand+0x480>
 8006766:	e0d6      	b.n	8006916 <setCommand+0x62e>
 8006768:	2202      	movs	r2, #2
 800676a:	49b2      	ldr	r1, [pc, #712]	; (8006a34 <setCommand+0x74c>)
 800676c:	0030      	movs	r0, r6
 800676e:	f00c fec7 	bl	8013500 <strncmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	d100      	bne.n	8006778 <setCommand+0x490>
 8006776:	e0ce      	b.n	8006916 <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006778:	2205      	movs	r2, #5
 800677a:	49af      	ldr	r1, [pc, #700]	; (8006a38 <setCommand+0x750>)
 800677c:	0030      	movs	r0, r6
 800677e:	f00c febf 	bl	8013500 <strncmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	d100      	bne.n	8006788 <setCommand+0x4a0>
 8006786:	e145      	b.n	8006a14 <setCommand+0x72c>
 8006788:	2202      	movs	r2, #2
 800678a:	49ac      	ldr	r1, [pc, #688]	; (8006a3c <setCommand+0x754>)
 800678c:	0030      	movs	r0, r6
 800678e:	f00c feb7 	bl	8013500 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d100      	bne.n	8006798 <setCommand+0x4b0>
 8006796:	e13d      	b.n	8006a14 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006798:	2203      	movs	r2, #3
 800679a:	49a9      	ldr	r1, [pc, #676]	; (8006a40 <setCommand+0x758>)
 800679c:	0030      	movs	r0, r6
 800679e:	f00c feaf 	bl	8013500 <strncmp>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d100      	bne.n	80067a8 <setCommand+0x4c0>
 80067a6:	e192      	b.n	8006ace <setCommand+0x7e6>
 80067a8:	2202      	movs	r2, #2
 80067aa:	49a6      	ldr	r1, [pc, #664]	; (8006a44 <setCommand+0x75c>)
 80067ac:	0030      	movs	r0, r6
 80067ae:	f00c fea7 	bl	8013500 <strncmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d100      	bne.n	80067b8 <setCommand+0x4d0>
 80067b6:	e18a      	b.n	8006ace <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067b8:	2204      	movs	r2, #4
 80067ba:	49a3      	ldr	r1, [pc, #652]	; (8006a48 <setCommand+0x760>)
 80067bc:	0030      	movs	r0, r6
 80067be:	f00c fe9f 	bl	8013500 <strncmp>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d100      	bne.n	80067c8 <setCommand+0x4e0>
 80067c6:	e184      	b.n	8006ad2 <setCommand+0x7ea>
 80067c8:	2202      	movs	r2, #2
 80067ca:	49a0      	ldr	r1, [pc, #640]	; (8006a4c <setCommand+0x764>)
 80067cc:	0030      	movs	r0, r6
 80067ce:	f00c fe97 	bl	8013500 <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d100      	bne.n	80067d8 <setCommand+0x4f0>
 80067d6:	e17c      	b.n	8006ad2 <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80067d8:	2204      	movs	r2, #4
 80067da:	499d      	ldr	r1, [pc, #628]	; (8006a50 <setCommand+0x768>)
 80067dc:	0030      	movs	r0, r6
 80067de:	f00c fe8f 	bl	8013500 <strncmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d100      	bne.n	80067e8 <setCommand+0x500>
 80067e6:	e178      	b.n	8006ada <setCommand+0x7f2>
 80067e8:	2202      	movs	r2, #2
 80067ea:	499a      	ldr	r1, [pc, #616]	; (8006a54 <setCommand+0x76c>)
 80067ec:	0030      	movs	r0, r6
 80067ee:	f00c fe87 	bl	8013500 <strncmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d100      	bne.n	80067f8 <setCommand+0x510>
 80067f6:	e170      	b.n	8006ada <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80067f8:	2205      	movs	r2, #5
 80067fa:	4997      	ldr	r1, [pc, #604]	; (8006a58 <setCommand+0x770>)
 80067fc:	0030      	movs	r0, r6
 80067fe:	f00c fe7f 	bl	8013500 <strncmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	d100      	bne.n	8006808 <setCommand+0x520>
 8006806:	e170      	b.n	8006aea <setCommand+0x802>
 8006808:	2202      	movs	r2, #2
 800680a:	4994      	ldr	r1, [pc, #592]	; (8006a5c <setCommand+0x774>)
 800680c:	0030      	movs	r0, r6
 800680e:	f00c fe77 	bl	8013500 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d100      	bne.n	8006818 <setCommand+0x530>
 8006816:	e168      	b.n	8006aea <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006818:	2209      	movs	r2, #9
 800681a:	4991      	ldr	r1, [pc, #580]	; (8006a60 <setCommand+0x778>)
 800681c:	0030      	movs	r0, r6
 800681e:	f00c fe6f 	bl	8013500 <strncmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	d100      	bne.n	8006828 <setCommand+0x540>
 8006826:	e15e      	b.n	8006ae6 <setCommand+0x7fe>
 8006828:	2202      	movs	r2, #2
 800682a:	498e      	ldr	r1, [pc, #568]	; (8006a64 <setCommand+0x77c>)
 800682c:	0030      	movs	r0, r6
 800682e:	f00c fe67 	bl	8013500 <strncmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	d100      	bne.n	8006838 <setCommand+0x550>
 8006836:	e156      	b.n	8006ae6 <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006838:	2207      	movs	r2, #7
 800683a:	498b      	ldr	r1, [pc, #556]	; (8006a68 <setCommand+0x780>)
 800683c:	0030      	movs	r0, r6
 800683e:	f00c fe5f 	bl	8013500 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d100      	bne.n	8006848 <setCommand+0x560>
 8006846:	e14c      	b.n	8006ae2 <setCommand+0x7fa>
 8006848:	2202      	movs	r2, #2
 800684a:	4988      	ldr	r1, [pc, #544]	; (8006a6c <setCommand+0x784>)
 800684c:	0030      	movs	r0, r6
 800684e:	f00c fe57 	bl	8013500 <strncmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	d100      	bne.n	8006858 <setCommand+0x570>
 8006856:	e144      	b.n	8006ae2 <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006858:	2208      	movs	r2, #8
 800685a:	4985      	ldr	r1, [pc, #532]	; (8006a70 <setCommand+0x788>)
 800685c:	0030      	movs	r0, r6
 800685e:	f00c fe4f 	bl	8013500 <strncmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	d100      	bne.n	8006868 <setCommand+0x580>
 8006866:	e13a      	b.n	8006ade <setCommand+0x7f6>
 8006868:	2202      	movs	r2, #2
 800686a:	4982      	ldr	r1, [pc, #520]	; (8006a74 <setCommand+0x78c>)
 800686c:	0030      	movs	r0, r6
 800686e:	f00c fe47 	bl	8013500 <strncmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	d100      	bne.n	8006878 <setCommand+0x590>
 8006876:	e132      	b.n	8006ade <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006878:	2208      	movs	r2, #8
 800687a:	497f      	ldr	r1, [pc, #508]	; (8006a78 <setCommand+0x790>)
 800687c:	0030      	movs	r0, r6
 800687e:	f00c fe3f 	bl	8013500 <strncmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	d007      	beq.n	8006896 <setCommand+0x5ae>
 8006886:	2202      	movs	r2, #2
 8006888:	497c      	ldr	r1, [pc, #496]	; (8006a7c <setCommand+0x794>)
 800688a:	0030      	movs	r0, r6
 800688c:	f00c fe38 	bl	8013500 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d000      	beq.n	8006896 <setCommand+0x5ae>
 8006894:	e5c3      	b.n	800641e <setCommand+0x136>
			temp82 =DECEMBER;
 8006896:	270c      	movs	r7, #12
 8006898:	e03e      	b.n	8006918 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800689a:	2260      	movs	r2, #96	; 0x60
 800689c:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800689e:	3015      	adds	r0, #21
 80068a0:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 80068a2:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068a4:	2360      	movs	r3, #96	; 0x60
 80068a6:	0209      	lsls	r1, r1, #8
 80068a8:	4319      	orrs	r1, r3
 80068aa:	30ff      	adds	r0, #255	; 0xff
 80068ac:	f004 fc52 	bl	800b154 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80068b0:	2300      	movs	r3, #0
 80068b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80068b6:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80068b8:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80068ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068bc:	4971      	ldr	r1, [pc, #452]	; (8006a84 <setCommand+0x79c>)
 80068be:	f00c fddb 	bl	8013478 <sprintf>
	return pdFALSE;
 80068c2:	e543      	b.n	800634c <setCommand+0x64>
			temp81 =TUESDAY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	469b      	mov	fp, r3
 80068c8:	e705      	b.n	80066d6 <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	4b6c      	ldr	r3, [pc, #432]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068ce:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80068d0:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068d2:	7859      	ldrb	r1, [r3, #1]
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	0209      	lsls	r1, r1, #8
 80068d8:	4319      	orrs	r1, r3
 80068da:	30ff      	adds	r0, #255	; 0xff
 80068dc:	f004 fc3a 	bl	800b154 <EE_WriteVariable>
 80068e0:	e7e6      	b.n	80068b0 <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80068e2:	4640      	mov	r0, r8
 80068e4:	f00c f8ff 	bl	8012ae6 <atoi>
 80068e8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d100      	bne.n	80068f0 <setCommand+0x608>
 80068ee:	e596      	b.n	800641e <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f0:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80068f2:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f4:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80068f6:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f8:	f004 fc2c 	bl	800b154 <EE_WriteVariable>
 80068fc:	e7d8      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80068fe:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006900:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006902:	4b5f      	ldr	r3, [pc, #380]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006904:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006906:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	3015      	adds	r0, #21
 800690c:	4319      	orrs	r1, r3
 800690e:	30ff      	adds	r0, #255	; 0xff
 8006910:	f004 fc20 	bl	800b154 <EE_WriteVariable>
 8006914:	e7cc      	b.n	80068b0 <setCommand+0x5c8>
			temp82 =MARCH;
 8006916:	2703      	movs	r7, #3
		if(result == BOS_OK){
 8006918:	464b      	mov	r3, r9
 800691a:	2b00      	cmp	r3, #0
 800691c:	d000      	beq.n	8006920 <setCommand+0x638>
 800691e:	e579      	b.n	8006414 <setCommand+0x12c>
 8006920:	e6dd      	b.n	80066de <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006922:	2220      	movs	r2, #32
 8006924:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006926:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006928:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800692a:	7859      	ldrb	r1, [r3, #1]
 800692c:	2320      	movs	r3, #32
 800692e:	0209      	lsls	r1, r1, #8
 8006930:	4319      	orrs	r1, r3
 8006932:	30ff      	adds	r0, #255	; 0xff
 8006934:	f004 fc0e 	bl	800b154 <EE_WriteVariable>
 8006938:	e7ba      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 800693a:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800693c:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 800693e:	4b50      	ldr	r3, [pc, #320]	; (8006a80 <setCommand+0x798>)
 8006940:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006942:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006944:	0089      	lsls	r1, r1, #2
 8006946:	3015      	adds	r0, #21
 8006948:	4319      	orrs	r1, r3
 800694a:	30ff      	adds	r0, #255	; 0xff
 800694c:	f004 fc02 	bl	800b154 <EE_WriteVariable>
 8006950:	e7ae      	b.n	80068b0 <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 8006952:	4640      	mov	r0, r8
 8006954:	f00c f8c7 	bl	8012ae6 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006958:	23e1      	movs	r3, #225	; 0xe1
 800695a:	031b      	lsls	r3, r3, #12
 800695c:	4298      	cmp	r0, r3
 800695e:	d900      	bls.n	8006962 <setCommand+0x67a>
 8006960:	e55d      	b.n	800641e <setCommand+0x136>
				BOS.clibaudrate =temp2;
 8006962:	4e2f      	ldr	r6, [pc, #188]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006964:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006966:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006968:	208c      	movs	r0, #140	; 0x8c
 800696a:	0040      	lsls	r0, r0, #1
 800696c:	f004 fbf2 	bl	800b154 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006970:	201a      	movs	r0, #26
 8006972:	8971      	ldrh	r1, [r6, #10]
 8006974:	30ff      	adds	r0, #255	; 0xff
 8006976:	f004 fbed 	bl	800b154 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800697a:	4649      	mov	r1, r9
 800697c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800697e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006980:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006982:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006986:	493f      	ldr	r1, [pc, #252]	; (8006a84 <setCommand+0x79c>)
 8006988:	f00c fd76 	bl	8013478 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800698c:	0028      	movs	r0, r5
 800698e:	f7f9 fbc3 	bl	8000118 <strlen>
 8006992:	0004      	movs	r4, r0
 8006994:	2230      	movs	r2, #48	; 0x30
 8006996:	1828      	adds	r0, r5, r0
 8006998:	493b      	ldr	r1, [pc, #236]	; (8006a88 <setCommand+0x7a0>)
 800699a:	f00c fb6a 	bl	8013072 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800699e:	0020      	movs	r0, r4
 80069a0:	302f      	adds	r0, #47	; 0x2f
 80069a2:	1828      	adds	r0, r5, r0
 80069a4:	22b2      	movs	r2, #178	; 0xb2
 80069a6:	4939      	ldr	r1, [pc, #228]	; (8006a8c <setCommand+0x7a4>)
 80069a8:	f00c fb63 	bl	8013072 <memcpy>
 80069ac:	e4ce      	b.n	800634c <setCommand+0x64>
			temp81 =WEDNESDAY;
 80069ae:	2303      	movs	r3, #3
 80069b0:	469b      	mov	fp, r3
 80069b2:	e690      	b.n	80066d6 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80069b4:	4640      	mov	r0, r8
 80069b6:	f00c f896 	bl	8012ae6 <atoi>
 80069ba:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069bc:	2900      	cmp	r1, #0
 80069be:	d100      	bne.n	80069c2 <setCommand+0x6da>
 80069c0:	e52d      	b.n	800641e <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069c2:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 80069c4:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069c6:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 80069c8:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069ca:	f004 fbc3 	bl	800b154 <EE_WriteVariable>
 80069ce:	e76f      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80069d0:	2202      	movs	r2, #2
 80069d2:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069d4:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80069d6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	e7b3      	b.n	8006944 <setCommand+0x65c>
			temp81 =THURSDAY;
 80069dc:	2304      	movs	r3, #4
 80069de:	469b      	mov	fp, r3
 80069e0:	e679      	b.n	80066d6 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80069e2:	4640      	mov	r0, r8
 80069e4:	f00c f87f 	bl	8012ae6 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069e8:	1e43      	subs	r3, r0, #1
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2bfe      	cmp	r3, #254	; 0xfe
 80069ee:	d900      	bls.n	80069f2 <setCommand+0x70a>
 80069f0:	e515      	b.n	800641e <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <setCommand+0x738>)
 80069f4:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f6:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80069f8:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069fa:	0209      	lsls	r1, r1, #8
 80069fc:	4301      	orrs	r1, r0
 80069fe:	2018      	movs	r0, #24
 8006a00:	30ff      	adds	r0, #255	; 0xff
 8006a02:	f004 fba7 	bl	800b154 <EE_WriteVariable>
 8006a06:	e753      	b.n	80068b0 <setCommand+0x5c8>
			temp81 =FRIDAY;
 8006a08:	2305      	movs	r3, #5
 8006a0a:	469b      	mov	fp, r3
 8006a0c:	e663      	b.n	80066d6 <setCommand+0x3ee>
			temp81 =SATURDAY;
 8006a0e:	2306      	movs	r3, #6
 8006a10:	469b      	mov	fp, r3
 8006a12:	e660      	b.n	80066d6 <setCommand+0x3ee>
			temp82 =APRIL;
 8006a14:	2704      	movs	r7, #4
 8006a16:	e77f      	b.n	8006918 <setCommand+0x630>
 8006a18:	0801934c 	.word	0x0801934c
 8006a1c:	fffff830 	.word	0xfffff830
 8006a20:	20006860 	.word	0x20006860
 8006a24:	08019408 	.word	0x08019408
 8006a28:	0801940c 	.word	0x0801940c
 8006a2c:	08019418 	.word	0x08019418
 8006a30:	08019388 	.word	0x08019388
 8006a34:	08019390 	.word	0x08019390
 8006a38:	08019394 	.word	0x08019394
 8006a3c:	0801939c 	.word	0x0801939c
 8006a40:	080193a0 	.word	0x080193a0
 8006a44:	080193a4 	.word	0x080193a4
 8006a48:	080193a8 	.word	0x080193a8
 8006a4c:	080193b0 	.word	0x080193b0
 8006a50:	080193b4 	.word	0x080193b4
 8006a54:	080193bc 	.word	0x080193bc
 8006a58:	080193c0 	.word	0x080193c0
 8006a5c:	080193c8 	.word	0x080193c8
 8006a60:	080193cc 	.word	0x080193cc
 8006a64:	080193d8 	.word	0x080193d8
 8006a68:	080193dc 	.word	0x080193dc
 8006a6c:	080193e4 	.word	0x080193e4
 8006a70:	080193e8 	.word	0x080193e8
 8006a74:	080193f4 	.word	0x080193f4
 8006a78:	080193f8 	.word	0x080193f8
 8006a7c:	08019404 	.word	0x08019404
 8006a80:	200067e0 	.word	0x200067e0
 8006a84:	0801922c 	.word	0x0801922c
 8006a88:	08019240 	.word	0x08019240
 8006a8c:	08019270 	.word	0x08019270
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d100      	bne.n	8006a98 <setCommand+0x7b0>
 8006a96:	e4c2      	b.n	800641e <setCommand+0x136>
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4915      	ldr	r1, [pc, #84]	; (8006af0 <setCommand+0x808>)
 8006a9c:	0030      	movs	r0, r6
 8006a9e:	f00c fd2f 	bl	8013500 <strncmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d100      	bne.n	8006aa8 <setCommand+0x7c0>
 8006aa6:	e4ba      	b.n	800641e <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	4912      	ldr	r1, [pc, #72]	; (8006af4 <setCommand+0x80c>)
 8006aac:	0030      	movs	r0, r6
 8006aae:	f00c fd27 	bl	8013500 <strncmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <setCommand+0x7d0>
 8006ab6:	e4b2      	b.n	800641e <setCommand+0x136>
 8006ab8:	2202      	movs	r2, #2
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <setCommand+0x810>)
 8006abc:	0030      	movs	r0, r6
 8006abe:	f00c fd1f 	bl	8013500 <strncmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d100      	bne.n	8006ac8 <setCommand+0x7e0>
 8006ac6:	e4aa      	b.n	800641e <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 8006ac8:	2368      	movs	r3, #104	; 0x68
 8006aca:	4699      	mov	r9, r3
 8006acc:	e644      	b.n	8006758 <setCommand+0x470>
			temp82 =MAY;
 8006ace:	2705      	movs	r7, #5
 8006ad0:	e722      	b.n	8006918 <setCommand+0x630>
			temp82 =JUNE;
 8006ad2:	2706      	movs	r7, #6
 8006ad4:	e720      	b.n	8006918 <setCommand+0x630>
			temp82 =FEBRUARY;
 8006ad6:	2702      	movs	r7, #2
 8006ad8:	e601      	b.n	80066de <setCommand+0x3f6>
			temp82 =JULY;
 8006ada:	2707      	movs	r7, #7
 8006adc:	e71c      	b.n	8006918 <setCommand+0x630>
			temp82 =NOVEMBER;
 8006ade:	270b      	movs	r7, #11
 8006ae0:	e71a      	b.n	8006918 <setCommand+0x630>
			temp82 =OCTOBER;
 8006ae2:	270a      	movs	r7, #10
 8006ae4:	e718      	b.n	8006918 <setCommand+0x630>
			temp82 =SEPTEMBER;
 8006ae6:	2709      	movs	r7, #9
 8006ae8:	e716      	b.n	8006918 <setCommand+0x630>
			temp82 =AUGUST;
 8006aea:	2708      	movs	r7, #8
 8006aec:	e714      	b.n	8006918 <setCommand+0x630>
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	08019408 	.word	0x08019408
 8006af4:	0801940c 	.word	0x0801940c
 8006af8:	08019418 	.word	0x08019418

08006afc <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006afc:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006afe:	b530      	push	{r4, r5, lr}
 8006b00:	b083      	sub	sp, #12
 8006b02:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b04:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b06:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b08:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006b0a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b0c:	f006 fe6a 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b10:	2300      	movs	r3, #0
 8006b12:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b14:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b16:	2b70      	cmp	r3, #112	; 0x70
 8006b18:	d00d      	beq.n	8006b36 <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f004 ff16 	bl	800b94c <RemovePortButton>
	if(result == BOS_OK){
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d105      	bne.n	8006b30 <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006b24:	0023      	movs	r3, r4
 8006b26:	0022      	movs	r2, r4
 8006b28:	4905      	ldr	r1, [pc, #20]	; (8006b40 <removebuttonCommand+0x44>)
 8006b2a:	0028      	movs	r0, r5
 8006b2c:	f00c fca4 	bl	8013478 <sprintf>
}
 8006b30:	2000      	movs	r0, #0
 8006b32:	b003      	add	sp, #12
 8006b34:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b36:	3001      	adds	r0, #1
 8006b38:	f00b ffdb 	bl	8012af2 <atol>
 8006b3c:	b2c4      	uxtb	r4, r0
 8006b3e:	e7ec      	b.n	8006b1a <removebuttonCommand+0x1e>
 8006b40:	0801941c 	.word	0x0801941c

08006b44 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	46ce      	mov	lr, r9
 8006b48:	4647      	mov	r7, r8
 8006b4a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006b4c:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b52:	aa02      	add	r2, sp, #8
 8006b54:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b56:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b58:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b5e:	f006 fe41 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b62:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b66:	003a      	movs	r2, r7
 8006b68:	4924      	ldr	r1, [pc, #144]	; (8006bfc <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	4699      	mov	r9, r3
 8006b6e:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b70:	f00c fcc6 	bl	8013500 <strncmp>
		type =MOMENTARY_NO;
 8006b74:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d007      	beq.n	8006b8a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b7a:	003a      	movs	r2, r7
 8006b7c:	4920      	ldr	r1, [pc, #128]	; (8006c00 <addbuttonCommand+0xbc>)
 8006b7e:	0020      	movs	r0, r4
 8006b80:	f00c fcbe 	bl	8013500 <strncmp>
		type =MOMENTARY_NC;
 8006b84:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d11f      	bne.n	8006bca <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b8a:	aa03      	add	r2, sp, #12
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	0030      	movs	r0, r6
 8006b90:	f006 fe28 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006b94:	2300      	movs	r3, #0
 8006b96:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006b98:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006b9a:	2b70      	cmp	r3, #112	; 0x70
 8006b9c:	d026      	beq.n	8006bec <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	0028      	movs	r0, r5
 8006ba2:	f004 fe59 	bl	800b858 <AddPortButton>
	if(result == BOS_OK){
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d109      	bne.n	8006bbe <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006baa:	464b      	mov	r3, r9
 8006bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bae:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006bb0:	4914      	ldr	r1, [pc, #80]	; (8006c04 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006bb2:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006bb4:	9400      	str	r4, [sp, #0]
 8006bb6:	0023      	movs	r3, r4
 8006bb8:	4640      	mov	r0, r8
 8006bba:	f00c fc5d 	bl	8013478 <sprintf>
}
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bc0c      	pop	{r2, r3}
 8006bc4:	4690      	mov	r8, r2
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bca:	003a      	movs	r2, r7
 8006bcc:	490e      	ldr	r1, [pc, #56]	; (8006c08 <addbuttonCommand+0xc4>)
 8006bce:	0020      	movs	r0, r4
 8006bd0:	f00c fc96 	bl	8013500 <strncmp>
		type =ONOFF_NO;
 8006bd4:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0d7      	beq.n	8006b8a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006bda:	003a      	movs	r2, r7
 8006bdc:	490b      	ldr	r1, [pc, #44]	; (8006c0c <addbuttonCommand+0xc8>)
 8006bde:	0020      	movs	r0, r4
 8006be0:	f00c fc8e 	bl	8013500 <strncmp>
		type =ONOFF_NC;
 8006be4:	4245      	negs	r5, r0
 8006be6:	4145      	adcs	r5, r0
 8006be8:	00ad      	lsls	r5, r5, #2
 8006bea:	e7ce      	b.n	8006b8a <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006bec:	3001      	adds	r0, #1
 8006bee:	f00b ff80 	bl	8012af2 <atol>
 8006bf2:	b2c4      	uxtb	r4, r0
 8006bf4:	e7d3      	b.n	8006b9e <addbuttonCommand+0x5a>
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	200017dc 	.word	0x200017dc
 8006bfc:	08019444 	.word	0x08019444
 8006c00:	08019454 	.word	0x08019454
 8006c04:	0801947c 	.word	0x0801947c
 8006c08:	08019464 	.word	0x08019464
 8006c0c:	08019470 	.word	0x08019470

08006c10 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	46de      	mov	lr, fp
 8006c14:	464e      	mov	r6, r9
 8006c16:	4657      	mov	r7, sl
 8006c18:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c1a:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c1c:	0014      	movs	r4, r2
 8006c1e:	b5e0      	push	{r5, r6, r7, lr}
 8006c20:	b099      	sub	sp, #100	; 0x64
 8006c22:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c24:	220a      	movs	r2, #10
 8006c26:	2100      	movs	r1, #0
 8006c28:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c2a:	9308      	str	r3, [sp, #32]
 8006c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2e:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c32:	930c      	str	r3, [sp, #48]	; 0x30
 8006c34:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006c36:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c38:	f00c fa24 	bl	8013084 <memset>
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	2100      	movs	r1, #0
 8006c40:	a812      	add	r0, sp, #72	; 0x48
 8006c42:	f00c fa1f 	bl	8013084 <memset>
 8006c46:	220a      	movs	r2, #10
 8006c48:	2100      	movs	r1, #0
 8006c4a:	a815      	add	r0, sp, #84	; 0x54
 8006c4c:	f00c fa1a 	bl	8013084 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c50:	aa08      	add	r2, sp, #32
 8006c52:	2101      	movs	r1, #1
 8006c54:	0020      	movs	r0, r4
 8006c56:	f006 fdc5 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006c5a:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c5c:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006c5e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c60:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006c62:	2b50      	cmp	r3, #80	; 0x50
 8006c64:	d100      	bne.n	8006c68 <scastCommand+0x58>
 8006c66:	e085      	b.n	8006d74 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c68:	aa09      	add	r2, sp, #36	; 0x24
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	f006 fdb9 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c74:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c76:	a80f      	add	r0, sp, #60	; 0x3c
 8006c78:	f00c fc53 	bl	8013522 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006c7c:	a80f      	add	r0, sp, #60	; 0x3c
 8006c7e:	f7fd fbf5 	bl	800446c <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c82:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006c84:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c86:	2103      	movs	r1, #3
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f006 fdab 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006c8e:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c90:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006c92:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c94:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006c96:	2b70      	cmp	r3, #112	; 0x70
 8006c98:	d066      	beq.n	8006d68 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	f006 fda0 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006ca6:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006ca8:	a812      	add	r0, sp, #72	; 0x48
 8006caa:	f00c fc3a 	bl	8013522 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006cae:	a812      	add	r0, sp, #72	; 0x48
 8006cb0:	f7fd fbdc 	bl	800446c <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cb4:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006cb6:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cb8:	2105      	movs	r1, #5
 8006cba:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006cbc:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cbe:	f006 fd91 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc4:	492e      	ldr	r1, [pc, #184]	; (8006d80 <scastCommand+0x170>)
 8006cc6:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cc8:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cca:	4698      	mov	r8, r3
 8006ccc:	f00c fc18 	bl	8013500 <strncmp>
		direction =FORWARD;
 8006cd0:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d007      	beq.n	8006ce6 <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	492a      	ldr	r1, [pc, #168]	; (8006d84 <scastCommand+0x174>)
 8006cda:	0038      	movs	r0, r7
 8006cdc:	f00c fc10 	bl	8013500 <strncmp>
		direction =BACKWARD;
 8006ce0:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d137      	bne.n	8006d56 <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006ce6:	0039      	movs	r1, r7
 8006ce8:	4642      	mov	r2, r8
 8006cea:	a815      	add	r0, sp, #84	; 0x54
 8006cec:	f00c fc19 	bl	8013522 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006cf0:	aa0d      	add	r2, sp, #52	; 0x34
 8006cf2:	2106      	movs	r1, #6
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	f006 fd75 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006cfa:	f00b fefa 	bl	8012af2 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006cfe:	aa0e      	add	r2, sp, #56	; 0x38
 8006d00:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d02:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d04:	0020      	movs	r0, r4
 8006d06:	f006 fd6d 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d0a:	f00b fef2 	bl	8012af2 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d0e:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d10:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d12:	9303      	str	r3, [sp, #12]
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	9701      	str	r7, [sp, #4]
 8006d18:	9600      	str	r6, [sp, #0]
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	0029      	movs	r1, r5
 8006d20:	4648      	mov	r0, r9
 8006d22:	f001 fb35 	bl	8008390 <StartScastDMAStream>
	if(result == BOS_OK){
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d10d      	bne.n	8006d46 <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006d2a:	ab12      	add	r3, sp, #72	; 0x48
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	4653      	mov	r3, sl
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	ab0f      	add	r3, sp, #60	; 0x3c
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	9404      	str	r4, [sp, #16]
 8006d38:	9703      	str	r7, [sp, #12]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	aa15      	add	r2, sp, #84	; 0x54
 8006d3e:	4912      	ldr	r1, [pc, #72]	; (8006d88 <scastCommand+0x178>)
 8006d40:	9807      	ldr	r0, [sp, #28]
 8006d42:	f00c fb99 	bl	8013478 <sprintf>
}
 8006d46:	2000      	movs	r0, #0
 8006d48:	b019      	add	sp, #100	; 0x64
 8006d4a:	bc3c      	pop	{r2, r3, r4, r5}
 8006d4c:	4690      	mov	r8, r2
 8006d4e:	4699      	mov	r9, r3
 8006d50:	46a2      	mov	sl, r4
 8006d52:	46ab      	mov	fp, r5
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	4642      	mov	r2, r8
 8006d58:	490c      	ldr	r1, [pc, #48]	; (8006d8c <scastCommand+0x17c>)
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	f00c fbd0 	bl	8013500 <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4246      	negs	r6, r0
 8006d62:	4146      	adcs	r6, r0
 8006d64:	0076      	lsls	r6, r6, #1
 8006d66:	e7be      	b.n	8006ce6 <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f00b fec2 	bl	8012af2 <atol>
 8006d6e:	b2c3      	uxtb	r3, r0
 8006d70:	469a      	mov	sl, r3
 8006d72:	e792      	b.n	8006c9a <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d74:	3001      	adds	r0, #1
 8006d76:	f00b febc 	bl	8012af2 <atol>
 8006d7a:	b2c3      	uxtb	r3, r0
 8006d7c:	4699      	mov	r9, r3
 8006d7e:	e773      	b.n	8006c68 <scastCommand+0x58>
 8006d80:	080194b0 	.word	0x080194b0
 8006d84:	080194b8 	.word	0x080194b8
 8006d88:	080194d4 	.word	0x080194d4
 8006d8c:	080194c4 	.word	0x080194c4

08006d90 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006d92:	4d22      	ldr	r5, [pc, #136]	; (8006e1c <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d94:	b083      	sub	sp, #12
	if(N > 1)
 8006d96:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d98:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006d9a:	2700      	movs	r7, #0
	if(N > 1)
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	d903      	bls.n	8006da8 <infoCommand+0x18>
		result =ReadPortsDir();
 8006da0:	f006 fb10 	bl	800d3c4 <ReadPortsDir>
 8006da4:	0007      	movs	r7, r0
 8006da6:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006da8:	491d      	ldr	r1, [pc, #116]	; (8006e20 <infoCommand+0x90>)
 8006daa:	0020      	movs	r0, r4
 8006dac:	f00c fb64 	bl	8013478 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006db0:	2601      	movs	r6, #1
 8006db2:	0020      	movs	r0, r4
 8006db4:	f7f9 f9b0 	bl	8000118 <strlen>
 8006db8:	4d1a      	ldr	r5, [pc, #104]	; (8006e24 <infoCommand+0x94>)
 8006dba:	4276      	negs	r6, r6
 8006dbc:	b282      	uxth	r2, r0
 8006dbe:	2332      	movs	r3, #50	; 0x32
 8006dc0:	7828      	ldrb	r0, [r5, #0]
 8006dc2:	0021      	movs	r1, r4
 8006dc4:	9600      	str	r6, [sp, #0]
 8006dc6:	f006 fa67 	bl	800d298 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006dca:	2213      	movs	r2, #19
 8006dcc:	4916      	ldr	r1, [pc, #88]	; (8006e28 <infoCommand+0x98>)
 8006dce:	0020      	movs	r0, r4
 8006dd0:	f00c f94f 	bl	8013072 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006dd4:	7828      	ldrb	r0, [r5, #0]
 8006dd6:	2332      	movs	r3, #50	; 0x32
 8006dd8:	2212      	movs	r2, #18
 8006dda:	0021      	movs	r1, r4
 8006ddc:	9600      	str	r6, [sp, #0]
 8006dde:	f006 fa5b 	bl	800d298 <writePxMutex>
	DisplayTopology(PcPort);
 8006de2:	7828      	ldrb	r0, [r5, #0]
 8006de4:	f7fd f880 	bl	8003ee8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006de8:	7828      	ldrb	r0, [r5, #0]
 8006dea:	f7fd f94f 	bl	800408c <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006dee:	2f02      	cmp	r7, #2
 8006df0:	d007      	beq.n	8006e02 <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006df2:	2202      	movs	r2, #2
 8006df4:	490d      	ldr	r1, [pc, #52]	; (8006e2c <infoCommand+0x9c>)
 8006df6:	0020      	movs	r0, r4
 8006df8:	f00c f93b 	bl	8013072 <memcpy>
}
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	b003      	add	sp, #12
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e02:	2244      	movs	r2, #68	; 0x44
 8006e04:	490a      	ldr	r1, [pc, #40]	; (8006e30 <infoCommand+0xa0>)
 8006e06:	0020      	movs	r0, r4
 8006e08:	f00c f933 	bl	8013072 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e0c:	7828      	ldrb	r0, [r5, #0]
 8006e0e:	2332      	movs	r3, #50	; 0x32
 8006e10:	9600      	str	r6, [sp, #0]
 8006e12:	2243      	movs	r2, #67	; 0x43
 8006e14:	0021      	movs	r1, r4
 8006e16:	f006 fa3f 	bl	800d298 <writePxMutex>
 8006e1a:	e7ea      	b.n	8006df2 <infoCommand+0x62>
 8006e1c:	20000008 	.word	0x20000008
 8006e20:	0801955c 	.word	0x0801955c
 8006e24:	20000c30 	.word	0x20000c30
 8006e28:	08019578 	.word	0x08019578
 8006e2c:	08018160 	.word	0x08018160
 8006e30:	0801958c 	.word	0x0801958c

08006e34 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e34:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7fd f9a2 	bl	8004180 <DisplayModuleStatus>
}
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e42:	46de      	mov	lr, fp
 8006e44:	464e      	mov	r6, r9
 8006e46:	4645      	mov	r5, r8
 8006e48:	4657      	mov	r7, sl
 8006e4a:	b5e0      	push	{r5, r6, r7, lr}
 8006e4c:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006e4e:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e50:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006e52:	2100      	movs	r1, #0
 8006e54:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e56:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006e58:	0030      	movs	r0, r6
 8006e5a:	f00c f913 	bl	8013084 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006e5e:	220a      	movs	r2, #10
 8006e60:	2100      	movs	r1, #0
 8006e62:	a803      	add	r0, sp, #12
 8006e64:	f00c f90e 	bl	8013084 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e68:	4d52      	ldr	r5, [pc, #328]	; (8006fb4 <groupCommand+0x174>)
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	002a      	movs	r2, r5
 8006e6e:	4648      	mov	r0, r9
 8006e70:	3250      	adds	r2, #80	; 0x50
 8006e72:	f006 fcb7 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e76:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e78:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e7a:	a803      	add	r0, sp, #12
 8006e7c:	f00c fb51 	bl	8013522 <strncpy>
 8006e80:	4c4d      	ldr	r4, [pc, #308]	; (8006fb8 <groupCommand+0x178>)
 8006e82:	0027      	movs	r7, r4
 8006e84:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006e86:	0021      	movs	r1, r4
 8006e88:	a803      	add	r0, sp, #12
 8006e8a:	f7f9 f93b 	bl	8000104 <strcmp>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d049      	beq.n	8006f26 <groupCommand+0xe6>
 8006e92:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e94:	42a7      	cmp	r7, r4
 8006e96:	d1f6      	bne.n	8006e86 <groupCommand+0x46>
	type =1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	9301      	str	r3, [sp, #4]
	count =2;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4946      	ldr	r1, [pc, #280]	; (8006fbc <groupCommand+0x17c>)
 8006ea4:	4640      	mov	r0, r8
	count =2;
 8006ea6:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ea8:	f00c f8e3 	bl	8013072 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006eac:	002a      	movs	r2, r5
 8006eae:	2102      	movs	r1, #2
 8006eb0:	3258      	adds	r2, #88	; 0x58
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f006 fc96 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8006eb8:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d069      	beq.n	8006f92 <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006ec2:	4b3f      	ldr	r3, [pc, #252]	; (8006fc0 <groupCommand+0x180>)
		if(count > 2)
 8006ec4:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006ec6:	469b      	mov	fp, r3
 8006ec8:	e00e      	b.n	8006ee8 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006eca:	0031      	movs	r1, r6
 8006ecc:	4640      	mov	r0, r8
 8006ece:	f00c faf3 	bl	80134b8 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006ed2:	002a      	movs	r2, r5
 8006ed4:	3401      	adds	r4, #1
 8006ed6:	b261      	sxtb	r1, r4
 8006ed8:	3258      	adds	r2, #88	; 0x58
 8006eda:	4648      	mov	r0, r9
 8006edc:	55e9      	strb	r1, [r5, r7]
 8006ede:	f006 fc81 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
 8006ee2:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d03e      	beq.n	8006f66 <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006ee8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006eea:	0001      	movs	r1, r0
 8006eec:	0022      	movs	r2, r4
 8006eee:	0030      	movs	r0, r6
 8006ef0:	f00c fb17 	bl	8013522 <strncpy>
		module[xParameterStringLength] ='\0';
 8006ef4:	4653      	mov	r3, sl
		modID =GetID(module);
 8006ef6:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006ef8:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006efa:	f7fd fab7 	bl	800446c <GetID>
		if(modID < 0)
 8006efe:	2800      	cmp	r0, #0
 8006f00:	db14      	blt.n	8006f2c <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006f02:	b2c0      	uxtb	r0, r0
 8006f04:	a903      	add	r1, sp, #12
 8006f06:	f7fd fb7b 	bl	8004600 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d11b      	bne.n	8006f46 <groupCommand+0x106>
		if(count > 2)
 8006f0e:	57ec      	ldrsb	r4, [r5, r7]
 8006f10:	2c02      	cmp	r4, #2
 8006f12:	ddda      	ble.n	8006eca <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006f14:	4640      	mov	r0, r8
 8006f16:	f7f9 f8ff 	bl	8000118 <strlen>
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	4440      	add	r0, r8
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f00c f8a7 	bl	8013072 <memcpy>
 8006f24:	e7d1      	b.n	8006eca <groupCommand+0x8a>
			type =0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	e7b7      	b.n	8006e9c <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006f2c:	0032      	movs	r2, r6
 8006f2e:	4925      	ldr	r1, [pc, #148]	; (8006fc4 <groupCommand+0x184>)
 8006f30:	4640      	mov	r0, r8
 8006f32:	f00c faa1 	bl	8013478 <sprintf>
}
 8006f36:	2000      	movs	r0, #0
 8006f38:	b011      	add	sp, #68	; 0x44
 8006f3a:	bc3c      	pop	{r2, r3, r4, r5}
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	4699      	mov	r9, r3
 8006f40:	46a2      	mov	sl, r4
 8006f42:	46ab      	mov	fp, r5
 8006f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006f46:	2354      	movs	r3, #84	; 0x54
 8006f48:	56eb      	ldrsb	r3, [r5, r3]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d024      	beq.n	8006f98 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006f4e:	2806      	cmp	r0, #6
 8006f50:	d019      	beq.n	8006f86 <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006f52:	2807      	cmp	r0, #7
 8006f54:	d028      	beq.n	8006fa8 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006f56:	2808      	cmp	r0, #8
 8006f58:	d1ed      	bne.n	8006f36 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006f5a:	aa03      	add	r2, sp, #12
 8006f5c:	491a      	ldr	r1, [pc, #104]	; (8006fc8 <groupCommand+0x188>)
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f00c fa8a 	bl	8013478 <sprintf>
 8006f64:	e7e7      	b.n	8006f36 <groupCommand+0xf6>
	else if(count == 2)
 8006f66:	57eb      	ldrsb	r3, [r5, r7]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d015      	beq.n	8006f98 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006f6c:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006f6e:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d117      	bne.n	8006fa4 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006f74:	4915      	ldr	r1, [pc, #84]	; (8006fcc <groupCommand+0x18c>)
 8006f76:	0030      	movs	r0, r6
 8006f78:	f00c fa7e 	bl	8013478 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006f7c:	0031      	movs	r1, r6
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f00c fa9a 	bl	80134b8 <strcat>
 8006f84:	e7d7      	b.n	8006f36 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	4911      	ldr	r1, [pc, #68]	; (8006fd0 <groupCommand+0x190>)
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f00c fa74 	bl	8013478 <sprintf>
 8006f90:	e7d1      	b.n	8006f36 <groupCommand+0xf6>
	else if(count == 2)
 8006f92:	572b      	ldrsb	r3, [r5, r4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d1e9      	bne.n	8006f6c <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006f98:	aa03      	add	r2, sp, #12
 8006f9a:	490e      	ldr	r1, [pc, #56]	; (8006fd4 <groupCommand+0x194>)
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f00c fa6b 	bl	8013478 <sprintf>
 8006fa2:	e7c8      	b.n	8006f36 <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fa4:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <groupCommand+0x198>)
 8006fa6:	e7e6      	b.n	8006f76 <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006fa8:	aa03      	add	r2, sp, #12
 8006faa:	490c      	ldr	r1, [pc, #48]	; (8006fdc <groupCommand+0x19c>)
 8006fac:	4640      	mov	r0, r8
 8006fae:	f00c fa63 	bl	8013478 <sprintf>
 8006fb2:	e7c0      	b.n	8006f36 <groupCommand+0xf6>
 8006fb4:	200017dc 	.word	0x200017dc
 8006fb8:	20000ad8 	.word	0x20000ad8
 8006fbc:	080195d0 	.word	0x080195d0
 8006fc0:	080195dc 	.word	0x080195dc
 8006fc4:	080196fc 	.word	0x080196fc
 8006fc8:	080196bc 	.word	0x080196bc
 8006fcc:	08019628 	.word	0x08019628
 8006fd0:	08019648 	.word	0x08019648
 8006fd4:	080195e0 	.word	0x080195e0
 8006fd8:	0801960c 	.word	0x0801960c
 8006fdc:	08019688 	.word	0x08019688

08006fe0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe0:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fe2:	4c1b      	ldr	r4, [pc, #108]	; (8007050 <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe4:	0006      	movs	r6, r0
 8006fe6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fe8:	0022      	movs	r2, r4
 8006fea:	2101      	movs	r1, #1
 8006fec:	3260      	adds	r2, #96	; 0x60
 8006fee:	f006 fbf9 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006ff2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ff4:	0001      	movs	r1, r0
 8006ff6:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	dd01      	ble.n	8007000 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007000:	4d14      	ldr	r5, [pc, #80]	; (8007054 <nameCommand+0x74>)
 8007002:	7828      	ldrb	r0, [r5, #0]
 8007004:	f7fd fa92 	bl	800452c <NameModule>
	if(result == BOS_OK)
 8007008:	2800      	cmp	r0, #0
 800700a:	d007      	beq.n	800701c <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 800700c:	2806      	cmp	r0, #6
 800700e:	d012      	beq.n	8007036 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007010:	2807      	cmp	r0, #7
 8007012:	d00a      	beq.n	800702a <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8007014:	2808      	cmp	r0, #8
 8007016:	d014      	beq.n	8007042 <nameCommand+0x62>
}
 8007018:	2000      	movs	r0, #0
 800701a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 800701c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800701e:	782a      	ldrb	r2, [r5, #0]
 8007020:	490d      	ldr	r1, [pc, #52]	; (8007058 <nameCommand+0x78>)
 8007022:	0030      	movs	r0, r6
 8007024:	f00c fa28 	bl	8013478 <sprintf>
 8007028:	e7f6      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 800702a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800702c:	490b      	ldr	r1, [pc, #44]	; (800705c <nameCommand+0x7c>)
 800702e:	0030      	movs	r0, r6
 8007030:	f00c fa22 	bl	8013478 <sprintf>
 8007034:	e7f0      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007038:	4909      	ldr	r1, [pc, #36]	; (8007060 <nameCommand+0x80>)
 800703a:	0030      	movs	r0, r6
 800703c:	f00c fa1c 	bl	8013478 <sprintf>
 8007040:	e7ea      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <nameCommand+0x84>)
 8007046:	0030      	movs	r0, r6
 8007048:	f00c fa16 	bl	8013478 <sprintf>
 800704c:	e7e4      	b.n	8007018 <nameCommand+0x38>
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	200017dc 	.word	0x200017dc
 8007054:	20000aa0 	.word	0x20000aa0
 8007058:	08019720 	.word	0x08019720
 800705c:	08019688 	.word	0x08019688
 8007060:	08019648 	.word	0x08019648
 8007064:	080196bc 	.word	0x080196bc

08007068 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706a:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800706c:	4c50      	ldr	r4, [pc, #320]	; (80071b0 <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800706e:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007070:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007072:	b500      	push	{lr}
 8007074:	0006      	movs	r6, r0
 8007076:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007078:	3268      	adds	r2, #104	; 0x68
 800707a:	2101      	movs	r1, #1
 800707c:	0028      	movs	r0, r5
 800707e:	f006 fbb1 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007082:	2800      	cmp	r0, #0
 8007084:	d069      	beq.n	800715a <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007086:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007088:	494a      	ldr	r1, [pc, #296]	; (80071b4 <bootloaderUpdateCommand+0x14c>)
 800708a:	f00c fa39 	bl	8013500 <strncmp>
 800708e:	2800      	cmp	r0, #0
 8007090:	d133      	bne.n	80070fa <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007092:	0022      	movs	r2, r4
 8007094:	2102      	movs	r1, #2
 8007096:	326c      	adds	r2, #108	; 0x6c
 8007098:	0028      	movs	r0, r5
 800709a:	f006 fba3 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800709e:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070a0:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80070a2:	3274      	adds	r2, #116	; 0x74
 80070a4:	0028      	movs	r0, r5
 80070a6:	2103      	movs	r1, #3
 80070a8:	f006 fb9c 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80070ac:	2200      	movs	r2, #0
 80070ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80070b0:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80070b2:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80070b4:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80070b6:	2a23      	cmp	r2, #35	; 0x23
 80070b8:	d029      	beq.n	800710e <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 80070ba:	2300      	movs	r3, #0
 80070bc:	56c3      	ldrsb	r3, [r0, r3]
 80070be:	2b70      	cmp	r3, #112	; 0x70
 80070c0:	d02f      	beq.n	8007122 <bootloaderUpdateCommand+0xba>
			if(module != myID){
 80070c2:	4c3d      	ldr	r4, [pc, #244]	; (80071b8 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 80070c4:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 80070c6:	7823      	ldrb	r3, [r4, #0]
 80070c8:	42bb      	cmp	r3, r7
 80070ca:	d033      	beq.n	8007134 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80070cc:	2200      	movs	r2, #0
 80070ce:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070d0:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80070d2:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80070d4:	4642      	mov	r2, r8
 80070d6:	4b3a      	ldr	r3, [pc, #232]	; (80071c0 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070d8:	0038      	movs	r0, r7
				messageParams[0] =port;
 80070da:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070dc:	2201      	movs	r2, #1
 80070de:	f001 f933 	bl	8008348 <SendMessageToModule>
				osDelay(100);
 80070e2:	2064      	movs	r0, #100	; 0x64
 80070e4:	f006 fa72 	bl	800d5cc <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80070e8:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 80070ea:	7820      	ldrb	r0, [r4, #0]
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	0039      	movs	r1, r7
 80070f0:	4643      	mov	r3, r8
 80070f2:	f002 fea7 	bl	8009e44 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80070f6:	2d68      	cmp	r5, #104	; 0x68
 80070f8:	d104      	bne.n	8007104 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80070fa:	220f      	movs	r2, #15
 80070fc:	4932      	ldr	r1, [pc, #200]	; (80071c8 <bootloaderUpdateCommand+0x160>)
 80070fe:	0030      	movs	r0, r6
 8007100:	f00b ffb7 	bl	8013072 <memcpy>
}
 8007104:	2000      	movs	r0, #0
 8007106:	b002      	add	sp, #8
 8007108:	bc04      	pop	{r2}
 800710a:	4690      	mov	r8, r2
 800710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800710e:	1c58      	adds	r0, r3, #1
 8007110:	f00b fcef 	bl	8012af2 <atol>
			if(pcParameterString3[0] == 'p'){
 8007114:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007116:	b2c7      	uxtb	r7, r0
 8007118:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 800711a:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 800711c:	56c3      	ldrsb	r3, [r0, r3]
 800711e:	2b70      	cmp	r3, #112	; 0x70
 8007120:	d1cf      	bne.n	80070c2 <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007122:	3001      	adds	r0, #1
 8007124:	f00b fce5 	bl	8012af2 <atol>
			if(module != myID){
 8007128:	4c23      	ldr	r4, [pc, #140]	; (80071b8 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800712a:	b2c3      	uxtb	r3, r0
 800712c:	4698      	mov	r8, r3
			if(module != myID){
 800712e:	7823      	ldrb	r3, [r4, #0]
 8007130:	42bb      	cmp	r3, r7
 8007132:	d1cb      	bne.n	80070cc <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	3319      	adds	r3, #25
 800713e:	4640      	mov	r0, r8
 8007140:	f000 fea2 	bl	8007e88 <SendMessageFromPort>
				osDelay(100);
 8007144:	2064      	movs	r0, #100	; 0x64
 8007146:	f006 fa41 	bl	800d5cc <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800714a:	7820      	ldrb	r0, [r4, #0]
 800714c:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 800714e:	0001      	movs	r1, r0
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	4643      	mov	r3, r8
 8007154:	f002 fe76 	bl	8009e44 <remoteBootloaderUpdate>
 8007158:	e7cd      	b.n	80070f6 <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <bootloaderUpdateCommand+0x150>)
 800715c:	491b      	ldr	r1, [pc, #108]	; (80071cc <bootloaderUpdateCommand+0x164>)
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	0030      	movs	r0, r6
 8007162:	f00c f989 	bl	8013478 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <bootloaderUpdateCommand+0x168>)
 8007168:	0030      	movs	r0, r6
 800716a:	6819      	ldr	r1, [r3, #0]
 800716c:	f00c f9a4 	bl	80134b8 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007170:	0030      	movs	r0, r6
 8007172:	f7f8 ffd1 	bl	8000118 <strlen>
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 8007178:	b282      	uxth	r2, r0
 800717a:	7818      	ldrb	r0, [r3, #0]
 800717c:	2301      	movs	r3, #1
 800717e:	425b      	negs	r3, r3
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	0031      	movs	r1, r6
 8007184:	3333      	adds	r3, #51	; 0x33
 8007186:	f006 f887 	bl	800d298 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <bootloaderUpdateCommand+0x16c>)
 800718c:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 800718e:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007190:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007192:	2201      	movs	r2, #1
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <bootloaderUpdateCommand+0x174>)
 8007196:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007198:	f006 fa18 	bl	800d5cc <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <bootloaderUpdateCommand+0x178>)
 80071a2:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <bootloaderUpdateCommand+0x17c>)
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	e7fd      	b.n	80071aa <bootloaderUpdateCommand+0x142>
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	200017dc 	.word	0x200017dc
 80071b4:	08019758 	.word	0x08019758
 80071b8:	20000aa0 	.word	0x20000aa0
 80071bc:	200067e0 	.word	0x200067e0
 80071c0:	20000b44 	.word	0x20000b44
 80071c4:	20000c30 	.word	0x20000c30
 80071c8:	080191d0 	.word	0x080191d0
 80071cc:	08019738 	.word	0x08019738
 80071d0:	20000060 	.word	0x20000060
 80071d4:	20007ff0 	.word	0x20007ff0
 80071d8:	deadbeef 	.word	0xdeadbeef
 80071dc:	20001146 	.word	0x20001146
 80071e0:	e000ed00 	.word	0xe000ed00
 80071e4:	05fa0004 	.word	0x05fa0004

080071e8 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071e8:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <pingCommand+0x48>)
 80071ec:	4911      	ldr	r1, [pc, #68]	; (8007234 <pingCommand+0x4c>)
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	0093      	lsls	r3, r2, #2
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	5c5c      	ldrb	r4, [r3, r1]
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	d014      	beq.n	8007226 <pingCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80071fc:	185b      	adds	r3, r3, r1
 80071fe:	490e      	ldr	r1, [pc, #56]	; (8007238 <pingCommand+0x50>)
 8007200:	f00c f93a 	bl	8013478 <sprintf>
	RTOS_IND_blink(200);
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	2201      	movs	r2, #1
 8007208:	01c9      	lsls	r1, r1, #7
 800720a:	480c      	ldr	r0, [pc, #48]	; (800723c <pingCommand+0x54>)
 800720c:	f009 fd48 	bl	8010ca0 <HAL_GPIO_WritePin>
 8007210:	20c8      	movs	r0, #200	; 0xc8
 8007212:	f006 f9db 	bl	800d5cc <osDelay>
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	2200      	movs	r2, #0
 800721a:	01c9      	lsls	r1, r1, #7
 800721c:	4807      	ldr	r0, [pc, #28]	; (800723c <pingCommand+0x54>)
 800721e:	f009 fd3f 	bl	8010ca0 <HAL_GPIO_WritePin>
}
 8007222:	2000      	movs	r0, #0
 8007224:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007226:	4906      	ldr	r1, [pc, #24]	; (8007240 <pingCommand+0x58>)
 8007228:	f00c f926 	bl	8013478 <sprintf>
 800722c:	e7ea      	b.n	8007204 <pingCommand+0x1c>
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	20000aa0 	.word	0x20000aa0
 8007234:	20000dcc 	.word	0x20000dcc
 8007238:	08019770 	.word	0x08019770
 800723c:	48000800 	.word	0x48000800
 8007240:	0801975c 	.word	0x0801975c

08007244 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007244:	b510      	push	{r4, lr}
 8007246:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007248:	2241      	movs	r2, #65	; 0x41
 800724a:	4904      	ldr	r1, [pc, #16]	; (800725c <prvRunTimeStatsCommand+0x18>)
 800724c:	f00b ff11 	bl	8013072 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007250:	0020      	movs	r0, r4
 8007252:	3040      	adds	r0, #64	; 0x40
 8007254:	f007 fc0a 	bl	800ea6c <vTaskGetRunTimeStats>
}
 8007258:	2000      	movs	r0, #0
 800725a:	bd10      	pop	{r4, pc}
 800725c:	0801978c 	.word	0x0801978c

08007260 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007260:	b510      	push	{r4, lr}
 8007262:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007264:	2250      	movs	r2, #80	; 0x50
 8007266:	4904      	ldr	r1, [pc, #16]	; (8007278 <prvTaskStatsCommand+0x18>)
 8007268:	f00b ff03 	bl	8013072 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800726c:	0020      	movs	r0, r4
 800726e:	304f      	adds	r0, #79	; 0x4f
 8007270:	f007 fba2 	bl	800e9b8 <vTaskList>
}
 8007274:	2000      	movs	r0, #0
 8007276:	bd10      	pop	{r4, pc}
 8007278:	080197d0 	.word	0x080197d0

0800727c <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8007280:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007282:	b082      	sub	sp, #8
 8007284:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007286:	466a      	mov	r2, sp
 8007288:	2101      	movs	r1, #1
 800728a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 800728c:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800728e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007290:	f006 faa8 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007294:	2300      	movs	r3, #0
 8007296:	56c3      	ldrsb	r3, [r0, r3]
 8007298:	2b70      	cmp	r3, #112	; 0x70
 800729a:	d00e      	beq.n	80072ba <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800729c:	aa01      	add	r2, sp, #4
 800729e:	2102      	movs	r1, #2
 80072a0:	0020      	movs	r0, r4
 80072a2:	f006 fa9f 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80072a6:	f00b fc24 	bl	8012af2 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80072aa:	2213      	movs	r2, #19
 80072ac:	490f      	ldr	r1, [pc, #60]	; (80072ec <setBaudrateCommand+0x70>)
 80072ae:	0028      	movs	r0, r5
 80072b0:	f00b fedf 	bl	8013072 <memcpy>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	b002      	add	sp, #8
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80072ba:	3001      	adds	r0, #1
 80072bc:	f00b fc19 	bl	8012af2 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80072c0:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80072c2:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80072c4:	2102      	movs	r1, #2
 80072c6:	0020      	movs	r0, r4
 80072c8:	f006 fa8c 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80072cc:	f00b fc11 	bl	8012af2 <atol>
 80072d0:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80072d2:	b2f0      	uxtb	r0, r6
 80072d4:	0021      	movs	r1, r4
 80072d6:	f006 f831 	bl	800d33c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80072da:	23ff      	movs	r3, #255	; 0xff
 80072dc:	0022      	movs	r2, r4
 80072de:	4033      	ands	r3, r6
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <setBaudrateCommand+0x74>)
 80072e2:	0028      	movs	r0, r5
 80072e4:	f00c f8c8 	bl	8013478 <sprintf>
 80072e8:	e7e4      	b.n	80072b4 <setBaudrateCommand+0x38>
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	08019848 	.word	0x08019848
 80072f0:	08019820 	.word	0x08019820

080072f4 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80072f4:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072f6:	b510      	push	{r4, lr}
 80072f8:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80072fa:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80072fc:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072fe:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007300:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007302:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007304:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 8007306:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007308:	f006 fa6c 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800730c:	7803      	ldrb	r3, [r0, #0]
 800730e:	3b32      	subs	r3, #50	; 0x32
 8007310:	2b01      	cmp	r3, #1
 8007312:	d907      	bls.n	8007324 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8007314:	2215      	movs	r2, #21
 8007316:	490b      	ldr	r1, [pc, #44]	; (8007344 <GetReadPrecentageCommand+0x50>)
 8007318:	0020      	movs	r0, r4
 800731a:	f00b feaa 	bl	8013072 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800731e:	2000      	movs	r0, #0
 8007320:	b002      	add	sp, #8
 8007322:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8007324:	f00b fbe5 	bl	8012af2 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8007328:	a901      	add	r1, sp, #4
 800732a:	b2c0      	uxtb	r0, r0
 800732c:	f004 fdd8 	bl	800bee0 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8007330:	9801      	ldr	r0, [sp, #4]
 8007332:	f7fb fd09 	bl	8002d48 <__aeabi_f2d>
 8007336:	0002      	movs	r2, r0
 8007338:	000b      	movs	r3, r1
 800733a:	0020      	movs	r0, r4
 800733c:	4902      	ldr	r1, [pc, #8]	; (8007348 <GetReadPrecentageCommand+0x54>)
 800733e:	f00c f89b 	bl	8013478 <sprintf>
 8007342:	e7ec      	b.n	800731e <GetReadPrecentageCommand+0x2a>
 8007344:	08018c80 	.word	0x08018c80
 8007348:	0801985c 	.word	0x0801985c

0800734c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800734c:	b510      	push	{r4, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	0004      	movs	r4, r0
	GetTimeDate();
 8007352:	f005 fd63 	bl	800ce1c <GetTimeDate>
	if(BOS.hourformat == 24)
 8007356:	4915      	ldr	r1, [pc, #84]	; (80073ac <timeCommand+0x60>)
 8007358:	7b4b      	ldrb	r3, [r1, #13]
 800735a:	2b18      	cmp	r3, #24
 800735c:	d016      	beq.n	800738c <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d002      	beq.n	8007368 <timeCommand+0x1c>
}
 8007362:	2000      	movs	r0, #0
 8007364:	b004      	add	sp, #16
 8007366:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007368:	7ccb      	ldrb	r3, [r1, #19]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d019      	beq.n	80073a2 <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800736e:	2b02      	cmp	r3, #2
 8007370:	d1f7      	bne.n	8007362 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007372:	7c4b      	ldrb	r3, [r1, #17]
 8007374:	7c8a      	ldrb	r2, [r1, #18]
 8007376:	480e      	ldr	r0, [pc, #56]	; (80073b0 <timeCommand+0x64>)
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	89c8      	ldrh	r0, [r1, #14]
 800737c:	9001      	str	r0, [sp, #4]
 800737e:	7c09      	ldrb	r1, [r1, #16]
 8007380:	0020      	movs	r0, r4
 8007382:	9100      	str	r1, [sp, #0]
 8007384:	490b      	ldr	r1, [pc, #44]	; (80073b4 <timeCommand+0x68>)
 8007386:	f00c f877 	bl	8013478 <sprintf>
 800738a:	e7ea      	b.n	8007362 <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800738c:	89c8      	ldrh	r0, [r1, #14]
 800738e:	7c4b      	ldrb	r3, [r1, #17]
 8007390:	7c8a      	ldrb	r2, [r1, #18]
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	7c09      	ldrb	r1, [r1, #16]
 8007396:	0020      	movs	r0, r4
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	4907      	ldr	r1, [pc, #28]	; (80073b8 <timeCommand+0x6c>)
 800739c:	f00c f86c 	bl	8013478 <sprintf>
 80073a0:	e7df      	b.n	8007362 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80073a2:	7c4b      	ldrb	r3, [r1, #17]
 80073a4:	7c8a      	ldrb	r2, [r1, #18]
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <timeCommand+0x70>)
 80073a8:	e7e6      	b.n	8007378 <timeCommand+0x2c>
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	20006860 	.word	0x20006860
 80073b0:	080198d8 	.word	0x080198d8
 80073b4:	080198a8 	.word	0x080198a8
 80073b8:	08019880 	.word	0x08019880
 80073bc:	080198d4 	.word	0x080198d4

080073c0 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <resetCommand+0x14>)
 80073c6:	4a04      	ldr	r2, [pc, #16]	; (80073d8 <resetCommand+0x18>)
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	e7fd      	b.n	80073ce <resetCommand+0xe>
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	e000ed00 	.word	0xe000ed00
 80073d8:	05fa0004 	.word	0x05fa0004

080073dc <RegisterUserCLICommands>:
}
 80073dc:	4770      	bx	lr
 80073de:	46c0      	nop			; (mov r8, r8)

080073e0 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80073e0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80073e2:	4c45      	ldr	r4, [pc, #276]	; (80074f8 <vRegisterCLICommands+0x118>)
 80073e4:	0020      	movs	r0, r4
 80073e6:	f006 f969 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80073ea:	0020      	movs	r0, r4
 80073ec:	3010      	adds	r0, #16
 80073ee:	f006 f965 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80073f2:	0020      	movs	r0, r4
 80073f4:	3020      	adds	r0, #32
 80073f6:	f006 f961 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80073fa:	0020      	movs	r0, r4
 80073fc:	3030      	adds	r0, #48	; 0x30
 80073fe:	f006 f95d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007402:	0020      	movs	r0, r4
 8007404:	3040      	adds	r0, #64	; 0x40
 8007406:	f006 f959 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800740a:	0020      	movs	r0, r4
 800740c:	3050      	adds	r0, #80	; 0x50
 800740e:	f006 f955 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007412:	0020      	movs	r0, r4
 8007414:	3060      	adds	r0, #96	; 0x60
 8007416:	f006 f951 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800741a:	0020      	movs	r0, r4
 800741c:	3070      	adds	r0, #112	; 0x70
 800741e:	f006 f94d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007422:	4c36      	ldr	r4, [pc, #216]	; (80074fc <vRegisterCLICommands+0x11c>)
 8007424:	0020      	movs	r0, r4
 8007426:	f006 f949 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 800742a:	0020      	movs	r0, r4
 800742c:	3010      	adds	r0, #16
 800742e:	f006 f945 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007432:	0020      	movs	r0, r4
 8007434:	3020      	adds	r0, #32
 8007436:	f006 f941 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800743a:	0020      	movs	r0, r4
 800743c:	3030      	adds	r0, #48	; 0x30
 800743e:	f006 f93d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007442:	0020      	movs	r0, r4
 8007444:	3040      	adds	r0, #64	; 0x40
 8007446:	f006 f939 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800744a:	0020      	movs	r0, r4
 800744c:	3050      	adds	r0, #80	; 0x50
 800744e:	f006 f935 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007452:	0020      	movs	r0, r4
 8007454:	3060      	adds	r0, #96	; 0x60
 8007456:	f006 f931 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800745a:	0020      	movs	r0, r4
 800745c:	3070      	adds	r0, #112	; 0x70
 800745e:	f006 f92d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007462:	4c27      	ldr	r4, [pc, #156]	; (8007500 <vRegisterCLICommands+0x120>)
 8007464:	0020      	movs	r0, r4
 8007466:	f006 f929 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800746a:	0020      	movs	r0, r4
 800746c:	3010      	adds	r0, #16
 800746e:	f006 f925 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007472:	0020      	movs	r0, r4
 8007474:	3020      	adds	r0, #32
 8007476:	f006 f921 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800747a:	0020      	movs	r0, r4
 800747c:	3030      	adds	r0, #48	; 0x30
 800747e:	f006 f91d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007482:	0020      	movs	r0, r4
 8007484:	3040      	adds	r0, #64	; 0x40
 8007486:	f006 f919 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800748a:	0020      	movs	r0, r4
 800748c:	3050      	adds	r0, #80	; 0x50
 800748e:	f006 f915 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007492:	0020      	movs	r0, r4
 8007494:	3060      	adds	r0, #96	; 0x60
 8007496:	f006 f911 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800749a:	0020      	movs	r0, r4
 800749c:	3070      	adds	r0, #112	; 0x70
 800749e:	f006 f90d 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80074a2:	4c18      	ldr	r4, [pc, #96]	; (8007504 <vRegisterCLICommands+0x124>)
 80074a4:	0020      	movs	r0, r4
 80074a6:	f006 f909 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80074aa:	0020      	movs	r0, r4
 80074ac:	3010      	adds	r0, #16
 80074ae:	f006 f905 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80074b2:	0020      	movs	r0, r4
 80074b4:	3020      	adds	r0, #32
 80074b6:	f006 f901 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80074ba:	0020      	movs	r0, r4
 80074bc:	3030      	adds	r0, #48	; 0x30
 80074be:	f006 f8fd 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80074c2:	0020      	movs	r0, r4
 80074c4:	3040      	adds	r0, #64	; 0x40
 80074c6:	f006 f8f9 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80074ca:	0020      	movs	r0, r4
 80074cc:	3050      	adds	r0, #80	; 0x50
 80074ce:	f006 f8f5 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80074d2:	0020      	movs	r0, r4
 80074d4:	3060      	adds	r0, #96	; 0x60
 80074d6:	f006 f8f1 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80074da:	0020      	movs	r0, r4
 80074dc:	3070      	adds	r0, #112	; 0x70
 80074de:	f006 f8ed 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80074e2:	4809      	ldr	r0, [pc, #36]	; (8007508 <vRegisterCLICommands+0x128>)
 80074e4:	f006 f8ea 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80074e8:	2223      	movs	r2, #35	; 0x23
 80074ea:	4b08      	ldr	r3, [pc, #32]	; (800750c <vRegisterCLICommands+0x12c>)
 80074ec:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80074ee:	f002 fd2d 	bl	8009f4c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80074f2:	f7ff ff73 	bl	80073dc <RegisterUserCLICommands>
}
 80074f6:	bd10      	pop	{r4, pc}
 80074f8:	080179f4 	.word	0x080179f4
 80074fc:	08017a74 	.word	0x08017a74
 8007500:	08017af4 	.word	0x08017af4
 8007504:	08017b74 	.word	0x08017b74
 8007508:	08017bf4 	.word	0x08017bf4
 800750c:	200067dc 	.word	0x200067dc

08007510 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	46c6      	mov	lr, r8
 8007514:	b500      	push	{lr}
 8007516:	0005      	movs	r5, r0
 8007518:	000e      	movs	r6, r1
 800751a:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 800751c:	f002 fd2e 	bl	8009f7c <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 8007522:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007524:	4698      	mov	r8, r3
 8007526:	5c1b      	ldrb	r3, [r3, r0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d902      	bls.n	8007532 <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800752c:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800752e:	2b03      	cmp	r3, #3
 8007530:	d112      	bne.n	8007558 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 8007532:	0020      	movs	r0, r4
 8007534:	f003 f894 	bl	800a660 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <StartDMAstream+0x54>)
 800753a:	1e62      	subs	r2, r4, #1
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007540:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007542:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007544:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007546:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007548:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 800754a:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 800754c:	0028      	movs	r0, r5
 800754e:	003a      	movs	r2, r7
 8007550:	0031      	movs	r1, r6
 8007552:	f003 fce5 	bl	800af20 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007556:	2000      	movs	r0, #0
}
 8007558:	bc04      	pop	{r2}
 800755a:	4690      	mov	r8, r2
 800755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	20000c34 	.word	0x20000c34
 8007564:	20001858 	.word	0x20001858

08007568 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <DMA_IRQHandler+0x44>)
 800756e:	1e44      	subs	r4, r0, #1
 8007570:	00e0      	lsls	r0, r4, #3
 8007572:	5d5b      	ldrb	r3, [r3, r5]
 8007574:	1b00      	subs	r0, r0, r4
 8007576:	00c0      	lsls	r0, r0, #3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d004      	beq.n	8007586 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <DMA_IRQHandler+0x48>)
 800757e:	18c0      	adds	r0, r0, r3
 8007580:	f008 fc0c 	bl	800fd9c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007584:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007588:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800758a:	18c0      	adds	r0, r0, r3
 800758c:	f008 fc06 	bl	800fd9c <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <DMA_IRQHandler+0x50>)
 8007592:	191c      	adds	r4, r3, r4
 8007594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007596:	2a00      	cmp	r2, #0
 8007598:	d004      	beq.n	80075a4 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 800759a:	6963      	ldr	r3, [r4, #20]
 800759c:	3301      	adds	r3, #1
 800759e:	6163      	str	r3, [r4, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d8ef      	bhi.n	8007584 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80075a4:	0028      	movs	r0, r5
 80075a6:	f003 f843 	bl	800a630 <StopStreamDMA>
 80075aa:	e7eb      	b.n	8007584 <DMA_IRQHandler+0x1c>
 80075ac:	20000c34 	.word	0x20000c34
 80075b0:	20002268 	.word	0x20002268
 80075b4:	20002070 	.word	0x20002070
 80075b8:	20001858 	.word	0x20001858

080075bc <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <ResetUartORE+0x24>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2308      	movs	r3, #8
 80075c2:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80075c4:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <ResetUartORE+0x28>)
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <ResetUartORE+0x2c>)
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80075d0:	4a06      	ldr	r2, [pc, #24]	; (80075ec <ResetUartORE+0x30>)
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80075d6:	4a06      	ldr	r2, [pc, #24]	; (80075f0 <ResetUartORE+0x34>)
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	6213      	str	r3, [r2, #32]
#endif
}
 80075dc:	4770      	bx	lr
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	20006aa0 	.word	0x20006aa0
 80075e4:	20006b8c 	.word	0x20006b8c
 80075e8:	20006980 	.word	0x20006980
 80075ec:	20006a30 	.word	0x20006a30
 80075f0:	20006b18 	.word	0x20006b18

080075f4 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80075f6:	2400      	movs	r4, #0
 80075f8:	2603      	movs	r6, #3
 80075fa:	4d57      	ldr	r5, [pc, #348]	; (8007758 <MX_FREERTOS_Init+0x164>)
void MX_FREERTOS_Init(void){
 80075fc:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80075fe:	9501      	str	r5, [sp, #4]
 8007600:	9600      	str	r6, [sp, #0]
 8007602:	9403      	str	r4, [sp, #12]
 8007604:	9402      	str	r4, [sp, #8]
 8007606:	2300      	movs	r3, #0
 8007608:	22f0      	movs	r2, #240	; 0xf0
 800760a:	4954      	ldr	r1, [pc, #336]	; (800775c <MX_FREERTOS_Init+0x168>)
 800760c:	4854      	ldr	r0, [pc, #336]	; (8007760 <MX_FREERTOS_Init+0x16c>)
 800760e:	f006 fd9b 	bl	800e148 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007612:	1d2b      	adds	r3, r5, #4
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	9600      	str	r6, [sp, #0]
 8007618:	9403      	str	r4, [sp, #12]
 800761a:	9402      	str	r4, [sp, #8]
 800761c:	2300      	movs	r3, #0
 800761e:	22f0      	movs	r2, #240	; 0xf0
 8007620:	4950      	ldr	r1, [pc, #320]	; (8007764 <MX_FREERTOS_Init+0x170>)
 8007622:	4851      	ldr	r0, [pc, #324]	; (8007768 <MX_FREERTOS_Init+0x174>)
 8007624:	f006 fd90 	bl	800e148 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007628:	002b      	movs	r3, r5
 800762a:	3308      	adds	r3, #8
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	9600      	str	r6, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	22f0      	movs	r2, #240	; 0xf0
 8007634:	494d      	ldr	r1, [pc, #308]	; (800776c <MX_FREERTOS_Init+0x178>)
 8007636:	9403      	str	r4, [sp, #12]
 8007638:	9402      	str	r4, [sp, #8]
 800763a:	484d      	ldr	r0, [pc, #308]	; (8007770 <MX_FREERTOS_Init+0x17c>)
 800763c:	f006 fd84 	bl	800e148 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007640:	f7ff fece 	bl	80073e0 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007644:	002b      	movs	r3, r5
 8007646:	228c      	movs	r2, #140	; 0x8c
 8007648:	330c      	adds	r3, #12
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	9600      	str	r6, [sp, #0]
 800764e:	9403      	str	r4, [sp, #12]
 8007650:	9402      	str	r4, [sp, #8]
 8007652:	2300      	movs	r3, #0
 8007654:	0052      	lsls	r2, r2, #1
 8007656:	4947      	ldr	r1, [pc, #284]	; (8007774 <MX_FREERTOS_Init+0x180>)
 8007658:	4847      	ldr	r0, [pc, #284]	; (8007778 <MX_FREERTOS_Init+0x184>)
 800765a:	f006 fd75 	bl	800e148 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800765e:	002b      	movs	r3, r5
 8007660:	2704      	movs	r7, #4
 8007662:	4e46      	ldr	r6, [pc, #280]	; (800777c <MX_FREERTOS_Init+0x188>)
 8007664:	3310      	adds	r3, #16
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	9403      	str	r4, [sp, #12]
 800766a:	9402      	str	r4, [sp, #8]
 800766c:	9700      	str	r7, [sp, #0]
 800766e:	2301      	movs	r3, #1
 8007670:	22f0      	movs	r2, #240	; 0xf0
 8007672:	4943      	ldr	r1, [pc, #268]	; (8007780 <MX_FREERTOS_Init+0x18c>)
 8007674:	0030      	movs	r0, r6
 8007676:	f006 fd67 	bl	800e148 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800767a:	002b      	movs	r3, r5
 800767c:	3314      	adds	r3, #20
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	9403      	str	r4, [sp, #12]
 8007682:	9402      	str	r4, [sp, #8]
 8007684:	9700      	str	r7, [sp, #0]
 8007686:	2302      	movs	r3, #2
 8007688:	22f0      	movs	r2, #240	; 0xf0
 800768a:	493e      	ldr	r1, [pc, #248]	; (8007784 <MX_FREERTOS_Init+0x190>)
 800768c:	0030      	movs	r0, r6
 800768e:	f006 fd5b 	bl	800e148 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007692:	002b      	movs	r3, r5
 8007694:	3318      	adds	r3, #24
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	9403      	str	r4, [sp, #12]
 800769a:	9402      	str	r4, [sp, #8]
 800769c:	9700      	str	r7, [sp, #0]
 800769e:	2303      	movs	r3, #3
 80076a0:	22f0      	movs	r2, #240	; 0xf0
 80076a2:	4939      	ldr	r1, [pc, #228]	; (8007788 <MX_FREERTOS_Init+0x194>)
 80076a4:	0030      	movs	r0, r6
 80076a6:	f006 fd4f 	bl	800e148 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80076aa:	002b      	movs	r3, r5
 80076ac:	331c      	adds	r3, #28
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	9403      	str	r4, [sp, #12]
 80076b2:	9402      	str	r4, [sp, #8]
 80076b4:	9700      	str	r7, [sp, #0]
 80076b6:	2304      	movs	r3, #4
 80076b8:	22f0      	movs	r2, #240	; 0xf0
 80076ba:	4934      	ldr	r1, [pc, #208]	; (800778c <MX_FREERTOS_Init+0x198>)
 80076bc:	0030      	movs	r0, r6
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80076be:	3520      	adds	r5, #32
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80076c0:	f006 fd42 	bl	800e148 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80076c4:	2305      	movs	r3, #5
 80076c6:	22f0      	movs	r2, #240	; 0xf0
 80076c8:	9501      	str	r5, [sp, #4]
 80076ca:	9403      	str	r4, [sp, #12]
 80076cc:	9402      	str	r4, [sp, #8]
 80076ce:	9700      	str	r7, [sp, #0]
 80076d0:	492f      	ldr	r1, [pc, #188]	; (8007790 <MX_FREERTOS_Init+0x19c>)
 80076d2:	0030      	movs	r0, r6
 80076d4:	f006 fd38 	bl	800e148 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076d8:	2101      	movs	r1, #1
 80076da:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80076dc:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076de:	f005 ffa1 	bl	800d624 <osSemaphoreCreate>
 80076e2:	4e2c      	ldr	r6, [pc, #176]	; (8007794 <MX_FREERTOS_Init+0x1a0>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076e4:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076e6:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076e8:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80076ea:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076ec:	f005 ff9a 	bl	800d624 <osSemaphoreCreate>
 80076f0:	4d29      	ldr	r5, [pc, #164]	; (8007798 <MX_FREERTOS_Init+0x1a4>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076f2:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076f4:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076f6:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80076f8:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076fa:	f005 ff93 	bl	800d624 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80076fe:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007700:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007702:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007704:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007706:	f005 ff8d 	bl	800d624 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800770a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800770c:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800770e:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007710:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007712:	f005 ff87 	bl	800d624 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007716:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007718:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800771a:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 800771c:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800771e:	f005 ff81 	bl	800d624 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007722:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007724:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007726:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007728:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800772a:	f005 ff7b 	bl	800d624 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800772e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007730:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007732:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007734:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007736:	f005 ff75 	bl	800d624 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800773a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800773c:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800773e:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007740:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007742:	f005 ff6f 	bl	800d624 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007746:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007748:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800774a:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 800774c:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800774e:	f005 ff69 	bl	800d624 <osSemaphoreCreate>
 8007752:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007754:	b00f      	add	sp, #60	; 0x3c
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	20001ca4 	.word	0x20001ca4
 800775c:	0801a558 	.word	0x0801a558
 8007760:	08007b9d 	.word	0x08007b9d
 8007764:	0801a564 	.word	0x0801a564
 8007768:	08008509 	.word	0x08008509
 800776c:	0801a570 	.word	0x0801a570
 8007770:	08012ad9 	.word	0x08012ad9
 8007774:	0801a57c 	.word	0x0801a57c
 8007778:	08005305 	.word	0x08005305
 800777c:	08008671 	.word	0x08008671
 8007780:	0801a584 	.word	0x0801a584
 8007784:	0801a590 	.word	0x0801a590
 8007788:	0801a59c 	.word	0x0801a59c
 800778c:	0801a5a8 	.word	0x0801a5a8
 8007790:	0801a5b4 	.word	0x0801a5b4
 8007794:	20006904 	.word	0x20006904
 8007798:	200068e4 	.word	0x200068e4

0800779c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	46de      	mov	lr, fp
 80077a0:	4657      	mov	r7, sl
 80077a2:	464e      	mov	r6, r9
 80077a4:	4645      	mov	r5, r8
 80077a6:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80077a8:	4bd4      	ldr	r3, [pc, #848]	; (8007afc <ExecuteMonitor+0x360>)
{
 80077aa:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 80077ac:	469b      	mov	fp, r3
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d006      	beq.n	80077c2 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 80077b4:	b005      	add	sp, #20
 80077b6:	bc3c      	pop	{r2, r3, r4, r5}
 80077b8:	4690      	mov	r8, r2
 80077ba:	4699      	mov	r9, r3
 80077bc:	46a2      	mov	sl, r4
 80077be:	46ab      	mov	fp, r5
 80077c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	465a      	mov	r2, fp
 80077c6:	6013      	str	r3, [r2, #0]
	flag=0;
 80077c8:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80077ca:	3320      	adds	r3, #32
 80077cc:	7153      	strb	r3, [r2, #5]
 80077ce:	4bcc      	ldr	r3, [pc, #816]	; (8007b00 <ExecuteMonitor+0x364>)
 80077d0:	4ecc      	ldr	r6, [pc, #816]	; (8007b04 <ExecuteMonitor+0x368>)
 80077d2:	4699      	mov	r9, r3
 80077d4:	4bcc      	ldr	r3, [pc, #816]	; (8007b08 <ExecuteMonitor+0x36c>)
 80077d6:	4dcd      	ldr	r5, [pc, #820]	; (8007b0c <ExecuteMonitor+0x370>)
 80077d8:	469a      	mov	sl, r3
 80077da:	4ccd      	ldr	r4, [pc, #820]	; (8007b10 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80077dc:	2200      	movs	r2, #0
 80077de:	4bcd      	ldr	r3, [pc, #820]	; (8007b14 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80077e0:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80077e2:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80077e4:	2320      	movs	r3, #32
 80077e6:	4698      	mov	r8, r3
 80077e8:	e004      	b.n	80077f4 <ExecuteMonitor+0x58>
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	d04c      	beq.n	8007888 <ExecuteMonitor+0xec>
 80077ee:	2a02      	cmp	r2, #2
 80077f0:	d100      	bne.n	80077f4 <ExecuteMonitor+0x58>
 80077f2:	e0a8      	b.n	8007946 <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 80077f4:	464b      	mov	r3, r9
		            	    Delay_us(100);
 80077f6:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 80077f8:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 80077fa:	f005 fba3 	bl	800cf44 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80077fe:	465b      	mov	r3, fp
 8007800:	464a      	mov	r2, r9
 8007802:	795b      	ldrb	r3, [r3, #5]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d00b      	beq.n	8007822 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 800780a:	4ac2      	ldr	r2, [pc, #776]	; (8007b14 <ExecuteMonitor+0x378>)
 800780c:	48c1      	ldr	r0, [pc, #772]	; (8007b14 <ExecuteMonitor+0x378>)
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	1c51      	adds	r1, r2, #1
 8007812:	7001      	strb	r1, [r0, #0]
 8007814:	2124      	movs	r1, #36	; 0x24
 8007816:	4452      	add	r2, sl
 8007818:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 800781a:	464a      	mov	r2, r9
 800781c:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 800781e:	465a      	mov	r2, fp
 8007820:	7157      	strb	r7, [r2, #5]
 8007822:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007824:	4641      	mov	r1, r8
 8007826:	7912      	ldrb	r2, [r2, #4]
 8007828:	438b      	bics	r3, r1
 800782a:	d1de      	bne.n	80077ea <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 800782c:	2a00      	cmp	r2, #0
 800782e:	d129      	bne.n	8007884 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007830:	4bb8      	ldr	r3, [pc, #736]	; (8007b14 <ExecuteMonitor+0x378>)
 8007832:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007834:	4653      	mov	r3, sl
 8007836:	3224      	adds	r2, #36	; 0x24
 8007838:	5c9b      	ldrb	r3, [r3, r2]
 800783a:	2b5b      	cmp	r3, #91	; 0x5b
 800783c:	d100      	bne.n	8007840 <ExecuteMonitor+0xa4>
 800783e:	e0eb      	b.n	8007a18 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007840:	2b23      	cmp	r3, #35	; 0x23
 8007842:	d100      	bne.n	8007846 <ExecuteMonitor+0xaa>
 8007844:	e141      	b.n	8007aca <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007846:	2b3d      	cmp	r3, #61	; 0x3d
 8007848:	d100      	bne.n	800784c <ExecuteMonitor+0xb0>
 800784a:	e175      	b.n	8007b38 <ExecuteMonitor+0x39c>
 800784c:	2338      	movs	r3, #56	; 0x38
 800784e:	4652      	mov	r2, sl
 8007850:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007852:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007854:	4bb0      	ldr	r3, [pc, #704]	; (8007b18 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007856:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007858:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800785a:	304c      	adds	r0, #76	; 0x4c
 800785c:	1bcf      	subs	r7, r1, r7
 800785e:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007860:	4657      	mov	r7, sl
 8007862:	3738      	adds	r7, #56	; 0x38
 8007864:	0039      	movs	r1, r7
 8007866:	220f      	movs	r2, #15
 8007868:	f00b fc03 	bl	8013072 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800786c:	4650      	mov	r0, sl
 800786e:	2214      	movs	r2, #20
 8007870:	2100      	movs	r1, #0
 8007872:	3024      	adds	r0, #36	; 0x24
 8007874:	f00b fc06 	bl	8013084 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007878:	2214      	movs	r2, #20
 800787a:	2100      	movs	r1, #0
 800787c:	0038      	movs	r0, r7
 800787e:	f00b fc01 	bl	8013084 <memset>
 8007882:	e7ab      	b.n	80077dc <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007884:	2a01      	cmp	r2, #1
 8007886:	d15b      	bne.n	8007940 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007888:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800788a:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800788c:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 800788e:	4ba3      	ldr	r3, [pc, #652]	; (8007b1c <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007890:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8007892:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007894:	4ba2      	ldr	r3, [pc, #648]	; (8007b20 <ExecuteMonitor+0x384>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02e      	beq.n	80078fa <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800789c:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 800789e:	2100      	movs	r1, #0
 80078a0:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078a2:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 80078a4:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80078a6:	0010      	movs	r0, r2
 80078a8:	2720      	movs	r7, #32
 80078aa:	001a      	movs	r2, r3
 80078ac:	0003      	movs	r3, r0
 80078ae:	e002      	b.n	80078b6 <ExecuteMonitor+0x11a>
 80078b0:	4b9a      	ldr	r3, [pc, #616]	; (8007b1c <ExecuteMonitor+0x380>)
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078b6:	1c58      	adds	r0, r3, #1
 80078b8:	7028      	strb	r0, [r5, #0]
 80078ba:	1c48      	adds	r0, r1, #1
 80078bc:	7030      	strb	r0, [r6, #0]
 80078be:	0110      	lsls	r0, r2, #4
 80078c0:	1a82      	subs	r2, r0, r2
 80078c2:	4452      	add	r2, sl
 80078c4:	18d2      	adds	r2, r2, r3
 80078c6:	4643      	mov	r3, r8
 80078c8:	5cd3      	ldrb	r3, [r2, r3]
 80078ca:	2244      	movs	r2, #68	; 0x44
 80078cc:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80078ce:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078d0:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80078d2:	f007 fd23 	bl	800f31c <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80078d6:	7831      	ldrb	r1, [r6, #0]
 80078d8:	1863      	adds	r3, r4, r1
 80078da:	3343      	adds	r3, #67	; 0x43
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	43bb      	bics	r3, r7
 80078e0:	d1e6      	bne.n	80078b0 <ExecuteMonitor+0x114>
		                   counter++;
 80078e2:	4b8e      	ldr	r3, [pc, #568]	; (8007b1c <ExecuteMonitor+0x380>)
 80078e4:	4a8d      	ldr	r2, [pc, #564]	; (8007b1c <ExecuteMonitor+0x380>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80078ee:	2201      	movs	r2, #1
 80078f0:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 80078f2:	4a8b      	ldr	r2, [pc, #556]	; (8007b20 <ExecuteMonitor+0x384>)
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d1d4      	bne.n	80078a4 <ExecuteMonitor+0x108>
		          		   flag=0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	465a      	mov	r2, fp
 80078fe:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007900:	4a86      	ldr	r2, [pc, #536]	; (8007b1c <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007902:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 8007904:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007906:	4a87      	ldr	r2, [pc, #540]	; (8007b24 <ExecuteMonitor+0x388>)
 8007908:	7013      	strb	r3, [r2, #0]
 800790a:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800790c:	4a86      	ldr	r2, [pc, #536]	; (8007b28 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 800790e:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007910:	18d2      	adds	r2, r2, r3
 8007912:	18e3      	adds	r3, r4, r3
 8007914:	5ddb      	ldrb	r3, [r3, r7]
 8007916:	3281      	adds	r2, #129	; 0x81
 8007918:	32ff      	adds	r2, #255	; 0xff
 800791a:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 800791c:	f007 fcfe 	bl	800f31c <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007920:	4b80      	ldr	r3, [pc, #512]	; (8007b24 <ExecuteMonitor+0x388>)
 8007922:	4a80      	ldr	r2, [pc, #512]	; (8007b24 <ExecuteMonitor+0x388>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	b2db      	uxtb	r3, r3
 800792a:	7013      	strb	r3, [r2, #0]
 800792c:	2b3f      	cmp	r3, #63	; 0x3f
 800792e:	d9ed      	bls.n	800790c <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007930:	0020      	movs	r0, r4
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	3044      	adds	r0, #68	; 0x44
 8007936:	2100      	movs	r1, #0
 8007938:	f00b fba4 	bl	8013084 <memset>
 800793c:	465b      	mov	r3, fp
 800793e:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007940:	2a02      	cmp	r2, #2
 8007942:	d000      	beq.n	8007946 <ExecuteMonitor+0x1aa>
 8007944:	e74a      	b.n	80077dc <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 8007946:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007948:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800794a:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 800794c:	4b73      	ldr	r3, [pc, #460]	; (8007b1c <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 800794e:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007950:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8007952:	4b73      	ldr	r3, [pc, #460]	; (8007b20 <ExecuteMonitor+0x384>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d033      	beq.n	80079c2 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800795a:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 800795c:	2100      	movs	r1, #0
 800795e:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007960:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 8007962:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007964:	0010      	movs	r0, r2
 8007966:	2720      	movs	r7, #32
 8007968:	001a      	movs	r2, r3
 800796a:	0003      	movs	r3, r0
 800796c:	e001      	b.n	8007972 <ExecuteMonitor+0x1d6>
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007972:	1c58      	adds	r0, r3, #1
 8007974:	7028      	strb	r0, [r5, #0]
 8007976:	1c48      	adds	r0, r1, #1
 8007978:	7030      	strb	r0, [r6, #0]
 800797a:	0110      	lsls	r0, r2, #4
 800797c:	1a82      	subs	r2, r0, r2
 800797e:	4452      	add	r2, sl
 8007980:	18d2      	adds	r2, r2, r3
 8007982:	4643      	mov	r3, r8
 8007984:	5cd3      	ldrb	r3, [r2, r3]
 8007986:	2244      	movs	r2, #68	; 0x44
 8007988:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 800798a:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800798c:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 800798e:	f007 fcc5 	bl	800f31c <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007992:	7831      	ldrb	r1, [r6, #0]
 8007994:	1863      	adds	r3, r4, r1
 8007996:	3343      	adds	r3, #67	; 0x43
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	4b60      	ldr	r3, [pc, #384]	; (8007b1c <ExecuteMonitor+0x380>)
 800799c:	43ba      	bics	r2, r7
 800799e:	d1e6      	bne.n	800796e <ExecuteMonitor+0x1d2>
   		             counter++;
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	485e      	ldr	r0, [pc, #376]	; (8007b1c <ExecuteMonitor+0x380>)
 80079a4:	3301      	adds	r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 80079aa:	2001      	movs	r0, #1
 80079ac:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 80079ae:	485c      	ldr	r0, [pc, #368]	; (8007b20 <ExecuteMonitor+0x384>)
 80079b0:	7800      	ldrb	r0, [r0, #0]
 80079b2:	4298      	cmp	r0, r3
 80079b4:	d1d5      	bne.n	8007962 <ExecuteMonitor+0x1c6>
 80079b6:	465b      	mov	r3, fp
		            counter=0;
 80079b8:	4958      	ldr	r1, [pc, #352]	; (8007b1c <ExecuteMonitor+0x380>)
 80079ba:	791b      	ldrb	r3, [r3, #4]
 80079bc:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01e      	beq.n	8007a00 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079c2:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80079c4:	2200      	movs	r2, #0
 80079c6:	4b57      	ldr	r3, [pc, #348]	; (8007b24 <ExecuteMonitor+0x388>)
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079cc:	4a56      	ldr	r2, [pc, #344]	; (8007b28 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 80079ce:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079d0:	18d2      	adds	r2, r2, r3
 80079d2:	18e3      	adds	r3, r4, r3
 80079d4:	5ddb      	ldrb	r3, [r3, r7]
 80079d6:	3281      	adds	r2, #129	; 0x81
 80079d8:	32ff      	adds	r2, #255	; 0xff
 80079da:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80079dc:	f005 fab2 	bl	800cf44 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80079e0:	4b50      	ldr	r3, [pc, #320]	; (8007b24 <ExecuteMonitor+0x388>)
 80079e2:	4a50      	ldr	r2, [pc, #320]	; (8007b24 <ExecuteMonitor+0x388>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	7013      	strb	r3, [r2, #0]
 80079ec:	2b3f      	cmp	r3, #63	; 0x3f
 80079ee:	d9ed      	bls.n	80079cc <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 80079f0:	465b      	mov	r3, fp
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	f007 fc92 	bl	800f31c <HAL_Delay>
                  while(flag != NonActive)
 80079f8:	465b      	mov	r3, fp
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e1      	bne.n	80079c4 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007a00:	0020      	movs	r0, r4
 8007a02:	2240      	movs	r2, #64	; 0x40
 8007a04:	2100      	movs	r1, #0
 8007a06:	3044      	adds	r0, #68	; 0x44
 8007a08:	f00b fb3c 	bl	8013084 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007a0c:	22c0      	movs	r2, #192	; 0xc0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4846      	ldr	r0, [pc, #280]	; (8007b2c <ExecuteMonitor+0x390>)
 8007a12:	f00b fb37 	bl	8013084 <memset>
 8007a16:	e6e1      	b.n	80077dc <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 8007a18:	4a3e      	ldr	r2, [pc, #248]	; (8007b14 <ExecuteMonitor+0x378>)
 8007a1a:	3b5a      	subs	r3, #90	; 0x5a
 8007a1c:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007a1e:	4b44      	ldr	r3, [pc, #272]	; (8007b30 <ExecuteMonitor+0x394>)
 8007a20:	210a      	movs	r1, #10
 8007a22:	781f      	ldrb	r7, [r3, #0]
 8007a24:	4653      	mov	r3, sl
 8007a26:	9701      	str	r7, [sp, #4]
 8007a28:	3324      	adds	r3, #36	; 0x24
 8007a2a:	7858      	ldrb	r0, [r3, #1]
 8007a2c:	f7f8 fc16 	bl	800025c <__aeabi_uidivmod>
 8007a30:	2303      	movs	r3, #3
 8007a32:	b2c9      	uxtb	r1, r1
 8007a34:	4698      	mov	r8, r3
 8007a36:	42b9      	cmp	r1, r7
 8007a38:	d101      	bne.n	8007a3e <ExecuteMonitor+0x2a2>
 8007a3a:	e0a1      	b.n	8007b80 <ExecuteMonitor+0x3e4>
 8007a3c:	46b8      	mov	r8, r7
 8007a3e:	4643      	mov	r3, r8
 8007a40:	1c9f      	adds	r7, r3, #2
 8007a42:	4653      	mov	r3, sl
 8007a44:	2224      	movs	r2, #36	; 0x24
 8007a46:	4443      	add	r3, r8
 8007a48:	5c98      	ldrb	r0, [r3, r2]
 8007a4a:	210a      	movs	r1, #10
 8007a4c:	f7f8 fc06 	bl	800025c <__aeabi_uidivmod>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	b2c9      	uxtb	r1, r1
 8007a54:	b2ff      	uxtb	r7, r7
 8007a56:	4299      	cmp	r1, r3
 8007a58:	d1f0      	bne.n	8007a3c <ExecuteMonitor+0x2a0>
 8007a5a:	4643      	mov	r3, r8
 8007a5c:	46b8      	mov	r8, r7
 8007a5e:	3301      	adds	r3, #1
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 8007a66:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <ExecuteMonitor+0x378>)
 8007a68:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a6a:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007a6c:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	5c9b      	ldrb	r3, [r3, r2]
 8007a72:	210a      	movs	r1, #10
 8007a74:	0018      	movs	r0, r3
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	f7f8 fbf0 	bl	800025c <__aeabi_uidivmod>
 8007a7c:	2338      	movs	r3, #56	; 0x38
 8007a7e:	4652      	mov	r2, sl
 8007a80:	b2cf      	uxtb	r7, r1
 8007a82:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	2b5d      	cmp	r3, #93	; 0x5d
 8007a88:	d00d      	beq.n	8007aa6 <ExecuteMonitor+0x30a>
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	e000      	b.n	8007a94 <ExecuteMonitor+0x2f8>
 8007a92:	0013      	movs	r3, r2
 8007a94:	2124      	movs	r1, #36	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	4453      	add	r3, sl
 8007a9a:	5c5b      	ldrb	r3, [r3, r1]
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	2b5d      	cmp	r3, #93	; 0x5d
 8007aa0:	d1f7      	bne.n	8007a92 <ExecuteMonitor+0x2f6>
 8007aa2:	4690      	mov	r8, r2
 8007aa4:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	4b1a      	ldr	r3, [pc, #104]	; (8007b14 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007aaa:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8007aac:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4a20      	ldr	r2, [pc, #128]	; (8007b34 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ab2:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8007ab4:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ab6:	9b02      	ldr	r3, [sp, #8]
 8007ab8:	2214      	movs	r2, #20
 8007aba:	469c      	mov	ip, r3
 8007abc:	3124      	adds	r1, #36	; 0x24
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	4461      	add	r1, ip
 8007ac2:	3039      	adds	r0, #57	; 0x39
 8007ac4:	f00b fad5 	bl	8013072 <memcpy>
 8007ac8:	e6c3      	b.n	8007852 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007aca:	4653      	mov	r3, sl
 8007acc:	3324      	adds	r3, #36	; 0x24
 8007ace:	7858      	ldrb	r0, [r3, #1]
 8007ad0:	210a      	movs	r1, #10
 8007ad2:	f7f8 fbc3 	bl	800025c <__aeabi_uidivmod>
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	2338      	movs	r3, #56	; 0x38
 8007ada:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007adc:	4650      	mov	r0, sl
 8007ade:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007ae0:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <ExecuteMonitor+0x378>)
 8007ae4:	3b36      	subs	r3, #54	; 0x36
 8007ae6:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 8007ae8:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <ExecuteMonitor+0x398>)
 8007aea:	3b01      	subs	r3, #1
 8007aec:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007aee:	3126      	adds	r1, #38	; 0x26
 8007af0:	2212      	movs	r2, #18
 8007af2:	3039      	adds	r0, #57	; 0x39
 8007af4:	f00b fabd 	bl	8013072 <memcpy>
 8007af8:	e6ab      	b.n	8007852 <ExecuteMonitor+0xb6>
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	20000000 	.word	0x20000000
 8007b00:	200068e0 	.word	0x200068e0
 8007b04:	20006924 	.word	0x20006924
 8007b08:	20001ca4 	.word	0x20001ca4
 8007b0c:	20006921 	.word	0x20006921
 8007b10:	20001d24 	.word	0x20001d24
 8007b14:	20006901 	.word	0x20006901
 8007b18:	20006923 	.word	0x20006923
 8007b1c:	20006902 	.word	0x20006902
 8007b20:	20006920 	.word	0x20006920
 8007b24:	200068e1 	.word	0x200068e1
 8007b28:	200018dc 	.word	0x200018dc
 8007b2c:	20001a5c 	.word	0x20001a5c
 8007b30:	20006922 	.word	0x20006922
 8007b34:	20006900 	.word	0x20006900
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007b38:	4657      	mov	r7, sl
 8007b3a:	3724      	adds	r7, #36	; 0x24
 8007b3c:	7878      	ldrb	r0, [r7, #1]
 8007b3e:	210a      	movs	r1, #10
 8007b40:	f7f8 fb8c 	bl	800025c <__aeabi_uidivmod>
 8007b44:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <ExecuteMonitor+0x3f0>)
 8007b46:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007b48:	78b8      	ldrb	r0, [r7, #2]
 8007b4a:	210a      	movs	r1, #10
 8007b4c:	f7f8 fb86 	bl	800025c <__aeabi_uidivmod>
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <ExecuteMonitor+0x3f4>)
 8007b52:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007b54:	78f8      	ldrb	r0, [r7, #3]
 8007b56:	210a      	movs	r1, #10
 8007b58:	f7f8 fb80 	bl	800025c <__aeabi_uidivmod>
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	2338      	movs	r3, #56	; 0x38
 8007b60:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b62:	4650      	mov	r0, sl
 8007b64:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007b66:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007b68:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <ExecuteMonitor+0x3f8>)
 8007b6a:	3b34      	subs	r3, #52	; 0x34
 8007b6c:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <ExecuteMonitor+0x3fc>)
 8007b70:	3b03      	subs	r3, #3
 8007b72:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b74:	3128      	adds	r1, #40	; 0x28
 8007b76:	2210      	movs	r2, #16
 8007b78:	3039      	adds	r0, #57	; 0x39
 8007b7a:	f00b fa7a 	bl	8013072 <memcpy>
 8007b7e:	e668      	b.n	8007852 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007b80:	2202      	movs	r2, #2
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	e76d      	b.n	8007a66 <ExecuteMonitor+0x2ca>
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20006922 	.word	0x20006922
 8007b90:	20006920 	.word	0x20006920
 8007b94:	20006901 	.word	0x20006901
 8007b98:	20006900 	.word	0x20006900

08007b9c <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4c1c      	ldr	r4, [pc, #112]	; (8007c10 <StartDefaultTask+0x74>)
 8007ba0:	4d1c      	ldr	r5, [pc, #112]	; (8007c14 <StartDefaultTask+0x78>)
 8007ba2:	4e1d      	ldr	r6, [pc, #116]	; (8007c18 <StartDefaultTask+0x7c>)
 8007ba4:	e00f      	b.n	8007bc6 <StartDefaultTask+0x2a>
		switch(indMode){
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d022      	beq.n	8007bf0 <StartDefaultTask+0x54>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d028      	beq.n	8007c00 <StartDefaultTask+0x64>
		CheckAttachedButtons();
 8007bae:	f004 fb7b 	bl	800c2a8 <CheckAttachedButtons>
		ExecuteSnippet();
 8007bb2:	f7fd fd19 	bl	80055e8 <ExecuteSnippet>
		ExecuteMonitor();
 8007bb6:	f7ff fdf1 	bl	800779c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007bba:	782b      	ldrb	r3, [r5, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d100      	bne.n	8007bc2 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8007bc0:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8007bc2:	f007 fa5f 	bl	800f084 <vPortYield>
		switch(indMode){
 8007bc6:	7823      	ldrb	r3, [r4, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d1ec      	bne.n	8007ba6 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	4813      	ldr	r0, [pc, #76]	; (8007c1c <StartDefaultTask+0x80>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	01c9      	lsls	r1, r1, #7
 8007bd4:	f009 f864 	bl	8010ca0 <HAL_GPIO_WritePin>
 8007bd8:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8007bda:	f005 fcf7 	bl	800d5cc <osDelay>
 8007bde:	2180      	movs	r1, #128	; 0x80
 8007be0:	2200      	movs	r2, #0
 8007be2:	01c9      	lsls	r1, r1, #7
 8007be4:	480d      	ldr	r0, [pc, #52]	; (8007c1c <StartDefaultTask+0x80>)
 8007be6:	f009 f85b 	bl	8010ca0 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007bea:	2300      	movs	r3, #0
 8007bec:	7023      	strb	r3, [r4, #0]
				break;
 8007bee:	e7de      	b.n	8007bae <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	480a      	ldr	r0, [pc, #40]	; (8007c1c <StartDefaultTask+0x80>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	01c9      	lsls	r1, r1, #7
 8007bf8:	f009 f852 	bl	8010ca0 <HAL_GPIO_WritePin>
 8007bfc:	201e      	movs	r0, #30
 8007bfe:	e7ec      	b.n	8007bda <StartDefaultTask+0x3e>
				RTOS_IND_blink(200);
 8007c00:	2180      	movs	r1, #128	; 0x80
 8007c02:	4806      	ldr	r0, [pc, #24]	; (8007c1c <StartDefaultTask+0x80>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	01c9      	lsls	r1, r1, #7
 8007c08:	f009 f84a 	bl	8010ca0 <HAL_GPIO_WritePin>
 8007c0c:	20c8      	movs	r0, #200	; 0xc8
 8007c0e:	e7e4      	b.n	8007bda <StartDefaultTask+0x3e>
 8007c10:	20001146 	.word	0x20001146
 8007c14:	2000245b 	.word	0x2000245b
 8007c18:	20002450 	.word	0x20002450
 8007c1c:	48000800 	.word	0x48000800

08007c20 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007c20:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007c22:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	4904      	ldr	r1, [pc, #16]	; (8007c38 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007c28:	f7f8 fa92 	bl	8000150 <__udivsi3>
 8007c2c:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007c2e:	6058      	str	r0, [r3, #4]
}
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	200000b8 	.word	0x200000b8
 8007c38:	00002710 	.word	0x00002710
 8007c3c:	20001da4 	.word	0x20001da4

08007c40 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c40:	21fa      	movs	r1, #250	; 0xfa
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007c44:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	0089      	lsls	r1, r1, #2
 8007c4a:	f7f8 fa81 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c4e:	4c0d      	ldr	r4, [pc, #52]	; (8007c84 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c50:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c52:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007c54:	f006 fbe6 	bl	800e424 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <ulMainGetRunTimeCounterValue+0x48>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	015b      	lsls	r3, r3, #5
 8007c5e:	d50c      	bpl.n	8007c7a <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c60:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007c62:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c64:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007c68:	0084      	lsls	r4, r0, #2
 8007c6a:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	0028      	movs	r0, r5
 8007c70:	f7f8 fa6e 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007c74:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c76:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c7a:	1bad      	subs	r5, r5, r6
 8007c7c:	e7f3      	b.n	8007c66 <ulMainGetRunTimeCounterValue+0x26>
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	200000b8 	.word	0x200000b8
 8007c84:	e000e018 	.word	0xe000e018
 8007c88:	e000ed04 	.word	0xe000ed04
 8007c8c:	20001da4 	.word	0x20001da4

08007c90 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007c90:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007c92:	f007 f99f 	bl	800efd4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007c96:	b2c4      	uxtb	r4, r0
 8007c98:	0020      	movs	r0, r4
 8007c9a:	f002 fcc9 	bl	800a630 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007c9e:	0020      	movs	r0, r4
 8007ca0:	f003 f8f2 	bl	800ae88 <SwitchStreamDMAToMsg>
}
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)

08007ca8 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	46ce      	mov	lr, r9
 8007cac:	4647      	mov	r7, r8
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	0015      	movs	r5, r2
 8007cb4:	466a      	mov	r2, sp
 8007cb6:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007cb8:	aa0c      	add	r2, sp, #48	; 0x30
 8007cba:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007cbc:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d06b      	beq.n	8007d9a <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d051      	beq.n	8007d6a <SetupDMAStreams+0xc2>
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	d04f      	beq.n	8007d6a <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d06a      	beq.n	8007da4 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007cce:	2801      	cmp	r0, #1
 8007cd0:	d052      	beq.n	8007d78 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007cd2:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007cd4:	2802      	cmp	r0, #2
 8007cd6:	d149      	bne.n	8007d6c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f005 fb41 	bl	800d360 <GetUart>
 8007cde:	ab0c      	add	r3, sp, #48	; 0x30
 8007ce0:	0004      	movs	r4, r0
 8007ce2:	7818      	ldrb	r0, [r3, #0]
 8007ce4:	f005 fb3c 	bl	800d360 <GetUart>
 8007ce8:	2201      	movs	r2, #1
 8007cea:	0001      	movs	r1, r0
 8007cec:	0020      	movs	r0, r4
 8007cee:	f7ff fc0f 	bl	8007510 <StartDMAstream>
 8007cf2:	2817      	cmp	r0, #23
 8007cf4:	d04f      	beq.n	8007d96 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007cf6:	21fa      	movs	r1, #250	; 0xfa
 8007cf8:	0168      	lsls	r0, r5, #5
 8007cfa:	1b40      	subs	r0, r0, r5
 8007cfc:	0080      	lsls	r0, r0, #2
 8007cfe:	1940      	adds	r0, r0, r5
 8007d00:	0089      	lsls	r1, r1, #2
 8007d02:	00c0      	lsls	r0, r0, #3
 8007d04:	f7f8 fa24 	bl	8000150 <__udivsi3>
 8007d08:	4b49      	ldr	r3, [pc, #292]	; (8007e30 <SetupDMAStreams+0x188>)
 8007d0a:	4d4a      	ldr	r5, [pc, #296]	; (8007e34 <SetupDMAStreams+0x18c>)
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4698      	mov	r8, r3
 8007d10:	230f      	movs	r3, #15
 8007d12:	0001      	movs	r1, r0
 8007d14:	2200      	movs	r2, #0
 8007d16:	446b      	add	r3, sp
 8007d18:	0007      	movs	r7, r0
 8007d1a:	0028      	movs	r0, r5
 8007d1c:	f006 fffe 	bl	800ed1c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007d20:	466b      	mov	r3, sp
 8007d22:	7bdb      	ldrb	r3, [r3, #15]
 8007d24:	4c44      	ldr	r4, [pc, #272]	; (8007e38 <SetupDMAStreams+0x190>)
 8007d26:	3b01      	subs	r3, #1
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007d2c:	ab0c      	add	r3, sp, #48	; 0x30
 8007d2e:	7818      	ldrb	r0, [r3, #0]
 8007d30:	f005 fb16 	bl	800d360 <GetUart>
 8007d34:	466b      	mov	r3, sp
 8007d36:	4681      	mov	r9, r0
 8007d38:	7bd8      	ldrb	r0, [r3, #15]
 8007d3a:	f005 fb11 	bl	800d360 <GetUart>
 8007d3e:	2201      	movs	r2, #1
 8007d40:	0001      	movs	r1, r0
 8007d42:	4648      	mov	r0, r9
 8007d44:	f7ff fbe4 	bl	8007510 <StartDMAstream>
 8007d48:	2817      	cmp	r0, #23
 8007d4a:	d024      	beq.n	8007d96 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007d4c:	4643      	mov	r3, r8
 8007d4e:	0028      	movs	r0, r5
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	ab0c      	add	r3, sp, #48	; 0x30
 8007d56:	0039      	movs	r1, r7
 8007d58:	f006 ffe0 	bl	800ed1c <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8007d5e:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007d60:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007d62:	3b01      	subs	r3, #1
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	511e      	str	r6, [r3, r4]
 8007d68:	e044      	b.n	8007df4 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007d6a:	2467      	movs	r4, #103	; 0x67
}
 8007d6c:	0020      	movs	r0, r4
 8007d6e:	b005      	add	sp, #20
 8007d70:	bc0c      	pop	{r2, r3}
 8007d72:	4690      	mov	r8, r2
 8007d74:	4699      	mov	r9, r3
 8007d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007d78:	0010      	movs	r0, r2
 8007d7a:	f005 faf1 	bl	800d360 <GetUart>
 8007d7e:	466b      	mov	r3, sp
 8007d80:	0004      	movs	r4, r0
 8007d82:	7bd8      	ldrb	r0, [r3, #15]
 8007d84:	f005 faec 	bl	800d360 <GetUart>
 8007d88:	2201      	movs	r2, #1
 8007d8a:	0001      	movs	r1, r0
 8007d8c:	0020      	movs	r0, r4
 8007d8e:	f7ff fbbf 	bl	8007510 <StartDMAstream>
 8007d92:	2817      	cmp	r0, #23
 8007d94:	d13d      	bne.n	8007e12 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007d96:	2417      	movs	r4, #23
 8007d98:	e7e8      	b.n	8007d6c <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	4a27      	ldr	r2, [pc, #156]	; (8007e3c <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007d9e:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007da0:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007da2:	e7e3      	b.n	8007d6c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007da4:	0018      	movs	r0, r3
 8007da6:	f005 fadb 	bl	800d360 <GetUart>
 8007daa:	ab0c      	add	r3, sp, #48	; 0x30
 8007dac:	0004      	movs	r4, r0
 8007dae:	7818      	ldrb	r0, [r3, #0]
 8007db0:	f005 fad6 	bl	800d360 <GetUart>
 8007db4:	2201      	movs	r2, #1
 8007db6:	0001      	movs	r1, r0
 8007db8:	0020      	movs	r0, r4
 8007dba:	f7ff fba9 	bl	8007510 <StartDMAstream>
 8007dbe:	2817      	cmp	r0, #23
 8007dc0:	d0e9      	beq.n	8007d96 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007dc2:	21fa      	movs	r1, #250	; 0xfa
 8007dc4:	0168      	lsls	r0, r5, #5
 8007dc6:	1b40      	subs	r0, r0, r5
 8007dc8:	0080      	lsls	r0, r0, #2
 8007dca:	1940      	adds	r0, r0, r5
 8007dcc:	0089      	lsls	r1, r1, #2
 8007dce:	00c0      	lsls	r0, r0, #3
 8007dd0:	f7f8 f9be 	bl	8000150 <__udivsi3>
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <SetupDMAStreams+0x188>)
 8007dd6:	0001      	movs	r1, r0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	230f      	movs	r3, #15
 8007ddc:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007dde:	2200      	movs	r2, #0
 8007de0:	4814      	ldr	r0, [pc, #80]	; (8007e34 <SetupDMAStreams+0x18c>)
 8007de2:	f006 ff9b 	bl	800ed1c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007de6:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007de8:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007dea:	7bdb      	ldrb	r3, [r3, #15]
 8007dec:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <SetupDMAStreams+0x190>)
 8007dee:	3b01      	subs	r3, #1
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007df4:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	d0b8      	beq.n	8007d6c <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007dfa:	f006 fb0d 	bl	800e418 <xTaskGetTickCount>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	425b      	negs	r3, r3
 8007e02:	0002      	movs	r2, r0
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2101      	movs	r1, #1
 8007e08:	2300      	movs	r3, #0
 8007e0a:	0028      	movs	r0, r5
 8007e0c:	f006 ffa6 	bl	800ed5c <xTimerGenericCommand>
 8007e10:	e7ac      	b.n	8007d6c <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007e12:	21fa      	movs	r1, #250	; 0xfa
 8007e14:	0168      	lsls	r0, r5, #5
 8007e16:	1b40      	subs	r0, r0, r5
 8007e18:	0080      	lsls	r0, r0, #2
 8007e1a:	1940      	adds	r0, r0, r5
 8007e1c:	0089      	lsls	r1, r1, #2
 8007e1e:	00c0      	lsls	r0, r0, #3
 8007e20:	f7f8 f996 	bl	8000150 <__udivsi3>
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <SetupDMAStreams+0x188>)
 8007e26:	0001      	movs	r1, r0
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	ab0c      	add	r3, sp, #48	; 0x30
 8007e2c:	e7d7      	b.n	8007dde <SetupDMAStreams+0x136>
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	08007c91 	.word	0x08007c91
 8007e34:	0801a5c0 	.word	0x0801a5c0
 8007e38:	20001880 	.word	0x20001880
 8007e3c:	20000c34 	.word	0x20000c34

08007e40 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007e40:	b510      	push	{r4, lr}
	switch(port){
 8007e42:	2805      	cmp	r0, #5
 8007e44:	d80a      	bhi.n	8007e5c <NotifyMessagingTask+0x1c>
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <NotifyMessagingTask+0x30>)
 8007e48:	0080      	lsls	r0, r0, #2
 8007e4a:	581b      	ldr	r3, [r3, r0]
 8007e4c:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <NotifyMessagingTask+0x34>)
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	2202      	movs	r2, #2
 8007e54:	2300      	movs	r3, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	f006 feb0 	bl	800ebbc <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007e5c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <NotifyMessagingTask+0x38>)
 8007e60:	e7f6      	b.n	8007e50 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007e62:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <NotifyMessagingTask+0x3c>)
 8007e64:	e7f4      	b.n	8007e50 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <NotifyMessagingTask+0x40>)
 8007e68:	e7f2      	b.n	8007e50 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <NotifyMessagingTask+0x44>)
 8007e6c:	e7f0      	b.n	8007e50 <NotifyMessagingTask+0x10>
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	08017c2c 	.word	0x08017c2c
 8007e74:	20001cc4 	.word	0x20001cc4
 8007e78:	20001cb4 	.word	0x20001cb4
 8007e7c:	20001cb8 	.word	0x20001cb8
 8007e80:	20001cbc 	.word	0x20001cbc
 8007e84:	20001cc0 	.word	0x20001cc0

08007e88 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	ac06      	add	r4, sp, #24
 8007e8e:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007e90:	0004      	movs	r4, r0
 8007e92:	4314      	orrs	r4, r2
 8007e94:	d011      	beq.n	8007eba <SendMessageFromPort+0x32>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d10b      	bne.n	8007eb2 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007e9a:	1c96      	adds	r6, r2, #2
 8007e9c:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007e9e:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007ea0:	2e01      	cmp	r6, #1
 8007ea2:	d803      	bhi.n	8007eac <SendMessageFromPort+0x24>
 8007ea4:	9500      	str	r5, [sp, #0]
 8007ea6:	f000 f80b 	bl	8007ec0 <SendMessageFromPort.part.0>
 8007eaa:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007eac:	0020      	movs	r0, r4
 8007eae:	b002      	add	sp, #8
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	d0f6      	beq.n	8007ea4 <SendMessageFromPort+0x1c>
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d1f4      	bne.n	8007ea4 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007eba:	2467      	movs	r4, #103	; 0x67
 8007ebc:	e7f6      	b.n	8007eac <SendMessageFromPort+0x24>
 8007ebe:	46c0      	nop			; (mov r8, r8)

08007ec0 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec2:	46de      	mov	lr, fp
 8007ec4:	464e      	mov	r6, r9
 8007ec6:	4645      	mov	r5, r8
 8007ec8:	4657      	mov	r7, sl
 8007eca:	b5e0      	push	{r5, r6, r7, lr}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	0005      	movs	r5, r0
 8007ed0:	9004      	str	r0, [sp, #16]
 8007ed2:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ed4:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ed6:	ab10      	add	r3, sp, #64	; 0x40
 8007ed8:	4689      	mov	r9, r1
 8007eda:	4690      	mov	r8, r2
 8007edc:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ede:	f006 fa05 	bl	800e2ec <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007ee2:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ee4:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f006 fa10 	bl	800e30c <vTaskPrioritySet>
	message[0] ='H';
 8007eec:	2348      	movs	r3, #72	; 0x48
 8007eee:	4cd2      	ldr	r4, [pc, #840]	; (8008238 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ef0:	464a      	mov	r2, r9
	message[0] ='H';
 8007ef2:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007ef4:	3312      	adds	r3, #18
 8007ef6:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ef8:	002b      	movs	r3, r5
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d000      	beq.n	8007f00 <SendMessageFromPort.part.0+0x40>
 8007efe:	e094      	b.n	800802a <SendMessageFromPort.part.0+0x16a>
 8007f00:	4643      	mov	r3, r8
 8007f02:	1c9f      	adds	r7, r3, #2
 8007f04:	b2ff      	uxtb	r7, r7
 8007f06:	2f01      	cmp	r7, #1
 8007f08:	d800      	bhi.n	8007f0c <SendMessageFromPort.part.0+0x4c>
 8007f0a:	e095      	b.n	8008038 <SendMessageFromPort.part.0+0x178>
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d100      	bne.n	8007f14 <SendMessageFromPort.part.0+0x54>
 8007f12:	e091      	b.n	8008038 <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007f14:	4bc9      	ldr	r3, [pc, #804]	; (800823c <SendMessageFromPort.part.0+0x37c>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4699      	mov	r9, r3
		message[2] =length;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007f1e:	4643      	mov	r3, r8
 8007f20:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007f22:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f24:	4ac6      	ldr	r2, [pc, #792]	; (8008240 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007f26:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f28:	7913      	ldrb	r3, [r2, #4]
 8007f2a:	7851      	ldrb	r1, [r2, #1]
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	0089      	lsls	r1, r1, #2
 8007f32:	430b      	orrs	r3, r1
 8007f34:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007f36:	22ff      	movs	r2, #255	; 0xff
 8007f38:	455a      	cmp	r2, fp
 8007f3a:	4192      	sbcs	r2, r2
 8007f3c:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f3e:	0052      	lsls	r2, r2, #1
 8007f40:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007f42:	465a      	mov	r2, fp
 8007f44:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007f46:	2200      	movs	r2, #0
 8007f48:	4692      	mov	sl, r2
 8007f4a:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007f50:	2aff      	cmp	r2, #255	; 0xff
 8007f52:	d903      	bls.n	8007f5c <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007f54:	0a12      	lsrs	r2, r2, #8
 8007f56:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007f5c:	2e2e      	cmp	r6, #46	; 0x2e
 8007f5e:	d800      	bhi.n	8007f62 <SendMessageFromPort.part.0+0xa2>
 8007f60:	e157      	b.n	8008212 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007f62:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007f64:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007f66:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007f68:	4db6      	ldr	r5, [pc, #728]	; (8008244 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007f6e:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007f70:	2e2d      	cmp	r6, #45	; 0x2d
 8007f72:	d900      	bls.n	8007f76 <SendMessageFromPort.part.0+0xb6>
 8007f74:	e136      	b.n	80081e4 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007f76:	237f      	movs	r3, #127	; 0x7f
 8007f78:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f7a:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f80:	4653      	mov	r3, sl
 8007f82:	1dd8      	adds	r0, r3, #7
 8007f84:	4bb0      	ldr	r3, [pc, #704]	; (8008248 <SendMessageFromPort.part.0+0x388>)
 8007f86:	1820      	adds	r0, r4, r0
 8007f88:	18c9      	adds	r1, r1, r3
 8007f8a:	0032      	movs	r2, r6
 8007f8c:	f00b f871 	bl	8013072 <memcpy>
					ptrShift =0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007f94:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007f96:	4653      	mov	r3, sl
 8007f98:	1d1d      	adds	r5, r3, #4
 8007f9a:	19ad      	adds	r5, r5, r6
 8007f9c:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007f9e:	4bab      	ldr	r3, [pc, #684]	; (800824c <SendMessageFromPort.part.0+0x38c>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03d      	beq.n	8008022 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007fa6:	4baa      	ldr	r3, [pc, #680]	; (8008250 <SendMessageFromPort.part.0+0x390>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2bff      	cmp	r3, #255	; 0xff
 8007fac:	d100      	bne.n	8007fb0 <SendMessageFromPort.part.0+0xf0>
 8007fae:	e106      	b.n	80081be <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fb0:	4aa8      	ldr	r2, [pc, #672]	; (8008254 <SendMessageFromPort.part.0+0x394>)
 8007fb2:	7817      	ldrb	r7, [r2, #0]
 8007fb4:	2f00      	cmp	r7, #0
 8007fb6:	d100      	bne.n	8007fba <SendMessageFromPort.part.0+0xfa>
 8007fb8:	e139      	b.n	800822e <SendMessageFromPort.part.0+0x36e>
 8007fba:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fbc:	0021      	movs	r1, r4
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	4451      	add	r1, sl
 8007fc2:	4694      	mov	ip, r2
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007fc8:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fca:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fcc:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fce:	46ac      	mov	ip, r5
 8007fd0:	000d      	movs	r5, r1
 8007fd2:	48a1      	ldr	r0, [pc, #644]	; (8008258 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007fd4:	8801      	ldrh	r1, [r0, #0]
 8007fd6:	420f      	tst	r7, r1
 8007fd8:	d009      	beq.n	8007fee <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007fda:	3201      	adds	r2, #1
 8007fdc:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007fde:	1991      	adds	r1, r2, r6
 8007fe0:	292c      	cmp	r1, #44	; 0x2c
 8007fe2:	dd00      	ble.n	8007fe6 <SendMessageFromPort.part.0+0x126>
 8007fe4:	e0fc      	b.n	80081e0 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	1889      	adds	r1, r1, r2
 8007fea:	1989      	adds	r1, r1, r6
 8007fec:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3002      	adds	r0, #2
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	d9ed      	bls.n	8007fd4 <SendMessageFromPort.part.0+0x114>
 8007ff8:	4665      	mov	r5, ip
 8007ffa:	0010      	movs	r0, r2
 8007ffc:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007ffe:	4653      	mov	r3, sl
 8008000:	3307      	adds	r3, #7
 8008002:	199e      	adds	r6, r3, r6
 8008004:	1836      	adds	r6, r6, r0
 8008006:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8008008:	292b      	cmp	r1, #43	; 0x2b
 800800a:	dd00      	ble.n	800800e <SendMessageFromPort.part.0+0x14e>
 800800c:	e0e8      	b.n	80081e0 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800800e:	4993      	ldr	r1, [pc, #588]	; (800825c <SendMessageFromPort.part.0+0x39c>)
 8008010:	3502      	adds	r5, #2
 8008012:	780b      	ldrb	r3, [r1, #0]
 8008014:	19a6      	adds	r6, r4, r6
 8008016:	3301      	adds	r3, #1
 8008018:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800801a:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800801c:	700b      	strb	r3, [r1, #0]
 800801e:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008020:	b2ed      	uxtb	r5, r5
 8008022:	4647      	mov	r7, r8
 8008024:	3702      	adds	r7, #2
 8008026:	b2ff      	uxtb	r7, r7
 8008028:	e012      	b.n	8008050 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800802a:	465b      	mov	r3, fp
 800802c:	2b00      	cmp	r3, #0
 800802e:	d000      	beq.n	8008032 <SendMessageFromPort.part.0+0x172>
 8008030:	e0af      	b.n	8008192 <SendMessageFromPort.part.0+0x2d2>
 8008032:	4647      	mov	r7, r8
 8008034:	3702      	adds	r7, #2
 8008036:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8008038:	3e01      	subs	r6, #1
 800803a:	4b89      	ldr	r3, [pc, #548]	; (8008260 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 800803c:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 800803e:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8008040:	1b89      	subs	r1, r1, r6
 8008042:	4e88      	ldr	r6, [pc, #544]	; (8008264 <SendMessageFromPort.part.0+0x3a4>)
 8008044:	00c9      	lsls	r1, r1, #3
 8008046:	1989      	adds	r1, r1, r6
 8008048:	002a      	movs	r2, r5
 800804a:	4887      	ldr	r0, [pc, #540]	; (8008268 <SendMessageFromPort.part.0+0x3a8>)
 800804c:	f00b f811 	bl	8013072 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8008050:	1ceb      	adds	r3, r5, #3
 8008052:	469a      	mov	sl, r3
 8008054:	4e85      	ldr	r6, [pc, #532]	; (800826c <SendMessageFromPort.part.0+0x3ac>)
 8008056:	001a      	movs	r2, r3
 8008058:	0021      	movs	r1, r4
 800805a:	0030      	movs	r0, r6
	message[2] =length;
 800805c:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 800805e:	f00b f808 	bl	8013072 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8008062:	b2ab      	uxth	r3, r5
 8008064:	4651      	mov	r1, sl
 8008066:	0030      	movs	r0, r6
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	f002 ff9b 	bl	800afa4 <CalculateCRC8>
 800806e:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8008070:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8008072:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8008074:	2100      	movs	r1, #0
 8008076:	0030      	movs	r0, r6
 8008078:	f00b f804 	bl	8013084 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800807c:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 800807e:	2f01      	cmp	r7, #1
 8008080:	d94a      	bls.n	8008118 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8008082:	3b2c      	subs	r3, #44	; 0x2c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d800      	bhi.n	800808a <SendMessageFromPort.part.0+0x1ca>
 8008088:	e08d      	b.n	80081a6 <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800808a:	4b6d      	ldr	r3, [pc, #436]	; (8008240 <SendMessageFromPort.part.0+0x380>)
 800808c:	4698      	mov	r8, r3
 800808e:	88db      	ldrh	r3, [r3, #6]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d100      	bne.n	8008096 <SendMessageFromPort.part.0+0x1d6>
 8008094:	e08f      	b.n	80081b6 <SendMessageFromPort.part.0+0x2f6>
 8008096:	9e05      	ldr	r6, [sp, #20]
 8008098:	4f75      	ldr	r7, [pc, #468]	; (8008270 <SendMessageFromPort.part.0+0x3b0>)
 800809a:	4b76      	ldr	r3, [pc, #472]	; (8008274 <SendMessageFromPort.part.0+0x3b4>)
 800809c:	3604      	adds	r6, #4
 800809e:	46ba      	mov	sl, r7
 80080a0:	b2b6      	uxth	r6, r6
 80080a2:	2500      	movs	r5, #0
 80080a4:	4699      	mov	r9, r3
 80080a6:	9f04      	ldr	r7, [sp, #16]
 80080a8:	e005      	b.n	80080b6 <SendMessageFromPort.part.0+0x1f6>
 80080aa:	4643      	mov	r3, r8
 80080ac:	3501      	adds	r5, #1
 80080ae:	88db      	ldrh	r3, [r3, #6]
 80080b0:	b2ed      	uxtb	r5, r5
 80080b2:	42ab      	cmp	r3, r5
 80080b4:	d91c      	bls.n	80080f0 <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 80080b6:	2332      	movs	r3, #50	; 0x32
 80080b8:	0032      	movs	r2, r6
 80080ba:	0021      	movs	r1, r4
 80080bc:	0038      	movs	r0, r7
 80080be:	f7fa ff43 	bl	8002f48 <Send_BOS_Message>
				osDelay(200);
 80080c2:	20c8      	movs	r0, #200	; 0xc8
 80080c4:	f005 fa82 	bl	800d5cc <osDelay>
				if(ACK_FLAG == true)
 80080c8:	464b      	mov	r3, r9
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 80080d0:	4653      	mov	r3, sl
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0e8      	beq.n	80080aa <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 80080d8:	2332      	movs	r3, #50	; 0x32
 80080da:	0032      	movs	r2, r6
 80080dc:	0021      	movs	r1, r4
 80080de:	0038      	movs	r0, r7
 80080e0:	f7fa ff32 	bl	8002f48 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80080e4:	4643      	mov	r3, r8
 80080e6:	3501      	adds	r5, #1
 80080e8:	88db      	ldrh	r3, [r3, #6]
 80080ea:	b2ed      	uxtb	r5, r5
 80080ec:	42ab      	cmp	r3, r5
 80080ee:	d8e2      	bhi.n	80080b6 <SendMessageFromPort.part.0+0x1f6>
 80080f0:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 80080f2:	2300      	movs	r3, #0
 80080f4:	464a      	mov	r2, r9
 80080f6:	703b      	strb	r3, [r7, #0]
 80080f8:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 80080fa:	2000      	movs	r0, #0
 80080fc:	9903      	ldr	r1, [sp, #12]
 80080fe:	f006 f905 	bl	800e30c <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8008102:	2202      	movs	r2, #2
	return result;
 8008104:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8008106:	4b5c      	ldr	r3, [pc, #368]	; (8008278 <SendMessageFromPort.part.0+0x3b8>)
 8008108:	701a      	strb	r2, [r3, #0]
}
 800810a:	b007      	add	sp, #28
 800810c:	bc3c      	pop	{r2, r3, r4, r5}
 800810e:	4690      	mov	r8, r2
 8008110:	4699      	mov	r9, r3
 8008112:	46a2      	mov	sl, r4
 8008114:	46ab      	mov	fp, r5
 8008116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8008118:	2b00      	cmp	r3, #0
 800811a:	d03e      	beq.n	800819a <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 800811c:	4648      	mov	r0, r9
 800811e:	f7fb fd5b 	bl	8003bd8 <FindBroadcastRoutes>
 8008122:	2300      	movs	r3, #0
 8008124:	4698      	mov	r8, r3
 8008126:	4b45      	ldr	r3, [pc, #276]	; (800823c <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008128:	9e05      	ldr	r6, [sp, #20]
 800812a:	4699      	mov	r9, r3
 800812c:	4b53      	ldr	r3, [pc, #332]	; (800827c <SendMessageFromPort.part.0+0x3bc>)
 800812e:	3604      	adds	r6, #4
 8008130:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008132:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008134:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008136:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008138:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800813a:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 800813c:	4646      	mov	r6, r8
 800813e:	4698      	mov	r8, r3
 8008140:	4f4b      	ldr	r7, [pc, #300]	; (8008270 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008142:	464b      	mov	r3, r9
 8008144:	465a      	mov	r2, fp
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	3b01      	subs	r3, #1
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	5ad3      	ldrh	r3, [r2, r3]
 800814e:	4652      	mov	r2, sl
 8008150:	4133      	asrs	r3, r6
 8008152:	421a      	tst	r2, r3
 8008154:	d10a      	bne.n	800816c <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 8008156:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008158:	3501      	adds	r5, #1
			Delay_us(10);
 800815a:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800815c:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 800815e:	703b      	strb	r3, [r7, #0]
 8008160:	3601      	adds	r6, #1
			Delay_us(10);
 8008162:	f004 feef 	bl	800cf44 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008166:	2d06      	cmp	r5, #6
 8008168:	d1eb      	bne.n	8008142 <SendMessageFromPort.part.0+0x282>
 800816a:	e7c6      	b.n	80080fa <SendMessageFromPort.part.0+0x23a>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 800816c:	2332      	movs	r3, #50	; 0x32
 800816e:	4642      	mov	r2, r8
 8008170:	0021      	movs	r1, r4
 8008172:	0028      	movs	r0, r5
 8008174:	f7fa fee8 	bl	8002f48 <Send_BOS_Message>
				osDelay(200);
 8008178:	20c8      	movs	r0, #200	; 0xc8
 800817a:	f005 fa27 	bl	800d5cc <osDelay>
				if(rejected_FLAG == true)
 800817e:	783b      	ldrb	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0e8      	beq.n	8008156 <SendMessageFromPort.part.0+0x296>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8008184:	2332      	movs	r3, #50	; 0x32
 8008186:	4642      	mov	r2, r8
 8008188:	0021      	movs	r1, r4
 800818a:	9804      	ldr	r0, [sp, #16]
 800818c:	f7fa fedc 	bl	8002f48 <Send_BOS_Message>
 8008190:	e7e1      	b.n	8008156 <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8008192:	2a00      	cmp	r2, #0
 8008194:	d000      	beq.n	8008198 <SendMessageFromPort.part.0+0x2d8>
 8008196:	e6c0      	b.n	8007f1a <SendMessageFromPort.part.0+0x5a>
 8008198:	e6bc      	b.n	8007f14 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800819a:	464b      	mov	r3, r9
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1bd      	bne.n	800811c <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 80081a0:	7923      	ldrb	r3, [r4, #4]
 80081a2:	4699      	mov	r9, r3
 80081a4:	e7ba      	b.n	800811c <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 80081a6:	9a05      	ldr	r2, [sp, #20]
 80081a8:	2332      	movs	r3, #50	; 0x32
 80081aa:	3204      	adds	r2, #4
 80081ac:	b292      	uxth	r2, r2
 80081ae:	0021      	movs	r1, r4
 80081b0:	9804      	ldr	r0, [sp, #16]
 80081b2:	f7fa fec9 	bl	8002f48 <Send_BOS_Message>
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <SendMessageFromPort.part.0+0x3b4>)
 80081b8:	4f2d      	ldr	r7, [pc, #180]	; (8008270 <SendMessageFromPort.part.0+0x3b0>)
 80081ba:	4699      	mov	r9, r3
 80081bc:	e799      	b.n	80080f2 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80081be:	2e2c      	cmp	r6, #44	; 0x2c
 80081c0:	d80e      	bhi.n	80081e0 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 80081c2:	4a26      	ldr	r2, [pc, #152]	; (800825c <SendMessageFromPort.part.0+0x39c>)
 80081c4:	4647      	mov	r7, r8
 80081c6:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80081c8:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80081ca:	3301      	adds	r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	7013      	strb	r3, [r2, #0]
 80081d0:	4652      	mov	r2, sl
 80081d2:	18a2      	adds	r2, r4, r2
 80081d4:	1996      	adds	r6, r2, r6
 80081d6:	3702      	adds	r7, #2
 80081d8:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 80081da:	b2ed      	uxtb	r5, r5
 80081dc:	b2ff      	uxtb	r7, r7
 80081de:	e737      	b.n	8008050 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80081e0:	2069      	movs	r0, #105	; 0x69
 80081e2:	e792      	b.n	800810a <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80081e4:	465b      	mov	r3, fp
 80081e6:	4642      	mov	r2, r8
 80081e8:	4649      	mov	r1, r9
 80081ea:	9700      	str	r7, [sp, #0]
 80081ec:	9804      	ldr	r0, [sp, #16]
 80081ee:	f7ff fe4b 	bl	8007e88 <SendMessageFromPort>
					osDelay(10);
 80081f2:	200a      	movs	r0, #10
 80081f4:	f005 f9ea 	bl	800d5cc <osDelay>
					totalNumberOfParams -=numberOfParams;
 80081f8:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80081fa:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 80081fc:	3e2e      	subs	r6, #46	; 0x2e
 80081fe:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8008200:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8008202:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8008204:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8008206:	2e00      	cmp	r6, #0
 8008208:	d000      	beq.n	800820c <SendMessageFromPort.part.0+0x34c>
 800820a:	e6b1      	b.n	8007f70 <SendMessageFromPort.part.0+0xb0>
 800820c:	2500      	movs	r5, #0
 800820e:	362e      	adds	r6, #46	; 0x2e
 8008210:	e6c5      	b.n	8007f9e <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008212:	4653      	mov	r3, sl
 8008214:	1dd8      	adds	r0, r3, #7
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8008218:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800821a:	8819      	ldrh	r1, [r3, #0]
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <SendMessageFromPort.part.0+0x388>)
 800821e:	1820      	adds	r0, r4, r0
 8008220:	18c9      	adds	r1, r1, r3
 8008222:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8008224:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008226:	f00a ff24 	bl	8013072 <memcpy>
			length =numberOfParams + shift + 4;
 800822a:	b2ed      	uxtb	r5, r5
 800822c:	e6b7      	b.n	8007f9e <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800822e:	0031      	movs	r1, r6
 8008230:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8008232:	2200      	movs	r2, #0
 8008234:	e6e3      	b.n	8007ffe <SendMessageFromPort.part.0+0x13e>
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	20000c60 	.word	0x20000c60
 800823c:	20000aa0 	.word	0x20000aa0
 8008240:	200067e0 	.word	0x200067e0
 8008244:	20001dac 	.word	0x20001dac
 8008248:	20000b44 	.word	0x20000b44
 800824c:	20001118 	.word	0x20001118
 8008250:	20000050 	.word	0x20000050
 8008254:	20000008 	.word	0x20000008
 8008258:	20000aa4 	.word	0x20000aa4
 800825c:	20000c50 	.word	0x20000c50
 8008260:	20000c58 	.word	0x20000c58
 8008264:	20000c98 	.word	0x20000c98
 8008268:	20000c63 	.word	0x20000c63
 800826c:	200018a4 	.word	0x200018a4
 8008270:	20001144 	.word	0x20001144
 8008274:	20001145 	.word	0x20001145
 8008278:	20000c44 	.word	0x20000c44
 800827c:	20000b74 	.word	0x20000b74

08008280 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008280:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008282:	b500      	push	{lr}
	AddBcastPayload = false;
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008286:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008288:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <BroadcastReceivedMessage+0x38>)
 800828c:	b289      	uxth	r1, r1
 800828e:	7018      	strb	r0, [r3, #0]
 8008290:	9100      	str	r1, [sp, #0]
 8008292:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8008294:	28ff      	cmp	r0, #255	; 0xff
 8008296:	d007      	beq.n	80082a8 <BroadcastReceivedMessage+0x28>
 8008298:	22fe      	movs	r2, #254	; 0xfe
 800829a:	2100      	movs	r1, #0
 800829c:	2000      	movs	r0, #0
 800829e:	f7ff fe0f 	bl	8007ec0 <SendMessageFromPort.part.0>
}
 80082a2:	2000      	movs	r0, #0
 80082a4:	b003      	add	sp, #12
 80082a6:	bd00      	pop	{pc}
 80082a8:	32ff      	adds	r2, #255	; 0xff
 80082aa:	2100      	movs	r1, #0
 80082ac:	2000      	movs	r0, #0
 80082ae:	f7ff fe07 	bl	8007ec0 <SendMessageFromPort.part.0>
 80082b2:	e7f6      	b.n	80082a2 <BroadcastReceivedMessage+0x22>
 80082b4:	20001118 	.word	0x20001118
 80082b8:	20000050 	.word	0x20000050

080082bc <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082bc:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80082be:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082c0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082c4:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80082c6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80082c8:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <BroadcastMessage+0x44>)
 80082ca:	7019      	strb	r1, [r3, #0]
 80082cc:	9400      	str	r4, [sp, #0]
 80082ce:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80082d0:	29ff      	cmp	r1, #255	; 0xff
 80082d2:	d00c      	beq.n	80082ee <BroadcastMessage+0x32>
 80082d4:	0001      	movs	r1, r0
 80082d6:	22fe      	movs	r2, #254	; 0xfe
 80082d8:	2000      	movs	r0, #0
 80082da:	f7ff fdf1 	bl	8007ec0 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80082de:	0022      	movs	r2, r4
 80082e0:	2100      	movs	r1, #0
 80082e2:	4808      	ldr	r0, [pc, #32]	; (8008304 <BroadcastMessage+0x48>)
 80082e4:	f00a fece 	bl	8013084 <memset>
}
 80082e8:	2000      	movs	r0, #0
 80082ea:	b003      	add	sp, #12
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	0001      	movs	r1, r0
 80082f0:	22ff      	movs	r2, #255	; 0xff
 80082f2:	2000      	movs	r0, #0
 80082f4:	f7ff fde4 	bl	8007ec0 <SendMessageFromPort.part.0>
 80082f8:	e7f1      	b.n	80082de <BroadcastMessage+0x22>
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	20001118 	.word	0x20001118
 8008300:	20000050 	.word	0x20000050
 8008304:	20000b44 	.word	0x20000b44

08008308 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8008308:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800830a:	b530      	push	{r4, r5, lr}
 800830c:	0005      	movs	r5, r0
	AddBcastPayload = false;
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008310:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008312:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8008314:	1e42      	subs	r2, r0, #1
 8008316:	00d3      	lsls	r3, r2, #3
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	4a09      	ldr	r2, [pc, #36]	; (8008340 <ForwardReceivedMessage+0x38>)
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 8008320:	4b08      	ldr	r3, [pc, #32]	; (8008344 <ForwardReceivedMessage+0x3c>)
 8008322:	0021      	movs	r1, r4
 8008324:	7818      	ldrb	r0, [r3, #0]
 8008326:	f7fb fcff 	bl	8003d28 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800832a:	9500      	str	r5, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	0022      	movs	r2, r4
 8008330:	2100      	movs	r1, #0
 8008332:	f7ff fda9 	bl	8007e88 <SendMessageFromPort>
}
 8008336:	2000      	movs	r0, #0
 8008338:	b003      	add	sp, #12
 800833a:	bd30      	pop	{r4, r5, pc}
 800833c:	20001118 	.word	0x20001118
 8008340:	20000c98 	.word	0x20000c98
 8008344:	20000aa0 	.word	0x20000aa0

08008348 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	4d0f      	ldr	r5, [pc, #60]	; (8008388 <SendMessageToModule+0x40>)
 800834c:	0004      	movs	r4, r0
 800834e:	b083      	sub	sp, #12
 8008350:	000f      	movs	r7, r1
 8008352:	0016      	movs	r6, r2
 8008354:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8008356:	2cff      	cmp	r4, #255	; 0xff
 8008358:	d010      	beq.n	800837c <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800835a:	0021      	movs	r1, r4
 800835c:	f7fb fce4 	bl	8003d28 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008360:	7829      	ldrb	r1, [r5, #0]
 8008362:	0022      	movs	r2, r4
 8008364:	9600      	str	r6, [sp, #0]
 8008366:	003b      	movs	r3, r7
 8008368:	f7ff fd8e 	bl	8007e88 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 800836c:	0032      	movs	r2, r6
 800836e:	2100      	movs	r1, #0
 8008370:	4806      	ldr	r0, [pc, #24]	; (800838c <SendMessageToModule+0x44>)
 8008372:	f00a fe87 	bl	8013084 <memset>
}
 8008376:	2000      	movs	r0, #0
 8008378:	b003      	add	sp, #12
 800837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 800837c:	0013      	movs	r3, r2
 800837e:	000a      	movs	r2, r1
 8008380:	21ff      	movs	r1, #255	; 0xff
 8008382:	f7ff ff9b 	bl	80082bc <BroadcastMessage>
 8008386:	e7f6      	b.n	8008376 <SendMessageToModule+0x2e>
 8008388:	20000aa0 	.word	0x20000aa0
 800838c:	20000b44 	.word	0x20000b44

08008390 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008392:	4657      	mov	r7, sl
 8008394:	46de      	mov	lr, fp
 8008396:	464e      	mov	r6, r9
 8008398:	4645      	mov	r5, r8
 800839a:	b5e0      	push	{r5, r6, r7, lr}
 800839c:	b08f      	sub	sp, #60	; 0x3c
 800839e:	001e      	movs	r6, r3
 80083a0:	ab18      	add	r3, sp, #96	; 0x60
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	4693      	mov	fp, r2
 80083a6:	469a      	mov	sl, r3
 80083a8:	ab1b      	add	r3, sp, #108	; 0x6c
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ae:	000f      	movs	r7, r1
 80083b0:	0e19      	lsrs	r1, r3, #24
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	b2dc      	uxtb	r4, r3
 80083b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083b8:	4684      	mov	ip, r0
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b2dd      	uxtb	r5, r3
 80083be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083c0:	900d      	str	r0, [sp, #52]	; 0x34
 80083c2:	0e1b      	lsrs	r3, r3, #24
 80083c4:	0018      	movs	r0, r3
 80083c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083ca:	9206      	str	r2, [sp, #24]
 80083cc:	0c1b      	lsrs	r3, r3, #16
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083d4:	9109      	str	r1, [sp, #36]	; 0x24
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80083dc:	4b47      	ldr	r3, [pc, #284]	; (80084fc <StartScastDMAStream+0x16c>)
 80083de:	940a      	str	r4, [sp, #40]	; 0x28
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	950c      	str	r5, [sp, #48]	; 0x30
 80083e4:	42bb      	cmp	r3, r7
 80083e6:	d16d      	bne.n	80084c4 <StartScastDMAStream+0x134>
 80083e8:	231a      	movs	r3, #26
 80083ea:	4698      	mov	r8, r3
 80083ec:	4d44      	ldr	r5, [pc, #272]	; (8008500 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80083ee:	4c45      	ldr	r4, [pc, #276]	; (8008504 <StartScastDMAStream+0x174>)
 80083f0:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80083f2:	0031      	movs	r1, r6
 80083f4:	0038      	movs	r0, r7
 80083f6:	f7fb fc97 	bl	8003d28 <FindRoute>
		if(route[i]){
 80083fa:	7868      	ldrb	r0, [r5, #1]
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d035      	beq.n	800846c <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8008400:	78a9      	ldrb	r1, [r5, #2]
 8008402:	2900      	cmp	r1, #0
 8008404:	d100      	bne.n	8008408 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8008406:	0039      	movs	r1, r7
 8008408:	f7fb fc8e 	bl	8003d28 <FindRoute>
			FindRoute(srcM,dstM);
 800840c:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 800840e:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8008410:	0038      	movs	r0, r7
 8008412:	f7fb fc89 	bl	8003d28 <FindRoute>
			if(route[i] == dstM){
 8008416:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8008418:	465b      	mov	r3, fp
			if(route[i] == dstM){
 800841a:	42b0      	cmp	r0, r6
 800841c:	d003      	beq.n	8008426 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 800841e:	7829      	ldrb	r1, [r5, #0]
 8008420:	f7fb fc82 	bl	8003d28 <FindRoute>
 8008424:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008426:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8008428:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800842a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 800842c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 800842e:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008430:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008434:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8008436:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008438:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800843a:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 800843c:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800843e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008440:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008442:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008444:	9a07      	ldr	r2, [sp, #28]
 8008446:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008448:	9a08      	ldr	r2, [sp, #32]
 800844a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 800844c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800844e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008450:	4652      	mov	r2, sl
 8008452:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008454:	464a      	mov	r2, r9
 8008456:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8008458:	f7fb fc66 	bl	8003d28 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800845c:	7868      	ldrb	r0, [r5, #1]
 800845e:	220c      	movs	r2, #12
 8008460:	211b      	movs	r1, #27
 8008462:	f7ff ff71 	bl	8008348 <SendMessageToModule>
			osDelay(10);
 8008466:	200a      	movs	r0, #10
 8008468:	f005 f8b0 	bl	800d5cc <osDelay>
 800846c:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 800846e:	4545      	cmp	r5, r8
 8008470:	d1bf      	bne.n	80083f2 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8008472:	42b7      	cmp	r7, r6
 8008474:	d112      	bne.n	800849c <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008476:	465b      	mov	r3, fp
 8008478:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800847e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008480:	4650      	mov	r0, sl
 8008482:	f7ff fc11 	bl	8007ca8 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10d      	bne.n	80084a8 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 800848c:	2000      	movs	r0, #0
 800848e:	b00f      	add	sp, #60	; 0x3c
 8008490:	bc3c      	pop	{r2, r3, r4, r5}
 8008492:	4690      	mov	r8, r2
 8008494:	4699      	mov	r9, r3
 8008496:	46a2      	mov	sl, r4
 8008498:	46ab      	mov	fp, r5
 800849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 800849c:	0031      	movs	r1, r6
 800849e:	0038      	movs	r0, r7
 80084a0:	f7fb fc42 	bl	8003d28 <FindRoute>
 80084a4:	4683      	mov	fp, r0
 80084a6:	e7e6      	b.n	8008476 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80084a8:	2300      	movs	r3, #0
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9303      	str	r3, [sp, #12]
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	465b      	mov	r3, fp
 80084b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80084ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084bc:	4650      	mov	r0, sl
 80084be:	f7fb f955 	bl	800376c <SaveEEstreams>
 80084c2:	e7e3      	b.n	800848c <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80084c4:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <StartScastDMAStream+0x174>)
 80084c6:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80084c8:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80084ca:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80084cc:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80084ce:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80084d0:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80084d2:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80084d4:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80084d6:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80084d8:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80084da:	4651      	mov	r1, sl
 80084dc:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80084de:	4661      	mov	r1, ip
 80084e0:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80084e2:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80084e4:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80084e6:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80084e8:	220d      	movs	r2, #13
 80084ea:	211c      	movs	r1, #28
 80084ec:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80084ee:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80084f0:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80084f2:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80084f4:	f7ff ff28 	bl	8008348 <SendMessageToModule>
		return result;
 80084f8:	e7c8      	b.n	800848c <StartScastDMAStream+0xfc>
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	20000aa0 	.word	0x20000aa0
 8008500:	20006927 	.word	0x20006927
 8008504:	20000b44 	.word	0x20000b44

08008508 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008508:	4b4e      	ldr	r3, [pc, #312]	; (8008644 <BackEndTask+0x13c>)
 800850a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850c:	4657      	mov	r7, sl
 800850e:	46de      	mov	lr, fp
 8008510:	464e      	mov	r6, r9
 8008512:	4645      	mov	r5, r8
 8008514:	4699      	mov	r9, r3
 8008516:	4b4c      	ldr	r3, [pc, #304]	; (8008648 <BackEndTask+0x140>)
 8008518:	b5e0      	push	{r5, r6, r7, lr}
 800851a:	469b      	mov	fp, r3
 800851c:	4b4b      	ldr	r3, [pc, #300]	; (800864c <BackEndTask+0x144>)
 800851e:	4f4c      	ldr	r7, [pc, #304]	; (8008650 <BackEndTask+0x148>)
 8008520:	4698      	mov	r8, r3
 8008522:	4b4c      	ldr	r3, [pc, #304]	; (8008654 <BackEndTask+0x14c>)
 8008524:	b083      	sub	sp, #12
 8008526:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008528:	464b      	mov	r3, r9
 800852a:	4a4b      	ldr	r2, [pc, #300]	; (8008658 <BackEndTask+0x150>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	7812      	ldrb	r2, [r2, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d054      	beq.n	80085de <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008534:	4a49      	ldr	r2, [pc, #292]	; (800865c <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008536:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008538:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800853a:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 800853c:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800853e:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008540:	465b      	mov	r3, fp
			port_index = port_number - 1;
 8008542:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008544:	5d19      	ldrb	r1, [r3, r4]
 8008546:	00a6      	lsls	r6, r4, #2
 8008548:	00cb      	lsls	r3, r1, #3
 800854a:	1a59      	subs	r1, r3, r1
 800854c:	1933      	adds	r3, r6, r4
 800854e:	00da      	lsls	r2, r3, #3
 8008550:	1ad2      	subs	r2, r2, r3
 8008552:	00c9      	lsls	r1, r1, #3
 8008554:	00d2      	lsls	r2, r2, #3
 8008556:	188b      	adds	r3, r1, r2
 8008558:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800855a:	18f8      	adds	r0, r7, r3
 800855c:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800855e:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008560:	4640      	mov	r0, r8
 8008562:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008564:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008566:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008568:	235a      	movs	r3, #90	; 0x5a
 800856a:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 800856c:	2d00      	cmp	r5, #0
 800856e:	d00b      	beq.n	8008588 <BackEndTask+0x80>
 8008570:	1cd3      	adds	r3, r2, #3
 8008572:	4642      	mov	r2, r8
 8008574:	185b      	adds	r3, r3, r1
 8008576:	3203      	adds	r2, #3
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 800857c:	7819      	ldrb	r1, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	7011      	strb	r1, [r2, #0]
 8008582:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 8008584:	4282      	cmp	r2, r0
 8008586:	d1f9      	bne.n	800857c <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 8008588:	1ce9      	adds	r1, r5, #3
 800858a:	4640      	mov	r0, r8
 800858c:	f002 fd0a 	bl	800afa4 <CalculateCRC8>
				length + 3);


			Message_counter++;
 8008590:	4653      	mov	r3, sl
 8008592:	4652      	mov	r2, sl
 8008594:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008596:	1936      	adds	r6, r6, r4
			Message_counter++;
 8008598:	3301      	adds	r3, #1
 800859a:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800859c:	465b      	mov	r3, fp
 800859e:	5d1b      	ldrb	r3, [r3, r4]
 80085a0:	00f2      	lsls	r2, r6, #3
 80085a2:	00d9      	lsls	r1, r3, #3
 80085a4:	1b92      	subs	r2, r2, r6
 80085a6:	1ac9      	subs	r1, r1, r3
 80085a8:	00c9      	lsls	r1, r1, #3
 80085aa:	00d2      	lsls	r2, r2, #3
 80085ac:	188e      	adds	r6, r1, r2
 80085ae:	19be      	adds	r6, r7, r6
 80085b0:	1976      	adds	r6, r6, r5
 80085b2:	78f6      	ldrb	r6, [r6, #3]
 80085b4:	4286      	cmp	r6, r0
 80085b6:	d01d      	beq.n	80085f4 <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 80085b8:	4652      	mov	r2, sl
 80085ba:	4651      	mov	r1, sl
 80085bc:	8892      	ldrh	r2, [r2, #4]
 80085be:	3201      	adds	r2, #1
 80085c0:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 80085c2:	3301      	adds	r3, #1
 80085c4:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d010      	beq.n	80085ec <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 80085ca:	465a      	mov	r2, fp
 80085cc:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80085ce:	464b      	mov	r3, r9
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d004      	beq.n	80085e4 <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80085da:	464a      	mov	r2, r9
 80085dc:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 80085de:	f006 fd51 	bl	800f084 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80085e2:	e7a1      	b.n	8008528 <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80085e4:	464b      	mov	r3, r9
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e7f8      	b.n	80085de <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80085ec:	465b      	mov	r3, fp
 80085ee:	2200      	movs	r2, #0
 80085f0:	551a      	strb	r2, [r3, r4]
 80085f2:	e7ec      	b.n	80085ce <BackEndTask+0xc6>
				Accepted_Messages++;
 80085f4:	4653      	mov	r3, sl
 80085f6:	4650      	mov	r0, sl
 80085f8:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80085fa:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 80085fc:	3301      	adds	r3, #1
 80085fe:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 8008600:	4b17      	ldr	r3, [pc, #92]	; (8008660 <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008602:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 8008604:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008606:	1b36      	subs	r6, r6, r4
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <BackEndTask+0x15c>)
 800860a:	00f6      	lsls	r6, r6, #3
 800860c:	1851      	adds	r1, r2, r1
 800860e:	1998      	adds	r0, r3, r6
 8008610:	002a      	movs	r2, r5
 8008612:	1879      	adds	r1, r7, r1
 8008614:	f00a fd2d 	bl	8013072 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008618:	4b12      	ldr	r3, [pc, #72]	; (8008664 <BackEndTask+0x15c>)
 800861a:	4a13      	ldr	r2, [pc, #76]	; (8008668 <BackEndTask+0x160>)
 800861c:	5d9b      	ldrb	r3, [r3, r6]
 800861e:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 8008620:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008622:	429a      	cmp	r2, r3
 8008624:	d008      	beq.n	8008638 <BackEndTask+0x130>
 8008626:	3302      	adds	r3, #2
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b01      	cmp	r3, #1
 800862c:	d904      	bls.n	8008638 <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 800862e:	f7ff fe6b 	bl	8008308 <ForwardReceivedMessage>
 8008632:	465b      	mov	r3, fp
 8008634:	5d1b      	ldrb	r3, [r3, r4]
 8008636:	e7c4      	b.n	80085c2 <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 8008638:	f7ff fc02 	bl	8007e40 <NotifyMessagingTask>
 800863c:	465b      	mov	r3, fp
 800863e:	5d1b      	ldrb	r3, [r3, r4]
 8008640:	e7bf      	b.n	80085c2 <BackEndTask+0xba>
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	20001148 	.word	0x20001148
 8008648:	200016d4 	.word	0x200016d4
 800864c:	20006948 	.word	0x20006948
 8008650:	20001154 	.word	0x20001154
 8008654:	20001db4 	.word	0x20001db4
 8008658:	20001147 	.word	0x20001147
 800865c:	2000114c 	.word	0x2000114c
 8008660:	20000c58 	.word	0x20000c58
 8008664:	20000c98 	.word	0x20000c98
 8008668:	20000aa0 	.word	0x20000aa0

0800866c <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800866c:	2001      	movs	r0, #1
 800866e:	4770      	bx	lr

08008670 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008672:	464e      	mov	r6, r9
 8008674:	46de      	mov	lr, fp
 8008676:	4645      	mov	r5, r8
 8008678:	4657      	mov	r7, sl
 800867a:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 800867c:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800867e:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 8008680:	930d      	str	r3, [sp, #52]	; 0x34
 8008682:	23ff      	movs	r3, #255	; 0xff
 8008684:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 8008686:	1e5c      	subs	r4, r3, #1
 8008688:	930a      	str	r3, [sp, #40]	; 0x28
 800868a:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800868c:	4ae3      	ldr	r2, [pc, #908]	; (8008a1c <PxMessagingTask+0x3ac>)
 800868e:	9306      	str	r3, [sp, #24]
 8008690:	1b1b      	subs	r3, r3, r4
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4693      	mov	fp, r2
 8008696:	001a      	movs	r2, r3
 8008698:	445a      	add	r2, fp
 800869a:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 800869c:	2200      	movs	r2, #0
 800869e:	920f      	str	r2, [sp, #60]	; 0x3c
 80086a0:	4adf      	ldr	r2, [pc, #892]	; (8008a20 <PxMessagingTask+0x3b0>)
 80086a2:	930e      	str	r3, [sp, #56]	; 0x38
 80086a4:	4691      	mov	r9, r2
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	3305      	adds	r3, #5
 80086aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80086ac:	4bdd      	ldr	r3, [pc, #884]	; (8008a24 <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 80086ae:	2600      	movs	r6, #0
 80086b0:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80086b2:	2338      	movs	r3, #56	; 0x38
 80086b4:	4363      	muls	r3, r4
 80086b6:	9216      	str	r2, [sp, #88]	; 0x58
 80086b8:	445b      	add	r3, fp
 80086ba:	00a2      	lsls	r2, r4, #2
 80086bc:	9210      	str	r2, [sp, #64]	; 0x40
 80086be:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80086c0:	2101      	movs	r1, #1
 80086c2:	2001      	movs	r0, #1
 80086c4:	4249      	negs	r1, r1
 80086c6:	f006 fa39 	bl	800eb3c <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80086ca:	464b      	mov	r3, r9
 80086cc:	5d1f      	ldrb	r7, [r3, r4]
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	d100      	bne.n	80086d4 <PxMessagingTask+0x64>
 80086d2:	e085      	b.n	80087e0 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	1b1b      	subs	r3, r3, r4
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	445b      	add	r3, fp
 80086dc:	7899      	ldrb	r1, [r3, #2]
 80086de:	b24b      	sxtb	r3, r1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	da01      	bge.n	80086e8 <PxMessagingTask+0x78>
 80086e4:	f000 fcc7 	bl	8009076 <PxMessagingTask+0xa06>
				longMessage =0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	4acf      	ldr	r2, [pc, #828]	; (8008a28 <PxMessagingTask+0x3b8>)
 80086ec:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 80086ee:	465a      	mov	r2, fp
 80086f0:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80086f2:	4fce      	ldr	r7, [pc, #824]	; (8008a2c <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 80086f4:	1b1b      	subs	r3, r3, r4
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 80086fa:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 80086fc:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 80086fe:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008700:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 8008702:	4692      	mov	sl, r2
 8008704:	2201      	movs	r2, #1
 8008706:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008708:	0f80      	lsrs	r0, r0, #30
 800870a:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800870c:	0908      	lsrs	r0, r1, #4
 800870e:	400d      	ands	r5, r1
 8008710:	4002      	ands	r2, r0
 8008712:	46ac      	mov	ip, r5
 8008714:	b2d0      	uxtb	r0, r2
 8008716:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008718:	2260      	movs	r2, #96	; 0x60
 800871a:	4463      	add	r3, ip
 800871c:	400a      	ands	r2, r1
 800871e:	950c      	str	r5, [sp, #48]	; 0x30
 8008720:	703a      	strb	r2, [r7, #0]
 8008722:	002a      	movs	r2, r5
 8008724:	78dd      	ldrb	r5, [r3, #3]
 8008726:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 8008728:	0789      	lsls	r1, r1, #30
 800872a:	d507      	bpl.n	800873c <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800872c:	46ac      	mov	ip, r5
 800872e:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008730:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	4463      	add	r3, ip
 8008736:	b29b      	uxth	r3, r3
 8008738:	9308      	str	r3, [sp, #32]
				++shift;
 800873a:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800873c:	2800      	cmp	r0, #0
 800873e:	d007      	beq.n	8008750 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008740:	2300      	movs	r3, #0
 8008742:	4aba      	ldr	r2, [pc, #744]	; (8008a2c <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008744:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 8008746:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008748:	4650      	mov	r0, sl
 800874a:	2200      	movs	r2, #0
 800874c:	f7ff fdfc 	bl	8008348 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008750:	9a07      	ldr	r2, [sp, #28]
 8008752:	1e53      	subs	r3, r2, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2bfc      	cmp	r3, #252	; 0xfc
 8008758:	d801      	bhi.n	800875e <PxMessagingTask+0xee>
 800875a:	f000 fc71 	bl	8009040 <PxMessagingTask+0x9d0>
 800875e:	464b      	mov	r3, r9
 8008760:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	2bff      	cmp	r3, #255	; 0xff
 8008766:	d001      	beq.n	800876c <PxMessagingTask+0xfc>
 8008768:	f000 fcb5 	bl	80090d6 <PxMessagingTask+0xa66>
 800876c:	9b06      	ldr	r3, [sp, #24]
 800876e:	4ab0      	ldr	r2, [pc, #704]	; (8008a30 <PxMessagingTask+0x3c0>)
 8008770:	1b1d      	subs	r5, r3, r4
 8008772:	00ed      	lsls	r5, r5, #3
 8008774:	445d      	add	r5, fp
 8008776:	19eb      	adds	r3, r5, r7
 8008778:	3b01      	subs	r3, #1
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 800877e:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008780:	429a      	cmp	r2, r3
 8008782:	d02d      	beq.n	80087e0 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008784:	4aaa      	ldr	r2, [pc, #680]	; (8008a30 <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008786:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008788:	7193      	strb	r3, [r2, #6]
 800878a:	4aaa      	ldr	r2, [pc, #680]	; (8008a34 <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800878c:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800878e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008790:	f7ff fd76 	bl	8008280 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008794:	464b      	mov	r3, r9
 8008796:	5d1f      	ldrb	r7, [r3, r4]
 8008798:	2300      	movs	r3, #0
 800879a:	19ed      	adds	r5, r5, r7
 800879c:	3d01      	subs	r5, #1
 800879e:	702b      	strb	r3, [r5, #0]
				shift +=4;
 80087a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087a2:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80087a4:	1b7a      	subs	r2, r7, r5
 80087a6:	b2d3      	uxtb	r3, r2
 80087a8:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	2b2d      	cmp	r3, #45	; 0x2d
 80087ae:	d901      	bls.n	80087b4 <PxMessagingTask+0x144>
 80087b0:	f000 fc79 	bl	80090a6 <PxMessagingTask+0xa36>
 80087b4:	4aa0      	ldr	r2, [pc, #640]	; (8008a38 <PxMessagingTask+0x3c8>)
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	58d3      	ldr	r3, [r2, r3]
 80087ba:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	1b1b      	subs	r3, r3, r4
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	445b      	add	r3, fp
 80087c4:	5d5b      	ldrb	r3, [r3, r5]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <PxMessagingTask+0x15e>
 80087ca:	f000 fd6d 	bl	80092a8 <PxMessagingTask+0xc38>
								myID =cMessage[port - 1][1 + shift];
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	4a9a      	ldr	r2, [pc, #616]	; (8008a3c <PxMessagingTask+0x3cc>)
 80087d2:	469c      	mov	ip, r3
 80087d4:	4465      	add	r5, ip
 80087d6:	786b      	ldrb	r3, [r5, #1]
 80087d8:	7013      	strb	r3, [r2, #0]
 80087da:	464b      	mov	r3, r9
 80087dc:	2600      	movs	r6, #0
 80087de:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087e0:	003a      	movs	r2, r7
 80087e2:	2100      	movs	r1, #0
 80087e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087e6:	f00a fc4d 	bl	8013084 <memset>
		messageLength[port - 1] =0;
 80087ea:	464b      	mov	r3, r9
 80087ec:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80087ee:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 80087f0:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80087f2:	4b93      	ldr	r3, [pc, #588]	; (8008a40 <PxMessagingTask+0x3d0>)
 80087f4:	5c5b      	ldrb	r3, [r3, r1]
 80087f6:	3b02      	subs	r3, #2
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 80087fc:	4b90      	ldr	r3, [pc, #576]	; (8008a40 <PxMessagingTask+0x3d0>)
 80087fe:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008800:	f006 fc40 	bl	800f084 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008804:	e75c      	b.n	80086c0 <PxMessagingTask+0x50>
 8008806:	2308      	movs	r3, #8
 8008808:	469a      	mov	sl, r3
 800880a:	3301      	adds	r3, #1
 800880c:	469c      	mov	ip, r3
 800880e:	44ac      	add	ip, r5
 8008810:	4663      	mov	r3, ip
 8008812:	9308      	str	r3, [sp, #32]
 8008814:	230a      	movs	r3, #10
 8008816:	469c      	mov	ip, r3
 8008818:	44ac      	add	ip, r5
 800881a:	4663      	mov	r3, ip
 800881c:	930c      	str	r3, [sp, #48]	; 0x30
 800881e:	230b      	movs	r3, #11
 8008820:	469c      	mov	ip, r3
 8008822:	44ac      	add	ip, r5
 8008824:	4663      	mov	r3, ip
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	230c      	movs	r3, #12
 800882a:	469c      	mov	ip, r3
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	1da8      	adds	r0, r5, #6
 8008830:	1b1b      	subs	r3, r3, r4
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	445b      	add	r3, fp
 8008836:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 8008838:	5d5b      	ldrb	r3, [r3, r5]
 800883a:	1def      	adds	r7, r5, #7
 800883c:	44aa      	add	sl, r5
 800883e:	44ac      	add	ip, r5
 8008840:	7852      	ldrb	r2, [r2, #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <PxMessagingTask+0x1da>
 8008846:	f000 fd01 	bl	800924c <PxMessagingTask+0xbdc>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <PxMessagingTask+0x1e2>
 800884e:	f000 fccf 	bl	80091f0 <PxMessagingTask+0xb80>
 8008852:	2b02      	cmp	r3, #2
 8008854:	d10c      	bne.n	8008870 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	1959      	adds	r1, r3, r5
 800885a:	788b      	ldrb	r3, [r1, #2]
 800885c:	78c8      	ldrb	r0, [r1, #3]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	0400      	lsls	r0, r0, #16
 8008862:	181b      	adds	r3, r3, r0
 8008864:	189a      	adds	r2, r3, r2
 8008866:	790b      	ldrb	r3, [r1, #4]
 8008868:	061b      	lsls	r3, r3, #24
 800886a:	18d2      	adds	r2, r2, r3
 800886c:	4b75      	ldr	r3, [pc, #468]	; (8008a44 <PxMessagingTask+0x3d4>)
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	4a74      	ldr	r2, [pc, #464]	; (8008a44 <PxMessagingTask+0x3d4>)
 8008874:	1b1b      	subs	r3, r3, r4
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	445b      	add	r3, fp
 800887a:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 800887c:	195b      	adds	r3, r3, r5
 800887e:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 8008880:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 8008882:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <PxMessagingTask+0x21c>
 8008888:	f000 fc7e 	bl	8009188 <PxMessagingTask+0xb18>
							else if(1 == ADCSide){
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10a      	bne.n	80088a6 <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 8008890:	496d      	ldr	r1, [pc, #436]	; (8008a48 <PxMessagingTask+0x3d8>)
 8008892:	f003 fc25 	bl	800c0e0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8008896:	4b6b      	ldr	r3, [pc, #428]	; (8008a44 <PxMessagingTask+0x3d4>)
 8008898:	4a6a      	ldr	r2, [pc, #424]	; (8008a44 <PxMessagingTask+0x3d4>)
 800889a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800889c:	3234      	adds	r2, #52	; 0x34
 800889e:	b2c0      	uxtb	r0, r0
 80088a0:	4969      	ldr	r1, [pc, #420]	; (8008a48 <PxMessagingTask+0x3d8>)
 80088a2:	f003 fc6d 	bl	800c180 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80088a6:	4967      	ldr	r1, [pc, #412]	; (8008a44 <PxMessagingTask+0x3d4>)
 80088a8:	4866      	ldr	r0, [pc, #408]	; (8008a44 <PxMessagingTask+0x3d4>)
 80088aa:	3138      	adds	r1, #56	; 0x38
 80088ac:	303c      	adds	r0, #60	; 0x3c
 80088ae:	f003 fa51 	bl	800bd54 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80088b2:	9b06      	ldr	r3, [sp, #24]
 80088b4:	1b1e      	subs	r6, r3, r4
 80088b6:	4b63      	ldr	r3, [pc, #396]	; (8008a44 <PxMessagingTask+0x3d4>)
 80088b8:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088ba:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 80088bc:	445e      	add	r6, fp
 80088be:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088c0:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088c2:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 80088c4:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088c6:	f003 fb0b 	bl	800bee0 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088ca:	79ab      	ldrb	r3, [r5, #6]
 80088cc:	79ea      	ldrb	r2, [r5, #7]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	0412      	lsls	r2, r2, #16
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80088d6:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088d8:	189b      	adds	r3, r3, r2
 80088da:	7a2a      	ldrb	r2, [r5, #8]
 80088dc:	0612      	lsls	r2, r2, #24
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	4a58      	ldr	r2, [pc, #352]	; (8008a44 <PxMessagingTask+0x3d4>)
 80088e2:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80088e4:	7aab      	ldrb	r3, [r5, #10]
 80088e6:	7aea      	ldrb	r2, [r5, #11]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	0412      	lsls	r2, r2, #16
 80088ec:	189b      	adds	r3, r3, r2
 80088ee:	7a6a      	ldrb	r2, [r5, #9]
 80088f0:	189b      	adds	r3, r3, r2
 80088f2:	7b2a      	ldrb	r2, [r5, #12]
 80088f4:	0612      	lsls	r2, r2, #24
 80088f6:	189b      	adds	r3, r3, r2
 80088f8:	4a52      	ldr	r2, [pc, #328]	; (8008a44 <PxMessagingTask+0x3d4>)
 80088fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088fc:	464b      	mov	r3, r9
 80088fe:	5d1f      	ldrb	r7, [r3, r4]
 8008900:	e76e      	b.n	80087e0 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 8008902:	2301      	movs	r3, #1
 8008904:	4a51      	ldr	r2, [pc, #324]	; (8008a4c <PxMessagingTask+0x3dc>)
 8008906:	7013      	strb	r3, [r2, #0]
 8008908:	e767      	b.n	80087da <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 800890a:	2301      	movs	r3, #1
 800890c:	4a50      	ldr	r2, [pc, #320]	; (8008a50 <PxMessagingTask+0x3e0>)
 800890e:	2600      	movs	r6, #0
 8008910:	7013      	strb	r3, [r2, #0]
 8008912:	464b      	mov	r3, r9
 8008914:	5d1f      	ldrb	r7, [r3, r4]
 8008916:	e763      	b.n	80087e0 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8008918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800891c:	469c      	mov	ip, r3
 800891e:	9b06      	ldr	r3, [sp, #24]
 8008920:	1c69      	adds	r1, r5, #1
 8008922:	1b1b      	subs	r3, r3, r4
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	445b      	add	r3, fp
 8008928:	5d58      	ldrb	r0, [r3, r5]
 800892a:	230a      	movs	r3, #10
 800892c:	4461      	add	r1, ip
 800892e:	3a01      	subs	r2, #1
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	b292      	uxth	r2, r2
 8008934:	4459      	add	r1, fp
 8008936:	f004 fcaf 	bl	800d298 <writePxMutex>
 800893a:	464b      	mov	r3, r9
 800893c:	2600      	movs	r6, #0
 800893e:	5d1f      	ldrb	r7, [r3, r4]
 8008940:	e74e      	b.n	80087e0 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8008942:	9b06      	ldr	r3, [sp, #24]
 8008944:	1b1b      	subs	r3, r3, r4
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	445b      	add	r3, fp
 800894a:	5d5b      	ldrb	r3, [r3, r5]
 800894c:	4a41      	ldr	r2, [pc, #260]	; (8008a54 <PxMessagingTask+0x3e4>)
 800894e:	2600      	movs	r6, #0
 8008950:	7013      	strb	r3, [r2, #0]
 8008952:	464b      	mov	r3, r9
 8008954:	5d1f      	ldrb	r7, [r3, r4]
 8008956:	e743      	b.n	80087e0 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 8008958:	2300      	movs	r3, #0
 800895a:	4a3e      	ldr	r2, [pc, #248]	; (8008a54 <PxMessagingTask+0x3e4>)
 800895c:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800895e:	9b06      	ldr	r3, [sp, #24]
 8008960:	1b1b      	subs	r3, r3, r4
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	445b      	add	r3, fp
 8008966:	5d5e      	ldrb	r6, [r3, r5]
 8008968:	2e00      	cmp	r6, #0
 800896a:	d101      	bne.n	8008970 <PxMessagingTask+0x300>
 800896c:	f000 ff54 	bl	8009818 <PxMessagingTask+0x11a8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008970:	2e1e      	cmp	r6, #30
 8008972:	d901      	bls.n	8008978 <PxMessagingTask+0x308>
 8008974:	f000 ff4c 	bl	8009810 <PxMessagingTask+0x11a0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008978:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800897a:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800897c:	0592      	lsls	r2, r2, #22
 800897e:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008980:	1c6a      	adds	r2, r5, #1
 8008982:	5c8f      	ldrb	r7, [r1, r2]
 8008984:	9207      	str	r2, [sp, #28]
 8008986:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008988:	3e01      	subs	r6, #1
 800898a:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <PxMessagingTask+0x3e8>)
 800898c:	00b6      	lsls	r6, r6, #2
 800898e:	599b      	ldr	r3, [r3, r6]
 8008990:	0c18      	lsrs	r0, r3, #16
 8008992:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008994:	1e7a      	subs	r2, r7, #1
 8008996:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008998:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800899a:	2a07      	cmp	r2, #7
 800899c:	d901      	bls.n	80089a2 <PxMessagingTask+0x332>
 800899e:	f000 fdbd 	bl	800951c <PxMessagingTask+0xeac>
 80089a2:	492e      	ldr	r1, [pc, #184]	; (8008a5c <PxMessagingTask+0x3ec>)
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	588a      	ldr	r2, [r1, r2]
 80089a8:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80089aa:	2202      	movs	r2, #2
 80089ac:	4252      	negs	r2, r2
 80089ae:	17d3      	asrs	r3, r2, #31
 80089b0:	4641      	mov	r1, r8
 80089b2:	6808      	ldr	r0, [r1, #0]
 80089b4:	6849      	ldr	r1, [r1, #4]
 80089b6:	1812      	adds	r2, r2, r0
 80089b8:	414b      	adcs	r3, r1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <PxMessagingTask+0x352>
 80089be:	f000 fcb7 	bl	8009330 <PxMessagingTask+0xcc0>
 80089c2:	464b      	mov	r3, r9
 80089c4:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80089c6:	4b23      	ldr	r3, [pc, #140]	; (8008a54 <PxMessagingTask+0x3e4>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b10      	cmp	r3, #16
 80089cc:	d101      	bne.n	80089d2 <PxMessagingTask+0x362>
 80089ce:	f000 fcac 	bl	800932a <PxMessagingTask+0xcba>
								responseStatus =BOS_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <PxMessagingTask+0x3e4>)
 80089d6:	2600      	movs	r6, #0
 80089d8:	7013      	strb	r3, [r2, #0]
 80089da:	e701      	b.n	80087e0 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80089dc:	9b06      	ldr	r3, [sp, #24]
 80089de:	1b1b      	subs	r3, r3, r4
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	445b      	add	r3, fp
 80089e4:	5d5b      	ldrb	r3, [r3, r5]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <PxMessagingTask+0x37e>
 80089ea:	f000 fd6a 	bl	80094c2 <PxMessagingTask+0xe52>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80089ee:	9b05      	ldr	r3, [sp, #20]
 80089f0:	469c      	mov	ip, r3
 80089f2:	4465      	add	r5, ip
 80089f4:	78ab      	ldrb	r3, [r5, #2]
 80089f6:	78ea      	ldrb	r2, [r5, #3]
 80089f8:	061b      	lsls	r3, r3, #24
 80089fa:	0412      	lsls	r2, r2, #16
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	796a      	ldrb	r2, [r5, #5]
 8008a00:	189b      	adds	r3, r3, r2
 8008a02:	792a      	ldrb	r2, [r5, #4]
 8008a04:	0212      	lsls	r2, r2, #8
 8008a06:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008a08:	786a      	ldrb	r2, [r5, #1]
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	2a07      	cmp	r2, #7
 8008a10:	d900      	bls.n	8008a14 <PxMessagingTask+0x3a4>
 8008a12:	e6e2      	b.n	80087da <PxMessagingTask+0x16a>
 8008a14:	4912      	ldr	r1, [pc, #72]	; (8008a60 <PxMessagingTask+0x3f0>)
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	588a      	ldr	r2, [r1, r2]
 8008a1a:	4697      	mov	pc, r2
 8008a1c:	20000c98 	.word	0x20000c98
 8008a20:	20000c58 	.word	0x20000c58
 8008a24:	20000c48 	.word	0x20000c48
 8008a28:	20000c54 	.word	0x20000c54
 8008a2c:	200067e0 	.word	0x200067e0
 8008a30:	20001db4 	.word	0x20001db4
 8008a34:	20000c50 	.word	0x20000c50
 8008a38:	08017c44 	.word	0x08017c44
 8008a3c:	20000aa0 	.word	0x20000aa0
 8008a40:	20000c34 	.word	0x20000c34
 8008a44:	20001e34 	.word	0x20001e34
 8008a48:	08018c54 	.word	0x08018c54
 8008a4c:	20001144 	.word	0x20001144
 8008a50:	20001145 	.word	0x20001145
 8008a54:	20000c44 	.word	0x20000c44
 8008a58:	200067e8 	.word	0x200067e8
 8008a5c:	08017cfc 	.word	0x08017cfc
 8008a60:	08017d1c 	.word	0x08017d1c
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008a64:	9b06      	ldr	r3, [sp, #24]
 8008a66:	49dd      	ldr	r1, [pc, #884]	; (8008ddc <PxMessagingTask+0x76c>)
 8008a68:	1b18      	subs	r0, r3, r4
 8008a6a:	00c0      	lsls	r0, r0, #3
 8008a6c:	7809      	ldrb	r1, [r1, #0]
 8008a6e:	4458      	add	r0, fp
 8008a70:	1942      	adds	r2, r0, r5
 8008a72:	468c      	mov	ip, r1
 8008a74:	7a51      	ldrb	r1, [r2, #9]
 8008a76:	7ad7      	ldrb	r7, [r2, #11]
 8008a78:	468a      	mov	sl, r1
 8008a7a:	7b11      	ldrb	r1, [r2, #12]
 8008a7c:	7a93      	ldrb	r3, [r2, #10]
 8008a7e:	000e      	movs	r6, r1
 8008a80:	1e71      	subs	r1, r6, #1
 8008a82:	418e      	sbcs	r6, r1
 8008a84:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008a86:	7916      	ldrb	r6, [r2, #4]
 8008a88:	7951      	ldrb	r1, [r2, #5]
 8008a8a:	0636      	lsls	r6, r6, #24
 8008a8c:	0409      	lsls	r1, r1, #16
 8008a8e:	1871      	adds	r1, r6, r1
 8008a90:	79d6      	ldrb	r6, [r2, #7]
 8008a92:	1989      	adds	r1, r1, r6
 8008a94:	7996      	ldrb	r6, [r2, #6]
 8008a96:	0236      	lsls	r6, r6, #8
 8008a98:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008a9a:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008a9c:	5d41      	ldrb	r1, [r0, r5]
 8008a9e:	78d0      	ldrb	r0, [r2, #3]
 8008aa0:	0609      	lsls	r1, r1, #24
 8008aa2:	1809      	adds	r1, r1, r0
 8008aa4:	7850      	ldrb	r0, [r2, #1]
 8008aa6:	0400      	lsls	r0, r0, #16
 8008aa8:	1809      	adds	r1, r1, r0
 8008aaa:	7890      	ldrb	r0, [r2, #2]
 8008aac:	0200      	lsls	r0, r0, #8
 8008aae:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008ab0:	9101      	str	r1, [sp, #4]
 8008ab2:	7a12      	ldrb	r2, [r2, #8]
 8008ab4:	4661      	mov	r1, ip
 8008ab6:	9200      	str	r2, [sp, #0]
 8008ab8:	4650      	mov	r0, sl
 8008aba:	003a      	movs	r2, r7
 8008abc:	f7ff fc68 	bl	8008390 <StartScastDMAStream>
 8008ac0:	e68b      	b.n	80087da <PxMessagingTask+0x16a>
							SaveToRO();
 8008ac2:	f001 f89b 	bl	8009bfc <SaveToRO>
							SaveEEportsDir();
 8008ac6:	f7fa fde5 	bl	8003694 <SaveEEportsDir>
							indMode =IND_PING;
 8008aca:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 8008acc:	4ac4      	ldr	r2, [pc, #784]	; (8008de0 <PxMessagingTask+0x770>)
 8008ace:	2600      	movs	r6, #0
 8008ad0:	7013      	strb	r3, [r2, #0]
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	5d1f      	ldrb	r7, [r3, r4]
 8008ad6:	e683      	b.n	80087e0 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 8008ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01d      	beq.n	8008b1a <PxMessagingTask+0x4aa>
 8008ade:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	1970      	adds	r0, r6, r5
 8008ae8:	2680      	movs	r6, #128	; 0x80
 8008aea:	3101      	adds	r1, #1
 8008aec:	4461      	add	r1, ip
 8008aee:	194d      	adds	r5, r1, r5
 8008af0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008af2:	3a01      	subs	r2, #1
 8008af4:	4bbb      	ldr	r3, [pc, #748]	; (8008de4 <PxMessagingTask+0x774>)
 8008af6:	0052      	lsls	r2, r2, #1
 8008af8:	3901      	subs	r1, #1
 8008afa:	b2c9      	uxtb	r1, r1
 8008afc:	5a9b      	ldrh	r3, [r3, r2]
 8008afe:	4458      	add	r0, fp
 8008b00:	186d      	adds	r5, r5, r1
 8008b02:	0236      	lsls	r6, r6, #8
 8008b04:	0037      	movs	r7, r6
 8008b06:	7801      	ldrb	r1, [r0, #0]
 8008b08:	3001      	adds	r0, #1
 8008b0a:	3901      	subs	r1, #1
 8008b0c:	410f      	asrs	r7, r1
 8008b0e:	433b      	orrs	r3, r7
 8008b10:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 8008b12:	4285      	cmp	r5, r0
 8008b14:	d1f6      	bne.n	8008b04 <PxMessagingTask+0x494>
 8008b16:	49b3      	ldr	r1, [pc, #716]	; (8008de4 <PxMessagingTask+0x774>)
 8008b18:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e716      	b.n	800894c <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 8008b1e:	4650      	mov	r0, sl
 8008b20:	f004 fc7e 	bl	800d420 <ReadPortsDirMSG>
 8008b24:	464b      	mov	r3, r9
 8008b26:	2600      	movs	r6, #0
 8008b28:	5d1f      	ldrb	r7, [r3, r4]
 8008b2a:	e659      	b.n	80087e0 <PxMessagingTask+0x170>
 8008b2c:	4bae      	ldr	r3, [pc, #696]	; (8008de8 <PxMessagingTask+0x778>)
 8008b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b30:	881e      	ldrh	r6, [r3, #0]
 8008b32:	4bae      	ldr	r3, [pc, #696]	; (8008dec <PxMessagingTask+0x77c>)
 8008b34:	4694      	mov	ip, r2
 8008b36:	1998      	adds	r0, r3, r6
 8008b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3a:	4466      	add	r6, ip
 8008b3c:	18e9      	adds	r1, r5, r3
 8008b3e:	464b      	mov	r3, r9
 8008b40:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008b42:	4bab      	ldr	r3, [pc, #684]	; (8008df0 <PxMessagingTask+0x780>)
 8008b44:	b2b6      	uxth	r6, r6
 8008b46:	781d      	ldrb	r5, [r3, #0]
 8008b48:	4459      	add	r1, fp
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	d101      	bne.n	8008b52 <PxMessagingTask+0x4e2>
 8008b4e:	f000 fc69 	bl	8009424 <PxMessagingTask+0xdb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008b52:	f00a fa8e 	bl	8013072 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008b56:	4ba4      	ldr	r3, [pc, #656]	; (8008de8 <PxMessagingTask+0x778>)
 8008b58:	801e      	strh	r6, [r3, #0]
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	e640      	b.n	80087e0 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008b5e:	2601      	movs	r6, #1
 8008b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b62:	18ef      	adds	r7, r5, r3
 8008b64:	445f      	add	r7, fp
								if(p != port)
 8008b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b68:	42b3      	cmp	r3, r6
 8008b6a:	d005      	beq.n	8008b78 <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008b6c:	0030      	movs	r0, r6
 8008b6e:	f004 fbf7 	bl	800d360 <GetUart>
 8008b72:	7839      	ldrb	r1, [r7, #0]
 8008b74:	f004 fc00 	bl	800d378 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008b78:	3601      	adds	r6, #1
 8008b7a:	b2f6      	uxtb	r6, r6
 8008b7c:	3701      	adds	r7, #1
 8008b7e:	2e06      	cmp	r6, #6
 8008b80:	d1f1      	bne.n	8008b66 <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008b82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b84:	f004 fbec 	bl	800d360 <GetUart>
 8008b88:	9b06      	ldr	r3, [sp, #24]
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	1b1b      	subs	r3, r3, r4
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	445b      	add	r3, fp
 8008b92:	195d      	adds	r5, r3, r5
 8008b94:	7aa9      	ldrb	r1, [r5, #10]
 8008b96:	f004 fbef 	bl	800d378 <SwapUartPins>
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	5d1f      	ldrb	r7, [r3, r4]
 8008b9e:	e61f      	b.n	80087e0 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008ba0:	9b06      	ldr	r3, [sp, #24]
 8008ba2:	1b1b      	subs	r3, r3, r4
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	445b      	add	r3, fp
 8008ba8:	5d5f      	ldrb	r7, [r3, r5]
 8008baa:	195b      	adds	r3, r3, r5
 8008bac:	78da      	ldrb	r2, [r3, #3]
 8008bae:	063f      	lsls	r7, r7, #24
 8008bb0:	18bf      	adds	r7, r7, r2
 8008bb2:	785a      	ldrb	r2, [r3, #1]
 8008bb4:	0412      	lsls	r2, r2, #16
 8008bb6:	18bf      	adds	r7, r7, r2
 8008bb8:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008bba:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008bbc:	0212      	lsls	r2, r2, #8
 8008bbe:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc2:	2bff      	cmp	r3, #255	; 0xff
 8008bc4:	d101      	bne.n	8008bca <PxMessagingTask+0x55a>
 8008bc6:	f000 fc4e 	bl	8009466 <PxMessagingTask+0xdf6>
								for(p =0; p < numOfParams; p++){
 8008bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	d101      	bne.n	8008bd4 <PxMessagingTask+0x564>
 8008bd0:	f000 fc42 	bl	8009458 <PxMessagingTask+0xde8>
 8008bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bd8:	195e      	adds	r6, r3, r5
 8008bda:	465b      	mov	r3, fp
 8008bdc:	468c      	mov	ip, r1
 8008bde:	3305      	adds	r3, #5
 8008be0:	4463      	add	r3, ip
 8008be2:	195d      	adds	r5, r3, r5
 8008be4:	0013      	movs	r3, r2
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bee:	445e      	add	r6, fp
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d90a      	bls.n	8008c0e <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 8008bf8:	42b5      	cmp	r5, r6
 8008bfa:	d100      	bne.n	8008bfe <PxMessagingTask+0x58e>
 8008bfc:	e5ed      	b.n	80087da <PxMessagingTask+0x16a>
 8008bfe:	7833      	ldrb	r3, [r6, #0]
 8008c00:	3601      	adds	r6, #1
 8008c02:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 8008c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d8f4      	bhi.n	8008bf8 <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 8008c0e:	0039      	movs	r1, r7
 8008c10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c12:	f004 fb93 	bl	800d33c <UpdateBaudrate>
 8008c16:	e7ef      	b.n	8008bf8 <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 8008c18:	2105      	movs	r1, #5
 8008c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c1c:	f7f7 fa98 	bl	8000150 <__udivsi3>
 8008c20:	b2c2      	uxtb	r2, r0
 8008c22:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	d100      	bne.n	8008c2a <PxMessagingTask+0x5ba>
 8008c28:	e777      	b.n	8008b1a <PxMessagingTask+0x4aa>
 8008c2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c2c:	465b      	mov	r3, fp
 8008c2e:	468c      	mov	ip, r1
 8008c30:	3305      	adds	r3, #5
 8008c32:	4463      	add	r3, ip
 8008c34:	194e      	adds	r6, r1, r5
 8008c36:	195d      	adds	r5, r3, r5
 8008c38:	1e53      	subs	r3, r2, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	009a      	lsls	r2, r3, #2
 8008c3e:	18d3      	adds	r3, r2, r3
 8008c40:	445e      	add	r6, fp
 8008c42:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008c44:	4b6b      	ldr	r3, [pc, #428]	; (8008df4 <PxMessagingTask+0x784>)
 8008c46:	7830      	ldrb	r0, [r6, #0]
 8008c48:	469c      	mov	ip, r3
 8008c4a:	3801      	subs	r0, #1
 8008c4c:	0080      	lsls	r0, r0, #2
 8008c4e:	1c71      	adds	r1, r6, #1
 8008c50:	4460      	add	r0, ip
 8008c52:	2204      	movs	r2, #4
 8008c54:	3605      	adds	r6, #5
 8008c56:	f00a fa0c 	bl	8013072 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008c5a:	42b5      	cmp	r5, r6
 8008c5c:	d1f2      	bne.n	8008c44 <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e674      	b.n	800894c <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008c62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c64:	f7fa ff8c 	bl	8003b80 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008c68:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c6a:	2501      	movs	r5, #1
							temp =0;
 8008c6c:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008c6e:	4a5c      	ldr	r2, [pc, #368]	; (8008de0 <PxMessagingTask+0x770>)
							osDelay(10);
 8008c70:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008c72:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008c74:	f004 fcaa 	bl	800d5cc <osDelay>
 8008c78:	4e5f      	ldr	r6, [pc, #380]	; (8008df8 <PxMessagingTask+0x788>)
								if(neighbors[p - 1][0]){
 8008c7a:	8833      	ldrh	r3, [r6, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008c80:	4b5e      	ldr	r3, [pc, #376]	; (8008dfc <PxMessagingTask+0x78c>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008c82:	1c78      	adds	r0, r7, #1
 8008c84:	469c      	mov	ip, r3
 8008c86:	2204      	movs	r2, #4
 8008c88:	4460      	add	r0, ip
 8008c8a:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008c8c:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008c8e:	f00a f9f0 	bl	8013072 <memcpy>
									temp +=5;
 8008c92:	3705      	adds	r7, #5
 8008c94:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c96:	3501      	adds	r5, #1
 8008c98:	b2ed      	uxtb	r5, r5
 8008c9a:	3604      	adds	r6, #4
 8008c9c:	2d06      	cmp	r5, #6
 8008c9e:	d1ec      	bne.n	8008c7a <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008ca0:	210d      	movs	r1, #13
 8008ca2:	970b      	str	r7, [sp, #44]	; 0x2c
 8008ca4:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	f7ff fb4e 	bl	8008348 <SendMessageToModule>
 8008cac:	e595      	b.n	80087da <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008cae:	4651      	mov	r1, sl
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	0209      	lsls	r1, r1, #8
 8008cb4:	1b1b      	subs	r3, r3, r4
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	445b      	add	r3, fp
 8008cba:	1958      	adds	r0, r3, r5
 8008cbc:	7882      	ldrb	r2, [r0, #2]
 8008cbe:	4e4e      	ldr	r6, [pc, #312]	; (8008df8 <PxMessagingTask+0x788>)
 8008cc0:	1852      	adds	r2, r2, r1
 8008cc2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008cc4:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008cc6:	468c      	mov	ip, r1
 8008cc8:	0032      	movs	r2, r6
 8008cca:	5d59      	ldrb	r1, [r3, r5]
 8008ccc:	7843      	ldrb	r3, [r0, #1]
 8008cce:	0209      	lsls	r1, r1, #8
 8008cd0:	185b      	adds	r3, r3, r1
 8008cd2:	4462      	add	r2, ip
 8008cd4:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e638      	b.n	800894c <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008cda:	4651      	mov	r1, sl
 8008cdc:	9b06      	ldr	r3, [sp, #24]
 8008cde:	0209      	lsls	r1, r1, #8
 8008ce0:	1b1b      	subs	r3, r3, r4
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	445b      	add	r3, fp
 8008ce6:	1958      	adds	r0, r3, r5
 8008ce8:	7882      	ldrb	r2, [r0, #2]
 8008cea:	4e43      	ldr	r6, [pc, #268]	; (8008df8 <PxMessagingTask+0x788>)
 8008cec:	1852      	adds	r2, r2, r1
 8008cee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008cf0:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008cf2:	468c      	mov	ip, r1
 8008cf4:	0032      	movs	r2, r6
 8008cf6:	5d59      	ldrb	r1, [r3, r5]
 8008cf8:	7843      	ldrb	r3, [r0, #1]
 8008cfa:	0209      	lsls	r1, r1, #8
 8008cfc:	4462      	add	r2, ip
 8008cfe:	185b      	adds	r3, r3, r1
 8008d00:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008d02:	4b3f      	ldr	r3, [pc, #252]	; (8008e00 <PxMessagingTask+0x790>)
 8008d04:	4a3d      	ldr	r2, [pc, #244]	; (8008dfc <PxMessagingTask+0x78c>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008d08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008d0a:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008d0c:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008d12:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008d14:	f004 fc5a 	bl	800d5cc <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008d18:	2303      	movs	r3, #3
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	3308      	adds	r3, #8
 8008d22:	0028      	movs	r0, r5
 8008d24:	f7ff f8b0 	bl	8007e88 <SendMessageFromPort>
 8008d28:	464b      	mov	r3, r9
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	5d1f      	ldrb	r7, [r3, r4]
 8008d2e:	e557      	b.n	80087e0 <PxMessagingTask+0x170>
							IND_toggle();
 8008d30:	2180      	movs	r1, #128	; 0x80
 8008d32:	4834      	ldr	r0, [pc, #208]	; (8008e04 <PxMessagingTask+0x794>)
 8008d34:	01c9      	lsls	r1, r1, #7
 8008d36:	f007 ffb9 	bl	8010cac <HAL_GPIO_TogglePin>
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	5d1f      	ldrb	r7, [r3, r4]
 8008d40:	e54e      	b.n	80087e0 <PxMessagingTask+0x170>
							IND_OFF();
 8008d42:	2200      	movs	r2, #0
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	482f      	ldr	r0, [pc, #188]	; (8008e04 <PxMessagingTask+0x794>)
 8008d48:	01c9      	lsls	r1, r1, #7
 8008d4a:	f007 ffa9 	bl	8010ca0 <HAL_GPIO_WritePin>
 8008d4e:	e544      	b.n	80087da <PxMessagingTask+0x16a>
							IND_ON();
 8008d50:	2201      	movs	r2, #1
 8008d52:	e7f7      	b.n	8008d44 <PxMessagingTask+0x6d4>
							if(!moduleAlias[myID][0])
 8008d54:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <PxMessagingTask+0x76c>)
 8008d56:	781a      	ldrb	r2, [r3, #0]
 8008d58:	0093      	lsls	r3, r2, #2
 8008d5a:	189b      	adds	r3, r3, r2
 8008d5c:	4a2a      	ldr	r2, [pc, #168]	; (8008e08 <PxMessagingTask+0x798>)
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	5cd3      	ldrb	r3, [r2, r3]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d000      	beq.n	8008d68 <PxMessagingTask+0x6f8>
 8008d66:	e2d3      	b.n	8009310 <PxMessagingTask+0xca0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008d68:	4828      	ldr	r0, [pc, #160]	; (8008e0c <PxMessagingTask+0x79c>)
 8008d6a:	4652      	mov	r2, sl
 8008d6c:	3008      	adds	r0, #8
 8008d6e:	4928      	ldr	r1, [pc, #160]	; (8008e10 <PxMessagingTask+0x7a0>)
 8008d70:	f00a fb82 	bl	8013478 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008d74:	4d25      	ldr	r5, [pc, #148]	; (8008e0c <PxMessagingTask+0x79c>)
 8008d76:	3508      	adds	r5, #8
 8008d78:	0028      	movs	r0, r5
 8008d7a:	f7f7 f9cd 	bl	8000118 <strlen>
 8008d7e:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <PxMessagingTask+0x7a4>)
 8008d80:	b282      	uxth	r2, r0
 8008d82:	7818      	ldrb	r0, [r3, #0]
 8008d84:	2301      	movs	r3, #1
 8008d86:	425b      	negs	r3, r3
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	0029      	movs	r1, r5
 8008d8c:	3333      	adds	r3, #51	; 0x33
 8008d8e:	f004 fa83 	bl	800d298 <writePxMutex>
							responseStatus =BOS_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e5da      	b.n	800894c <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008d96:	2301      	movs	r3, #1
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <PxMessagingTask+0x770>)
							osDelay(10);
 8008d9a:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008d9c:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008d9e:	f004 fc15 	bl	800d5cc <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <PxMessagingTask+0x7a8>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	4393      	bics	r3, r2
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d000      	beq.n	8008db0 <PxMessagingTask+0x740>
 8008dae:	e514      	b.n	80087da <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008db0:	2200      	movs	r2, #0
 8008db2:	2102      	movs	r1, #2
 8008db4:	e777      	b.n	8008ca6 <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008db6:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <PxMessagingTask+0x7ac>)
 8008db8:	4a19      	ldr	r2, [pc, #100]	; (8008e20 <PxMessagingTask+0x7b0>)
							osDelay(10);
 8008dba:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008dbc:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4a07      	ldr	r2, [pc, #28]	; (8008de0 <PxMessagingTask+0x770>)
 8008dc2:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008dc4:	f004 fc02 	bl	800d5cc <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <PxMessagingTask+0x7b4>)
 8008dce:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <PxMessagingTask+0x7b8>)
 8008dd0:	60da      	str	r2, [r3, #12]
 8008dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	e7fd      	b.n	8008dd6 <PxMessagingTask+0x766>
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	20000aa0 	.word	0x20000aa0
 8008de0:	20001146 	.word	0x20001146
 8008de4:	20006d04 	.word	0x20006d04
 8008de8:	20000c52 	.word	0x20000c52
 8008dec:	20001e78 	.word	0x20001e78
 8008df0:	20000c54 	.word	0x20000c54
 8008df4:	2000111c 	.word	0x2000111c
 8008df8:	20001130 	.word	0x20001130
 8008dfc:	20000b44 	.word	0x20000b44
 8008e00:	20000030 	.word	0x20000030
 8008e04:	48000800 	.word	0x48000800
 8008e08:	20000dcc 	.word	0x20000dcc
 8008e0c:	20001db4 	.word	0x20001db4
 8008e10:	0801975c 	.word	0x0801975c
 8008e14:	20000c30 	.word	0x20000c30
 8008e18:	200067e0 	.word	0x200067e0
 8008e1c:	20007ff0 	.word	0x20007ff0
 8008e20:	deadbeef 	.word	0xdeadbeef
 8008e24:	e000ed00 	.word	0xe000ed00
 8008e28:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008e2c:	230b      	movs	r3, #11
 8008e2e:	469c      	mov	ip, r3
 8008e30:	44ac      	add	ip, r5
 8008e32:	4662      	mov	r2, ip
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	9207      	str	r2, [sp, #28]
 8008e38:	1b1b      	subs	r3, r3, r4
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	445b      	add	r3, fp
 8008e3e:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e42:	2a0f      	cmp	r2, #15
 8008e44:	d100      	bne.n	8008e48 <PxMessagingTask+0x7d8>
 8008e46:	e318      	b.n	800947a <PxMessagingTask+0xe0a>
							if(numOfParams == 17)
 8008e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008e4a:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008e4c:	2a11      	cmp	r2, #17
 8008e4e:	d100      	bne.n	8008e52 <PxMessagingTask+0x7e2>
 8008e50:	e317      	b.n	8009482 <PxMessagingTask+0xe12>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e52:	9f06      	ldr	r7, [sp, #24]
 8008e54:	1caa      	adds	r2, r5, #2
 8008e56:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e58:	1b3a      	subs	r2, r7, r4
 8008e5a:	00d2      	lsls	r2, r2, #3
 8008e5c:	445a      	add	r2, fp
 8008e5e:	1ce8      	adds	r0, r5, #3
 8008e60:	5d57      	ldrb	r7, [r2, r5]
 8008e62:	9011      	str	r0, [sp, #68]	; 0x44
 8008e64:	5c10      	ldrb	r0, [r2, r0]
 8008e66:	1c6e      	adds	r6, r5, #1
 8008e68:	063f      	lsls	r7, r7, #24
 8008e6a:	183f      	adds	r7, r7, r0
 8008e6c:	5d90      	ldrb	r0, [r2, r6]
 8008e6e:	9608      	str	r6, [sp, #32]
 8008e70:	0400      	lsls	r0, r0, #16
 8008e72:	183f      	adds	r7, r7, r0
 8008e74:	1ca8      	adds	r0, r5, #2
 8008e76:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e78:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e7a:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e7c:	9613      	str	r6, [sp, #76]	; 0x4c
 8008e7e:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e80:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e82:	9614      	str	r6, [sp, #80]	; 0x50
 8008e84:	1d28      	adds	r0, r5, #4
 8008e86:	1dee      	adds	r6, r5, #7
 8008e88:	9012      	str	r0, [sp, #72]	; 0x48
 8008e8a:	9615      	str	r6, [sp, #84]	; 0x54
 8008e8c:	5c16      	ldrb	r6, [r2, r0]
 8008e8e:	1d68      	adds	r0, r5, #5
 8008e90:	5c10      	ldrb	r0, [r2, r0]
 8008e92:	0636      	lsls	r6, r6, #24
 8008e94:	0400      	lsls	r0, r0, #16
 8008e96:	1836      	adds	r6, r6, r0
 8008e98:	1de8      	adds	r0, r5, #7
 8008e9a:	5c10      	ldrb	r0, [r2, r0]
 8008e9c:	1836      	adds	r6, r6, r0
 8008e9e:	1da8      	adds	r0, r5, #6
 8008ea0:	5c10      	ldrb	r0, [r2, r0]
 8008ea2:	0200      	lsls	r0, r0, #8
 8008ea4:	1836      	adds	r6, r6, r0
 8008ea6:	0028      	movs	r0, r5
 8008ea8:	3009      	adds	r0, #9
							if(temp == false){
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	d000      	beq.n	8008eb0 <PxMessagingTask+0x840>
 8008eae:	e24f      	b.n	8009350 <PxMessagingTask+0xce0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008eb0:	5c12      	ldrb	r2, [r2, r0]
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	d00e      	beq.n	8008ed4 <PxMessagingTask+0x864>
 8008eb6:	9905      	ldr	r1, [sp, #20]
 8008eb8:	1948      	adds	r0, r1, r5
 8008eba:	7a81      	ldrb	r1, [r0, #10]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d009      	beq.n	8008ed4 <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008ec0:	0013      	movs	r3, r2
 8008ec2:	7a00      	ldrb	r0, [r0, #8]
 8008ec4:	0032      	movs	r2, r6
 8008ec6:	9100      	str	r1, [sp, #0]
 8008ec8:	0039      	movs	r1, r7
 8008eca:	f7fe feed 	bl	8007ca8 <SetupDMAStreams>
 8008ece:	9b05      	ldr	r3, [sp, #20]
 8008ed0:	9a07      	ldr	r2, [sp, #28]
 8008ed2:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00a      	beq.n	8008eee <PxMessagingTask+0x87e>
 8008ed8:	9a05      	ldr	r2, [sp, #20]
 8008eda:	1951      	adds	r1, r2, r5
 8008edc:	7b0a      	ldrb	r2, [r1, #12]
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	d005      	beq.n	8008eee <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008ee2:	7a08      	ldrb	r0, [r1, #8]
 8008ee4:	9200      	str	r2, [sp, #0]
 8008ee6:	0039      	movs	r1, r7
 8008ee8:	0032      	movs	r2, r6
 8008eea:	f7fe fedd 	bl	8007ca8 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	1b1b      	subs	r3, r3, r4
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	445b      	add	r3, fp
 8008ef6:	195b      	adds	r3, r3, r5
 8008ef8:	7b5b      	ldrb	r3, [r3, #13]
 8008efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d100      	bne.n	8008f02 <PxMessagingTask+0x892>
 8008f00:	e46b      	b.n	80087da <PxMessagingTask+0x16a>
 8008f02:	9b05      	ldr	r3, [sp, #20]
 8008f04:	469c      	mov	ip, r3
 8008f06:	4465      	add	r5, ip
 8008f08:	7bab      	ldrb	r3, [r5, #14]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d000      	beq.n	8008f10 <PxMessagingTask+0x8a0>
 8008f0e:	e29c      	b.n	800944a <PxMessagingTask+0xdda>
 8008f10:	464a      	mov	r2, r9
 8008f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f14:	5d17      	ldrb	r7, [r2, r4]
 8008f16:	001e      	movs	r6, r3
 8008f18:	e462      	b.n	80087e0 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	1b1e      	subs	r6, r3, r4
 8008f20:	2300      	movs	r3, #0
 8008f22:	00f6      	lsls	r6, r6, #3
 8008f24:	445e      	add	r6, fp
 8008f26:	5d70      	ldrb	r0, [r6, r5]
 8008f28:	2100      	movs	r1, #0
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	3319      	adds	r3, #25
 8008f2e:	f7fe ffab 	bl	8007e88 <SendMessageFromPort>
							osDelay(100);
 8008f32:	2064      	movs	r0, #100	; 0x64
 8008f34:	f004 fb4a 	bl	800d5cc <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008f38:	4ae8      	ldr	r2, [pc, #928]	; (80092dc <PxMessagingTask+0xc6c>)
 8008f3a:	5d73      	ldrb	r3, [r6, r5]
 8008f3c:	7811      	ldrb	r1, [r2, #0]
 8008f3e:	4650      	mov	r0, sl
 8008f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f42:	f000 ff7f 	bl	8009e44 <remoteBootloaderUpdate>
 8008f46:	464b      	mov	r3, r9
 8008f48:	2600      	movs	r6, #0
 8008f4a:	5d1f      	ldrb	r7, [r3, r4]
 8008f4c:	e448      	b.n	80087e0 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008f4e:	f004 fc45 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
 8008f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f54:	0006      	movs	r6, r0
 8008f56:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008f58:	9b07      	ldr	r3, [sp, #28]
 8008f5a:	4459      	add	r1, fp
 8008f5c:	2bff      	cmp	r3, #255	; 0xff
 8008f5e:	d100      	bne.n	8008f62 <PxMessagingTask+0x8f2>
 8008f60:	e13f      	b.n	80091e2 <PxMessagingTask+0xb72>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008f62:	48df      	ldr	r0, [pc, #892]	; (80092e0 <PxMessagingTask+0xc70>)
							else if(dst == BOS_MULTICAST)
 8008f64:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008f66:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008f68:	2bfe      	cmp	r3, #254	; 0xfe
 8008f6a:	d100      	bne.n	8008f6e <PxMessagingTask+0x8fe>
 8008f6c:	e132      	b.n	80091d4 <PxMessagingTask+0xb64>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f70:	f00a f87f 	bl	8013072 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f74:	4fda      	ldr	r7, [pc, #872]	; (80092e0 <PxMessagingTask+0xc70>)
 8008f76:	3758      	adds	r7, #88	; 0x58
 8008f78:	e001      	b.n	8008f7e <PxMessagingTask+0x90e>
							} while(xReturned != pdFALSE);
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	d028      	beq.n	8008fd0 <PxMessagingTask+0x960>
								PcPort =port;
 8008f7e:	4ad9      	ldr	r2, [pc, #868]	; (80092e4 <PxMessagingTask+0xc74>)
 8008f80:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008f82:	4bd8      	ldr	r3, [pc, #864]	; (80092e4 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f84:	0038      	movs	r0, r7
								temp =PcPort;
 8008f86:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008f88:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f8a:	2299      	movs	r2, #153	; 0x99
 8008f8c:	0031      	movs	r1, r6
 8008f8e:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008f90:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f92:	f004 fbab 	bl	800d6ec <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f98:	4ad2      	ldr	r2, [pc, #840]	; (80092e4 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f9a:	0005      	movs	r5, r0
								PcPort =temp;
 8008f9c:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008f9e:	4bd2      	ldr	r3, [pc, #840]	; (80092e8 <PxMessagingTask+0xc78>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b60      	cmp	r3, #96	; 0x60
 8008fa4:	d1e9      	bne.n	8008f7a <PxMessagingTask+0x90a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008fa6:	0030      	movs	r0, r6
 8008fa8:	f7f7 f8b6 	bl	8000118 <strlen>
 8008fac:	0031      	movs	r1, r6
 8008fae:	0002      	movs	r2, r0
 8008fb0:	48ce      	ldr	r0, [pc, #824]	; (80092ec <PxMessagingTask+0xc7c>)
 8008fb2:	f00a f85e 	bl	8013072 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008fb6:	0030      	movs	r0, r6
 8008fb8:	f7f7 f8ae 	bl	8000118 <strlen>
 8008fbc:	2118      	movs	r1, #24
 8008fbe:	b282      	uxth	r2, r0
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f7ff f9c1 	bl	8008348 <SendMessageToModule>
									osDelay(10);
 8008fc6:	200a      	movs	r0, #10
 8008fc8:	f004 fb00 	bl	800d5cc <osDelay>
							} while(xReturned != pdFALSE);
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	d1d6      	bne.n	8008f7e <PxMessagingTask+0x90e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008fd0:	48c3      	ldr	r0, [pc, #780]	; (80092e0 <PxMessagingTask+0xc70>)
 8008fd2:	2232      	movs	r2, #50	; 0x32
 8008fd4:	3058      	adds	r0, #88	; 0x58
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	f00a f854 	bl	8013084 <memset>
 8008fdc:	464b      	mov	r3, r9
 8008fde:	2600      	movs	r6, #0
 8008fe0:	5d1f      	ldrb	r7, [r3, r4]
 8008fe2:	f7ff fbfd 	bl	80087e0 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008fe6:	f004 fbf9 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
 8008fea:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008fec:	f7f7 f894 	bl	8000118 <strlen>
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	0002      	movs	r2, r0
 8008ff4:	0030      	movs	r0, r6
 8008ff6:	f00a f845 	bl	8013084 <memset>
 8008ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ffc:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8008ffe:	4bbc      	ldr	r3, [pc, #752]	; (80092f0 <PxMessagingTask+0xc80>)
 8009000:	4459      	add	r1, fp
 8009002:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009004:	4bbb      	ldr	r3, [pc, #748]	; (80092f4 <PxMessagingTask+0xc84>)
 8009006:	8818      	ldrh	r0, [r3, #0]
 8009008:	1830      	adds	r0, r6, r0
							if(longMessage){
 800900a:	2f00      	cmp	r7, #0
 800900c:	d100      	bne.n	8009010 <PxMessagingTask+0x9a0>
 800900e:	e0ce      	b.n	80091ae <PxMessagingTask+0xb3e>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009010:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8009012:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009014:	002a      	movs	r2, r5
 8009016:	f00a f82c 	bl	8013072 <memcpy>
								longMessageLastPtr +=numOfParams;
 800901a:	46ac      	mov	ip, r5
 800901c:	4bb5      	ldr	r3, [pc, #724]	; (80092f4 <PxMessagingTask+0xc84>)
 800901e:	881a      	ldrh	r2, [r3, #0]
 8009020:	4bb4      	ldr	r3, [pc, #720]	; (80092f4 <PxMessagingTask+0xc84>)
 8009022:	4462      	add	r2, ip
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	464b      	mov	r3, r9
 8009028:	5d1f      	ldrb	r7, [r3, r4]
 800902a:	f7ff fbd9 	bl	80087e0 <PxMessagingTask+0x170>
							ClearEEportsDir();
 800902e:	f7fa fc29 	bl	8003884 <ClearEEportsDir>
							ClearROtopology();
 8009032:	f000 fedb 	bl	8009dec <ClearROtopology>
							osDelay(100);
 8009036:	2064      	movs	r0, #100	; 0x64
 8009038:	f004 fac8 	bl	800d5cc <osDelay>
							indMode =IND_TOPOLOGY;
 800903c:	2302      	movs	r3, #2
 800903e:	e545      	b.n	8008acc <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009040:	4ba6      	ldr	r3, [pc, #664]	; (80092dc <PxMessagingTask+0xc6c>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	4293      	cmp	r3, r2
 8009046:	d01e      	beq.n	8009086 <PxMessagingTask+0xa16>
 8009048:	2b01      	cmp	r3, #1
 800904a:	d019      	beq.n	8009080 <PxMessagingTask+0xa10>
				ForwardReceivedMessage(port);
 800904c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800904e:	f7ff f95b 	bl	8008308 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8009052:	4ba5      	ldr	r3, [pc, #660]	; (80092e8 <PxMessagingTask+0xc78>)
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <PxMessagingTask+0x9f0>
					indMode =IND_SHORT_BLINK;
 800905a:	2303      	movs	r3, #3
 800905c:	4aa6      	ldr	r2, [pc, #664]	; (80092f8 <PxMessagingTask+0xc88>)
 800905e:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b19      	cmp	r3, #25
 8009064:	d07c      	beq.n	8009160 <PxMessagingTask+0xaf0>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009066:	9b08      	ldr	r3, [sp, #32]
 8009068:	2b1a      	cmp	r3, #26
 800906a:	d100      	bne.n	800906e <PxMessagingTask+0x9fe>
 800906c:	e082      	b.n	8009174 <PxMessagingTask+0xb04>
 800906e:	464b      	mov	r3, r9
 8009070:	5d1f      	ldrb	r7, [r3, r4]
 8009072:	f7ff fbb5 	bl	80087e0 <PxMessagingTask+0x170>
				longMessage =1;
 8009076:	2301      	movs	r3, #1
 8009078:	4a9d      	ldr	r2, [pc, #628]	; (80092f0 <PxMessagingTask+0xc80>)
 800907a:	7013      	strb	r3, [r2, #0]
 800907c:	f7ff fb37 	bl	80086ee <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	2b10      	cmp	r3, #16
 8009084:	d1e2      	bne.n	800904c <PxMessagingTask+0x9dc>
 8009086:	464b      	mov	r3, r9
 8009088:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 800908a:	2e00      	cmp	r6, #0
 800908c:	d001      	beq.n	8009092 <PxMessagingTask+0xa22>
 800908e:	f7ff fba7 	bl	80087e0 <PxMessagingTask+0x170>
				shift +=4;
 8009092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009094:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8009096:	1b7a      	subs	r2, r7, r5
 8009098:	b2d3      	uxtb	r3, r2
 800909a:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	2b2d      	cmp	r3, #45	; 0x2d
 80090a0:	d801      	bhi.n	80090a6 <PxMessagingTask+0xa36>
 80090a2:	f7ff fb87 	bl	80087b4 <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 80090a6:	9500      	str	r5, [sp, #0]
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	4652      	mov	r2, sl
 80090ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090ae:	9808      	ldr	r0, [sp, #32]
 80090b0:	f7ff fadc 	bl	800866c <User_MessagingParser>
 80090b4:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 80090b6:	2801      	cmp	r0, #1
 80090b8:	d1d9      	bne.n	800906e <PxMessagingTask+0x9fe>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 80090ba:	4652      	mov	r2, sl
 80090bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090be:	9500      	str	r5, [sp, #0]
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	9808      	ldr	r0, [sp, #32]
 80090c4:	f001 f99a 	bl	800a3fc <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 80090c8:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 80090ca:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 80090cc:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 80090ce:	2801      	cmp	r0, #1
 80090d0:	d100      	bne.n	80090d4 <PxMessagingTask+0xa64>
 80090d2:	e5e8      	b.n	8008ca6 <PxMessagingTask+0x636>
 80090d4:	e7cb      	b.n	800906e <PxMessagingTask+0x9fe>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80090d6:	9b07      	ldr	r3, [sp, #28]
 80090d8:	2bfe      	cmp	r3, #254	; 0xfe
 80090da:	d1d6      	bne.n	800908a <PxMessagingTask+0xa1a>
 80090dc:	9b06      	ldr	r3, [sp, #24]
 80090de:	4a80      	ldr	r2, [pc, #512]	; (80092e0 <PxMessagingTask+0xc70>)
 80090e0:	1b1d      	subs	r5, r3, r4
 80090e2:	00ed      	lsls	r5, r5, #3
 80090e4:	445d      	add	r5, fp
 80090e6:	19eb      	adds	r3, r5, r7
 80090e8:	3b01      	subs	r3, #1
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 80090ee:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d101      	bne.n	80090f8 <PxMessagingTask+0xa88>
 80090f4:	f7ff fb74 	bl	80087e0 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80090f8:	4a79      	ldr	r2, [pc, #484]	; (80092e0 <PxMessagingTask+0xc70>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 80090fa:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80090fc:	7193      	strb	r3, [r2, #6]
 80090fe:	4a7f      	ldr	r2, [pc, #508]	; (80092fc <PxMessagingTask+0xc8c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009100:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009102:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009104:	f7ff f8bc 	bl	8008280 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009108:	464b      	mov	r3, r9
 800910a:	2200      	movs	r2, #0
 800910c:	5d1f      	ldrb	r7, [r3, r4]
 800910e:	19eb      	adds	r3, r5, r7
 8009110:	3b01      	subs	r3, #1
 8009112:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009114:	1eb8      	subs	r0, r7, #2
 8009116:	5c2e      	ldrb	r6, [r5, r0]
 8009118:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 800911a:	2e00      	cmp	r6, #0
 800911c:	d01d      	beq.n	800915a <PxMessagingTask+0xaea>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800911e:	4b6f      	ldr	r3, [pc, #444]	; (80092dc <PxMessagingTask+0xc6c>)
 8009120:	1b80      	subs	r0, r0, r6
 8009122:	7819      	ldrb	r1, [r3, #0]
 8009124:	5c2b      	ldrb	r3, [r5, r0]
 8009126:	428b      	cmp	r3, r1
 8009128:	d101      	bne.n	800912e <PxMessagingTask+0xabe>
 800912a:	f7ff fb39 	bl	80087a0 <PxMessagingTask+0x130>
 800912e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009130:	465a      	mov	r2, fp
 8009132:	46ac      	mov	ip, r5
 8009134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009136:	3201      	adds	r2, #1
 8009138:	1e75      	subs	r5, r6, #1
 800913a:	4462      	add	r2, ip
 800913c:	b2ed      	uxtb	r5, r5
 800913e:	181b      	adds	r3, r3, r0
 8009140:	1952      	adds	r2, r2, r5
 8009142:	445b      	add	r3, fp
 8009144:	1812      	adds	r2, r2, r0
 8009146:	e006      	b.n	8009156 <PxMessagingTask+0xae6>
 8009148:	3301      	adds	r3, #1
 800914a:	1e58      	subs	r0, r3, #1
 800914c:	7800      	ldrb	r0, [r0, #0]
 800914e:	4288      	cmp	r0, r1
 8009150:	d101      	bne.n	8009156 <PxMessagingTask+0xae6>
 8009152:	f7ff fb25 	bl	80087a0 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 8009156:	429a      	cmp	r2, r3
 8009158:	d1f6      	bne.n	8009148 <PxMessagingTask+0xad8>
					result =BOS_ERR_WrongID;
 800915a:	2666      	movs	r6, #102	; 0x66
 800915c:	f7ff fb40 	bl	80087e0 <PxMessagingTask+0x170>
					Delay_ms(100);
 8009160:	2064      	movs	r0, #100	; 0x64
 8009162:	f006 f8db 	bl	800f31c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8009166:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800916a:	9907      	ldr	r1, [sp, #28]
 800916c:	4650      	mov	r0, sl
 800916e:	f000 fe69 	bl	8009e44 <remoteBootloaderUpdate>
 8009172:	e77c      	b.n	800906e <PxMessagingTask+0x9fe>
					Delay_ms(100);
 8009174:	2064      	movs	r0, #100	; 0x64
 8009176:	f006 f8d1 	bl	800f31c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800917a:	9b06      	ldr	r3, [sp, #24]
 800917c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800917e:	1b1b      	subs	r3, r3, r4
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	445b      	add	r3, fp
 8009184:	5c9b      	ldrb	r3, [r3, r2]
 8009186:	e7ef      	b.n	8009168 <PxMessagingTask+0xaf8>
								ADCSelectChannel(ADCPort,"top");
 8009188:	495d      	ldr	r1, [pc, #372]	; (8009300 <PxMessagingTask+0xc90>)
 800918a:	f002 ffa9 	bl	800c0e0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 800918e:	4b5d      	ldr	r3, [pc, #372]	; (8009304 <PxMessagingTask+0xc94>)
 8009190:	4a5c      	ldr	r2, [pc, #368]	; (8009304 <PxMessagingTask+0xc94>)
 8009192:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8009194:	3234      	adds	r2, #52	; 0x34
 8009196:	b2c0      	uxtb	r0, r0
 8009198:	4959      	ldr	r1, [pc, #356]	; (8009300 <PxMessagingTask+0xc90>)
 800919a:	f002 fff1 	bl	800c180 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800919e:	4959      	ldr	r1, [pc, #356]	; (8009304 <PxMessagingTask+0xc94>)
 80091a0:	4858      	ldr	r0, [pc, #352]	; (8009304 <PxMessagingTask+0xc94>)
 80091a2:	3138      	adds	r1, #56	; 0x38
 80091a4:	303c      	adds	r0, #60	; 0x3c
 80091a6:	f002 fdd5 	bl	800bd54 <ReadTempAndVref>
 80091aa:	f7ff fb82 	bl	80088b2 <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80091ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b0:	f009 ff5f 	bl	8013072 <memcpy>
								longMessageLastPtr =0;
 80091b4:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <PxMessagingTask+0xc84>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091b6:	4854      	ldr	r0, [pc, #336]	; (8009308 <PxMessagingTask+0xc98>)
								longMessageLastPtr =0;
 80091b8:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 80091ba:	4b54      	ldr	r3, [pc, #336]	; (800930c <PxMessagingTask+0xc9c>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091bc:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 80091be:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091c0:	2300      	movs	r3, #0
 80091c2:	001a      	movs	r2, r3
 80091c4:	0019      	movs	r1, r3
 80091c6:	f005 fcf9 	bl	800ebbc <xTaskGenericNotify>
 80091ca:	464b      	mov	r3, r9
 80091cc:	2600      	movs	r6, #0
 80091ce:	5d1f      	ldrb	r7, [r3, r4]
 80091d0:	f7ff fb06 	bl	80087e0 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80091d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091d8:	1a9a      	subs	r2, r3, r2
 80091da:	3a02      	subs	r2, #2
 80091dc:	f009 ff49 	bl	8013072 <memcpy>
 80091e0:	e6c8      	b.n	8008f74 <PxMessagingTask+0x904>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 80091e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091e4:	483e      	ldr	r0, [pc, #248]	; (80092e0 <PxMessagingTask+0xc70>)
 80091e6:	3a01      	subs	r2, #1
 80091e8:	3058      	adds	r0, #88	; 0x58
 80091ea:	f009 ff42 	bl	8013072 <memcpy>
 80091ee:	e6c1      	b.n	8008f74 <PxMessagingTask+0x904>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80091f0:	9905      	ldr	r1, [sp, #20]
 80091f2:	1949      	adds	r1, r1, r5
 80091f4:	788b      	ldrb	r3, [r1, #2]
 80091f6:	78ce      	ldrb	r6, [r1, #3]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	0436      	lsls	r6, r6, #16
 80091fc:	199b      	adds	r3, r3, r6
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009202:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009204:	0612      	lsls	r2, r2, #24
 8009206:	189b      	adds	r3, r3, r2
 8009208:	4a3e      	ldr	r2, [pc, #248]	; (8009304 <PxMessagingTask+0xc94>)
 800920a:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800920c:	5c0b      	ldrb	r3, [r1, r0]
 800920e:	5dca      	ldrb	r2, [r1, r7]
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	0412      	lsls	r2, r2, #16
 8009214:	189b      	adds	r3, r3, r2
 8009216:	1d6a      	adds	r2, r5, #5
 8009218:	5c8a      	ldrb	r2, [r1, r2]
 800921a:	189b      	adds	r3, r3, r2
 800921c:	4652      	mov	r2, sl
 800921e:	5c8a      	ldrb	r2, [r1, r2]
 8009220:	0612      	lsls	r2, r2, #24
 8009222:	189b      	adds	r3, r3, r2
 8009224:	4a37      	ldr	r2, [pc, #220]	; (8009304 <PxMessagingTask+0xc94>)
 8009226:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800922a:	9a07      	ldr	r2, [sp, #28]
 800922c:	5ccb      	ldrb	r3, [r1, r3]
 800922e:	5c8a      	ldrb	r2, [r1, r2]
 8009230:	021b      	lsls	r3, r3, #8
 8009232:	0412      	lsls	r2, r2, #16
 8009234:	189b      	adds	r3, r3, r2
 8009236:	9a08      	ldr	r2, [sp, #32]
 8009238:	5c8a      	ldrb	r2, [r1, r2]
 800923a:	189b      	adds	r3, r3, r2
 800923c:	4662      	mov	r2, ip
 800923e:	5c8a      	ldrb	r2, [r1, r2]
 8009240:	0612      	lsls	r2, r2, #24
 8009242:	189b      	adds	r3, r3, r2
 8009244:	4a2f      	ldr	r2, [pc, #188]	; (8009304 <PxMessagingTask+0xc94>)
 8009246:	6153      	str	r3, [r2, #20]
									break;
 8009248:	f7ff fb12 	bl	8008870 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800924c:	9905      	ldr	r1, [sp, #20]
 800924e:	1949      	adds	r1, r1, r5
 8009250:	788b      	ldrb	r3, [r1, #2]
 8009252:	78ce      	ldrb	r6, [r1, #3]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	0436      	lsls	r6, r6, #16
 8009258:	199b      	adds	r3, r3, r6
 800925a:	189b      	adds	r3, r3, r2
 800925c:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800925e:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009260:	0612      	lsls	r2, r2, #24
 8009262:	189b      	adds	r3, r3, r2
 8009264:	4a27      	ldr	r2, [pc, #156]	; (8009304 <PxMessagingTask+0xc94>)
 8009266:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009268:	5c0b      	ldrb	r3, [r1, r0]
 800926a:	5dca      	ldrb	r2, [r1, r7]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	0412      	lsls	r2, r2, #16
 8009270:	189b      	adds	r3, r3, r2
 8009272:	1d6a      	adds	r2, r5, #5
 8009274:	5c8a      	ldrb	r2, [r1, r2]
 8009276:	189b      	adds	r3, r3, r2
 8009278:	4652      	mov	r2, sl
 800927a:	5c8a      	ldrb	r2, [r1, r2]
 800927c:	0612      	lsls	r2, r2, #24
 800927e:	189b      	adds	r3, r3, r2
 8009280:	4a20      	ldr	r2, [pc, #128]	; (8009304 <PxMessagingTask+0xc94>)
 8009282:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	5ccb      	ldrb	r3, [r1, r3]
 800928a:	5c8a      	ldrb	r2, [r1, r2]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	0412      	lsls	r2, r2, #16
 8009290:	189b      	adds	r3, r3, r2
 8009292:	9a08      	ldr	r2, [sp, #32]
 8009294:	5c8a      	ldrb	r2, [r1, r2]
 8009296:	189b      	adds	r3, r3, r2
 8009298:	4662      	mov	r2, ip
 800929a:	5c8a      	ldrb	r2, [r1, r2]
 800929c:	0612      	lsls	r2, r2, #24
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	4a18      	ldr	r2, [pc, #96]	; (8009304 <PxMessagingTask+0xc94>)
 80092a2:	6213      	str	r3, [r2, #32]
									break;
 80092a4:	f7ff fae4 	bl	8008870 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d001      	beq.n	80092b0 <PxMessagingTask+0xc40>
 80092ac:	f7ff fa95 	bl	80087da <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 80092b0:	2600      	movs	r6, #0
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <PxMessagingTask+0xc7c>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092b4:	4a0d      	ldr	r2, [pc, #52]	; (80092ec <PxMessagingTask+0xc7c>)
								messageParams[0] =0; /* change own ID */
 80092b6:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092b8:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092ba:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092bc:	469c      	mov	ip, r3
 80092be:	4465      	add	r5, ip
 80092c0:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092c2:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092c4:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092c6:	2303      	movs	r3, #3
 80092c8:	0032      	movs	r2, r6
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	330d      	adds	r3, #13
 80092ce:	f7fe fddb 	bl	8007e88 <SendMessageFromPort>
 80092d2:	464b      	mov	r3, r9
 80092d4:	5d1f      	ldrb	r7, [r3, r4]
 80092d6:	f7ff fa83 	bl	80087e0 <PxMessagingTask+0x170>
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	20000aa0 	.word	0x20000aa0
 80092e0:	20001db4 	.word	0x20001db4
 80092e4:	20000c30 	.word	0x20000c30
 80092e8:	200067e0 	.word	0x200067e0
 80092ec:	20000b44 	.word	0x20000b44
 80092f0:	20000c54 	.word	0x20000c54
 80092f4:	20000c52 	.word	0x20000c52
 80092f8:	20001146 	.word	0x20001146
 80092fc:	20000c50 	.word	0x20000c50
 8009300:	08018c50 	.word	0x08018c50
 8009304:	20001e34 	.word	0x20001e34
 8009308:	20001cb0 	.word	0x20001cb0
 800930c:	20000c44 	.word	0x20000c44
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009310:	4652      	mov	r2, sl
 8009312:	230a      	movs	r3, #10
 8009314:	4353      	muls	r3, r2
 8009316:	4adf      	ldr	r2, [pc, #892]	; (8009694 <PxMessagingTask+0x1024>)
 8009318:	48df      	ldr	r0, [pc, #892]	; (8009698 <PxMessagingTask+0x1028>)
 800931a:	4694      	mov	ip, r2
 800931c:	49df      	ldr	r1, [pc, #892]	; (800969c <PxMessagingTask+0x102c>)
 800931e:	4463      	add	r3, ip
 8009320:	4652      	mov	r2, sl
 8009322:	3008      	adds	r0, #8
 8009324:	f00a f8a8 	bl	8013478 <sprintf>
 8009328:	e524      	b.n	8008d74 <PxMessagingTask+0x704>
 800932a:	2600      	movs	r6, #0
 800932c:	f7ff fa58 	bl	80087e0 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009330:	2a01      	cmp	r2, #1
 8009332:	d901      	bls.n	8009338 <PxMessagingTask+0xcc8>
 8009334:	f7ff fb45 	bl	80089c2 <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009338:	9b05      	ldr	r3, [sp, #20]
 800933a:	4ad9      	ldr	r2, [pc, #868]	; (80096a0 <PxMessagingTask+0x1030>)
 800933c:	5d5b      	ldrb	r3, [r3, r5]
 800933e:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009340:	2b08      	cmp	r3, #8
 8009342:	d901      	bls.n	8009348 <PxMessagingTask+0xcd8>
 8009344:	f7ff fb3d 	bl	80089c2 <PxMessagingTask+0x352>
 8009348:	4ad6      	ldr	r2, [pc, #856]	; (80096a4 <PxMessagingTask+0x1034>)
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	58d3      	ldr	r3, [r2, r3]
 800934e:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009350:	2338      	movs	r3, #56	; 0x38
 8009352:	46aa      	mov	sl, r5
 8009354:	435c      	muls	r4, r3
 8009356:	445c      	add	r4, fp
 8009358:	1965      	adds	r5, r4, r5
 800935a:	0007      	movs	r7, r0
 800935c:	7a29      	ldrb	r1, [r5, #8]
 800935e:	20e4      	movs	r0, #228	; 0xe4
 8009360:	f001 fef8 	bl	800b154 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009364:	4653      	mov	r3, sl
 8009366:	9a08      	ldr	r2, [sp, #32]
 8009368:	5ce3      	ldrb	r3, [r4, r3]
 800936a:	5ca1      	ldrb	r1, [r4, r2]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	18c9      	adds	r1, r1, r3
 8009370:	b289      	uxth	r1, r1
 8009372:	20e5      	movs	r0, #229	; 0xe5
 8009374:	f001 feee 	bl	800b154 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800937c:	5ce3      	ldrb	r3, [r4, r3]
 800937e:	5ca1      	ldrb	r1, [r4, r2]
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	18c9      	adds	r1, r1, r3
 8009384:	b289      	uxth	r1, r1
 8009386:	20e6      	movs	r0, #230	; 0xe6
 8009388:	f001 fee4 	bl	800b154 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800938c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800938e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009390:	5ce3      	ldrb	r3, [r4, r3]
 8009392:	5ca1      	ldrb	r1, [r4, r2]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	18c9      	adds	r1, r1, r3
 8009398:	b289      	uxth	r1, r1
 800939a:	20e7      	movs	r0, #231	; 0xe7
 800939c:	f001 feda 	bl	800b154 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80093a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093a4:	5ce3      	ldrb	r3, [r4, r3]
 80093a6:	5ca1      	ldrb	r1, [r4, r2]
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	18c9      	adds	r1, r1, r3
 80093ac:	b289      	uxth	r1, r1
 80093ae:	20e8      	movs	r0, #232	; 0xe8
 80093b0:	f001 fed0 	bl	800b154 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 80093b4:	5de3      	ldrb	r3, [r4, r7]
 80093b6:	7aa9      	ldrb	r1, [r5, #10]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	18c9      	adds	r1, r1, r3
 80093bc:	b289      	uxth	r1, r1
 80093be:	20e9      	movs	r0, #233	; 0xe9
 80093c0:	f001 fec8 	bl	800b154 <EE_WriteVariable>
								if(numOfParams == 19)
 80093c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c6:	2b13      	cmp	r3, #19
 80093c8:	d013      	beq.n	80093f2 <PxMessagingTask+0xd82>
								if(numOfParams == 21)
 80093ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093cc:	2b15      	cmp	r3, #21
 80093ce:	d107      	bne.n	80093e0 <PxMessagingTask+0xd70>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80093d0:	7b6b      	ldrb	r3, [r5, #13]
 80093d2:	7ba9      	ldrb	r1, [r5, #14]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	18c9      	adds	r1, r1, r3
 80093d8:	b289      	uxth	r1, r1
 80093da:	20eb      	movs	r0, #235	; 0xeb
 80093dc:	f001 feba 	bl	800b154 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	4bb0      	ldr	r3, [pc, #704]	; (80096a8 <PxMessagingTask+0x1038>)
 80093e6:	4ab1      	ldr	r2, [pc, #708]	; (80096ac <PxMessagingTask+0x103c>)
 80093e8:	60da      	str	r2, [r3, #12]
 80093ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	e7fd      	b.n	80093ee <PxMessagingTask+0xd7e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	7b29      	ldrb	r1, [r5, #12]
 80093f6:	5ce3      	ldrb	r3, [r4, r3]
 80093f8:	20ea      	movs	r0, #234	; 0xea
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	18c9      	adds	r1, r1, r3
 80093fe:	b289      	uxth	r1, r1
 8009400:	f001 fea8 	bl	800b154 <EE_WriteVariable>
 8009404:	e7ec      	b.n	80093e0 <PxMessagingTask+0xd70>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	49a9      	ldr	r1, [pc, #676]	; (80096b0 <PxMessagingTask+0x1040>)
 800940a:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	0a12      	lsrs	r2, r2, #8
 8009410:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	0c12      	lsrs	r2, r2, #16
 8009416:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 8009418:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	0e1b      	lsrs	r3, r3, #24
 800941e:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009420:	211f      	movs	r1, #31
 8009422:	e440      	b.n	8008ca6 <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009426:	f009 fe24 	bl	8013072 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800942a:	2116      	movs	r1, #22
 800942c:	0030      	movs	r0, r6
 800942e:	f7f6 fe8f 	bl	8000150 <__udivsi3>
 8009432:	4ba0      	ldr	r3, [pc, #640]	; (80096b4 <PxMessagingTask+0x1044>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009434:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009436:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009438:	499f      	ldr	r1, [pc, #636]	; (80096b8 <PxMessagingTask+0x1048>)
 800943a:	48a0      	ldr	r0, [pc, #640]	; (80096bc <PxMessagingTask+0x104c>)
 800943c:	f009 fe19 	bl	8013072 <memcpy>
								longMessageLastPtr =0;
 8009440:	4b9f      	ldr	r3, [pc, #636]	; (80096c0 <PxMessagingTask+0x1050>)
 8009442:	2600      	movs	r6, #0
 8009444:	801d      	strh	r5, [r3, #0]
 8009446:	f7ff f9cb 	bl	80087e0 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800944a:	7a28      	ldrb	r0, [r5, #8]
 800944c:	0032      	movs	r2, r6
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	0039      	movs	r1, r7
 8009452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009454:	f7fe fc28 	bl	8007ca8 <SetupDMAStreams>
 8009458:	464b      	mov	r3, r9
 800945a:	5d1f      	ldrb	r7, [r3, r4]
 800945c:	2300      	movs	r3, #0
 800945e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009460:	001e      	movs	r6, r3
 8009462:	f7ff f9bd 	bl	80087e0 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 8009466:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 8009468:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 800946a:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 800946c:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800946e:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 8009470:	f003 ff64 	bl	800d33c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009474:	2d06      	cmp	r5, #6
 8009476:	d1f7      	bne.n	8009468 <PxMessagingTask+0xdf8>
 8009478:	e7ee      	b.n	8009458 <PxMessagingTask+0xde8>
								temp =cMessage[port - 1][13 + shift];
 800947a:	9a05      	ldr	r2, [sp, #20]
 800947c:	1952      	adds	r2, r2, r5
 800947e:	7b51      	ldrb	r1, [r2, #13]
 8009480:	e4e7      	b.n	8008e52 <PxMessagingTask+0x7e2>
								temp =cMessage[port - 1][15 + shift];
 8009482:	9a05      	ldr	r2, [sp, #20]
 8009484:	1952      	adds	r2, r2, r5
 8009486:	7bd1      	ldrb	r1, [r2, #15]
 8009488:	e4e3      	b.n	8008e52 <PxMessagingTask+0x7e2>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	4988      	ldr	r1, [pc, #544]	; (80096b0 <PxMessagingTask+0x1040>)
 800948e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009490:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009492:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009494:	b21b      	sxth	r3, r3
 8009496:	121b      	asrs	r3, r3, #8
 8009498:	704b      	strb	r3, [r1, #1]
 800949a:	e7c1      	b.n	8009420 <PxMessagingTask+0xdb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800949c:	881a      	ldrh	r2, [r3, #0]
 800949e:	4984      	ldr	r1, [pc, #528]	; (80096b0 <PxMessagingTask+0x1040>)
 80094a0:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094a2:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80094a4:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094a6:	0a1b      	lsrs	r3, r3, #8
 80094a8:	704b      	strb	r3, [r1, #1]
 80094aa:	e7b9      	b.n	8009420 <PxMessagingTask+0xdb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	4980      	ldr	r1, [pc, #512]	; (80096b0 <PxMessagingTask+0x1040>)
 80094b0:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80094b2:	785a      	ldrb	r2, [r3, #1]
 80094b4:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80094b6:	789a      	ldrb	r2, [r3, #2]
 80094b8:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80094ba:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 80094bc:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80094be:	70cb      	strb	r3, [r1, #3]
 80094c0:	e7ae      	b.n	8009420 <PxMessagingTask+0xdb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d100      	bne.n	80094c8 <PxMessagingTask+0xe58>
 80094c6:	e0be      	b.n	8009646 <PxMessagingTask+0xfd6>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80094c8:	d801      	bhi.n	80094ce <PxMessagingTask+0xe5e>
 80094ca:	f7ff f986 	bl	80087da <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80094ce:	260f      	movs	r6, #15
 80094d0:	3b04      	subs	r3, #4
 80094d2:	4a7c      	ldr	r2, [pc, #496]	; (80096c4 <PxMessagingTask+0x1054>)
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	58d2      	ldr	r2, [r2, r3]
 80094d8:	4b75      	ldr	r3, [pc, #468]	; (80096b0 <PxMessagingTask+0x1040>)
 80094da:	4016      	ands	r6, r2
 80094dc:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80094de:	d100      	bne.n	80094e2 <PxMessagingTask+0xe72>
 80094e0:	e0a8      	b.n	8009634 <PxMessagingTask+0xfc4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094e2:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 80094e4:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094e6:	0c12      	lsrs	r2, r2, #16
 80094e8:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 80094ea:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094ec:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 80094ee:	2e07      	cmp	r6, #7
 80094f0:	d901      	bls.n	80094f6 <PxMessagingTask+0xe86>
 80094f2:	f7ff f972 	bl	80087da <PxMessagingTask+0x16a>
 80094f6:	4974      	ldr	r1, [pc, #464]	; (80096c8 <PxMessagingTask+0x1058>)
 80094f8:	00b6      	lsls	r6, r6, #2
 80094fa:	5989      	ldr	r1, [r1, r6]
 80094fc:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d031      	beq.n	8009566 <PxMessagingTask+0xef6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	195a      	adds	r2, r3, r5
 8009506:	78d3      	ldrb	r3, [r2, #3]
 8009508:	7891      	ldrb	r1, [r2, #2]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	185b      	adds	r3, r3, r1
 800950e:	7911      	ldrb	r1, [r2, #4]
 8009510:	0409      	lsls	r1, r1, #16
 8009512:	7952      	ldrb	r2, [r2, #5]
 8009514:	185b      	adds	r3, r3, r1
 8009516:	0612      	lsls	r2, r2, #24
 8009518:	189b      	adds	r3, r3, r2
 800951a:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800951c:	9905      	ldr	r1, [sp, #20]
 800951e:	9807      	ldr	r0, [sp, #28]
 8009520:	5d4b      	ldrb	r3, [r1, r5]
 8009522:	5c09      	ldrb	r1, [r1, r0]
 8009524:	200f      	movs	r0, #15
 8009526:	3b01      	subs	r3, #1
 8009528:	4a66      	ldr	r2, [pc, #408]	; (80096c4 <PxMessagingTask+0x1054>)
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	58d2      	ldr	r2, [r2, r3]
 800952e:	4010      	ands	r0, r2
 8009530:	4288      	cmp	r0, r1
 8009532:	d008      	beq.n	8009546 <PxMessagingTask+0xed6>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009534:	4865      	ldr	r0, [pc, #404]	; (80096cc <PxMessagingTask+0x105c>)
 8009536:	4684      	mov	ip, r0
 8009538:	4461      	add	r1, ip
 800953a:	400a      	ands	r2, r1
 800953c:	4961      	ldr	r1, [pc, #388]	; (80096c4 <PxMessagingTask+0x1054>)
 800953e:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009540:	2314      	movs	r3, #20
 8009542:	4a63      	ldr	r2, [pc, #396]	; (80096d0 <PxMessagingTask+0x1060>)
 8009544:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009546:	2240      	movs	r2, #64	; 0x40
 8009548:	4b62      	ldr	r3, [pc, #392]	; (80096d4 <PxMessagingTask+0x1064>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4393      	bics	r3, r2
 800954e:	2b20      	cmp	r3, #32
 8009550:	d001      	beq.n	8009556 <PxMessagingTask+0xee6>
 8009552:	f7ff f942 	bl	80087da <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 8009556:	4b5e      	ldr	r3, [pc, #376]	; (80096d0 <PxMessagingTask+0x1060>)
 8009558:	4a55      	ldr	r2, [pc, #340]	; (80096b0 <PxMessagingTask+0x1040>)
 800955a:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800955c:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800955e:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009560:	2201      	movs	r2, #1
 8009562:	f7ff fba0 	bl	8008ca6 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009566:	2004      	movs	r0, #4
 8009568:	f009 fb36 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 800956c:	2800      	cmp	r0, #0
 800956e:	d00f      	beq.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009570:	0403      	lsls	r3, r0, #16
 8009572:	4a54      	ldr	r2, [pc, #336]	; (80096c4 <PxMessagingTask+0x1054>)
 8009574:	3306      	adds	r3, #6
 8009576:	5193      	str	r3, [r2, r6]
 8009578:	e7c3      	b.n	8009502 <PxMessagingTask+0xe92>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00c      	beq.n	8009598 <PxMessagingTask+0xf28>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800957e:	9b05      	ldr	r3, [sp, #20]
 8009580:	195a      	adds	r2, r3, r5
 8009582:	78d3      	ldrb	r3, [r2, #3]
 8009584:	7911      	ldrb	r1, [r2, #4]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	0409      	lsls	r1, r1, #16
 800958a:	185b      	adds	r3, r3, r1
 800958c:	7891      	ldrb	r1, [r2, #2]
 800958e:	e7c0      	b.n	8009512 <PxMessagingTask+0xea2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009590:	2312      	movs	r3, #18
 8009592:	4a4f      	ldr	r2, [pc, #316]	; (80096d0 <PxMessagingTask+0x1060>)
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	e7c1      	b.n	800951c <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009598:	2004      	movs	r0, #4
 800959a:	f009 fb1d 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 800959e:	2800      	cmp	r0, #0
 80095a0:	d0f6      	beq.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095a2:	0403      	lsls	r3, r0, #16
 80095a4:	4a47      	ldr	r2, [pc, #284]	; (80096c4 <PxMessagingTask+0x1054>)
 80095a6:	3305      	adds	r3, #5
 80095a8:	5193      	str	r3, [r2, r6]
 80095aa:	e7e8      	b.n	800957e <PxMessagingTask+0xf0e>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4940      	ldr	r1, [pc, #256]	; (80096b0 <PxMessagingTask+0x1040>)
 80095b0:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	0a12      	lsrs	r2, r2, #8
 80095b6:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	0c12      	lsrs	r2, r2, #16
 80095bc:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80095be:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80095c0:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80095c2:	0e1b      	lsrs	r3, r3, #24
 80095c4:	710b      	strb	r3, [r1, #4]
 80095c6:	e72b      	b.n	8009420 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80095c8:	881a      	ldrh	r2, [r3, #0]
 80095ca:	4939      	ldr	r1, [pc, #228]	; (80096b0 <PxMessagingTask+0x1040>)
 80095cc:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80095ce:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80095d0:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80095d2:	b21b      	sxth	r3, r3
 80095d4:	121b      	asrs	r3, r3, #8
 80095d6:	708b      	strb	r3, [r1, #2]
 80095d8:	e722      	b.n	8009420 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80095da:	881a      	ldrh	r2, [r3, #0]
 80095dc:	4934      	ldr	r1, [pc, #208]	; (80096b0 <PxMessagingTask+0x1040>)
 80095de:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80095e0:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80095e2:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80095e4:	0a1b      	lsrs	r3, r3, #8
 80095e6:	708b      	strb	r3, [r1, #2]
 80095e8:	e71a      	b.n	8009420 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 80095ea:	4a31      	ldr	r2, [pc, #196]	; (80096b0 <PxMessagingTask+0x1040>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80095f0:	2202      	movs	r2, #2
 80095f2:	e715      	b.n	8009420 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	492e      	ldr	r1, [pc, #184]	; (80096b0 <PxMessagingTask+0x1040>)
 80095f8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	1212      	asrs	r2, r2, #8
 80095fe:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	1412      	asrs	r2, r2, #16
 8009604:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009606:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009608:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800960a:	161b      	asrs	r3, r3, #24
 800960c:	710b      	strb	r3, [r1, #4]
 800960e:	e707      	b.n	8009420 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	4927      	ldr	r1, [pc, #156]	; (80096b0 <PxMessagingTask+0x1040>)
 8009614:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009616:	4b30      	ldr	r3, [pc, #192]	; (80096d8 <PxMessagingTask+0x1068>)
 8009618:	18d3      	adds	r3, r2, r3
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800961e:	4b2f      	ldr	r3, [pc, #188]	; (80096dc <PxMessagingTask+0x106c>)
 8009620:	18d3      	adds	r3, r2, r3
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <PxMessagingTask+0x1070>)
 8009628:	469c      	mov	ip, r3
 800962a:	4462      	add	r2, ip
 800962c:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800962e:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009630:	710b      	strb	r3, [r1, #4]
 8009632:	e6f5      	b.n	8009420 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 8009634:	2201      	movs	r2, #1
 8009636:	211f      	movs	r1, #31
 8009638:	4650      	mov	r0, sl
 800963a:	f7fe fe85 	bl	8008348 <SendMessageToModule>
 800963e:	464b      	mov	r3, r9
 8009640:	5d1f      	ldrb	r7, [r3, r4]
 8009642:	f7ff f8cd 	bl	80087e0 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009646:	9b05      	ldr	r3, [sp, #20]
 8009648:	2600      	movs	r6, #0
 800964a:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800964c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800964e:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009650:	469c      	mov	ip, r3
 8009652:	1c68      	adds	r0, r5, #1
 8009654:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009656:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009658:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800965a:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800965c:	f7fa f988 	bl	8003970 <IsModuleParameter>
 8009660:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 8009662:	42b0      	cmp	r0, r6
 8009664:	d100      	bne.n	8009668 <PxMessagingTask+0xff8>
 8009666:	e0a4      	b.n	80097b2 <PxMessagingTask+0x1142>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009668:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800966a:	491e      	ldr	r1, [pc, #120]	; (80096e4 <PxMessagingTask+0x1074>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800966c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 800966e:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009670:	3b01      	subs	r3, #1
 8009672:	435a      	muls	r2, r3
 8009674:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <PxMessagingTask+0x1074>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009676:	490e      	ldr	r1, [pc, #56]	; (80096b0 <PxMessagingTask+0x1040>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009678:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800967a:	4462      	add	r2, ip
 800967c:	7912      	ldrb	r2, [r2, #4]
 800967e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009680:	3a01      	subs	r2, #1
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	2a07      	cmp	r2, #7
 8009686:	d900      	bls.n	800968a <PxMessagingTask+0x101a>
 8009688:	e4f1      	b.n	800906e <PxMessagingTask+0x9fe>
 800968a:	4917      	ldr	r1, [pc, #92]	; (80096e8 <PxMessagingTask+0x1078>)
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	588a      	ldr	r2, [r1, r2]
 8009690:	4697      	mov	pc, r2
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	20000dcc 	.word	0x20000dcc
 8009698:	20001db4 	.word	0x20001db4
 800969c:	08019770 	.word	0x08019770
 80096a0:	20000032 	.word	0x20000032
 80096a4:	08017d3c 	.word	0x08017d3c
 80096a8:	e000ed00 	.word	0xe000ed00
 80096ac:	05fa0004 	.word	0x05fa0004
 80096b0:	20000b44 	.word	0x20000b44
 80096b4:	20000008 	.word	0x20000008
 80096b8:	20001e78 	.word	0x20001e78
 80096bc:	20000edc 	.word	0x20000edc
 80096c0:	20000c52 	.word	0x20000c52
 80096c4:	200067e8 	.word	0x200067e8
 80096c8:	08017d60 	.word	0x08017d60
 80096cc:	0000fff0 	.word	0x0000fff0
 80096d0:	20000c44 	.word	0x20000c44
 80096d4:	200067e0 	.word	0x200067e0
 80096d8:	20000001 	.word	0x20000001
 80096dc:	20000002 	.word	0x20000002
 80096e0:	20000003 	.word	0x20000003
 80096e4:	20000098 	.word	0x20000098
 80096e8:	08017d80 	.word	0x08017d80
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d100      	bne.n	80096f2 <PxMessagingTask+0x1082>
 80096f0:	e0ce      	b.n	8009890 <PxMessagingTask+0x1220>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80096f2:	9b05      	ldr	r3, [sp, #20]
 80096f4:	1959      	adds	r1, r3, r5
 80096f6:	78ca      	ldrb	r2, [r1, #3]
 80096f8:	788b      	ldrb	r3, [r1, #2]
 80096fa:	0212      	lsls	r2, r2, #8
 80096fc:	189b      	adds	r3, r3, r2
 80096fe:	b21b      	sxth	r3, r3
 8009700:	8003      	strh	r3, [r0, #0]
 8009702:	e70b      	b.n	800951c <PxMessagingTask+0xeac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	49d7      	ldr	r1, [pc, #860]	; (8009a64 <PxMessagingTask+0x13f4>)
 8009708:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	1212      	asrs	r2, r2, #8
 800970e:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	1412      	asrs	r2, r2, #16
 8009714:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009716:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009718:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800971a:	161b      	asrs	r3, r3, #24
 800971c:	70cb      	strb	r3, [r1, #3]
 800971e:	e67f      	b.n	8009420 <PxMessagingTask+0xdb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009720:	2b00      	cmp	r3, #0
 8009722:	d100      	bne.n	8009726 <PxMessagingTask+0x10b6>
 8009724:	e0df      	b.n	80098e6 <PxMessagingTask+0x1276>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	195a      	adds	r2, r3, r5
 800972a:	78d3      	ldrb	r3, [r2, #3]
 800972c:	7911      	ldrb	r1, [r2, #4]
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	0409      	lsls	r1, r1, #16
 8009732:	185b      	adds	r3, r3, r1
 8009734:	7891      	ldrb	r1, [r2, #2]
 8009736:	7952      	ldrb	r2, [r2, #5]
 8009738:	185b      	adds	r3, r3, r1
 800973a:	0612      	lsls	r2, r2, #24
 800973c:	189b      	adds	r3, r3, r2
 800973e:	4642      	mov	r2, r8
 8009740:	4641      	mov	r1, r8
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	2200      	movs	r2, #0
 8009746:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	e6e7      	b.n	800951c <PxMessagingTask+0xeac>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800974c:	9b05      	ldr	r3, [sp, #20]
 800974e:	4642      	mov	r2, r8
 8009750:	469c      	mov	ip, r3
 8009752:	2301      	movs	r3, #1
 8009754:	4465      	add	r5, ip
 8009756:	56eb      	ldrsb	r3, [r5, r3]
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	17db      	asrs	r3, r3, #31
 800975c:	6053      	str	r3, [r2, #4]
										break;
 800975e:	f7ff f930 	bl	80089c2 <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00f      	beq.n	8009786 <PxMessagingTask+0x1116>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009766:	9b05      	ldr	r3, [sp, #20]
 8009768:	1959      	adds	r1, r3, r5
 800976a:	78ca      	ldrb	r2, [r1, #3]
 800976c:	788b      	ldrb	r3, [r1, #2]
 800976e:	0212      	lsls	r2, r2, #8
 8009770:	189b      	adds	r3, r3, r2
 8009772:	b29b      	uxth	r3, r3
 8009774:	8003      	strh	r3, [r0, #0]
 8009776:	e6d1      	b.n	800951c <PxMessagingTask+0xeac>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009778:	4aba      	ldr	r2, [pc, #744]	; (8009a64 <PxMessagingTask+0x13f4>)
 800977a:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 800977c:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 800977e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009780:	2202      	movs	r2, #2
 8009782:	f7ff fa90 	bl	8008ca6 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009786:	2002      	movs	r0, #2
 8009788:	f009 fa26 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 800978c:	2800      	cmp	r0, #0
 800978e:	d100      	bne.n	8009792 <PxMessagingTask+0x1122>
 8009790:	e6fe      	b.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009792:	0403      	lsls	r3, r0, #16
 8009794:	4ab4      	ldr	r2, [pc, #720]	; (8009a68 <PxMessagingTask+0x13f8>)
 8009796:	3303      	adds	r3, #3
 8009798:	5193      	str	r3, [r2, r6]
 800979a:	e7e4      	b.n	8009766 <PxMessagingTask+0x10f6>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	49b1      	ldr	r1, [pc, #708]	; (8009a64 <PxMessagingTask+0x13f4>)
 80097a0:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80097a2:	785a      	ldrb	r2, [r3, #1]
 80097a4:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80097a6:	789a      	ldrb	r2, [r3, #2]
 80097a8:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80097aa:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 80097ac:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80097ae:	710b      	strb	r3, [r1, #4]
 80097b0:	e636      	b.n	8009420 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 80097b2:	2201      	movs	r2, #1
 80097b4:	211f      	movs	r1, #31
 80097b6:	4650      	mov	r0, sl
 80097b8:	f7fe fdc6 	bl	8008348 <SendMessageToModule>
 80097bc:	464b      	mov	r3, r9
 80097be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097c0:	5d1f      	ldrb	r7, [r3, r4]
 80097c2:	f7ff f80d 	bl	80087e0 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <PxMessagingTask+0x1174>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	195b      	adds	r3, r3, r5
 80097ce:	789b      	ldrb	r3, [r3, #2]
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	7003      	strb	r3, [r0, #0]
 80097d4:	e6a2      	b.n	800951c <PxMessagingTask+0xeac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00f      	beq.n	80097fa <PxMessagingTask+0x118a>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80097da:	9b05      	ldr	r3, [sp, #20]
 80097dc:	195b      	adds	r3, r3, r5
 80097de:	789b      	ldrb	r3, [r3, #2]
 80097e0:	7003      	strb	r3, [r0, #0]
 80097e2:	e69b      	b.n	800951c <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80097e4:	2001      	movs	r0, #1
 80097e6:	f009 f9f7 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d100      	bne.n	80097f0 <PxMessagingTask+0x1180>
 80097ee:	e6cf      	b.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097f0:	0403      	lsls	r3, r0, #16
 80097f2:	4a9d      	ldr	r2, [pc, #628]	; (8009a68 <PxMessagingTask+0x13f8>)
 80097f4:	3302      	adds	r3, #2
 80097f6:	5193      	str	r3, [r2, r6]
 80097f8:	e7e7      	b.n	80097ca <PxMessagingTask+0x115a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 80097fa:	2001      	movs	r0, #1
 80097fc:	f009 f9ec 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 8009800:	2800      	cmp	r0, #0
 8009802:	d100      	bne.n	8009806 <PxMessagingTask+0x1196>
 8009804:	e6c4      	b.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009806:	0403      	lsls	r3, r0, #16
 8009808:	19df      	adds	r7, r3, r7
 800980a:	4b97      	ldr	r3, [pc, #604]	; (8009a68 <PxMessagingTask+0x13f8>)
 800980c:	519f      	str	r7, [r3, r6]
 800980e:	e7e4      	b.n	80097da <PxMessagingTask+0x116a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8009810:	2313      	movs	r3, #19
 8009812:	4a96      	ldr	r2, [pc, #600]	; (8009a6c <PxMessagingTask+0x13fc>)
 8009814:	7013      	strb	r3, [r2, #0]
 8009816:	e696      	b.n	8009546 <PxMessagingTask+0xed6>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009818:	9b05      	ldr	r3, [sp, #20]
 800981a:	195b      	adds	r3, r3, r5
 800981c:	789e      	ldrb	r6, [r3, #2]
 800981e:	78da      	ldrb	r2, [r3, #3]
 8009820:	0636      	lsls	r6, r6, #24
 8009822:	0412      	lsls	r2, r2, #16
 8009824:	18b6      	adds	r6, r6, r2
 8009826:	795a      	ldrb	r2, [r3, #5]
 8009828:	18b6      	adds	r6, r6, r2
 800982a:	791a      	ldrb	r2, [r3, #4]
 800982c:	0212      	lsls	r2, r2, #8
 800982e:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009830:	22e0      	movs	r2, #224	; 0xe0
 8009832:	0612      	lsls	r2, r2, #24
 8009834:	18b1      	adds	r1, r6, r2
 8009836:	4a8e      	ldr	r2, [pc, #568]	; (8009a70 <PxMessagingTask+0x1400>)
 8009838:	4291      	cmp	r1, r2
 800983a:	d900      	bls.n	800983e <PxMessagingTask+0x11ce>
 800983c:	e0ac      	b.n	8009998 <PxMessagingTask+0x1328>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	3b01      	subs	r3, #1
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b07      	cmp	r3, #7
 8009846:	d900      	bls.n	800984a <PxMessagingTask+0x11da>
 8009848:	e67d      	b.n	8009546 <PxMessagingTask+0xed6>
 800984a:	4a8a      	ldr	r2, [pc, #552]	; (8009a74 <PxMessagingTask+0x1404>)
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	58d3      	ldr	r3, [r2, r3]
 8009850:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	469c      	mov	ip, r3
 8009856:	4465      	add	r5, ip
 8009858:	78ab      	ldrb	r3, [r5, #2]
 800985a:	786a      	ldrb	r2, [r5, #1]
 800985c:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800985e:	189b      	adds	r3, r3, r2
 8009860:	4642      	mov	r2, r8
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	17db      	asrs	r3, r3, #31
 8009866:	6053      	str	r3, [r2, #4]
										break;
 8009868:	f7ff f8ab 	bl	80089c2 <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800986c:	9b05      	ldr	r3, [sp, #20]
 800986e:	469c      	mov	ip, r3
 8009870:	4465      	add	r5, ip
 8009872:	78ab      	ldrb	r3, [r5, #2]
 8009874:	786a      	ldrb	r2, [r5, #1]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	189b      	adds	r3, r3, r2
 800987a:	78ea      	ldrb	r2, [r5, #3]
 800987c:	0412      	lsls	r2, r2, #16
 800987e:	189b      	adds	r3, r3, r2
 8009880:	792a      	ldrb	r2, [r5, #4]
 8009882:	0612      	lsls	r2, r2, #24
 8009884:	e7eb      	b.n	800985e <PxMessagingTask+0x11ee>
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009886:	4a77      	ldr	r2, [pc, #476]	; (8009a64 <PxMessagingTask+0x13f4>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800988c:	2201      	movs	r2, #1
 800988e:	e5c7      	b.n	8009420 <PxMessagingTask+0xdb0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009890:	2002      	movs	r0, #2
 8009892:	f009 f9a1 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 8009896:	2800      	cmp	r0, #0
 8009898:	d100      	bne.n	800989c <PxMessagingTask+0x122c>
 800989a:	e679      	b.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800989c:	0403      	lsls	r3, r0, #16
 800989e:	4a72      	ldr	r2, [pc, #456]	; (8009a68 <PxMessagingTask+0x13f8>)
 80098a0:	3304      	adds	r3, #4
 80098a2:	5193      	str	r3, [r2, r6]
 80098a4:	e725      	b.n	80096f2 <PxMessagingTask+0x1082>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80098a6:	2310      	movs	r3, #16
 80098a8:	f7ff f850 	bl	800894c <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098ac:	9b05      	ldr	r3, [sp, #20]
 80098ae:	469c      	mov	ip, r3
 80098b0:	4465      	add	r5, ip
 80098b2:	78ab      	ldrb	r3, [r5, #2]
 80098b4:	78ea      	ldrb	r2, [r5, #3]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	0412      	lsls	r2, r2, #16
 80098ba:	189b      	adds	r3, r3, r2
 80098bc:	786a      	ldrb	r2, [r5, #1]
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	792a      	ldrb	r2, [r5, #4]
 80098c2:	0612      	lsls	r2, r2, #24
 80098c4:	189b      	adds	r3, r3, r2
 80098c6:	4642      	mov	r2, r8
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6053      	str	r3, [r2, #4]
										break;
 80098ce:	f7ff f878 	bl	80089c2 <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	4642      	mov	r2, r8
 80098d6:	469c      	mov	ip, r3
 80098d8:	4465      	add	r5, ip
 80098da:	786b      	ldrb	r3, [r5, #1]
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	6053      	str	r3, [r2, #4]
										break;
 80098e2:	f7ff f86e 	bl	80089c2 <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80098e6:	2004      	movs	r0, #4
 80098e8:	f009 f976 	bl	8012bd8 <malloc>
												if(temp32 != 0){
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d100      	bne.n	80098f2 <PxMessagingTask+0x1282>
 80098f0:	e64e      	b.n	8009590 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098f2:	0403      	lsls	r3, r0, #16
 80098f4:	4a5c      	ldr	r2, [pc, #368]	; (8009a68 <PxMessagingTask+0x13f8>)
 80098f6:	3307      	adds	r3, #7
 80098f8:	5193      	str	r3, [r2, r6]
 80098fa:	e714      	b.n	8009726 <PxMessagingTask+0x10b6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 80098fc:	9b05      	ldr	r3, [sp, #20]
 80098fe:	469c      	mov	ip, r3
 8009900:	4465      	add	r5, ip
 8009902:	79eb      	ldrb	r3, [r5, #7]
 8009904:	79aa      	ldrb	r2, [r5, #6]
 8009906:	021b      	lsls	r3, r3, #8
 8009908:	189b      	adds	r3, r3, r2
 800990a:	7a2a      	ldrb	r2, [r5, #8]
 800990c:	0412      	lsls	r2, r2, #16
 800990e:	189b      	adds	r3, r3, r2
 8009910:	7a6a      	ldrb	r2, [r5, #9]
 8009912:	0612      	lsls	r2, r2, #24
 8009914:	189b      	adds	r3, r3, r2
 8009916:	6033      	str	r3, [r6, #0]
											break;
 8009918:	e615      	b.n	8009546 <PxMessagingTask+0xed6>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800991a:	9b05      	ldr	r3, [sp, #20]
 800991c:	469c      	mov	ip, r3
 800991e:	4465      	add	r5, ip
 8009920:	79eb      	ldrb	r3, [r5, #7]
 8009922:	7a2a      	ldrb	r2, [r5, #8]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	0412      	lsls	r2, r2, #16
 8009928:	189b      	adds	r3, r3, r2
 800992a:	79aa      	ldrb	r2, [r5, #6]
 800992c:	e7ef      	b.n	800990e <PxMessagingTask+0x129e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800992e:	9b05      	ldr	r3, [sp, #20]
 8009930:	469c      	mov	ip, r3
 8009932:	4465      	add	r5, ip
 8009934:	79ea      	ldrb	r2, [r5, #7]
 8009936:	79ab      	ldrb	r3, [r5, #6]
 8009938:	0212      	lsls	r2, r2, #8
 800993a:	189b      	adds	r3, r3, r2
 800993c:	b21b      	sxth	r3, r3
 800993e:	8033      	strh	r3, [r6, #0]
											break;
 8009940:	e601      	b.n	8009546 <PxMessagingTask+0xed6>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	469c      	mov	ip, r3
 8009946:	4465      	add	r5, ip
 8009948:	79ea      	ldrb	r2, [r5, #7]
 800994a:	79ab      	ldrb	r3, [r5, #6]
 800994c:	0212      	lsls	r2, r2, #8
 800994e:	189b      	adds	r3, r3, r2
 8009950:	b29b      	uxth	r3, r3
 8009952:	8033      	strh	r3, [r6, #0]
											break;
 8009954:	e5f7      	b.n	8009546 <PxMessagingTask+0xed6>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	469c      	mov	ip, r3
 800995a:	2306      	movs	r3, #6
 800995c:	4465      	add	r5, ip
 800995e:	56eb      	ldrsb	r3, [r5, r3]
 8009960:	7033      	strb	r3, [r6, #0]
											break;
 8009962:	e5f0      	b.n	8009546 <PxMessagingTask+0xed6>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009964:	9b05      	ldr	r3, [sp, #20]
 8009966:	469c      	mov	ip, r3
 8009968:	4465      	add	r5, ip
 800996a:	79ab      	ldrb	r3, [r5, #6]
 800996c:	7033      	strb	r3, [r6, #0]
											break;
 800996e:	e5ea      	b.n	8009546 <PxMessagingTask+0xed6>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009970:	9b05      	ldr	r3, [sp, #20]
 8009972:	4641      	mov	r1, r8
 8009974:	469c      	mov	ip, r3
 8009976:	4465      	add	r5, ip
 8009978:	79eb      	ldrb	r3, [r5, #7]
 800997a:	7a2a      	ldrb	r2, [r5, #8]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	0412      	lsls	r2, r2, #16
 8009980:	189b      	adds	r3, r3, r2
 8009982:	79aa      	ldrb	r2, [r5, #6]
 8009984:	189b      	adds	r3, r3, r2
 8009986:	7a6a      	ldrb	r2, [r5, #9]
 8009988:	0612      	lsls	r2, r2, #24
 800998a:	189b      	adds	r3, r3, r2
 800998c:	4642      	mov	r2, r8
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	2200      	movs	r2, #0
 8009992:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009994:	6033      	str	r3, [r6, #0]
											break;
 8009996:	e5d6      	b.n	8009546 <PxMessagingTask+0xed6>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009998:	23f8      	movs	r3, #248	; 0xf8
 800999a:	4a37      	ldr	r2, [pc, #220]	; (8009a78 <PxMessagingTask+0x1408>)
 800999c:	061b      	lsls	r3, r3, #24
 800999e:	18f3      	adds	r3, r6, r3
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d903      	bls.n	80099ac <PxMessagingTask+0x133c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80099a4:	2215      	movs	r2, #21
 80099a6:	4b31      	ldr	r3, [pc, #196]	; (8009a6c <PxMessagingTask+0x13fc>)
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e5cc      	b.n	8009546 <PxMessagingTask+0xed6>
									HAL_FLASH_Unlock();
 80099ac:	f006 fe96 	bl	80106dc <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80099b0:	9b08      	ldr	r3, [sp, #32]
 80099b2:	2b22      	cmp	r3, #34	; 0x22
 80099b4:	d102      	bne.n	80099bc <PxMessagingTask+0x134c>
										EraseSector(temp32);
 80099b6:	0030      	movs	r0, r6
 80099b8:	f001 fe0a 	bl	800b5d0 <EraseSector>
									if(responseStatus == BOS_OK){
 80099bc:	4b2b      	ldr	r3, [pc, #172]	; (8009a6c <PxMessagingTask+0x13fc>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d110      	bne.n	80099e6 <PxMessagingTask+0x1376>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80099c4:	9b05      	ldr	r3, [sp, #20]
 80099c6:	195b      	adds	r3, r3, r5
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b07      	cmp	r3, #7
 80099d0:	d809      	bhi.n	80099e6 <PxMessagingTask+0x1376>
 80099d2:	4a2a      	ldr	r2, [pc, #168]	; (8009a7c <PxMessagingTask+0x140c>)
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	58d3      	ldr	r3, [r2, r3]
 80099d8:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80099da:	6833      	ldr	r3, [r6, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	d020      	beq.n	8009a22 <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80099e0:	2316      	movs	r3, #22
 80099e2:	4a22      	ldr	r2, [pc, #136]	; (8009a6c <PxMessagingTask+0x13fc>)
 80099e4:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 80099e6:	f006 fe8b 	bl	8010700 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 80099ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d100      	bne.n	80099f2 <PxMessagingTask+0x1382>
 80099f0:	e5a9      	b.n	8009546 <PxMessagingTask+0xed6>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80099f2:	2316      	movs	r3, #22
 80099f4:	4a1d      	ldr	r2, [pc, #116]	; (8009a6c <PxMessagingTask+0x13fc>)
 80099f6:	7013      	strb	r3, [r2, #0]
 80099f8:	e5a5      	b.n	8009546 <PxMessagingTask+0xed6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 80099fa:	8832      	ldrh	r2, [r6, #0]
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <PxMessagingTask+0x1410>)
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d1ee      	bne.n	80099e0 <PxMessagingTask+0x1370>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	469c      	mov	ip, r3
 8009a06:	4465      	add	r5, ip
 8009a08:	79ea      	ldrb	r2, [r5, #7]
 8009a0a:	79ab      	ldrb	r3, [r5, #6]
 8009a0c:	0212      	lsls	r2, r2, #8
 8009a0e:	18d2      	adds	r2, r2, r3
 8009a10:	17d3      	asrs	r3, r2, #31
 8009a12:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 8009a14:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a16:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009a18:	0031      	movs	r1, r6
 8009a1a:	f006 febf 	bl	801079c <HAL_FLASH_Program>
 8009a1e:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009a20:	e7e1      	b.n	80099e6 <PxMessagingTask+0x1376>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009a22:	9b05      	ldr	r3, [sp, #20]
 8009a24:	4641      	mov	r1, r8
 8009a26:	469c      	mov	ip, r3
 8009a28:	4465      	add	r5, ip
 8009a2a:	79ea      	ldrb	r2, [r5, #7]
 8009a2c:	7a2b      	ldrb	r3, [r5, #8]
 8009a2e:	0212      	lsls	r2, r2, #8
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	18d2      	adds	r2, r2, r3
 8009a34:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009a36:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009a38:	18d2      	adds	r2, r2, r3
 8009a3a:	7a6b      	ldrb	r3, [r5, #9]
 8009a3c:	061b      	lsls	r3, r3, #24
 8009a3e:	18d2      	adds	r2, r2, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009a44:	0031      	movs	r1, r6
 8009a46:	f006 fea9 	bl	801079c <HAL_FLASH_Program>
 8009a4a:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009a4c:	e7cb      	b.n	80099e6 <PxMessagingTask+0x1376>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009a4e:	8832      	ldrh	r2, [r6, #0]
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <PxMessagingTask+0x1410>)
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d1c4      	bne.n	80099e0 <PxMessagingTask+0x1370>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	469c      	mov	ip, r3
 8009a5a:	4465      	add	r5, ip
 8009a5c:	79aa      	ldrb	r2, [r5, #6]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e7d7      	b.n	8009a12 <PxMessagingTask+0x13a2>
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	20000b44 	.word	0x20000b44
 8009a68:	200067e8 	.word	0x200067e8
 8009a6c:	20000c44 	.word	0x20000c44
 8009a70:	00007fff 	.word	0x00007fff
 8009a74:	08017da0 	.word	0x08017da0
 8009a78:	0001ffff 	.word	0x0001ffff
 8009a7c:	08017dc0 	.word	0x08017dc0
 8009a80:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009a84:	6833      	ldr	r3, [r6, #0]
 8009a86:	3301      	adds	r3, #1
 8009a88:	d1aa      	bne.n	80099e0 <PxMessagingTask+0x1370>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	469c      	mov	ip, r3
 8009a90:	4465      	add	r5, ip
 8009a92:	79ea      	ldrb	r2, [r5, #7]
 8009a94:	7a2b      	ldrb	r3, [r5, #8]
 8009a96:	0212      	lsls	r2, r2, #8
 8009a98:	041b      	lsls	r3, r3, #16
 8009a9a:	18d2      	adds	r2, r2, r3
 8009a9c:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009a9e:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009aa0:	18d2      	adds	r2, r2, r3
 8009aa2:	7a6b      	ldrb	r3, [r5, #9]
 8009aa4:	061b      	lsls	r3, r3, #24
 8009aa6:	18d2      	adds	r2, r2, r3
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009aac:	0031      	movs	r1, r6
 8009aae:	f006 fe75 	bl	801079c <HAL_FLASH_Program>
 8009ab2:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009ab4:	e797      	b.n	80099e6 <PxMessagingTask+0x1376>
 8009ab6:	46c0      	nop			; (mov r8, r8)

08009ab8 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8009ab8:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 8009aba:	b530      	push	{r4, r5, lr}
 8009abc:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009abe:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 8009ac0:	0005      	movs	r5, r0
 8009ac2:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009ac4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 8009ac6:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009ac8:	f003 fe8c 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 8009acc:	4918      	ldr	r1, [pc, #96]	; (8009b30 <ledModeCommand+0x78>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009ace:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 8009ad0:	f7f6 fb18 	bl	8000104 <strcmp>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d005      	beq.n	8009ae4 <ledModeCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "ON"))
 8009ad8:	4916      	ldr	r1, [pc, #88]	; (8009b34 <ledModeCommand+0x7c>)
 8009ada:	0020      	movs	r0, r4
 8009adc:	f7f6 fb12 	bl	8000104 <strcmp>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d10a      	bne.n	8009afa <ledModeCommand+0x42>

		SwitchindMode = 1;
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <ledModeCommand+0x80>)
 8009ae8:	701a      	strb	r2, [r3, #0]
		SwitchindMode = 0;


	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 8009aea:	222e      	movs	r2, #46	; 0x2e
 8009aec:	4913      	ldr	r1, [pc, #76]	; (8009b3c <ledModeCommand+0x84>)
 8009aee:	0028      	movs	r0, r5
 8009af0:	f009 fabf 	bl	8013072 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8009af4:	2000      	movs	r0, #0
 8009af6:	b003      	add	sp, #12
 8009af8:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp((char*) pcParameterString1, "off")
 8009afa:	4911      	ldr	r1, [pc, #68]	; (8009b40 <ledModeCommand+0x88>)
 8009afc:	0020      	movs	r0, r4
 8009afe:	f7f6 fb01 	bl	8000104 <strcmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d108      	bne.n	8009b18 <ledModeCommand+0x60>
		SwitchindMode = 0;
 8009b06:	2200      	movs	r2, #0
 8009b08:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <ledModeCommand+0x80>)
 8009b0a:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 8009b0c:	222f      	movs	r2, #47	; 0x2f
 8009b0e:	490d      	ldr	r1, [pc, #52]	; (8009b44 <ledModeCommand+0x8c>)
 8009b10:	0028      	movs	r0, r5
 8009b12:	f009 faae 	bl	8013072 <memcpy>
 8009b16:	e7ed      	b.n	8009af4 <ledModeCommand+0x3c>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 8009b18:	490b      	ldr	r1, [pc, #44]	; (8009b48 <ledModeCommand+0x90>)
 8009b1a:	0020      	movs	r0, r4
 8009b1c:	f7f6 faf2 	bl	8000104 <strcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0f0      	beq.n	8009b06 <ledModeCommand+0x4e>
	if (SwitchindMode) {
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <ledModeCommand+0x80>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0ef      	beq.n	8009b0c <ledModeCommand+0x54>
 8009b2c:	e7dd      	b.n	8009aea <ledModeCommand+0x32>
 8009b2e:	46c0      	nop			; (mov r8, r8)
 8009b30:	08019f60 	.word	0x08019f60
 8009b34:	0801a5cc 	.word	0x0801a5cc
 8009b38:	20001fb4 	.word	0x20001fb4
 8009b3c:	0801a5d8 	.word	0x0801a5d8
 8009b40:	0801a5d0 	.word	0x0801a5d0
 8009b44:	0801a608 	.word	0x0801a608
 8009b48:	0801a5d4 	.word	0x0801a5d4

08009b4c <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009b4c:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 8009b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b50:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009b52:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009b54:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009b56:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009b58:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b5a:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009b5c:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009b5e:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009b60:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009b62:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b64:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009b66:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009b68:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009b6a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009b6c:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009b6e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009b70:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009b72:	f007 f8ab 	bl	8010ccc <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009b76:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009b78:	2101      	movs	r1, #1
 8009b7a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009b7c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b7e:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009b80:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b82:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009b84:	f007 fb44 	bl	8011210 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009b88:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009b8a:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009b8c:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009b8e:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009b90:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009b92:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009b94:	f007 fcc8 	bl	8011528 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009b98:	2180      	movs	r1, #128	; 0x80
 8009b9a:	4d17      	ldr	r5, [pc, #92]	; (8009bf8 <SystemClock_Config+0xac>)
 8009b9c:	0549      	lsls	r1, r1, #21
 8009b9e:	69ea      	ldr	r2, [r5, #28]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	61ea      	str	r2, [r5, #28]
 8009ba4:	69eb      	ldr	r3, [r5, #28]
 8009ba6:	400b      	ands	r3, r1
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009bac:	f007 f884 	bl	8010cb8 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009bb0:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009bb2:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009bb8:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009bba:	f007 fcb5 	bl	8011528 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009bbe:	f007 fc85 	bl	80114cc <HAL_RCC_GetHCLKFreq>
 8009bc2:	21fa      	movs	r1, #250	; 0xfa
 8009bc4:	0089      	lsls	r1, r1, #2
 8009bc6:	f7f6 fac3 	bl	8000150 <__udivsi3>
 8009bca:	f005 ff1f 	bl	800fa0c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009bce:	2004      	movs	r0, #4
 8009bd0:	f005 ff38 	bl	800fa44 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009bd4:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 8009bd6:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009bd8:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 8009bda:	4323      	orrs	r3, r4
 8009bdc:	61ab      	str	r3, [r5, #24]
 8009bde:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009be0:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 8009be2:	401c      	ands	r4, r3
 8009be4:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009be6:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 8009be8:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009bea:	f005 fecf 	bl	800f98c <HAL_NVIC_SetPriority>
}
 8009bee:	b01b      	add	sp, #108	; 0x6c
 8009bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	00040003 	.word	0x00040003
 8009bf8:	40021000 	.word	0x40021000

08009bfc <SaveToRO>:
uint8_t SaveToRO(void) {
 8009bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfe:	46de      	mov	lr, fp
 8009c00:	4657      	mov	r7, sl
 8009c02:	464e      	mov	r6, r9
 8009c04:	4645      	mov	r5, r8
 8009c06:	b5e0      	push	{r5, r6, r7, lr}
 8009c08:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 8009c0a:	2215      	movs	r2, #21
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4668      	mov	r0, sp
 8009c10:	f009 fa38 	bl	8013084 <memset>
	HAL_FLASH_Unlock();
 8009c14:	f006 fd62 	bl	80106dc <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8009c18:	486a      	ldr	r0, [pc, #424]	; (8009dc4 <SaveToRO+0x1c8>)
 8009c1a:	f006 fe8f 	bl	801093c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 8009c1e:	486a      	ldr	r0, [pc, #424]	; (8009dc8 <SaveToRO+0x1cc>)
 8009c20:	f006 fd78 	bl	8010714 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d16e      	bne.n	8009d06 <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009c28:	2202      	movs	r2, #2
 8009c2a:	4c68      	ldr	r4, [pc, #416]	; (8009dcc <SaveToRO+0x1d0>)
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	4393      	bics	r3, r2
 8009c30:	6123      	str	r3, [r4, #16]
	if (myID) {
 8009c32:	4b67      	ldr	r3, [pc, #412]	; (8009dd0 <SaveToRO+0x1d4>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d000      	beq.n	8009c3c <SaveToRO+0x40>
 8009c3a:	e06e      	b.n	8009d1a <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009c3c:	4b65      	ldr	r3, [pc, #404]	; (8009dd4 <SaveToRO+0x1d8>)
 8009c3e:	469a      	mov	sl, r3
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d100      	bne.n	8009c48 <SaveToRO+0x4c>
 8009c46:	e0b8      	b.n	8009dba <SaveToRO+0x1be>
 8009c48:	4b63      	ldr	r3, [pc, #396]	; (8009dd8 <SaveToRO+0x1dc>)
 8009c4a:	2500      	movs	r5, #0
 8009c4c:	4c63      	ldr	r4, [pc, #396]	; (8009ddc <SaveToRO+0x1e0>)
 8009c4e:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009c50:	4f5e      	ldr	r7, [pc, #376]	; (8009dcc <SaveToRO+0x1d0>)
 8009c52:	e006      	b.n	8009c62 <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009c54:	4653      	mov	r3, sl
 8009c56:	3501      	adds	r5, #1
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b2ed      	uxtb	r5, r5
 8009c5c:	42ab      	cmp	r3, r5
 8009c5e:	d800      	bhi.n	8009c62 <SaveToRO+0x66>
 8009c60:	e0ab      	b.n	8009dba <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 8009c62:	00ab      	lsls	r3, r5, #2
 8009c64:	1959      	adds	r1, r3, r5
 8009c66:	4698      	mov	r8, r3
 8009c68:	464b      	mov	r3, r9
 8009c6a:	0089      	lsls	r1, r1, #2
 8009c6c:	5c5b      	ldrb	r3, [r3, r1]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009c72:	466b      	mov	r3, sp
 8009c74:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009c76:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009c78:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009c7a:	4449      	add	r1, r9
 8009c7c:	2214      	movs	r2, #20
 8009c7e:	f009 f9f8 	bl	8013072 <memcpy>
 8009c82:	2314      	movs	r3, #20
 8009c84:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 8009c86:	466b      	mov	r3, sp
 8009c88:	44a3      	add	fp, r4
 8009c8a:	1b1e      	subs	r6, r3, r4
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	46ab      	mov	fp, r5
 8009c90:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009c92:	5b32      	ldrh	r2, [r6, r4]
 8009c94:	2300      	movs	r3, #0
 8009c96:	0021      	movs	r1, r4
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f006 fd7f 	bl	801079c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009c9e:	484a      	ldr	r0, [pc, #296]	; (8009dc8 <SaveToRO+0x1cc>)
 8009ca0:	f006 fd38 	bl	8010714 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d12e      	bne.n	8009d06 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ca8:	2201      	movs	r2, #1
 8009caa:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009cac:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009cae:	4393      	bics	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009cb2:	42ac      	cmp	r4, r5
 8009cb4:	d1ed      	bne.n	8009c92 <SaveToRO+0x96>
 8009cb6:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009cb8:	4643      	mov	r3, r8
 8009cba:	195b      	adds	r3, r3, r5
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	444b      	add	r3, r9
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	4698      	mov	r8, r3
 8009cc4:	0025      	movs	r5, r4
 8009cc6:	e012      	b.n	8009cee <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009cc8:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009cca:	5ae2      	ldrh	r2, [r4, r3]
 8009ccc:	0029      	movs	r1, r5
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f006 fd63 	bl	801079c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009cd6:	483c      	ldr	r0, [pc, #240]	; (8009dc8 <SaveToRO+0x1cc>)
 8009cd8:	f006 fd1c 	bl	8010714 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d112      	bne.n	8009d06 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009ce4:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ce6:	4393      	bics	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009cea:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009cec:	b2f6      	uxtb	r6, r6
 8009cee:	4643      	mov	r3, r8
 8009cf0:	68dc      	ldr	r4, [r3, #12]
 8009cf2:	0020      	movs	r0, r4
 8009cf4:	f7f6 fa10 	bl	8000118 <strlen>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	0840      	lsrs	r0, r0, #1
 8009cfc:	4286      	cmp	r6, r0
 8009cfe:	d3e3      	bcc.n	8009cc8 <SaveToRO+0xcc>
 8009d00:	002c      	movs	r4, r5
 8009d02:	465d      	mov	r5, fp
 8009d04:	e7a6      	b.n	8009c54 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009d06:	4b36      	ldr	r3, [pc, #216]	; (8009de0 <SaveToRO+0x1e4>)
 8009d08:	69d8      	ldr	r0, [r3, #28]
 8009d0a:	b2c0      	uxtb	r0, r0
}
 8009d0c:	b007      	add	sp, #28
 8009d0e:	bc3c      	pop	{r2, r3, r4, r5}
 8009d10:	4690      	mov	r8, r2
 8009d12:	4699      	mov	r9, r3
 8009d14:	46a2      	mov	sl, r4
 8009d16:	46ab      	mov	fp, r5
 8009d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009d1a:	4a32      	ldr	r2, [pc, #200]	; (8009de4 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d1c:	4929      	ldr	r1, [pc, #164]	; (8009dc4 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 8009d1e:	4693      	mov	fp, r2
 8009d20:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d22:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 8009d24:	0212      	lsls	r2, r2, #8
 8009d26:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d28:	b292      	uxth	r2, r2
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f006 fd36 	bl	801079c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009d30:	4825      	ldr	r0, [pc, #148]	; (8009dc8 <SaveToRO+0x1cc>)
 8009d32:	f006 fcef 	bl	8010714 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1e5      	bne.n	8009d06 <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	4393      	bics	r3, r2
 8009d40:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009d42:	465b      	mov	r3, fp
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d100      	bne.n	8009d4c <SaveToRO+0x150>
 8009d4a:	e777      	b.n	8009c3c <SaveToRO+0x40>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	469a      	mov	sl, r3
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009d52:	2602      	movs	r6, #2
 8009d54:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d56:	46a0      	mov	r8, r4
 8009d58:	4653      	mov	r3, sl
 8009d5a:	1e5d      	subs	r5, r3, #1
 8009d5c:	2316      	movs	r3, #22
 8009d5e:	464f      	mov	r7, r9
 8009d60:	435d      	muls	r5, r3
 8009d62:	464b      	mov	r3, r9
 8009d64:	3716      	adds	r7, #22
 8009d66:	195c      	adds	r4, r3, r5
 8009d68:	197f      	adds	r7, r7, r5
 8009d6a:	e002      	b.n	8009d72 <SaveToRO+0x176>
 8009d6c:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009d6e:	42a7      	cmp	r7, r4
 8009d70:	d01a      	beq.n	8009da8 <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 8009d72:	464b      	mov	r3, r9
 8009d74:	5b5b      	ldrh	r3, [r3, r5]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f8      	beq.n	8009d6c <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009d7a:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <SaveToRO+0x1c8>)
 8009d7c:	8822      	ldrh	r2, [r4, #0]
 8009d7e:	18f1      	adds	r1, r6, r3
 8009d80:	2001      	movs	r0, #1
 8009d82:	2300      	movs	r3, #0
 8009d84:	f006 fd0a 	bl	801079c <HAL_FLASH_Program>
					add += 2;
 8009d88:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 8009d8a:	480f      	ldr	r0, [pc, #60]	; (8009dc8 <SaveToRO+0x1cc>)
					add += 2;
 8009d8c:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 8009d8e:	f006 fcc1 	bl	8010714 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1b7      	bne.n	8009d06 <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d96:	4643      	mov	r3, r8
 8009d98:	2201      	movs	r2, #1
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	3402      	adds	r4, #2
 8009d9e:	4393      	bics	r3, r2
 8009da0:	4642      	mov	r2, r8
 8009da2:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009da4:	42a7      	cmp	r7, r4
 8009da6:	d1e4      	bne.n	8009d72 <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 8009da8:	4653      	mov	r3, sl
 8009daa:	3301      	adds	r3, #1
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	469a      	mov	sl, r3
 8009db0:	465b      	mov	r3, fp
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	4553      	cmp	r3, sl
 8009db6:	d2cf      	bcs.n	8009d58 <SaveToRO+0x15c>
 8009db8:	e740      	b.n	8009c3c <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009dba:	f006 fca1 	bl	8010700 <HAL_FLASH_Lock>
	return result;
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e7a4      	b.n	8009d0c <SaveToRO+0x110>
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	0801d800 	.word	0x0801d800
 8009dc8:	0000c350 	.word	0x0000c350
 8009dcc:	40022000 	.word	0x40022000
 8009dd0:	20000aa0 	.word	0x20000aa0
 8009dd4:	200016dc 	.word	0x200016dc
 8009dd8:	2000687c 	.word	0x2000687c
 8009ddc:	0801dc00 	.word	0x0801dc00
 8009de0:	20006d78 	.word	0x20006d78
 8009de4:	20000008 	.word	0x20000008
 8009de8:	20000edc 	.word	0x20000edc

08009dec <ClearROtopology>:
	memset(array, 0, sizeof(array));
 8009dec:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 8009dee:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009df0:	0092      	lsls	r2, r2, #2
 8009df2:	2100      	movs	r1, #0
 8009df4:	4805      	ldr	r0, [pc, #20]	; (8009e0c <ClearROtopology+0x20>)
 8009df6:	f009 f945 	bl	8013084 <memset>
	N = 1;
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <ClearROtopology+0x24>)
 8009dfe:	701a      	strb	r2, [r3, #0]
	myID = 0;
 8009e00:	2200      	movs	r2, #0
 8009e02:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <ClearROtopology+0x28>)
 8009e04:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009e06:	f7ff fef9 	bl	8009bfc <SaveToRO>
}
 8009e0a:	bd10      	pop	{r4, pc}
 8009e0c:	20000edc 	.word	0x20000edc
 8009e10:	20000008 	.word	0x20000008
 8009e14:	20000aa0 	.word	0x20000aa0

08009e18 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009e18:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009e1a:	f003 faa1 	bl	800d360 <GetUart>
	huart->Init.BaudRate =57600;
 8009e1e:	23e1      	movs	r3, #225	; 0xe1
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009e24:	2380      	movs	r3, #128	; 0x80
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009e2a:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009e2c:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009e2e:	015b      	lsls	r3, r3, #5
 8009e30:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009e32:	f008 fd03 	bl	801283c <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009e36:	2120      	movs	r1, #32
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	6013      	str	r3, [r2, #0]
}
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	46c0      	nop			; (mov r8, r8)

08009e44 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e46:	46ce      	mov	lr, r9
 8009e48:	4647      	mov	r7, r8
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009e4e:	4c2a      	ldr	r4, [pc, #168]	; (8009ef8 <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009e50:	b085      	sub	sp, #20
 8009e52:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009e54:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009e56:	000f      	movs	r7, r1
 8009e58:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009e5a:	f7f9 ff65 	bl	8003d28 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009e5e:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009e60:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d11a      	bne.n	8009e9c <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009e66:	7823      	ldrb	r3, [r4, #0]
 8009e68:	454b      	cmp	r3, r9
 8009e6a:	d03b      	beq.n	8009ee4 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009e6c:	0028      	movs	r0, r5
 8009e6e:	f7ff ffd3 	bl	8009e18 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009e72:	0030      	movs	r0, r6
 8009e74:	f7ff ffd0 	bl	8009e18 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009e78:	2300      	movs	r3, #0
 8009e7a:	7821      	ldrb	r1, [r4, #0]
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	3303      	adds	r3, #3
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	0032      	movs	r2, r6
 8009e8a:	000b      	movs	r3, r1
 8009e8c:	0028      	movs	r0, r5
 8009e8e:	f7fe fa7f 	bl	8008390 <StartScastDMAStream>
}
 8009e92:	b005      	add	sp, #20
 8009e94:	bc0c      	pop	{r2, r3}
 8009e96:	4690      	mov	r8, r2
 8009e98:	4699      	mov	r9, r3
 8009e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009e9c:	7823      	ldrb	r3, [r4, #0]
 8009e9e:	42bb      	cmp	r3, r7
 8009ea0:	d01c      	beq.n	8009edc <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009ea2:	454b      	cmp	r3, r9
 8009ea4:	d1e2      	bne.n	8009e6c <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009ea6:	f003 fc99 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009eaa:	4b14      	ldr	r3, [pc, #80]	; (8009efc <remoteBootloaderUpdate+0xb8>)
 8009eac:	003a      	movs	r2, r7
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009eb2:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009eb4:	f009 fae0 	bl	8013478 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009eb8:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <remoteBootloaderUpdate+0xbc>)
 8009eba:	4648      	mov	r0, r9
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	f009 fafb 	bl	80134b8 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009ec2:	4648      	mov	r0, r9
 8009ec4:	f7f6 f928 	bl	8000118 <strlen>
 8009ec8:	2332      	movs	r3, #50	; 0x32
 8009eca:	b282      	uxth	r2, r0
 8009ecc:	4649      	mov	r1, r9
 8009ece:	0028      	movs	r0, r5
 8009ed0:	f003 fa14 	bl	800d2fc <writePxITMutex>
		Delay_ms(100);
 8009ed4:	2064      	movs	r0, #100	; 0x64
 8009ed6:	f005 fa21 	bl	800f31c <HAL_Delay>
 8009eda:	e7c7      	b.n	8009e6c <remoteBootloaderUpdate+0x28>
 8009edc:	4646      	mov	r6, r8
	if(src == myID){
 8009ede:	454f      	cmp	r7, r9
 8009ee0:	d1c4      	bne.n	8009e6c <remoteBootloaderUpdate+0x28>
 8009ee2:	e7e0      	b.n	8009ea6 <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009ee4:	f003 fc7a 	bl	800d7dc <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009ee8:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <remoteBootloaderUpdate+0xc0>)
 8009eea:	003a      	movs	r2, r7
 8009eec:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009eee:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009ef0:	f009 fac2 	bl	8013478 <sprintf>
 8009ef4:	e7e0      	b.n	8009eb8 <remoteBootloaderUpdate+0x74>
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	20000aa0 	.word	0x20000aa0
 8009efc:	20000058 	.word	0x20000058
 8009f00:	20000054 	.word	0x20000054
 8009f04:	2000005c 	.word	0x2000005c

08009f08 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 8009f08:	b500      	push	{lr}
 8009f0a:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 8009f0c:	f003 f85a 	bl	800cfc4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8009f10:	f003 f870 	bl	800cff4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8009f14:	f003 f886 	bl	800d024 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 8009f18:	f003 f89c 	bl	800d054 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 8009f1c:	f003 f8b2 	bl	800d084 <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 8009f20:	21fa      	movs	r1, #250	; 0xfa
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <Module_Peripheral_Init+0x38>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	0089      	lsls	r1, r1, #2
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4805      	ldr	r0, [pc, #20]	; (8009f44 <Module_Peripheral_Init+0x3c>)
 8009f2e:	f004 fef5 	bl	800ed1c <xTimerCreate>
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <Module_Peripheral_Init+0x40>)
 8009f34:	6058      	str	r0, [r3, #4]
	Switch_Init();
 8009f36:	f001 fba7 	bl	800b688 <Switch_Init>
}
 8009f3a:	b003      	add	sp, #12
 8009f3c:	bd00      	pop	{pc}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	0800a331 	.word	0x0800a331
 8009f44:	0801a638 	.word	0x0801a638
 8009f48:	20001fb4 	.word	0x20001fb4

08009f4c <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 8009f4c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 8009f4e:	4c0a      	ldr	r4, [pc, #40]	; (8009f78 <RegisterModuleCLICommands+0x2c>)
 8009f50:	0020      	movs	r0, r4
 8009f52:	f003 fbb3 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 8009f56:	0020      	movs	r0, r4
 8009f58:	3010      	adds	r0, #16
 8009f5a:	f003 fbaf 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 8009f5e:	0020      	movs	r0, r4
 8009f60:	3020      	adds	r0, #32
 8009f62:	f003 fbab 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 8009f66:	0020      	movs	r0, r4
 8009f68:	3030      	adds	r0, #48	; 0x30
 8009f6a:	f003 fba7 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pwmCommandDefinition);
 8009f6e:	0020      	movs	r0, r4
 8009f70:	3040      	adds	r0, #64	; 0x40
 8009f72:	f003 fba3 	bl	800d6bc <FreeRTOS_CLIRegisterCommand>
}
 8009f76:	bd10      	pop	{r4, pc}
 8009f78:	08017de0 	.word	0x08017de0

08009f7c <GetPort>:
	if (huart->Instance == USART5)
 8009f7c:	6800      	ldr	r0, [r0, #0]
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <GetPort+0x3c>)
 8009f80:	4298      	cmp	r0, r3
 8009f82:	d011      	beq.n	8009fa8 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 8009f84:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <GetPort+0x40>)
 8009f86:	4298      	cmp	r0, r3
 8009f88:	d012      	beq.n	8009fb0 <GetPort+0x34>
	else if (huart->Instance == USART6)
 8009f8a:	4b0d      	ldr	r3, [pc, #52]	; (8009fc0 <GetPort+0x44>)
 8009f8c:	4298      	cmp	r0, r3
 8009f8e:	d011      	beq.n	8009fb4 <GetPort+0x38>
	else if (huart->Instance == USART3)
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <GetPort+0x48>)
 8009f92:	4298      	cmp	r0, r3
 8009f94:	d00a      	beq.n	8009fac <GetPort+0x30>
	return 0;
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <GetPort+0x4c>)
 8009f98:	469c      	mov	ip, r3
 8009f9a:	4460      	add	r0, ip
 8009f9c:	4243      	negs	r3, r0
 8009f9e:	4158      	adcs	r0, r3
 8009fa0:	2305      	movs	r3, #5
 8009fa2:	4240      	negs	r0, r0
 8009fa4:	4018      	ands	r0, r3
}
 8009fa6:	4770      	bx	lr
		return P1;
 8009fa8:	2001      	movs	r0, #1
 8009faa:	e7fc      	b.n	8009fa6 <GetPort+0x2a>
		return P4;
 8009fac:	2004      	movs	r0, #4
 8009fae:	e7fa      	b.n	8009fa6 <GetPort+0x2a>
		return P2;
 8009fb0:	2002      	movs	r0, #2
 8009fb2:	e7f8      	b.n	8009fa6 <GetPort+0x2a>
		return P3;
 8009fb4:	2003      	movs	r0, #3
 8009fb6:	e7f6      	b.n	8009fa6 <GetPort+0x2a>
 8009fb8:	40005000 	.word	0x40005000
 8009fbc:	40004400 	.word	0x40004400
 8009fc0:	40011400 	.word	0x40011400
 8009fc4:	40004800 	.word	0x40004800
 8009fc8:	bffec800 	.word	0xbffec800

08009fcc <TIM3_Init>:
	__TIM3_CLK_ENABLE()
 8009fcc:	2302      	movs	r3, #2
void TIM3_Init(void) {
 8009fce:	b530      	push	{r4, r5, lr}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd0:	2500      	movs	r5, #0
	__TIM3_CLK_ENABLE()
 8009fd2:	4a24      	ldr	r2, [pc, #144]	; (800a064 <TIM3_Init+0x98>)
void TIM3_Init(void) {
 8009fd4:	b095      	sub	sp, #84	; 0x54
	__TIM3_CLK_ENABLE()
 8009fd6:	69d1      	ldr	r1, [r2, #28]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 8009fd8:	4823      	ldr	r0, [pc, #140]	; (800a068 <TIM3_Init+0x9c>)
	__TIM3_CLK_ENABLE()
 8009fda:	4319      	orrs	r1, r3
 8009fdc:	61d1      	str	r1, [r2, #28]
 8009fde:	69d2      	ldr	r2, [r2, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe0:	9309      	str	r3, [sp, #36]	; 0x24
	__TIM3_CLK_ENABLE()
 8009fe2:	401a      	ands	r2, r3
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8009fe4:	3301      	adds	r3, #1
	__TIM3_CLK_ENABLE()
 8009fe6:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8009fe8:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 8009fea:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Pin = _Switch_PIN;
 8009fec:	3b02      	subs	r3, #2
 8009fee:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8009ff0:	930c      	str	r3, [sp, #48]	; 0x30
	__TIM3_CLK_ENABLE()
 8009ff2:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff4:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 8009ff6:	f006 fcb3 	bl	8010960 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	2010      	movs	r0, #16
 800a000:	f005 fcc4 	bl	800f98c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a004:	2010      	movs	r0, #16
 800a006:	f005 fced 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
	htim3.Instance = TIM3;
 800a00a:	4c18      	ldr	r4, [pc, #96]	; (800a06c <TIM3_Init+0xa0>)
 800a00c:	4b18      	ldr	r3, [pc, #96]	; (800a070 <TIM3_Init+0xa4>)
 800a00e:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a010:	f007 fa16 	bl	8011440 <HAL_RCC_GetSysClockFreq>
 800a014:	4917      	ldr	r1, [pc, #92]	; (800a074 <TIM3_Init+0xa8>)
 800a016:	f7f6 f89b 	bl	8000150 <__udivsi3>
			/ PWM_TIMER_CLOCK) - 1;
 800a01a:	3801      	subs	r0, #1
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a01c:	6060      	str	r0, [r4, #4]
	HAL_TIM_Base_Init(&htim3);
 800a01e:	0020      	movs	r0, r4
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a020:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = 0;
 800a022:	60e5      	str	r5, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a024:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim3);
 800a026:	f007 ffa3 	bl	8011f70 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a02a:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a02c:	a904      	add	r1, sp, #16
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a02e:	015b      	lsls	r3, r3, #5
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a030:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a032:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a034:	f007 fe82 	bl	8011d3c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800a038:	0020      	movs	r0, r4
 800a03a:	f007 ffb3 	bl	8011fa4 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a03e:	a902      	add	r1, sp, #8
 800a040:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a042:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a044:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a046:	f008 f86f 	bl	8012128 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a04a:	2360      	movs	r3, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a04c:	2208      	movs	r2, #8
 800a04e:	a90d      	add	r1, sp, #52	; 0x34
 800a050:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a052:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 800a054:	950e      	str	r5, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a056:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a058:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a05a:	f007 fffd 	bl	8012058 <HAL_TIM_PWM_ConfigChannel>
}
 800a05e:	b015      	add	sp, #84	; 0x54
 800a060:	bd30      	pop	{r4, r5, pc}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	40021000 	.word	0x40021000
 800a068:	48000400 	.word	0x48000400
 800a06c:	200069f4 	.word	0x200069f4
 800a070:	40000400 	.word	0x40000400
 800a074:	00f42400 	.word	0x00f42400

0800a078 <TIM3_DeInit>:
void TIM3_DeInit(void) {
 800a078:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800a07a:	2010      	movs	r0, #16
 800a07c:	f005 fcbc 	bl	800f9f8 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800a080:	4c06      	ldr	r4, [pc, #24]	; (800a09c <TIM3_DeInit+0x24>)
 800a082:	0020      	movs	r0, r4
 800a084:	f007 fd9c 	bl	8011bc0 <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800a088:	0020      	movs	r0, r4
 800a08a:	f007 fdf1 	bl	8011c70 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800a08e:	2102      	movs	r1, #2
 800a090:	4a03      	ldr	r2, [pc, #12]	; (800a0a0 <TIM3_DeInit+0x28>)
 800a092:	69d3      	ldr	r3, [r2, #28]
 800a094:	438b      	bics	r3, r1
 800a096:	61d3      	str	r3, [r2, #28]
}
 800a098:	bd10      	pop	{r4, pc}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	200069f4 	.word	0x200069f4
 800a0a0:	40021000 	.word	0x40021000

0800a0a4 <Set_Switch_PWM>:
Module_Status Set_Switch_PWM(uint32_t freq, float dutycycle) {
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800a0a8:	0001      	movs	r1, r0
 800a0aa:	4813      	ldr	r0, [pc, #76]	; (800a0f8 <Set_Switch_PWM+0x54>)
 800a0ac:	f7f6 f850 	bl	8000150 <__udivsi3>
	if (Switch_state != STATE_PWM)
 800a0b0:	4b12      	ldr	r3, [pc, #72]	; (800a0fc <Set_Switch_PWM+0x58>)
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800a0b2:	0006      	movs	r6, r0
	if (Switch_state != STATE_PWM)
 800a0b4:	7a1b      	ldrb	r3, [r3, #8]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d001      	beq.n	800a0be <Set_Switch_PWM+0x1a>
		TIM3_Init();
 800a0ba:	f7ff ff87 	bl	8009fcc <TIM3_Init>
	htim3.Instance->ARR = ARR - 1;
 800a0be:	4c10      	ldr	r4, [pc, #64]	; (800a100 <Set_Switch_PWM+0x5c>)
 800a0c0:	1e73      	subs	r3, r6, #1
 800a0c2:	6825      	ldr	r5, [r4, #0]
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a0c4:	490f      	ldr	r1, [pc, #60]	; (800a104 <Set_Switch_PWM+0x60>)
	htim3.Instance->ARR = ARR - 1;
 800a0c6:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a0c8:	1c38      	adds	r0, r7, #0
 800a0ca:	f7f6 fb71 	bl	80007b0 <__aeabi_fdiv>
 800a0ce:	1c07      	adds	r7, r0, #0
 800a0d0:	0030      	movs	r0, r6
 800a0d2:	f7f7 f85b 	bl	800118c <__aeabi_ui2f>
 800a0d6:	1c01      	adds	r1, r0, #0
 800a0d8:	1c38      	adds	r0, r7, #0
 800a0da:	f7f6 fd41 	bl	8000b60 <__aeabi_fmul>
 800a0de:	f7f6 fa6f 	bl	80005c0 <__aeabi_f2uiz>
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800a0e2:	2108      	movs	r1, #8
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a0e4:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800a0e6:	0020      	movs	r0, r4
 800a0e8:	f007 fde2 	bl	8011cb0 <HAL_TIM_PWM_Start>
 800a0ec:	1e43      	subs	r3, r0, #1
 800a0ee:	4198      	sbcs	r0, r3
 800a0f0:	4240      	negs	r0, r0
 800a0f2:	b2c0      	uxtb	r0, r0
}
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	00f42400 	.word	0x00f42400
 800a0fc:	20001fb4 	.word	0x20001fb4
 800a100:	200069f4 	.word	0x200069f4
 800a104:	42c80000 	.word	0x42c80000

0800a108 <Output_PWM.part.2>:
Module_Status Output_PWM(float dutyCycle) {
 800a108:	b570      	push	{r4, r5, r6, lr}
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800a10a:	1c01      	adds	r1, r0, #0
Module_Status Output_PWM(float dutyCycle) {
 800a10c:	1c05      	adds	r5, r0, #0
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800a10e:	20f5      	movs	r0, #245	; 0xf5
 800a110:	0080      	lsls	r0, r0, #2
 800a112:	f7ff ffc7 	bl	800a0a4 <Set_Switch_PWM>
 800a116:	1e04      	subs	r4, r0, #0
	if (result == H0FR6_OK) {
 800a118:	d109      	bne.n	800a12e <Output_PWM.part.2+0x26>
		Switch_state = STATE_PWM;
 800a11a:	2202      	movs	r2, #2
		Switch_OldDC = dutyCycle;
 800a11c:	4b08      	ldr	r3, [pc, #32]	; (800a140 <Output_PWM.part.2+0x38>)
		Switch_Oldstate = Switch_state;
 800a11e:	4909      	ldr	r1, [pc, #36]	; (800a144 <Output_PWM.part.2+0x3c>)
		Switch_OldDC = dutyCycle;
 800a120:	601d      	str	r5, [r3, #0]
		Switch_state = STATE_PWM;
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <Output_PWM.part.2+0x40>)
		Switch_Oldstate = Switch_state;
 800a124:	700a      	strb	r2, [r1, #0]
		Switch_state = STATE_PWM;
 800a126:	721a      	strb	r2, [r3, #8]
		if (SwitchindMode)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <Output_PWM.part.2+0x2a>
}
 800a12e:	0020      	movs	r0, r4
 800a130:	bd70      	pop	{r4, r5, r6, pc}
			IND_ON();
 800a132:	2180      	movs	r1, #128	; 0x80
 800a134:	3a01      	subs	r2, #1
 800a136:	01c9      	lsls	r1, r1, #7
 800a138:	4804      	ldr	r0, [pc, #16]	; (800a14c <Output_PWM.part.2+0x44>)
 800a13a:	f006 fdb1 	bl	8010ca0 <HAL_GPIO_WritePin>
 800a13e:	e7f6      	b.n	800a12e <Output_PWM.part.2+0x26>
 800a140:	200069f0 	.word	0x200069f0
 800a144:	20000094 	.word	0x20000094
 800a148:	20001fb4 	.word	0x20001fb4
 800a14c:	48000800 	.word	0x48000800

0800a150 <pwmCommand>:
portBASE_TYPE pwmCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	Module_Status result = H0FR6_OK;

	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800a150:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a152:	b530      	push	{r4, r5, lr}
 800a154:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a156:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a158:	0005      	movs	r5, r0
 800a15a:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a15c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a15e:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a160:	f003 fb40 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);

	dutycycle = (float) atof((char*) pcParameterString1);
 800a164:	f008 fcba 	bl	8012adc <atof>
 800a168:	f7f8 fe40 	bl	8002dec <__aeabi_d2f>

	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800a16c:	2100      	movs	r1, #0
	dutycycle = (float) atof((char*) pcParameterString1);
 800a16e:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800a170:	f7f6 f9b4 	bl	80004dc <__aeabi_fcmplt>
 800a174:	2800      	cmp	r0, #0
 800a176:	d105      	bne.n	800a184 <pwmCommand+0x34>
 800a178:	490f      	ldr	r1, [pc, #60]	; (800a1b8 <pwmCommand+0x68>)
 800a17a:	1c20      	adds	r0, r4, #0
 800a17c:	f7f6 f9c2 	bl	8000504 <__aeabi_fcmpgt>
 800a180:	2800      	cmp	r0, #0
 800a182:	d007      	beq.n	800a194 <pwmCommand+0x44>

	/* Respond to the command */
	if (result == H0FR6_OK) {
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
	} else if (result == H0FR6_ERR_Wrong_Value) {
		strcpy((char*) pcWriteBuffer, (char*) pcWrongValue);
 800a184:	2237      	movs	r2, #55	; 0x37
 800a186:	490d      	ldr	r1, [pc, #52]	; (800a1bc <pwmCommand+0x6c>)
 800a188:	0028      	movs	r0, r5
 800a18a:	f008 ff72 	bl	8013072 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a18e:	2000      	movs	r0, #0
 800a190:	b003      	add	sp, #12
 800a192:	bd30      	pop	{r4, r5, pc}
 800a194:	1c20      	adds	r0, r4, #0
 800a196:	f7ff ffb7 	bl	800a108 <Output_PWM.part.2>
	if (result == H0FR6_OK) {
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d002      	beq.n	800a1a4 <pwmCommand+0x54>
	} else if (result == H0FR6_ERR_Wrong_Value) {
 800a19e:	2802      	cmp	r0, #2
 800a1a0:	d1f5      	bne.n	800a18e <pwmCommand+0x3e>
 800a1a2:	e7ef      	b.n	800a184 <pwmCommand+0x34>
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
 800a1a4:	1c20      	adds	r0, r4, #0
 800a1a6:	f7f8 fdcf 	bl	8002d48 <__aeabi_f2d>
 800a1aa:	0002      	movs	r2, r0
 800a1ac:	000b      	movs	r3, r1
 800a1ae:	0028      	movs	r0, r5
 800a1b0:	4903      	ldr	r1, [pc, #12]	; (800a1c0 <pwmCommand+0x70>)
 800a1b2:	f009 f961 	bl	8013478 <sprintf>
 800a1b6:	e7ea      	b.n	800a18e <pwmCommand+0x3e>
 800a1b8:	42c80000 	.word	0x42c80000
 800a1bc:	0801a644 	.word	0x0801a644
 800a1c0:	0801a67c 	.word	0x0801a67c

0800a1c4 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800a1c4:	b530      	push	{r4, r5, lr}
	if (Switch_state == STATE_PWM) {
 800a1c6:	4c23      	ldr	r4, [pc, #140]	; (800a254 <Output_on+0x90>)
Module_Status Output_on(uint32_t timeout) {
 800a1c8:	b083      	sub	sp, #12
	if (Switch_state == STATE_PWM) {
 800a1ca:	7a23      	ldrb	r3, [r4, #8]
Module_Status Output_on(uint32_t timeout) {
 800a1cc:	0005      	movs	r5, r0
	if (Switch_state == STATE_PWM) {
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d02d      	beq.n	800a22e <Output_on+0x6a>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4820      	ldr	r0, [pc, #128]	; (800a258 <Output_on+0x94>)
 800a1d8:	f006 fd62 	bl	8010ca0 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a1dc:	7823      	ldrb	r3, [r4, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d11e      	bne.n	800a220 <Output_on+0x5c>
	if (timeout != portMAX_DELAY) {
 800a1e2:	1c6b      	adds	r3, r5, #1
 800a1e4:	d015      	beq.n	800a212 <Output_on+0x4e>
		if (xTimerIsTimerActive(xTimerSwitch))
 800a1e6:	6860      	ldr	r0, [r4, #4]
 800a1e8:	f004 fee8 	bl	800efbc <xTimerIsTimerActive>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d127      	bne.n	800a240 <Output_on+0x7c>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800a1f0:	21fa      	movs	r1, #250	; 0xfa
 800a1f2:	0168      	lsls	r0, r5, #5
 800a1f4:	1b40      	subs	r0, r0, r5
 800a1f6:	0080      	lsls	r0, r0, #2
 800a1f8:	1940      	adds	r0, r0, r5
 800a1fa:	0089      	lsls	r1, r1, #2
 800a1fc:	00c0      	lsls	r0, r0, #3
 800a1fe:	f7f5 ffa7 	bl	8000150 <__udivsi3>
 800a202:	2364      	movs	r3, #100	; 0x64
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	0002      	movs	r2, r0
 800a208:	2300      	movs	r3, #0
 800a20a:	2104      	movs	r1, #4
 800a20c:	6860      	ldr	r0, [r4, #4]
 800a20e:	f004 fda5 	bl	800ed5c <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800a212:	2301      	movs	r3, #1
}
 800a214:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800a216:	4a11      	ldr	r2, [pc, #68]	; (800a25c <Output_on+0x98>)
	Switch_state = STATE_ON;
 800a218:	7223      	strb	r3, [r4, #8]
	Switch_Oldstate = Switch_state;
 800a21a:	7013      	strb	r3, [r2, #0]
}
 800a21c:	b003      	add	sp, #12
 800a21e:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 800a220:	2180      	movs	r1, #128	; 0x80
 800a222:	2201      	movs	r2, #1
 800a224:	01c9      	lsls	r1, r1, #7
 800a226:	480e      	ldr	r0, [pc, #56]	; (800a260 <Output_on+0x9c>)
 800a228:	f006 fd3a 	bl	8010ca0 <HAL_GPIO_WritePin>
 800a22c:	e7d9      	b.n	800a1e2 <Output_on+0x1e>
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a22e:	2108      	movs	r1, #8
 800a230:	480c      	ldr	r0, [pc, #48]	; (800a264 <Output_on+0xa0>)
 800a232:	f007 fd41 	bl	8011cb8 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800a236:	f7ff ff1f 	bl	800a078 <TIM3_DeInit>
		Switch_Init();
 800a23a:	f001 fa25 	bl	800b688 <Switch_Init>
 800a23e:	e7c8      	b.n	800a1d2 <Output_on+0xe>
			xTimerStop(xTimerSwitch, 100);
 800a240:	2364      	movs	r3, #100	; 0x64
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	2200      	movs	r2, #0
 800a246:	2300      	movs	r3, #0
 800a248:	2103      	movs	r1, #3
 800a24a:	6860      	ldr	r0, [r4, #4]
 800a24c:	f004 fd86 	bl	800ed5c <xTimerGenericCommand>
 800a250:	e7ce      	b.n	800a1f0 <Output_on+0x2c>
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	20001fb4 	.word	0x20001fb4
 800a258:	48000400 	.word	0x48000400
 800a25c:	20000094 	.word	0x20000094
 800a260:	48000800 	.word	0x48000800
 800a264:	200069f4 	.word	0x200069f4

0800a268 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800a268:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a26a:	b530      	push	{r4, r5, lr}
 800a26c:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a26e:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a270:	0005      	movs	r5, r0
 800a272:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a274:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a276:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a278:	f003 fab4 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800a27c:	4914      	ldr	r1, [pc, #80]	; (800a2d0 <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a27e:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800a280:	f7f5 ff40 	bl	8000104 <strcmp>
 800a284:	2800      	cmp	r0, #0
 800a286:	d005      	beq.n	800a294 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800a288:	4912      	ldr	r1, [pc, #72]	; (800a2d4 <onCommand+0x6c>)
 800a28a:	0020      	movs	r0, r4
 800a28c:	f7f5 ff3a 	bl	8000104 <strcmp>
 800a290:	2800      	cmp	r0, #0
 800a292:	d10d      	bne.n	800a2b0 <onCommand+0x48>
	result = Output_on(timeout);
 800a294:	2001      	movs	r0, #1
 800a296:	4240      	negs	r0, r0
 800a298:	f7ff ff94 	bl	800a1c4 <Output_on>
	if (result == H0FR6_OK) {
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d104      	bne.n	800a2aa <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800a2a0:	2232      	movs	r2, #50	; 0x32
 800a2a2:	490d      	ldr	r1, [pc, #52]	; (800a2d8 <onCommand+0x70>)
 800a2a4:	0028      	movs	r0, r5
 800a2a6:	f008 fee4 	bl	8013072 <memcpy>
}
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	b003      	add	sp, #12
 800a2ae:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800a2b0:	0020      	movs	r0, r4
 800a2b2:	f008 fc1e 	bl	8012af2 <atol>
 800a2b6:	0004      	movs	r4, r0
	result = Output_on(timeout);
 800a2b8:	f7ff ff84 	bl	800a1c4 <Output_on>
	if (result == H0FR6_OK) {
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1f4      	bne.n	800a2aa <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 800a2c0:	1c63      	adds	r3, r4, #1
 800a2c2:	d0ed      	beq.n	800a2a0 <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800a2c4:	0022      	movs	r2, r4
 800a2c6:	4905      	ldr	r1, [pc, #20]	; (800a2dc <onCommand+0x74>)
 800a2c8:	0028      	movs	r0, r5
 800a2ca:	f009 f8d5 	bl	8013478 <sprintf>
 800a2ce:	e7ec      	b.n	800a2aa <onCommand+0x42>
 800a2d0:	0801a6c4 	.word	0x0801a6c4
 800a2d4:	0801a6c8 	.word	0x0801a6c8
 800a2d8:	0801a704 	.word	0x0801a704
 800a2dc:	0801a6cc 	.word	0x0801a6cc

0800a2e0 <Output_off>:
Module_Status Output_off(void) {
 800a2e0:	b510      	push	{r4, lr}
	if (Switch_state == STATE_PWM) {
 800a2e2:	4c0f      	ldr	r4, [pc, #60]	; (800a320 <Output_off+0x40>)
 800a2e4:	7a23      	ldrb	r3, [r4, #8]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d011      	beq.n	800a30e <Output_off+0x2e>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	480d      	ldr	r0, [pc, #52]	; (800a324 <Output_off+0x44>)
 800a2f0:	f006 fcd6 	bl	8010ca0 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a2f4:	7823      	ldrb	r3, [r4, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <Output_off+0x26>
		IND_OFF();
 800a2fa:	2180      	movs	r1, #128	; 0x80
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	01c9      	lsls	r1, r1, #7
 800a300:	4809      	ldr	r0, [pc, #36]	; (800a328 <Output_off+0x48>)
 800a302:	f006 fccd 	bl	8010ca0 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800a306:	2300      	movs	r3, #0
}
 800a308:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800a30a:	7223      	strb	r3, [r4, #8]
}
 800a30c:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a30e:	2108      	movs	r1, #8
 800a310:	4806      	ldr	r0, [pc, #24]	; (800a32c <Output_off+0x4c>)
 800a312:	f007 fcd1 	bl	8011cb8 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800a316:	f7ff feaf 	bl	800a078 <TIM3_DeInit>
		Switch_Init();
 800a31a:	f001 f9b5 	bl	800b688 <Switch_Init>
 800a31e:	e7e4      	b.n	800a2ea <Output_off+0xa>
 800a320:	20001fb4 	.word	0x20001fb4
 800a324:	48000400 	.word	0x48000400
 800a328:	48000800 	.word	0x48000800
 800a32c:	200069f4 	.word	0x200069f4

0800a330 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800a330:	b510      	push	{r4, lr}
	Output_off();
 800a332:	f7ff ffd5 	bl	800a2e0 <Output_off>
}
 800a336:	bd10      	pop	{r4, pc}

0800a338 <offCommand>:
		const int8_t *pcCommandString) {
 800a338:	b510      	push	{r4, lr}
 800a33a:	0004      	movs	r4, r0
	result = Output_off();
 800a33c:	f7ff ffd0 	bl	800a2e0 <Output_off>
	if (result == H0FR6_OK) {
 800a340:	2800      	cmp	r0, #0
 800a342:	d104      	bne.n	800a34e <offCommand+0x16>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a344:	2223      	movs	r2, #35	; 0x23
 800a346:	4903      	ldr	r1, [pc, #12]	; (800a354 <offCommand+0x1c>)
 800a348:	0020      	movs	r0, r4
 800a34a:	f008 fe92 	bl	8013072 <memcpy>
}
 800a34e:	2000      	movs	r0, #0
 800a350:	bd10      	pop	{r4, pc}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	0801a738 	.word	0x0801a738

0800a358 <Output_toggle>:
	if (Switch_state) {
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <Output_toggle+0x58>)
Module_Status Output_toggle(void) {
 800a35a:	b510      	push	{r4, lr}
	if (Switch_state) {
 800a35c:	7a1b      	ldrb	r3, [r3, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d11b      	bne.n	800a39a <Output_toggle+0x42>
		if (Switch_Oldstate == STATE_ON)
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <Output_toggle+0x5c>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d01a      	beq.n	800a3a0 <Output_toggle+0x48>
	Module_Status result = H0FR6_OK;
 800a36a:	2000      	movs	r0, #0
		else if (Switch_Oldstate == STATE_PWM)
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d000      	beq.n	800a372 <Output_toggle+0x1a>
}
 800a370:	bd10      	pop	{r4, pc}
			result = Output_PWM(Switch_OldDC);
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <Output_toggle+0x60>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800a374:	2100      	movs	r1, #0
			result = Output_PWM(Switch_OldDC);
 800a376:	681c      	ldr	r4, [r3, #0]
	if (dutyCycle < 0 || dutyCycle > 100)
 800a378:	1c20      	adds	r0, r4, #0
 800a37a:	f7f6 f8af 	bl	80004dc <__aeabi_fcmplt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d113      	bne.n	800a3aa <Output_toggle+0x52>
 800a382:	490e      	ldr	r1, [pc, #56]	; (800a3bc <Output_toggle+0x64>)
 800a384:	1c20      	adds	r0, r4, #0
 800a386:	f7f6 f8bd 	bl	8000504 <__aeabi_fcmpgt>
 800a38a:	0003      	movs	r3, r0
		return H0FR6_ERR_Wrong_Value;
 800a38c:	2002      	movs	r0, #2
	if (dutyCycle < 0 || dutyCycle > 100)
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1ee      	bne.n	800a370 <Output_toggle+0x18>
 800a392:	1c20      	adds	r0, r4, #0
 800a394:	f7ff feb8 	bl	800a108 <Output_PWM.part.2>
 800a398:	e7ea      	b.n	800a370 <Output_toggle+0x18>
		result = Output_off();
 800a39a:	f7ff ffa1 	bl	800a2e0 <Output_off>
 800a39e:	e7e7      	b.n	800a370 <Output_toggle+0x18>
			result = Output_on(portMAX_DELAY);
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	4240      	negs	r0, r0
 800a3a4:	f7ff ff0e 	bl	800a1c4 <Output_on>
 800a3a8:	e7e2      	b.n	800a370 <Output_toggle+0x18>
		return H0FR6_ERR_Wrong_Value;
 800a3aa:	2002      	movs	r0, #2
 800a3ac:	e7e0      	b.n	800a370 <Output_toggle+0x18>
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	20001fb4 	.word	0x20001fb4
 800a3b4:	20000094 	.word	0x20000094
 800a3b8:	200069f0 	.word	0x200069f0
 800a3bc:	42c80000 	.word	0x42c80000

0800a3c0 <toggleCommand>:
		const int8_t *pcCommandString) {
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	0004      	movs	r4, r0
	result = Output_toggle();
 800a3c4:	f7ff ffc8 	bl	800a358 <Output_toggle>
	if (result == H0FR6_OK) {
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d108      	bne.n	800a3de <toggleCommand+0x1e>
		if (Switch_state) {
 800a3cc:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <toggleCommand+0x30>)
 800a3ce:	7a1b      	ldrb	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d106      	bne.n	800a3e2 <toggleCommand+0x22>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a3d4:	2223      	movs	r2, #35	; 0x23
 800a3d6:	4907      	ldr	r1, [pc, #28]	; (800a3f4 <toggleCommand+0x34>)
 800a3d8:	0020      	movs	r0, r4
 800a3da:	f008 fe4a 	bl	8013072 <memcpy>
}
 800a3de:	2000      	movs	r0, #0
 800a3e0:	bd10      	pop	{r4, pc}
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a3e2:	2222      	movs	r2, #34	; 0x22
 800a3e4:	4904      	ldr	r1, [pc, #16]	; (800a3f8 <toggleCommand+0x38>)
 800a3e6:	0020      	movs	r0, r4
 800a3e8:	f008 fe43 	bl	8013072 <memcpy>
 800a3ec:	e7f7      	b.n	800a3de <toggleCommand+0x1e>
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	20001fb4 	.word	0x20001fb4
 800a3f4:	0801a738 	.word	0x0801a738
 800a3f8:	0801a75c 	.word	0x0801a75c

0800a3fc <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	ab04      	add	r3, sp, #16
 800a400:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 800a402:	4b22      	ldr	r3, [pc, #136]	; (800a48c <Module_MessagingTask+0x90>)
 800a404:	4298      	cmp	r0, r3
 800a406:	d03d      	beq.n	800a484 <Module_MessagingTask+0x88>
 800a408:	d920      	bls.n	800a44c <Module_MessagingTask+0x50>
 800a40a:	4b21      	ldr	r3, [pc, #132]	; (800a490 <Module_MessagingTask+0x94>)
 800a40c:	4298      	cmp	r0, r3
 800a40e:	d018      	beq.n	800a442 <Module_MessagingTask+0x46>
 800a410:	4b20      	ldr	r3, [pc, #128]	; (800a494 <Module_MessagingTask+0x98>)
 800a412:	4298      	cmp	r0, r3
 800a414:	d134      	bne.n	800a480 <Module_MessagingTask+0x84>
		tempFloat = (float)cMessage[port - 1][shift];
 800a416:	3901      	subs	r1, #1
 800a418:	00cb      	lsls	r3, r1, #3
 800a41a:	1a59      	subs	r1, r3, r1
 800a41c:	4b1e      	ldr	r3, [pc, #120]	; (800a498 <Module_MessagingTask+0x9c>)
 800a41e:	00c9      	lsls	r1, r1, #3
 800a420:	1859      	adds	r1, r3, r1
 800a422:	5c88      	ldrb	r0, [r1, r2]
 800a424:	f7f6 feb2 	bl	800118c <__aeabi_ui2f>
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <Module_MessagingTask+0xa0>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800a42a:	491d      	ldr	r1, [pc, #116]	; (800a4a0 <Module_MessagingTask+0xa4>)
		tempFloat = (float)cMessage[port - 1][shift];
 800a42c:	6018      	str	r0, [r3, #0]
 800a42e:	1c05      	adds	r5, r0, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800a430:	f7f6 f868 	bl	8000504 <__aeabi_fcmpgt>
	Module_Status result = H0FR6_OK;
 800a434:	2400      	movs	r4, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800a436:	2800      	cmp	r0, #0
 800a438:	d106      	bne.n	800a448 <Module_MessagingTask+0x4c>
 800a43a:	1c28      	adds	r0, r5, #0
 800a43c:	f7ff fe64 	bl	800a108 <Output_PWM.part.2>
 800a440:	e002      	b.n	800a448 <Module_MessagingTask+0x4c>
		Output_toggle();
 800a442:	f7ff ff89 	bl	800a358 <Output_toggle>
	Module_Status result = H0FR6_OK;
 800a446:	2400      	movs	r4, #0
}
 800a448:	0020      	movs	r0, r4
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
	switch (code) {
 800a44c:	3b01      	subs	r3, #1
 800a44e:	4298      	cmp	r0, r3
 800a450:	d116      	bne.n	800a480 <Module_MessagingTask+0x84>
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800a452:	3901      	subs	r1, #1
 800a454:	00cb      	lsls	r3, r1, #3
 800a456:	1a59      	subs	r1, r3, r1
 800a458:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <Module_MessagingTask+0x9c>)
 800a45a:	00c9      	lsls	r1, r1, #3
 800a45c:	1859      	adds	r1, r3, r1
 800a45e:	188b      	adds	r3, r1, r2
 800a460:	7858      	ldrb	r0, [r3, #1]
 800a462:	789c      	ldrb	r4, [r3, #2]
 800a464:	5c8a      	ldrb	r2, [r1, r2]
 800a466:	78db      	ldrb	r3, [r3, #3]
 800a468:	0424      	lsls	r4, r4, #16
 800a46a:	0200      	lsls	r0, r0, #8
 800a46c:	1900      	adds	r0, r0, r4
 800a46e:	1880      	adds	r0, r0, r2
 800a470:	061b      	lsls	r3, r3, #24
 800a472:	18c0      	adds	r0, r0, r3
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <Module_MessagingTask+0xa8>)
	Module_Status result = H0FR6_OK;
 800a476:	2400      	movs	r4, #0
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800a478:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 800a47a:	f7ff fea3 	bl	800a1c4 <Output_on>
		break;
 800a47e:	e7e3      	b.n	800a448 <Module_MessagingTask+0x4c>
		result = H0FR6_ERR_UnknownMessage;
 800a480:	2401      	movs	r4, #1
 800a482:	e7e1      	b.n	800a448 <Module_MessagingTask+0x4c>
		Output_off();
 800a484:	f7ff ff2c 	bl	800a2e0 <Output_off>
	Module_Status result = H0FR6_OK;
 800a488:	2400      	movs	r4, #0
		break;
 800a48a:	e7dd      	b.n	800a448 <Module_MessagingTask+0x4c>
 800a48c:	000002f9 	.word	0x000002f9
 800a490:	000002fa 	.word	0x000002fa
 800a494:	000002fb 	.word	0x000002fb
 800a498:	20000c98 	.word	0x20000c98
 800a49c:	20006b10 	.word	0x20006b10
 800a4a0:	42c80000 	.word	0x42c80000
 800a4a4:	20006b14 	.word	0x20006b14

0800a4a8 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4aa:	46de      	mov	lr, fp
 800a4ac:	4657      	mov	r7, sl
 800a4ae:	464e      	mov	r6, r9
 800a4b0:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4b53      	ldr	r3, [pc, #332]	; (800a604 <DMA_Init+0x15c>)
{
 800a4b6:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800a4b8:	6959      	ldr	r1, [r3, #20]
{
 800a4ba:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800a4bc:	4311      	orrs	r1, r2
 800a4be:	6159      	str	r1, [r3, #20]
 800a4c0:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a4c2:	4c51      	ldr	r4, [pc, #324]	; (800a608 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800a4c4:	400a      	ands	r2, r1
 800a4c6:	9200      	str	r2, [sp, #0]
 800a4c8:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a4ce:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800a4d0:	4311      	orrs	r1, r2
 800a4d2:	6159      	str	r1, [r3, #20]
 800a4d4:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a4d6:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800a4d8:	401a      	ands	r2, r3
 800a4da:	9201      	str	r2, [sp, #4]
 800a4dc:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800a4de:	4b4b      	ldr	r3, [pc, #300]	; (800a60c <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a4e0:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800a4e2:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a4e8:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a4ea:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a4ec:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a4ee:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a4f0:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a4f2:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a4f4:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a4f6:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a4f8:	0020      	movs	r0, r4
 800a4fa:	f005 fbcf 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a4fe:	4b44      	ldr	r3, [pc, #272]	; (800a610 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800a500:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a502:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a504:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a506:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a508:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a50a:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a50c:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a50e:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a510:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a512:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a514:	3038      	adds	r0, #56	; 0x38
 800a516:	f005 fbc1 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a51a:	4b3e      	ldr	r3, [pc, #248]	; (800a614 <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a51c:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800a51e:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a520:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800a522:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a524:	50e5      	str	r5, [r4, r3]
 800a526:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a528:	3304      	adds	r3, #4
 800a52a:	50e2      	str	r2, [r4, r3]
 800a52c:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a52e:	3304      	adds	r3, #4
 800a530:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a532:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a534:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a536:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a538:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800a53a:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a53c:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800a53e:	f005 fbad 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a542:	23a8      	movs	r3, #168	; 0xa8
 800a544:	4a34      	ldr	r2, [pc, #208]	; (800a618 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800a546:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a548:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a54a:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a54c:	3304      	adds	r3, #4
 800a54e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a550:	3304      	adds	r3, #4
 800a552:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a554:	3304      	adds	r3, #4
 800a556:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a558:	3304      	adds	r3, #4
 800a55a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a55c:	3304      	adds	r3, #4
 800a55e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a560:	3304      	adds	r3, #4
 800a562:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a564:	3304      	adds	r3, #4
 800a566:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a568:	30a8      	adds	r0, #168	; 0xa8
 800a56a:	f005 fb97 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a56e:	23e0      	movs	r3, #224	; 0xe0
 800a570:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800a572:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a574:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a576:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a578:	3304      	adds	r3, #4
 800a57a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a57c:	3304      	adds	r3, #4
 800a57e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a580:	3304      	adds	r3, #4
 800a582:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a584:	3304      	adds	r3, #4
 800a586:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a588:	3304      	adds	r3, #4
 800a58a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a58c:	3304      	adds	r3, #4
 800a58e:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a590:	3304      	adds	r3, #4
 800a592:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a594:	30e0      	adds	r0, #224	; 0xe0
 800a596:	f005 fb81 	bl	800fc9c <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a59a:	4c21      	ldr	r4, [pc, #132]	; (800a620 <DMA_Init+0x178>)
 800a59c:	4b21      	ldr	r3, [pc, #132]	; (800a624 <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a59e:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800a5a0:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5a2:	2310      	movs	r3, #16
 800a5a4:	469b      	mov	fp, r3
 800a5a6:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a5a8:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a5aa:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a5ac:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a5ae:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a5b0:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a5b2:	0020      	movs	r0, r4
 800a5b4:	f005 fb72 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a5b8:	4b1b      	ldr	r3, [pc, #108]	; (800a628 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800a5ba:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a5bc:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5be:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a5c0:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a5c4:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a5c6:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a5c8:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800a5ca:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a5cc:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a5ce:	3038      	adds	r0, #56	; 0x38
 800a5d0:	f005 fb64 	bl	800fc9c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a5d4:	4b15      	ldr	r3, [pc, #84]	; (800a62c <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800a5d6:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a5d8:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5da:	465b      	mov	r3, fp
 800a5dc:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a5de:	4653      	mov	r3, sl
 800a5e0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a5e6:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a5e8:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a5ea:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a5ec:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a5ee:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a5f0:	3070      	adds	r0, #112	; 0x70
 800a5f2:	f005 fb53 	bl	800fc9c <HAL_DMA_Init>
}
 800a5f6:	b003      	add	sp, #12
 800a5f8:	bc3c      	pop	{r2, r3, r4, r5}
 800a5fa:	4690      	mov	r8, r2
 800a5fc:	4699      	mov	r9, r3
 800a5fe:	46a2      	mov	sl, r4
 800a600:	46ab      	mov	fp, r5
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a604:	40021000 	.word	0x40021000
 800a608:	20002268 	.word	0x20002268
 800a60c:	40020008 	.word	0x40020008
 800a610:	40020030 	.word	0x40020030
 800a614:	40020058 	.word	0x40020058
 800a618:	4002006c 	.word	0x4002006c
 800a61c:	4002041c 	.word	0x4002041c
 800a620:	200021c0 	.word	0x200021c0
 800a624:	4002001c 	.word	0x4002001c
 800a628:	40020044 	.word	0x40020044
 800a62c:	40020080 	.word	0x40020080

0800a630 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800a630:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800a632:	1e44      	subs	r4, r0, #1
 800a634:	00e5      	lsls	r5, r4, #3
 800a636:	4e07      	ldr	r6, [pc, #28]	; (800a654 <StopStreamDMA+0x24>)
 800a638:	1b2d      	subs	r5, r5, r4
 800a63a:	00ed      	lsls	r5, r5, #3
 800a63c:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800a63e:	f005 fb85 	bl	800fd4c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800a646:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800a648:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a64a:	4a03      	ldr	r2, [pc, #12]	; (800a658 <StopStreamDMA+0x28>)
 800a64c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800a64e:	4a03      	ldr	r2, [pc, #12]	; (800a65c <StopStreamDMA+0x2c>)
 800a650:	50a3      	str	r3, [r4, r2]

}
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	20002070 	.word	0x20002070
 800a658:	2000186c 	.word	0x2000186c
 800a65c:	20001880 	.word	0x20001880

0800a660 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800a660:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800a662:	b570      	push	{r4, r5, r6, lr}
 800a664:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800a666:	4d0c      	ldr	r5, [pc, #48]	; (800a698 <SwitchMsgDMAToStream+0x38>)
 800a668:	1a24      	subs	r4, r4, r0
 800a66a:	00e4      	lsls	r4, r4, #3
 800a66c:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800a66e:	f005 fb6d 	bl	800fd4c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800a672:	2300      	movs	r3, #0
 800a674:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800a676:	4809      	ldr	r0, [pc, #36]	; (800a69c <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800a678:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800a67a:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a67c:	1900      	adds	r0, r0, r4
 800a67e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a680:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800a682:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a684:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a686:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a688:	3320      	adds	r3, #32
 800a68a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800a68c:	2380      	movs	r3, #128	; 0x80
 800a68e:	015b      	lsls	r3, r3, #5
 800a690:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800a692:	f005 fb03 	bl	800fc9c <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	20002268 	.word	0x20002268
 800a69c:	20002070 	.word	0x20002070

0800a6a0 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800a6a0:	6803      	ldr	r3, [r0, #0]
 800a6a2:	4a21      	ldr	r2, [pc, #132]	; (800a728 <SetupDMAInterrupts+0x88>)
{
 800a6a4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01c      	beq.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a6aa:	d80e      	bhi.n	800a6ca <SetupDMAInterrupts+0x2a>
 800a6ac:	4a1f      	ldr	r2, [pc, #124]	; (800a72c <SetupDMAInterrupts+0x8c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d026      	beq.n	800a700 <SetupDMAInterrupts+0x60>
 800a6b2:	d82d      	bhi.n	800a710 <SetupDMAInterrupts+0x70>
 800a6b4:	4a1e      	ldr	r2, [pc, #120]	; (800a730 <SetupDMAInterrupts+0x90>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d131      	bne.n	800a71e <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a6ba:	2009      	movs	r0, #9
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f005 f965 	bl	800f98c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800a6c2:	2009      	movs	r0, #9
 800a6c4:	f005 f98e 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a6c8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a6ca:	4a1a      	ldr	r2, [pc, #104]	; (800a734 <SetupDMAInterrupts+0x94>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d017      	beq.n	800a700 <SetupDMAInterrupts+0x60>
 800a6d0:	d910      	bls.n	800a6f4 <SetupDMAInterrupts+0x54>
 800a6d2:	4a19      	ldr	r2, [pc, #100]	; (800a738 <SetupDMAInterrupts+0x98>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d005      	beq.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a6d8:	4a18      	ldr	r2, [pc, #96]	; (800a73c <SetupDMAInterrupts+0x9c>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d002      	beq.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a6de:	4a18      	ldr	r2, [pc, #96]	; (800a740 <SetupDMAInterrupts+0xa0>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d1f1      	bne.n	800a6c8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	200b      	movs	r0, #11
 800a6e8:	f005 f950 	bl	800f98c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a6ec:	200b      	movs	r0, #11
 800a6ee:	f005 f979 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
}
 800a6f2:	e7e9      	b.n	800a6c8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a6f4:	4a13      	ldr	r2, [pc, #76]	; (800a744 <SetupDMAInterrupts+0xa4>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d0f4      	beq.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a6fa:	4a13      	ldr	r2, [pc, #76]	; (800a748 <SetupDMAInterrupts+0xa8>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d1e3      	bne.n	800a6c8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800a700:	2200      	movs	r2, #0
 800a702:	200a      	movs	r0, #10
 800a704:	f005 f942 	bl	800f98c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a708:	200a      	movs	r0, #10
 800a70a:	f005 f96b 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
			break;
 800a70e:	e7db      	b.n	800a6c8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a710:	4a0e      	ldr	r2, [pc, #56]	; (800a74c <SetupDMAInterrupts+0xac>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d0e6      	beq.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a716:	4a0e      	ldr	r2, [pc, #56]	; (800a750 <SetupDMAInterrupts+0xb0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d1d5      	bne.n	800a6c8 <SetupDMAInterrupts+0x28>
 800a71c:	e7e2      	b.n	800a6e4 <SetupDMAInterrupts+0x44>
 800a71e:	4a0d      	ldr	r2, [pc, #52]	; (800a754 <SetupDMAInterrupts+0xb4>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d0ed      	beq.n	800a700 <SetupDMAInterrupts+0x60>
 800a724:	e7d0      	b.n	800a6c8 <SetupDMAInterrupts+0x28>
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	4002006c 	.word	0x4002006c
 800a72c:	40020030 	.word	0x40020030
 800a730:	40020008 	.word	0x40020008
 800a734:	4002041c 	.word	0x4002041c
 800a738:	40020444 	.word	0x40020444
 800a73c:	40020458 	.word	0x40020458
 800a740:	40020430 	.word	0x40020430
 800a744:	40020080 	.word	0x40020080
 800a748:	40020408 	.word	0x40020408
 800a74c:	40020044 	.word	0x40020044
 800a750:	40020058 	.word	0x40020058
 800a754:	4002001c 	.word	0x4002001c

0800a758 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800a758:	6803      	ldr	r3, [r0, #0]
 800a75a:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <UnSetupDMAInterrupts+0x70>)
{
 800a75c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d018      	beq.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a762:	d80a      	bhi.n	800a77a <UnSetupDMAInterrupts+0x22>
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <UnSetupDMAInterrupts+0x74>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d01e      	beq.n	800a7a8 <UnSetupDMAInterrupts+0x50>
 800a76a:	d821      	bhi.n	800a7b0 <UnSetupDMAInterrupts+0x58>
 800a76c:	4a18      	ldr	r2, [pc, #96]	; (800a7d0 <UnSetupDMAInterrupts+0x78>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d125      	bne.n	800a7be <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a772:	2009      	movs	r0, #9
 800a774:	f005 f940 	bl	800f9f8 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a778:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a77a:	4a16      	ldr	r2, [pc, #88]	; (800a7d4 <UnSetupDMAInterrupts+0x7c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d013      	beq.n	800a7a8 <UnSetupDMAInterrupts+0x50>
 800a780:	d90c      	bls.n	800a79c <UnSetupDMAInterrupts+0x44>
 800a782:	4a15      	ldr	r2, [pc, #84]	; (800a7d8 <UnSetupDMAInterrupts+0x80>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d005      	beq.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a788:	4a14      	ldr	r2, [pc, #80]	; (800a7dc <UnSetupDMAInterrupts+0x84>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d002      	beq.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a78e:	4a14      	ldr	r2, [pc, #80]	; (800a7e0 <UnSetupDMAInterrupts+0x88>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d1f1      	bne.n	800a778 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a794:	200b      	movs	r0, #11
 800a796:	f005 f92f 	bl	800f9f8 <HAL_NVIC_DisableIRQ>
}
 800a79a:	e7ed      	b.n	800a778 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a79c:	4a11      	ldr	r2, [pc, #68]	; (800a7e4 <UnSetupDMAInterrupts+0x8c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d0f8      	beq.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a7a2:	4a11      	ldr	r2, [pc, #68]	; (800a7e8 <UnSetupDMAInterrupts+0x90>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d1e7      	bne.n	800a778 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a7a8:	200a      	movs	r0, #10
 800a7aa:	f005 f925 	bl	800f9f8 <HAL_NVIC_DisableIRQ>
			break;
 800a7ae:	e7e3      	b.n	800a778 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a7b0:	4a0e      	ldr	r2, [pc, #56]	; (800a7ec <UnSetupDMAInterrupts+0x94>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d0ee      	beq.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a7b6:	4a0e      	ldr	r2, [pc, #56]	; (800a7f0 <UnSetupDMAInterrupts+0x98>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d1dd      	bne.n	800a778 <UnSetupDMAInterrupts+0x20>
 800a7bc:	e7ea      	b.n	800a794 <UnSetupDMAInterrupts+0x3c>
 800a7be:	4a0d      	ldr	r2, [pc, #52]	; (800a7f4 <UnSetupDMAInterrupts+0x9c>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d0f1      	beq.n	800a7a8 <UnSetupDMAInterrupts+0x50>
 800a7c4:	e7d8      	b.n	800a778 <UnSetupDMAInterrupts+0x20>
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	4002006c 	.word	0x4002006c
 800a7cc:	40020030 	.word	0x40020030
 800a7d0:	40020008 	.word	0x40020008
 800a7d4:	4002041c 	.word	0x4002041c
 800a7d8:	40020444 	.word	0x40020444
 800a7dc:	40020458 	.word	0x40020458
 800a7e0:	40020430 	.word	0x40020430
 800a7e4:	40020080 	.word	0x40020080
 800a7e8:	40020408 	.word	0x40020408
 800a7ec:	40020044 	.word	0x40020044
 800a7f0:	40020058 	.word	0x40020058
 800a7f4:	4002001c 	.word	0x4002001c

0800a7f8 <DMA_MSG_TX_UnSetup>:
{	
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a7fc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a7fe:	f7ff ffab 	bl	800a758 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a802:	2300      	movs	r3, #0
 800a804:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a806:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a808:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a80a:	bd10      	pop	{r4, pc}

0800a80c <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a80c:	6803      	ldr	r3, [r0, #0]
 800a80e:	4ac6      	ldr	r2, [pc, #792]	; (800ab28 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a810:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a812:	4293      	cmp	r3, r2
 800a814:	d03a      	beq.n	800a88c <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a816:	4ac5      	ldr	r2, [pc, #788]	; (800ab2c <RemapAndLinkDMAtoUARTRx+0x320>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d058      	beq.n	800a8ce <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a81c:	4ac4      	ldr	r2, [pc, #784]	; (800ab30 <RemapAndLinkDMAtoUARTRx+0x324>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d100      	bne.n	800a824 <RemapAndLinkDMAtoUARTRx+0x18>
 800a822:	e093      	b.n	800a94c <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a824:	4ac3      	ldr	r2, [pc, #780]	; (800ab34 <RemapAndLinkDMAtoUARTRx+0x328>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d100      	bne.n	800a82c <RemapAndLinkDMAtoUARTRx+0x20>
 800a82a:	e0c0      	b.n	800a9ae <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a82c:	4ac2      	ldr	r2, [pc, #776]	; (800ab38 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d100      	bne.n	800a834 <RemapAndLinkDMAtoUARTRx+0x28>
 800a832:	e19d      	b.n	800ab70 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a834:	4ac1      	ldr	r2, [pc, #772]	; (800ab3c <RemapAndLinkDMAtoUARTRx+0x330>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d100      	bne.n	800a83c <RemapAndLinkDMAtoUARTRx+0x30>
 800a83a:	e1b9      	b.n	800abb0 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a83c:	4ac0      	ldr	r2, [pc, #768]	; (800ab40 <RemapAndLinkDMAtoUARTRx+0x334>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d000      	beq.n	800a844 <RemapAndLinkDMAtoUARTRx+0x38>
 800a842:	e265      	b.n	800ad10 <RemapAndLinkDMAtoUARTRx+0x504>
 800a844:	680b      	ldr	r3, [r1, #0]
 800a846:	4abf      	ldr	r2, [pc, #764]	; (800ab44 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d100      	bne.n	800a84e <RemapAndLinkDMAtoUARTRx+0x42>
 800a84c:	e230      	b.n	800acb0 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a84e:	4abe      	ldr	r2, [pc, #760]	; (800ab48 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d100      	bne.n	800a856 <RemapAndLinkDMAtoUARTRx+0x4a>
 800a854:	e237      	b.n	800acc6 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a856:	4abd      	ldr	r2, [pc, #756]	; (800ab4c <RemapAndLinkDMAtoUARTRx+0x340>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d100      	bne.n	800a85e <RemapAndLinkDMAtoUARTRx+0x52>
 800a85c:	e235      	b.n	800acca <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a85e:	4abc      	ldr	r2, [pc, #752]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d100      	bne.n	800a866 <RemapAndLinkDMAtoUARTRx+0x5a>
 800a864:	e23d      	b.n	800ace2 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a866:	4abb      	ldr	r2, [pc, #748]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d100      	bne.n	800a86e <RemapAndLinkDMAtoUARTRx+0x62>
 800a86c:	e245      	b.n	800acfa <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a86e:	4aba      	ldr	r2, [pc, #744]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d145      	bne.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800a874:	4ab9      	ldr	r2, [pc, #740]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800a876:	23a8      	movs	r3, #168	; 0xa8
 800a878:	4db9      	ldr	r5, [pc, #740]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a87a:	58d4      	ldr	r4, [r2, r3]
 800a87c:	402c      	ands	r4, r5
 800a87e:	50d4      	str	r4, [r2, r3]
 800a880:	24e0      	movs	r4, #224	; 0xe0
 800a882:	58d5      	ldr	r5, [r2, r3]
 800a884:	0124      	lsls	r4, r4, #4
 800a886:	432c      	orrs	r4, r5
 800a888:	50d4      	str	r4, [r2, r3]
 800a88a:	e039      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a88c:	680b      	ldr	r3, [r1, #0]
 800a88e:	4aad      	ldr	r2, [pc, #692]	; (800ab44 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d100      	bne.n	800a896 <RemapAndLinkDMAtoUARTRx+0x8a>
 800a894:	e07e      	b.n	800a994 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a896:	4aac      	ldr	r2, [pc, #688]	; (800ab48 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d100      	bne.n	800a89e <RemapAndLinkDMAtoUARTRx+0x92>
 800a89c:	e085      	b.n	800a9aa <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a89e:	4aab      	ldr	r2, [pc, #684]	; (800ab4c <RemapAndLinkDMAtoUARTRx+0x340>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d030      	beq.n	800a906 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a8a4:	4aaa      	ldr	r2, [pc, #680]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d039      	beq.n	800a91e <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a8aa:	4aaa      	ldr	r2, [pc, #680]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d042      	beq.n	800a936 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a8b0:	4aa9      	ldr	r2, [pc, #676]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d124      	bne.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a8b6:	4aa9      	ldr	r2, [pc, #676]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800a8b8:	23a8      	movs	r3, #168	; 0xa8
 800a8ba:	4da9      	ldr	r5, [pc, #676]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a8bc:	58d4      	ldr	r4, [r2, r3]
 800a8be:	402c      	ands	r4, r5
 800a8c0:	50d4      	str	r4, [r2, r3]
 800a8c2:	2480      	movs	r4, #128	; 0x80
 800a8c4:	58d5      	ldr	r5, [r2, r3]
 800a8c6:	0124      	lsls	r4, r4, #4
 800a8c8:	432c      	orrs	r4, r5
 800a8ca:	50d4      	str	r4, [r2, r3]
 800a8cc:	e018      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a8ce:	680b      	ldr	r3, [r1, #0]
 800a8d0:	4a9c      	ldr	r2, [pc, #624]	; (800ab44 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d100      	bne.n	800a8d8 <RemapAndLinkDMAtoUARTRx+0xcc>
 800a8d6:	e0b0      	b.n	800aa3a <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a8d8:	4a9b      	ldr	r2, [pc, #620]	; (800ab48 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d100      	bne.n	800a8e0 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a8de:	e0b7      	b.n	800aa50 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a8e0:	4a9a      	ldr	r2, [pc, #616]	; (800ab4c <RemapAndLinkDMAtoUARTRx+0x340>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d100      	bne.n	800a8e8 <RemapAndLinkDMAtoUARTRx+0xdc>
 800a8e6:	e0bf      	b.n	800aa68 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a8e8:	4a99      	ldr	r2, [pc, #612]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d100      	bne.n	800a8f0 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a8ee:	e0c7      	b.n	800aa80 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a8f0:	4a98      	ldr	r2, [pc, #608]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d100      	bne.n	800a8f8 <RemapAndLinkDMAtoUARTRx+0xec>
 800a8f6:	e0cf      	b.n	800aa98 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a8f8:	4a97      	ldr	r2, [pc, #604]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d100      	bne.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a8fe:	e0d6      	b.n	800aaae <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a900:	6641      	str	r1, [r0, #100]	; 0x64
 800a902:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a904:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a906:	23a8      	movs	r3, #168	; 0xa8
 800a908:	4a96      	ldr	r2, [pc, #600]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a90a:	4d97      	ldr	r5, [pc, #604]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a90c:	58d4      	ldr	r4, [r2, r3]
 800a90e:	402c      	ands	r4, r5
 800a910:	50d4      	str	r4, [r2, r3]
 800a912:	2480      	movs	r4, #128	; 0x80
 800a914:	58d5      	ldr	r5, [r2, r3]
 800a916:	0324      	lsls	r4, r4, #12
 800a918:	432c      	orrs	r4, r5
 800a91a:	50d4      	str	r4, [r2, r3]
 800a91c:	e7f0      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a91e:	23a8      	movs	r3, #168	; 0xa8
 800a920:	4a90      	ldr	r2, [pc, #576]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a922:	4d92      	ldr	r5, [pc, #584]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x360>)
 800a924:	58d4      	ldr	r4, [r2, r3]
 800a926:	402c      	ands	r4, r5
 800a928:	50d4      	str	r4, [r2, r3]
 800a92a:	2480      	movs	r4, #128	; 0x80
 800a92c:	58d5      	ldr	r5, [r2, r3]
 800a92e:	0424      	lsls	r4, r4, #16
 800a930:	432c      	orrs	r4, r5
 800a932:	50d4      	str	r4, [r2, r3]
 800a934:	e7e4      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a936:	23a8      	movs	r3, #168	; 0xa8
 800a938:	25f0      	movs	r5, #240	; 0xf0
 800a93a:	4a88      	ldr	r2, [pc, #544]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800a93c:	58d4      	ldr	r4, [r2, r3]
 800a93e:	43ac      	bics	r4, r5
 800a940:	50d4      	str	r4, [r2, r3]
 800a942:	58d4      	ldr	r4, [r2, r3]
 800a944:	3d70      	subs	r5, #112	; 0x70
 800a946:	432c      	orrs	r4, r5
 800a948:	50d4      	str	r4, [r2, r3]
 800a94a:	e7d9      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a94c:	680b      	ldr	r3, [r1, #0]
 800a94e:	4a7d      	ldr	r2, [pc, #500]	; (800ab44 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d100      	bne.n	800a956 <RemapAndLinkDMAtoUARTRx+0x14a>
 800a954:	e0ad      	b.n	800aab2 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a956:	4a7c      	ldr	r2, [pc, #496]	; (800ab48 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d100      	bne.n	800a95e <RemapAndLinkDMAtoUARTRx+0x152>
 800a95c:	e0b4      	b.n	800aac8 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a95e:	4a7b      	ldr	r2, [pc, #492]	; (800ab4c <RemapAndLinkDMAtoUARTRx+0x340>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d100      	bne.n	800a966 <RemapAndLinkDMAtoUARTRx+0x15a>
 800a964:	e0b2      	b.n	800aacc <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a966:	4a7a      	ldr	r2, [pc, #488]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d100      	bne.n	800a96e <RemapAndLinkDMAtoUARTRx+0x162>
 800a96c:	e0ba      	b.n	800aae4 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a96e:	4a79      	ldr	r2, [pc, #484]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d100      	bne.n	800a976 <RemapAndLinkDMAtoUARTRx+0x16a>
 800a974:	e0c2      	b.n	800aafc <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a976:	4a78      	ldr	r2, [pc, #480]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d1c1      	bne.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800a97c:	4a77      	ldr	r2, [pc, #476]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800a97e:	23a8      	movs	r3, #168	; 0xa8
 800a980:	4d77      	ldr	r5, [pc, #476]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a982:	58d4      	ldr	r4, [r2, r3]
 800a984:	402c      	ands	r4, r5
 800a986:	50d4      	str	r4, [r2, r3]
 800a988:	24a0      	movs	r4, #160	; 0xa0
 800a98a:	58d5      	ldr	r5, [r2, r3]
 800a98c:	0124      	lsls	r4, r4, #4
 800a98e:	432c      	orrs	r4, r5
 800a990:	50d4      	str	r4, [r2, r3]
 800a992:	e7b5      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a994:	23a8      	movs	r3, #168	; 0xa8
 800a996:	250f      	movs	r5, #15
 800a998:	4a72      	ldr	r2, [pc, #456]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a99a:	58d4      	ldr	r4, [r2, r3]
 800a99c:	43ac      	bics	r4, r5
 800a99e:	50d4      	str	r4, [r2, r3]
 800a9a0:	58d4      	ldr	r4, [r2, r3]
 800a9a2:	3d07      	subs	r5, #7
 800a9a4:	432c      	orrs	r4, r5
 800a9a6:	50d4      	str	r4, [r2, r3]
 800a9a8:	e7aa      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a9aa:	4a6e      	ldr	r2, [pc, #440]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a9ac:	e784      	b.n	800a8b8 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a9ae:	680b      	ldr	r3, [r1, #0]
 800a9b0:	4a64      	ldr	r2, [pc, #400]	; (800ab44 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d01c      	beq.n	800a9f0 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a9b6:	4a64      	ldr	r2, [pc, #400]	; (800ab48 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d024      	beq.n	800aa06 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a9bc:	4a63      	ldr	r2, [pc, #396]	; (800ab4c <RemapAndLinkDMAtoUARTRx+0x340>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d023      	beq.n	800aa0a <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a9c2:	4a63      	ldr	r2, [pc, #396]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d02c      	beq.n	800aa22 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a9c8:	4a62      	ldr	r2, [pc, #392]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d100      	bne.n	800a9d0 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a9ce:	e0a0      	b.n	800ab12 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a9d0:	4a61      	ldr	r2, [pc, #388]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d000      	beq.n	800a9d8 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a9d6:	e793      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800a9d8:	4a60      	ldr	r2, [pc, #384]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800a9da:	23a8      	movs	r3, #168	; 0xa8
 800a9dc:	4d60      	ldr	r5, [pc, #384]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a9de:	58d4      	ldr	r4, [r2, r3]
 800a9e0:	402c      	ands	r4, r5
 800a9e2:	50d4      	str	r4, [r2, r3]
 800a9e4:	24b0      	movs	r4, #176	; 0xb0
 800a9e6:	58d5      	ldr	r5, [r2, r3]
 800a9e8:	0124      	lsls	r4, r4, #4
 800a9ea:	432c      	orrs	r4, r5
 800a9ec:	50d4      	str	r4, [r2, r3]
 800a9ee:	e787      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a9f0:	23a8      	movs	r3, #168	; 0xa8
 800a9f2:	250f      	movs	r5, #15
 800a9f4:	4a5b      	ldr	r2, [pc, #364]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a9f6:	58d4      	ldr	r4, [r2, r3]
 800a9f8:	43ac      	bics	r4, r5
 800a9fa:	50d4      	str	r4, [r2, r3]
 800a9fc:	58d4      	ldr	r4, [r2, r3]
 800a9fe:	3d04      	subs	r5, #4
 800aa00:	432c      	orrs	r4, r5
 800aa02:	50d4      	str	r4, [r2, r3]
 800aa04:	e77c      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800aa06:	4a57      	ldr	r2, [pc, #348]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa08:	e7e7      	b.n	800a9da <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800aa0a:	23a8      	movs	r3, #168	; 0xa8
 800aa0c:	4a55      	ldr	r2, [pc, #340]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa0e:	4d56      	ldr	r5, [pc, #344]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800aa10:	58d4      	ldr	r4, [r2, r3]
 800aa12:	402c      	ands	r4, r5
 800aa14:	50d4      	str	r4, [r2, r3]
 800aa16:	24b0      	movs	r4, #176	; 0xb0
 800aa18:	58d5      	ldr	r5, [r2, r3]
 800aa1a:	0324      	lsls	r4, r4, #12
 800aa1c:	432c      	orrs	r4, r5
 800aa1e:	50d4      	str	r4, [r2, r3]
 800aa20:	e76e      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800aa22:	23a8      	movs	r3, #168	; 0xa8
 800aa24:	4a4f      	ldr	r2, [pc, #316]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa26:	4d51      	ldr	r5, [pc, #324]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x360>)
 800aa28:	58d4      	ldr	r4, [r2, r3]
 800aa2a:	402c      	ands	r4, r5
 800aa2c:	50d4      	str	r4, [r2, r3]
 800aa2e:	24b0      	movs	r4, #176	; 0xb0
 800aa30:	58d5      	ldr	r5, [r2, r3]
 800aa32:	0424      	lsls	r4, r4, #16
 800aa34:	432c      	orrs	r4, r5
 800aa36:	50d4      	str	r4, [r2, r3]
 800aa38:	e762      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800aa3a:	23a8      	movs	r3, #168	; 0xa8
 800aa3c:	250f      	movs	r5, #15
 800aa3e:	4a49      	ldr	r2, [pc, #292]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa40:	58d4      	ldr	r4, [r2, r3]
 800aa42:	43ac      	bics	r4, r5
 800aa44:	50d4      	str	r4, [r2, r3]
 800aa46:	58d4      	ldr	r4, [r2, r3]
 800aa48:	3d06      	subs	r5, #6
 800aa4a:	432c      	orrs	r4, r5
 800aa4c:	50d4      	str	r4, [r2, r3]
 800aa4e:	e757      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800aa50:	4a44      	ldr	r2, [pc, #272]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800aa52:	23a8      	movs	r3, #168	; 0xa8
 800aa54:	4d42      	ldr	r5, [pc, #264]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aa56:	58d4      	ldr	r4, [r2, r3]
 800aa58:	402c      	ands	r4, r5
 800aa5a:	50d4      	str	r4, [r2, r3]
 800aa5c:	2490      	movs	r4, #144	; 0x90
 800aa5e:	58d5      	ldr	r5, [r2, r3]
 800aa60:	0124      	lsls	r4, r4, #4
 800aa62:	432c      	orrs	r4, r5
 800aa64:	50d4      	str	r4, [r2, r3]
 800aa66:	e74b      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800aa68:	23a8      	movs	r3, #168	; 0xa8
 800aa6a:	4a3e      	ldr	r2, [pc, #248]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa6c:	4d3e      	ldr	r5, [pc, #248]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800aa6e:	58d4      	ldr	r4, [r2, r3]
 800aa70:	402c      	ands	r4, r5
 800aa72:	50d4      	str	r4, [r2, r3]
 800aa74:	2490      	movs	r4, #144	; 0x90
 800aa76:	58d5      	ldr	r5, [r2, r3]
 800aa78:	0324      	lsls	r4, r4, #12
 800aa7a:	432c      	orrs	r4, r5
 800aa7c:	50d4      	str	r4, [r2, r3]
 800aa7e:	e73f      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800aa80:	23a8      	movs	r3, #168	; 0xa8
 800aa82:	4a38      	ldr	r2, [pc, #224]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aa84:	4d39      	ldr	r5, [pc, #228]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x360>)
 800aa86:	58d4      	ldr	r4, [r2, r3]
 800aa88:	402c      	ands	r4, r5
 800aa8a:	50d4      	str	r4, [r2, r3]
 800aa8c:	2490      	movs	r4, #144	; 0x90
 800aa8e:	58d5      	ldr	r5, [r2, r3]
 800aa90:	0424      	lsls	r4, r4, #16
 800aa92:	432c      	orrs	r4, r5
 800aa94:	50d4      	str	r4, [r2, r3]
 800aa96:	e733      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800aa98:	23a8      	movs	r3, #168	; 0xa8
 800aa9a:	25f0      	movs	r5, #240	; 0xf0
 800aa9c:	4a2f      	ldr	r2, [pc, #188]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800aa9e:	58d4      	ldr	r4, [r2, r3]
 800aaa0:	43ac      	bics	r4, r5
 800aaa2:	50d4      	str	r4, [r2, r3]
 800aaa4:	58d4      	ldr	r4, [r2, r3]
 800aaa6:	3d60      	subs	r5, #96	; 0x60
 800aaa8:	432c      	orrs	r4, r5
 800aaaa:	50d4      	str	r4, [r2, r3]
 800aaac:	e728      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800aaae:	4a2b      	ldr	r2, [pc, #172]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800aab0:	e7cf      	b.n	800aa52 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800aab2:	23a8      	movs	r3, #168	; 0xa8
 800aab4:	250f      	movs	r5, #15
 800aab6:	4a2b      	ldr	r2, [pc, #172]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aab8:	58d4      	ldr	r4, [r2, r3]
 800aaba:	43ac      	bics	r4, r5
 800aabc:	50d4      	str	r4, [r2, r3]
 800aabe:	58d4      	ldr	r4, [r2, r3]
 800aac0:	3d05      	subs	r5, #5
 800aac2:	432c      	orrs	r4, r5
 800aac4:	50d4      	str	r4, [r2, r3]
 800aac6:	e71b      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800aac8:	4a26      	ldr	r2, [pc, #152]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aaca:	e758      	b.n	800a97e <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800aacc:	23a8      	movs	r3, #168	; 0xa8
 800aace:	4a25      	ldr	r2, [pc, #148]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aad0:	4d25      	ldr	r5, [pc, #148]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800aad2:	58d4      	ldr	r4, [r2, r3]
 800aad4:	402c      	ands	r4, r5
 800aad6:	50d4      	str	r4, [r2, r3]
 800aad8:	24a0      	movs	r4, #160	; 0xa0
 800aada:	58d5      	ldr	r5, [r2, r3]
 800aadc:	0324      	lsls	r4, r4, #12
 800aade:	432c      	orrs	r4, r5
 800aae0:	50d4      	str	r4, [r2, r3]
 800aae2:	e70d      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800aae4:	23a8      	movs	r3, #168	; 0xa8
 800aae6:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x358>)
 800aae8:	4d20      	ldr	r5, [pc, #128]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x360>)
 800aaea:	58d4      	ldr	r4, [r2, r3]
 800aaec:	402c      	ands	r4, r5
 800aaee:	50d4      	str	r4, [r2, r3]
 800aaf0:	24a0      	movs	r4, #160	; 0xa0
 800aaf2:	58d5      	ldr	r5, [r2, r3]
 800aaf4:	0424      	lsls	r4, r4, #16
 800aaf6:	432c      	orrs	r4, r5
 800aaf8:	50d4      	str	r4, [r2, r3]
 800aafa:	e701      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800aafc:	23a8      	movs	r3, #168	; 0xa8
 800aafe:	25f0      	movs	r5, #240	; 0xf0
 800ab00:	4a16      	ldr	r2, [pc, #88]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ab02:	58d4      	ldr	r4, [r2, r3]
 800ab04:	43ac      	bics	r4, r5
 800ab06:	50d4      	str	r4, [r2, r3]
 800ab08:	58d4      	ldr	r4, [r2, r3]
 800ab0a:	3d50      	subs	r5, #80	; 0x50
 800ab0c:	432c      	orrs	r4, r5
 800ab0e:	50d4      	str	r4, [r2, r3]
 800ab10:	e6f6      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800ab12:	23a8      	movs	r3, #168	; 0xa8
 800ab14:	25f0      	movs	r5, #240	; 0xf0
 800ab16:	4a11      	ldr	r2, [pc, #68]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ab18:	58d4      	ldr	r4, [r2, r3]
 800ab1a:	43ac      	bics	r4, r5
 800ab1c:	50d4      	str	r4, [r2, r3]
 800ab1e:	58d4      	ldr	r4, [r2, r3]
 800ab20:	3d40      	subs	r5, #64	; 0x40
 800ab22:	432c      	orrs	r4, r5
 800ab24:	50d4      	str	r4, [r2, r3]
 800ab26:	e6eb      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
 800ab28:	40013800 	.word	0x40013800
 800ab2c:	40004400 	.word	0x40004400
 800ab30:	40004800 	.word	0x40004800
 800ab34:	40004c00 	.word	0x40004c00
 800ab38:	40005000 	.word	0x40005000
 800ab3c:	40011400 	.word	0x40011400
 800ab40:	40011800 	.word	0x40011800
 800ab44:	40020008 	.word	0x40020008
 800ab48:	40020030 	.word	0x40020030
 800ab4c:	40020058 	.word	0x40020058
 800ab50:	4002006c 	.word	0x4002006c
 800ab54:	4002041c 	.word	0x4002041c
 800ab58:	40020430 	.word	0x40020430
 800ab5c:	40020400 	.word	0x40020400
 800ab60:	fffff0ff 	.word	0xfffff0ff
 800ab64:	40020000 	.word	0x40020000
 800ab68:	fff0ffff 	.word	0xfff0ffff
 800ab6c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ab70:	680b      	ldr	r3, [r1, #0]
 800ab72:	4a8e      	ldr	r2, [pc, #568]	; (800adac <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d03b      	beq.n	800abf0 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800ab78:	4a8d      	ldr	r2, [pc, #564]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d043      	beq.n	800ac06 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800ab7e:	4a8d      	ldr	r2, [pc, #564]	; (800adb4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d042      	beq.n	800ac0a <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800ab84:	4a8c      	ldr	r2, [pc, #560]	; (800adb8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d04b      	beq.n	800ac22 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800ab8a:	4a8c      	ldr	r2, [pc, #560]	; (800adbc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d054      	beq.n	800ac3a <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800ab90:	4a8b      	ldr	r2, [pc, #556]	; (800adc0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d000      	beq.n	800ab98 <RemapAndLinkDMAtoUARTRx+0x38c>
 800ab96:	e6b3      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800ab98:	4a8a      	ldr	r2, [pc, #552]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ab9a:	23a8      	movs	r3, #168	; 0xa8
 800ab9c:	4d8a      	ldr	r5, [pc, #552]	; (800adc8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800ab9e:	58d4      	ldr	r4, [r2, r3]
 800aba0:	402c      	ands	r4, r5
 800aba2:	50d4      	str	r4, [r2, r3]
 800aba4:	24c0      	movs	r4, #192	; 0xc0
 800aba6:	58d5      	ldr	r5, [r2, r3]
 800aba8:	0124      	lsls	r4, r4, #4
 800abaa:	432c      	orrs	r4, r5
 800abac:	50d4      	str	r4, [r2, r3]
 800abae:	e6a7      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800abb0:	680b      	ldr	r3, [r1, #0]
 800abb2:	4a7e      	ldr	r2, [pc, #504]	; (800adac <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d04b      	beq.n	800ac50 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800abb8:	4a7d      	ldr	r2, [pc, #500]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d053      	beq.n	800ac66 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800abbe:	4a7d      	ldr	r2, [pc, #500]	; (800adb4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d052      	beq.n	800ac6a <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800abc4:	4a7c      	ldr	r2, [pc, #496]	; (800adb8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d05b      	beq.n	800ac82 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800abca:	4a7c      	ldr	r2, [pc, #496]	; (800adbc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d064      	beq.n	800ac9a <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800abd0:	4a7b      	ldr	r2, [pc, #492]	; (800adc0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d000      	beq.n	800abd8 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800abd6:	e693      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800abd8:	4a7a      	ldr	r2, [pc, #488]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800abda:	23a8      	movs	r3, #168	; 0xa8
 800abdc:	4d7a      	ldr	r5, [pc, #488]	; (800adc8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800abde:	58d4      	ldr	r4, [r2, r3]
 800abe0:	402c      	ands	r4, r5
 800abe2:	50d4      	str	r4, [r2, r3]
 800abe4:	24d0      	movs	r4, #208	; 0xd0
 800abe6:	58d5      	ldr	r5, [r2, r3]
 800abe8:	0124      	lsls	r4, r4, #4
 800abea:	432c      	orrs	r4, r5
 800abec:	50d4      	str	r4, [r2, r3]
 800abee:	e687      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800abf0:	23a8      	movs	r3, #168	; 0xa8
 800abf2:	250f      	movs	r5, #15
 800abf4:	4a75      	ldr	r2, [pc, #468]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800abf6:	58d4      	ldr	r4, [r2, r3]
 800abf8:	43ac      	bics	r4, r5
 800abfa:	50d4      	str	r4, [r2, r3]
 800abfc:	58d4      	ldr	r4, [r2, r3]
 800abfe:	3d03      	subs	r5, #3
 800ac00:	432c      	orrs	r4, r5
 800ac02:	50d4      	str	r4, [r2, r3]
 800ac04:	e67c      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800ac06:	4a71      	ldr	r2, [pc, #452]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac08:	e7c7      	b.n	800ab9a <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800ac0a:	23a8      	movs	r3, #168	; 0xa8
 800ac0c:	4a6f      	ldr	r2, [pc, #444]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac0e:	4d70      	ldr	r5, [pc, #448]	; (800add0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800ac10:	58d4      	ldr	r4, [r2, r3]
 800ac12:	402c      	ands	r4, r5
 800ac14:	50d4      	str	r4, [r2, r3]
 800ac16:	24c0      	movs	r4, #192	; 0xc0
 800ac18:	58d5      	ldr	r5, [r2, r3]
 800ac1a:	0324      	lsls	r4, r4, #12
 800ac1c:	432c      	orrs	r4, r5
 800ac1e:	50d4      	str	r4, [r2, r3]
 800ac20:	e66e      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800ac22:	23a8      	movs	r3, #168	; 0xa8
 800ac24:	4a69      	ldr	r2, [pc, #420]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac26:	4d6b      	ldr	r5, [pc, #428]	; (800add4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800ac28:	58d4      	ldr	r4, [r2, r3]
 800ac2a:	402c      	ands	r4, r5
 800ac2c:	50d4      	str	r4, [r2, r3]
 800ac2e:	24c0      	movs	r4, #192	; 0xc0
 800ac30:	58d5      	ldr	r5, [r2, r3]
 800ac32:	0424      	lsls	r4, r4, #16
 800ac34:	432c      	orrs	r4, r5
 800ac36:	50d4      	str	r4, [r2, r3]
 800ac38:	e662      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800ac3a:	23a8      	movs	r3, #168	; 0xa8
 800ac3c:	25f0      	movs	r5, #240	; 0xf0
 800ac3e:	4a61      	ldr	r2, [pc, #388]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ac40:	58d4      	ldr	r4, [r2, r3]
 800ac42:	43ac      	bics	r4, r5
 800ac44:	50d4      	str	r4, [r2, r3]
 800ac46:	58d4      	ldr	r4, [r2, r3]
 800ac48:	3d30      	subs	r5, #48	; 0x30
 800ac4a:	432c      	orrs	r4, r5
 800ac4c:	50d4      	str	r4, [r2, r3]
 800ac4e:	e657      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800ac50:	23a8      	movs	r3, #168	; 0xa8
 800ac52:	250f      	movs	r5, #15
 800ac54:	4a5d      	ldr	r2, [pc, #372]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac56:	58d4      	ldr	r4, [r2, r3]
 800ac58:	43ac      	bics	r4, r5
 800ac5a:	50d4      	str	r4, [r2, r3]
 800ac5c:	58d4      	ldr	r4, [r2, r3]
 800ac5e:	3d02      	subs	r5, #2
 800ac60:	432c      	orrs	r4, r5
 800ac62:	50d4      	str	r4, [r2, r3]
 800ac64:	e64c      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800ac66:	4a59      	ldr	r2, [pc, #356]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac68:	e7b7      	b.n	800abda <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800ac6a:	23a8      	movs	r3, #168	; 0xa8
 800ac6c:	4a57      	ldr	r2, [pc, #348]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac6e:	4d58      	ldr	r5, [pc, #352]	; (800add0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800ac70:	58d4      	ldr	r4, [r2, r3]
 800ac72:	402c      	ands	r4, r5
 800ac74:	50d4      	str	r4, [r2, r3]
 800ac76:	24d0      	movs	r4, #208	; 0xd0
 800ac78:	58d5      	ldr	r5, [r2, r3]
 800ac7a:	0324      	lsls	r4, r4, #12
 800ac7c:	432c      	orrs	r4, r5
 800ac7e:	50d4      	str	r4, [r2, r3]
 800ac80:	e63e      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800ac82:	23a8      	movs	r3, #168	; 0xa8
 800ac84:	4a51      	ldr	r2, [pc, #324]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ac86:	4d53      	ldr	r5, [pc, #332]	; (800add4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800ac88:	58d4      	ldr	r4, [r2, r3]
 800ac8a:	402c      	ands	r4, r5
 800ac8c:	50d4      	str	r4, [r2, r3]
 800ac8e:	24d0      	movs	r4, #208	; 0xd0
 800ac90:	58d5      	ldr	r5, [r2, r3]
 800ac92:	0424      	lsls	r4, r4, #16
 800ac94:	432c      	orrs	r4, r5
 800ac96:	50d4      	str	r4, [r2, r3]
 800ac98:	e632      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800ac9a:	23a8      	movs	r3, #168	; 0xa8
 800ac9c:	25f0      	movs	r5, #240	; 0xf0
 800ac9e:	4a49      	ldr	r2, [pc, #292]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800aca0:	58d4      	ldr	r4, [r2, r3]
 800aca2:	43ac      	bics	r4, r5
 800aca4:	50d4      	str	r4, [r2, r3]
 800aca6:	58d4      	ldr	r4, [r2, r3]
 800aca8:	3d20      	subs	r5, #32
 800acaa:	432c      	orrs	r4, r5
 800acac:	50d4      	str	r4, [r2, r3]
 800acae:	e627      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800acb0:	23a8      	movs	r3, #168	; 0xa8
 800acb2:	250f      	movs	r5, #15
 800acb4:	4a45      	ldr	r2, [pc, #276]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800acb6:	58d4      	ldr	r4, [r2, r3]
 800acb8:	43ac      	bics	r4, r5
 800acba:	50d4      	str	r4, [r2, r3]
 800acbc:	58d4      	ldr	r4, [r2, r3]
 800acbe:	3d01      	subs	r5, #1
 800acc0:	432c      	orrs	r4, r5
 800acc2:	50d4      	str	r4, [r2, r3]
 800acc4:	e61c      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800acc6:	4a41      	ldr	r2, [pc, #260]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800acc8:	e5d5      	b.n	800a876 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800acca:	23a8      	movs	r3, #168	; 0xa8
 800accc:	4a3f      	ldr	r2, [pc, #252]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800acce:	4d40      	ldr	r5, [pc, #256]	; (800add0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800acd0:	58d4      	ldr	r4, [r2, r3]
 800acd2:	402c      	ands	r4, r5
 800acd4:	50d4      	str	r4, [r2, r3]
 800acd6:	24e0      	movs	r4, #224	; 0xe0
 800acd8:	58d5      	ldr	r5, [r2, r3]
 800acda:	0324      	lsls	r4, r4, #12
 800acdc:	432c      	orrs	r4, r5
 800acde:	50d4      	str	r4, [r2, r3]
 800ace0:	e60e      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ace2:	23a8      	movs	r3, #168	; 0xa8
 800ace4:	4a39      	ldr	r2, [pc, #228]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ace6:	4d3b      	ldr	r5, [pc, #236]	; (800add4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800ace8:	58d4      	ldr	r4, [r2, r3]
 800acea:	402c      	ands	r4, r5
 800acec:	50d4      	str	r4, [r2, r3]
 800acee:	24e0      	movs	r4, #224	; 0xe0
 800acf0:	58d5      	ldr	r5, [r2, r3]
 800acf2:	0424      	lsls	r4, r4, #16
 800acf4:	432c      	orrs	r4, r5
 800acf6:	50d4      	str	r4, [r2, r3]
 800acf8:	e602      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800acfa:	23a8      	movs	r3, #168	; 0xa8
 800acfc:	25f0      	movs	r5, #240	; 0xf0
 800acfe:	4a31      	ldr	r2, [pc, #196]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ad00:	58d4      	ldr	r4, [r2, r3]
 800ad02:	43ac      	bics	r4, r5
 800ad04:	50d4      	str	r4, [r2, r3]
 800ad06:	58d4      	ldr	r4, [r2, r3]
 800ad08:	3d10      	subs	r5, #16
 800ad0a:	432c      	orrs	r4, r5
 800ad0c:	50d4      	str	r4, [r2, r3]
 800ad0e:	e5f7      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800ad10:	4a31      	ldr	r2, [pc, #196]	; (800add8 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d000      	beq.n	800ad18 <RemapAndLinkDMAtoUARTRx+0x50c>
 800ad16:	e5f3      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
 800ad18:	680b      	ldr	r3, [r1, #0]
 800ad1a:	4a24      	ldr	r2, [pc, #144]	; (800adac <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d01b      	beq.n	800ad58 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ad20:	4a23      	ldr	r2, [pc, #140]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d022      	beq.n	800ad6c <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800ad26:	4a23      	ldr	r2, [pc, #140]	; (800adb4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d021      	beq.n	800ad70 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800ad2c:	4a22      	ldr	r2, [pc, #136]	; (800adb8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d02a      	beq.n	800ad88 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ad32:	4a22      	ldr	r2, [pc, #136]	; (800adbc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d033      	beq.n	800ada0 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ad38:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d000      	beq.n	800ad40 <RemapAndLinkDMAtoUARTRx+0x534>
 800ad3e:	e5df      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ad40:	4a20      	ldr	r2, [pc, #128]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ad42:	23a8      	movs	r3, #168	; 0xa8
 800ad44:	4d20      	ldr	r5, [pc, #128]	; (800adc8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800ad46:	58d4      	ldr	r4, [r2, r3]
 800ad48:	402c      	ands	r4, r5
 800ad4a:	50d4      	str	r4, [r2, r3]
 800ad4c:	24f0      	movs	r4, #240	; 0xf0
 800ad4e:	58d5      	ldr	r5, [r2, r3]
 800ad50:	0124      	lsls	r4, r4, #4
 800ad52:	432c      	orrs	r4, r5
 800ad54:	50d4      	str	r4, [r2, r3]
 800ad56:	e5d3      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ad58:	23a8      	movs	r3, #168	; 0xa8
 800ad5a:	260f      	movs	r6, #15
 800ad5c:	4a1b      	ldr	r2, [pc, #108]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ad5e:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ad60:	43b5      	bics	r5, r6
 800ad62:	50d5      	str	r5, [r2, r3]
 800ad64:	58d4      	ldr	r4, [r2, r3]
 800ad66:	4334      	orrs	r4, r6
 800ad68:	50d4      	str	r4, [r2, r3]
 800ad6a:	e5c9      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ad6c:	4a17      	ldr	r2, [pc, #92]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ad6e:	e7e8      	b.n	800ad42 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ad70:	23a8      	movs	r3, #168	; 0xa8
 800ad72:	4a16      	ldr	r2, [pc, #88]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ad74:	4d16      	ldr	r5, [pc, #88]	; (800add0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800ad76:	58d4      	ldr	r4, [r2, r3]
 800ad78:	402c      	ands	r4, r5
 800ad7a:	50d4      	str	r4, [r2, r3]
 800ad7c:	24f0      	movs	r4, #240	; 0xf0
 800ad7e:	58d5      	ldr	r5, [r2, r3]
 800ad80:	0324      	lsls	r4, r4, #12
 800ad82:	432c      	orrs	r4, r5
 800ad84:	50d4      	str	r4, [r2, r3]
 800ad86:	e5bb      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ad88:	23a8      	movs	r3, #168	; 0xa8
 800ad8a:	4a10      	ldr	r2, [pc, #64]	; (800adcc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ad8c:	4d11      	ldr	r5, [pc, #68]	; (800add4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800ad8e:	58d4      	ldr	r4, [r2, r3]
 800ad90:	402c      	ands	r4, r5
 800ad92:	50d4      	str	r4, [r2, r3]
 800ad94:	24f0      	movs	r4, #240	; 0xf0
 800ad96:	58d5      	ldr	r5, [r2, r3]
 800ad98:	0424      	lsls	r4, r4, #16
 800ad9a:	432c      	orrs	r4, r5
 800ad9c:	50d4      	str	r4, [r2, r3]
 800ad9e:	e5af      	b.n	800a900 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ada0:	23a8      	movs	r3, #168	; 0xa8
 800ada2:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ada4:	26f0      	movs	r6, #240	; 0xf0
 800ada6:	58d5      	ldr	r5, [r2, r3]
 800ada8:	e7da      	b.n	800ad60 <RemapAndLinkDMAtoUARTRx+0x554>
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	40020008 	.word	0x40020008
 800adb0:	40020030 	.word	0x40020030
 800adb4:	40020058 	.word	0x40020058
 800adb8:	4002006c 	.word	0x4002006c
 800adbc:	4002041c 	.word	0x4002041c
 800adc0:	40020430 	.word	0x40020430
 800adc4:	40020400 	.word	0x40020400
 800adc8:	fffff0ff 	.word	0xfffff0ff
 800adcc:	40020000 	.word	0x40020000
 800add0:	fff0ffff 	.word	0xfff0ffff
 800add4:	ff0fffff 	.word	0xff0fffff
 800add8:	40011c00 	.word	0x40011c00

0800addc <DMA_MSG_RX_Setup>:
{	
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	000d      	movs	r5, r1
 800ade0:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800ade2:	f7ff fd13 	bl	800a80c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800ade6:	0028      	movs	r0, r5
 800ade8:	2100      	movs	r1, #0
 800adea:	f7ff fc59 	bl	800a6a0 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800adee:	0020      	movs	r0, r4
 800adf0:	f7ff f8c4 	bl	8009f7c <GetPort>
 800adf4:	1e41      	subs	r1, r0, #1
 800adf6:	4803      	ldr	r0, [pc, #12]	; (800ae04 <DMA_MSG_RX_Setup+0x28>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	1809      	adds	r1, r1, r0
 800adfc:	0020      	movs	r0, r4
 800adfe:	f007 fa63 	bl	80122c8 <HAL_UART_Receive_DMA>
}
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	20001c9c 	.word	0x20001c9c

0800ae08 <SetupMessagingRxDMAs>:
{	
 800ae08:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800ae0a:	4c14      	ldr	r4, [pc, #80]	; (800ae5c <SetupMessagingRxDMAs+0x54>)
 800ae0c:	7863      	ldrb	r3, [r4, #1]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01f      	beq.n	800ae52 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800ae12:	78a3      	ldrb	r3, [r4, #2]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d017      	beq.n	800ae48 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800ae18:	78e3      	ldrb	r3, [r4, #3]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00f      	beq.n	800ae3e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800ae1e:	7923      	ldrb	r3, [r4, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d007      	beq.n	800ae34 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800ae24:	7963      	ldrb	r3, [r4, #5]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800ae2a:	490d      	ldr	r1, [pc, #52]	; (800ae60 <SetupMessagingRxDMAs+0x58>)
 800ae2c:	480d      	ldr	r0, [pc, #52]	; (800ae64 <SetupMessagingRxDMAs+0x5c>)
 800ae2e:	f7ff ffd5 	bl	800addc <DMA_MSG_RX_Setup>
}
 800ae32:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800ae34:	490c      	ldr	r1, [pc, #48]	; (800ae68 <SetupMessagingRxDMAs+0x60>)
 800ae36:	480d      	ldr	r0, [pc, #52]	; (800ae6c <SetupMessagingRxDMAs+0x64>)
 800ae38:	f7ff ffd0 	bl	800addc <DMA_MSG_RX_Setup>
 800ae3c:	e7f2      	b.n	800ae24 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800ae3e:	490c      	ldr	r1, [pc, #48]	; (800ae70 <SetupMessagingRxDMAs+0x68>)
 800ae40:	480c      	ldr	r0, [pc, #48]	; (800ae74 <SetupMessagingRxDMAs+0x6c>)
 800ae42:	f7ff ffcb 	bl	800addc <DMA_MSG_RX_Setup>
 800ae46:	e7ea      	b.n	800ae1e <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800ae48:	490b      	ldr	r1, [pc, #44]	; (800ae78 <SetupMessagingRxDMAs+0x70>)
 800ae4a:	480c      	ldr	r0, [pc, #48]	; (800ae7c <SetupMessagingRxDMAs+0x74>)
 800ae4c:	f7ff ffc6 	bl	800addc <DMA_MSG_RX_Setup>
 800ae50:	e7e2      	b.n	800ae18 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800ae52:	490b      	ldr	r1, [pc, #44]	; (800ae80 <SetupMessagingRxDMAs+0x78>)
 800ae54:	480b      	ldr	r0, [pc, #44]	; (800ae84 <SetupMessagingRxDMAs+0x7c>)
 800ae56:	f7ff ffc1 	bl	800addc <DMA_MSG_RX_Setup>
 800ae5a:	e7da      	b.n	800ae12 <SetupMessagingRxDMAs+0xa>
 800ae5c:	20000c34 	.word	0x20000c34
 800ae60:	20002348 	.word	0x20002348
 800ae64:	20006aa0 	.word	0x20006aa0
 800ae68:	20002310 	.word	0x20002310
 800ae6c:	20006980 	.word	0x20006980
 800ae70:	200022d8 	.word	0x200022d8
 800ae74:	20006b18 	.word	0x20006b18
 800ae78:	200022a0 	.word	0x200022a0
 800ae7c:	20006b8c 	.word	0x20006b8c
 800ae80:	20002268 	.word	0x20002268
 800ae84:	20006a30 	.word	0x20006a30

0800ae88 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae8a:	46d6      	mov	lr, sl
 800ae8c:	464f      	mov	r7, r9
 800ae8e:	4646      	mov	r6, r8
 800ae90:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800ae92:	1e47      	subs	r7, r0, #1
 800ae94:	00fe      	lsls	r6, r7, #3
 800ae96:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <SwitchStreamDMAToMsg+0x80>)
 800ae98:	1bf6      	subs	r6, r6, r7
 800ae9a:	00f6      	lsls	r6, r6, #3
 800ae9c:	4698      	mov	r8, r3
 800ae9e:	46b2      	mov	sl, r6
 800aea0:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800aea2:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800aea4:	4650      	mov	r0, sl
 800aea6:	f004 ff51 	bl	800fd4c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800aeaa:	4643      	mov	r3, r8
 800aeac:	2400      	movs	r4, #0
 800aeae:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800aeb0:	4b16      	ldr	r3, [pc, #88]	; (800af0c <SwitchStreamDMAToMsg+0x84>)
 800aeb2:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800aeb4:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800aeb6:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800aeb8:	4b15      	ldr	r3, [pc, #84]	; (800af10 <SwitchStreamDMAToMsg+0x88>)
 800aeba:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800aebc:	4b15      	ldr	r3, [pc, #84]	; (800af14 <SwitchStreamDMAToMsg+0x8c>)
 800aebe:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800aec0:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800aec2:	2380      	movs	r3, #128	; 0x80
 800aec4:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aec6:	3b60      	subs	r3, #96	; 0x60
 800aec8:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800aeca:	2380      	movs	r3, #128	; 0x80
 800aecc:	019b      	lsls	r3, r3, #6
 800aece:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aed0:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aed2:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aed4:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aed6:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800aed8:	0028      	movs	r0, r5
 800aeda:	f004 fedf 	bl	800fc9c <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800aede:	4653      	mov	r3, sl
 800aee0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aee2:	f7ff f84b 	bl	8009f7c <GetPort>
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <SwitchStreamDMAToMsg+0x90>)
 800aee8:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800aeea:	4643      	mov	r3, r8
 800aeec:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800aef0:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800aef2:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800aef4:	f002 fa34 	bl	800d360 <GetUart>
 800aef8:	0029      	movs	r1, r5
 800aefa:	f7ff ff6f 	bl	800addc <DMA_MSG_RX_Setup>
}
 800aefe:	bc1c      	pop	{r2, r3, r4}
 800af00:	4690      	mov	r8, r2
 800af02:	4699      	mov	r9, r3
 800af04:	46a2      	mov	sl, r4
 800af06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af08:	20002070 	.word	0x20002070
 800af0c:	2000186c 	.word	0x2000186c
 800af10:	20001880 	.word	0x20001880
 800af14:	20002268 	.word	0x20002268
 800af18:	20000c34 	.word	0x20000c34
 800af1c:	20001858 	.word	0x20001858

0800af20 <DMA_STREAM_Setup>:
{	
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	0016      	movs	r6, r2
 800af24:	0005      	movs	r5, r0
 800af26:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800af28:	f7ff f828 	bl	8009f7c <GetPort>
	hDMA = &streamDMA[port-1];
 800af2c:	3801      	subs	r0, #1
 800af2e:	00c4      	lsls	r4, r0, #3
 800af30:	1a24      	subs	r4, r4, r0
 800af32:	480a      	ldr	r0, [pc, #40]	; (800af5c <DMA_STREAM_Setup+0x3c>)
 800af34:	00e4      	lsls	r4, r4, #3
 800af36:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800af38:	0021      	movs	r1, r4
 800af3a:	0028      	movs	r0, r5
 800af3c:	f7ff fc66 	bl	800a80c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800af40:	0020      	movs	r0, r4
 800af42:	2101      	movs	r1, #1
 800af44:	f7ff fbac 	bl	800a6a0 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800af48:	2369      	movs	r3, #105	; 0x69
 800af4a:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800af4c:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800af4e:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800af50:	0028      	movs	r0, r5
 800af52:	0032      	movs	r2, r6
 800af54:	3128      	adds	r1, #40	; 0x28
 800af56:	f007 f9b7 	bl	80122c8 <HAL_UART_Receive_DMA>
}
 800af5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af5c:	20002070 	.word	0x20002070

0800af60 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800af60:	2310      	movs	r3, #16
 800af62:	4807      	ldr	r0, [pc, #28]	; (800af80 <CRC_Init+0x20>)
{
 800af64:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800af66:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800af68:	4b06      	ldr	r3, [pc, #24]	; (800af84 <CRC_Init+0x24>)
 800af6a:	6003      	str	r3, [r0, #0]
 800af6c:	2300      	movs	r3, #0
 800af6e:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800af70:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800af72:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800af74:	3303      	adds	r3, #3
 800af76:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800af78:	f004 fdbe 	bl	800faf8 <HAL_CRC_Init>
}
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	20006bfc 	.word	0x20006bfc
 800af84:	40023000 	.word	0x40023000

0800af88 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800af88:	2340      	movs	r3, #64	; 0x40
 800af8a:	4a05      	ldr	r2, [pc, #20]	; (800afa0 <HAL_CRC_MspInit+0x18>)
{
 800af8c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800af8e:	6951      	ldr	r1, [r2, #20]
 800af90:	4319      	orrs	r1, r3
 800af92:	6151      	str	r1, [r2, #20]
 800af94:	6952      	ldr	r2, [r2, #20]
 800af96:	4013      	ands	r3, r2
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	9b01      	ldr	r3, [sp, #4]
}
 800af9c:	b002      	add	sp, #8
 800af9e:	4770      	bx	lr
 800afa0:	40021000 	.word	0x40021000

0800afa4 <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800afa4:	2300      	movs	r3, #0
{
 800afa6:	b570      	push	{r4, r5, r6, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	0005      	movs	r5, r0
 800afac:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800afae:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800afb0:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800afb2:	2d00      	cmp	r5, #0
 800afb4:	d019      	beq.n	800afea <CalculateCRC8+0x46>
 800afb6:	2900      	cmp	r1, #0
 800afb8:	d017      	beq.n	800afea <CalculateCRC8+0x46>
	if(size < 4)
 800afba:	2903      	cmp	r1, #3
 800afbc:	d817      	bhi.n	800afee <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800afbe:	466a      	mov	r2, sp
 800afc0:	782b      	ldrb	r3, [r5, #0]
 800afc2:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800afc4:	2901      	cmp	r1, #1
 800afc6:	d00a      	beq.n	800afde <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800afc8:	2300      	movs	r3, #0
 800afca:	3c02      	subs	r4, #2
 800afcc:	b2a4      	uxth	r4, r4
 800afce:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800afd0:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800afd2:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800afd4:	5cea      	ldrb	r2, [r5, r3]
 800afd6:	3104      	adds	r1, #4
 800afd8:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800afda:	429c      	cmp	r4, r3
 800afdc:	d1f8      	bne.n	800afd0 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800afde:	2201      	movs	r2, #1
 800afe0:	a901      	add	r1, sp, #4
 800afe2:	4814      	ldr	r0, [pc, #80]	; (800b034 <CalculateCRC8+0x90>)
 800afe4:	f004 fde6 	bl	800fbb4 <HAL_CRC_Calculate>
 800afe8:	b2c0      	uxtb	r0, r0
}
 800afea:	b002      	add	sp, #8
 800afec:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800afee:	4e11      	ldr	r6, [pc, #68]	; (800b034 <CalculateCRC8+0x90>)
 800aff0:	088a      	lsrs	r2, r1, #2
 800aff2:	0030      	movs	r0, r6
 800aff4:	0029      	movs	r1, r5
 800aff6:	f004 fddd 	bl	800fbb4 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800affa:	2203      	movs	r2, #3
 800affc:	0013      	movs	r3, r2
 800affe:	4023      	ands	r3, r4
 800b000:	d015      	beq.n	800b02e <CalculateCRC8+0x8a>
 800b002:	3b01      	subs	r3, #1
 800b004:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800b006:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800b008:	4394      	bics	r4, r2
 800b00a:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800b00c:	1c62      	adds	r2, r4, #1
 800b00e:	5d28      	ldrb	r0, [r5, r4]
 800b010:	466c      	mov	r4, sp
 800b012:	3404      	adds	r4, #4
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800b018:	4299      	cmp	r1, r3
 800b01a:	d003      	beq.n	800b024 <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800b01c:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b01e:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800b020:	2b04      	cmp	r3, #4
 800b022:	d1f3      	bne.n	800b00c <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b024:	2201      	movs	r2, #1
 800b026:	a901      	add	r1, sp, #4
 800b028:	0030      	movs	r0, r6
 800b02a:	f004 fd99 	bl	800fb60 <HAL_CRC_Accumulate>
 800b02e:	b2c0      	uxtb	r0, r0
 800b030:	e7db      	b.n	800afea <CalculateCRC8+0x46>
 800b032:	46c0      	nop			; (mov r8, r8)
 800b034:	20006bfc 	.word	0x20006bfc

0800b038 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	000d      	movs	r5, r1
 800b03c:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b03e:	4c25      	ldr	r4, [pc, #148]	; (800b0d4 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b040:	f005 fb4c 	bl	80106dc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b044:	4924      	ldr	r1, [pc, #144]	; (800b0d8 <EE_VerifyPageFullWriteVariable+0xa0>)
 800b046:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b048:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b04a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b04c:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d105      	bne.n	800b05e <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800b052:	4b22      	ldr	r3, [pc, #136]	; (800b0dc <EE_VerifyPageFullWriteVariable+0xa4>)
 800b054:	429a      	cmp	r2, r3
 800b056:	d007      	beq.n	800b068 <EE_VerifyPageFullWriteVariable+0x30>
 800b058:	4a21      	ldr	r2, [pc, #132]	; (800b0e0 <EE_VerifyPageFullWriteVariable+0xa8>)
 800b05a:	0023      	movs	r3, r4
 800b05c:	e007      	b.n	800b06e <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800b05e:	2a00      	cmp	r2, #0
 800b060:	d122      	bne.n	800b0a8 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800b062:	4a1e      	ldr	r2, [pc, #120]	; (800b0dc <EE_VerifyPageFullWriteVariable+0xa4>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d0f7      	beq.n	800b058 <EE_VerifyPageFullWriteVariable+0x20>
 800b068:	000c      	movs	r4, r1
 800b06a:	000b      	movs	r3, r1
 800b06c:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	d103      	bne.n	800b07c <EE_VerifyPageFullWriteVariable+0x44>
 800b074:	e009      	b.n	800b08a <EE_VerifyPageFullWriteVariable+0x52>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	d006      	beq.n	800b08a <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b07c:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b07e:	42a2      	cmp	r2, r4
 800b080:	d8f9      	bhi.n	800b076 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800b082:	f005 fb3d 	bl	8010700 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b086:	2080      	movs	r0, #128	; 0x80
}
 800b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b08a:	002a      	movs	r2, r5
 800b08c:	2300      	movs	r3, #0
 800b08e:	0021      	movs	r1, r4
 800b090:	2001      	movs	r0, #1
 800b092:	f005 fb83 	bl	801079c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b096:	4814      	ldr	r0, [pc, #80]	; (800b0e8 <EE_VerifyPageFullWriteVariable+0xb0>)
 800b098:	f005 fb3c 	bl	8010714 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d005      	beq.n	800b0ac <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800b0a0:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <EE_VerifyPageFullWriteVariable+0xb4>)
 800b0a2:	69d8      	ldr	r0, [r3, #28]
 800b0a4:	b280      	uxth	r0, r0
 800b0a6:	e7ef      	b.n	800b088 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800b0a8:	20ab      	movs	r0, #171	; 0xab
 800b0aa:	e7ed      	b.n	800b088 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b0ac:	2701      	movs	r7, #1
 800b0ae:	4d10      	ldr	r5, [pc, #64]	; (800b0f0 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b0b0:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b0b2:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b0b4:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b0b6:	43bb      	bics	r3, r7
 800b0b8:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f005 fb6d 	bl	801079c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b0c2:	4809      	ldr	r0, [pc, #36]	; (800b0e8 <EE_VerifyPageFullWriteVariable+0xb0>)
 800b0c4:	f005 fb26 	bl	8010714 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d1e9      	bne.n	800b0a0 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b0cc:	692b      	ldr	r3, [r5, #16]
 800b0ce:	43bb      	bics	r3, r7
 800b0d0:	612b      	str	r3, [r5, #16]
 800b0d2:	e7e5      	b.n	800b0a0 <EE_VerifyPageFullWriteVariable+0x68>
 800b0d4:	0801f000 	.word	0x0801f000
 800b0d8:	0801e000 	.word	0x0801e000
 800b0dc:	0000eeee 	.word	0x0000eeee
 800b0e0:	0801fffe 	.word	0x0801fffe
 800b0e4:	0801effe 	.word	0x0801effe
 800b0e8:	0000c350 	.word	0x0000c350
 800b0ec:	20006d78 	.word	0x20006d78
 800b0f0:	40022000 	.word	0x40022000

0800b0f4 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b0f4:	4b11      	ldr	r3, [pc, #68]	; (800b13c <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b0f6:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b0f8:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b0fa:	4b11      	ldr	r3, [pc, #68]	; (800b140 <EE_ReadVariable+0x4c>)
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b100:	2a00      	cmp	r2, #0
 800b102:	d005      	beq.n	800b110 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800b104:	2b00      	cmp	r3, #0
 800b106:	d117      	bne.n	800b138 <EE_ReadVariable+0x44>
 800b108:	4b0e      	ldr	r3, [pc, #56]	; (800b144 <EE_ReadVariable+0x50>)
 800b10a:	4c0f      	ldr	r4, [pc, #60]	; (800b148 <EE_ReadVariable+0x54>)
 800b10c:	001a      	movs	r2, r3
 800b10e:	e002      	b.n	800b116 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800b110:	4b0e      	ldr	r3, [pc, #56]	; (800b14c <EE_ReadVariable+0x58>)
 800b112:	4c0f      	ldr	r4, [pc, #60]	; (800b150 <EE_ReadVariable+0x5c>)
 800b114:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800b116:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800b118:	4290      	cmp	r0, r2
 800b11a:	d103      	bne.n	800b124 <EE_ReadVariable+0x30>
 800b11c:	e007      	b.n	800b12e <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800b11e:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800b120:	4282      	cmp	r2, r0
 800b122:	d004      	beq.n	800b12e <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800b124:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800b126:	42a3      	cmp	r3, r4
 800b128:	d8f9      	bhi.n	800b11e <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b12a:	2001      	movs	r0, #1
}
 800b12c:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b12e:	3b02      	subs	r3, #2
 800b130:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800b132:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b134:	800b      	strh	r3, [r1, #0]
			break;
 800b136:	e7f9      	b.n	800b12c <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800b138:	20ab      	movs	r0, #171	; 0xab
 800b13a:	e7f7      	b.n	800b12c <EE_ReadVariable+0x38>
 800b13c:	0801e000 	.word	0x0801e000
 800b140:	0801f000 	.word	0x0801f000
 800b144:	0801fffe 	.word	0x0801fffe
 800b148:	0801f002 	.word	0x0801f002
 800b14c:	0801effe 	.word	0x0801effe
 800b150:	0801e002 	.word	0x0801e002

0800b154 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b156:	46d6      	mov	lr, sl
 800b158:	4646      	mov	r6, r8
 800b15a:	464f      	mov	r7, r9
 800b15c:	000c      	movs	r4, r1
 800b15e:	b5c0      	push	{r6, r7, lr}
 800b160:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800b162:	f005 fabb 	bl	80106dc <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b166:	0021      	movs	r1, r4
 800b168:	0030      	movs	r0, r6
 800b16a:	f7ff ff65 	bl	800b038 <EE_VerifyPageFullWriteVariable>
 800b16e:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800b170:	2880      	cmp	r0, #128	; 0x80
 800b172:	d007      	beq.n	800b184 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800b174:	f005 fac4 	bl	8010700 <HAL_FLASH_Lock>
}
 800b178:	0028      	movs	r0, r5
 800b17a:	bc1c      	pop	{r2, r3, r4}
 800b17c:	4690      	mov	r8, r2
 800b17e:	4699      	mov	r9, r3
 800b180:	46a2      	mov	sl, r4
 800b182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b184:	f005 faaa 	bl	80106dc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b188:	4935      	ldr	r1, [pc, #212]	; (800b260 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b18a:	4a36      	ldr	r2, [pc, #216]	; (800b264 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b18c:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b18e:	8813      	ldrh	r3, [r2, #0]
 800b190:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b192:	2800      	cmp	r0, #0
 800b194:	d013      	beq.n	800b1be <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800b196:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1eb      	bne.n	800b174 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b19c:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b19e:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b1a0:	4a31      	ldr	r2, [pc, #196]	; (800b268 <EE_WriteVariable+0x114>)
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4641      	mov	r1, r8
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	f005 faf8 	bl	801079c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b1ac:	482f      	ldr	r0, [pc, #188]	; (800b26c <EE_WriteVariable+0x118>)
 800b1ae:	f005 fab1 	bl	8010714 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d006      	beq.n	800b1c4 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800b1b6:	4b2e      	ldr	r3, [pc, #184]	; (800b270 <EE_WriteVariable+0x11c>)
 800b1b8:	69dd      	ldr	r5, [r3, #28]
 800b1ba:	b2ad      	uxth	r5, r5
 800b1bc:	e7da      	b.n	800b174 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b1be:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b1c0:	4690      	mov	r8, r2
 800b1c2:	e7ed      	b.n	800b1a0 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4a2b      	ldr	r2, [pc, #172]	; (800b274 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b1c8:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b1ca:	6913      	ldr	r3, [r2, #16]
 800b1cc:	438b      	bics	r3, r1
 800b1ce:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b1d0:	0021      	movs	r1, r4
 800b1d2:	f7ff ff31 	bl	800b038 <EE_VerifyPageFullWriteVariable>
 800b1d6:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800b1d8:	d1cc      	bne.n	800b174 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b1da:	4b27      	ldr	r3, [pc, #156]	; (800b278 <EE_WriteVariable+0x124>)
 800b1dc:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b1de:	4f27      	ldr	r7, [pc, #156]	; (800b27c <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b1e0:	469a      	mov	sl, r3
 800b1e2:	e003      	b.n	800b1ec <EE_WriteVariable+0x98>
 800b1e4:	3401      	adds	r4, #1
 800b1e6:	b2a4      	uxth	r4, r4
 800b1e8:	4554      	cmp	r4, sl
 800b1ea:	d00f      	beq.n	800b20c <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	d0f9      	beq.n	800b1e4 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b1f0:	0039      	movs	r1, r7
 800b1f2:	0020      	movs	r0, r4
 800b1f4:	f7ff ff7e 	bl	800b0f4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800b1f8:	2801      	cmp	r0, #1
 800b1fa:	d0f3      	beq.n	800b1e4 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b1fc:	8839      	ldrh	r1, [r7, #0]
 800b1fe:	0020      	movs	r0, r4
 800b200:	f7ff ff1a 	bl	800b038 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800b204:	2800      	cmp	r0, #0
 800b206:	d0ed      	beq.n	800b1e4 <EE_WriteVariable+0x90>
 800b208:	0005      	movs	r5, r0
 800b20a:	e7b3      	b.n	800b174 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800b20c:	4648      	mov	r0, r9
 800b20e:	f005 fb95 	bl	801093c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b212:	4816      	ldr	r0, [pc, #88]	; (800b26c <EE_WriteVariable+0x118>)
 800b214:	f005 fa7e 	bl	8010714 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b218:	2800      	cmp	r0, #0
 800b21a:	d1cc      	bne.n	800b1b6 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800b21c:	2080      	movs	r0, #128	; 0x80
 800b21e:	0100      	lsls	r0, r0, #4
 800b220:	4448      	add	r0, r9
 800b222:	f005 fb8b 	bl	801093c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b226:	4811      	ldr	r0, [pc, #68]	; (800b26c <EE_WriteVariable+0x118>)
 800b228:	f005 fa74 	bl	8010714 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1c2      	bne.n	800b1b6 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b230:	2202      	movs	r2, #2
 800b232:	4c10      	ldr	r4, [pc, #64]	; (800b274 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b234:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b236:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b238:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b23a:	4393      	bics	r3, r2
 800b23c:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b23e:	2200      	movs	r2, #0
 800b240:	2300      	movs	r3, #0
 800b242:	f005 faab 	bl	801079c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b246:	4809      	ldr	r0, [pc, #36]	; (800b26c <EE_WriteVariable+0x118>)
 800b248:	f005 fa64 	bl	8010714 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d1b2      	bne.n	800b1b6 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b250:	2201      	movs	r2, #1
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	4393      	bics	r3, r2
 800b256:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800b258:	f005 fa52 	bl	8010700 <HAL_FLASH_Lock>
 800b25c:	e78a      	b.n	800b174 <EE_WriteVariable+0x20>
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	0801e000 	.word	0x0801e000
 800b264:	0801f000 	.word	0x0801f000
 800b268:	0000eeee 	.word	0x0000eeee
 800b26c:	0000c350 	.word	0x0000c350
 800b270:	20006d78 	.word	0x20006d78
 800b274:	40022000 	.word	0x40022000
 800b278:	00000401 	.word	0x00000401
 800b27c:	200023b8 	.word	0x200023b8

0800b280 <EE_Format>:
uint16_t EE_Format(void){
 800b280:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800b282:	f005 fa2b 	bl	80106dc <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b286:	481f      	ldr	r0, [pc, #124]	; (800b304 <EE_Format+0x84>)
 800b288:	f005 fb58 	bl	801093c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b28c:	481e      	ldr	r0, [pc, #120]	; (800b308 <EE_Format+0x88>)
 800b28e:	f005 fa41 	bl	8010714 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b292:	2800      	cmp	r0, #0
 800b294:	d003      	beq.n	800b29e <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800b296:	4b1d      	ldr	r3, [pc, #116]	; (800b30c <EE_Format+0x8c>)
 800b298:	69d8      	ldr	r0, [r3, #28]
 800b29a:	b280      	uxth	r0, r0
}
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b29e:	481c      	ldr	r0, [pc, #112]	; (800b310 <EE_Format+0x90>)
 800b2a0:	f005 fb4c 	bl	801093c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b2a4:	4818      	ldr	r0, [pc, #96]	; (800b308 <EE_Format+0x88>)
 800b2a6:	f005 fa35 	bl	8010714 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d1f3      	bne.n	800b296 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	4c18      	ldr	r4, [pc, #96]	; (800b314 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b2b2:	4914      	ldr	r1, [pc, #80]	; (800b304 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b2b4:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b2b6:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b2b8:	4393      	bics	r3, r2
 800b2ba:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f005 fa6c 	bl	801079c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b2c4:	4810      	ldr	r0, [pc, #64]	; (800b308 <EE_Format+0x88>)
 800b2c6:	f005 fa25 	bl	8010714 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d1e3      	bne.n	800b296 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b2ce:	2501      	movs	r5, #1
 800b2d0:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b2d2:	4811      	ldr	r0, [pc, #68]	; (800b318 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b2d4:	43ab      	bics	r3, r5
 800b2d6:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b2d8:	f005 fb30 	bl	801093c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b2dc:	480a      	ldr	r0, [pc, #40]	; (800b308 <EE_Format+0x88>)
 800b2de:	f005 fa19 	bl	8010714 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d1d7      	bne.n	800b296 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b2e6:	480d      	ldr	r0, [pc, #52]	; (800b31c <EE_Format+0x9c>)
 800b2e8:	f005 fb28 	bl	801093c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b2ec:	4806      	ldr	r0, [pc, #24]	; (800b308 <EE_Format+0x88>)
 800b2ee:	f005 fa11 	bl	8010714 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1cf      	bne.n	800b296 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	43ab      	bics	r3, r5
 800b2fa:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800b2fc:	f005 fa00 	bl	8010700 <HAL_FLASH_Lock>
	return FlashStatus;
 800b300:	2000      	movs	r0, #0
 800b302:	e7cb      	b.n	800b29c <EE_Format+0x1c>
 800b304:	0801e000 	.word	0x0801e000
 800b308:	0000c350 	.word	0x0000c350
 800b30c:	20006d78 	.word	0x20006d78
 800b310:	0801e800 	.word	0x0801e800
 800b314:	40022000 	.word	0x40022000
 800b318:	0801f000 	.word	0x0801f000
 800b31c:	0801f800 	.word	0x0801f800

0800b320 <EE_Init>:
uint16_t EE_Init(void){
 800b320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b322:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b324:	4c9d      	ldr	r4, [pc, #628]	; (800b59c <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800b326:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b328:	4d9d      	ldr	r5, [pc, #628]	; (800b5a0 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800b32a:	f005 f9d7 	bl	80106dc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b32e:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800b330:	499c      	ldr	r1, [pc, #624]	; (800b5a4 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b332:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b334:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b336:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800b338:	428b      	cmp	r3, r1
 800b33a:	d100      	bne.n	800b33e <EE_Init+0x1e>
 800b33c:	e06f      	b.n	800b41e <EE_Init+0xfe>
 800b33e:	489a      	ldr	r0, [pc, #616]	; (800b5a8 <EE_Init+0x288>)
 800b340:	4283      	cmp	r3, r0
 800b342:	d05c      	beq.n	800b3fe <EE_Init+0xde>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00e      	beq.n	800b366 <EE_Init+0x46>
			FlashStatus =EE_Format();
 800b348:	f7ff ff9a 	bl	800b280 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b34c:	4897      	ldr	r0, [pc, #604]	; (800b5ac <EE_Init+0x28c>)
 800b34e:	f005 f9e1 	bl	8010714 <FLASH_WaitForLastOperation>
 800b352:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800b354:	2d00      	cmp	r5, #0
 800b356:	d102      	bne.n	800b35e <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800b358:	f005 f9d2 	bl	8010700 <HAL_FLASH_Lock>
	return HAL_OK;
 800b35c:	2500      	movs	r5, #0
}
 800b35e:	0028      	movs	r0, r5
 800b360:	bc04      	pop	{r2}
 800b362:	4690      	mov	r8, r2
 800b364:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800b366:	2a00      	cmp	r2, #0
 800b368:	d0ee      	beq.n	800b348 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800b36a:	4282      	cmp	r2, r0
 800b36c:	d100      	bne.n	800b370 <EE_Init+0x50>
 800b36e:	e103      	b.n	800b578 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b370:	4b8f      	ldr	r3, [pc, #572]	; (800b5b0 <EE_Init+0x290>)
	int16_t x =-1;
 800b372:	2601      	movs	r6, #1
 800b374:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b376:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b378:	4f8e      	ldr	r7, [pc, #568]	; (800b5b4 <EE_Init+0x294>)
	int16_t x =-1;
 800b37a:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b37c:	883b      	ldrh	r3, [r7, #0]
 800b37e:	b2a5      	uxth	r5, r4
 800b380:	42ab      	cmp	r3, r5
 800b382:	d100      	bne.n	800b386 <EE_Init+0x66>
						x =VarIdx;
 800b384:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b386:	42b4      	cmp	r4, r6
 800b388:	d010      	beq.n	800b3ac <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b38a:	4641      	mov	r1, r8
 800b38c:	0028      	movs	r0, r5
 800b38e:	f7ff feb1 	bl	800b0f4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b392:	2801      	cmp	r0, #1
 800b394:	d00a      	beq.n	800b3ac <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b396:	4643      	mov	r3, r8
 800b398:	0028      	movs	r0, r5
 800b39a:	8819      	ldrh	r1, [r3, #0]
 800b39c:	f7ff fe4c 	bl	800b038 <EE_VerifyPageFullWriteVariable>
 800b3a0:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3a2:	4882      	ldr	r0, [pc, #520]	; (800b5ac <EE_Init+0x28c>)
 800b3a4:	f005 f9b6 	bl	8010714 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1d8      	bne.n	800b35e <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b3ac:	4b82      	ldr	r3, [pc, #520]	; (800b5b8 <EE_Init+0x298>)
 800b3ae:	3401      	adds	r4, #1
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	d1e3      	bne.n	800b37c <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4979      	ldr	r1, [pc, #484]	; (800b5a0 <EE_Init+0x280>)
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	f005 f9ee 	bl	801079c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3c0:	487a      	ldr	r0, [pc, #488]	; (800b5ac <EE_Init+0x28c>)
 800b3c2:	f005 f9a7 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d125      	bne.n	800b416 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	4c7b      	ldr	r4, [pc, #492]	; (800b5bc <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b3ce:	4873      	ldr	r0, [pc, #460]	; (800b59c <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	4393      	bics	r3, r2
 800b3d4:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b3d6:	f005 fab1 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3da:	4874      	ldr	r0, [pc, #464]	; (800b5ac <EE_Init+0x28c>)
 800b3dc:	f005 f99a 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d118      	bne.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b3e4:	4876      	ldr	r0, [pc, #472]	; (800b5c0 <EE_Init+0x2a0>)
 800b3e6:	f005 faa9 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3ea:	4870      	ldr	r0, [pc, #448]	; (800b5ac <EE_Init+0x28c>)
 800b3ec:	f005 f992 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d110      	bne.n	800b416 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	4393      	bics	r3, r2
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	e7ac      	b.n	800b358 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d07b      	beq.n	800b4fa <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800b402:	428a      	cmp	r2, r1
 800b404:	d100      	bne.n	800b408 <EE_Init+0xe8>
 800b406:	e08f      	b.n	800b528 <EE_Init+0x208>
				FlashStatus =EE_Format();
 800b408:	f7ff ff3a 	bl	800b280 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b40c:	4867      	ldr	r0, [pc, #412]	; (800b5ac <EE_Init+0x28c>)
 800b40e:	f005 f981 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b412:	2800      	cmp	r0, #0
 800b414:	d0a0      	beq.n	800b358 <EE_Init+0x38>
						return pFlash.ErrorCode;
 800b416:	4b6b      	ldr	r3, [pc, #428]	; (800b5c4 <EE_Init+0x2a4>)
 800b418:	69dd      	ldr	r5, [r3, #28]
 800b41a:	b2ad      	uxth	r5, r5
 800b41c:	e79f      	b.n	800b35e <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d143      	bne.n	800b4aa <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b422:	4b63      	ldr	r3, [pc, #396]	; (800b5b0 <EE_Init+0x290>)
	int16_t x =-1;
 800b424:	2601      	movs	r6, #1
 800b426:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b428:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b42a:	4f67      	ldr	r7, [pc, #412]	; (800b5c8 <EE_Init+0x2a8>)
	int16_t x =-1;
 800b42c:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b42e:	883b      	ldrh	r3, [r7, #0]
 800b430:	b2a5      	uxth	r5, r4
 800b432:	42ab      	cmp	r3, r5
 800b434:	d100      	bne.n	800b438 <EE_Init+0x118>
						x =VarIdx;
 800b436:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b438:	42b4      	cmp	r4, r6
 800b43a:	d011      	beq.n	800b460 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b43c:	4641      	mov	r1, r8
 800b43e:	0028      	movs	r0, r5
 800b440:	f7ff fe58 	bl	800b0f4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b444:	2801      	cmp	r0, #1
 800b446:	d00b      	beq.n	800b460 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b448:	4643      	mov	r3, r8
 800b44a:	0028      	movs	r0, r5
 800b44c:	8819      	ldrh	r1, [r3, #0]
 800b44e:	f7ff fdf3 	bl	800b038 <EE_VerifyPageFullWriteVariable>
 800b452:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b454:	4855      	ldr	r0, [pc, #340]	; (800b5ac <EE_Init+0x28c>)
 800b456:	f005 f95d 	bl	8010714 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d000      	beq.n	800b460 <EE_Init+0x140>
 800b45e:	e77e      	b.n	800b35e <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b460:	4b55      	ldr	r3, [pc, #340]	; (800b5b8 <EE_Init+0x298>)
 800b462:	3401      	adds	r4, #1
 800b464:	429c      	cmp	r4, r3
 800b466:	d1e2      	bne.n	800b42e <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b468:	2200      	movs	r2, #0
 800b46a:	2300      	movs	r3, #0
 800b46c:	494b      	ldr	r1, [pc, #300]	; (800b59c <EE_Init+0x27c>)
 800b46e:	2001      	movs	r0, #1
 800b470:	f005 f994 	bl	801079c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b474:	484d      	ldr	r0, [pc, #308]	; (800b5ac <EE_Init+0x28c>)
 800b476:	f005 f94d 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d1cb      	bne.n	800b416 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b47e:	2201      	movs	r2, #1
 800b480:	4c4e      	ldr	r4, [pc, #312]	; (800b5bc <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b482:	4847      	ldr	r0, [pc, #284]	; (800b5a0 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	4393      	bics	r3, r2
 800b488:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b48a:	f005 fa57 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b48e:	4847      	ldr	r0, [pc, #284]	; (800b5ac <EE_Init+0x28c>)
 800b490:	f005 f940 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b494:	2800      	cmp	r0, #0
 800b496:	d1be      	bne.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b498:	484c      	ldr	r0, [pc, #304]	; (800b5cc <EE_Init+0x2ac>)
 800b49a:	f005 fa4f 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b49e:	4843      	ldr	r0, [pc, #268]	; (800b5ac <EE_Init+0x28c>)
 800b4a0:	f005 f938 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0a5      	beq.n	800b3f4 <EE_Init+0xd4>
 800b4a8:	e7b5      	b.n	800b416 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800b4aa:	4b3f      	ldr	r3, [pc, #252]	; (800b5a8 <EE_Init+0x288>)
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d1ab      	bne.n	800b408 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b4b0:	0028      	movs	r0, r5
 800b4b2:	f005 fa43 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4b6:	483d      	ldr	r0, [pc, #244]	; (800b5ac <EE_Init+0x28c>)
 800b4b8:	f005 f92c 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1aa      	bne.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b4c0:	4842      	ldr	r0, [pc, #264]	; (800b5cc <EE_Init+0x2ac>)
 800b4c2:	f005 fa3b 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4c6:	4839      	ldr	r0, [pc, #228]	; (800b5ac <EE_Init+0x28c>)
 800b4c8:	f005 f924 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1a2      	bne.n	800b416 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	4d3a      	ldr	r5, [pc, #232]	; (800b5bc <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b4d4:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b4d6:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b4d8:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b4da:	4393      	bics	r3, r2
 800b4dc:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f005 f95b 	bl	801079c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4e6:	4831      	ldr	r0, [pc, #196]	; (800b5ac <EE_Init+0x28c>)
 800b4e8:	f005 f914 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d192      	bne.n	800b416 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	692b      	ldr	r3, [r5, #16]
 800b4f4:	4393      	bics	r3, r2
 800b4f6:	612b      	str	r3, [r5, #16]
 800b4f8:	e72e      	b.n	800b358 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b4fa:	0020      	movs	r0, r4
 800b4fc:	f005 fa1e 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b500:	482a      	ldr	r0, [pc, #168]	; (800b5ac <EE_Init+0x28c>)
 800b502:	f005 f907 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b506:	2800      	cmp	r0, #0
 800b508:	d185      	bne.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b50a:	482d      	ldr	r0, [pc, #180]	; (800b5c0 <EE_Init+0x2a0>)
 800b50c:	f005 fa16 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b510:	4826      	ldr	r0, [pc, #152]	; (800b5ac <EE_Init+0x28c>)
 800b512:	f005 f8ff 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b516:	2800      	cmp	r0, #0
 800b518:	d000      	beq.n	800b51c <EE_Init+0x1fc>
 800b51a:	e77c      	b.n	800b416 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b51c:	2102      	movs	r1, #2
 800b51e:	4a27      	ldr	r2, [pc, #156]	; (800b5bc <EE_Init+0x29c>)
 800b520:	6913      	ldr	r3, [r2, #16]
 800b522:	438b      	bics	r3, r1
 800b524:	6113      	str	r3, [r2, #16]
 800b526:	e717      	b.n	800b358 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b528:	0020      	movs	r0, r4
 800b52a:	f005 fa07 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b52e:	481f      	ldr	r0, [pc, #124]	; (800b5ac <EE_Init+0x28c>)
 800b530:	f005 f8f0 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b534:	2800      	cmp	r0, #0
 800b536:	d000      	beq.n	800b53a <EE_Init+0x21a>
 800b538:	e76d      	b.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b53a:	4821      	ldr	r0, [pc, #132]	; (800b5c0 <EE_Init+0x2a0>)
 800b53c:	f005 f9fe 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b540:	481a      	ldr	r0, [pc, #104]	; (800b5ac <EE_Init+0x28c>)
 800b542:	f005 f8e7 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b546:	2800      	cmp	r0, #0
 800b548:	d000      	beq.n	800b54c <EE_Init+0x22c>
 800b54a:	e764      	b.n	800b416 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b54c:	2202      	movs	r2, #2
 800b54e:	4c1b      	ldr	r4, [pc, #108]	; (800b5bc <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b550:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b552:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b554:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b556:	4393      	bics	r3, r2
 800b558:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	f005 f91d 	bl	801079c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b562:	4812      	ldr	r0, [pc, #72]	; (800b5ac <EE_Init+0x28c>)
 800b564:	f005 f8d6 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b568:	2800      	cmp	r0, #0
 800b56a:	d000      	beq.n	800b56e <EE_Init+0x24e>
 800b56c:	e753      	b.n	800b416 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b56e:	2201      	movs	r2, #1
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	4393      	bics	r3, r2
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	e6ef      	b.n	800b358 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b578:	0028      	movs	r0, r5
 800b57a:	f005 f9df 	bl	801093c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b57e:	480b      	ldr	r0, [pc, #44]	; (800b5ac <EE_Init+0x28c>)
 800b580:	f005 f8c8 	bl	8010714 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b584:	2800      	cmp	r0, #0
 800b586:	d000      	beq.n	800b58a <EE_Init+0x26a>
 800b588:	e745      	b.n	800b416 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b58a:	4810      	ldr	r0, [pc, #64]	; (800b5cc <EE_Init+0x2ac>)
 800b58c:	f005 f9d6 	bl	801093c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b590:	4806      	ldr	r0, [pc, #24]	; (800b5ac <EE_Init+0x28c>)
 800b592:	f005 f8bf 	bl	8010714 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b596:	2800      	cmp	r0, #0
 800b598:	d0c0      	beq.n	800b51c <EE_Init+0x1fc>
 800b59a:	e73c      	b.n	800b416 <EE_Init+0xf6>
 800b59c:	0801e000 	.word	0x0801e000
 800b5a0:	0801f000 	.word	0x0801f000
 800b5a4:	0000eeee 	.word	0x0000eeee
 800b5a8:	0000ffff 	.word	0x0000ffff
 800b5ac:	0000c350 	.word	0x0000c350
 800b5b0:	200023b8 	.word	0x200023b8
 800b5b4:	0801f006 	.word	0x0801f006
 800b5b8:	00000401 	.word	0x00000401
 800b5bc:	40022000 	.word	0x40022000
 800b5c0:	0801e800 	.word	0x0801e800
 800b5c4:	20006d78 	.word	0x20006d78
 800b5c8:	0801e006 	.word	0x0801e006
 800b5cc:	0801f800 	.word	0x0801f800

0800b5d0 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b5d0:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800b5d2:	b500      	push	{lr}
 800b5d4:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b5d6:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800b5d8:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800b5da:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b5dc:	4669      	mov	r1, sp
 800b5de:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800b5e0:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b5e2:	f005 f93f 	bl	8010864 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d102      	bne.n	800b5f0 <EraseSector+0x20>
 800b5ea:	9b00      	ldr	r3, [sp, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	d002      	beq.n	800b5f6 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5f0:	2216      	movs	r2, #22
 800b5f2:	4b02      	ldr	r3, [pc, #8]	; (800b5fc <EraseSector+0x2c>)
 800b5f4:	701a      	strb	r2, [r3, #0]

	return result;
}
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	b005      	add	sp, #20
 800b5fa:	bd00      	pop	{pc}
 800b5fc:	20000c44 	.word	0x20000c44

0800b600 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800b600:	2080      	movs	r0, #128	; 0x80
 800b602:	4b1f      	ldr	r3, [pc, #124]	; (800b680 <GPIO_Init+0x80>)
 800b604:	0300      	lsls	r0, r0, #12
 800b606:	6959      	ldr	r1, [r3, #20]
{
 800b608:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800b60a:	4301      	orrs	r1, r0
 800b60c:	6159      	str	r1, [r3, #20]
 800b60e:	695a      	ldr	r2, [r3, #20]
{
 800b610:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800b612:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800b614:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b616:	9200      	str	r2, [sp, #0]
 800b618:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800b61a:	6959      	ldr	r1, [r3, #20]
 800b61c:	0280      	lsls	r0, r0, #10
 800b61e:	4301      	orrs	r1, r0
 800b620:	6159      	str	r1, [r3, #20]
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800b626:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b628:	9201      	str	r2, [sp, #4]
 800b62a:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800b62c:	6959      	ldr	r1, [r3, #20]
 800b62e:	0340      	lsls	r0, r0, #13
 800b630:	4301      	orrs	r1, r0
 800b632:	6159      	str	r1, [r3, #20]
 800b634:	695a      	ldr	r2, [r3, #20]
 800b636:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b638:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800b63a:	9202      	str	r2, [sp, #8]
 800b63c:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800b63e:	6959      	ldr	r1, [r3, #20]
 800b640:	02c0      	lsls	r0, r0, #11
 800b642:	4301      	orrs	r1, r0
 800b644:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b646:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b648:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b64a:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800b64c:	4002      	ands	r2, r0
 800b64e:	9203      	str	r2, [sp, #12]
 800b650:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b652:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b654:	480b      	ldr	r0, [pc, #44]	; (800b684 <GPIO_Init+0x84>)
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b656:	430a      	orrs	r2, r1
 800b658:	615a      	str	r2, [r3, #20]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	400b      	ands	r3, r1
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800b662:	2380      	movs	r3, #128	; 0x80
 800b664:	01db      	lsls	r3, r3, #7
 800b666:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b668:	2301      	movs	r3, #1
 800b66a:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b66c:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b66e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b670:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b672:	3303      	adds	r3, #3
 800b674:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b676:	f005 f973 	bl	8010960 <HAL_GPIO_Init>
}
 800b67a:	b00b      	add	sp, #44	; 0x2c
 800b67c:	bd00      	pop	{pc}
 800b67e:	46c0      	nop			; (mov r8, r8)
 800b680:	40021000 	.word	0x40021000
 800b684:	48000800 	.word	0x48000800

0800b688 <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800b688:	2301      	movs	r3, #1
{
 800b68a:	b500      	push	{lr}
 800b68c:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800b68e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b690:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b692:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b694:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b696:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b698:	4803      	ldr	r0, [pc, #12]	; (800b6a8 <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b69a:	3303      	adds	r3, #3
 800b69c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b69e:	f005 f95f 	bl	8010960 <HAL_GPIO_Init>
}
 800b6a2:	b007      	add	sp, #28
 800b6a4:	bd00      	pop	{pc}
 800b6a6:	46c0      	nop			; (mov r8, r8)
 800b6a8:	48000400 	.word	0x48000400

0800b6ac <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	0015      	movs	r5, r2
 800b6b0:	001c      	movs	r4, r3
 800b6b2:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800b6b4:	f001 fe54 	bl	800d360 <GetUart>
	
	if (huart == &huart1) 
 800b6b8:	4a25      	ldr	r2, [pc, #148]	; (800b750 <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800b6ba:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800b6bc:	4290      	cmp	r0, r2
 800b6be:	d00d      	beq.n	800b6dc <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800b6c0:	4a24      	ldr	r2, [pc, #144]	; (800b754 <GetPortGPIOs+0xa8>)
 800b6c2:	4290      	cmp	r0, r2
 800b6c4:	d02e      	beq.n	800b724 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800b6c6:	4a24      	ldr	r2, [pc, #144]	; (800b758 <GetPortGPIOs+0xac>)
 800b6c8:	4290      	cmp	r0, r2
 800b6ca:	d014      	beq.n	800b6f6 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800b6cc:	4a23      	ldr	r2, [pc, #140]	; (800b75c <GetPortGPIOs+0xb0>)
 800b6ce:	4290      	cmp	r0, r2
 800b6d0:	d033      	beq.n	800b73a <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800b6d2:	4a23      	ldr	r2, [pc, #140]	; (800b760 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800b6d4:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d019      	beq.n	800b70e <GetPortGPIOs+0x62>
	
	return result;	
}
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b6dc:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800b6de:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b6e0:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800b6e2:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b6e4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800b6e6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800b6e8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800b6ea:	2380      	movs	r3, #128	; 0x80
 800b6ec:	9a04      	ldr	r2, [sp, #16]
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	e7f1      	b.n	800b6da <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800b6f6:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b6f8:	4b1a      	ldr	r3, [pc, #104]	; (800b764 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800b6fa:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b6fc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800b6fe:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800b700:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800b702:	2380      	movs	r3, #128	; 0x80
 800b704:	9a04      	ldr	r2, [sp, #16]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7e5      	b.n	800b6da <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b70e:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800b710:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b712:	05db      	lsls	r3, r3, #23
 800b714:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800b716:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800b718:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800b71a:	2320      	movs	r3, #32
 800b71c:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b71e:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800b720:	8013      	strh	r3, [r2, #0]
 800b722:	e7da      	b.n	800b6da <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b724:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800b726:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b728:	05db      	lsls	r3, r3, #23
 800b72a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800b72c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800b72e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800b730:	2308      	movs	r3, #8
 800b732:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b734:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800b736:	8013      	strh	r3, [r2, #0]
 800b738:	e7cf      	b.n	800b6da <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800b73a:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b73c:	4b09      	ldr	r3, [pc, #36]	; (800b764 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800b73e:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b740:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800b742:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800b744:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800b746:	2310      	movs	r3, #16
 800b748:	9a04      	ldr	r2, [sp, #16]
 800b74a:	8013      	strh	r3, [r2, #0]
 800b74c:	e7c5      	b.n	800b6da <GetPortGPIOs+0x2e>
 800b74e:	46c0      	nop			; (mov r8, r8)
 800b750:	20006aa0 	.word	0x20006aa0
 800b754:	20006b8c 	.word	0x20006b8c
 800b758:	20006980 	.word	0x20006980
 800b75c:	20006a30 	.word	0x20006a30
 800b760:	20006b18 	.word	0x20006b18
 800b764:	48000400 	.word	0x48000400

0800b768 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800b768:	2080      	movs	r0, #128	; 0x80
 800b76a:	4b38      	ldr	r3, [pc, #224]	; (800b84c <IsFactoryReset+0xe4>)
 800b76c:	0280      	lsls	r0, r0, #10
 800b76e:	6959      	ldr	r1, [r3, #20]
{
 800b770:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800b772:	4301      	orrs	r1, r0
 800b774:	6159      	str	r1, [r3, #20]
 800b776:	695a      	ldr	r2, [r3, #20]
{
 800b778:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800b77a:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b77c:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b77e:	9209      	str	r2, [sp, #36]	; 0x24
 800b780:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800b782:	6959      	ldr	r1, [r3, #20]
 800b784:	02c0      	lsls	r0, r0, #11
 800b786:	4301      	orrs	r1, r0
 800b788:	6159      	str	r1, [r3, #20]
 800b78a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b78c:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800b78e:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800b790:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b792:	920a      	str	r2, [sp, #40]	; 0x28
 800b794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800b796:	6959      	ldr	r1, [r3, #20]
 800b798:	0300      	lsls	r0, r0, #12
 800b79a:	4301      	orrs	r1, r0
 800b79c:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b79e:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b7a0:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b7a2:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800b7a4:	4002      	ands	r2, r0
 800b7a6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800b7aa:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b7ac:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	615a      	str	r2, [r3, #20]
 800b7b2:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b7b4:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800b7b6:	400b      	ands	r3, r1
 800b7b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b7bc:	230e      	movs	r3, #14
 800b7be:	446b      	add	r3, sp
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	002a      	movs	r2, r5
 800b7c4:	ab06      	add	r3, sp, #24
 800b7c6:	a905      	add	r1, sp, #20
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7ff ff6f 	bl	800b6ac <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b7ce:	aa04      	add	r2, sp, #16
 800b7d0:	ab08      	add	r3, sp, #32
 800b7d2:	a907      	add	r1, sp, #28
 800b7d4:	9400      	str	r4, [sp, #0]
 800b7d6:	2005      	movs	r0, #5
 800b7d8:	f7ff ff68 	bl	800b6ac <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7dc:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7de:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7e0:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b7e2:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b7e4:	a90d      	add	r1, sp, #52	; 0x34
 800b7e6:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b7e8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ea:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b7ec:	f005 f8b8 	bl	8010960 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b7f4:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b7f6:	a90d      	add	r1, sp, #52	; 0x34
 800b7f8:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b7fa:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7fc:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b7fe:	f005 f8af 	bl	8010960 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800b802:	8829      	ldrh	r1, [r5, #0]
 800b804:	2200      	movs	r2, #0
 800b806:	9805      	ldr	r0, [sp, #20]
 800b808:	f005 fa4a 	bl	8010ca0 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800b80c:	2005      	movs	r0, #5
 800b80e:	f001 fbab 	bl	800cf68 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800b812:	8821      	ldrh	r1, [r4, #0]
 800b814:	9808      	ldr	r0, [sp, #32]
 800b816:	f005 fa3d 	bl	8010c94 <HAL_GPIO_ReadPin>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d006      	beq.n	800b82c <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b81e:	2201      	movs	r2, #1
	return 0;
 800b820:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <IsFactoryReset+0xe8>)
 800b824:	4252      	negs	r2, r2
 800b826:	601a      	str	r2, [r3, #0]
}
 800b828:	b012      	add	sp, #72	; 0x48
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800b82c:	8829      	ldrh	r1, [r5, #0]
 800b82e:	2201      	movs	r2, #1
 800b830:	9805      	ldr	r0, [sp, #20]
 800b832:	f005 fa35 	bl	8010ca0 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800b836:	2005      	movs	r0, #5
 800b838:	f001 fb96 	bl	800cf68 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800b83c:	8821      	ldrh	r1, [r4, #0]
 800b83e:	9808      	ldr	r0, [sp, #32]
 800b840:	f005 fa28 	bl	8010c94 <HAL_GPIO_ReadPin>
 800b844:	2801      	cmp	r0, #1
 800b846:	d1ea      	bne.n	800b81e <IsFactoryReset+0xb6>
 800b848:	e7ee      	b.n	800b828 <IsFactoryReset+0xc0>
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	40021000 	.word	0x40021000
 800b850:	20007ff0 	.word	0x20007ff0

0800b854 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800b854:	4770      	bx	lr
 800b856:	46c0      	nop			; (mov r8, r8)

0800b858 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b858:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800b85a:	4d37      	ldr	r5, [pc, #220]	; (800b938 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b85c:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800b85e:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b860:	0006      	movs	r6, r0
 800b862:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800b864:	2b00      	cmp	r3, #0
 800b866:	d152      	bne.n	800b90e <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800b868:	2204      	movs	r2, #4
 800b86a:	4b34      	ldr	r3, [pc, #208]	; (800b93c <AddPortButton+0xe4>)
 800b86c:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800b86e:	250e      	movs	r5, #14
 800b870:	af04      	add	r7, sp, #16
 800b872:	446d      	add	r5, sp
 800b874:	002a      	movs	r2, r5
 800b876:	ab06      	add	r3, sp, #24
 800b878:	a905      	add	r1, sp, #20
 800b87a:	9700      	str	r7, [sp, #0]
 800b87c:	0020      	movs	r0, r4
 800b87e:	f7ff ff15 	bl	800b6ac <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800b882:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b884:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800b886:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b888:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b88a:	a907      	add	r1, sp, #28
 800b88c:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b88e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b890:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b892:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b894:	f005 f864 	bl	8010960 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800b898:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b89a:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800b89c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b89e:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b8a0:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b8a2:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b8a4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b8a6:	f005 f85b 	bl	8010960 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800b8aa:	00e2      	lsls	r2, r4, #3
 800b8ac:	4b24      	ldr	r3, [pc, #144]	; (800b940 <AddPortButton+0xe8>)
 800b8ae:	1912      	adds	r2, r2, r4
 800b8b0:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b8b2:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800b8b4:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b8b6:	2312      	movs	r3, #18
 800b8b8:	353a      	adds	r5, #58	; 0x3a
 800b8ba:	00ad      	lsls	r5, r5, #2
 800b8bc:	446b      	add	r3, sp
 800b8be:	0019      	movs	r1, r3
 800b8c0:	0028      	movs	r0, r5
 800b8c2:	f7ff fc17 	bl	800b0f4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d109      	bne.n	800b8de <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800b8ca:	466b      	mov	r3, sp
 800b8cc:	8a5b      	ldrh	r3, [r3, #18]
 800b8ce:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800b8d0:	091a      	lsrs	r2, r3, #4
 800b8d2:	42a2      	cmp	r2, r4
 800b8d4:	d103      	bne.n	800b8de <AddPortButton+0x86>
 800b8d6:	220f      	movs	r2, #15
 800b8d8:	4013      	ands	r3, r2
 800b8da:	42b3      	cmp	r3, r6
 800b8dc:	d014      	beq.n	800b908 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b8de:	466b      	mov	r3, sp
 800b8e0:	0324      	lsls	r4, r4, #12
 800b8e2:	0231      	lsls	r1, r6, #8
 800b8e4:	4321      	orrs	r1, r4
 800b8e6:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b8e8:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b8ea:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b8ec:	f7ff fc32 	bl	800b154 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	1c68      	adds	r0, r5, #1
 800b8f4:	f7ff fc2e 	bl	800b154 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	1ca8      	adds	r0, r5, #2
 800b8fc:	f7ff fc2a 	bl	800b154 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b900:	1ce8      	adds	r0, r5, #3
 800b902:	2100      	movs	r1, #0
 800b904:	f7ff fc26 	bl	800b154 <EE_WriteVariable>
	}

	return result;
}
 800b908:	2000      	movs	r0, #0
 800b90a:	b00d      	add	sp, #52	; 0x34
 800b90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800b90e:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <AddPortButton+0xec>)
 800b910:	008f      	lsls	r7, r1, #2
 800b912:	58f8      	ldr	r0, [r7, r3]
 800b914:	f001 fec6 	bl	800d6a4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800b918:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <AddPortButton+0xf0>)
 800b91a:	58f8      	ldr	r0, [r7, r3]
 800b91c:	f001 fec2 	bl	800d6a4 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800b920:	2104      	movs	r1, #4
 800b922:	4a06      	ldr	r2, [pc, #24]	; (800b93c <AddPortButton+0xe4>)
 800b924:	782b      	ldrb	r3, [r5, #0]
 800b926:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0a0      	beq.n	800b86e <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800b92c:	0020      	movs	r0, r4
 800b92e:	f001 fd17 	bl	800d360 <GetUart>
 800b932:	f006 fc1d 	bl	8012170 <HAL_UART_DeInit>
 800b936:	e79a      	b.n	800b86e <AddPortButton+0x16>
 800b938:	20000b43 	.word	0x20000b43
 800b93c:	20000c34 	.word	0x20000c34
 800b940:	200023bc 	.word	0x200023bc
 800b944:	20006904 	.word	0x20006904
 800b948:	200068e4 	.word	0x200068e4

0800b94c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800b950:	2300      	movs	r3, #0
 800b952:	4839      	ldr	r0, [pc, #228]	; (800ba38 <RemovePortButton+0xec>)
 800b954:	00e9      	lsls	r1, r5, #3
 800b956:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b958:	002c      	movs	r4, r5
	button[port].type = NONE;
 800b95a:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800b95c:	b082      	sub	sp, #8
	button[port].state = NONE;
 800b95e:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800b960:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800b962:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800b964:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800b966:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800b968:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800b96a:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800b96c:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800b96e:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b970:	466b      	mov	r3, sp
 800b972:	343a      	adds	r4, #58	; 0x3a
 800b974:	00a4      	lsls	r4, r4, #2
 800b976:	1d99      	adds	r1, r3, #6
 800b978:	0020      	movs	r0, r4
 800b97a:	f7ff fbbb 	bl	800b0f4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800b97e:	2800      	cmp	r0, #0
 800b980:	d02d      	beq.n	800b9de <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800b982:	0028      	movs	r0, r5
 800b984:	f001 fcec 	bl	800d360 <GetUart>

	if (huart->Instance == USART1) {
 800b988:	4a2c      	ldr	r2, [pc, #176]	; (800ba3c <RemovePortButton+0xf0>)
 800b98a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b98c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b98e:	4293      	cmp	r3, r2
 800b990:	d03d      	beq.n	800ba0e <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800b992:	4a2b      	ldr	r2, [pc, #172]	; (800ba40 <RemovePortButton+0xf4>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d03e      	beq.n	800ba16 <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800b998:	4a2a      	ldr	r2, [pc, #168]	; (800ba44 <RemovePortButton+0xf8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d03f      	beq.n	800ba1e <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800b99e:	4a2a      	ldr	r2, [pc, #168]	; (800ba48 <RemovePortButton+0xfc>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d01a      	beq.n	800b9da <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800b9a4:	4a29      	ldr	r2, [pc, #164]	; (800ba4c <RemovePortButton+0x100>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d03d      	beq.n	800ba26 <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800b9aa:	4a29      	ldr	r2, [pc, #164]	; (800ba50 <RemovePortButton+0x104>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d03e      	beq.n	800ba2e <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800b9b0:	4a28      	ldr	r2, [pc, #160]	; (800ba54 <RemovePortButton+0x108>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d011      	beq.n	800b9da <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800b9b6:	4a28      	ldr	r2, [pc, #160]	; (800ba58 <RemovePortButton+0x10c>)
 800b9b8:	4694      	mov	ip, r2
 800b9ba:	4463      	add	r3, ip
 800b9bc:	1e5c      	subs	r4, r3, #1
 800b9be:	41a3      	sbcs	r3, r4
 800b9c0:	425c      	negs	r4, r3
 800b9c2:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4b25      	ldr	r3, [pc, #148]	; (800ba5c <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b9c8:	4925      	ldr	r1, [pc, #148]	; (800ba60 <RemovePortButton+0x114>)
	portStatus[port] = FREE;
 800b9ca:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b9cc:	0030      	movs	r0, r6
 800b9ce:	3201      	adds	r2, #1
 800b9d0:	f006 fc1c 	bl	801220c <HAL_UART_Receive_IT>

	return result;
}
 800b9d4:	0020      	movs	r0, r4
 800b9d6:	b002      	add	sp, #8
 800b9d8:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 800b9da:	2400      	movs	r4, #0
 800b9dc:	e7f2      	b.n	800b9c4 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800b9de:	2100      	movs	r1, #0
 800b9e0:	0020      	movs	r0, r4
 800b9e2:	f7ff fbb7 	bl	800b154 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	1c60      	adds	r0, r4, #1
 800b9ea:	f7ff fbb3 	bl	800b154 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	1ca0      	adds	r0, r4, #2
 800b9f2:	f7ff fbaf 	bl	800b154 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	1ce0      	adds	r0, r4, #3
 800b9fa:	f7ff fbab 	bl	800b154 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800b9fe:	0028      	movs	r0, r5
 800ba00:	f001 fcae 	bl	800d360 <GetUart>
	if (huart->Instance == USART1) {
 800ba04:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <RemovePortButton+0xf0>)
 800ba06:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800ba08:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d1c1      	bne.n	800b992 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800ba0e:	f001 fad9 	bl	800cfc4 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800ba12:	2400      	movs	r4, #0
 800ba14:	e7d6      	b.n	800b9c4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800ba16:	f001 faed 	bl	800cff4 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800ba1a:	2400      	movs	r4, #0
 800ba1c:	e7d2      	b.n	800b9c4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800ba1e:	f001 fb01 	bl	800d024 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800ba22:	2400      	movs	r4, #0
 800ba24:	e7ce      	b.n	800b9c4 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800ba26:	f001 fb15 	bl	800d054 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800ba2a:	2400      	movs	r4, #0
 800ba2c:	e7ca      	b.n	800b9c4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800ba2e:	f001 fb29 	bl	800d084 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800ba32:	2400      	movs	r4, #0
 800ba34:	e7c6      	b.n	800b9c4 <RemovePortButton+0x78>
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	200023bc 	.word	0x200023bc
 800ba3c:	40013800 	.word	0x40013800
 800ba40:	40004400 	.word	0x40004400
 800ba44:	40004800 	.word	0x40004800
 800ba48:	40004c00 	.word	0x40004c00
 800ba4c:	40005000 	.word	0x40005000
 800ba50:	40011400 	.word	0x40011400
 800ba54:	40011800 	.word	0x40011800
 800ba58:	bffee400 	.word	0xbffee400
 800ba5c:	20000c34 	.word	0x20000c34
 800ba60:	20000c55 	.word	0x20000c55

0800ba64 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	464e      	mov	r6, r9
 800ba68:	4645      	mov	r5, r8
 800ba6a:	46de      	mov	lr, fp
 800ba6c:	4657      	mov	r7, sl
 800ba6e:	b5e0      	push	{r5, r6, r7, lr}
 800ba70:	b087      	sub	sp, #28
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	ab10      	add	r3, sp, #64	; 0x40
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	0005      	movs	r5, r0
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	ab11      	add	r3, sp, #68	; 0x44
 800ba7e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800ba80:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	ab12      	add	r3, sp, #72	; 0x48
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	469a      	mov	sl, r3
 800ba8a:	ab13      	add	r3, sp, #76	; 0x4c
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4699      	mov	r9, r3
 800ba90:	ab14      	add	r3, sp, #80	; 0x50
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	469b      	mov	fp, r3
 800ba96:	ab15      	add	r3, sp, #84	; 0x54
 800ba98:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800ba9a:	4b80      	ldr	r3, [pc, #512]	; (800bc9c <SetButtonEvents+0x238>)
 800ba9c:	4698      	mov	r8, r3
 800ba9e:	1963      	adds	r3, r4, r5
 800baa0:	4443      	add	r3, r8
 800baa2:	785e      	ldrb	r6, [r3, #1]
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	d050      	beq.n	800bb4a <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800baa8:	9e01      	ldr	r6, [sp, #4]
 800baaa:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800baac:	9e02      	ldr	r6, [sp, #8]
 800baae:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800bab0:	9e03      	ldr	r6, [sp, #12]
 800bab2:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800bab4:	4656      	mov	r6, sl
 800bab6:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800bab8:	464e      	mov	r6, r9
 800baba:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800babc:	465e      	mov	r6, fp
 800babe:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800bac0:	2801      	cmp	r0, #1
 800bac2:	d04b      	beq.n	800bb5c <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d000      	beq.n	800baca <SetButtonEvents+0x66>
 800bac8:	e076      	b.n	800bbb8 <SetButtonEvents+0x154>
 800baca:	2900      	cmp	r1, #0
 800bacc:	d000      	beq.n	800bad0 <SetButtonEvents+0x6c>
 800bace:	e0bf      	b.n	800bc50 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800bad0:	2601      	movs	r6, #1
 800bad2:	7a19      	ldrb	r1, [r3, #8]
 800bad4:	43b1      	bics	r1, r6
 800bad6:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800bad8:	2a00      	cmp	r2, #0
 800bada:	d142      	bne.n	800bb62 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800badc:	2302      	movs	r3, #2
 800bade:	4399      	bics	r1, r3
 800bae0:	1963      	adds	r3, r4, r5
 800bae2:	4443      	add	r3, r8
 800bae4:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d143      	bne.n	800bb74 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800baec:	2304      	movs	r3, #4
 800baee:	4399      	bics	r1, r3
 800baf0:	1963      	adds	r3, r4, r5
 800baf2:	4443      	add	r3, r8
 800baf4:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800baf6:	9b02      	ldr	r3, [sp, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d144      	bne.n	800bb86 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800bafc:	2308      	movs	r3, #8
 800bafe:	4399      	bics	r1, r3
 800bb00:	1963      	adds	r3, r4, r5
 800bb02:	4443      	add	r3, r8
 800bb04:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800bb06:	9b03      	ldr	r3, [sp, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d145      	bne.n	800bb98 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800bb0c:	2310      	movs	r3, #16
 800bb0e:	000a      	movs	r2, r1
 800bb10:	439a      	bics	r2, r3
 800bb12:	1963      	adds	r3, r4, r5
 800bb14:	4443      	add	r3, r8
 800bb16:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800bb18:	4653      	mov	r3, sl
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d100      	bne.n	800bb20 <SetButtonEvents+0xbc>
 800bb1e:	e09c      	b.n	800bc5a <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800bb20:	2120      	movs	r1, #32
 800bb22:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bb24:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800bb26:	1963      	adds	r3, r4, r5
 800bb28:	4443      	add	r3, r8
 800bb2a:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	d100      	bne.n	800bb32 <SetButtonEvents+0xce>
 800bb30:	e09d      	b.n	800bc6e <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bb32:	2240      	movs	r2, #64	; 0x40
 800bb34:	430a      	orrs	r2, r1
 800bb36:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800bb38:	465b      	mov	r3, fp
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d136      	bne.n	800bbac <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800bb3e:	217f      	movs	r1, #127	; 0x7f
 800bb40:	1963      	adds	r3, r4, r5
 800bb42:	4443      	add	r3, r8
 800bb44:	4011      	ands	r1, r2
 800bb46:	7219      	strb	r1, [r3, #8]
 800bb48:	e036      	b.n	800bbb8 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800bb4a:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800bb4c:	0020      	movs	r0, r4
 800bb4e:	b007      	add	sp, #28
 800bb50:	bc3c      	pop	{r2, r3, r4, r5}
 800bb52:	4690      	mov	r8, r2
 800bb54:	4699      	mov	r9, r3
 800bb56:	46a2      	mov	sl, r4
 800bb58:	46ab      	mov	fp, r5
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800bb5c:	7a19      	ldrb	r1, [r3, #8]
 800bb5e:	2301      	movs	r3, #1
 800bb60:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800bb62:	2202      	movs	r2, #2
 800bb64:	1963      	adds	r3, r4, r5
 800bb66:	4443      	add	r3, r8
 800bb68:	4311      	orrs	r1, r2
 800bb6a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bb6c:	2801      	cmp	r0, #1
 800bb6e:	d000      	beq.n	800bb72 <SetButtonEvents+0x10e>
 800bb70:	e08c      	b.n	800bc8c <SetButtonEvents+0x228>
 800bb72:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800bb74:	2204      	movs	r2, #4
 800bb76:	1963      	adds	r3, r4, r5
 800bb78:	4443      	add	r3, r8
 800bb7a:	4311      	orrs	r1, r2
 800bb7c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bb7e:	2801      	cmp	r0, #1
 800bb80:	d000      	beq.n	800bb84 <SetButtonEvents+0x120>
 800bb82:	e07f      	b.n	800bc84 <SetButtonEvents+0x220>
 800bb84:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800bb86:	2208      	movs	r2, #8
 800bb88:	1963      	adds	r3, r4, r5
 800bb8a:	4443      	add	r3, r8
 800bb8c:	4311      	orrs	r1, r2
 800bb8e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bb90:	2801      	cmp	r0, #1
 800bb92:	d000      	beq.n	800bb96 <SetButtonEvents+0x132>
 800bb94:	e07e      	b.n	800bc94 <SetButtonEvents+0x230>
 800bb96:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800bb98:	2210      	movs	r2, #16
 800bb9a:	1963      	adds	r3, r4, r5
 800bb9c:	4443      	add	r3, r8
 800bb9e:	4311      	orrs	r1, r2
 800bba0:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bba2:	2801      	cmp	r0, #1
 800bba4:	d16a      	bne.n	800bc7c <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bba6:	2260      	movs	r2, #96	; 0x60
 800bba8:	b2c9      	uxtb	r1, r1
 800bbaa:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800bbac:	2180      	movs	r1, #128	; 0x80
 800bbae:	1963      	adds	r3, r4, r5
 800bbb0:	4249      	negs	r1, r1
 800bbb2:	4443      	add	r3, r8
 800bbb4:	4311      	orrs	r1, r2
 800bbb6:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bbb8:	002e      	movs	r6, r5
 800bbba:	ab04      	add	r3, sp, #16
 800bbbc:	363a      	adds	r6, #58	; 0x3a
 800bbbe:	00b6      	lsls	r6, r6, #2
 800bbc0:	1d9f      	adds	r7, r3, #6
 800bbc2:	0039      	movs	r1, r7
 800bbc4:	0030      	movs	r0, r6
 800bbc6:	f7ff fa95 	bl	800b0f4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d1bd      	bne.n	800bb4a <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bbce:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800bbd0:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bbd2:	4444      	add	r4, r8
 800bbd4:	7a22      	ldrb	r2, [r4, #8]
 800bbd6:	b2d9      	uxtb	r1, r3
 800bbd8:	4291      	cmp	r1, r2
 800bbda:	d006      	beq.n	800bbea <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800bbdc:	0a19      	lsrs	r1, r3, #8
 800bbde:	0209      	lsls	r1, r1, #8
 800bbe0:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bbe2:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800bbe4:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bbe6:	f7ff fab5 	bl	800b154 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800bbea:	1c74      	adds	r4, r6, #1
 800bbec:	0039      	movs	r1, r7
 800bbee:	0020      	movs	r0, r4
 800bbf0:	f7ff fa80 	bl	800b0f4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800bbf4:	4652      	mov	r2, sl
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	0219      	lsls	r1, r3, #8
 800bbfa:	883b      	ldrh	r3, [r7, #0]
 800bbfc:	430a      	orrs	r2, r1
		if (temp16
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800bc02:	b291      	uxth	r1, r2
 800bc04:	0020      	movs	r0, r4
 800bc06:	f7ff faa5 	bl	800b154 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800bc0a:	1cb4      	adds	r4, r6, #2
 800bc0c:	0039      	movs	r1, r7
 800bc0e:	0020      	movs	r0, r4
 800bc10:	f7ff fa70 	bl	800b0f4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800bc14:	464a      	mov	r2, r9
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	0219      	lsls	r1, r3, #8
 800bc1a:	883b      	ldrh	r3, [r7, #0]
 800bc1c:	430a      	orrs	r2, r1
		if (temp16
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d003      	beq.n	800bc2a <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800bc22:	b291      	uxth	r1, r2
 800bc24:	0020      	movs	r0, r4
 800bc26:	f7ff fa95 	bl	800b154 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800bc2a:	3603      	adds	r6, #3
 800bc2c:	0039      	movs	r1, r7
 800bc2e:	0030      	movs	r0, r6
 800bc30:	f7ff fa60 	bl	800b0f4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800bc34:	465a      	mov	r2, fp
 800bc36:	9b03      	ldr	r3, [sp, #12]
	return result;
 800bc38:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800bc3a:	0219      	lsls	r1, r3, #8
 800bc3c:	883b      	ldrh	r3, [r7, #0]
 800bc3e:	430a      	orrs	r2, r1
		if (temp16
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d100      	bne.n	800bc46 <SetButtonEvents+0x1e2>
 800bc44:	e782      	b.n	800bb4c <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800bc46:	b291      	uxth	r1, r2
 800bc48:	0030      	movs	r0, r6
 800bc4a:	f7ff fa83 	bl	800b154 <EE_WriteVariable>
 800bc4e:	e77d      	b.n	800bb4c <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800bc50:	2601      	movs	r6, #1
 800bc52:	7a19      	ldrb	r1, [r3, #8]
 800bc54:	4331      	orrs	r1, r6
 800bc56:	7219      	strb	r1, [r3, #8]
 800bc58:	e73e      	b.n	800bad8 <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800bc5a:	2320      	movs	r3, #32
 800bc5c:	439a      	bics	r2, r3
 800bc5e:	1963      	adds	r3, r4, r5
 800bc60:	4443      	add	r3, r8
 800bc62:	0011      	movs	r1, r2
 800bc64:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bc66:	464a      	mov	r2, r9
 800bc68:	2a00      	cmp	r2, #0
 800bc6a:	d000      	beq.n	800bc6e <SetButtonEvents+0x20a>
 800bc6c:	e761      	b.n	800bb32 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bc6e:	2340      	movs	r3, #64	; 0x40
 800bc70:	000a      	movs	r2, r1
 800bc72:	439a      	bics	r2, r3
 800bc74:	1963      	adds	r3, r4, r5
 800bc76:	4443      	add	r3, r8
 800bc78:	721a      	strb	r2, [r3, #8]
 800bc7a:	e75d      	b.n	800bb38 <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d19b      	bne.n	800bbb8 <SetButtonEvents+0x154>
 800bc80:	7a1a      	ldrb	r2, [r3, #8]
 800bc82:	e749      	b.n	800bb18 <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d197      	bne.n	800bbb8 <SetButtonEvents+0x154>
 800bc88:	7a19      	ldrb	r1, [r3, #8]
 800bc8a:	e734      	b.n	800baf6 <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d193      	bne.n	800bbb8 <SetButtonEvents+0x154>
 800bc90:	7a19      	ldrb	r1, [r3, #8]
 800bc92:	e728      	b.n	800bae6 <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d18f      	bne.n	800bbb8 <SetButtonEvents+0x154>
 800bc98:	7a19      	ldrb	r1, [r3, #8]
 800bc9a:	e734      	b.n	800bb06 <SetButtonEvents+0xa2>
 800bc9c:	200023bc 	.word	0x200023bc

0800bca0 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800bca0:	4811      	ldr	r0, [pc, #68]	; (800bce8 <MX_ADC_Init+0x48>)
 800bca2:	4b12      	ldr	r3, [pc, #72]	; (800bcec <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800bca4:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bca6:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800bca8:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bcaa:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bcac:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bcae:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bcb0:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800bcb2:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bcb4:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800bcb6:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bcb8:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800bcba:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bcbc:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800bcbe:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800bcc0:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800bcc2:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800bcc4:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800bcc6:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bcc8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bcca:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800bccc:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bcce:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800bcd0:	f003 fbfe 	bl	800f4d0 <HAL_ADC_Init>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d002      	beq.n	800bcde <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800bcd8:	2064      	movs	r0, #100	; 0x64
 800bcda:	f003 fb1f 	bl	800f31c <HAL_Delay>
	ADC_flag = 1;
 800bcde:	2368      	movs	r3, #104	; 0x68
 800bce0:	2101      	movs	r1, #1
 800bce2:	4a03      	ldr	r2, [pc, #12]	; (800bcf0 <MX_ADC_Init+0x50>)
 800bce4:	54d1      	strb	r1, [r2, r3]
}
 800bce6:	bd10      	pop	{r4, pc}
 800bce8:	20006c20 	.word	0x20006c20
 800bcec:	40012400 	.word	0x40012400
 800bcf0:	200023bc 	.word	0x200023bc

0800bcf4 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800bcf4:	b500      	push	{lr}
 800bcf6:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800bcf8:	2214      	movs	r2, #20
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	a803      	add	r0, sp, #12
 800bcfe:	f007 f9c1 	bl	8013084 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800bd02:	2080      	movs	r0, #128	; 0x80
 800bd04:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <HAL_ADC_MspInit+0x58>)
 800bd06:	0080      	lsls	r0, r0, #2
 800bd08:	6999      	ldr	r1, [r3, #24]
 800bd0a:	4301      	orrs	r1, r0
 800bd0c:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd0e:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800bd10:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd12:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800bd14:	4002      	ands	r2, r0
 800bd16:	9201      	str	r2, [sp, #4]
 800bd18:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd1a:	695a      	ldr	r2, [r3, #20]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	615a      	str	r2, [r3, #20]
 800bd20:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800bd22:	4a0b      	ldr	r2, [pc, #44]	; (800bd50 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd24:	400b      	ands	r3, r1
 800bd26:	9302      	str	r3, [sp, #8]
 800bd28:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800bd2a:	2369      	movs	r3, #105	; 0x69
 800bd2c:	5cd3      	ldrb	r3, [r2, r3]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d001      	beq.n	800bd36 <HAL_ADC_MspInit+0x42>
}
 800bd32:	b009      	add	sp, #36	; 0x24
 800bd34:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800bd36:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800bd38:	333b      	adds	r3, #59	; 0x3b
 800bd3a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800bd3c:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd3e:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800bd40:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd42:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800bd44:	f004 fe0c 	bl	8010960 <HAL_GPIO_Init>
}
 800bd48:	e7f3      	b.n	800bd32 <HAL_ADC_MspInit+0x3e>
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	40021000 	.word	0x40021000
 800bd50:	200023bc 	.word	0x200023bc

0800bd54 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd56:	46ce      	mov	lr, r9
 800bd58:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800bd5a:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 800bd5c:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800bd5e:	4c54      	ldr	r4, [pc, #336]	; (800beb0 <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 800bd60:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 800bd62:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800bd64:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d100      	bne.n	800bd6c <ReadTempAndVref+0x18>
 800bd6a:	e09d      	b.n	800bea8 <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bd70:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd72:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bd74:	015b      	lsls	r3, r3, #5
 800bd76:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bd78:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd7a:	4d4e      	ldr	r5, [pc, #312]	; (800beb4 <ReadTempAndVref+0x160>)
 800bd7c:	316c      	adds	r1, #108	; 0x6c
 800bd7e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bd80:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd82:	f003 fd73 	bl	800f86c <HAL_ADC_ConfigChannel>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d000      	beq.n	800bd8c <ReadTempAndVref+0x38>
 800bd8a:	e089      	b.n	800bea0 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800bd8c:	0028      	movs	r0, r5
 800bd8e:	f003 fc41 	bl	800f614 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800bd92:	2164      	movs	r1, #100	; 0x64
 800bd94:	0028      	movs	r0, r5
 800bd96:	f003 fc89 	bl	800f6ac <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800bd9a:	0028      	movs	r0, r5
 800bd9c:	f003 fcea 	bl	800f774 <HAL_ADC_GetValue>
 800bda0:	2378      	movs	r3, #120	; 0x78
 800bda2:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800bda4:	0400      	lsls	r0, r0, #16
 800bda6:	0c00      	lsrs	r0, r0, #16
 800bda8:	f7f6 ff62 	bl	8002c70 <__aeabi_i2d>
 800bdac:	4a42      	ldr	r2, [pc, #264]	; (800beb8 <ReadTempAndVref+0x164>)
 800bdae:	4b43      	ldr	r3, [pc, #268]	; (800bebc <ReadTempAndVref+0x168>)
 800bdb0:	f7f6 f952 	bl	8002058 <__aeabi_dmul>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4b42      	ldr	r3, [pc, #264]	; (800bec0 <ReadTempAndVref+0x16c>)
 800bdb8:	f7f5 fd44 	bl	8001844 <__aeabi_ddiv>
 800bdbc:	4a41      	ldr	r2, [pc, #260]	; (800bec4 <ReadTempAndVref+0x170>)
 800bdbe:	4b42      	ldr	r3, [pc, #264]	; (800bec8 <ReadTempAndVref+0x174>)
 800bdc0:	f7f6 fbbc 	bl	800253c <__aeabi_dsub>
 800bdc4:	4a41      	ldr	r2, [pc, #260]	; (800becc <ReadTempAndVref+0x178>)
 800bdc6:	4b42      	ldr	r3, [pc, #264]	; (800bed0 <ReadTempAndVref+0x17c>)
 800bdc8:	f7f5 fd3c 	bl	8001844 <__aeabi_ddiv>
 800bdcc:	4b41      	ldr	r3, [pc, #260]	; (800bed4 <ReadTempAndVref+0x180>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f7f5 fa1c 	bl	800120c <__aeabi_dadd>
 800bdd4:	f7f7 f80a 	bl	8002dec <__aeabi_d2f>
 800bdd8:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800bdda:	0028      	movs	r0, r5
 800bddc:	f003 fc46 	bl	800f66c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800bde0:	2310      	movs	r3, #16
 800bde2:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800bde4:	4b3c      	ldr	r3, [pc, #240]	; (800bed8 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bde6:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800bde8:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bdea:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bdec:	316c      	adds	r1, #108	; 0x6c
 800bdee:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bdf0:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bdf2:	f003 fd3b 	bl	800f86c <HAL_ADC_ConfigChannel>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d14e      	bne.n	800be98 <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800bdfa:	2311      	movs	r3, #17
 800bdfc:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bdfe:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be00:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800be02:	015b      	lsls	r3, r3, #5
 800be04:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800be06:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be08:	316c      	adds	r1, #108	; 0x6c
 800be0a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800be0c:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be0e:	f003 fd2d 	bl	800f86c <HAL_ADC_ConfigChannel>
 800be12:	2800      	cmp	r0, #0
 800be14:	d13c      	bne.n	800be90 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800be16:	0028      	movs	r0, r5
 800be18:	f003 fbfc 	bl	800f614 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800be1c:	2164      	movs	r1, #100	; 0x64
 800be1e:	0028      	movs	r0, r5
 800be20:	f003 fc44 	bl	800f6ac <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800be24:	0028      	movs	r0, r5
 800be26:	f003 fca5 	bl	800f774 <HAL_ADC_GetValue>
 800be2a:	237a      	movs	r3, #122	; 0x7a
 800be2c:	4680      	mov	r8, r0
 800be2e:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800be30:	4b2a      	ldr	r3, [pc, #168]	; (800bedc <ReadTempAndVref+0x188>)
 800be32:	8818      	ldrh	r0, [r3, #0]
 800be34:	f7f6 ff1c 	bl	8002c70 <__aeabi_i2d>
 800be38:	4a1f      	ldr	r2, [pc, #124]	; (800beb8 <ReadTempAndVref+0x164>)
 800be3a:	4b20      	ldr	r3, [pc, #128]	; (800bebc <ReadTempAndVref+0x168>)
 800be3c:	f7f6 f90c 	bl	8002058 <__aeabi_dmul>
 800be40:	4643      	mov	r3, r8
 800be42:	0006      	movs	r6, r0
 800be44:	0418      	lsls	r0, r3, #16
 800be46:	0c00      	lsrs	r0, r0, #16
 800be48:	000f      	movs	r7, r1
 800be4a:	f7f6 ff11 	bl	8002c70 <__aeabi_i2d>
 800be4e:	0002      	movs	r2, r0
 800be50:	000b      	movs	r3, r1
 800be52:	0030      	movs	r0, r6
 800be54:	0039      	movs	r1, r7
 800be56:	f7f5 fcf5 	bl	8001844 <__aeabi_ddiv>
 800be5a:	f7f6 ffc7 	bl	8002dec <__aeabi_d2f>
 800be5e:	464b      	mov	r3, r9
 800be60:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800be62:	0028      	movs	r0, r5
 800be64:	f003 fc02 	bl	800f66c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800be68:	2311      	movs	r3, #17
 800be6a:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800be6c:	4b1a      	ldr	r3, [pc, #104]	; (800bed8 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be6e:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800be70:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800be72:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be74:	316c      	adds	r1, #108	; 0x6c
 800be76:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800be78:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800be7a:	f003 fcf7 	bl	800f86c <HAL_ADC_ConfigChannel>
 800be7e:	2800      	cmp	r0, #0
 800be80:	d002      	beq.n	800be88 <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800be82:	2064      	movs	r0, #100	; 0x64
 800be84:	f003 fa4a 	bl	800f31c <HAL_Delay>
}
 800be88:	bc0c      	pop	{r2, r3}
 800be8a:	4690      	mov	r8, r2
 800be8c:	4699      	mov	r9, r3
 800be8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800be90:	2064      	movs	r0, #100	; 0x64
 800be92:	f003 fa43 	bl	800f31c <HAL_Delay>
 800be96:	e7be      	b.n	800be16 <ReadTempAndVref+0xc2>
 800be98:	2064      	movs	r0, #100	; 0x64
 800be9a:	f003 fa3f 	bl	800f31c <HAL_Delay>
 800be9e:	e7ac      	b.n	800bdfa <ReadTempAndVref+0xa6>
 800bea0:	2064      	movs	r0, #100	; 0x64
 800bea2:	f003 fa3b 	bl	800f31c <HAL_Delay>
 800bea6:	e771      	b.n	800bd8c <ReadTempAndVref+0x38>
		MX_ADC_Init();
 800bea8:	f7ff fefa 	bl	800bca0 <MX_ADC_Init>
 800beac:	e75e      	b.n	800bd6c <ReadTempAndVref+0x18>
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	200023bc 	.word	0x200023bc
 800beb4:	20006c20 	.word	0x20006c20
 800beb8:	66666666 	.word	0x66666666
 800bebc:	400a6666 	.word	0x400a6666
 800bec0:	40affe00 	.word	0x40affe00
 800bec4:	28f5c28f 	.word	0x28f5c28f
 800bec8:	3ff68f5c 	.word	0x3ff68f5c
 800becc:	33333333 	.word	0x33333333
 800bed0:	40113333 	.word	0x40113333
 800bed4:	40390000 	.word	0x40390000
 800bed8:	00001001 	.word	0x00001001
 800bedc:	1ffff7ba 	.word	0x1ffff7ba

0800bee0 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800bee2:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800bee4:	b087      	sub	sp, #28
 800bee6:	0005      	movs	r5, r0
 800bee8:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 800beea:	2b01      	cmp	r3, #1
 800beec:	d901      	bls.n	800bef2 <GetReadPrecentage+0x12>
}
 800beee:	b007      	add	sp, #28
 800bef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800bef2:	2368      	movs	r3, #104	; 0x68
 800bef4:	4c57      	ldr	r4, [pc, #348]	; (800c054 <GetReadPrecentage+0x174>)
 800bef6:	5ce3      	ldrb	r3, [r4, r3]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d062      	beq.n	800bfc2 <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 800befc:	0028      	movs	r0, r5
 800befe:	f001 fa2f 	bl	800d360 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bf02:	4a55      	ldr	r2, [pc, #340]	; (800c058 <GetReadPrecentage+0x178>)
 800bf04:	6803      	ldr	r3, [r0, #0]
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d07e      	beq.n	800c008 <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 800bf0a:	4a54      	ldr	r2, [pc, #336]	; (800c05c <GetReadPrecentage+0x17c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d04d      	beq.n	800bfac <GetReadPrecentage+0xcc>
 800bf10:	2300      	movs	r3, #0
 800bf12:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800bf14:	227c      	movs	r2, #124	; 0x7c
 800bf16:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf18:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 800bf1a:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf1c:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf1e:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf20:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bf22:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf24:	4d4e      	ldr	r5, [pc, #312]	; (800c060 <GetReadPrecentage+0x180>)
 800bf26:	316c      	adds	r1, #108	; 0x6c
 800bf28:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bf2a:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf2c:	f003 fc9e 	bl	800f86c <HAL_ADC_ConfigChannel>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d142      	bne.n	800bfba <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 800bf34:	0028      	movs	r0, r5
 800bf36:	f003 fb6d 	bl	800f614 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800bf3a:	2164      	movs	r1, #100	; 0x64
 800bf3c:	0028      	movs	r0, r5
 800bf3e:	f003 fbb5 	bl	800f6ac <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800bf42:	0028      	movs	r0, r5
 800bf44:	f003 fc16 	bl	800f774 <HAL_ADC_GetValue>
 800bf48:	f7f5 f920 	bl	800118c <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800bf4c:	f7f6 fefc 	bl	8002d48 <__aeabi_f2d>
 800bf50:	4a44      	ldr	r2, [pc, #272]	; (800c064 <GetReadPrecentage+0x184>)
 800bf52:	4b45      	ldr	r3, [pc, #276]	; (800c068 <GetReadPrecentage+0x188>)
 800bf54:	f7f6 f880 	bl	8002058 <__aeabi_dmul>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4b44      	ldr	r3, [pc, #272]	; (800c06c <GetReadPrecentage+0x18c>)
 800bf5c:	f7f5 fc72 	bl	8001844 <__aeabi_ddiv>
 800bf60:	f7f6 ff44 	bl	8002dec <__aeabi_d2f>
 800bf64:	4f42      	ldr	r7, [pc, #264]	; (800c070 <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 800bf66:	4943      	ldr	r1, [pc, #268]	; (800c074 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 800bf68:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 800bf6a:	f7f4 fdf9 	bl	8000b60 <__aeabi_fmul>
 800bf6e:	f7f6 feeb 	bl	8002d48 <__aeabi_f2d>
 800bf72:	4b3d      	ldr	r3, [pc, #244]	; (800c068 <GetReadPrecentage+0x188>)
 800bf74:	4a3b      	ldr	r2, [pc, #236]	; (800c064 <GetReadPrecentage+0x184>)
 800bf76:	f7f5 fc65 	bl	8001844 <__aeabi_ddiv>
 800bf7a:	f7f6 ff37 	bl	8002dec <__aeabi_d2f>
 800bf7e:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 800bf80:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800bf82:	0028      	movs	r0, r5
 800bf84:	f003 fb72 	bl	800f66c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800bf88:	237c      	movs	r3, #124	; 0x7c
 800bf8a:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf8c:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800bf8e:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bf90:	4b39      	ldr	r3, [pc, #228]	; (800c078 <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf92:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bf94:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bf96:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf98:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800bf9a:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bf9c:	f003 fc66 	bl	800f86c <HAL_ADC_ConfigChannel>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d0a4      	beq.n	800beee <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800bfa4:	2064      	movs	r0, #100	; 0x64
 800bfa6:	f003 f9b9 	bl	800f31c <HAL_Delay>
 800bfaa:	e7a0      	b.n	800beee <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800bfac:	4a33      	ldr	r2, [pc, #204]	; (800c07c <GetReadPrecentage+0x19c>)
 800bfae:	4b34      	ldr	r3, [pc, #208]	; (800c080 <GetReadPrecentage+0x1a0>)
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d04c      	beq.n	800c04e <GetReadPrecentage+0x16e>
 800bfb4:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800bfb6:	2305      	movs	r3, #5
 800bfb8:	e7ac      	b.n	800bf14 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 800bfba:	2064      	movs	r0, #100	; 0x64
 800bfbc:	f003 f9ae 	bl	800f31c <HAL_Delay>
 800bfc0:	e7b8      	b.n	800bf34 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 800bfc2:	f7ff fe6d 	bl	800bca0 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800bfc6:	0028      	movs	r0, r5
 800bfc8:	f001 f9ca 	bl	800d360 <GetUart>
 800bfcc:	f006 f8d0 	bl	8012170 <HAL_UART_DeInit>
			if (port == 3) {
 800bfd0:	2d03      	cmp	r5, #3
 800bfd2:	d020      	beq.n	800c016 <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800bfd4:	2090      	movs	r0, #144	; 0x90
 800bfd6:	2104      	movs	r1, #4
 800bfd8:	05c0      	lsls	r0, r0, #23
 800bfda:	f004 fdbd 	bl	8010b58 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bfde:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfe0:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bfe2:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfe4:	3b03      	subs	r3, #3
 800bfe6:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfe8:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bfea:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfec:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bfee:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bff0:	f004 fcb6 	bl	8010960 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800bff4:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bff6:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800bff8:	4b22      	ldr	r3, [pc, #136]	; (800c084 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bffa:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800bffc:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bffe:	05c0      	lsls	r0, r0, #23
 800c000:	3a05      	subs	r2, #5
 800c002:	f004 fe4d 	bl	8010ca0 <HAL_GPIO_WritePin>
 800c006:	e779      	b.n	800befc <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c008:	4a1c      	ldr	r2, [pc, #112]	; (800c07c <GetReadPrecentage+0x19c>)
 800c00a:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <GetReadPrecentage+0x1a0>)
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d01b      	beq.n	800c048 <GetReadPrecentage+0x168>
 800c010:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 800c012:	2303      	movs	r3, #3
 800c014:	e77e      	b.n	800bf14 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c016:	2090      	movs	r0, #144	; 0x90
 800c018:	2110      	movs	r1, #16
 800c01a:	05c0      	lsls	r0, r0, #23
 800c01c:	f004 fd9c 	bl	8010b58 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c020:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c022:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c024:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c026:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c028:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c02a:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c02c:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c02e:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c030:	f004 fc96 	bl	8010960 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c034:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c036:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c038:	4b12      	ldr	r3, [pc, #72]	; (800c084 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c03a:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800c03c:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c03e:	05c0      	lsls	r0, r0, #23
 800c040:	3a05      	subs	r2, #5
 800c042:	f004 fe2d 	bl	8010ca0 <HAL_GPIO_WritePin>
 800c046:	e759      	b.n	800befc <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c048:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 800c04a:	2302      	movs	r3, #2
 800c04c:	e762      	b.n	800bf14 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 800c04e:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 800c050:	2304      	movs	r3, #4
 800c052:	e75f      	b.n	800bf14 <GetReadPrecentage+0x34>
 800c054:	200023bc 	.word	0x200023bc
 800c058:	40004400 	.word	0x40004400
 800c05c:	40011400 	.word	0x40011400
 800c060:	20006c20 	.word	0x20006c20
 800c064:	66666666 	.word	0x66666666
 800c068:	400a6666 	.word	0x400a6666
 800c06c:	40affe00 	.word	0x40affe00
 800c070:	2000243c 	.word	0x2000243c
 800c074:	42c80000 	.word	0x42c80000
 800c078:	00001001 	.word	0x00001001
 800c07c:	08018c54 	.word	0x08018c54
 800c080:	08018c50 	.word	0x08018c50
 800c084:	20000c34 	.word	0x20000c34

0800c088 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c088:	2802      	cmp	r0, #2
 800c08a:	d00e      	beq.n	800c0aa <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c08c:	2803      	cmp	r0, #3
 800c08e:	d002      	beq.n	800c096 <Get_Rank+0xe>
 800c090:	4b10      	ldr	r3, [pc, #64]	; (800c0d4 <Get_Rank+0x4c>)
 800c092:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800c094:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800c096:	4b10      	ldr	r3, [pc, #64]	; (800c0d8 <Get_Rank+0x50>)
 800c098:	4299      	cmp	r1, r3
 800c09a:	d016      	beq.n	800c0ca <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800c09c:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <Get_Rank+0x54>)
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d1f6      	bne.n	800c090 <Get_Rank+0x8>
		Rank_t = 3;
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <Get_Rank+0x4c>)
 800c0a4:	7218      	strb	r0, [r3, #8]
 800c0a6:	2003      	movs	r0, #3
 800c0a8:	e7f4      	b.n	800c094 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	; (800c0d8 <Get_Rank+0x50>)
 800c0ac:	4299      	cmp	r1, r3
 800c0ae:	d007      	beq.n	800c0c0 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800c0b0:	4b0a      	ldr	r3, [pc, #40]	; (800c0dc <Get_Rank+0x54>)
 800c0b2:	4299      	cmp	r1, r3
 800c0b4:	d1ec      	bne.n	800c090 <Get_Rank+0x8>
		Rank_t = 1;
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <Get_Rank+0x4c>)
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	721a      	strb	r2, [r3, #8]
 800c0be:	e7e9      	b.n	800c094 <Get_Rank+0xc>
		Rank_t = 0;
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <Get_Rank+0x4c>)
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	721a      	strb	r2, [r3, #8]
 800c0c8:	e7e4      	b.n	800c094 <Get_Rank+0xc>
		Rank_t = 2;
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	4b01      	ldr	r3, [pc, #4]	; (800c0d4 <Get_Rank+0x4c>)
 800c0ce:	3801      	subs	r0, #1
 800c0d0:	721a      	strb	r2, [r3, #8]
 800c0d2:	e7df      	b.n	800c094 <Get_Rank+0xc>
 800c0d4:	2000243c 	.word	0x2000243c
 800c0d8:	08018c50 	.word	0x08018c50
 800c0dc:	08018c54 	.word	0x08018c54

0800c0e0 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800c0e2:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c0e4:	0004      	movs	r4, r0
 800c0e6:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d900      	bls.n	800c0ee <ADCSelectChannel+0xe>
}
 800c0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800c0ee:	2369      	movs	r3, #105	; 0x69
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	4e1c      	ldr	r6, [pc, #112]	; (800c164 <ADCSelectChannel+0x84>)
 800c0f4:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c0f6:	f001 f933 	bl	800d360 <GetUart>
 800c0fa:	f006 f839 	bl	8012170 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c0fe:	2206      	movs	r2, #6
 800c100:	4b19      	ldr	r3, [pc, #100]	; (800c168 <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800c102:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800c104:	191b      	adds	r3, r3, r4
 800c106:	3b01      	subs	r3, #1
 800c108:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c10a:	f001 f929 	bl	800d360 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c10e:	4a17      	ldr	r2, [pc, #92]	; (800c16c <ADCSelectChannel+0x8c>)
 800c110:	6803      	ldr	r3, [r0, #0]
 800c112:	4293      	cmp	r3, r2
 800c114:	d011      	beq.n	800c13a <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 800c116:	4a16      	ldr	r2, [pc, #88]	; (800c170 <ADCSelectChannel+0x90>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d016      	beq.n	800c14a <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 800c11c:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 800c11e:	0029      	movs	r1, r5
 800c120:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800c122:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800c124:	f7ff ffb0 	bl	800c088 <Get_Rank>
 800c128:	4b12      	ldr	r3, [pc, #72]	; (800c174 <ADCSelectChannel+0x94>)
 800c12a:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800c12c:	2368      	movs	r3, #104	; 0x68
 800c12e:	5cf3      	ldrb	r3, [r6, r3]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1db      	bne.n	800c0ec <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800c134:	f7ff fdb4 	bl	800bca0 <MX_ADC_Init>
}
 800c138:	e7d8      	b.n	800c0ec <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 800c13a:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <ADCSelectChannel+0x98>)
 800c13c:	429d      	cmp	r5, r3
 800c13e:	d00e      	beq.n	800c15e <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <ADCSelectChannel+0x9c>)
 800c142:	429d      	cmp	r5, r3
 800c144:	d1ea      	bne.n	800c11c <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 800c146:	2703      	movs	r7, #3
 800c148:	e7e8      	b.n	800c11c <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <ADCSelectChannel+0x98>)
 800c14c:	429d      	cmp	r5, r3
 800c14e:	d004      	beq.n	800c15a <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <ADCSelectChannel+0x9c>)
 800c152:	429d      	cmp	r5, r3
 800c154:	d1e2      	bne.n	800c11c <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 800c156:	2705      	movs	r7, #5
 800c158:	e7e0      	b.n	800c11c <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 800c15a:	2704      	movs	r7, #4
 800c15c:	e7de      	b.n	800c11c <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 800c15e:	2702      	movs	r7, #2
 800c160:	e7dc      	b.n	800c11c <ADCSelectChannel+0x3c>
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	200023bc 	.word	0x200023bc
 800c168:	20000c34 	.word	0x20000c34
 800c16c:	40004400 	.word	0x40004400
 800c170:	40011400 	.word	0x40011400
 800c174:	2000243c 	.word	0x2000243c
 800c178:	08018c50 	.word	0x08018c50
 800c17c:	08018c54 	.word	0x08018c54

0800c180 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	4647      	mov	r7, r8
 800c184:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800c186:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c188:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800c18a:	4d3a      	ldr	r5, [pc, #232]	; (800c274 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c18c:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 800c18e:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c190:	000c      	movs	r4, r1
 800c192:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800c194:	2b01      	cmp	r3, #1
 800c196:	d00b      	beq.n	800c1b0 <ReadADCChannel+0x30>
 800c198:	4c37      	ldr	r4, [pc, #220]	; (800c278 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800c19a:	7a23      	ldrb	r3, [r4, #8]
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	18e4      	adds	r4, r4, r3
 800c1a0:	89a0      	ldrh	r0, [r4, #12]
 800c1a2:	f7f4 fff3 	bl	800118c <__aeabi_ui2f>
 800c1a6:	6030      	str	r0, [r6, #0]
}
 800c1a8:	bc0c      	pop	{r2, r3}
 800c1aa:	4690      	mov	r8, r2
 800c1ac:	4699      	mov	r9, r3
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800c1b0:	f001 f8d6 	bl	800d360 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c1b4:	4a31      	ldr	r2, [pc, #196]	; (800c27c <ReadADCChannel+0xfc>)
 800c1b6:	6803      	ldr	r3, [r0, #0]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d03f      	beq.n	800c23c <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800c1bc:	4a30      	ldr	r2, [pc, #192]	; (800c280 <ReadADCChannel+0x100>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d049      	beq.n	800c256 <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800c1c2:	237c      	movs	r3, #124	; 0x7c
 800c1c4:	464a      	mov	r2, r9
 800c1c6:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 800c1c8:	0021      	movs	r1, r4
 800c1ca:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800c1cc:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 800c1ce:	f7ff ff5b 	bl	800c088 <Get_Rank>
		sConfig.Channel = Channel;
 800c1d2:	4643      	mov	r3, r8
 800c1d4:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1d6:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800c1d8:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c1da:	2380      	movs	r3, #128	; 0x80
 800c1dc:	015b      	lsls	r3, r3, #5
 800c1de:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c1e0:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 800c1e2:	4c25      	ldr	r4, [pc, #148]	; (800c278 <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1e4:	4f27      	ldr	r7, [pc, #156]	; (800c284 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800c1e6:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1e8:	316c      	adds	r1, #108	; 0x6c
 800c1ea:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c1ec:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1ee:	f003 fb3d 	bl	800f86c <HAL_ADC_ConfigChannel>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d12b      	bne.n	800c24e <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800c1f6:	0038      	movs	r0, r7
 800c1f8:	f003 fa0c 	bl	800f614 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c1fc:	2164      	movs	r1, #100	; 0x64
 800c1fe:	0038      	movs	r0, r7
 800c200:	f003 fa54 	bl	800f6ac <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800c204:	0038      	movs	r0, r7
 800c206:	f003 fab5 	bl	800f774 <HAL_ADC_GetValue>
 800c20a:	7a23      	ldrb	r3, [r4, #8]
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	18e3      	adds	r3, r4, r3
 800c210:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800c212:	0038      	movs	r0, r7
 800c214:	f003 fa2a 	bl	800f66c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c218:	237c      	movs	r3, #124	; 0x7c
 800c21a:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c21c:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800c21e:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c220:	4b19      	ldr	r3, [pc, #100]	; (800c288 <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c222:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c224:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c226:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c228:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c22a:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c22c:	f003 fb1e 	bl	800f86c <HAL_ADC_ConfigChannel>
 800c230:	2800      	cmp	r0, #0
 800c232:	d0b2      	beq.n	800c19a <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800c234:	2064      	movs	r0, #100	; 0x64
 800c236:	f003 f871 	bl	800f31c <HAL_Delay>
 800c23a:	e7ae      	b.n	800c19a <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800c23c:	4b13      	ldr	r3, [pc, #76]	; (800c28c <ReadADCChannel+0x10c>)
 800c23e:	429c      	cmp	r4, r3
 800c240:	d012      	beq.n	800c268 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800c242:	4b13      	ldr	r3, [pc, #76]	; (800c290 <ReadADCChannel+0x110>)
 800c244:	429c      	cmp	r4, r3
 800c246:	d1bc      	bne.n	800c1c2 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800c248:	2303      	movs	r3, #3
 800c24a:	4699      	mov	r9, r3
 800c24c:	e7b9      	b.n	800c1c2 <ReadADCChannel+0x42>
	HAL_Delay(100);
 800c24e:	2064      	movs	r0, #100	; 0x64
 800c250:	f003 f864 	bl	800f31c <HAL_Delay>
 800c254:	e7cf      	b.n	800c1f6 <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <ReadADCChannel+0x10c>)
 800c258:	429c      	cmp	r4, r3
 800c25a:	d008      	beq.n	800c26e <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800c25c:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <ReadADCChannel+0x110>)
 800c25e:	429c      	cmp	r4, r3
 800c260:	d1af      	bne.n	800c1c2 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800c262:	2305      	movs	r3, #5
 800c264:	4699      	mov	r9, r3
 800c266:	e7ac      	b.n	800c1c2 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800c268:	2302      	movs	r3, #2
 800c26a:	4699      	mov	r9, r3
 800c26c:	e7a9      	b.n	800c1c2 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800c26e:	2304      	movs	r3, #4
 800c270:	4699      	mov	r9, r3
 800c272:	e7a6      	b.n	800c1c2 <ReadADCChannel+0x42>
 800c274:	200023bc 	.word	0x200023bc
 800c278:	2000243c 	.word	0x2000243c
 800c27c:	40004400 	.word	0x40004400
 800c280:	40011400 	.word	0x40011400
 800c284:	20006c20 	.word	0x20006c20
 800c288:	00001001 	.word	0x00001001
 800c28c:	08018c50 	.word	0x08018c50
 800c290:	08018c54 	.word	0x08018c54

0800c294 <buttonReleasedCallback>:
 800c294:	4770      	bx	lr
 800c296:	46c0      	nop			; (mov r8, r8)

0800c298 <buttonClickedCallback>:
 800c298:	4770      	bx	lr
 800c29a:	46c0      	nop			; (mov r8, r8)

0800c29c <buttonDblClickedCallback>:
 800c29c:	4770      	bx	lr
 800c29e:	46c0      	nop			; (mov r8, r8)

0800c2a0 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800c2a0:	4770      	bx	lr
 800c2a2:	46c0      	nop			; (mov r8, r8)

0800c2a4 <buttonReleasedForYCallback>:
 800c2a4:	4770      	bx	lr
 800c2a6:	46c0      	nop			; (mov r8, r8)

0800c2a8 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2aa:	4645      	mov	r5, r8
 800c2ac:	46de      	mov	lr, fp
 800c2ae:	464e      	mov	r6, r9
 800c2b0:	4657      	mov	r7, sl
 800c2b2:	4bc5      	ldr	r3, [pc, #788]	; (800c5c8 <CheckAttachedButtons+0x320>)
 800c2b4:	b5e0      	push	{r5, r6, r7, lr}
 800c2b6:	4698      	mov	r8, r3
 800c2b8:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c2ba:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800c2bc:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c2be:	9304      	str	r3, [sp, #16]
 800c2c0:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 800c2c2:	4bc2      	ldr	r3, [pc, #776]	; (800c5cc <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 800c2c4:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800c2c6:	4699      	mov	r9, r3
 800c2c8:	b2eb      	uxtb	r3, r5
 800c2ca:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800c2cc:	7aa3      	ldrb	r3, [r4, #10]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d100      	bne.n	800c2d4 <CheckAttachedButtons+0x2c>
 800c2d2:	e0c0      	b.n	800c456 <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 800c2d4:	464b      	mov	r3, r9
 800c2d6:	7d1b      	ldrb	r3, [r3, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d100      	bne.n	800c2de <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 800c2dc:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c2de:	ab04      	add	r3, sp, #16
 800c2e0:	469c      	mov	ip, r3
 800c2e2:	270e      	movs	r7, #14
 800c2e4:	ae07      	add	r6, sp, #28
 800c2e6:	4467      	add	r7, ip
 800c2e8:	ab09      	add	r3, sp, #36	; 0x24
 800c2ea:	0032      	movs	r2, r6
 800c2ec:	a908      	add	r1, sp, #32
 800c2ee:	9700      	str	r7, [sp, #0]
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	f7ff f9db 	bl	800b6ac <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c2f6:	8831      	ldrh	r1, [r6, #0]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	9808      	ldr	r0, [sp, #32]
 800c2fc:	f004 fcd0 	bl	8010ca0 <HAL_GPIO_WritePin>
			Delay_us(10);
 800c300:	200a      	movs	r0, #10
 800c302:	f000 fe1f 	bl	800cf44 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800c306:	8839      	ldrh	r1, [r7, #0]
 800c308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c30a:	f004 fcc3 	bl	8010c94 <HAL_GPIO_ReadPin>
 800c30e:	2800      	cmp	r0, #0
 800c310:	d100      	bne.n	800c314 <CheckAttachedButtons+0x6c>
 800c312:	e14b      	b.n	800c5ac <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c314:	8831      	ldrh	r1, [r6, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	9808      	ldr	r0, [sp, #32]
 800c31a:	f004 fcc1 	bl	8010ca0 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800c31e:	7aa3      	ldrb	r3, [r4, #10]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d100      	bne.n	800c326 <CheckAttachedButtons+0x7e>
 800c324:	e0a6      	b.n	800c474 <CheckAttachedButtons+0x1cc>
 800c326:	d800      	bhi.n	800c32a <CheckAttachedButtons+0x82>
 800c328:	e0a1      	b.n	800c46e <CheckAttachedButtons+0x1c6>
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d100      	bne.n	800c330 <CheckAttachedButtons+0x88>
 800c32e:	e170      	b.n	800c612 <CheckAttachedButtons+0x36a>
 800c330:	2b04      	cmp	r3, #4
 800c332:	d000      	beq.n	800c336 <CheckAttachedButtons+0x8e>
 800c334:	e156      	b.n	800c5e4 <CheckAttachedButtons+0x33c>
 800c336:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c338:	4658      	mov	r0, fp
 800c33a:	00aa      	lsls	r2, r5, #2
 800c33c:	3138      	adds	r1, #56	; 0x38
 800c33e:	588b      	ldr	r3, [r1, r2]
 800c340:	2801      	cmp	r0, #1
 800c342:	d100      	bne.n	800c346 <CheckAttachedButtons+0x9e>
 800c344:	e170      	b.n	800c628 <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 800c346:	2800      	cmp	r0, #0
 800c348:	d100      	bne.n	800c34c <CheckAttachedButtons+0xa4>
 800c34a:	e217      	b.n	800c77c <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 800c34c:	9904      	ldr	r1, [sp, #16]
 800c34e:	2904      	cmp	r1, #4
 800c350:	d100      	bne.n	800c354 <CheckAttachedButtons+0xac>
 800c352:	e14f      	b.n	800c5f4 <CheckAttachedButtons+0x34c>
 800c354:	9904      	ldr	r1, [sp, #16]
 800c356:	2902      	cmp	r1, #2
 800c358:	d100      	bne.n	800c35c <CheckAttachedButtons+0xb4>
 800c35a:	e14b      	b.n	800c5f4 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 800c35c:	9904      	ldr	r1, [sp, #16]
 800c35e:	2903      	cmp	r1, #3
 800c360:	d002      	beq.n	800c368 <CheckAttachedButtons+0xc0>
 800c362:	489b      	ldr	r0, [pc, #620]	; (800c5d0 <CheckAttachedButtons+0x328>)
 800c364:	2901      	cmp	r1, #1
 800c366:	d114      	bne.n	800c392 <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 800c368:	4640      	mov	r0, r8
 800c36a:	3050      	adds	r0, #80	; 0x50
 800c36c:	5881      	ldr	r1, [r0, r2]
 800c36e:	4e99      	ldr	r6, [pc, #612]	; (800c5d4 <CheckAttachedButtons+0x32c>)
 800c370:	42b1      	cmp	r1, r6
 800c372:	d900      	bls.n	800c376 <CheckAttachedButtons+0xce>
 800c374:	e092      	b.n	800c49c <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 800c376:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 800c378:	3101      	adds	r1, #1
 800c37a:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800c37c:	7fbf      	ldrb	r7, [r7, #30]
 800c37e:	4996      	ldr	r1, [pc, #600]	; (800c5d8 <CheckAttachedButtons+0x330>)
 800c380:	4893      	ldr	r0, [pc, #588]	; (800c5d0 <CheckAttachedButtons+0x328>)
 800c382:	5c69      	ldrb	r1, [r5, r1]
 800c384:	7946      	ldrb	r6, [r0, #5]
 800c386:	2f02      	cmp	r7, #2
 800c388:	d100      	bne.n	800c38c <CheckAttachedButtons+0xe4>
 800c38a:	e092      	b.n	800c4b2 <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800c38c:	42b1      	cmp	r1, r6
 800c38e:	d900      	bls.n	800c392 <CheckAttachedButtons+0xea>
 800c390:	e139      	b.n	800c606 <CheckAttachedButtons+0x35e>
 800c392:	4646      	mov	r6, r8
 800c394:	3650      	adds	r6, #80	; 0x50
 800c396:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800c398:	8801      	ldrh	r1, [r0, #0]
 800c39a:	9603      	str	r6, [sp, #12]
 800c39c:	4299      	cmp	r1, r3
 800c39e:	d826      	bhi.n	800c3ee <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800c3a0:	d105      	bne.n	800c3ae <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800c3a2:	2707      	movs	r7, #7
 800c3a4:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 800c3a6:	4647      	mov	r7, r8
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	3738      	adds	r7, #56	; 0x38
 800c3ac:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c3ae:	9e03      	ldr	r6, [sp, #12]
 800c3b0:	42b1      	cmp	r1, r6
 800c3b2:	d205      	bcs.n	800c3c0 <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 800c3b4:	4646      	mov	r6, r8
 800c3b6:	2700      	movs	r7, #0
 800c3b8:	3650      	adds	r6, #80	; 0x50
 800c3ba:	50b7      	str	r7, [r6, r2]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800c3c0:	8847      	ldrh	r7, [r0, #2]
 800c3c2:	9705      	str	r7, [sp, #20]
 800c3c4:	429f      	cmp	r7, r3
 800c3c6:	d300      	bcc.n	800c3ca <CheckAttachedButtons+0x122>
 800c3c8:	e07a      	b.n	800c4c0 <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 800c3ca:	27f4      	movs	r7, #244	; 0xf4
 800c3cc:	37ff      	adds	r7, #255	; 0xff
 800c3ce:	42bb      	cmp	r3, r7
 800c3d0:	d900      	bls.n	800c3d4 <CheckAttachedButtons+0x12c>
 800c3d2:	e075      	b.n	800c4c0 <CheckAttachedButtons+0x218>
					if (clicked == 0)
 800c3d4:	464b      	mov	r3, r9
 800c3d6:	7f9b      	ldrb	r3, [r3, #30]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d100      	bne.n	800c3de <CheckAttachedButtons+0x136>
 800c3dc:	e1d8      	b.n	800c790 <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d105      	bne.n	800c3ee <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800c3e2:	4b7d      	ldr	r3, [pc, #500]	; (800c5d8 <CheckAttachedButtons+0x330>)
 800c3e4:	7907      	ldrb	r7, [r0, #4]
 800c3e6:	5ceb      	ldrb	r3, [r5, r3]
 800c3e8:	429f      	cmp	r7, r3
 800c3ea:	d200      	bcs.n	800c3ee <CheckAttachedButtons+0x146>
 800c3ec:	e1dc      	b.n	800c7a8 <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d822      	bhi.n	800c43a <CheckAttachedButtons+0x192>
 800c3f4:	4643      	mov	r3, r8
 800c3f6:	8840      	ldrh	r0, [r0, #2]
 800c3f8:	3338      	adds	r3, #56	; 0x38
 800c3fa:	589b      	ldr	r3, [r3, r2]
 800c3fc:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800c3fe:	9803      	ldr	r0, [sp, #12]
 800c400:	4281      	cmp	r1, r0
 800c402:	d100      	bne.n	800c406 <CheckAttachedButtons+0x15e>
 800c404:	e19b      	b.n	800c73e <CheckAttachedButtons+0x496>
 800c406:	4640      	mov	r0, r8
 800c408:	3050      	adds	r0, #80	; 0x50
 800c40a:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800c40c:	4299      	cmp	r1, r3
 800c40e:	d203      	bcs.n	800c418 <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 800c410:	4643      	mov	r3, r8
 800c412:	2100      	movs	r1, #0
 800c414:	3338      	adds	r3, #56	; 0x38
 800c416:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800c418:	9b05      	ldr	r3, [sp, #20]
 800c41a:	4283      	cmp	r3, r0
 800c41c:	d300      	bcc.n	800c420 <CheckAttachedButtons+0x178>
 800c41e:	e091      	b.n	800c544 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 800c420:	23f4      	movs	r3, #244	; 0xf4
 800c422:	33ff      	adds	r3, #255	; 0xff
 800c424:	4298      	cmp	r0, r3
 800c426:	d900      	bls.n	800c42a <CheckAttachedButtons+0x182>
 800c428:	e08c      	b.n	800c544 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 800c42a:	464b      	mov	r3, r9
 800c42c:	7f9b      	ldrb	r3, [r3, #30]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d100      	bne.n	800c434 <CheckAttachedButtons+0x18c>
 800c432:	e15c      	b.n	800c6ee <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 800c434:	2b03      	cmp	r3, #3
 800c436:	d100      	bne.n	800c43a <CheckAttachedButtons+0x192>
 800c438:	e12d      	b.n	800c696 <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 800c43a:	7a63      	ldrb	r3, [r4, #9]
 800c43c:	3b05      	subs	r3, #5
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b09      	cmp	r3, #9
 800c442:	d808      	bhi.n	800c456 <CheckAttachedButtons+0x1ae>
 800c444:	4a65      	ldr	r2, [pc, #404]	; (800c5dc <CheckAttachedButtons+0x334>)
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	58d3      	ldr	r3, [r2, r3]
 800c44a:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800c44c:	4650      	mov	r0, sl
 800c44e:	f7ff fa01 	bl	800b854 <buttonPressedCallback>
				button[i].state = NONE;
 800c452:	2300      	movs	r3, #0
 800c454:	7263      	strb	r3, [r4, #9]
 800c456:	3501      	adds	r5, #1
 800c458:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c45a:	2d06      	cmp	r5, #6
 800c45c:	d000      	beq.n	800c460 <CheckAttachedButtons+0x1b8>
 800c45e:	e733      	b.n	800c2c8 <CheckAttachedButtons+0x20>
}
 800c460:	b00b      	add	sp, #44	; 0x2c
 800c462:	bc3c      	pop	{r2, r3, r4, r5}
 800c464:	4690      	mov	r8, r2
 800c466:	4699      	mov	r9, r3
 800c468:	46a2      	mov	sl, r4
 800c46a:	46ab      	mov	fp, r5
 800c46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d000      	beq.n	800c474 <CheckAttachedButtons+0x1cc>
 800c472:	e0b7      	b.n	800c5e4 <CheckAttachedButtons+0x33c>
 800c474:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c476:	4658      	mov	r0, fp
 800c478:	00aa      	lsls	r2, r5, #2
 800c47a:	3138      	adds	r1, #56	; 0x38
 800c47c:	588b      	ldr	r3, [r1, r2]
 800c47e:	2801      	cmp	r0, #1
 800c480:	d100      	bne.n	800c484 <CheckAttachedButtons+0x1dc>
 800c482:	e163      	b.n	800c74c <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 800c484:	2800      	cmp	r0, #0
 800c486:	d000      	beq.n	800c48a <CheckAttachedButtons+0x1e2>
 800c488:	e760      	b.n	800c34c <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 800c48a:	4640      	mov	r0, r8
 800c48c:	2103      	movs	r1, #3
 800c48e:	3050      	adds	r0, #80	; 0x50
 800c490:	9104      	str	r1, [sp, #16]
 800c492:	4e50      	ldr	r6, [pc, #320]	; (800c5d4 <CheckAttachedButtons+0x32c>)
 800c494:	5881      	ldr	r1, [r0, r2]
 800c496:	42b1      	cmp	r1, r6
 800c498:	d800      	bhi.n	800c49c <CheckAttachedButtons+0x1f4>
 800c49a:	e76c      	b.n	800c376 <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 800c49c:	2100      	movs	r1, #0
				if (clicked == 2
 800c49e:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 800c4a0:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800c4a2:	7fbf      	ldrb	r7, [r7, #30]
 800c4a4:	494c      	ldr	r1, [pc, #304]	; (800c5d8 <CheckAttachedButtons+0x330>)
 800c4a6:	484a      	ldr	r0, [pc, #296]	; (800c5d0 <CheckAttachedButtons+0x328>)
 800c4a8:	5c69      	ldrb	r1, [r5, r1]
 800c4aa:	7946      	ldrb	r6, [r0, #5]
 800c4ac:	2f02      	cmp	r7, #2
 800c4ae:	d000      	beq.n	800c4b2 <CheckAttachedButtons+0x20a>
 800c4b0:	e76c      	b.n	800c38c <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800c4b2:	42b1      	cmp	r1, r6
 800c4b4:	d900      	bls.n	800c4b8 <CheckAttachedButtons+0x210>
 800c4b6:	e0a6      	b.n	800c606 <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800c4b8:	4e47      	ldr	r6, [pc, #284]	; (800c5d8 <CheckAttachedButtons+0x330>)
 800c4ba:	3101      	adds	r1, #1
 800c4bc:	55a9      	strb	r1, [r5, r6]
 800c4be:	e768      	b.n	800c392 <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800c4c0:	4f47      	ldr	r7, [pc, #284]	; (800c5e0 <CheckAttachedButtons+0x338>)
 800c4c2:	46bc      	mov	ip, r7
 800c4c4:	001f      	movs	r7, r3
 800c4c6:	3ff5      	subs	r7, #245	; 0xf5
 800c4c8:	3fff      	subs	r7, #255	; 0xff
 800c4ca:	4567      	cmp	r7, ip
 800c4cc:	d900      	bls.n	800c4d0 <CheckAttachedButtons+0x228>
 800c4ce:	e78e      	b.n	800c3ee <CheckAttachedButtons+0x146>
					if (clicked)
 800c4d0:	464f      	mov	r7, r9
 800c4d2:	7fbf      	ldrb	r7, [r7, #30]
 800c4d4:	2f00      	cmp	r7, #0
 800c4d6:	d002      	beq.n	800c4de <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800c4d8:	2700      	movs	r7, #0
 800c4da:	464e      	mov	r6, r9
 800c4dc:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c4de:	7ae7      	ldrb	r7, [r4, #11]
 800c4e0:	46bc      	mov	ip, r7
	t1 *= 1000;
 800c4e2:	4666      	mov	r6, ip
 800c4e4:	017f      	lsls	r7, r7, #5
 800c4e6:	1bbf      	subs	r7, r7, r6
 800c4e8:	00bf      	lsls	r7, r7, #2
 800c4ea:	4467      	add	r7, ip
 800c4ec:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 800c4ee:	429f      	cmp	r7, r3
 800c4f0:	d100      	bne.n	800c4f4 <CheckAttachedButtons+0x24c>
 800c4f2:	e0e5      	b.n	800c6c0 <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c4f4:	7b26      	ldrb	r6, [r4, #12]
 800c4f6:	46b4      	mov	ip, r6
	t2 *= 1000;
 800c4f8:	0177      	lsls	r7, r6, #5
 800c4fa:	1bbf      	subs	r7, r7, r6
 800c4fc:	00bf      	lsls	r7, r7, #2
 800c4fe:	4467      	add	r7, ip
 800c500:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 800c502:	429f      	cmp	r7, r3
 800c504:	d009      	beq.n	800c51a <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800c506:	7b66      	ldrb	r6, [r4, #13]
 800c508:	46b4      	mov	ip, r6
	t3 *= 1000;
 800c50a:	0177      	lsls	r7, r6, #5
 800c50c:	1bbf      	subs	r7, r7, r6
 800c50e:	00bf      	lsls	r7, r7, #2
 800c510:	4467      	add	r7, ip
 800c512:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 800c514:	429f      	cmp	r7, r3
 800c516:	d000      	beq.n	800c51a <CheckAttachedButtons+0x272>
 800c518:	e769      	b.n	800c3ee <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c51a:	200a      	movs	r0, #10
 800c51c:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c51e:	9803      	ldr	r0, [sp, #12]
 800c520:	4281      	cmp	r1, r0
 800c522:	d800      	bhi.n	800c526 <CheckAttachedButtons+0x27e>
 800c524:	e76b      	b.n	800c3fe <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800c526:	464b      	mov	r3, r9
 800c528:	7d1b      	ldrb	r3, [r3, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d193      	bne.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c52e:	7c63      	ldrb	r3, [r4, #17]
 800c530:	071b      	lsls	r3, r3, #28
 800c532:	d590      	bpl.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c534:	2301      	movs	r3, #1
 800c536:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c538:	2102      	movs	r1, #2
 800c53a:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c53c:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c53e:	f7ff feaf 	bl	800c2a0 <buttonPressedForXCallback>
 800c542:	e788      	b.n	800c456 <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 800c544:	0003      	movs	r3, r0
 800c546:	4a26      	ldr	r2, [pc, #152]	; (800c5e0 <CheckAttachedButtons+0x338>)
 800c548:	3bf5      	subs	r3, #245	; 0xf5
 800c54a:	3bff      	subs	r3, #255	; 0xff
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d900      	bls.n	800c552 <CheckAttachedButtons+0x2aa>
 800c550:	e773      	b.n	800c43a <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c552:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 800c554:	014b      	lsls	r3, r1, #5
 800c556:	1a5b      	subs	r3, r3, r1
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	185b      	adds	r3, r3, r1
 800c55c:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800c55e:	4283      	cmp	r3, r0
 800c560:	d100      	bne.n	800c564 <CheckAttachedButtons+0x2bc>
 800c562:	e0d9      	b.n	800c718 <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c564:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 800c566:	014b      	lsls	r3, r1, #5
 800c568:	1a5b      	subs	r3, r3, r1
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	185b      	adds	r3, r3, r1
 800c56e:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800c570:	4283      	cmp	r3, r0
 800c572:	d008      	beq.n	800c586 <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 800c574:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 800c576:	014b      	lsls	r3, r1, #5
 800c578:	1a5b      	subs	r3, r3, r1
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	185b      	adds	r3, r3, r1
 800c57e:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800c580:	4283      	cmp	r3, r0
 800c582:	d000      	beq.n	800c586 <CheckAttachedButtons+0x2de>
 800c584:	e759      	b.n	800c43a <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c586:	230d      	movs	r3, #13
 800c588:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800c58a:	464b      	mov	r3, r9
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d000      	beq.n	800c594 <CheckAttachedButtons+0x2ec>
 800c592:	e760      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800c594:	7c63      	ldrb	r3, [r4, #17]
 800c596:	065b      	lsls	r3, r3, #25
 800c598:	d400      	bmi.n	800c59c <CheckAttachedButtons+0x2f4>
 800c59a:	e75c      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c59c:	2301      	movs	r3, #1
 800c59e:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c5a0:	2102      	movs	r1, #2
 800c5a2:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c5a4:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c5a6:	f7ff fe7d 	bl	800c2a4 <buttonReleasedForYCallback>
 800c5aa:	e754      	b.n	800c456 <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c5ac:	8831      	ldrh	r1, [r6, #0]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	9808      	ldr	r0, [sp, #32]
 800c5b2:	f004 fb75 	bl	8010ca0 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c5b6:	200a      	movs	r0, #10
 800c5b8:	f000 fcc4 	bl	800cf44 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c5bc:	8839      	ldrh	r1, [r7, #0]
 800c5be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5c0:	f004 fb68 	bl	8010c94 <HAL_GPIO_ReadPin>
 800c5c4:	4683      	mov	fp, r0
 800c5c6:	e6a5      	b.n	800c314 <CheckAttachedButtons+0x6c>
 800c5c8:	200023bc 	.word	0x200023bc
 800c5cc:	2000243c 	.word	0x2000243c
 800c5d0:	20006860 	.word	0x20006860
 800c5d4:	0000fffe 	.word	0x0000fffe
 800c5d8:	20002454 	.word	0x20002454
 800c5dc:	08017e30 	.word	0x08017e30
 800c5e0:	0000fe0a 	.word	0x0000fe0a
 800c5e4:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800c5e6:	9904      	ldr	r1, [sp, #16]
 800c5e8:	3338      	adds	r3, #56	; 0x38
 800c5ea:	00aa      	lsls	r2, r5, #2
 800c5ec:	589b      	ldr	r3, [r3, r2]
 800c5ee:	2904      	cmp	r1, #4
 800c5f0:	d000      	beq.n	800c5f4 <CheckAttachedButtons+0x34c>
 800c5f2:	e6af      	b.n	800c354 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 800c5f4:	4972      	ldr	r1, [pc, #456]	; (800c7c0 <CheckAttachedButtons+0x518>)
 800c5f6:	428b      	cmp	r3, r1
 800c5f8:	d819      	bhi.n	800c62e <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800c5fa:	4641      	mov	r1, r8
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	3138      	adds	r1, #56	; 0x38
 800c600:	508b      	str	r3, [r1, r2]
 800c602:	4870      	ldr	r0, [pc, #448]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c604:	e6c5      	b.n	800c392 <CheckAttachedButtons+0xea>
					clicked = 0;
 800c606:	2100      	movs	r1, #0
 800c608:	464e      	mov	r6, r9
 800c60a:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800c60c:	4e6e      	ldr	r6, [pc, #440]	; (800c7c8 <CheckAttachedButtons+0x520>)
 800c60e:	55a9      	strb	r1, [r5, r6]
 800c610:	e6bf      	b.n	800c392 <CheckAttachedButtons+0xea>
 800c612:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c614:	4658      	mov	r0, fp
 800c616:	00aa      	lsls	r2, r5, #2
 800c618:	3138      	adds	r1, #56	; 0x38
 800c61a:	588b      	ldr	r3, [r1, r2]
 800c61c:	2801      	cmp	r0, #1
 800c61e:	d100      	bne.n	800c622 <CheckAttachedButtons+0x37a>
 800c620:	e09d      	b.n	800c75e <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 800c622:	2800      	cmp	r0, #0
 800c624:	d000      	beq.n	800c628 <CheckAttachedButtons+0x380>
 800c626:	e691      	b.n	800c34c <CheckAttachedButtons+0xa4>
					state = OFF;
 800c628:	2101      	movs	r1, #1
 800c62a:	9104      	str	r1, [sp, #16]
 800c62c:	e69c      	b.n	800c368 <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c62e:	4643      	mov	r3, r8
 800c630:	2100      	movs	r1, #0
 800c632:	3338      	adds	r3, #56	; 0x38
 800c634:	5099      	str	r1, [r3, r2]
 800c636:	4863      	ldr	r0, [pc, #396]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c638:	2300      	movs	r3, #0
 800c63a:	e6aa      	b.n	800c392 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800c63c:	464b      	mov	r3, r9
 800c63e:	7d1b      	ldrb	r3, [r3, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d000      	beq.n	800c646 <CheckAttachedButtons+0x39e>
 800c644:	e707      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800c646:	7c63      	ldrb	r3, [r4, #17]
 800c648:	06db      	lsls	r3, r3, #27
 800c64a:	d400      	bmi.n	800c64e <CheckAttachedButtons+0x3a6>
 800c64c:	e703      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c64e:	2301      	movs	r3, #1
 800c650:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c652:	2103      	movs	r1, #3
 800c654:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c656:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c658:	f7ff fe22 	bl	800c2a0 <buttonPressedForXCallback>
 800c65c:	e6fb      	b.n	800c456 <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 800c65e:	4650      	mov	r0, sl
 800c660:	f7ff fe18 	bl	800c294 <buttonReleasedCallback>
				button[i].state = NONE;
 800c664:	2300      	movs	r3, #0
 800c666:	3501      	adds	r5, #1
 800c668:	7263      	strb	r3, [r4, #9]
 800c66a:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c66c:	2d06      	cmp	r5, #6
 800c66e:	d000      	beq.n	800c672 <CheckAttachedButtons+0x3ca>
 800c670:	e62a      	b.n	800c2c8 <CheckAttachedButtons+0x20>
 800c672:	e6f5      	b.n	800c460 <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 800c674:	464b      	mov	r3, r9
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d000      	beq.n	800c67e <CheckAttachedButtons+0x3d6>
 800c67c:	e6eb      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800c67e:	7c63      	ldrb	r3, [r4, #17]
 800c680:	2b7f      	cmp	r3, #127	; 0x7f
 800c682:	d800      	bhi.n	800c686 <CheckAttachedButtons+0x3de>
 800c684:	e6e7      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c686:	2301      	movs	r3, #1
 800c688:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c68a:	2103      	movs	r1, #3
 800c68c:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c68e:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c690:	f7ff fe08 	bl	800c2a4 <buttonReleasedForYCallback>
 800c694:	e6df      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c696:	3303      	adds	r3, #3
 800c698:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800c69a:	464a      	mov	r2, r9
 800c69c:	2300      	movs	r3, #0
 800c69e:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800c6a0:	464b      	mov	r3, r9
 800c6a2:	7d1b      	ldrb	r3, [r3, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d000      	beq.n	800c6aa <CheckAttachedButtons+0x402>
 800c6a8:	e6d5      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800c6aa:	7c63      	ldrb	r3, [r4, #17]
 800c6ac:	079b      	lsls	r3, r3, #30
 800c6ae:	d400      	bmi.n	800c6b2 <CheckAttachedButtons+0x40a>
 800c6b0:	e6d1      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800c6b6:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c6b8:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800c6ba:	f7ff fdef 	bl	800c29c <buttonDblClickedCallback>
 800c6be:	e6ca      	b.n	800c456 <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c6c0:	2009      	movs	r0, #9
 800c6c2:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c6c4:	9803      	ldr	r0, [sp, #12]
 800c6c6:	4281      	cmp	r1, r0
 800c6c8:	d800      	bhi.n	800c6cc <CheckAttachedButtons+0x424>
 800c6ca:	e698      	b.n	800c3fe <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800c6cc:	464b      	mov	r3, r9
 800c6ce:	7d1b      	ldrb	r3, [r3, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d000      	beq.n	800c6d6 <CheckAttachedButtons+0x42e>
 800c6d4:	e6bf      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800c6d6:	7c63      	ldrb	r3, [r4, #17]
 800c6d8:	075b      	lsls	r3, r3, #29
 800c6da:	d400      	bmi.n	800c6de <CheckAttachedButtons+0x436>
 800c6dc:	e6bb      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c6e6:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c6e8:	f7ff fdda 	bl	800c2a0 <buttonPressedForXCallback>
 800c6ec:	e6b3      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 800c6ee:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 800c6f4:	3b03      	subs	r3, #3
 800c6f6:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	7d1b      	ldrb	r3, [r3, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d000      	beq.n	800c702 <CheckAttachedButtons+0x45a>
 800c700:	e6a9      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800c702:	7c62      	ldrb	r2, [r4, #17]
 800c704:	3301      	adds	r3, #1
 800c706:	4213      	tst	r3, r2
 800c708:	d100      	bne.n	800c70c <CheckAttachedButtons+0x464>
 800c70a:	e6a4      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c70c:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 800c70e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c710:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 800c712:	f7ff fdc1 	bl	800c298 <buttonClickedCallback>
 800c716:	e69e      	b.n	800c456 <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c718:	230c      	movs	r3, #12
 800c71a:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800c71c:	464b      	mov	r3, r9
 800c71e:	7d1b      	ldrb	r3, [r3, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d000      	beq.n	800c726 <CheckAttachedButtons+0x47e>
 800c724:	e697      	b.n	800c456 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800c726:	7c63      	ldrb	r3, [r4, #17]
 800c728:	069b      	lsls	r3, r3, #26
 800c72a:	d400      	bmi.n	800c72e <CheckAttachedButtons+0x486>
 800c72c:	e693      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c72e:	2301      	movs	r3, #1
 800c730:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c732:	2101      	movs	r1, #1
 800c734:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c736:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c738:	f7ff fdb4 	bl	800c2a4 <buttonReleasedForYCallback>
 800c73c:	e68b      	b.n	800c456 <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c73e:	2008      	movs	r0, #8
					++releaseCounter[i];
 800c740:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c742:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 800c744:	3650      	adds	r6, #80	; 0x50
 800c746:	1c48      	adds	r0, r1, #1
 800c748:	50b0      	str	r0, [r6, r2]
 800c74a:	e65f      	b.n	800c40c <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 800c74c:	481c      	ldr	r0, [pc, #112]	; (800c7c0 <CheckAttachedButtons+0x518>)
 800c74e:	4283      	cmp	r3, r0
 800c750:	d80e      	bhi.n	800c770 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800c752:	3301      	adds	r3, #1
 800c754:	508b      	str	r3, [r1, r2]
 800c756:	2104      	movs	r1, #4
 800c758:	481a      	ldr	r0, [pc, #104]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c75a:	9104      	str	r1, [sp, #16]
 800c75c:	e619      	b.n	800c392 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800c75e:	4818      	ldr	r0, [pc, #96]	; (800c7c0 <CheckAttachedButtons+0x518>)
 800c760:	4283      	cmp	r3, r0
 800c762:	d919      	bls.n	800c798 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c764:	2300      	movs	r3, #0
 800c766:	508b      	str	r3, [r1, r2]
 800c768:	2102      	movs	r1, #2
 800c76a:	4816      	ldr	r0, [pc, #88]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c76c:	9104      	str	r1, [sp, #16]
 800c76e:	e610      	b.n	800c392 <CheckAttachedButtons+0xea>
 800c770:	2300      	movs	r3, #0
 800c772:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800c774:	2104      	movs	r1, #4
 800c776:	4813      	ldr	r0, [pc, #76]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c778:	9104      	str	r1, [sp, #16]
 800c77a:	e60a      	b.n	800c392 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800c77c:	4810      	ldr	r0, [pc, #64]	; (800c7c0 <CheckAttachedButtons+0x518>)
 800c77e:	4283      	cmp	r3, r0
 800c780:	d90a      	bls.n	800c798 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c782:	465b      	mov	r3, fp
 800c784:	508b      	str	r3, [r1, r2]
					state = ON;
 800c786:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 800c788:	2300      	movs	r3, #0
					state = ON;
 800c78a:	9104      	str	r1, [sp, #16]
 800c78c:	480d      	ldr	r0, [pc, #52]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c78e:	e600      	b.n	800c392 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800c790:	464e      	mov	r6, r9
 800c792:	3301      	adds	r3, #1
 800c794:	77b3      	strb	r3, [r6, #30]
 800c796:	e62a      	b.n	800c3ee <CheckAttachedButtons+0x146>
					state = ON;
 800c798:	2102      	movs	r1, #2
 800c79a:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 800c79c:	4641      	mov	r1, r8
 800c79e:	3301      	adds	r3, #1
 800c7a0:	3138      	adds	r1, #56	; 0x38
 800c7a2:	508b      	str	r3, [r1, r2]
 800c7a4:	4807      	ldr	r0, [pc, #28]	; (800c7c4 <CheckAttachedButtons+0x51c>)
 800c7a6:	e5f4      	b.n	800c392 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800c7a8:	7947      	ldrb	r7, [r0, #5]
 800c7aa:	429f      	cmp	r7, r3
 800c7ac:	d800      	bhi.n	800c7b0 <CheckAttachedButtons+0x508>
 800c7ae:	e61e      	b.n	800c3ee <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	464e      	mov	r6, r9
 800c7b4:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	4e03      	ldr	r6, [pc, #12]	; (800c7c8 <CheckAttachedButtons+0x520>)
 800c7ba:	55ab      	strb	r3, [r5, r6]
 800c7bc:	e617      	b.n	800c3ee <CheckAttachedButtons+0x146>
 800c7be:	46c0      	nop			; (mov r8, r8)
 800c7c0:	0000fffe 	.word	0x0000fffe
 800c7c4:	20006860 	.word	0x20006860
 800c7c8:	20002454 	.word	0x20002454

0800c7cc <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	4b03      	ldr	r3, [pc, #12]	; (800c7e0 <NVIC_SystemReset+0x14>)
 800c7d2:	4a04      	ldr	r2, [pc, #16]	; (800c7e4 <NVIC_SystemReset+0x18>)
 800c7d4:	60da      	str	r2, [r3, #12]
 800c7d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	e7fd      	b.n	800c7da <NVIC_SystemReset+0xe>
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	e000ed00 	.word	0xe000ed00
 800c7e4:	05fa0004 	.word	0x05fa0004

0800c7e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c7e8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c7ea:	f002 fd89 	bl	800f300 <HAL_IncTick>
  osSystickHandler();  
 800c7ee:	f000 ff5d 	bl	800d6ac <osSystickHandler>

}
 800c7f2:	bd10      	pop	{r4, pc}

0800c7f4 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c7f4:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c7f6:	24ff      	movs	r4, #255	; 0xff
 800c7f8:	4d09      	ldr	r5, [pc, #36]	; (800c820 <HardFault_Handler+0x2c>)
{
 800c7fa:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c7fc:	7828      	ldrb	r0, [r5, #0]
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	2211      	movs	r2, #17
 800c802:	4908      	ldr	r1, [pc, #32]	; (800c824 <HardFault_Handler+0x30>)
 800c804:	9400      	str	r4, [sp, #0]
 800c806:	f000 fd47 	bl	800d298 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c80a:	4b07      	ldr	r3, [pc, #28]	; (800c828 <HardFault_Handler+0x34>)
 800c80c:	7828      	ldrb	r0, [r5, #0]
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	220f      	movs	r2, #15
 800c812:	23ff      	movs	r3, #255	; 0xff
 800c814:	9400      	str	r4, [sp, #0]
 800c816:	f000 fd3f 	bl	800d298 <writePxMutex>
	NVIC_SystemReset();
 800c81a:	f7ff ffd7 	bl	800c7cc <NVIC_SystemReset>
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	20000c30 	.word	0x20000c30
 800c824:	0801a92c 	.word	0x0801a92c
 800c828:	200000a4 	.word	0x200000a4

0800c82c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c82c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c82e:	4802      	ldr	r0, [pc, #8]	; (800c838 <USART1_IRQHandler+0xc>)
 800c830:	f006 f8ca 	bl	80129c8 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c834:	bd10      	pop	{r4, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	20006aa0 	.word	0x20006aa0

0800c83c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c83c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c83e:	4802      	ldr	r0, [pc, #8]	; (800c848 <USART2_IRQHandler+0xc>)
 800c840:	f006 f8c2 	bl	80129c8 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c844:	bd10      	pop	{r4, pc}
 800c846:	46c0      	nop			; (mov r8, r8)
 800c848:	20006b8c 	.word	0x20006b8c

0800c84c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c84c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c84e:	4805      	ldr	r0, [pc, #20]	; (800c864 <USART3_8_IRQHandler+0x18>)
 800c850:	f006 f8ba 	bl	80129c8 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c854:	4804      	ldr	r0, [pc, #16]	; (800c868 <USART3_8_IRQHandler+0x1c>)
 800c856:	f006 f8b7 	bl	80129c8 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c85a:	4804      	ldr	r0, [pc, #16]	; (800c86c <USART3_8_IRQHandler+0x20>)
 800c85c:	f006 f8b4 	bl	80129c8 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c860:	bd10      	pop	{r4, pc}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	20006980 	.word	0x20006980
 800c868:	20006a30 	.word	0x20006a30
 800c86c:	20006b18 	.word	0x20006b18

0800c870 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800c872:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	2310      	movs	r3, #16
 800c878:	4213      	tst	r3, r2
 800c87a:	d10e      	bne.n	800c89a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c87c:	4a0a      	ldr	r2, [pc, #40]	; (800c8a8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c87e:	6811      	ldr	r1, [r2, #0]
 800c880:	05c9      	lsls	r1, r1, #23
 800c882:	d406      	bmi.n	800c892 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c884:	6812      	ldr	r2, [r2, #0]
 800c886:	4213      	tst	r3, r2
 800c888:	d002      	beq.n	800c890 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c88a:	4808      	ldr	r0, [pc, #32]	; (800c8ac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c88c:	f003 fa86 	bl	800fd9c <HAL_DMA_IRQHandler>
	}
}
 800c890:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c892:	2002      	movs	r0, #2
 800c894:	f7fa fe68 	bl	8007568 <DMA_IRQHandler>
 800c898:	e7fa      	b.n	800c890 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800c89a:	2005      	movs	r0, #5
 800c89c:	f7fa fe64 	bl	8007568 <DMA_IRQHandler>
 800c8a0:	e7f6      	b.n	800c890 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	40020400 	.word	0x40020400
 800c8a8:	40020000 	.word	0x40020000
 800c8ac:	200021c0 	.word	0x200021c0

0800c8b0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c8b0:	4b12      	ldr	r3, [pc, #72]	; (800c8fc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800c8b2:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	03d2      	lsls	r2, r2, #15
 800c8b8:	d414      	bmi.n	800c8e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	02d2      	lsls	r2, r2, #11
 800c8be:	d40d      	bmi.n	800c8dc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c8c0:	4a0f      	ldr	r2, [pc, #60]	; (800c900 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	05d2      	lsls	r2, r2, #23
 800c8c6:	d411      	bmi.n	800c8ec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	04d2      	lsls	r2, r2, #19
 800c8cc:	d412      	bmi.n	800c8f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	01db      	lsls	r3, r3, #7
 800c8d2:	d506      	bpl.n	800c8e2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c8d4:	480b      	ldr	r0, [pc, #44]	; (800c904 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c8d6:	f003 fa61 	bl	800fd9c <HAL_DMA_IRQHandler>
	}
}
 800c8da:	e002      	b.n	800c8e2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800c8dc:	2004      	movs	r0, #4
 800c8de:	f7fa fe43 	bl	8007568 <DMA_IRQHandler>
}
 800c8e2:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800c8e4:	2003      	movs	r0, #3
 800c8e6:	f7fa fe3f 	bl	8007568 <DMA_IRQHandler>
 800c8ea:	e7fa      	b.n	800c8e2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800c8ec:	2006      	movs	r0, #6
 800c8ee:	f7fa fe3b 	bl	8007568 <DMA_IRQHandler>
 800c8f2:	e7f6      	b.n	800c8e2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c8f4:	4804      	ldr	r0, [pc, #16]	; (800c908 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c8f6:	f003 fa51 	bl	800fd9c <HAL_DMA_IRQHandler>
 800c8fa:	e7f2      	b.n	800c8e2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800c8fc:	40020000 	.word	0x40020000
 800c900:	40020400 	.word	0x40020400
 800c904:	20002230 	.word	0x20002230
 800c908:	200021f8 	.word	0x200021f8

0800c90c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800c90c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800c90e:	4802      	ldr	r0, [pc, #8]	; (800c918 <ADC1_COMP_IRQHandler+0xc>)
 800c910:	f002 ff3c 	bl	800f78c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800c914:	bd10      	pop	{r4, pc}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	20006c20 	.word	0x20006c20

0800c91c <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c91c:	2300      	movs	r3, #0
{
 800c91e:	b510      	push	{r4, lr}
 800c920:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c922:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c924:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800c926:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c92c:	f7fd ff64 	bl	800a7f8 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c930:	0020      	movs	r0, r4
 800c932:	f7fd fb23 	bl	8009f7c <GetPort>
 800c936:	4b04      	ldr	r3, [pc, #16]	; (800c948 <HAL_UART_TxCpltCallback+0x2c>)
 800c938:	0080      	lsls	r0, r0, #2
 800c93a:	58c0      	ldr	r0, [r0, r3]
 800c93c:	a901      	add	r1, sp, #4
 800c93e:	f001 f9ed 	bl	800dd1c <xQueueGiveFromISR>
}
 800c942:	b002      	add	sp, #8
 800c944:	bd10      	pop	{r4, pc}
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	200068e4 	.word	0x200068e4

0800c94c <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c94c:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c94e:	2369      	movs	r3, #105	; 0x69
 800c950:	2501      	movs	r5, #1
 800c952:	54c5      	strb	r5, [r0, r3]
{
 800c954:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c956:	f7fd fb11 	bl	8009f7c <GetPort>
	if (portStatus[port] == STREAM) {
 800c95a:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <HAL_UART_ErrorCallback+0x3c>)
 800c95c:	5c1b      	ldrb	r3, [r3, r0]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d004      	beq.n	800c96c <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <HAL_UART_ErrorCallback+0x40>)
 800c964:	1818      	adds	r0, r3, r0
 800c966:	3801      	subs	r0, #1
 800c968:	7005      	strb	r5, [r0, #0]
	}	
}
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c96e:	3801      	subs	r0, #1
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	0080      	lsls	r0, r0, #2
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <HAL_UART_ErrorCallback+0x44>)
 800c978:	b292      	uxth	r2, r2
 800c97a:	58c3      	ldr	r3, [r0, r3]
 800c97c:	0020      	movs	r0, r4
 800c97e:	6819      	ldr	r1, [r3, #0]
 800c980:	3128      	adds	r1, #40	; 0x28
 800c982:	f005 fca1 	bl	80122c8 <HAL_UART_Receive_DMA>
 800c986:	e7f0      	b.n	800c96a <HAL_UART_ErrorCallback+0x1e>
 800c988:	20000c34 	.word	0x20000c34
 800c98c:	20001894 	.word	0x20001894
 800c990:	20001858 	.word	0x20001858

0800c994 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c996:	46de      	mov	lr, fp
 800c998:	464e      	mov	r6, r9
 800c99a:	4645      	mov	r5, r8
 800c99c:	4657      	mov	r7, sl
 800c99e:	b5e0      	push	{r5, r6, r7, lr}
 800c9a0:	b085      	sub	sp, #20
 800c9a2:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800c9a4:	f7fd faea 	bl	8009f7c <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c9a8:	4e63      	ldr	r6, [pc, #396]	; (800cb38 <HAL_UART_RxCpltCallback+0x1a4>)
	uint8_t port_index = port_number - 1;
 800c9aa:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	4a63      	ldr	r2, [pc, #396]	; (800cb3c <HAL_UART_RxCpltCallback+0x1a8>)
 800c9b0:	5cf5      	ldrb	r5, [r6, r3]
 800c9b2:	5c11      	ldrb	r1, [r2, r0]
 800c9b4:	2d0d      	cmp	r5, #13
 800c9b6:	d00a      	beq.n	800c9ce <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800c9b8:	2903      	cmp	r1, #3
 800c9ba:	d00c      	beq.n	800c9d6 <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c9bc:	2d48      	cmp	r5, #72	; 0x48
 800c9be:	d06d      	beq.n	800ca9c <HAL_UART_RxCpltCallback+0x108>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800c9c0:	2d5a      	cmp	r5, #90	; 0x5a
 800c9c2:	d11b      	bne.n	800c9fc <HAL_UART_RxCpltCallback+0x68>
 800c9c4:	2907      	cmp	r1, #7
 800c9c6:	d11c      	bne.n	800ca02 <HAL_UART_RxCpltCallback+0x6e>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	5413      	strb	r3, [r2, r0]
 800c9cc:	e006      	b.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c9ce:	2900      	cmp	r1, #0
 800c9d0:	d048      	beq.n	800ca64 <HAL_UART_RxCpltCallback+0xd0>
	else if(portStatus[port_number] == CLI)
 800c9d2:	2903      	cmp	r1, #3
 800c9d4:	d112      	bne.n	800c9fc <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800c9d6:	4b5a      	ldr	r3, [pc, #360]	; (800cb40 <HAL_UART_RxCpltCallback+0x1ac>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800c9dc:	0020      	movs	r0, r4
 800c9de:	f7fd facd 	bl	8009f7c <GetPort>
 800c9e2:	1e41      	subs	r1, r0, #1
 800c9e4:	1871      	adds	r1, r6, r1
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	0020      	movs	r0, r4
 800c9ea:	f005 fc6d 	bl	80122c8 <HAL_UART_Receive_DMA>
}
 800c9ee:	b005      	add	sp, #20
 800c9f0:	bc3c      	pop	{r2, r3, r4, r5}
 800c9f2:	4690      	mov	r8, r2
 800c9f4:	4699      	mov	r9, r3
 800c9f6:	46a2      	mov	sl, r4
 800c9f8:	46ab      	mov	fp, r5
 800c9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800c9fc:	2907      	cmp	r1, #7
 800c9fe:	d100      	bne.n	800ca02 <HAL_UART_RxCpltCallback+0x6e>
 800ca00:	e081      	b.n	800cb06 <HAL_UART_RxCpltCallback+0x172>
	else if(portStatus[port_number] == Z_Status)
 800ca02:	2908      	cmp	r1, #8
 800ca04:	d100      	bne.n	800ca08 <HAL_UART_RxCpltCallback+0x74>
 800ca06:	e081      	b.n	800cb0c <HAL_UART_RxCpltCallback+0x178>
	else if(portStatus[port_number] == MSG)
 800ca08:	2901      	cmp	r1, #1
 800ca0a:	d1e7      	bne.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
 800ca0c:	4f4d      	ldr	r7, [pc, #308]	; (800cb44 <HAL_UART_RxCpltCallback+0x1b0>)
		if(temp_length[port_index] > 1)
 800ca0e:	494d      	ldr	r1, [pc, #308]	; (800cb44 <HAL_UART_RxCpltCallback+0x1b0>)
 800ca10:	5cff      	ldrb	r7, [r7, r3]
 800ca12:	18c9      	adds	r1, r1, r3
 800ca14:	46b9      	mov	r9, r7
 800ca16:	2701      	movs	r7, #1
 800ca18:	444f      	add	r7, r9
 800ca1a:	b2ff      	uxtb	r7, r7
 800ca1c:	4688      	mov	r8, r1
 800ca1e:	7a09      	ldrb	r1, [r1, #8]
 800ca20:	9702      	str	r7, [sp, #8]
 800ca22:	2701      	movs	r7, #1
 800ca24:	468c      	mov	ip, r1
 800ca26:	427f      	negs	r7, r7
 800ca28:	4467      	add	r7, ip
 800ca2a:	b2ff      	uxtb	r7, r7
 800ca2c:	9701      	str	r7, [sp, #4]
 800ca2e:	4667      	mov	r7, ip
 800ca30:	4945      	ldr	r1, [pc, #276]	; (800cb48 <HAL_UART_RxCpltCallback+0x1b4>)
 800ca32:	468a      	mov	sl, r1
 800ca34:	5cc9      	ldrb	r1, [r1, r3]
 800ca36:	9100      	str	r1, [sp, #0]
 800ca38:	2f01      	cmp	r7, #1
 800ca3a:	d934      	bls.n	800caa6 <HAL_UART_RxCpltCallback+0x112>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ca3c:	00ca      	lsls	r2, r1, #3
 800ca3e:	1a52      	subs	r2, r2, r1
 800ca40:	4694      	mov	ip, r2
 800ca42:	0099      	lsls	r1, r3, #2
 800ca44:	18c9      	adds	r1, r1, r3
 800ca46:	00ca      	lsls	r2, r1, #3
 800ca48:	1a51      	subs	r1, r2, r1
 800ca4a:	4461      	add	r1, ip
 800ca4c:	4a3f      	ldr	r2, [pc, #252]	; (800cb4c <HAL_UART_RxCpltCallback+0x1b8>)
 800ca4e:	00c9      	lsls	r1, r1, #3
 800ca50:	1851      	adds	r1, r2, r1
 800ca52:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800ca54:	9f02      	ldr	r7, [sp, #8]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ca56:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800ca58:	4a3a      	ldr	r2, [pc, #232]	; (800cb44 <HAL_UART_RxCpltCallback+0x1b0>)
 800ca5a:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800ca5c:	4643      	mov	r3, r8
 800ca5e:	9f01      	ldr	r7, [sp, #4]
 800ca60:	721f      	strb	r7, [r3, #8]
 800ca62:	e7bb      	b.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800ca64:	2300      	movs	r3, #0
				portStatus[i] = FREE;
 800ca66:	2700      	movs	r7, #0
			if(portStatus[i] == CLI)
 800ca68:	18d1      	adds	r1, r2, r3
 800ca6a:	780d      	ldrb	r5, [r1, #0]
 800ca6c:	2d03      	cmp	r5, #3
 800ca6e:	d100      	bne.n	800ca72 <HAL_UART_RxCpltCallback+0xde>
				portStatus[i] = FREE;
 800ca70:	700f      	strb	r7, [r1, #0]
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800ca72:	3301      	adds	r3, #1
 800ca74:	2b06      	cmp	r3, #6
 800ca76:	d1f7      	bne.n	800ca68 <HAL_UART_RxCpltCallback+0xd4>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800ca78:	3b03      	subs	r3, #3
 800ca7a:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800ca7c:	4b34      	ldr	r3, [pc, #208]	; (800cb50 <HAL_UART_RxCpltCallback+0x1bc>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800ca7e:	2202      	movs	r2, #2
		PcPort = port_number;
 800ca80:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800ca82:	4b34      	ldr	r3, [pc, #208]	; (800cb54 <HAL_UART_RxCpltCallback+0x1c0>)
 800ca84:	2100      	movs	r1, #0
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	f002 f897 	bl	800ebbc <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800ca8e:	4b32      	ldr	r3, [pc, #200]	; (800cb58 <HAL_UART_RxCpltCallback+0x1c4>)
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	2a01      	cmp	r2, #1
 800ca94:	d1a0      	bne.n	800c9d8 <HAL_UART_RxCpltCallback+0x44>
 800ca96:	492a      	ldr	r1, [pc, #168]	; (800cb40 <HAL_UART_RxCpltCallback+0x1ac>)
 800ca98:	700a      	strb	r2, [r1, #0]
 800ca9a:	e79d      	b.n	800c9d8 <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800ca9c:	2900      	cmp	r1, #0
 800ca9e:	d1ad      	bne.n	800c9fc <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800caa0:	2307      	movs	r3, #7
 800caa2:	5413      	strb	r3, [r2, r0]
 800caa4:	e79a      	b.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800caa6:	9900      	ldr	r1, [sp, #0]
 800caa8:	00cf      	lsls	r7, r1, #3
 800caaa:	1a7f      	subs	r7, r7, r1
 800caac:	9703      	str	r7, [sp, #12]
 800caae:	009f      	lsls	r7, r3, #2
 800cab0:	46bb      	mov	fp, r7
 800cab2:	449b      	add	fp, r3
 800cab4:	465f      	mov	r7, fp
 800cab6:	4659      	mov	r1, fp
 800cab8:	00ff      	lsls	r7, r7, #3
 800caba:	1a7f      	subs	r7, r7, r1
 800cabc:	46bc      	mov	ip, r7
 800cabe:	9f03      	ldr	r7, [sp, #12]
 800cac0:	46bb      	mov	fp, r7
 800cac2:	44dc      	add	ip, fp
 800cac4:	4661      	mov	r1, ip
 800cac6:	00c9      	lsls	r1, r1, #3
 800cac8:	468c      	mov	ip, r1
 800caca:	4920      	ldr	r1, [pc, #128]	; (800cb4c <HAL_UART_RxCpltCallback+0x1b8>)
 800cacc:	464f      	mov	r7, r9
 800cace:	468b      	mov	fp, r1
 800cad0:	44dc      	add	ip, fp
 800cad2:	4661      	mov	r1, ip
 800cad4:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800cad6:	9902      	ldr	r1, [sp, #8]
 800cad8:	4d1a      	ldr	r5, [pc, #104]	; (800cb44 <HAL_UART_RxCpltCallback+0x1b0>)
 800cada:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800cadc:	4641      	mov	r1, r8
 800cade:	9d01      	ldr	r5, [sp, #4]
 800cae0:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800cae2:	9900      	ldr	r1, [sp, #0]
 800cae4:	3101      	adds	r1, #1
 800cae6:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800cae8:	2905      	cmp	r1, #5
 800caea:	d100      	bne.n	800caee <HAL_UART_RxCpltCallback+0x15a>
 800caec:	2100      	movs	r1, #0
 800caee:	4655      	mov	r5, sl
 800caf0:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800caf2:	491a      	ldr	r1, [pc, #104]	; (800cb5c <HAL_UART_RxCpltCallback+0x1c8>)
 800caf4:	4d1a      	ldr	r5, [pc, #104]	; (800cb60 <HAL_UART_RxCpltCallback+0x1cc>)
 800caf6:	780b      	ldrb	r3, [r1, #0]
 800caf8:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800cafa:	3301      	adds	r3, #1
 800cafc:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800cafe:	2b05      	cmp	r3, #5
 800cb00:	d100      	bne.n	800cb04 <HAL_UART_RxCpltCallback+0x170>
 800cb02:	2300      	movs	r3, #0
 800cb04:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800cb06:	2300      	movs	r3, #0
 800cb08:	5413      	strb	r3, [r2, r0]
 800cb0a:	e767      	b.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800cb0c:	3907      	subs	r1, #7
 800cb0e:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800cb10:	4a0d      	ldr	r2, [pc, #52]	; (800cb48 <HAL_UART_RxCpltCallback+0x1b4>)
 800cb12:	5cd7      	ldrb	r7, [r2, r3]
 800cb14:	00fa      	lsls	r2, r7, #3
 800cb16:	1bd7      	subs	r7, r2, r7
 800cb18:	009a      	lsls	r2, r3, #2
 800cb1a:	18d2      	adds	r2, r2, r3
 800cb1c:	00d1      	lsls	r1, r2, #3
 800cb1e:	1a8a      	subs	r2, r1, r2
 800cb20:	19d2      	adds	r2, r2, r7
 800cb22:	490a      	ldr	r1, [pc, #40]	; (800cb4c <HAL_UART_RxCpltCallback+0x1b8>)
 800cb24:	00d2      	lsls	r2, r2, #3
 800cb26:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800cb28:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800cb2a:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800cb2c:	4a05      	ldr	r2, [pc, #20]	; (800cb44 <HAL_UART_RxCpltCallback+0x1b0>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800cb2e:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800cb30:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800cb32:	18d3      	adds	r3, r2, r3
 800cb34:	721d      	strb	r5, [r3, #8]
 800cb36:	e751      	b.n	800c9dc <HAL_UART_RxCpltCallback+0x48>
 800cb38:	20001c9c 	.word	0x20001c9c
 800cb3c:	20000c34 	.word	0x20000c34
 800cb40:	200016d9 	.word	0x200016d9
 800cb44:	2000245c 	.word	0x2000245c
 800cb48:	200016cc 	.word	0x200016cc
 800cb4c:	20001154 	.word	0x20001154
 800cb50:	20000c30 	.word	0x20000c30
 800cb54:	20001cb0 	.word	0x20001cb0
 800cb58:	200016da 	.word	0x200016da
 800cb5c:	20001147 	.word	0x20001147
 800cb60:	2000114c 	.word	0x2000114c

0800cb64 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/
/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800cb64:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800cb66:	24ff      	movs	r4, #255	; 0xff
 800cb68:	4d09      	ldr	r5, [pc, #36]	; (800cb90 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800cb6a:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800cb6c:	7828      	ldrb	r0, [r5, #0]
 800cb6e:	23ff      	movs	r3, #255	; 0xff
 800cb70:	2210      	movs	r2, #16
 800cb72:	4908      	ldr	r1, [pc, #32]	; (800cb94 <vApplicationStackOverflowHook+0x30>)
 800cb74:	9400      	str	r4, [sp, #0]
 800cb76:	f000 fb8f 	bl	800d298 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cb7a:	4b07      	ldr	r3, [pc, #28]	; (800cb98 <vApplicationStackOverflowHook+0x34>)
 800cb7c:	7828      	ldrb	r0, [r5, #0]
 800cb7e:	6819      	ldr	r1, [r3, #0]
 800cb80:	220f      	movs	r2, #15
 800cb82:	23ff      	movs	r3, #255	; 0xff
 800cb84:	9400      	str	r4, [sp, #0]
 800cb86:	f000 fb87 	bl	800d298 <writePxMutex>
	NVIC_SystemReset();
 800cb8a:	f7ff fe1f 	bl	800c7cc <NVIC_SystemReset>
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	20000c30 	.word	0x20000c30
 800cb94:	0801a940 	.word	0x0801a940
 800cb98:	200000a4 	.word	0x200000a4

0800cb9c <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	void vApplicationMallocFailedHook(void){
 800cb9c:	b530      	push	{r4, r5, lr}
		uint8_t* error_message = "Heap size exceeded\r\n";
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800cb9e:	24ff      	movs	r4, #255	; 0xff
 800cba0:	4d09      	ldr	r5, [pc, #36]	; (800cbc8 <vApplicationMallocFailedHook+0x2c>)
	void vApplicationMallocFailedHook(void){
 800cba2:	b083      	sub	sp, #12
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800cba4:	7828      	ldrb	r0, [r5, #0]
 800cba6:	23ff      	movs	r3, #255	; 0xff
 800cba8:	2214      	movs	r2, #20
 800cbaa:	4908      	ldr	r1, [pc, #32]	; (800cbcc <vApplicationMallocFailedHook+0x30>)
 800cbac:	9400      	str	r4, [sp, #0]
 800cbae:	f000 fb73 	bl	800d298 <writePxMutex>
		writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cbb2:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <vApplicationMallocFailedHook+0x34>)
 800cbb4:	7828      	ldrb	r0, [r5, #0]
 800cbb6:	6819      	ldr	r1, [r3, #0]
 800cbb8:	220f      	movs	r2, #15
 800cbba:	23ff      	movs	r3, #255	; 0xff
 800cbbc:	9400      	str	r4, [sp, #0]
 800cbbe:	f000 fb6b 	bl	800d298 <writePxMutex>
		NVIC_SystemReset();
 800cbc2:	f7ff fe03 	bl	800c7cc <NVIC_SystemReset>
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	20000c30 	.word	0x20000c30
 800cbcc:	0801a954 	.word	0x0801a954
 800cbd0:	200000a4 	.word	0x200000a4

0800cbd4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd6:	46de      	mov	lr, fp
 800cbd8:	464e      	mov	r6, r9
 800cbda:	4645      	mov	r5, r8
 800cbdc:	4657      	mov	r7, sl
 800cbde:	b5e0      	push	{r5, r6, r7, lr}
 800cbe0:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cbe2:	ae04      	add	r6, sp, #16
 800cbe4:	0032      	movs	r2, r6
 800cbe6:	4b34      	ldr	r3, [pc, #208]	; (800ccb8 <RTC_CalendarConfig+0xe4>)
 800cbe8:	cb13      	ldmia	r3!, {r0, r1, r4}
 800cbea:	c213      	stmia	r2!, {r0, r1, r4}
 800cbec:	ab01      	add	r3, sp, #4
 800cbee:	4698      	mov	r8, r3
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	4b32      	ldr	r3, [pc, #200]	; (800ccbc <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800cbf4:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cbf6:	cb03      	ldmia	r3!, {r0, r1}
 800cbf8:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800cbfa:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cbfc:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cbfe:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc00:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cc02:	f005 ff70 	bl	8012ae6 <atoi>
 800cc06:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800cc08:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800cc0a:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800cc0c:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800cc0e:	f005 ff6a 	bl	8012ae6 <atoi>
 800cc12:	b2c3      	uxtb	r3, r0
 800cc14:	4699      	mov	r9, r3
 800cc16:	4d2a      	ldr	r5, [pc, #168]	; (800ccc0 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800cc18:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc1a:	6829      	ldr	r1, [r5, #0]
 800cc1c:	0030      	movs	r0, r6
 800cc1e:	f7f3 fa71 	bl	8000104 <strcmp>
 800cc22:	3401      	adds	r4, #1
 800cc24:	b2e4      	uxtb	r4, r4
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d100      	bne.n	800cc2c <RTC_CalendarConfig+0x58>
 800cc2a:	0027      	movs	r7, r4
 800cc2c:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800cc2e:	2c0c      	cmp	r4, #12
 800cc30:	d1f3      	bne.n	800cc1a <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cc32:	200a      	movs	r0, #10
 800cc34:	4468      	add	r0, sp
 800cc36:	f005 ff56 	bl	8012ae6 <atoi>
	*(comDate + 5) = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	7173      	strb	r3, [r6, #5]
 800cc3e:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800cc40:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800cc42:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800cc44:	1dd8      	adds	r0, r3, #7
 800cc46:	f005 ff4e 	bl	8012ae6 <atoi>
	*(comDate + 2) = 0;
 800cc4a:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800cc4c:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800cc4e:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800cc50:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800cc52:	f005 ff48 	bl	8012ae6 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800cc56:	466b      	mov	r3, sp
 800cc58:	4652      	mov	r2, sl
 800cc5a:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800cc5c:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800cc5e:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800cc60:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cc62:	466a      	mov	r2, sp
 800cc64:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cc66:	4f17      	ldr	r7, [pc, #92]	; (800ccc4 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800cc68:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cc6a:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cc6c:	4669      	mov	r1, sp
 800cc6e:	2200      	movs	r2, #0
 800cc70:	0038      	movs	r0, r7
 800cc72:	f004 fe63 	bl	801193c <HAL_RTC_SetDate>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d116      	bne.n	800cca8 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cc7a:	2218      	movs	r2, #24
 800cc7c:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800cc7e:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cc80:	7208      	strb	r0, [r1, #8]
 800cc82:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cc84:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cc86:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800cc8c:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800cc8e:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800cc90:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cc92:	f004 fdbf 	bl	8011814 <HAL_RTC_SetTime>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d106      	bne.n	800cca8 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cc9a:	0038      	movs	r0, r7
 800cc9c:	4a0b      	ldr	r2, [pc, #44]	; (800cccc <RTC_CalendarConfig+0xf8>)
 800cc9e:	2101      	movs	r1, #1
 800cca0:	f004 fec8 	bl	8011a34 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cca4:	2000      	movs	r0, #0
 800cca6:	e000      	b.n	800ccaa <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800cca8:	20ff      	movs	r0, #255	; 0xff
}
 800ccaa:	b00d      	add	sp, #52	; 0x34
 800ccac:	bc3c      	pop	{r2, r3, r4, r5}
 800ccae:	4690      	mov	r8, r2
 800ccb0:	4699      	mov	r9, r3
 800ccb2:	46a2      	mov	sl, r4
 800ccb4:	46ab      	mov	fp, r5
 800ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb8:	080180fc 	.word	0x080180fc
 800ccbc:	08018120 	.word	0x08018120
 800ccc0:	20000064 	.word	0x20000064
 800ccc4:	20006c6c 	.word	0x20006c6c
 800ccc8:	20006860 	.word	0x20006860
 800cccc:	000032f2 	.word	0x000032f2

0800ccd0 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800ccd0:	2380      	movs	r3, #128	; 0x80
{
 800ccd2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800ccd4:	4d1e      	ldr	r5, [pc, #120]	; (800cd50 <RTC_Init+0x80>)
 800ccd6:	021b      	lsls	r3, r3, #8
 800ccd8:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800ccda:	4c1e      	ldr	r4, [pc, #120]	; (800cd54 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800cce0:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800cce2:	4b1d      	ldr	r3, [pc, #116]	; (800cd58 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800cce4:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800cce6:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cce8:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800ccea:	4a1c      	ldr	r2, [pc, #112]	; (800cd5c <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ccec:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800ccee:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800ccf0:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ccf2:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ccf4:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ccf6:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ccf8:	f004 fd44 	bl	8011784 <HAL_RTC_Init>
 800ccfc:	0006      	movs	r6, r0
 800ccfe:	20ff      	movs	r0, #255	; 0xff
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	d119      	bne.n	800cd38 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cd04:	2101      	movs	r1, #1
 800cd06:	0020      	movs	r0, r4
 800cd08:	f004 fe9a 	bl	8011a40 <HAL_RTCEx_BKUPRead>
 800cd0c:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <RTC_Init+0x90>)
 800cd0e:	4298      	cmp	r0, r3
 800cd10:	d113      	bne.n	800cd3a <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cd12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd14:	011b      	lsls	r3, r3, #4
 800cd16:	d501      	bpl.n	800cd1c <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cd18:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <RTC_Init+0x94>)
 800cd1a:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	; (800cd50 <RTC_Init+0x80>)
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	015b      	lsls	r3, r3, #5
 800cd22:	d50c      	bpl.n	800cd3e <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800cd24:	2201      	movs	r2, #1
 800cd26:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <RTC_Init+0x94>)
	return BOS_OK;
 800cd28:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800cd2a:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cd2c:	2380      	movs	r3, #128	; 0x80
 800cd2e:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <RTC_Init+0x80>)
 800cd30:	045b      	lsls	r3, r3, #17
 800cd32:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cd34:	430b      	orrs	r3, r1
 800cd36:	6253      	str	r3, [r2, #36]	; 0x24
}
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800cd3a:	f7ff ff4b 	bl	800cbd4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cd3e:	2380      	movs	r3, #128	; 0x80
 800cd40:	4a03      	ldr	r2, [pc, #12]	; (800cd50 <RTC_Init+0x80>)
 800cd42:	045b      	lsls	r3, r3, #17
 800cd44:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800cd46:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cd48:	430b      	orrs	r3, r1
 800cd4a:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cd4c:	e7f4      	b.n	800cd38 <RTC_Init+0x68>
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	40021000 	.word	0x40021000
 800cd54:	20006c6c 	.word	0x20006c6c
 800cd58:	40002800 	.word	0x40002800
 800cd5c:	000007cf 	.word	0x000007cf
 800cd60:	000032f2 	.word	0x000032f2
 800cd64:	20002469 	.word	0x20002469

0800cd68 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6a:	46c6      	mov	lr, r8
 800cd6c:	b500      	push	{lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	ac0c      	add	r4, sp, #48	; 0x30
 800cd72:	7827      	ldrb	r7, [r4, #0]
 800cd74:	ac0d      	add	r4, sp, #52	; 0x34
 800cd76:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cd78:	3230      	adds	r2, #48	; 0x30
{
 800cd7a:	46a0      	mov	r8, r4
 800cd7c:	ac0e      	add	r4, sp, #56	; 0x38
 800cd7e:	7825      	ldrb	r5, [r4, #0]
 800cd80:	ac0f      	add	r4, sp, #60	; 0x3c
 800cd82:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800cd84:	466c      	mov	r4, sp
 800cd86:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cd88:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cd8a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cd8c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cd8e:	4c20      	ldr	r4, [pc, #128]	; (800ce10 <BOS_CalendarConfig+0xa8>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	4669      	mov	r1, sp
 800cd94:	0020      	movs	r0, r4
 800cd96:	f004 fdd1 	bl	801193c <HAL_RTC_SetDate>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d123      	bne.n	800cde6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800cd9e:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800cda0:	a901      	add	r1, sp, #4
 800cda2:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800cda4:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800cda6:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800cda8:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800cdaa:	2d0c      	cmp	r5, #12
 800cdac:	d820      	bhi.n	800cdf0 <BOS_CalendarConfig+0x88>
 800cdae:	4d19      	ldr	r5, [pc, #100]	; (800ce14 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800cdb0:	2e01      	cmp	r6, #1
 800cdb2:	d022      	beq.n	800cdfa <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800cdb4:	2e02      	cmp	r6, #2
 800cdb6:	d025      	beq.n	800ce04 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800cdb8:	2318      	movs	r3, #24
 800cdba:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	0020      	movs	r0, r4
 800cdc0:	f004 fd28 	bl	8011814 <HAL_RTC_SetTime>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d10e      	bne.n	800cde6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800cdc8:	7b6b      	ldrb	r3, [r5, #13]
 800cdca:	7929      	ldrb	r1, [r5, #4]
 800cdcc:	021b      	lsls	r3, r3, #8
 800cdce:	301b      	adds	r0, #27
 800cdd0:	4319      	orrs	r1, r3
 800cdd2:	30ff      	adds	r0, #255	; 0xff
 800cdd4:	f7fe f9be 	bl	800b154 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cdd8:	0020      	movs	r0, r4
 800cdda:	4a0f      	ldr	r2, [pc, #60]	; (800ce18 <BOS_CalendarConfig+0xb0>)
 800cddc:	2101      	movs	r1, #1
 800cdde:	f004 fe29 	bl	8011a34 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cde2:	2000      	movs	r0, #0
 800cde4:	e000      	b.n	800cde8 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800cde6:	20ff      	movs	r0, #255	; 0xff
}
 800cde8:	b006      	add	sp, #24
 800cdea:	bc04      	pop	{r2}
 800cdec:	4690      	mov	r8, r2
 800cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800cdf0:	2318      	movs	r3, #24
 800cdf2:	4d08      	ldr	r5, [pc, #32]	; (800ce14 <BOS_CalendarConfig+0xac>)
 800cdf4:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800cdf6:	2e01      	cmp	r6, #1
 800cdf8:	d1dc      	bne.n	800cdb4 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cdfe:	330c      	adds	r3, #12
 800ce00:	736b      	strb	r3, [r5, #13]
 800ce02:	e7db      	b.n	800cdbc <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ce04:	2340      	movs	r3, #64	; 0x40
 800ce06:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800ce08:	3b34      	subs	r3, #52	; 0x34
 800ce0a:	736b      	strb	r3, [r5, #13]
 800ce0c:	e7d6      	b.n	800cdbc <BOS_CalendarConfig+0x54>
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	20006c6c 	.word	0x20006c6c
 800ce14:	20006860 	.word	0x20006860
 800ce18:	000032f2 	.word	0x000032f2

0800ce1c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ce1c:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800ce1e:	4d16      	ldr	r5, [pc, #88]	; (800ce78 <GetTimeDate+0x5c>)
{
 800ce20:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800ce22:	ac01      	add	r4, sp, #4
 800ce24:	0021      	movs	r1, r4
 800ce26:	2200      	movs	r2, #0
 800ce28:	0028      	movs	r0, r5
 800ce2a:	f004 fc13 	bl	8011654 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800ce2e:	4669      	mov	r1, sp
 800ce30:	2200      	movs	r2, #0
 800ce32:	0028      	movs	r0, r5
 800ce34:	f004 fc3e 	bl	80116b4 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800ce38:	7a22      	ldrb	r2, [r4, #8]
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <GetTimeDate+0x60>)
 800ce3c:	09d2      	lsrs	r2, r2, #7
 800ce3e:	3201      	adds	r2, #1
 800ce40:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800ce42:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800ce44:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800ce46:	0852      	lsrs	r2, r2, #1
 800ce48:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800ce4a:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800ce4c:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800ce4e:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800ce50:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800ce52:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800ce54:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800ce56:	7822      	ldrb	r2, [r4, #0]
 800ce58:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800ce5a:	466a      	mov	r2, sp
 800ce5c:	7892      	ldrb	r2, [r2, #2]
 800ce5e:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800ce60:	466a      	mov	r2, sp
 800ce62:	7852      	ldrb	r2, [r2, #1]
 800ce64:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800ce66:	466a      	mov	r2, sp
 800ce68:	7812      	ldrb	r2, [r2, #0]
 800ce6a:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800ce6c:	466a      	mov	r2, sp
 800ce6e:	78d2      	ldrb	r2, [r2, #3]
 800ce70:	4462      	add	r2, ip
 800ce72:	831a      	strh	r2, [r3, #24]
}
 800ce74:	b007      	add	sp, #28
 800ce76:	bd30      	pop	{r4, r5, pc}
 800ce78:	20006c6c 	.word	0x20006c6c
 800ce7c:	20006860 	.word	0x20006860

0800ce80 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800ce80:	2080      	movs	r0, #128	; 0x80
 800ce82:	4a13      	ldr	r2, [pc, #76]	; (800ced0 <TIM_USEC_Init+0x50>)
{
 800ce84:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800ce86:	69d1      	ldr	r1, [r2, #28]
 800ce88:	0040      	lsls	r0, r0, #1
 800ce8a:	4301      	orrs	r1, r0
 800ce8c:	61d1      	str	r1, [r2, #28]
 800ce8e:	69d3      	ldr	r3, [r2, #28]
{
 800ce90:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800ce92:	4003      	ands	r3, r0
 800ce94:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800ce96:	4c0f      	ldr	r4, [pc, #60]	; (800ced4 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800ce98:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800ce9a:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce9c:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800ce9e:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cea0:	f004 fb28 	bl	80114f4 <HAL_RCC_GetPCLK1Freq>
 800cea4:	490d      	ldr	r1, [pc, #52]	; (800cedc <TIM_USEC_Init+0x5c>)
 800cea6:	f7f3 f953 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800ceac:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800ceae:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800ceb0:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ceb2:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800ceb4:	f005 f85c 	bl	8011f70 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800ceb8:	a902      	add	r1, sp, #8
 800ceba:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cebc:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cebe:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cec0:	f005 f932 	bl	8012128 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cec4:	0020      	movs	r0, r4
 800cec6:	f004 fe9b 	bl	8011c00 <HAL_TIM_Base_Start>
}
 800ceca:	b005      	add	sp, #20
 800cecc:	bd30      	pop	{r4, r5, pc}
 800cece:	46c0      	nop			; (mov r8, r8)
 800ced0:	40021000 	.word	0x40021000
 800ced4:	20006cc8 	.word	0x20006cc8
 800ced8:	40002000 	.word	0x40002000
 800cedc:	000f4240 	.word	0x000f4240
 800cee0:	0000ffff 	.word	0x0000ffff

0800cee4 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cee4:	2080      	movs	r0, #128	; 0x80
 800cee6:	4a13      	ldr	r2, [pc, #76]	; (800cf34 <TIM_MSEC_Init+0x50>)
{
 800cee8:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800ceea:	6991      	ldr	r1, [r2, #24]
 800ceec:	0240      	lsls	r0, r0, #9
 800ceee:	4301      	orrs	r1, r0
 800cef0:	6191      	str	r1, [r2, #24]
 800cef2:	6993      	ldr	r3, [r2, #24]
{
 800cef4:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800cef6:	4003      	ands	r3, r0
 800cef8:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cefa:	4c0f      	ldr	r4, [pc, #60]	; (800cf38 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800cefc:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800cefe:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf00:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800cf02:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cf04:	f004 faf6 	bl	80114f4 <HAL_RCC_GetPCLK1Freq>
 800cf08:	21fa      	movs	r1, #250	; 0xfa
 800cf0a:	0089      	lsls	r1, r1, #2
 800cf0c:	f7f3 f920 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800cf10:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cf12:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800cf14:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800cf16:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf18:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800cf1a:	f005 f829 	bl	8011f70 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cf1e:	a902      	add	r1, sp, #8
 800cf20:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf22:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf24:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cf26:	f005 f8ff 	bl	8012128 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800cf2a:	0020      	movs	r0, r4
 800cf2c:	f004 fe68 	bl	8011c00 <HAL_TIM_Base_Start>
}
 800cf30:	b005      	add	sp, #20
 800cf32:	bd30      	pop	{r4, r5, pc}
 800cf34:	40021000 	.word	0x40021000
 800cf38:	20006c8c 	.word	0x20006c8c
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	0000ffff 	.word	0x0000ffff

0800cf44 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800cf44:	b510      	push	{r4, lr}
 800cf46:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800cf48:	f002 f8a8 	bl	800f09c <vPortEnterCritical>
	
	if (Delay)
 800cf4c:	2c00      	cmp	r4, #0
 800cf4e:	d006      	beq.n	800cf5e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800cf50:	4b04      	ldr	r3, [pc, #16]	; (800cf64 <StartMicroDelay+0x20>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800cf56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cf58:	1a5b      	subs	r3, r3, r1
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	d9fb      	bls.n	800cf56 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cf5e:	f002 f8a9 	bl	800f0b4 <vPortExitCritical>
}
 800cf62:	bd10      	pop	{r4, pc}
 800cf64:	20006cc8 	.word	0x20006cc8

0800cf68 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800cf6c:	f002 f896 	bl	800f09c <vPortEnterCritical>
	
	if (Delay)
 800cf70:	2c00      	cmp	r4, #0
 800cf72:	d006      	beq.n	800cf82 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800cf74:	4b04      	ldr	r3, [pc, #16]	; (800cf88 <StartMilliDelay+0x20>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800cf7a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cf7c:	1a5b      	subs	r3, r3, r1
 800cf7e:	42a3      	cmp	r3, r4
 800cf80:	d9fb      	bls.n	800cf7a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cf82:	f002 f897 	bl	800f0b4 <vPortExitCritical>
}
 800cf86:	bd10      	pop	{r4, pc}
 800cf88:	20006c8c 	.word	0x20006c8c

0800cf8c <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800cf90:	f7fc fff4 	bl	8009f7c <GetPort>
 800cf94:	2180      	movs	r1, #128	; 0x80
 800cf96:	0209      	lsls	r1, r1, #8
 800cf98:	000a      	movs	r2, r1
 800cf9a:	3801      	subs	r0, #1
 800cf9c:	4102      	asrs	r2, r0
 800cf9e:	4b07      	ldr	r3, [pc, #28]	; (800cfbc <SwapUartPins.part.0+0x30>)
 800cfa0:	4d07      	ldr	r5, [pc, #28]	; (800cfc0 <SwapUartPins.part.0+0x34>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cfa4:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	5b58      	ldrh	r0, [r3, r5]
 800cfac:	4302      	orrs	r2, r0
 800cfae:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cfb0:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800cfb2:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cfb4:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800cfb6:	f005 fc41 	bl	801283c <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800cfba:	bd70      	pop	{r4, r5, r6, pc}
 800cfbc:	20000aa0 	.word	0x20000aa0
 800cfc0:	20006d04 	.word	0x20006d04

0800cfc4 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800cfc4:	4809      	ldr	r0, [pc, #36]	; (800cfec <MX_USART1_UART_Init+0x28>)
 800cfc6:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <MX_USART1_UART_Init+0x2c>)
{
 800cfc8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800cfca:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cfcc:	23e1      	movs	r3, #225	; 0xe1
 800cfce:	031b      	lsls	r3, r3, #12
 800cfd0:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cfd2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cfd4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cfd6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cfd8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cfda:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cfdc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cfde:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cfe0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cfe2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cfe4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800cfe6:	f005 fc29 	bl	801283c <HAL_UART_Init>
}
 800cfea:	bd10      	pop	{r4, pc}
 800cfec:	20006aa0 	.word	0x20006aa0
 800cff0:	40013800 	.word	0x40013800

0800cff4 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800cff4:	4809      	ldr	r0, [pc, #36]	; (800d01c <MX_USART2_UART_Init+0x28>)
 800cff6:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <MX_USART2_UART_Init+0x2c>)
{
 800cff8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800cffa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cffc:	23e1      	movs	r3, #225	; 0xe1
 800cffe:	031b      	lsls	r3, r3, #12
 800d000:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d002:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d004:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d006:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d008:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d00a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d00c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d00e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d010:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d012:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d014:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d016:	f005 fc11 	bl	801283c <HAL_UART_Init>
}
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	20006b8c 	.word	0x20006b8c
 800d020:	40004400 	.word	0x40004400

0800d024 <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800d024:	4809      	ldr	r0, [pc, #36]	; (800d04c <MX_USART3_UART_Init+0x28>)
 800d026:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <MX_USART3_UART_Init+0x2c>)
{
 800d028:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d02a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d02c:	23e1      	movs	r3, #225	; 0xe1
 800d02e:	031b      	lsls	r3, r3, #12
 800d030:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d032:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d034:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d036:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d038:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d03a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d03c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d03e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d040:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d042:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d044:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d046:	f005 fbf9 	bl	801283c <HAL_UART_Init>
}
 800d04a:	bd10      	pop	{r4, pc}
 800d04c:	20006980 	.word	0x20006980
 800d050:	40004800 	.word	0x40004800

0800d054 <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800d054:	4809      	ldr	r0, [pc, #36]	; (800d07c <MX_USART5_UART_Init+0x28>)
 800d056:	4b0a      	ldr	r3, [pc, #40]	; (800d080 <MX_USART5_UART_Init+0x2c>)
{
 800d058:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d05a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d05c:	23e1      	movs	r3, #225	; 0xe1
 800d05e:	031b      	lsls	r3, r3, #12
 800d060:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d062:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d064:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d066:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d068:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d06a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d06c:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d06e:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d070:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d072:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d074:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d076:	f005 fbe1 	bl	801283c <HAL_UART_Init>
}
 800d07a:	bd10      	pop	{r4, pc}
 800d07c:	20006a30 	.word	0x20006a30
 800d080:	40005000 	.word	0x40005000

0800d084 <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800d084:	4809      	ldr	r0, [pc, #36]	; (800d0ac <MX_USART6_UART_Init+0x28>)
 800d086:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <MX_USART6_UART_Init+0x2c>)
{
 800d088:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d08a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d08c:	23e1      	movs	r3, #225	; 0xe1
 800d08e:	031b      	lsls	r3, r3, #12
 800d090:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d092:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d094:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d096:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d098:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d09a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d09c:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d09e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0a0:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0a2:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0a4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d0a6:	f005 fbc9 	bl	801283c <HAL_UART_Init>
}
 800d0aa:	bd10      	pop	{r4, pc}
 800d0ac:	20006b18 	.word	0x20006b18
 800d0b0:	40011400 	.word	0x40011400

0800d0b4 <HAL_UART_MspInit>:
{
 800d0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b6:	46c6      	mov	lr, r8
 800d0b8:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800d0ba:	6803      	ldr	r3, [r0, #0]
 800d0bc:	4a6e      	ldr	r2, [pc, #440]	; (800d278 <HAL_UART_MspInit+0x1c4>)
{
 800d0be:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d041      	beq.n	800d148 <HAL_UART_MspInit+0x94>
  else if(huart->Instance==USART2)
 800d0c4:	4a6d      	ldr	r2, [pc, #436]	; (800d27c <HAL_UART_MspInit+0x1c8>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d06c      	beq.n	800d1a4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800d0ca:	4a6d      	ldr	r2, [pc, #436]	; (800d280 <HAL_UART_MspInit+0x1cc>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d100      	bne.n	800d0d2 <HAL_UART_MspInit+0x1e>
 800d0d0:	e094      	b.n	800d1fc <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART4)
 800d0d2:	4a6c      	ldr	r2, [pc, #432]	; (800d284 <HAL_UART_MspInit+0x1d0>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d006      	beq.n	800d0e6 <HAL_UART_MspInit+0x32>
  else if(huart->Instance==USART5)
 800d0d8:	4a6b      	ldr	r2, [pc, #428]	; (800d288 <HAL_UART_MspInit+0x1d4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d100      	bne.n	800d0e0 <HAL_UART_MspInit+0x2c>
 800d0de:	e0b0      	b.n	800d242 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 800d0e0:	4a6a      	ldr	r2, [pc, #424]	; (800d28c <HAL_UART_MspInit+0x1d8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d003      	beq.n	800d0ee <HAL_UART_MspInit+0x3a>
}
 800d0e6:	b00a      	add	sp, #40	; 0x28
 800d0e8:	bc04      	pop	{r2}
 800d0ea:	4690      	mov	r8, r2
 800d0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800d0ee:	2420      	movs	r4, #32
 800d0f0:	4b67      	ldr	r3, [pc, #412]	; (800d290 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d0f2:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d0f4:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d0f6:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d0f8:	4322      	orrs	r2, r4
 800d0fa:	619a      	str	r2, [r3, #24]
 800d0fc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d0fe:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d100:	4023      	ands	r3, r4
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d106:	2310      	movs	r3, #16
 800d108:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d10a:	3b0e      	subs	r3, #14
 800d10c:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d10e:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d110:	a905      	add	r1, sp, #20
 800d112:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d114:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d116:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d118:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d11a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d11c:	f003 fc20 	bl	8010960 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d120:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d122:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d124:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d126:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d128:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d12a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d12c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d12e:	a905      	add	r1, sp, #20
 800d130:	05c0      	lsls	r0, r0, #23
 800d132:	f003 fc15 	bl	8010960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d136:	2200      	movs	r2, #0
 800d138:	2101      	movs	r1, #1
 800d13a:	201d      	movs	r0, #29
 800d13c:	f002 fc26 	bl	800f98c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d140:	201d      	movs	r0, #29
 800d142:	f002 fc4f 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
}
 800d146:	e7ce      	b.n	800d0e6 <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800d148:	2080      	movs	r0, #128	; 0x80
 800d14a:	4a51      	ldr	r2, [pc, #324]	; (800d290 <HAL_UART_MspInit+0x1dc>)
 800d14c:	01c0      	lsls	r0, r0, #7
 800d14e:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d150:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d152:	4301      	orrs	r1, r0
 800d154:	6191      	str	r1, [r2, #24]
 800d156:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d158:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d15a:	4003      	ands	r3, r0
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d160:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d162:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d164:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d166:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d168:	a905      	add	r1, sp, #20
 800d16a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d16c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d16e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d170:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d172:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d174:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d176:	f003 fbf3 	bl	8010960 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d17a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d17c:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d17e:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d180:	a905      	add	r1, sp, #20
 800d182:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d184:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d186:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d188:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d18a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d18c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d18e:	f003 fbe7 	bl	8010960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d192:	2200      	movs	r2, #0
 800d194:	2101      	movs	r1, #1
 800d196:	201b      	movs	r0, #27
 800d198:	f002 fbf8 	bl	800f98c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d19c:	201b      	movs	r0, #27
 800d19e:	f002 fc21 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
 800d1a2:	e7a0      	b.n	800d0e6 <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d1a4:	2080      	movs	r0, #128	; 0x80
 800d1a6:	4a3a      	ldr	r2, [pc, #232]	; (800d290 <HAL_UART_MspInit+0x1dc>)
 800d1a8:	0280      	lsls	r0, r0, #10
 800d1aa:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1ac:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d1ae:	4301      	orrs	r1, r0
 800d1b0:	61d1      	str	r1, [r2, #28]
 800d1b2:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b4:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d1b6:	4003      	ands	r3, r0
 800d1b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1ba:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d1bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1be:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d1c0:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1c2:	a905      	add	r1, sp, #20
 800d1c4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d1c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1c8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1ca:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1cc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d1ce:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1d0:	f003 fbc6 	bl	8010960 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d1d4:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d1d6:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d1d8:	a905      	add	r1, sp, #20
 800d1da:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d1dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1de:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1e0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1e2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d1e4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d1e6:	f003 fbbb 	bl	8010960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	201c      	movs	r0, #28
 800d1f0:	f002 fbcc 	bl	800f98c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d1f4:	201c      	movs	r0, #28
 800d1f6:	f002 fbf5 	bl	800f9e4 <HAL_NVIC_EnableIRQ>
 800d1fa:	e774      	b.n	800d0e6 <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d1fc:	2080      	movs	r0, #128	; 0x80
 800d1fe:	4a24      	ldr	r2, [pc, #144]	; (800d290 <HAL_UART_MspInit+0x1dc>)
 800d200:	02c0      	lsls	r0, r0, #11
 800d202:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d204:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d206:	4301      	orrs	r1, r0
 800d208:	61d1      	str	r1, [r2, #28]
 800d20a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d20c:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d20e:	4003      	ands	r3, r0
 800d210:	9302      	str	r3, [sp, #8]
 800d212:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d214:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d216:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d218:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d21a:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d21c:	a905      	add	r1, sp, #20
 800d21e:	481d      	ldr	r0, [pc, #116]	; (800d294 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d220:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d222:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d224:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d226:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d228:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d22a:	f003 fb99 	bl	8010960 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d22e:	2380      	movs	r3, #128	; 0x80
 800d230:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d232:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d234:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d236:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d238:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d23a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d23c:	a905      	add	r1, sp, #20
 800d23e:	4815      	ldr	r0, [pc, #84]	; (800d294 <HAL_UART_MspInit+0x1e0>)
 800d240:	e777      	b.n	800d132 <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800d242:	2080      	movs	r0, #128	; 0x80
 800d244:	4a12      	ldr	r2, [pc, #72]	; (800d290 <HAL_UART_MspInit+0x1dc>)
 800d246:	0340      	lsls	r0, r0, #13
 800d248:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d24a:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d24c:	4301      	orrs	r1, r0
 800d24e:	61d1      	str	r1, [r2, #28]
 800d250:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d252:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d254:	4003      	ands	r3, r0
 800d256:	9303      	str	r3, [sp, #12]
 800d258:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d25a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d25c:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d25e:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d260:	a905      	add	r1, sp, #20
 800d262:	480c      	ldr	r0, [pc, #48]	; (800d294 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d264:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d266:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d268:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d26a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d26c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d26e:	f003 fb77 	bl	8010960 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d272:	2310      	movs	r3, #16
 800d274:	e7dd      	b.n	800d232 <HAL_UART_MspInit+0x17e>
 800d276:	46c0      	nop			; (mov r8, r8)
 800d278:	40013800 	.word	0x40013800
 800d27c:	40004400 	.word	0x40004400
 800d280:	40004800 	.word	0x40004800
 800d284:	40004c00 	.word	0x40004c00
 800d288:	40005000 	.word	0x40005000
 800d28c:	40011400 	.word	0x40011400
 800d290:	40021000 	.word	0x40021000
 800d294:	48000400 	.word	0x48000400

0800d298 <writePxMutex>:
{
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	4647      	mov	r7, r8
 800d29c:	46ce      	mov	lr, r9
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	0017      	movs	r7, r2
 800d2a2:	1e42      	subs	r2, r0, #1
 800d2a4:	b2d2      	uxtb	r2, r2
 800d2a6:	000e      	movs	r6, r1
 800d2a8:	2a04      	cmp	r2, #4
 800d2aa:	d80e      	bhi.n	800d2ca <writePxMutex+0x32>
 800d2ac:	4911      	ldr	r1, [pc, #68]	; (800d2f4 <writePxMutex+0x5c>)
 800d2ae:	0092      	lsls	r2, r2, #2
 800d2b0:	5852      	ldr	r2, [r2, r1]
 800d2b2:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d008      	beq.n	800d2ca <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d2b8:	4a0f      	ldr	r2, [pc, #60]	; (800d2f8 <writePxMutex+0x60>)
 800d2ba:	0085      	lsls	r5, r0, #2
 800d2bc:	0019      	movs	r1, r3
 800d2be:	5950      	ldr	r0, [r2, r5]
 800d2c0:	4691      	mov	r9, r2
 800d2c2:	f000 f9c5 	bl	800d650 <osSemaphoreWait>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d007      	beq.n	800d2da <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d2ca:	2401      	movs	r4, #1
}
 800d2cc:	0020      	movs	r0, r4
 800d2ce:	bc0c      	pop	{r2, r3}
 800d2d0:	4690      	mov	r8, r2
 800d2d2:	4699      	mov	r9, r3
 800d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d2d6:	2803      	cmp	r0, #3
 800d2d8:	d007      	beq.n	800d2ea <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d2da:	9b08      	ldr	r3, [sp, #32]
 800d2dc:	003a      	movs	r2, r7
 800d2de:	0031      	movs	r1, r6
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	f005 fa09 	bl	80126f8 <HAL_UART_Transmit>
 800d2e6:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d2e8:	d1f5      	bne.n	800d2d6 <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d2ea:	464b      	mov	r3, r9
 800d2ec:	5958      	ldr	r0, [r3, r5]
 800d2ee:	f000 f9d9 	bl	800d6a4 <osSemaphoreRelease>
 800d2f2:	e7eb      	b.n	800d2cc <writePxMutex+0x34>
 800d2f4:	08017e58 	.word	0x08017e58
 800d2f8:	200068e4 	.word	0x200068e4

0800d2fc <writePxITMutex>:
{
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	0015      	movs	r5, r2
 800d300:	1e42      	subs	r2, r0, #1
 800d302:	b2d2      	uxtb	r2, r2
 800d304:	000c      	movs	r4, r1
 800d306:	2a04      	cmp	r2, #4
 800d308:	d80c      	bhi.n	800d324 <writePxITMutex+0x28>
 800d30a:	490a      	ldr	r1, [pc, #40]	; (800d334 <writePxITMutex+0x38>)
 800d30c:	0092      	lsls	r2, r2, #2
 800d30e:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800d310:	2e00      	cmp	r6, #0
 800d312:	d007      	beq.n	800d324 <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d314:	4a08      	ldr	r2, [pc, #32]	; (800d338 <writePxITMutex+0x3c>)
 800d316:	0080      	lsls	r0, r0, #2
 800d318:	5880      	ldr	r0, [r0, r2]
 800d31a:	0019      	movs	r1, r3
 800d31c:	f000 f998 	bl	800d650 <osSemaphoreWait>
 800d320:	2800      	cmp	r0, #0
 800d322:	d001      	beq.n	800d328 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d324:	2001      	movs	r0, #1
}
 800d326:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d328:	002a      	movs	r2, r5
 800d32a:	0021      	movs	r1, r4
 800d32c:	0030      	movs	r0, r6
 800d32e:	f004 ff39 	bl	80121a4 <HAL_UART_Transmit_IT>
 800d332:	e7f8      	b.n	800d326 <writePxITMutex+0x2a>
 800d334:	08017e58 	.word	0x08017e58
 800d338:	200068e4 	.word	0x200068e4

0800d33c <UpdateBaudrate>:
{
 800d33c:	3801      	subs	r0, #1
 800d33e:	b2c0      	uxtb	r0, r0
 800d340:	b510      	push	{r4, lr}
 800d342:	2804      	cmp	r0, #4
 800d344:	d807      	bhi.n	800d356 <UpdateBaudrate+0x1a>
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <UpdateBaudrate+0x20>)
 800d348:	0080      	lsls	r0, r0, #2
 800d34a:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800d34c:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d34e:	f005 fa75 	bl	801283c <HAL_UART_Init>
}
 800d352:	2000      	movs	r0, #0
 800d354:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d356:	2300      	movs	r3, #0
 800d358:	605b      	str	r3, [r3, #4]
 800d35a:	deff      	udf	#255	; 0xff
 800d35c:	08017e58 	.word	0x08017e58

0800d360 <GetUart>:
{
 800d360:	3801      	subs	r0, #1
 800d362:	b2c3      	uxtb	r3, r0
 800d364:	2000      	movs	r0, #0
 800d366:	2b04      	cmp	r3, #4
 800d368:	d802      	bhi.n	800d370 <GetUart+0x10>
 800d36a:	4a02      	ldr	r2, [pc, #8]	; (800d374 <GetUart+0x14>)
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	5898      	ldr	r0, [r3, r2]
}
 800d370:	4770      	bx	lr
 800d372:	46c0      	nop			; (mov r8, r8)
 800d374:	08017e58 	.word	0x08017e58

0800d378 <SwapUartPins>:
{
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	0004      	movs	r4, r0
 800d37c:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d37e:	2800      	cmp	r0, #0
 800d380:	d003      	beq.n	800d38a <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d382:	2901      	cmp	r1, #1
 800d384:	d017      	beq.n	800d3b6 <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800d386:	2900      	cmp	r1, #0
 800d388:	d000      	beq.n	800d38c <SwapUartPins+0x14>
}
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d38c:	f7fc fdf6 	bl	8009f7c <GetPort>
 800d390:	2180      	movs	r1, #128	; 0x80
 800d392:	3801      	subs	r0, #1
 800d394:	0209      	lsls	r1, r1, #8
 800d396:	4101      	asrs	r1, r0
 800d398:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <SwapUartPins+0x44>)
 800d39a:	4e09      	ldr	r6, [pc, #36]	; (800d3c0 <SwapUartPins+0x48>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d39e:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d3a6:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d3a8:	438a      	bics	r2, r1
 800d3aa:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d3ac:	2308      	movs	r3, #8
 800d3ae:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d3b0:	f005 fa44 	bl	801283c <HAL_UART_Init>
}
 800d3b4:	e7e9      	b.n	800d38a <SwapUartPins+0x12>
 800d3b6:	f7ff fde9 	bl	800cf8c <SwapUartPins.part.0>
 800d3ba:	e7e6      	b.n	800d38a <SwapUartPins+0x12>
 800d3bc:	20000aa0 	.word	0x20000aa0
 800d3c0:	20006d04 	.word	0x20006d04

0800d3c4 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800d3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3c6:	46c6      	mov	lr, r8
 800d3c8:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800d3ca:	4d12      	ldr	r5, [pc, #72]	; (800d414 <ReadPortsDir+0x50>)
 800d3cc:	782b      	ldrb	r3, [r5, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d01d      	beq.n	800d40e <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800d3d2:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800d3d4:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800d3d6:	4698      	mov	r8, r3
 800d3d8:	4e0f      	ldr	r6, [pc, #60]	; (800d418 <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800d3da:	4f10      	ldr	r7, [pc, #64]	; (800d41c <ReadPortsDir+0x58>)
		if (i != myID) {
 800d3dc:	7833      	ldrb	r3, [r6, #0]
 800d3de:	42a3      	cmp	r3, r4
 800d3e0:	d00c      	beq.n	800d3fc <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2113      	movs	r1, #19
 800d3e6:	0020      	movs	r0, r4
 800d3e8:	f7fa ffae 	bl	8008348 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800d3ec:	2032      	movs	r0, #50	; 0x32
 800d3ee:	f7ff fdbb 	bl	800cf68 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800d3f2:	783b      	ldrb	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800d3fc:	3401      	adds	r4, #1
 800d3fe:	782b      	ldrb	r3, [r5, #0]
 800d400:	b2e4      	uxtb	r4, r4
 800d402:	42a3      	cmp	r3, r4
 800d404:	d2ea      	bcs.n	800d3dc <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800d406:	4640      	mov	r0, r8
 800d408:	bc04      	pop	{r2}
 800d40a:	4690      	mov	r8, r2
 800d40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	4698      	mov	r8, r3
 800d412:	e7f8      	b.n	800d406 <ReadPortsDir+0x42>
 800d414:	20000008 	.word	0x20000008
 800d418:	20000aa0 	.word	0x20000aa0
 800d41c:	20000c44 	.word	0x20000c44

0800d420 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800d422:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d424:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d426:	490f      	ldr	r1, [pc, #60]	; (800d464 <ReadPortsDirMSG+0x44>)
	uint16_t temp =0;
 800d428:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d42a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d42c:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800d42e:	4f0e      	ldr	r7, [pc, #56]	; (800d468 <ReadPortsDirMSG+0x48>)
 800d430:	4e0e      	ldr	r6, [pc, #56]	; (800d46c <ReadPortsDirMSG+0x4c>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d432:	b2dc      	uxtb	r4, r3
 800d434:	42a9      	cmp	r1, r5
 800d436:	d102      	bne.n	800d43e <ReadPortsDirMSG+0x1e>
			messageParams[temp++] = p;
 800d438:	1c51      	adds	r1, r2, #1
 800d43a:	54bc      	strb	r4, [r7, r2]
 800d43c:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800d43e:	3301      	adds	r3, #1
 800d440:	2b06      	cmp	r3, #6
 800d442:	d009      	beq.n	800d458 <ReadPortsDirMSG+0x38>
 800d444:	0099      	lsls	r1, r3, #2
 800d446:	3904      	subs	r1, #4
 800d448:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d44a:	b2dc      	uxtb	r4, r3
 800d44c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d44e:	42a9      	cmp	r1, r5
 800d450:	d0f2      	beq.n	800d438 <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800d452:	3301      	adds	r3, #1
 800d454:	2b06      	cmp	r3, #6
 800d456:	d1f5      	bne.n	800d444 <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800d458:	2114      	movs	r1, #20
 800d45a:	f7fa ff75 	bl	8008348 <SendMessageToModule>
	return result;
}
 800d45e:	2000      	movs	r0, #0
 800d460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d462:	46c0      	nop			; (mov r8, r8)
 800d464:	20006a30 	.word	0x20006a30
 800d468:	20000b44 	.word	0x20000b44
 800d46c:	08017e58 	.word	0x08017e58

0800d470 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	46c6      	mov	lr, r8
 800d474:	4b12      	ldr	r3, [pc, #72]	; (800d4c0 <UpdateMyPortsDir+0x50>)
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d476:	2580      	movs	r5, #128	; 0x80
{
 800d478:	2400      	movs	r4, #0
 800d47a:	4698      	mov	r8, r3
 800d47c:	b500      	push	{lr}
 800d47e:	4811      	ldr	r0, [pc, #68]	; (800d4c4 <UpdateMyPortsDir+0x54>)
 800d480:	4f11      	ldr	r7, [pc, #68]	; (800d4c8 <UpdateMyPortsDir+0x58>)
 800d482:	4e12      	ldr	r6, [pc, #72]	; (800d4cc <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d484:	022d      	lsls	r5, r5, #8
 800d486:	002a      	movs	r2, r5
 800d488:	4122      	asrs	r2, r4
 800d48a:	7833      	ldrb	r3, [r6, #0]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	5afb      	ldrh	r3, [r7, r3]
 800d492:	421a      	tst	r2, r3
 800d494:	d00a      	beq.n	800d4ac <UpdateMyPortsDir+0x3c>
	if (huart != NULL) {
 800d496:	2800      	cmp	r0, #0
 800d498:	d001      	beq.n	800d49e <UpdateMyPortsDir+0x2e>
 800d49a:	f7ff fd77 	bl	800cf8c <SwapUartPins.part.0>
 800d49e:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d4a0:	2c05      	cmp	r4, #5
 800d4a2:	d009      	beq.n	800d4b8 <UpdateMyPortsDir+0x48>
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	00a3      	lsls	r3, r4, #2
 800d4a8:	5898      	ldr	r0, [r3, r2]
 800d4aa:	e7ec      	b.n	800d486 <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	3401      	adds	r4, #1
 800d4b0:	f7ff ff62 	bl	800d378 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d4b4:	2c05      	cmp	r4, #5
 800d4b6:	d1f5      	bne.n	800d4a4 <UpdateMyPortsDir+0x34>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	bc04      	pop	{r2}
 800d4bc:	4690      	mov	r8, r2
 800d4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c0:	08017e58 	.word	0x08017e58
 800d4c4:	20006a30 	.word	0x20006a30
 800d4c8:	20006d04 	.word	0x20006d04
 800d4cc:	20000aa0 	.word	0x20000aa0

0800d4d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d4d0:	4816      	ldr	r0, [pc, #88]	; (800d52c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d4d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d4d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d4d6:	e003      	b.n	800d4e0 <LoopCopyDataInit>

0800d4d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d4d8:	4b15      	ldr	r3, [pc, #84]	; (800d530 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d4da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d4dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d4de:	3104      	adds	r1, #4

0800d4e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d4e0:	4814      	ldr	r0, [pc, #80]	; (800d534 <LoopForever+0xc>)
  ldr r3, =_edata
 800d4e2:	4b15      	ldr	r3, [pc, #84]	; (800d538 <LoopForever+0x10>)
  adds r2, r0, r1
 800d4e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d4e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d4e8:	d3f6      	bcc.n	800d4d8 <CopyDataInit>
  ldr r2, =_sbss
 800d4ea:	4a14      	ldr	r2, [pc, #80]	; (800d53c <LoopForever+0x14>)
  b LoopFillZerobss
 800d4ec:	e002      	b.n	800d4f4 <LoopFillZerobss>

0800d4ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d4ee:	2300      	movs	r3, #0
  str  r3, [r2]
 800d4f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d4f2:	3204      	adds	r2, #4

0800d4f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d4f4:	4b12      	ldr	r3, [pc, #72]	; (800d540 <LoopForever+0x18>)
  cmp r2, r3
 800d4f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d4f8:	d3f9      	bcc.n	800d4ee <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d4fa:	4812      	ldr	r0, [pc, #72]	; (800d544 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d4fc:	4912      	ldr	r1, [pc, #72]	; (800d548 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d4fe:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d500:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d502:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d504:	d005      	beq.n	800d512 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d506:	f000 f82b 	bl	800d560 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d50a:	f005 fb2f 	bl	8012b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d50e:	f005 fadf 	bl	8012ad0 <main>

0800d512 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d512:	480e      	ldr	r0, [pc, #56]	; (800d54c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d514:	490e      	ldr	r1, [pc, #56]	; (800d550 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d516:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d518:	480e      	ldr	r0, [pc, #56]	; (800d554 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d51a:	490d      	ldr	r1, [pc, #52]	; (800d550 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d51c:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d51e:	480e      	ldr	r0, [pc, #56]	; (800d558 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d520:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d522:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d524:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d526:	4700      	bx	r0

0800d528 <LoopForever>:


LoopForever:
    b LoopForever
 800d528:	e7fe      	b.n	800d528 <LoopForever>
 800d52a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d52c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d530:	0801adc8 	.word	0x0801adc8
  ldr r0, =_sdata
 800d534:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d538:	20000a80 	.word	0x20000a80
  ldr r2, =_sbss
 800d53c:	20000a80 	.word	0x20000a80
  ldr r3, = _ebss
 800d540:	20006da8 	.word	0x20006da8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d544:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d548:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d54c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d550:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d554:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d558:	1fffd800 	.word	0x1fffd800

0800d55c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d55c:	e7fe      	b.n	800d55c <CEC_CAN_IRQHandler>
	...

0800d560 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d560:	2101      	movs	r1, #1
 800d562:	4b11      	ldr	r3, [pc, #68]	; (800d5a8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d564:	4811      	ldr	r0, [pc, #68]	; (800d5ac <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	430a      	orrs	r2, r1
 800d56a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	4002      	ands	r2, r0
 800d570:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	480e      	ldr	r0, [pc, #56]	; (800d5b0 <SystemInit+0x50>)
 800d576:	4002      	ands	r2, r0
 800d578:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	480d      	ldr	r0, [pc, #52]	; (800d5b4 <SystemInit+0x54>)
 800d57e:	4002      	ands	r2, r0
 800d580:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	480c      	ldr	r0, [pc, #48]	; (800d5b8 <SystemInit+0x58>)
 800d586:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d588:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d58a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	4382      	bics	r2, r0
 800d590:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d594:	4809      	ldr	r0, [pc, #36]	; (800d5bc <SystemInit+0x5c>)
 800d596:	4002      	ands	r2, r0
 800d598:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d59c:	438a      	bics	r2, r1
 800d59e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	609a      	str	r2, [r3, #8]

}
 800d5a4:	4770      	bx	lr
 800d5a6:	46c0      	nop			; (mov r8, r8)
 800d5a8:	40021000 	.word	0x40021000
 800d5ac:	08ffb80c 	.word	0x08ffb80c
 800d5b0:	fef6ffff 	.word	0xfef6ffff
 800d5b4:	fffbffff 	.word	0xfffbffff
 800d5b8:	ffc0ffff 	.word	0xffc0ffff
 800d5bc:	fff0feac 	.word	0xfff0feac

0800d5c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d5c0:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d5c2:	f000 fef9 	bl	800e3b8 <vTaskStartScheduler>
  
  return osOK;
}
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	bd10      	pop	{r4, pc}
 800d5ca:	46c0      	nop			; (mov r8, r8)

0800d5cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d5cc:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d100      	bne.n	800d5d4 <osDelay+0x8>
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f001 f814 	bl	800e600 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d5d8:	2000      	movs	r0, #0
 800d5da:	bd10      	pop	{r4, pc}

0800d5dc <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d5dc:	2300      	movs	r3, #0
{
 800d5de:	b500      	push	{lr}
 800d5e0:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d5e2:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5e4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d5ec:	a901      	add	r1, sp, #4
 800d5ee:	f000 fb95 	bl	800dd1c <xQueueGiveFromISR>
 800d5f2:	2801      	cmp	r0, #1
 800d5f4:	d10c      	bne.n	800d610 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10b      	bne.n	800d614 <osMutexRelease+0x38>
  osStatus result = osOK;
 800d5fc:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d5fe:	b003      	add	sp, #12
 800d600:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d602:	2300      	movs	r3, #0
 800d604:	2200      	movs	r2, #0
 800d606:	2100      	movs	r1, #0
 800d608:	f000 fad4 	bl	800dbb4 <xQueueGenericSend>
 800d60c:	2801      	cmp	r0, #1
 800d60e:	d0f5      	beq.n	800d5fc <osMutexRelease+0x20>
    result = osErrorOS;
 800d610:	20ff      	movs	r0, #255	; 0xff
 800d612:	e7f4      	b.n	800d5fe <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d614:	2280      	movs	r2, #128	; 0x80
 800d616:	4b02      	ldr	r3, [pc, #8]	; (800d620 <osMutexRelease+0x44>)
 800d618:	0552      	lsls	r2, r2, #21
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	e7ee      	b.n	800d5fc <osMutexRelease+0x20>
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	e000ed04 	.word	0xe000ed04

0800d624 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d624:	b510      	push	{r4, lr}
 800d626:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d628:	2901      	cmp	r1, #1
 800d62a:	d005      	beq.n	800d638 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d62c:	2100      	movs	r1, #0
 800d62e:	f000 fab7 	bl	800dba0 <xQueueCreateCountingSemaphore>
 800d632:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d634:	0020      	movs	r0, r4
 800d636:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d638:	2203      	movs	r2, #3
 800d63a:	2100      	movs	r1, #0
 800d63c:	f000 fa8e 	bl	800db5c <xQueueGenericCreate>
 800d640:	1e04      	subs	r4, r0, #0
 800d642:	d0f7      	beq.n	800d634 <osSemaphoreCreate+0x10>
 800d644:	2300      	movs	r3, #0
 800d646:	2200      	movs	r2, #0
 800d648:	2100      	movs	r1, #0
 800d64a:	f000 fab3 	bl	800dbb4 <xQueueGenericSend>
 800d64e:	e7f1      	b.n	800d634 <osSemaphoreCreate+0x10>

0800d650 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d650:	2300      	movs	r3, #0
{
 800d652:	b500      	push	{lr}
 800d654:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d656:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d658:	2800      	cmp	r0, #0
 800d65a:	d01e      	beq.n	800d69a <osSemaphoreWait+0x4a>
 800d65c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d664:	aa01      	add	r2, sp, #4
 800d666:	2100      	movs	r1, #0
 800d668:	f000 fc1e 	bl	800dea8 <xQueueReceiveFromISR>
 800d66c:	2801      	cmp	r0, #1
 800d66e:	d10c      	bne.n	800d68a <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d670:	9b01      	ldr	r3, [sp, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d676:	2000      	movs	r0, #0
}
 800d678:	b003      	add	sp, #12
 800d67a:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d67c:	000a      	movs	r2, r1
 800d67e:	2300      	movs	r3, #0
 800d680:	2100      	movs	r1, #0
 800d682:	f000 fb75 	bl	800dd70 <xQueueGenericReceive>
 800d686:	2801      	cmp	r0, #1
 800d688:	d0f5      	beq.n	800d676 <osSemaphoreWait+0x26>
      return osErrorOS;
 800d68a:	20ff      	movs	r0, #255	; 0xff
 800d68c:	e7f4      	b.n	800d678 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d68e:	2280      	movs	r2, #128	; 0x80
 800d690:	4b03      	ldr	r3, [pc, #12]	; (800d6a0 <osSemaphoreWait+0x50>)
 800d692:	0552      	lsls	r2, r2, #21
 800d694:	601a      	str	r2, [r3, #0]
  return osOK;
 800d696:	2000      	movs	r0, #0
 800d698:	e7ee      	b.n	800d678 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d69a:	2080      	movs	r0, #128	; 0x80
 800d69c:	e7ec      	b.n	800d678 <osSemaphoreWait+0x28>
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	e000ed04 	.word	0xe000ed04

0800d6a4 <osSemaphoreRelease>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	f7ff ff99 	bl	800d5dc <osMutexRelease>
 800d6aa:	bd10      	pop	{r4, pc}

0800d6ac <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d6ac:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d6ae:	f001 f919 	bl	800e8e4 <xTaskGetSchedulerState>
 800d6b2:	2801      	cmp	r0, #1
 800d6b4:	d001      	beq.n	800d6ba <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d6b6:	f001 fd33 	bl	800f120 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d6ba:	bd10      	pop	{r4, pc}

0800d6bc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d6c0:	2008      	movs	r0, #8
 800d6c2:	f001 fd65 	bl	800f190 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d6c6:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d6c8:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d6ca:	d00a      	beq.n	800d6e2 <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d6cc:	f001 fce6 	bl	800f09c <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d6d2:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d6d4:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d6d6:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d6d8:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d6da:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d6dc:	f001 fcea 	bl	800f0b4 <vPortExitCritical>

		xReturn = pdPASS;
 800d6e0:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d6e2:	0028      	movs	r0, r5
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	46c0      	nop			; (mov r8, r8)
 800d6e8:	200000bc 	.word	0x200000bc

0800d6ec <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	4657      	mov	r7, sl
 800d6f0:	46de      	mov	lr, fp
 800d6f2:	464e      	mov	r6, r9
 800d6f4:	4645      	mov	r5, r8
 800d6f6:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d6f8:	4f34      	ldr	r7, [pc, #208]	; (800d7cc <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d6fa:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d6fc:	683b      	ldr	r3, [r7, #0]
{
 800d6fe:	468a      	mov	sl, r1
 800d700:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00e      	beq.n	800d724 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	0032      	movs	r2, r6
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	4659      	mov	r1, fp
 800d70e:	4650      	mov	r0, sl
 800d710:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d712:	2800      	cmp	r0, #0
 800d714:	d100      	bne.n	800d718 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d716:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d718:	bc3c      	pop	{r2, r3, r4, r5}
 800d71a:	4690      	mov	r8, r2
 800d71c:	4699      	mov	r9, r3
 800d71e:	46a2      	mov	sl, r4
 800d720:	46ab      	mov	fp, r5
 800d722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d724:	3320      	adds	r3, #32
 800d726:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d728:	4c29      	ldr	r4, [pc, #164]	; (800d7d0 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d72a:	3404      	adds	r4, #4
 800d72c:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	681d      	ldr	r5, [r3, #0]
 800d732:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d734:	0028      	movs	r0, r5
 800d736:	f7f2 fcef 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d73a:	464a      	mov	r2, r9
 800d73c:	5c33      	ldrb	r3, [r6, r0]
 800d73e:	4393      	bics	r3, r2
 800d740:	d106      	bne.n	800d750 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d742:	0002      	movs	r2, r0
 800d744:	0029      	movs	r1, r5
 800d746:	0030      	movs	r0, r6
 800d748:	f005 feda 	bl	8013500 <strncmp>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d00a      	beq.n	800d766 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d750:	6864      	ldr	r4, [r4, #4]
 800d752:	603c      	str	r4, [r7, #0]
 800d754:	2c00      	cmp	r4, #0
 800d756:	d1ea      	bne.n	800d72e <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d758:	465a      	mov	r2, fp
 800d75a:	491e      	ldr	r1, [pc, #120]	; (800d7d4 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d75c:	4650      	mov	r0, sl
 800d75e:	f005 fee0 	bl	8013522 <strncpy>
		xReturn = pdFALSE;
 800d762:	2000      	movs	r0, #0
	return xReturn;
 800d764:	e7d8      	b.n	800d718 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d766:	4643      	mov	r3, r8
 800d768:	250c      	movs	r5, #12
 800d76a:	575d      	ldrsb	r5, [r3, r5]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2d00      	cmp	r5, #0
 800d770:	db26      	blt.n	800d7c0 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d772:	2200      	movs	r2, #0
 800d774:	56b2      	ldrsb	r2, [r6, r2]
 800d776:	2a00      	cmp	r2, #0
 800d778:	d025      	beq.n	800d7c6 <FreeRTOS_CLIProcessCommand+0xda>
 800d77a:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d77c:	2400      	movs	r4, #0
 800d77e:	e005      	b.n	800d78c <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d780:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d782:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d784:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d786:	568a      	ldrsb	r2, [r1, r2]
 800d788:	2a00      	cmp	r2, #0
 800d78a:	d007      	beq.n	800d79c <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d78c:	2a20      	cmp	r2, #32
 800d78e:	d1f7      	bne.n	800d780 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d790:	2801      	cmp	r0, #1
 800d792:	d0f6      	beq.n	800d782 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d794:	3401      	adds	r4, #1
 800d796:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d798:	2001      	movs	r0, #1
 800d79a:	e7f2      	b.n	800d782 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d79c:	2801      	cmp	r0, #1
 800d79e:	d00c      	beq.n	800d7ba <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d7a0:	42a5      	cmp	r5, r4
 800d7a2:	d00d      	beq.n	800d7c0 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d0d7      	beq.n	800d758 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d7a8:	465a      	mov	r2, fp
 800d7aa:	490b      	ldr	r1, [pc, #44]	; (800d7d8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	f005 feb8 	bl	8013522 <strncpy>
		pxCommand = NULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	e7ae      	b.n	800d718 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d7ba:	3c01      	subs	r4, #1
 800d7bc:	b264      	sxtb	r4, r4
 800d7be:	e7ef      	b.n	800d7a0 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1a0      	bne.n	800d706 <FreeRTOS_CLIProcessCommand+0x1a>
 800d7c4:	e7c8      	b.n	800d758 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	e7ea      	b.n	800d7a0 <FreeRTOS_CLIProcessCommand+0xb4>
 800d7ca:	46c0      	nop			; (mov r8, r8)
 800d7cc:	2000246c 	.word	0x2000246c
 800d7d0:	200000bc 	.word	0x200000bc
 800d7d4:	0801a9d4 	.word	0x0801a9d4
 800d7d8:	0801a97c 	.word	0x0801a97c

0800d7dc <FreeRTOS_CLIGetOutputBuffer>:
}
 800d7dc:	4800      	ldr	r0, [pc, #0]	; (800d7e0 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d7de:	4770      	bx	lr
 800d7e0:	2000247c 	.word	0x2000247c

0800d7e4 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d7e4:	2300      	movs	r3, #0
{
 800d7e6:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d7e8:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d7ea:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d021      	beq.n	800d834 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	56c3      	ldrsb	r3, [r0, r3]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d105      	bne.n	800d804 <FreeRTOS_CLIGetParameter+0x20>
 800d7f8:	e01c      	b.n	800d834 <FreeRTOS_CLIGetParameter+0x50>
 800d7fa:	2300      	movs	r3, #0
			pcCommandString++;
 800d7fc:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7fe:	56c3      	ldrsb	r3, [r0, r3]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d017      	beq.n	800d834 <FreeRTOS_CLIGetParameter+0x50>
 800d804:	2b20      	cmp	r3, #32
 800d806:	d1f8      	bne.n	800d7fa <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d808:	2300      	movs	r3, #0
			pcCommandString++;
 800d80a:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d80c:	56c3      	ldrsb	r3, [r0, r3]
 800d80e:	2b20      	cmp	r3, #32
 800d810:	d0fa      	beq.n	800d808 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00e      	beq.n	800d834 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d816:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d818:	42a1      	cmp	r1, r4
 800d81a:	d1e9      	bne.n	800d7f0 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d81c:	2120      	movs	r1, #32
 800d81e:	7803      	ldrb	r3, [r0, #0]
 800d820:	438b      	bics	r3, r1
 800d822:	d007      	beq.n	800d834 <FreeRTOS_CLIGetParameter+0x50>
 800d824:	2300      	movs	r3, #0
 800d826:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d828:	3301      	adds	r3, #1
 800d82a:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d82c:	5cc1      	ldrb	r1, [r0, r3]
 800d82e:	43a1      	bics	r1, r4
 800d830:	d1fa      	bne.n	800d828 <FreeRTOS_CLIGetParameter+0x44>
 800d832:	e000      	b.n	800d836 <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d834:	2000      	movs	r0, #0
}
 800d836:	bd10      	pop	{r4, pc}

0800d838 <prvHelpCommand>:
{
 800d838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d83a:	46ce      	mov	lr, r9
 800d83c:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d83e:	2300      	movs	r3, #0
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b083      	sub	sp, #12
 800d844:	0004      	movs	r4, r0
 800d846:	000d      	movs	r5, r1
 800d848:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d84a:	2101      	movs	r1, #1
 800d84c:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d84e:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d850:	f7ff ffc8 	bl	800d7e4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d854:	2800      	cmp	r0, #0
 800d856:	d024      	beq.n	800d8a2 <prvHelpCommand+0x6a>
 800d858:	2206      	movs	r2, #6
 800d85a:	4931      	ldr	r1, [pc, #196]	; (800d920 <prvHelpCommand+0xe8>)
 800d85c:	f005 fe50 	bl	8013500 <strncmp>
 800d860:	1e07      	subs	r7, r0, #0
 800d862:	d118      	bne.n	800d896 <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d864:	4b2f      	ldr	r3, [pc, #188]	; (800d924 <prvHelpCommand+0xec>)
 800d866:	4698      	mov	r8, r3
 800d868:	791b      	ldrb	r3, [r3, #4]
 800d86a:	2b07      	cmp	r3, #7
 800d86c:	d047      	beq.n	800d8fe <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	b2d2      	uxtb	r2, r2
 800d872:	4691      	mov	r9, r2
 800d874:	4642      	mov	r2, r8
 800d876:	4649      	mov	r1, r9
 800d878:	7111      	strb	r1, [r2, #4]
 800d87a:	4a2b      	ldr	r2, [pc, #172]	; (800d928 <prvHelpCommand+0xf0>)
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	5899      	ldr	r1, [r3, r2]
 800d880:	0020      	movs	r0, r4
 800d882:	002a      	movs	r2, r5
 800d884:	f005 fe4d 	bl	8013522 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d888:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d88a:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d88c:	2b07      	cmp	r3, #7
 800d88e:	d102      	bne.n	800d896 <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d890:	4643      	mov	r3, r8
 800d892:	2600      	movs	r6, #0
 800d894:	711f      	strb	r7, [r3, #4]
}
 800d896:	0030      	movs	r0, r6
 800d898:	b003      	add	sp, #12
 800d89a:	bc0c      	pop	{r2, r3}
 800d89c:	4690      	mov	r8, r2
 800d89e:	4699      	mov	r9, r3
 800d8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d8a2:	4f20      	ldr	r7, [pc, #128]	; (800d924 <prvHelpCommand+0xec>)
 800d8a4:	68be      	ldr	r6, [r7, #8]
 800d8a6:	2e00      	cmp	r6, #0
 800d8a8:	d020      	beq.n	800d8ec <prvHelpCommand+0xb4>
 800d8aa:	7b3b      	ldrb	r3, [r7, #12]
 800d8ac:	1c5a      	adds	r2, r3, #1
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	4690      	mov	r8, r2
 800d8b2:	6832      	ldr	r2, [r6, #0]
 800d8b4:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d8b6:	4a1d      	ldr	r2, [pc, #116]	; (800d92c <prvHelpCommand+0xf4>)
 800d8b8:	7812      	ldrb	r2, [r2, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d22a      	bcs.n	800d914 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d8be:	002a      	movs	r2, r5
 800d8c0:	0020      	movs	r0, r4
 800d8c2:	3a08      	subs	r2, #8
 800d8c4:	3008      	adds	r0, #8
 800d8c6:	f005 fe2c 	bl	8013522 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d8ca:	1c60      	adds	r0, r4, #1
 800d8cc:	4918      	ldr	r1, [pc, #96]	; (800d930 <prvHelpCommand+0xf8>)
 800d8ce:	f005 fe0f 	bl	80134f0 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d8d2:	2328      	movs	r3, #40	; 0x28
 800d8d4:	7023      	strb	r3, [r4, #0]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	71a3      	strb	r3, [r4, #6]
 800d8da:	3b09      	subs	r3, #9
 800d8dc:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d8de:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d8e0:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d8e2:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d8e4:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d8e6:	1e73      	subs	r3, r6, #1
 800d8e8:	419e      	sbcs	r6, r3
 800d8ea:	e7d4      	b.n	800d896 <prvHelpCommand+0x5e>
			counter = 1;
 800d8ec:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d8ee:	4e11      	ldr	r6, [pc, #68]	; (800d934 <prvHelpCommand+0xfc>)
			counter = 1;
 800d8f0:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d8f2:	3604      	adds	r6, #4
			counter = 1;
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d8f8:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	e7d9      	b.n	800d8b2 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d8fe:	4642      	mov	r2, r8
 800d900:	3b06      	subs	r3, #6
 800d902:	7113      	strb	r3, [r2, #4]
 800d904:	4b08      	ldr	r3, [pc, #32]	; (800d928 <prvHelpCommand+0xf0>)
 800d906:	002a      	movs	r2, r5
 800d908:	6819      	ldr	r1, [r3, #0]
 800d90a:	0020      	movs	r0, r4
 800d90c:	f005 fe09 	bl	8013522 <strncpy>
			xReturn = pdTRUE;
 800d910:	2601      	movs	r6, #1
 800d912:	e7c0      	b.n	800d896 <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d914:	002a      	movs	r2, r5
 800d916:	0020      	movs	r0, r4
 800d918:	f005 fe03 	bl	8013522 <strncpy>
 800d91c:	e7df      	b.n	800d8de <prvHelpCommand+0xa6>
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	08019198 	.word	0x08019198
 800d924:	2000246c 	.word	0x2000246c
 800d928:	20000034 	.word	0x20000034
 800d92c:	200067dc 	.word	0x200067dc
 800d930:	08017926 	.word	0x08017926
 800d934:	200000bc 	.word	0x200000bc

0800d938 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d938:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d93a:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d93c:	3308      	adds	r3, #8
 800d93e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d940:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d942:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d944:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d946:	4252      	negs	r2, r2
 800d948:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d94a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d94c:	4770      	bx	lr
 800d94e:	46c0      	nop			; (mov r8, r8)

0800d950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d950:	2300      	movs	r3, #0
 800d952:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d954:	4770      	bx	lr
 800d956:	46c0      	nop			; (mov r8, r8)

0800d958 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d958:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d95a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d95c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d95e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d964:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d966:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d968:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d96a:	3301      	adds	r3, #1
 800d96c:	6003      	str	r3, [r0, #0]
}
 800d96e:	4770      	bx	lr

0800d970 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d970:	0002      	movs	r2, r0
{
 800d972:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d974:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d976:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d978:	1c63      	adds	r3, r4, #1
 800d97a:	d101      	bne.n	800d980 <vListInsert+0x10>
 800d97c:	e00d      	b.n	800d99a <vListInsert+0x2a>
 800d97e:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d980:	6853      	ldr	r3, [r2, #4]
 800d982:	681d      	ldr	r5, [r3, #0]
 800d984:	42a5      	cmp	r5, r4
 800d986:	d9fa      	bls.n	800d97e <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d988:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d98a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d98c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d98e:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d990:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d992:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d994:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d996:	6003      	str	r3, [r0, #0]
}
 800d998:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d99a:	6902      	ldr	r2, [r0, #16]
 800d99c:	6853      	ldr	r3, [r2, #4]
 800d99e:	e7f3      	b.n	800d988 <vListInsert+0x18>

0800d9a0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9a0:	6842      	ldr	r2, [r0, #4]
 800d9a2:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d9a4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9a6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9a8:	6881      	ldr	r1, [r0, #8]
 800d9aa:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	4282      	cmp	r2, r0
 800d9b0:	d100      	bne.n	800d9b4 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9b2:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	1e50      	subs	r0, r2, #1
 800d9bc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d9be:	4770      	bx	lr

0800d9c0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d9c6:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9c8:	2a00      	cmp	r2, #0
 800d9ca:	d107      	bne.n	800d9dc <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9cc:	6805      	ldr	r5, [r0, #0]
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	d02d      	beq.n	800da2e <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800d9d2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d9d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d9dc:	2d00      	cmp	r5, #0
 800d9de:	d10e      	bne.n	800d9fe <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d9e0:	6880      	ldr	r0, [r0, #8]
 800d9e2:	f005 fb46 	bl	8013072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d9e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d9e8:	68a3      	ldr	r3, [r4, #8]
 800d9ea:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9ec:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d9ee:	4463      	add	r3, ip
 800d9f0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d3ed      	bcc.n	800d9d2 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9f6:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800d9f8:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	e7ea      	b.n	800d9d4 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9fe:	68c0      	ldr	r0, [r0, #12]
 800da00:	f005 fb37 	bl	8013072 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da04:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da06:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da08:	425a      	negs	r2, r3
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	189b      	adds	r3, r3, r2
 800da0e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da10:	428b      	cmp	r3, r1
 800da12:	d203      	bcs.n	800da1c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800da14:	6863      	ldr	r3, [r4, #4]
 800da16:	469c      	mov	ip, r3
 800da18:	4462      	add	r2, ip
 800da1a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800da1c:	2d02      	cmp	r5, #2
 800da1e:	d1d8      	bne.n	800d9d2 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0d5      	beq.n	800d9d2 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800da26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da28:	3b01      	subs	r3, #1
 800da2a:	63a3      	str	r3, [r4, #56]	; 0x38
 800da2c:	e7d1      	b.n	800d9d2 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800da2e:	6840      	ldr	r0, [r0, #4]
 800da30:	f000 ff98 	bl	800e964 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800da34:	6065      	str	r5, [r4, #4]
 800da36:	e7cd      	b.n	800d9d4 <prvCopyDataToQueue+0x14>

0800da38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da38:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800da3a:	b510      	push	{r4, lr}
 800da3c:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da3e:	2a00      	cmp	r2, #0
 800da40:	d008      	beq.n	800da54 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800da42:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da44:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800da46:	1889      	adds	r1, r1, r2
 800da48:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da4a:	42a1      	cmp	r1, r4
 800da4c:	d203      	bcs.n	800da56 <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800da4e:	0018      	movs	r0, r3
 800da50:	f005 fb0f 	bl	8013072 <memcpy>
	}
}
 800da54:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800da56:	6801      	ldr	r1, [r0, #0]
 800da58:	60c1      	str	r1, [r0, #12]
 800da5a:	e7f8      	b.n	800da4e <prvCopyDataFromQueue+0x16>

0800da5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da60:	f001 fb1c 	bl	800f09c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da66:	2b00      	cmp	r3, #0
 800da68:	dd1b      	ble.n	800daa2 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d018      	beq.n	800daa2 <prvUnlockQueue+0x46>
 800da70:	0025      	movs	r5, r4
 800da72:	3524      	adds	r5, #36	; 0x24
 800da74:	e008      	b.n	800da88 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800da76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da78:	3b01      	subs	r3, #1
 800da7a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da7e:	2b00      	cmp	r3, #0
 800da80:	dd0f      	ble.n	800daa2 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00c      	beq.n	800daa2 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da88:	0028      	movs	r0, r5
 800da8a:	f000 feb7 	bl	800e7fc <xTaskRemoveFromEventList>
 800da8e:	2800      	cmp	r0, #0
 800da90:	d0f1      	beq.n	800da76 <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800da92:	f000 ff21 	bl	800e8d8 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800da96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da98:	3b01      	subs	r3, #1
 800da9a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dcef      	bgt.n	800da82 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800daa2:	2301      	movs	r3, #1
 800daa4:	425b      	negs	r3, r3
 800daa6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800daa8:	f001 fb04 	bl	800f0b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800daac:	f001 faf6 	bl	800f09c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dd1b      	ble.n	800daee <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d018      	beq.n	800daee <prvUnlockQueue+0x92>
 800dabc:	0025      	movs	r5, r4
 800dabe:	3510      	adds	r5, #16
 800dac0:	e008      	b.n	800dad4 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800dac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dac4:	3b01      	subs	r3, #1
 800dac6:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd0f      	ble.n	800daee <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00c      	beq.n	800daee <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dad4:	0028      	movs	r0, r5
 800dad6:	f000 fe91 	bl	800e7fc <xTaskRemoveFromEventList>
 800dada:	2800      	cmp	r0, #0
 800dadc:	d0f1      	beq.n	800dac2 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800dade:	f000 fefb 	bl	800e8d8 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800dae2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dae4:	3b01      	subs	r3, #1
 800dae6:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800daea:	2b00      	cmp	r3, #0
 800daec:	dcef      	bgt.n	800dace <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800daee:	2301      	movs	r3, #1
 800daf0:	425b      	negs	r3, r3
 800daf2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800daf4:	f001 fade 	bl	800f0b4 <vPortExitCritical>
}
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	46c0      	nop			; (mov r8, r8)

0800dafc <xQueueGenericReset>:
{
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	0004      	movs	r4, r0
 800db00:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800db02:	f001 facb 	bl	800f09c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db0a:	6822      	ldr	r2, [r4, #0]
 800db0c:	434b      	muls	r3, r1
 800db0e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800db10:	1a5b      	subs	r3, r3, r1
 800db12:	18d3      	adds	r3, r2, r3
 800db14:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800db16:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db18:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db1a:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800db1c:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db1e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db20:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800db22:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800db24:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800db26:	2d00      	cmp	r5, #0
 800db28:	d10f      	bne.n	800db4a <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d103      	bne.n	800db38 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800db30:	f001 fac0 	bl	800f0b4 <vPortExitCritical>
}
 800db34:	2001      	movs	r0, #1
 800db36:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800db38:	0020      	movs	r0, r4
 800db3a:	3010      	adds	r0, #16
 800db3c:	f000 fe5e 	bl	800e7fc <xTaskRemoveFromEventList>
 800db40:	2801      	cmp	r0, #1
 800db42:	d1f5      	bne.n	800db30 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800db44:	f001 fa9e 	bl	800f084 <vPortYield>
 800db48:	e7f2      	b.n	800db30 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db4a:	0020      	movs	r0, r4
 800db4c:	3010      	adds	r0, #16
 800db4e:	f7ff fef3 	bl	800d938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db52:	0020      	movs	r0, r4
 800db54:	3024      	adds	r0, #36	; 0x24
 800db56:	f7ff feef 	bl	800d938 <vListInitialise>
 800db5a:	e7e9      	b.n	800db30 <xQueueGenericReset+0x34>

0800db5c <xQueueGenericCreate>:
{
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	0006      	movs	r6, r0
 800db60:	000d      	movs	r5, r1
 800db62:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db64:	2900      	cmp	r1, #0
 800db66:	d009      	beq.n	800db7c <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db68:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db6a:	3055      	adds	r0, #85	; 0x55
 800db6c:	f001 fb10 	bl	800f190 <pvPortMalloc>
 800db70:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db72:	d013      	beq.n	800db9c <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800db74:	0003      	movs	r3, r0
 800db76:	3354      	adds	r3, #84	; 0x54
 800db78:	6003      	str	r3, [r0, #0]
 800db7a:	e005      	b.n	800db88 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db7c:	2054      	movs	r0, #84	; 0x54
 800db7e:	f001 fb07 	bl	800f190 <pvPortMalloc>
 800db82:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db84:	d00a      	beq.n	800db9c <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db86:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800db88:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800db8a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db8c:	2101      	movs	r1, #1
 800db8e:	0020      	movs	r0, r4
 800db90:	f7ff ffb4 	bl	800dafc <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800db94:	2350      	movs	r3, #80	; 0x50
 800db96:	54e7      	strb	r7, [r4, r3]
}
 800db98:	0020      	movs	r0, r4
 800db9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800db9c:	2400      	movs	r4, #0
 800db9e:	e7fb      	b.n	800db98 <xQueueGenericCreate+0x3c>

0800dba0 <xQueueCreateCountingSemaphore>:
	{
 800dba0:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dba2:	2202      	movs	r2, #2
	{
 800dba4:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dba6:	2100      	movs	r1, #0
 800dba8:	f7ff ffd8 	bl	800db5c <xQueueGenericCreate>
		if( xHandle != NULL )
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d000      	beq.n	800dbb2 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dbb0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dbb2:	bd10      	pop	{r4, pc}

0800dbb4 <xQueueGenericSend>:
{
 800dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbb6:	46c6      	mov	lr, r8
 800dbb8:	0004      	movs	r4, r0
 800dbba:	b500      	push	{lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	001e      	movs	r6, r3
 800dbc2:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800dbc4:	f001 fa6a 	bl	800f09c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dbcc:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dbce:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d330      	bcc.n	800dc36 <xQueueGenericSend+0x82>
 800dbd4:	2e02      	cmp	r6, #2
 800dbd6:	d02e      	beq.n	800dc36 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbd8:	9b01      	ldr	r3, [sp, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d052      	beq.n	800dc84 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800dbde:	2d00      	cmp	r5, #0
 800dbe0:	d03a      	beq.n	800dc58 <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800dbe2:	f001 fa67 	bl	800f0b4 <vPortExitCritical>
		vTaskSuspendAll();
 800dbe6:	f000 fc0f 	bl	800e408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbea:	f001 fa57 	bl	800f09c <vPortEnterCritical>
 800dbee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	d100      	bne.n	800dbf6 <xQueueGenericSend+0x42>
 800dbf4:	6467      	str	r7, [r4, #68]	; 0x44
 800dbf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	d100      	bne.n	800dbfe <xQueueGenericSend+0x4a>
 800dbfc:	64a7      	str	r7, [r4, #72]	; 0x48
 800dbfe:	f001 fa59 	bl	800f0b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc02:	a901      	add	r1, sp, #4
 800dc04:	a802      	add	r0, sp, #8
 800dc06:	f000 fe3b 	bl	800e880 <xTaskCheckForTimeOut>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d13e      	bne.n	800dc8c <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc0e:	f001 fa45 	bl	800f09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d022      	beq.n	800dc60 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dc1a:	f001 fa4b 	bl	800f0b4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dc1e:	0020      	movs	r0, r4
 800dc20:	f7ff ff1c 	bl	800da5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc24:	f000 fc8e 	bl	800e544 <xTaskResumeAll>
 800dc28:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800dc2a:	f001 fa37 	bl	800f09c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d2ce      	bcs.n	800dbd4 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc36:	0032      	movs	r2, r6
 800dc38:	4641      	mov	r1, r8
 800dc3a:	0020      	movs	r0, r4
 800dc3c:	f7ff fec0 	bl	800d9c0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d129      	bne.n	800dc9a <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d12d      	bne.n	800dca6 <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800dc4a:	f001 fa33 	bl	800f0b4 <vPortExitCritical>
				return pdPASS;
 800dc4e:	2001      	movs	r0, #1
}
 800dc50:	b004      	add	sp, #16
 800dc52:	bc04      	pop	{r2}
 800dc54:	4690      	mov	r8, r2
 800dc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800dc58:	a802      	add	r0, sp, #8
 800dc5a:	f000 fe05 	bl	800e868 <vTaskSetTimeOutState>
 800dc5e:	e7c0      	b.n	800dbe2 <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800dc60:	f001 fa28 	bl	800f0b4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc64:	0020      	movs	r0, r4
 800dc66:	9901      	ldr	r1, [sp, #4]
 800dc68:	3010      	adds	r0, #16
 800dc6a:	f000 fd99 	bl	800e7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc6e:	0020      	movs	r0, r4
 800dc70:	f7ff fef4 	bl	800da5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc74:	f000 fc66 	bl	800e544 <xTaskResumeAll>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d1d5      	bne.n	800dc28 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800dc7c:	f001 fa02 	bl	800f084 <vPortYield>
 800dc80:	2501      	movs	r5, #1
 800dc82:	e7d2      	b.n	800dc2a <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800dc84:	f001 fa16 	bl	800f0b4 <vPortExitCritical>
					return errQUEUE_FULL;
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e7e1      	b.n	800dc50 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800dc8c:	0020      	movs	r0, r4
 800dc8e:	f7ff fee5 	bl	800da5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc92:	f000 fc57 	bl	800e544 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dc96:	2000      	movs	r0, #0
 800dc98:	e7da      	b.n	800dc50 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dc9a:	0020      	movs	r0, r4
 800dc9c:	3024      	adds	r0, #36	; 0x24
 800dc9e:	f000 fdad 	bl	800e7fc <xTaskRemoveFromEventList>
 800dca2:	2801      	cmp	r0, #1
 800dca4:	d1d1      	bne.n	800dc4a <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800dca6:	f001 f9ed 	bl	800f084 <vPortYield>
 800dcaa:	e7ce      	b.n	800dc4a <xQueueGenericSend+0x96>

0800dcac <xQueueGenericSendFromISR>:
{
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	46ce      	mov	lr, r9
 800dcb0:	4647      	mov	r7, r8
 800dcb2:	0004      	movs	r4, r0
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	4691      	mov	r9, r2
 800dcb8:	001d      	movs	r5, r3
 800dcba:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcbc:	f001 fa04 	bl	800f0c8 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcc4:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d30a      	bcc.n	800dce0 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800dcca:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dccc:	2d02      	cmp	r5, #2
 800dcce:	d007      	beq.n	800dce0 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dcd0:	0038      	movs	r0, r7
 800dcd2:	f001 f9ff 	bl	800f0d4 <vClearInterruptMaskFromISR>
}
 800dcd6:	0030      	movs	r0, r6
 800dcd8:	bc0c      	pop	{r2, r3}
 800dcda:	4690      	mov	r8, r2
 800dcdc:	4699      	mov	r9, r3
 800dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dce0:	002a      	movs	r2, r5
 800dce2:	4641      	mov	r1, r8
 800dce4:	0020      	movs	r0, r4
 800dce6:	f7ff fe6b 	bl	800d9c0 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dcea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcec:	3301      	adds	r3, #1
 800dcee:	d004      	beq.n	800dcfa <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800dcf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dcf6:	2601      	movs	r6, #1
 800dcf8:	e7ea      	b.n	800dcd0 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0fa      	beq.n	800dcf6 <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd00:	0020      	movs	r0, r4
 800dd02:	3024      	adds	r0, #36	; 0x24
 800dd04:	f000 fd7a 	bl	800e7fc <xTaskRemoveFromEventList>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0f4      	beq.n	800dcf6 <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd0c:	464b      	mov	r3, r9
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0f1      	beq.n	800dcf6 <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd12:	2301      	movs	r3, #1
 800dd14:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800dd16:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd18:	6013      	str	r3, [r2, #0]
 800dd1a:	e7d9      	b.n	800dcd0 <xQueueGenericSendFromISR+0x24>

0800dd1c <xQueueGiveFromISR>:
{
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	0004      	movs	r4, r0
 800dd20:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd22:	f001 f9d1 	bl	800f0c8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd2a:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800dd2c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d209      	bcs.n	800dd46 <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800dd32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd34:	3301      	adds	r3, #1
 800dd36:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dd38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	d008      	beq.n	800dd50 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800dd3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd40:	3301      	adds	r3, #1
 800dd42:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dd44:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dd46:	0030      	movs	r0, r6
 800dd48:	f001 f9c4 	bl	800f0d4 <vClearInterruptMaskFromISR>
}
 800dd4c:	0028      	movs	r0, r5
 800dd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0f6      	beq.n	800dd44 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd56:	0020      	movs	r0, r4
 800dd58:	3024      	adds	r0, #36	; 0x24
 800dd5a:	f000 fd4f 	bl	800e7fc <xTaskRemoveFromEventList>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d0f0      	beq.n	800dd44 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd62:	2f00      	cmp	r7, #0
 800dd64:	d0ee      	beq.n	800dd44 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd66:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800dd68:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd6a:	603b      	str	r3, [r7, #0]
 800dd6c:	e7eb      	b.n	800dd46 <xQueueGiveFromISR+0x2a>
 800dd6e:	46c0      	nop			; (mov r8, r8)

0800dd70 <xQueueGenericReceive>:
{
 800dd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd72:	46c6      	mov	lr, r8
 800dd74:	0004      	movs	r4, r0
 800dd76:	b500      	push	{lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	4698      	mov	r8, r3
 800dd7c:	000f      	movs	r7, r1
 800dd7e:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800dd80:	f001 f98c 	bl	800f09c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d148      	bne.n	800de1c <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd8a:	9b01      	ldr	r3, [sp, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d06a      	beq.n	800de66 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd90:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800dd92:	a802      	add	r0, sp, #8
 800dd94:	f000 fd68 	bl	800e868 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800dd98:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd9a:	3624      	adds	r6, #36	; 0x24
 800dd9c:	e017      	b.n	800ddce <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800dd9e:	f001 f989 	bl	800f0b4 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d056      	beq.n	800de56 <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dda8:	9901      	ldr	r1, [sp, #4]
 800ddaa:	0030      	movs	r0, r6
 800ddac:	f000 fcf8 	bl	800e7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddb0:	0020      	movs	r0, r4
 800ddb2:	f7ff fe53 	bl	800da5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddb6:	f000 fbc5 	bl	800e544 <xTaskResumeAll>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d048      	beq.n	800de50 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800ddbe:	f001 f96d 	bl	800f09c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d129      	bne.n	800de1c <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d04b      	beq.n	800de66 <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800ddce:	f001 f971 	bl	800f0b4 <vPortExitCritical>
		vTaskSuspendAll();
 800ddd2:	f000 fb19 	bl	800e408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddd6:	f001 f961 	bl	800f09c <vPortEnterCritical>
 800ddda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dddc:	3301      	adds	r3, #1
 800ddde:	d100      	bne.n	800dde2 <xQueueGenericReceive+0x72>
 800dde0:	6465      	str	r5, [r4, #68]	; 0x44
 800dde2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dde4:	3301      	adds	r3, #1
 800dde6:	d100      	bne.n	800ddea <xQueueGenericReceive+0x7a>
 800dde8:	64a5      	str	r5, [r4, #72]	; 0x48
 800ddea:	f001 f963 	bl	800f0b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddee:	a901      	add	r1, sp, #4
 800ddf0:	a802      	add	r0, sp, #8
 800ddf2:	f000 fd45 	bl	800e880 <xTaskCheckForTimeOut>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d13c      	bne.n	800de74 <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800ddfa:	f001 f94f 	bl	800f09c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de00:	2b00      	cmp	r3, #0
 800de02:	d0cc      	beq.n	800dd9e <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800de04:	f001 f956 	bl	800f0b4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800de08:	0020      	movs	r0, r4
 800de0a:	f7ff fe27 	bl	800da5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de0e:	f000 fb99 	bl	800e544 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800de12:	f001 f943 	bl	800f09c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d0d5      	beq.n	800ddc8 <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de1c:	0039      	movs	r1, r7
 800de1e:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800de20:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de22:	f7ff fe09 	bl	800da38 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800de26:	4643      	mov	r3, r8
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d12a      	bne.n	800de82 <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800de2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de2e:	3b01      	subs	r3, #1
 800de30:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d033      	beq.n	800dea0 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de38:	6923      	ldr	r3, [r4, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d025      	beq.n	800de8a <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800de3e:	0020      	movs	r0, r4
 800de40:	3010      	adds	r0, #16
 800de42:	f000 fcdb 	bl	800e7fc <xTaskRemoveFromEventList>
 800de46:	2801      	cmp	r0, #1
 800de48:	d11f      	bne.n	800de8a <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800de4a:	f001 f91b 	bl	800f084 <vPortYield>
 800de4e:	e01c      	b.n	800de8a <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800de50:	f001 f918 	bl	800f084 <vPortYield>
 800de54:	e7b3      	b.n	800ddbe <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800de56:	f001 f921 	bl	800f09c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800de5a:	6860      	ldr	r0, [r4, #4]
 800de5c:	f000 fd4e 	bl	800e8fc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800de60:	f001 f928 	bl	800f0b4 <vPortExitCritical>
 800de64:	e7a0      	b.n	800dda8 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800de66:	f001 f925 	bl	800f0b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800de6a:	2000      	movs	r0, #0
}
 800de6c:	b004      	add	sp, #16
 800de6e:	bc04      	pop	{r2}
 800de70:	4690      	mov	r8, r2
 800de72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800de74:	0020      	movs	r0, r4
 800de76:	f7ff fdf1 	bl	800da5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de7a:	f000 fb63 	bl	800e544 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800de7e:	2000      	movs	r0, #0
 800de80:	e7f4      	b.n	800de6c <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de82:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800de84:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de86:	2b00      	cmp	r3, #0
 800de88:	d103      	bne.n	800de92 <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800de8a:	f001 f913 	bl	800f0b4 <vPortExitCritical>
				return pdPASS;
 800de8e:	2001      	movs	r0, #1
 800de90:	e7ec      	b.n	800de6c <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de92:	0020      	movs	r0, r4
 800de94:	3024      	adds	r0, #36	; 0x24
 800de96:	f000 fcb1 	bl	800e7fc <xTaskRemoveFromEventList>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d0f5      	beq.n	800de8a <xQueueGenericReceive+0x11a>
 800de9e:	e7d4      	b.n	800de4a <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dea0:	f000 fe40 	bl	800eb24 <pvTaskIncrementMutexHeldCount>
 800dea4:	6060      	str	r0, [r4, #4]
 800dea6:	e7c7      	b.n	800de38 <xQueueGenericReceive+0xc8>

0800dea8 <xQueueReceiveFromISR>:
{
 800dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deaa:	46c6      	mov	lr, r8
 800deac:	0004      	movs	r4, r0
 800deae:	b500      	push	{lr}
 800deb0:	000f      	movs	r7, r1
 800deb2:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800deb4:	f001 f908 	bl	800f0c8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800deba:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800debc:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dec2:	0030      	movs	r0, r6
 800dec4:	f001 f906 	bl	800f0d4 <vClearInterruptMaskFromISR>
}
 800dec8:	0028      	movs	r0, r5
 800deca:	bc04      	pop	{r2}
 800decc:	4690      	mov	r8, r2
 800dece:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ded0:	0039      	movs	r1, r7
 800ded2:	0020      	movs	r0, r4
 800ded4:	f7ff fdb0 	bl	800da38 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ded8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deda:	3b01      	subs	r3, #1
 800dedc:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800dede:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dee0:	3301      	adds	r3, #1
 800dee2:	d004      	beq.n	800deee <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800dee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dee6:	3301      	adds	r3, #1
 800dee8:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800deea:	2501      	movs	r5, #1
 800deec:	e7e9      	b.n	800dec2 <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d0fa      	beq.n	800deea <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800def4:	0020      	movs	r0, r4
 800def6:	3010      	adds	r0, #16
 800def8:	f000 fc80 	bl	800e7fc <xTaskRemoveFromEventList>
 800defc:	2800      	cmp	r0, #0
 800defe:	d0f4      	beq.n	800deea <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800df00:	4643      	mov	r3, r8
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0f1      	beq.n	800deea <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df06:	2301      	movs	r3, #1
 800df08:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800df0a:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	e7d8      	b.n	800dec2 <xQueueReceiveFromISR+0x1a>

0800df10 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df10:	2300      	movs	r3, #0
	{
 800df12:	b570      	push	{r4, r5, r6, lr}
 800df14:	4d06      	ldr	r5, [pc, #24]	; (800df30 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df16:	00dc      	lsls	r4, r3, #3
 800df18:	192a      	adds	r2, r5, r4
 800df1a:	6816      	ldr	r6, [r2, #0]
 800df1c:	2e00      	cmp	r6, #0
 800df1e:	d003      	beq.n	800df28 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df20:	3301      	adds	r3, #1
 800df22:	2b08      	cmp	r3, #8
 800df24:	d1f7      	bne.n	800df16 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df26:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df28:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df2a:	6050      	str	r0, [r2, #4]
				break;
 800df2c:	e7fb      	b.n	800df26 <vQueueAddToRegistry+0x16>
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	20006d38 	.word	0x20006d38

0800df34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	0004      	movs	r4, r0
 800df38:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df3a:	f001 f8af 	bl	800f09c <vPortEnterCritical>
 800df3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df40:	3301      	adds	r3, #1
 800df42:	d101      	bne.n	800df48 <vQueueWaitForMessageRestricted+0x14>
 800df44:	2300      	movs	r3, #0
 800df46:	6463      	str	r3, [r4, #68]	; 0x44
 800df48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df4a:	3301      	adds	r3, #1
 800df4c:	d101      	bne.n	800df52 <vQueueWaitForMessageRestricted+0x1e>
 800df4e:	2300      	movs	r3, #0
 800df50:	64a3      	str	r3, [r4, #72]	; 0x48
 800df52:	f001 f8af 	bl	800f0b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d104      	bne.n	800df66 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df5c:	0020      	movs	r0, r4
 800df5e:	0029      	movs	r1, r5
 800df60:	3024      	adds	r0, #36	; 0x24
 800df62:	f000 fc39 	bl	800e7d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df66:	0020      	movs	r0, r4
 800df68:	f7ff fd78 	bl	800da5c <prvUnlockQueue>
	}
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
 800df6e:	46c0      	nop			; (mov r8, r8)

0800df70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800df70:	b510      	push	{r4, lr}
 800df72:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800df74:	f005 fabc 	bl	80134f0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800df78:	0020      	movs	r0, r4
 800df7a:	f7f2 f8cd 	bl	8000118 <strlen>
 800df7e:	0003      	movs	r3, r0
 800df80:	280b      	cmp	r0, #11
 800df82:	d808      	bhi.n	800df96 <prvWriteNameToBuffer+0x26>
 800df84:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800df86:	2320      	movs	r3, #32
 800df88:	1820      	adds	r0, r4, r0
 800df8a:	320c      	adds	r2, #12
 800df8c:	7003      	strb	r3, [r0, #0]
 800df8e:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800df90:	4290      	cmp	r0, r2
 800df92:	d1fb      	bne.n	800df8c <prvWriteNameToBuffer+0x1c>
 800df94:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800df96:	18e0      	adds	r0, r4, r3
 800df98:	2300      	movs	r3, #0
 800df9a:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800df9c:	bd10      	pop	{r4, pc}
 800df9e:	46c0      	nop			; (mov r8, r8)

0800dfa0 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfa2:	46d6      	mov	lr, sl
 800dfa4:	464f      	mov	r7, r9
 800dfa6:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dfa8:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dfaa:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dfac:	685f      	ldr	r7, [r3, #4]
 800dfae:	2308      	movs	r3, #8
 800dfb0:	469c      	mov	ip, r3
 800dfb2:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dfb4:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dfb6:	604f      	str	r7, [r1, #4]
 800dfb8:	4567      	cmp	r7, ip
 800dfba:	d042      	beq.n	800e042 <prvListTaskWithinSingleList.part.1+0xa2>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	0005      	movs	r5, r0
 800dfc0:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800dfc2:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800dfc4:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800dfc6:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800dfc8:	687f      	ldr	r7, [r7, #4]
 800dfca:	604f      	str	r7, [r1, #4]
 800dfcc:	45bc      	cmp	ip, r7
 800dfce:	d035      	beq.n	800e03c <prvListTaskWithinSingleList.part.1+0x9c>
 800dfd0:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800dfd2:	0033      	movs	r3, r6
 800dfd4:	3334      	adds	r3, #52	; 0x34
 800dfd6:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800dfd8:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800dfda:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800dfdc:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800dfde:	4653      	mov	r3, sl
 800dfe0:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800dfe2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dfe4:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800dfe6:	4653      	mov	r3, sl
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d018      	beq.n	800e01e <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800dfec:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800dfee:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800dff0:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800dff2:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800dff4:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800dff6:	7813      	ldrb	r3, [r2, #0]
 800dff8:	2ba5      	cmp	r3, #165	; 0xa5
 800dffa:	d11d      	bne.n	800e038 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800dffc:	2300      	movs	r3, #0
			ulCount++;
 800dffe:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e000:	5cd4      	ldrb	r4, [r2, r3]
 800e002:	2ca5      	cmp	r4, #165	; 0xa5
 800e004:	d0fb      	beq.n	800dffe <prvListTaskWithinSingleList.part.1+0x5e>
 800e006:	089b      	lsrs	r3, r3, #2
 800e008:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e00a:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e00c:	3001      	adds	r0, #1
 800e00e:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e010:	45b0      	cmp	r8, r6
 800e012:	d1d9      	bne.n	800dfc8 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e014:	bc1c      	pop	{r2, r3, r4}
 800e016:	4690      	mov	r8, r2
 800e018:	4699      	mov	r9, r3
 800e01a:	46a2      	mov	sl, r4
 800e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e01e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	d0e3      	beq.n	800dfec <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e024:	464b      	mov	r3, r9
 800e026:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e028:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e02a:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e02c:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e02e:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e030:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e032:	7813      	ldrb	r3, [r2, #0]
 800e034:	2ba5      	cmp	r3, #165	; 0xa5
 800e036:	d0e1      	beq.n	800dffc <prvListTaskWithinSingleList.part.1+0x5c>
 800e038:	2300      	movs	r3, #0
 800e03a:	e7e6      	b.n	800e00a <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e03c:	68cf      	ldr	r7, [r1, #12]
 800e03e:	604f      	str	r7, [r1, #4]
 800e040:	e7c6      	b.n	800dfd0 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e042:	68cf      	ldr	r7, [r1, #12]
 800e044:	e7ba      	b.n	800dfbc <prvListTaskWithinSingleList.part.1+0x1c>
 800e046:	46c0      	nop			; (mov r8, r8)

0800e048 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e048:	4b03      	ldr	r3, [pc, #12]	; (800e058 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	4b02      	ldr	r3, [pc, #8]	; (800e05c <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	4770      	bx	lr
 800e058:	200026e0 	.word	0x200026e0
 800e05c:	200000c8 	.word	0x200000c8

0800e060 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e060:	4b0c      	ldr	r3, [pc, #48]	; (800e094 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e062:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e064:	685a      	ldr	r2, [r3, #4]
{
 800e066:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e068:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e06a:	689a      	ldr	r2, [r3, #8]
 800e06c:	4282      	cmp	r2, r0
 800e06e:	d80a      	bhi.n	800e086 <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	6859      	ldr	r1, [r3, #4]
 800e074:	3104      	adds	r1, #4
 800e076:	f7ff fc7b 	bl	800d970 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <prvAddCurrentTaskToDelayedList+0x38>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	42a2      	cmp	r2, r4
 800e080:	d900      	bls.n	800e084 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e082:	601c      	str	r4, [r3, #0]
}
 800e084:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e086:	68d8      	ldr	r0, [r3, #12]
 800e088:	6859      	ldr	r1, [r3, #4]
 800e08a:	3104      	adds	r1, #4
 800e08c:	f7ff fc70 	bl	800d970 <vListInsert>
 800e090:	e7f8      	b.n	800e084 <prvAddCurrentTaskToDelayedList+0x24>
 800e092:	46c0      	nop			; (mov r8, r8)
 800e094:	200026e0 	.word	0x200026e0
 800e098:	200000c8 	.word	0x200000c8

0800e09c <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800e09c:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e09e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800e0a0:	4c26      	ldr	r4, [pc, #152]	; (800e13c <vTaskSwitchContext.part.5+0xa0>)
 800e0a2:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e0a4:	f7f9 fdcc 	bl	8007c40 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e0a8:	6963      	ldr	r3, [r4, #20]
 800e0aa:	4298      	cmp	r0, r3
 800e0ac:	d904      	bls.n	800e0b8 <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e0ae:	6862      	ldr	r2, [r4, #4]
 800e0b0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e0b2:	1acb      	subs	r3, r1, r3
 800e0b4:	181b      	adds	r3, r3, r0
 800e0b6:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e0b8:	6862      	ldr	r2, [r4, #4]
 800e0ba:	6863      	ldr	r3, [r4, #4]
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e0c0:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d923      	bls.n	800e10e <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	2214      	movs	r2, #20
 800e0ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0cc:	491c      	ldr	r1, [pc, #112]	; (800e140 <vTaskSwitchContext.part.5+0xa4>)
 800e0ce:	f004 ffc1 	bl	8013054 <memcmp>
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d128      	bne.n	800e128 <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e0d6:	69a2      	ldr	r2, [r4, #24]
 800e0d8:	491a      	ldr	r1, [pc, #104]	; (800e144 <vTaskSwitchContext.part.5+0xa8>)
 800e0da:	e003      	b.n	800e0e4 <vTaskSwitchContext.part.5+0x48>
 800e0dc:	69a3      	ldr	r3, [r4, #24]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	61a3      	str	r3, [r4, #24]
 800e0e2:	69a2      	ldr	r2, [r4, #24]
 800e0e4:	0093      	lsls	r3, r2, #2
 800e0e6:	189b      	adds	r3, r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	58cb      	ldr	r3, [r1, r3]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d0f5      	beq.n	800e0dc <vTaskSwitchContext.part.5+0x40>
 800e0f0:	69a2      	ldr	r2, [r4, #24]
 800e0f2:	0093      	lsls	r3, r2, #2
 800e0f4:	189b      	adds	r3, r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	18c8      	adds	r0, r1, r3
 800e0fa:	6842      	ldr	r2, [r0, #4]
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	6852      	ldr	r2, [r2, #4]
 800e100:	18c9      	adds	r1, r1, r3
 800e102:	6042      	str	r2, [r0, #4]
 800e104:	428a      	cmp	r2, r1
 800e106:	d015      	beq.n	800e134 <vTaskSwitchContext.part.5+0x98>
 800e108:	68d3      	ldr	r3, [r2, #12]
 800e10a:	6063      	str	r3, [r4, #4]
}
 800e10c:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e10e:	6860      	ldr	r0, [r4, #4]
 800e110:	6861      	ldr	r1, [r4, #4]
 800e112:	3134      	adds	r1, #52	; 0x34
 800e114:	f7fe fd26 	bl	800cb64 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e118:	6863      	ldr	r3, [r4, #4]
 800e11a:	2214      	movs	r2, #20
 800e11c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e11e:	4908      	ldr	r1, [pc, #32]	; (800e140 <vTaskSwitchContext.part.5+0xa4>)
 800e120:	f004 ff98 	bl	8013054 <memcmp>
 800e124:	2800      	cmp	r0, #0
 800e126:	d0d6      	beq.n	800e0d6 <vTaskSwitchContext.part.5+0x3a>
 800e128:	6860      	ldr	r0, [r4, #4]
 800e12a:	6861      	ldr	r1, [r4, #4]
 800e12c:	3134      	adds	r1, #52	; 0x34
 800e12e:	f7fe fd19 	bl	800cb64 <vApplicationStackOverflowHook>
 800e132:	e7d0      	b.n	800e0d6 <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e134:	6852      	ldr	r2, [r2, #4]
 800e136:	6042      	str	r2, [r0, #4]
 800e138:	e7e6      	b.n	800e108 <vTaskSwitchContext.part.5+0x6c>
 800e13a:	46c0      	nop			; (mov r8, r8)
 800e13c:	200026e0 	.word	0x200026e0
 800e140:	08017e7c 	.word	0x08017e7c
 800e144:	2000277c 	.word	0x2000277c

0800e148 <xTaskGenericCreate>:
{
 800e148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e14a:	464f      	mov	r7, r9
 800e14c:	4646      	mov	r6, r8
 800e14e:	46d6      	mov	lr, sl
 800e150:	b5c0      	push	{r6, r7, lr}
 800e152:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e154:	4680      	mov	r8, r0
 800e156:	000c      	movs	r4, r1
 800e158:	0015      	movs	r5, r2
 800e15a:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e15c:	2f00      	cmp	r7, #0
 800e15e:	d100      	bne.n	800e162 <xTaskGenericCreate+0x1a>
 800e160:	e0ae      	b.n	800e2c0 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e162:	2060      	movs	r0, #96	; 0x60
 800e164:	f001 f814 	bl	800f190 <pvPortMalloc>
 800e168:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e16a:	d100      	bne.n	800e16e <xTaskGenericCreate+0x26>
 800e16c:	e0b1      	b.n	800e2d2 <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e16e:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e170:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e172:	002a      	movs	r2, r5
 800e174:	0038      	movs	r0, r7
 800e176:	21a5      	movs	r1, #165	; 0xa5
 800e178:	f004 ff84 	bl	8013084 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e17c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e17e:	1f2f      	subs	r7, r5, #4
 800e180:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e182:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e184:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e186:	439f      	bics	r7, r3
 800e188:	0030      	movs	r0, r6
 800e18a:	0033      	movs	r3, r6
 800e18c:	3041      	adds	r0, #65	; 0x41
 800e18e:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e190:	7822      	ldrb	r2, [r4, #0]
 800e192:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e194:	7822      	ldrb	r2, [r4, #0]
 800e196:	2a00      	cmp	r2, #0
 800e198:	d003      	beq.n	800e1a2 <xTaskGenericCreate+0x5a>
 800e19a:	3301      	adds	r3, #1
 800e19c:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e19e:	4298      	cmp	r0, r3
 800e1a0:	d1f6      	bne.n	800e190 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1a2:	2340      	movs	r3, #64	; 0x40
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	9d08      	ldr	r5, [sp, #32]
 800e1a8:	54f2      	strb	r2, [r6, r3]
 800e1aa:	2d06      	cmp	r5, #6
 800e1ac:	d84f      	bhi.n	800e24e <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e1ae:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e1b0:	1d33      	adds	r3, r6, #4
 800e1b2:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e1b4:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e1b6:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e1b8:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e1ba:	469a      	mov	sl, r3
 800e1bc:	f7ff fbc8 	bl	800d950 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e1c0:	0030      	movs	r0, r6
 800e1c2:	3018      	adds	r0, #24
 800e1c4:	f7ff fbc4 	bl	800d950 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1c8:	2307      	movs	r3, #7
 800e1ca:	1b5b      	subs	r3, r3, r5
 800e1cc:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e1ce:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e1d0:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e1d2:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e1d4:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e1d6:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1d8:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e1da:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1dc:	4641      	mov	r1, r8
 800e1de:	0038      	movs	r0, r7
 800e1e0:	f000 ff14 	bl	800f00c <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1e6:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d000      	beq.n	800e1ee <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1ec:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e1ee:	f000 ff55 	bl	800f09c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e1f2:	4c3b      	ldr	r4, [pc, #236]	; (800e2e0 <xTaskGenericCreate+0x198>)
 800e1f4:	69e3      	ldr	r3, [r4, #28]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d02f      	beq.n	800e260 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e200:	4d38      	ldr	r5, [pc, #224]	; (800e2e4 <xTaskGenericCreate+0x19c>)
 800e202:	686b      	ldr	r3, [r5, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d024      	beq.n	800e252 <xTaskGenericCreate+0x10a>
 800e208:	4f37      	ldr	r7, [pc, #220]	; (800e2e8 <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800e20a:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800e20c:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800e20e:	3301      	adds	r3, #1
 800e210:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e212:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e214:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e216:	4293      	cmp	r3, r2
 800e218:	d817      	bhi.n	800e24a <xTaskGenericCreate+0x102>
 800e21a:	0098      	lsls	r0, r3, #2
 800e21c:	18c0      	adds	r0, r0, r3
 800e21e:	0080      	lsls	r0, r0, #2
 800e220:	1838      	adds	r0, r7, r0
 800e222:	4651      	mov	r1, sl
 800e224:	f7ff fb98 	bl	800d958 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e228:	f000 ff44 	bl	800f0b4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e22c:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800e22e:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e234:	6863      	ldr	r3, [r4, #4]
 800e236:	9a08      	ldr	r2, [sp, #32]
 800e238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d317      	bcc.n	800e26e <xTaskGenericCreate+0x126>
}
 800e23e:	0028      	movs	r0, r5
 800e240:	bc1c      	pop	{r2, r3, r4}
 800e242:	4690      	mov	r8, r2
 800e244:	4699      	mov	r9, r3
 800e246:	46a2      	mov	sl, r4
 800e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e24a:	61a3      	str	r3, [r4, #24]
 800e24c:	e7e5      	b.n	800e21a <xTaskGenericCreate+0xd2>
 800e24e:	2506      	movs	r5, #6
 800e250:	e7ad      	b.n	800e1ae <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e252:	6863      	ldr	r3, [r4, #4]
 800e254:	9a08      	ldr	r2, [sp, #32]
 800e256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e258:	4293      	cmp	r3, r2
 800e25a:	d8d5      	bhi.n	800e208 <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800e25c:	6066      	str	r6, [r4, #4]
 800e25e:	e7d3      	b.n	800e208 <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800e260:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e262:	69e3      	ldr	r3, [r4, #28]
 800e264:	4f20      	ldr	r7, [pc, #128]	; (800e2e8 <xTaskGenericCreate+0x1a0>)
 800e266:	2b01      	cmp	r3, #1
 800e268:	d004      	beq.n	800e274 <xTaskGenericCreate+0x12c>
 800e26a:	4d1e      	ldr	r5, [pc, #120]	; (800e2e4 <xTaskGenericCreate+0x19c>)
 800e26c:	e7cd      	b.n	800e20a <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800e26e:	f000 ff09 	bl	800f084 <vPortYield>
 800e272:	e7e4      	b.n	800e23e <xTaskGenericCreate+0xf6>
 800e274:	238c      	movs	r3, #140	; 0x8c
 800e276:	4698      	mov	r8, r3
 800e278:	003d      	movs	r5, r7
 800e27a:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e27c:	0028      	movs	r0, r5
 800e27e:	3514      	adds	r5, #20
 800e280:	f7ff fb5a 	bl	800d938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e284:	4545      	cmp	r5, r8
 800e286:	d1f9      	bne.n	800e27c <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800e288:	2320      	movs	r3, #32
 800e28a:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e28c:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800e28e:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800e290:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800e292:	4640      	mov	r0, r8
 800e294:	f7ff fb50 	bl	800d938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e298:	0028      	movs	r0, r5
 800e29a:	f7ff fb4d 	bl	800d938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e29e:	0020      	movs	r0, r4
 800e2a0:	3048      	adds	r0, #72	; 0x48
 800e2a2:	f7ff fb49 	bl	800d938 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e2a6:	0020      	movs	r0, r4
 800e2a8:	305c      	adds	r0, #92	; 0x5c
 800e2aa:	f7ff fb45 	bl	800d938 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e2ae:	0020      	movs	r0, r4
 800e2b0:	3070      	adds	r0, #112	; 0x70
 800e2b2:	f7ff fb41 	bl	800d938 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2b6:	4643      	mov	r3, r8
 800e2b8:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2ba:	60e5      	str	r5, [r4, #12]
 800e2bc:	4d09      	ldr	r5, [pc, #36]	; (800e2e4 <xTaskGenericCreate+0x19c>)
 800e2be:	e7a4      	b.n	800e20a <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c0:	0090      	lsls	r0, r2, #2
 800e2c2:	f000 ff65 	bl	800f190 <pvPortMalloc>
 800e2c6:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e2c8:	d000      	beq.n	800e2cc <xTaskGenericCreate+0x184>
 800e2ca:	e74a      	b.n	800e162 <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2cc:	2501      	movs	r5, #1
 800e2ce:	426d      	negs	r5, r5
 800e2d0:	e7b5      	b.n	800e23e <xTaskGenericCreate+0xf6>
 800e2d2:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e2d4:	0038      	movs	r0, r7
 800e2d6:	f000 ffd1 	bl	800f27c <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2da:	426d      	negs	r5, r5
 800e2dc:	e7af      	b.n	800e23e <xTaskGenericCreate+0xf6>
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	200026e0 	.word	0x200026e0
 800e2e4:	20002760 	.word	0x20002760
 800e2e8:	2000277c 	.word	0x2000277c

0800e2ec <uxTaskPriorityGet>:
	{
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e2f0:	f000 fed4 	bl	800f09c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e2f4:	2c00      	cmp	r4, #0
 800e2f6:	d101      	bne.n	800e2fc <uxTaskPriorityGet+0x10>
 800e2f8:	4b03      	ldr	r3, [pc, #12]	; (800e308 <uxTaskPriorityGet+0x1c>)
 800e2fa:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e2fc:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e2fe:	f000 fed9 	bl	800f0b4 <vPortExitCritical>
	}
 800e302:	0020      	movs	r0, r4
 800e304:	bd10      	pop	{r4, pc}
 800e306:	46c0      	nop			; (mov r8, r8)
 800e308:	200026e0 	.word	0x200026e0

0800e30c <vTaskPrioritySet>:
	{
 800e30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30e:	46c6      	mov	lr, r8
 800e310:	0004      	movs	r4, r0
 800e312:	b500      	push	{lr}
 800e314:	000d      	movs	r5, r1
 800e316:	2906      	cmp	r1, #6
 800e318:	d900      	bls.n	800e31c <vTaskPrioritySet+0x10>
 800e31a:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800e31c:	f000 febe 	bl	800f09c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e320:	2c00      	cmp	r4, #0
 800e322:	d02b      	beq.n	800e37c <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e324:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e326:	42aa      	cmp	r2, r5
 800e328:	d01a      	beq.n	800e360 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800e32a:	4f21      	ldr	r7, [pc, #132]	; (800e3b0 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e32c:	d31d      	bcc.n	800e36a <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800e32e:	687e      	ldr	r6, [r7, #4]
 800e330:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e332:	4273      	negs	r3, r6
 800e334:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e336:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e338:	428a      	cmp	r2, r1
 800e33a:	d100      	bne.n	800e33e <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800e33c:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e33e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e340:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e342:	2b00      	cmp	r3, #0
 800e344:	db02      	blt.n	800e34c <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e346:	2307      	movs	r3, #7
 800e348:	1b5d      	subs	r5, r3, r5
 800e34a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e34c:	008b      	lsls	r3, r1, #2
 800e34e:	185b      	adds	r3, r3, r1
 800e350:	4d18      	ldr	r5, [pc, #96]	; (800e3b4 <vTaskPrioritySet+0xa8>)
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	6962      	ldr	r2, [r4, #20]
 800e356:	18eb      	adds	r3, r5, r3
 800e358:	429a      	cmp	r2, r3
 800e35a:	d015      	beq.n	800e388 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800e35c:	2e01      	cmp	r6, #1
 800e35e:	d010      	beq.n	800e382 <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800e360:	f000 fea8 	bl	800f0b4 <vPortExitCritical>
	}
 800e364:	bc04      	pop	{r2}
 800e366:	4690      	mov	r8, r2
 800e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	42a3      	cmp	r3, r4
 800e36e:	d01d      	beq.n	800e3ac <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e370:	2600      	movs	r6, #0
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e376:	429d      	cmp	r5, r3
 800e378:	4176      	adcs	r6, r6
 800e37a:	e7dc      	b.n	800e336 <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e37c:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <vTaskPrioritySet+0xa4>)
 800e37e:	685c      	ldr	r4, [r3, #4]
 800e380:	e7d0      	b.n	800e324 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800e382:	f000 fe7f 	bl	800f084 <vPortYield>
 800e386:	e7eb      	b.n	800e360 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e388:	1d23      	adds	r3, r4, #4
 800e38a:	0018      	movs	r0, r3
 800e38c:	4698      	mov	r8, r3
 800e38e:	f7ff fb07 	bl	800d9a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	4293      	cmp	r3, r2
 800e398:	d900      	bls.n	800e39c <vTaskPrioritySet+0x90>
 800e39a:	61bb      	str	r3, [r7, #24]
 800e39c:	0098      	lsls	r0, r3, #2
 800e39e:	18c0      	adds	r0, r0, r3
 800e3a0:	0080      	lsls	r0, r0, #2
 800e3a2:	1828      	adds	r0, r5, r0
 800e3a4:	4641      	mov	r1, r8
 800e3a6:	f7ff fad7 	bl	800d958 <vListInsertEnd>
 800e3aa:	e7d7      	b.n	800e35c <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800e3ac:	2600      	movs	r6, #0
 800e3ae:	e7c2      	b.n	800e336 <vTaskPrioritySet+0x2a>
 800e3b0:	200026e0 	.word	0x200026e0
 800e3b4:	2000277c 	.word	0x2000277c

0800e3b8 <vTaskStartScheduler>:
{
 800e3b8:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e3ba:	2400      	movs	r4, #0
{
 800e3bc:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e3be:	9403      	str	r4, [sp, #12]
 800e3c0:	9402      	str	r4, [sp, #8]
 800e3c2:	9401      	str	r4, [sp, #4]
 800e3c4:	9400      	str	r4, [sp, #0]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2296      	movs	r2, #150	; 0x96
 800e3ca:	490b      	ldr	r1, [pc, #44]	; (800e3f8 <vTaskStartScheduler+0x40>)
 800e3cc:	480b      	ldr	r0, [pc, #44]	; (800e3fc <vTaskStartScheduler+0x44>)
 800e3ce:	f7ff febb 	bl	800e148 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e3d2:	2801      	cmp	r0, #1
 800e3d4:	d001      	beq.n	800e3da <vTaskStartScheduler+0x22>
}
 800e3d6:	b004      	add	sp, #16
 800e3d8:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800e3da:	f000 fc83 	bl	800ece4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e3de:	2801      	cmp	r0, #1
 800e3e0:	d1f9      	bne.n	800e3d6 <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800e3e2:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e3e4:	4b06      	ldr	r3, [pc, #24]	; (800e400 <vTaskStartScheduler+0x48>)
 800e3e6:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800e3e8:	4b06      	ldr	r3, [pc, #24]	; (800e404 <vTaskStartScheduler+0x4c>)
 800e3ea:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e3ec:	f7f9 fc18 	bl	8007c20 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e3f0:	f000 fe1e 	bl	800f030 <xPortStartScheduler>
}
 800e3f4:	e7ef      	b.n	800e3d6 <vTaskStartScheduler+0x1e>
 800e3f6:	46c0      	nop			; (mov r8, r8)
 800e3f8:	0801aaa8 	.word	0x0801aaa8
 800e3fc:	0800e639 	.word	0x0800e639
 800e400:	20002760 	.word	0x20002760
 800e404:	200026e0 	.word	0x200026e0

0800e408 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e408:	4a02      	ldr	r2, [pc, #8]	; (800e414 <vTaskSuspendAll+0xc>)
 800e40a:	6913      	ldr	r3, [r2, #16]
 800e40c:	3301      	adds	r3, #1
 800e40e:	6113      	str	r3, [r2, #16]
}
 800e410:	4770      	bx	lr
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	20002760 	.word	0x20002760

0800e418 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e418:	4b01      	ldr	r3, [pc, #4]	; (800e420 <xTaskGetTickCount+0x8>)
 800e41a:	6898      	ldr	r0, [r3, #8]
}
 800e41c:	4770      	bx	lr
 800e41e:	46c0      	nop			; (mov r8, r8)
 800e420:	200026e0 	.word	0x200026e0

0800e424 <xTaskGetTickCountFromISR>:
 800e424:	4b01      	ldr	r3, [pc, #4]	; (800e42c <xTaskGetTickCountFromISR+0x8>)
 800e426:	6898      	ldr	r0, [r3, #8]
 800e428:	4770      	bx	lr
 800e42a:	46c0      	nop			; (mov r8, r8)
 800e42c:	200026e0 	.word	0x200026e0

0800e430 <xTaskIncrementTick>:
{
 800e430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e432:	46d6      	mov	lr, sl
 800e434:	464f      	mov	r7, r9
 800e436:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e438:	4b3e      	ldr	r3, [pc, #248]	; (800e534 <xTaskIncrementTick+0x104>)
{
 800e43a:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43c:	691a      	ldr	r2, [r3, #16]
 800e43e:	2a00      	cmp	r2, #0
 800e440:	d11b      	bne.n	800e47a <xTaskIncrementTick+0x4a>
		++xTickCount;
 800e442:	4c3d      	ldr	r4, [pc, #244]	; (800e538 <xTaskIncrementTick+0x108>)
 800e444:	68a2      	ldr	r2, [r4, #8]
 800e446:	3201      	adds	r2, #1
 800e448:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e44a:	68a2      	ldr	r2, [r4, #8]
 800e44c:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800e44e:	2a00      	cmp	r2, #0
 800e450:	d022      	beq.n	800e498 <xTaskIncrementTick+0x68>
 800e452:	4b3a      	ldr	r3, [pc, #232]	; (800e53c <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e454:	2700      	movs	r7, #0
 800e456:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e458:	4653      	mov	r3, sl
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4543      	cmp	r3, r8
 800e45e:	d931      	bls.n	800e4c4 <xTaskIncrementTick+0x94>
 800e460:	4b37      	ldr	r3, [pc, #220]	; (800e540 <xTaskIncrementTick+0x110>)
 800e462:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e464:	6863      	ldr	r3, [r4, #4]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	0093      	lsls	r3, r2, #2
 800e46a:	189b      	adds	r3, r3, r2
 800e46c:	464a      	mov	r2, r9
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	58d3      	ldr	r3, [r2, r3]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d906      	bls.n	800e484 <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800e476:	2701      	movs	r7, #1
 800e478:	e004      	b.n	800e484 <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800e47a:	2700      	movs	r7, #0
		++uxPendedTicks;
 800e47c:	699a      	ldr	r2, [r3, #24]
 800e47e:	4c2e      	ldr	r4, [pc, #184]	; (800e538 <xTaskIncrementTick+0x108>)
 800e480:	3201      	adds	r2, #1
 800e482:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800e484:	6923      	ldr	r3, [r4, #16]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d000      	beq.n	800e48c <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800e48a:	2701      	movs	r7, #1
}
 800e48c:	0038      	movs	r0, r7
 800e48e:	bc1c      	pop	{r2, r3, r4}
 800e490:	4690      	mov	r8, r2
 800e492:	4699      	mov	r9, r3
 800e494:	46a2      	mov	sl, r4
 800e496:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e498:	6822      	ldr	r2, [r4, #0]
 800e49a:	68e1      	ldr	r1, [r4, #12]
 800e49c:	6021      	str	r1, [r4, #0]
 800e49e:	60e2      	str	r2, [r4, #12]
 800e4a0:	695a      	ldr	r2, [r3, #20]
 800e4a2:	3201      	adds	r2, #1
 800e4a4:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d13b      	bne.n	800e526 <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4ae:	4b23      	ldr	r3, [pc, #140]	; (800e53c <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e4b0:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4b2:	469a      	mov	sl, r3
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	4652      	mov	r2, sl
 800e4b8:	425b      	negs	r3, r3
 800e4ba:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e4bc:	4653      	mov	r3, sl
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4543      	cmp	r3, r8
 800e4c2:	d8cd      	bhi.n	800e460 <xTaskIncrementTick+0x30>
 800e4c4:	4b1e      	ldr	r3, [pc, #120]	; (800e540 <xTaskIncrementTick+0x110>)
 800e4c6:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d026      	beq.n	800e51e <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e4d6:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800e4d8:	4598      	cmp	r8, r3
 800e4da:	d327      	bcc.n	800e52c <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e4dc:	1d2e      	adds	r6, r5, #4
 800e4de:	0030      	movs	r0, r6
 800e4e0:	f7ff fa5e 	bl	800d9a0 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4ea:	0028      	movs	r0, r5
 800e4ec:	3018      	adds	r0, #24
 800e4ee:	f7ff fa57 	bl	800d9a0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e4f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e4f4:	69a2      	ldr	r2, [r4, #24]
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d900      	bls.n	800e4fc <xTaskIncrementTick+0xcc>
 800e4fa:	61a3      	str	r3, [r4, #24]
 800e4fc:	0098      	lsls	r0, r3, #2
 800e4fe:	18c0      	adds	r0, r0, r3
 800e500:	0080      	lsls	r0, r0, #2
 800e502:	4448      	add	r0, r9
 800e504:	0031      	movs	r1, r6
 800e506:	f7ff fa27 	bl	800d958 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e50a:	6863      	ldr	r3, [r4, #4]
 800e50c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	429a      	cmp	r2, r3
 800e512:	d3d9      	bcc.n	800e4c8 <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e514:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e516:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1d8      	bne.n	800e4d0 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e51e:	4652      	mov	r2, sl
 800e520:	3b01      	subs	r3, #1
 800e522:	6013      	str	r3, [r2, #0]
						break;
 800e524:	e79e      	b.n	800e464 <xTaskIncrementTick+0x34>
 800e526:	f7ff fd8f 	bl	800e048 <prvResetNextTaskUnblockTime.part.2>
 800e52a:	e792      	b.n	800e452 <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800e52c:	4652      	mov	r2, sl
 800e52e:	6013      	str	r3, [r2, #0]
							break;
 800e530:	e798      	b.n	800e464 <xTaskIncrementTick+0x34>
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	20002760 	.word	0x20002760
 800e538:	200026e0 	.word	0x200026e0
 800e53c:	200000c8 	.word	0x200000c8
 800e540:	2000277c 	.word	0x2000277c

0800e544 <xTaskResumeAll>:
{
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	46ce      	mov	lr, r9
 800e548:	4647      	mov	r7, r8
 800e54a:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800e54c:	f000 fda6 	bl	800f09c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e550:	4f28      	ldr	r7, [pc, #160]	; (800e5f4 <xTaskResumeAll+0xb0>)
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	3b01      	subs	r3, #1
 800e556:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d13b      	bne.n	800e5d6 <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e55e:	4c26      	ldr	r4, [pc, #152]	; (800e5f8 <xTaskResumeAll+0xb4>)
 800e560:	69e3      	ldr	r3, [r4, #28]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d037      	beq.n	800e5d6 <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800e566:	4b25      	ldr	r3, [pc, #148]	; (800e5fc <xTaskResumeAll+0xb8>)
 800e568:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800e56a:	2301      	movs	r3, #1
 800e56c:	4699      	mov	r9, r3
 800e56e:	e01a      	b.n	800e5a6 <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e570:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e572:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e574:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e576:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e578:	3018      	adds	r0, #24
 800e57a:	f7ff fa11 	bl	800d9a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e57e:	0030      	movs	r0, r6
 800e580:	f7ff fa0e 	bl	800d9a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e584:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e586:	69a2      	ldr	r2, [r4, #24]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d900      	bls.n	800e58e <xTaskResumeAll+0x4a>
 800e58c:	61a3      	str	r3, [r4, #24]
 800e58e:	0098      	lsls	r0, r3, #2
 800e590:	18c0      	adds	r0, r0, r3
 800e592:	0080      	lsls	r0, r0, #2
 800e594:	4440      	add	r0, r8
 800e596:	0031      	movs	r1, r6
 800e598:	f7ff f9de 	bl	800d958 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e59c:	6863      	ldr	r3, [r4, #4]
 800e59e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d21f      	bcs.n	800e5e6 <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e1      	bne.n	800e570 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00e      	beq.n	800e5d0 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800e5b8:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800e5ba:	f7ff ff39 	bl	800e430 <xTaskIncrementTick>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d000      	beq.n	800e5c4 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800e5c2:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1f4      	bne.n	800e5ba <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800e5d0:	6923      	ldr	r3, [r4, #16]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d00a      	beq.n	800e5ec <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800e5d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e5d8:	f000 fd6c 	bl	800f0b4 <vPortExitCritical>
}
 800e5dc:	0020      	movs	r0, r4
 800e5de:	bc0c      	pop	{r2, r3}
 800e5e0:	4690      	mov	r8, r2
 800e5e2:	4699      	mov	r9, r3
 800e5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e5e6:	464b      	mov	r3, r9
 800e5e8:	6123      	str	r3, [r4, #16]
 800e5ea:	e7dc      	b.n	800e5a6 <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800e5ec:	f000 fd4a 	bl	800f084 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e5f0:	2401      	movs	r4, #1
 800e5f2:	e7f1      	b.n	800e5d8 <xTaskResumeAll+0x94>
 800e5f4:	20002760 	.word	0x20002760
 800e5f8:	200026e0 	.word	0x200026e0
 800e5fc:	2000277c 	.word	0x2000277c

0800e600 <vTaskDelay>:
	{
 800e600:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e602:	2800      	cmp	r0, #0
 800e604:	d011      	beq.n	800e62a <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800e606:	4a0a      	ldr	r2, [pc, #40]	; (800e630 <vTaskDelay+0x30>)
 800e608:	6913      	ldr	r3, [r2, #16]
 800e60a:	3301      	adds	r3, #1
 800e60c:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e60e:	4b09      	ldr	r3, [pc, #36]	; (800e634 <vTaskDelay+0x34>)
 800e610:	689c      	ldr	r4, [r3, #8]
 800e612:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e614:	6858      	ldr	r0, [r3, #4]
 800e616:	3004      	adds	r0, #4
 800e618:	f7ff f9c2 	bl	800d9a0 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e61c:	0020      	movs	r0, r4
 800e61e:	f7ff fd1f 	bl	800e060 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e622:	f7ff ff8f 	bl	800e544 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e626:	2800      	cmp	r0, #0
 800e628:	d101      	bne.n	800e62e <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800e62a:	f000 fd2b 	bl	800f084 <vPortYield>
	}
 800e62e:	bd10      	pop	{r4, pc}
 800e630:	20002760 	.word	0x20002760
 800e634:	200026e0 	.word	0x200026e0

0800e638 <prvIdleTask>:
{
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	4e15      	ldr	r6, [pc, #84]	; (800e690 <prvIdleTask+0x58>)
 800e63c:	4c15      	ldr	r4, [pc, #84]	; (800e694 <prvIdleTask+0x5c>)
 800e63e:	4f16      	ldr	r7, [pc, #88]	; (800e698 <prvIdleTask+0x60>)
 800e640:	e007      	b.n	800e652 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e642:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e644:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800e646:	3301      	adds	r3, #1
 800e648:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e64a:	f7ff ff7b 	bl	800e544 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e64e:	2d00      	cmp	r5, #0
 800e650:	d108      	bne.n	800e664 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e652:	68e3      	ldr	r3, [r4, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1f4      	bne.n	800e642 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d9f9      	bls.n	800e652 <prvIdleTask+0x1a>
				taskYIELD();
 800e65e:	f000 fd11 	bl	800f084 <vPortYield>
 800e662:	e7f6      	b.n	800e652 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e664:	f000 fd1a 	bl	800f09c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e668:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800e66a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e66c:	1d28      	adds	r0, r5, #4
 800e66e:	f7ff f997 	bl	800d9a0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e672:	69f3      	ldr	r3, [r6, #28]
 800e674:	3b01      	subs	r3, #1
 800e676:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800e678:	68e3      	ldr	r3, [r4, #12]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e67e:	f000 fd19 	bl	800f0b4 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e682:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e684:	f000 fdfa 	bl	800f27c <vPortFree>
		vPortFree( pxTCB );
 800e688:	0028      	movs	r0, r5
 800e68a:	f000 fdf7 	bl	800f27c <vPortFree>
 800e68e:	e7e0      	b.n	800e652 <prvIdleTask+0x1a>
 800e690:	200026e0 	.word	0x200026e0
 800e694:	20002760 	.word	0x20002760
 800e698:	2000277c 	.word	0x2000277c

0800e69c <uxTaskGetSystemState>:
	{
 800e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69e:	4647      	mov	r7, r8
 800e6a0:	46ce      	mov	lr, r9
 800e6a2:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e6a4:	4a33      	ldr	r2, [pc, #204]	; (800e774 <uxTaskGetSystemState+0xd8>)
	{
 800e6a6:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e6a8:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e6aa:	4f33      	ldr	r7, [pc, #204]	; (800e778 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e6b0:	69fb      	ldr	r3, [r7, #28]
	{
 800e6b2:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e6b4:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e6b6:	428b      	cmp	r3, r1
 800e6b8:	d82c      	bhi.n	800e714 <uxTaskGetSystemState+0x78>
 800e6ba:	238c      	movs	r3, #140	; 0x8c
 800e6bc:	425b      	negs	r3, r3
 800e6be:	4699      	mov	r9, r3
 800e6c0:	4c2e      	ldr	r4, [pc, #184]	; (800e77c <uxTaskGetSystemState+0xe0>)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	44a1      	add	r9, r4
 800e6c6:	e002      	b.n	800e6ce <uxTaskGetSystemState+0x32>
 800e6c8:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ca:	454c      	cmp	r4, r9
 800e6cc:	d00d      	beq.n	800e6ea <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e6ce:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e6d0:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	d0f8      	beq.n	800e6c8 <uxTaskGetSystemState+0x2c>
 800e6d6:	0021      	movs	r1, r4
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f7ff fc61 	bl	800dfa0 <prvListTaskWithinSingleList.part.1>
 800e6de:	182d      	adds	r5, r5, r0
 800e6e0:	016b      	lsls	r3, r5, #5
 800e6e2:	3c14      	subs	r4, #20
 800e6e4:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e6:	454c      	cmp	r4, r9
 800e6e8:	d1f1      	bne.n	800e6ce <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e6ea:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e6ec:	680b      	ldr	r3, [r1, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d121      	bne.n	800e736 <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e6f2:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e6f4:	680b      	ldr	r3, [r1, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d127      	bne.n	800e74a <uxTaskGetSystemState+0xae>
 800e6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d12d      	bne.n	800e75c <uxTaskGetSystemState+0xc0>
 800e700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10d      	bne.n	800e722 <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e706:	4643      	mov	r3, r8
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e70c:	f7f9 fa98 	bl	8007c40 <ulMainGetRunTimeCounterValue>
 800e710:	4643      	mov	r3, r8
 800e712:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e714:	f7ff ff16 	bl	800e544 <xTaskResumeAll>
	}
 800e718:	0028      	movs	r0, r5
 800e71a:	bc0c      	pop	{r2, r3}
 800e71c:	4690      	mov	r8, r2
 800e71e:	4699      	mov	r9, r3
 800e720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e722:	0039      	movs	r1, r7
 800e724:	2203      	movs	r2, #3
 800e726:	3170      	adds	r1, #112	; 0x70
 800e728:	f7ff fc3a 	bl	800dfa0 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e72c:	4643      	mov	r3, r8
 800e72e:	182d      	adds	r5, r5, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1eb      	bne.n	800e70c <uxTaskGetSystemState+0x70>
 800e734:	e7ee      	b.n	800e714 <uxTaskGetSystemState+0x78>
 800e736:	2202      	movs	r2, #2
 800e738:	f7ff fc32 	bl	800dfa0 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e73c:	68f9      	ldr	r1, [r7, #12]
 800e73e:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e740:	680b      	ldr	r3, [r1, #0]
 800e742:	0168      	lsls	r0, r5, #5
 800e744:	1830      	adds	r0, r6, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0d7      	beq.n	800e6fa <uxTaskGetSystemState+0x5e>
 800e74a:	2202      	movs	r2, #2
 800e74c:	f7ff fc28 	bl	800dfa0 <prvListTaskWithinSingleList.part.1>
 800e750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e752:	182d      	adds	r5, r5, r0
 800e754:	0168      	lsls	r0, r5, #5
 800e756:	1830      	adds	r0, r6, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d0d1      	beq.n	800e700 <uxTaskGetSystemState+0x64>
 800e75c:	0039      	movs	r1, r7
 800e75e:	2204      	movs	r2, #4
 800e760:	315c      	adds	r1, #92	; 0x5c
 800e762:	f7ff fc1d 	bl	800dfa0 <prvListTaskWithinSingleList.part.1>
 800e766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e768:	182d      	adds	r5, r5, r0
 800e76a:	0168      	lsls	r0, r5, #5
 800e76c:	1830      	adds	r0, r6, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d0c9      	beq.n	800e706 <uxTaskGetSystemState+0x6a>
 800e772:	e7d6      	b.n	800e722 <uxTaskGetSystemState+0x86>
 800e774:	20002760 	.word	0x20002760
 800e778:	200026e0 	.word	0x200026e0
 800e77c:	200027f4 	.word	0x200027f4

0800e780 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <vTaskSwitchContext+0x18>)
{
 800e782:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e78a:	2201      	movs	r2, #1
 800e78c:	4b03      	ldr	r3, [pc, #12]	; (800e79c <vTaskSwitchContext+0x1c>)
 800e78e:	611a      	str	r2, [r3, #16]
}
 800e790:	bd10      	pop	{r4, pc}
 800e792:	f7ff fc83 	bl	800e09c <vTaskSwitchContext.part.5>
 800e796:	e7fb      	b.n	800e790 <vTaskSwitchContext+0x10>
 800e798:	20002760 	.word	0x20002760
 800e79c:	200026e0 	.word	0x200026e0

0800e7a0 <vTaskPlaceOnEventList>:
{
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7a4:	4c0b      	ldr	r4, [pc, #44]	; (800e7d4 <vTaskPlaceOnEventList+0x34>)
 800e7a6:	6861      	ldr	r1, [r4, #4]
 800e7a8:	3118      	adds	r1, #24
 800e7aa:	f7ff f8e1 	bl	800d970 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e7ae:	6860      	ldr	r0, [r4, #4]
 800e7b0:	3004      	adds	r0, #4
 800e7b2:	f7ff f8f5 	bl	800d9a0 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e7b6:	1c6b      	adds	r3, r5, #1
 800e7b8:	d004      	beq.n	800e7c4 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e7ba:	68a0      	ldr	r0, [r4, #8]
 800e7bc:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e7be:	f7ff fc4f 	bl	800e060 <prvAddCurrentTaskToDelayedList>
}
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e7c4:	0020      	movs	r0, r4
 800e7c6:	6861      	ldr	r1, [r4, #4]
 800e7c8:	3070      	adds	r0, #112	; 0x70
 800e7ca:	3104      	adds	r1, #4
 800e7cc:	f7ff f8c4 	bl	800d958 <vListInsertEnd>
 800e7d0:	e7f7      	b.n	800e7c2 <vTaskPlaceOnEventList+0x22>
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	200026e0 	.word	0x200026e0

0800e7d8 <vTaskPlaceOnEventListRestricted>:
	{
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7dc:	4c06      	ldr	r4, [pc, #24]	; (800e7f8 <vTaskPlaceOnEventListRestricted+0x20>)
 800e7de:	6861      	ldr	r1, [r4, #4]
 800e7e0:	3118      	adds	r1, #24
 800e7e2:	f7ff f8b9 	bl	800d958 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e7e6:	6860      	ldr	r0, [r4, #4]
 800e7e8:	3004      	adds	r0, #4
 800e7ea:	f7ff f8d9 	bl	800d9a0 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e7ee:	68a0      	ldr	r0, [r4, #8]
 800e7f0:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e7f2:	f7ff fc35 	bl	800e060 <prvAddCurrentTaskToDelayedList>
	}
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}
 800e7f8:	200026e0 	.word	0x200026e0

0800e7fc <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e7fc:	68c3      	ldr	r3, [r0, #12]
{
 800e7fe:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e800:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e802:	0026      	movs	r6, r4
 800e804:	3618      	adds	r6, #24
 800e806:	0030      	movs	r0, r6
 800e808:	f7ff f8ca 	bl	800d9a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e80c:	4b13      	ldr	r3, [pc, #76]	; (800e85c <xTaskRemoveFromEventList+0x60>)
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d11a      	bne.n	800e84a <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e814:	1d26      	adds	r6, r4, #4
 800e816:	0030      	movs	r0, r6
 800e818:	f7ff f8c2 	bl	800d9a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e81c:	4d10      	ldr	r5, [pc, #64]	; (800e860 <xTaskRemoveFromEventList+0x64>)
 800e81e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e820:	69aa      	ldr	r2, [r5, #24]
 800e822:	4293      	cmp	r3, r2
 800e824:	d818      	bhi.n	800e858 <xTaskRemoveFromEventList+0x5c>
 800e826:	0098      	lsls	r0, r3, #2
 800e828:	18c0      	adds	r0, r0, r3
 800e82a:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <xTaskRemoveFromEventList+0x68>)
 800e82c:	0080      	lsls	r0, r0, #2
 800e82e:	18c0      	adds	r0, r0, r3
 800e830:	0031      	movs	r1, r6
 800e832:	f7ff f891 	bl	800d958 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e836:	686b      	ldr	r3, [r5, #4]
 800e838:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e83c:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e83e:	429a      	cmp	r2, r3
 800e840:	d902      	bls.n	800e848 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800e842:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e844:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e846:	612b      	str	r3, [r5, #16]
}
 800e848:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e84a:	4d05      	ldr	r5, [pc, #20]	; (800e860 <xTaskRemoveFromEventList+0x64>)
 800e84c:	0031      	movs	r1, r6
 800e84e:	0028      	movs	r0, r5
 800e850:	3048      	adds	r0, #72	; 0x48
 800e852:	f7ff f881 	bl	800d958 <vListInsertEnd>
 800e856:	e7ee      	b.n	800e836 <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e858:	61ab      	str	r3, [r5, #24]
 800e85a:	e7e4      	b.n	800e826 <xTaskRemoveFromEventList+0x2a>
 800e85c:	20002760 	.word	0x20002760
 800e860:	200026e0 	.word	0x200026e0
 800e864:	2000277c 	.word	0x2000277c

0800e868 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e868:	4b03      	ldr	r3, [pc, #12]	; (800e878 <vTaskSetTimeOutState+0x10>)
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e86e:	4b03      	ldr	r3, [pc, #12]	; (800e87c <vTaskSetTimeOutState+0x14>)
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	6043      	str	r3, [r0, #4]
}
 800e874:	4770      	bx	lr
 800e876:	46c0      	nop			; (mov r8, r8)
 800e878:	20002760 	.word	0x20002760
 800e87c:	200026e0 	.word	0x200026e0

0800e880 <xTaskCheckForTimeOut>:
{
 800e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e882:	000e      	movs	r6, r1
 800e884:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e886:	f000 fc09 	bl	800f09c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e88a:	4911      	ldr	r1, [pc, #68]	; (800e8d0 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800e88c:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800e88e:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800e890:	1c53      	adds	r3, r2, #1
 800e892:	d01a      	beq.n	800e8ca <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e894:	4b0f      	ldr	r3, [pc, #60]	; (800e8d4 <xTaskCheckForTimeOut+0x54>)
 800e896:	6827      	ldr	r7, [r4, #0]
 800e898:	695d      	ldr	r5, [r3, #20]
 800e89a:	469c      	mov	ip, r3
 800e89c:	6863      	ldr	r3, [r4, #4]
 800e89e:	42af      	cmp	r7, r5
 800e8a0:	d002      	beq.n	800e8a8 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800e8a2:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8a4:	4298      	cmp	r0, r3
 800e8a6:	d20c      	bcs.n	800e8c2 <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e8a8:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800e8aa:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e8ac:	42ba      	cmp	r2, r7
 800e8ae:	d908      	bls.n	800e8c2 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e8b0:	1a1b      	subs	r3, r3, r0
 800e8b2:	189b      	adds	r3, r3, r2
 800e8b4:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8b6:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800e8b8:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8ba:	695b      	ldr	r3, [r3, #20]
 800e8bc:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8be:	688b      	ldr	r3, [r1, #8]
 800e8c0:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800e8c2:	f000 fbf7 	bl	800f0b4 <vPortExitCritical>
}
 800e8c6:	0028      	movs	r0, r5
 800e8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e8ca:	2500      	movs	r5, #0
 800e8cc:	e7f9      	b.n	800e8c2 <xTaskCheckForTimeOut+0x42>
 800e8ce:	46c0      	nop			; (mov r8, r8)
 800e8d0:	200026e0 	.word	0x200026e0
 800e8d4:	20002760 	.word	0x20002760

0800e8d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e8d8:	2201      	movs	r2, #1
 800e8da:	4b01      	ldr	r3, [pc, #4]	; (800e8e0 <vTaskMissedYield+0x8>)
 800e8dc:	611a      	str	r2, [r3, #16]
}
 800e8de:	4770      	bx	lr
 800e8e0:	200026e0 	.word	0x200026e0

0800e8e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e8e4:	4b04      	ldr	r3, [pc, #16]	; (800e8f8 <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8e6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	2a00      	cmp	r2, #0
 800e8ec:	d003      	beq.n	800e8f6 <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ee:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8f0:	4243      	negs	r3, r0
 800e8f2:	4158      	adcs	r0, r3
 800e8f4:	0040      	lsls	r0, r0, #1
	}
 800e8f6:	4770      	bx	lr
 800e8f8:	20002760 	.word	0x20002760

0800e8fc <vTaskPriorityInherit>:
	{
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e900:	d018      	beq.n	800e934 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e902:	4d16      	ldr	r5, [pc, #88]	; (800e95c <vTaskPriorityInherit+0x60>)
 800e904:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e906:	686b      	ldr	r3, [r5, #4]
 800e908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d212      	bcs.n	800e934 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e90e:	6983      	ldr	r3, [r0, #24]
 800e910:	2b00      	cmp	r3, #0
 800e912:	db04      	blt.n	800e91e <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e914:	686b      	ldr	r3, [r5, #4]
 800e916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e918:	2307      	movs	r3, #7
 800e91a:	1a5b      	subs	r3, r3, r1
 800e91c:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e91e:	0093      	lsls	r3, r2, #2
 800e920:	189b      	adds	r3, r3, r2
 800e922:	4e0f      	ldr	r6, [pc, #60]	; (800e960 <vTaskPriorityInherit+0x64>)
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	6962      	ldr	r2, [r4, #20]
 800e928:	18f3      	adds	r3, r6, r3
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d003      	beq.n	800e936 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e92e:	686b      	ldr	r3, [r5, #4]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e936:	1d27      	adds	r7, r4, #4
 800e938:	0038      	movs	r0, r7
 800e93a:	f7ff f831 	bl	800d9a0 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e93e:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800e940:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e944:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e946:	4293      	cmp	r3, r2
 800e948:	d900      	bls.n	800e94c <vTaskPriorityInherit+0x50>
 800e94a:	61ab      	str	r3, [r5, #24]
 800e94c:	0098      	lsls	r0, r3, #2
 800e94e:	18c0      	adds	r0, r0, r3
 800e950:	0080      	lsls	r0, r0, #2
 800e952:	1830      	adds	r0, r6, r0
 800e954:	0039      	movs	r1, r7
 800e956:	f7fe ffff 	bl	800d958 <vListInsertEnd>
	}
 800e95a:	e7eb      	b.n	800e934 <vTaskPriorityInherit+0x38>
 800e95c:	200026e0 	.word	0x200026e0
 800e960:	2000277c 	.word	0x2000277c

0800e964 <xTaskPriorityDisinherit>:
	{
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e968:	d008      	beq.n	800e97c <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800e96a:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e96c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e96e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e970:	3b01      	subs	r3, #1
 800e972:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e974:	428a      	cmp	r2, r1
 800e976:	d001      	beq.n	800e97c <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d001      	beq.n	800e980 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e97c:	2000      	movs	r0, #0
	}
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e980:	1d05      	adds	r5, r0, #4
 800e982:	0028      	movs	r0, r5
 800e984:	f7ff f80c 	bl	800d9a0 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e988:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e98a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e98c:	1ad2      	subs	r2, r2, r3
 800e98e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e990:	4a07      	ldr	r2, [pc, #28]	; (800e9b0 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e992:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e994:	6991      	ldr	r1, [r2, #24]
 800e996:	428b      	cmp	r3, r1
 800e998:	d900      	bls.n	800e99c <xTaskPriorityDisinherit+0x38>
 800e99a:	6193      	str	r3, [r2, #24]
 800e99c:	0098      	lsls	r0, r3, #2
 800e99e:	18c0      	adds	r0, r0, r3
 800e9a0:	4b04      	ldr	r3, [pc, #16]	; (800e9b4 <xTaskPriorityDisinherit+0x50>)
 800e9a2:	0080      	lsls	r0, r0, #2
 800e9a4:	18c0      	adds	r0, r0, r3
 800e9a6:	0029      	movs	r1, r5
 800e9a8:	f7fe ffd6 	bl	800d958 <vListInsertEnd>
					xReturn = pdTRUE;
 800e9ac:	2001      	movs	r0, #1
		return xReturn;
 800e9ae:	e7e6      	b.n	800e97e <xTaskPriorityDisinherit+0x1a>
 800e9b0:	200026e0 	.word	0x200026e0
 800e9b4:	2000277c 	.word	0x2000277c

0800e9b8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ba:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e9bc:	2600      	movs	r6, #0
	{
 800e9be:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e9c0:	4b27      	ldr	r3, [pc, #156]	; (800ea60 <vTaskList+0xa8>)
	{
 800e9c2:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e9c4:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e9c6:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e9c8:	9202      	str	r2, [sp, #8]
	{
 800e9ca:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e9cc:	69d8      	ldr	r0, [r3, #28]
 800e9ce:	0140      	lsls	r0, r0, #5
 800e9d0:	f000 fbde 	bl	800f190 <pvPortMalloc>
 800e9d4:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e9d6:	d03f      	beq.n	800ea58 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e9d8:	2200      	movs	r2, #0
 800e9da:	9902      	ldr	r1, [sp, #8]
 800e9dc:	f7ff fe5e 	bl	800e69c <uxTaskGetSystemState>
 800e9e0:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e9e2:	9603      	str	r6, [sp, #12]
 800e9e4:	9b03      	ldr	r3, [sp, #12]
 800e9e6:	9a02      	ldr	r2, [sp, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d932      	bls.n	800ea52 <vTaskList+0x9a>
 800e9ec:	4b1d      	ldr	r3, [pc, #116]	; (800ea64 <vTaskList+0xac>)
 800e9ee:	4e1e      	ldr	r6, [pc, #120]	; (800ea68 <vTaskList+0xb0>)
 800e9f0:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e9f2:	9b03      	ldr	r3, [sp, #12]
 800e9f4:	2700      	movs	r7, #0
 800e9f6:	015b      	lsls	r3, r3, #5
 800e9f8:	18eb      	adds	r3, r5, r3
 800e9fa:	7b1b      	ldrb	r3, [r3, #12]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d801      	bhi.n	800ea08 <vTaskList+0x50>
 800ea04:	4443      	add	r3, r8
 800ea06:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ea08:	9b03      	ldr	r3, [sp, #12]
 800ea0a:	0020      	movs	r0, r4
 800ea0c:	015b      	lsls	r3, r3, #5
 800ea0e:	18eb      	adds	r3, r5, r3
 800ea10:	6859      	ldr	r1, [r3, #4]
 800ea12:	f7ff faad 	bl	800df70 <prvWriteNameToBuffer>
 800ea16:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ea18:	9b03      	ldr	r3, [sp, #12]
 800ea1a:	9a03      	ldr	r2, [sp, #12]
 800ea1c:	9903      	ldr	r1, [sp, #12]
 800ea1e:	015b      	lsls	r3, r3, #5
 800ea20:	0149      	lsls	r1, r1, #5
 800ea22:	1869      	adds	r1, r5, r1
 800ea24:	6889      	ldr	r1, [r1, #8]
 800ea26:	18eb      	adds	r3, r5, r3
 800ea28:	0152      	lsls	r2, r2, #5
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	18aa      	adds	r2, r5, r2
 800ea2e:	9101      	str	r1, [sp, #4]
 800ea30:	8b92      	ldrh	r2, [r2, #28]
 800ea32:	0031      	movs	r1, r6
 800ea34:	9200      	str	r2, [sp, #0]
 800ea36:	003a      	movs	r2, r7
 800ea38:	f004 fd1e 	bl	8013478 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ea3c:	0020      	movs	r0, r4
 800ea3e:	f7f1 fb6b 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800ea42:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ea44:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ea46:	3301      	adds	r3, #1
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	9a03      	ldr	r2, [sp, #12]
 800ea4c:	9b02      	ldr	r3, [sp, #8]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d3cf      	bcc.n	800e9f2 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ea52:	0028      	movs	r0, r5
 800ea54:	f000 fc12 	bl	800f27c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea58:	b004      	add	sp, #16
 800ea5a:	bc04      	pop	{r2}
 800ea5c:	4690      	mov	r8, r2
 800ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea60:	200026e0 	.word	0x200026e0
 800ea64:	08017e7c 	.word	0x08017e7c
 800ea68:	0801aab0 	.word	0x0801aab0

0800ea6c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ea6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea6e:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ea70:	2600      	movs	r6, #0
	{
 800ea72:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ea74:	4b28      	ldr	r3, [pc, #160]	; (800eb18 <vTaskGetRunTimeStats+0xac>)
	{
 800ea76:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ea78:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800ea7a:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ea7c:	9201      	str	r2, [sp, #4]
	{
 800ea7e:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ea80:	69d8      	ldr	r0, [r3, #28]
 800ea82:	0140      	lsls	r0, r0, #5
 800ea84:	f000 fb84 	bl	800f190 <pvPortMalloc>
 800ea88:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ea8a:	d040      	beq.n	800eb0e <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ea8c:	9901      	ldr	r1, [sp, #4]
 800ea8e:	aa03      	add	r2, sp, #12
 800ea90:	f7ff fe04 	bl	800e69c <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ea94:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ea96:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ea98:	9803      	ldr	r0, [sp, #12]
 800ea9a:	f7f1 fb59 	bl	8000150 <__udivsi3>
 800ea9e:	1e01      	subs	r1, r0, #0
 800eaa0:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800eaa2:	d031      	beq.n	800eb08 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800eaa4:	9602      	str	r6, [sp, #8]
 800eaa6:	9b02      	ldr	r3, [sp, #8]
 800eaa8:	9a01      	ldr	r2, [sp, #4]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d92c      	bls.n	800eb08 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eaae:	4b1b      	ldr	r3, [pc, #108]	; (800eb1c <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800eab0:	4f1b      	ldr	r7, [pc, #108]	; (800eb20 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eab2:	4698      	mov	r8, r3
 800eab4:	e00f      	b.n	800ead6 <vTaskGetRunTimeStats+0x6a>
 800eab6:	0033      	movs	r3, r6
 800eab8:	4641      	mov	r1, r8
 800eaba:	f004 fcdd 	bl	8013478 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800eabe:	0020      	movs	r0, r4
 800eac0:	f7f1 fb2a 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800eac4:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800eac6:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800eac8:	3301      	adds	r3, #1
 800eaca:	9302      	str	r3, [sp, #8]
 800eacc:	9a02      	ldr	r2, [sp, #8]
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d219      	bcs.n	800eb08 <vTaskGetRunTimeStats+0x9c>
 800ead4:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ead6:	9b02      	ldr	r3, [sp, #8]
 800ead8:	015b      	lsls	r3, r3, #5
 800eada:	18eb      	adds	r3, r5, r3
 800eadc:	6998      	ldr	r0, [r3, #24]
 800eade:	f7f1 fb37 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eae2:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800eae4:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eae6:	015b      	lsls	r3, r3, #5
 800eae8:	18eb      	adds	r3, r5, r3
 800eaea:	6859      	ldr	r1, [r3, #4]
 800eaec:	0020      	movs	r0, r4
 800eaee:	f7ff fa3f 	bl	800df70 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eaf2:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eaf4:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eaf6:	015b      	lsls	r3, r3, #5
 800eaf8:	18eb      	adds	r3, r5, r3
 800eafa:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800eafc:	2e00      	cmp	r6, #0
 800eafe:	d1da      	bne.n	800eab6 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800eb00:	0039      	movs	r1, r7
 800eb02:	f004 fcb9 	bl	8013478 <sprintf>
 800eb06:	e7da      	b.n	800eabe <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800eb08:	0028      	movs	r0, r5
 800eb0a:	f000 fbb7 	bl	800f27c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb0e:	b004      	add	sp, #16
 800eb10:	bc04      	pop	{r2}
 800eb12:	4690      	mov	r8, r2
 800eb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb16:	46c0      	nop			; (mov r8, r8)
 800eb18:	200026e0 	.word	0x200026e0
 800eb1c:	0801aac0 	.word	0x0801aac0
 800eb20:	0801aacc 	.word	0x0801aacc

0800eb24 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb24:	4b04      	ldr	r3, [pc, #16]	; (800eb38 <pvTaskIncrementMutexHeldCount+0x14>)
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	2a00      	cmp	r2, #0
 800eb2a:	d003      	beq.n	800eb34 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb2c:	6859      	ldr	r1, [r3, #4]
 800eb2e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800eb30:	3201      	adds	r2, #1
 800eb32:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eb34:	6858      	ldr	r0, [r3, #4]
	}
 800eb36:	4770      	bx	lr
 800eb38:	200026e0 	.word	0x200026e0

0800eb3c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	0006      	movs	r6, r0
 800eb40:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800eb42:	f000 faab 	bl	800f09c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800eb46:	4c1c      	ldr	r4, [pc, #112]	; (800ebb8 <ulTaskNotifyTake+0x7c>)
 800eb48:	6863      	ldr	r3, [r4, #4]
 800eb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d105      	bne.n	800eb5c <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800eb50:	2101      	movs	r1, #1
 800eb52:	6862      	ldr	r2, [r4, #4]
 800eb54:	335c      	adds	r3, #92	; 0x5c
 800eb56:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d119      	bne.n	800eb90 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eb5c:	f000 faaa 	bl	800f0b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800eb60:	f000 fa9c 	bl	800f09c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800eb64:	6863      	ldr	r3, [r4, #4]
 800eb66:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800eb68:	2d00      	cmp	r5, #0
 800eb6a:	d005      	beq.n	800eb78 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800eb6c:	2e00      	cmp	r6, #0
 800eb6e:	d10b      	bne.n	800eb88 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800eb70:	6862      	ldr	r2, [r4, #4]
 800eb72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800eb74:	3b01      	subs	r3, #1
 800eb76:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800eb78:	235c      	movs	r3, #92	; 0x5c
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	6862      	ldr	r2, [r4, #4]
 800eb7e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800eb80:	f000 fa98 	bl	800f0b4 <vPortExitCritical>

		return ulReturn;
	}
 800eb84:	0028      	movs	r0, r5
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800eb88:	2200      	movs	r2, #0
 800eb8a:	6863      	ldr	r3, [r4, #4]
 800eb8c:	659a      	str	r2, [r3, #88]	; 0x58
 800eb8e:	e7f3      	b.n	800eb78 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb90:	6860      	ldr	r0, [r4, #4]
 800eb92:	3004      	adds	r0, #4
 800eb94:	f7fe ff04 	bl	800d9a0 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800eb98:	1c6b      	adds	r3, r5, #1
 800eb9a:	d006      	beq.n	800ebaa <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800eb9c:	68a0      	ldr	r0, [r4, #8]
 800eb9e:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eba0:	f7ff fa5e 	bl	800e060 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800eba4:	f000 fa6e 	bl	800f084 <vPortYield>
 800eba8:	e7d8      	b.n	800eb5c <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ebaa:	0020      	movs	r0, r4
 800ebac:	6861      	ldr	r1, [r4, #4]
 800ebae:	3070      	adds	r0, #112	; 0x70
 800ebb0:	3104      	adds	r1, #4
 800ebb2:	f7fe fed1 	bl	800d958 <vListInsertEnd>
 800ebb6:	e7f5      	b.n	800eba4 <ulTaskNotifyTake+0x68>
 800ebb8:	200026e0 	.word	0x200026e0

0800ebbc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ebbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebbe:	001e      	movs	r6, r3
 800ebc0:	0004      	movs	r4, r0
 800ebc2:	000f      	movs	r7, r1
 800ebc4:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ebc6:	f000 fa69 	bl	800f09c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ebca:	2e00      	cmp	r6, #0
 800ebcc:	d001      	beq.n	800ebd2 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ebce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebd0:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ebd2:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800ebd4:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ebd6:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800ebd8:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ebda:	b2db      	uxtb	r3, r3

			switch( eAction )
 800ebdc:	2d02      	cmp	r5, #2
 800ebde:	d02e      	beq.n	800ec3e <xTaskGenericNotify+0x82>
 800ebe0:	d927      	bls.n	800ec32 <xTaskGenericNotify+0x76>
 800ebe2:	2d03      	cmp	r5, #3
 800ebe4:	d003      	beq.n	800ebee <xTaskGenericNotify+0x32>
 800ebe6:	2d04      	cmp	r5, #4
 800ebe8:	d102      	bne.n	800ebf0 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d02b      	beq.n	800ec46 <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ebee:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d004      	beq.n	800ebfe <xTaskGenericNotify+0x42>
 800ebf4:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ebf6:	f000 fa5d 	bl	800f0b4 <vPortExitCritical>

		return xReturn;
	}
 800ebfa:	0020      	movs	r0, r4
 800ebfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ebfe:	1d26      	adds	r6, r4, #4
 800ec00:	0030      	movs	r0, r6
 800ec02:	f7fe fecd 	bl	800d9a0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ec06:	4d11      	ldr	r5, [pc, #68]	; (800ec4c <xTaskGenericNotify+0x90>)
 800ec08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec0a:	69aa      	ldr	r2, [r5, #24]
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d900      	bls.n	800ec12 <xTaskGenericNotify+0x56>
 800ec10:	61ab      	str	r3, [r5, #24]
 800ec12:	0098      	lsls	r0, r3, #2
 800ec14:	18c0      	adds	r0, r0, r3
 800ec16:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <xTaskGenericNotify+0x94>)
 800ec18:	0080      	lsls	r0, r0, #2
 800ec1a:	18c0      	adds	r0, r0, r3
 800ec1c:	0031      	movs	r1, r6
 800ec1e:	f7fe fe9b 	bl	800d958 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec22:	686b      	ldr	r3, [r5, #4]
 800ec24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d9e3      	bls.n	800ebf4 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800ec2c:	f000 fa2a 	bl	800f084 <vPortYield>
 800ec30:	e7e0      	b.n	800ebf4 <xTaskGenericNotify+0x38>
			switch( eAction )
 800ec32:	2d01      	cmp	r5, #1
 800ec34:	d1dc      	bne.n	800ebf0 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800ec36:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ec38:	4317      	orrs	r7, r2
 800ec3a:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800ec3c:	e7d8      	b.n	800ebf0 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800ec3e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ec40:	3201      	adds	r2, #1
 800ec42:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800ec44:	e7d4      	b.n	800ebf0 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800ec46:	2400      	movs	r4, #0
 800ec48:	e7d5      	b.n	800ebf6 <xTaskGenericNotify+0x3a>
 800ec4a:	46c0      	nop			; (mov r8, r8)
 800ec4c:	200026e0 	.word	0x200026e0
 800ec50:	2000277c 	.word	0x2000277c

0800ec54 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec54:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec56:	f000 fa21 	bl	800f09c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec5a:	4c0f      	ldr	r4, [pc, #60]	; (800ec98 <prvCheckForValidListAndQueue+0x44>)
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec62:	f000 fa27 	bl	800f0b4 <vPortExitCritical>
}
 800ec66:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800ec68:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800ec6a:	1d26      	adds	r6, r4, #4
 800ec6c:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800ec6e:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800ec70:	f7fe fe62 	bl	800d938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec74:	0028      	movs	r0, r5
 800ec76:	f7fe fe5f 	bl	800d938 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	2110      	movs	r1, #16
 800ec7e:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800ec80:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800ec82:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ec84:	f7fe ff6a 	bl	800db5c <xQueueGenericCreate>
 800ec88:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0e9      	beq.n	800ec62 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec8e:	4903      	ldr	r1, [pc, #12]	; (800ec9c <prvCheckForValidListAndQueue+0x48>)
 800ec90:	f7ff f93e 	bl	800df10 <vQueueAddToRegistry>
 800ec94:	e7e5      	b.n	800ec62 <prvCheckForValidListAndQueue+0xe>
 800ec96:	46c0      	nop			; (mov r8, r8)
 800ec98:	20002808 	.word	0x20002808
 800ec9c:	0801aad8 	.word	0x0801aad8

0800eca0 <prvInsertTimerInActiveList>:
{
 800eca0:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eca2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eca4:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800eca6:	4291      	cmp	r1, r2
 800eca8:	d806      	bhi.n	800ecb8 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ecaa:	1ad2      	subs	r2, r2, r3
 800ecac:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800ecae:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d30d      	bcc.n	800ecd0 <prvInsertTimerInActiveList+0x30>
}
 800ecb4:	0020      	movs	r0, r4
 800ecb6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d202      	bcs.n	800ecc2 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800ecbc:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ecbe:	4299      	cmp	r1, r3
 800ecc0:	d2f8      	bcs.n	800ecb4 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecc2:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <prvInsertTimerInActiveList+0x40>)
 800ecc4:	1d01      	adds	r1, r0, #4
 800ecc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ecc8:	f7fe fe52 	bl	800d970 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800eccc:	2400      	movs	r4, #0
 800ecce:	e7f1      	b.n	800ecb4 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ecd0:	4b03      	ldr	r3, [pc, #12]	; (800ece0 <prvInsertTimerInActiveList+0x40>)
 800ecd2:	1d01      	adds	r1, r0, #4
 800ecd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecd6:	f7fe fe4b 	bl	800d970 <vListInsert>
 800ecda:	2400      	movs	r4, #0
 800ecdc:	e7ea      	b.n	800ecb4 <prvInsertTimerInActiveList+0x14>
 800ecde:	46c0      	nop			; (mov r8, r8)
 800ece0:	20002808 	.word	0x20002808

0800ece4 <xTimerCreateTimerTask>:
{
 800ece4:	b500      	push	{lr}
 800ece6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800ece8:	f7ff ffb4 	bl	800ec54 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ecec:	4b08      	ldr	r3, [pc, #32]	; (800ed10 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800ecee:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00a      	beq.n	800ed0c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	9003      	str	r0, [sp, #12]
 800ecfa:	9002      	str	r0, [sp, #8]
 800ecfc:	9001      	str	r0, [sp, #4]
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	2296      	movs	r2, #150	; 0x96
 800ed02:	2300      	movs	r3, #0
 800ed04:	4903      	ldr	r1, [pc, #12]	; (800ed14 <xTimerCreateTimerTask+0x30>)
 800ed06:	4804      	ldr	r0, [pc, #16]	; (800ed18 <xTimerCreateTimerTask+0x34>)
 800ed08:	f7ff fa1e 	bl	800e148 <xTaskGenericCreate>
}
 800ed0c:	b005      	add	sp, #20
 800ed0e:	bd00      	pop	{pc}
 800ed10:	20002808 	.word	0x20002808
 800ed14:	0801aae0 	.word	0x0801aae0
 800ed18:	0800ee1d 	.word	0x0800ee1d

0800ed1c <xTimerCreate>:
{
 800ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1e:	46c6      	mov	lr, r8
 800ed20:	000d      	movs	r5, r1
 800ed22:	b500      	push	{lr}
 800ed24:	4680      	mov	r8, r0
 800ed26:	0017      	movs	r7, r2
 800ed28:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800ed2a:	2900      	cmp	r1, #0
 800ed2c:	d014      	beq.n	800ed58 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ed2e:	202c      	movs	r0, #44	; 0x2c
 800ed30:	f000 fa2e 	bl	800f190 <pvPortMalloc>
 800ed34:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ed36:	d00b      	beq.n	800ed50 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ed38:	f7ff ff8c 	bl	800ec54 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ed3c:	4643      	mov	r3, r8
 800ed3e:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ed40:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ed42:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ed44:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ed46:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ed48:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ed4a:	1d20      	adds	r0, r4, #4
 800ed4c:	f7fe fe00 	bl	800d950 <vListInitialiseItem>
}
 800ed50:	0020      	movs	r0, r4
 800ed52:	bc04      	pop	{r2}
 800ed54:	4690      	mov	r8, r2
 800ed56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800ed58:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800ed5a:	e7f9      	b.n	800ed50 <xTimerCreate+0x34>

0800ed5c <xTimerGenericCommand>:
{
 800ed5c:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800ed5e:	4d13      	ldr	r5, [pc, #76]	; (800edac <xTimerGenericCommand+0x50>)
{
 800ed60:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800ed62:	682c      	ldr	r4, [r5, #0]
{
 800ed64:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800ed66:	2c00      	cmp	r4, #0
 800ed68:	d017      	beq.n	800ed9a <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800ed6a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed6c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ed6e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed70:	2905      	cmp	r1, #5
 800ed72:	dc0a      	bgt.n	800ed8a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed74:	f7ff fdb6 	bl	800e8e4 <xTaskGetSchedulerState>
 800ed78:	2802      	cmp	r0, #2
 800ed7a:	d010      	beq.n	800ed9e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed7c:	6828      	ldr	r0, [r5, #0]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	2200      	movs	r2, #0
 800ed82:	4669      	mov	r1, sp
 800ed84:	f7fe ff16 	bl	800dbb4 <xQueueGenericSend>
 800ed88:	e005      	b.n	800ed96 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	0032      	movs	r2, r6
 800ed8e:	4669      	mov	r1, sp
 800ed90:	0020      	movs	r0, r4
 800ed92:	f7fe ff8b 	bl	800dcac <xQueueGenericSendFromISR>
}
 800ed96:	b004      	add	sp, #16
 800ed98:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800ed9a:	2000      	movs	r0, #0
	return xReturn;
 800ed9c:	e7fb      	b.n	800ed96 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed9e:	6828      	ldr	r0, [r5, #0]
 800eda0:	2300      	movs	r3, #0
 800eda2:	9a08      	ldr	r2, [sp, #32]
 800eda4:	4669      	mov	r1, sp
 800eda6:	f7fe ff05 	bl	800dbb4 <xQueueGenericSend>
 800edaa:	e7f4      	b.n	800ed96 <xTimerGenericCommand+0x3a>
 800edac:	20002808 	.word	0x20002808

0800edb0 <prvSwitchTimerLists>:
{
 800edb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb2:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edb4:	2300      	movs	r3, #0
{
 800edb6:	b500      	push	{lr}
 800edb8:	4e17      	ldr	r6, [pc, #92]	; (800ee18 <prvSwitchTimerLists+0x68>)
 800edba:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edbc:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edbe:	e00c      	b.n	800edda <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edc0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edc2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edc4:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc6:	1d25      	adds	r5, r4, #4
 800edc8:	0028      	movs	r0, r5
 800edca:	f7fe fde9 	bl	800d9a0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd0:	0020      	movs	r0, r4
 800edd2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800edd4:	69e3      	ldr	r3, [r4, #28]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d00a      	beq.n	800edf0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edda:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	2a00      	cmp	r2, #0
 800ede0:	d1ee      	bne.n	800edc0 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800ede2:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800ede4:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800ede6:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800ede8:	b002      	add	sp, #8
 800edea:	bc04      	pop	{r2}
 800edec:	4690      	mov	r8, r2
 800edee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800edf0:	69a3      	ldr	r3, [r4, #24]
 800edf2:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800edf4:	429f      	cmp	r7, r3
 800edf6:	d206      	bcs.n	800ee06 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edf8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edfa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edfc:	0029      	movs	r1, r5
 800edfe:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ee00:	f7fe fdb6 	bl	800d970 <vListInsert>
 800ee04:	e7e9      	b.n	800edda <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee06:	4643      	mov	r3, r8
 800ee08:	003a      	movs	r2, r7
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	2300      	movs	r3, #0
 800ee10:	0020      	movs	r0, r4
 800ee12:	f7ff ffa3 	bl	800ed5c <xTimerGenericCommand>
 800ee16:	e7e0      	b.n	800edda <prvSwitchTimerLists+0x2a>
 800ee18:	20002808 	.word	0x20002808

0800ee1c <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800ee1c:	2300      	movs	r3, #0
{
 800ee1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee20:	4645      	mov	r5, r8
 800ee22:	4657      	mov	r7, sl
 800ee24:	46de      	mov	lr, fp
 800ee26:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800ee28:	4698      	mov	r8, r3
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	469a      	mov	sl, r3
{
 800ee2e:	b5e0      	push	{r5, r6, r7, lr}
 800ee30:	4d61      	ldr	r5, [pc, #388]	; (800efb8 <prvTimerTask+0x19c>)
 800ee32:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	2a00      	cmp	r2, #0
 800ee3a:	d050      	beq.n	800eede <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800ee40:	f7ff fae2 	bl	800e408 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800ee44:	f7ff fae8 	bl	800e418 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800ee48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800ee4a:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800ee4c:	4283      	cmp	r3, r0
 800ee4e:	d84e      	bhi.n	800eeee <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800ee50:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee52:	4286      	cmp	r6, r0
 800ee54:	d961      	bls.n	800ef1a <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ee56:	1b31      	subs	r1, r6, r4
 800ee58:	6828      	ldr	r0, [r5, #0]
 800ee5a:	f7ff f86b 	bl	800df34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ee5e:	f7ff fb71 	bl	800e544 <xTaskResumeAll>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d056      	beq.n	800ef14 <prvTimerTask+0xf8>
 800ee66:	2784      	movs	r7, #132	; 0x84
 800ee68:	00bf      	lsls	r7, r7, #2
 800ee6a:	23c7      	movs	r3, #199	; 0xc7
 800ee6c:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2200      	movs	r2, #0
 800ee72:	a904      	add	r1, sp, #16
 800ee74:	6828      	ldr	r0, [r5, #0]
 800ee76:	f7fe ff7b 	bl	800dd70 <xQueueGenericReceive>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0da      	beq.n	800ee34 <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	9c06      	ldr	r4, [sp, #24]
 800ee82:	9302      	str	r3, [sp, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da0b      	bge.n	800eea0 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee88:	9b07      	ldr	r3, [sp, #28]
 800ee8a:	0020      	movs	r0, r4
 800ee8c:	9302      	str	r3, [sp, #8]
 800ee8e:	9b05      	ldr	r3, [sp, #20]
 800ee90:	9902      	ldr	r1, [sp, #8]
 800ee92:	9303      	str	r3, [sp, #12]
 800ee94:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	9302      	str	r3, [sp, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	dbe7      	blt.n	800ee6e <prvTimerTask+0x52>
 800ee9e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800eea0:	6963      	ldr	r3, [r4, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eea6:	1d20      	adds	r0, r4, #4
 800eea8:	f7fe fd7a 	bl	800d9a0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800eeac:	f7ff fab4 	bl	800e418 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800eeb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800eeb2:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800eeb4:	4298      	cmp	r0, r3
 800eeb6:	d320      	bcc.n	800eefa <prvTimerTask+0xde>
 800eeb8:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800eeba:	636e      	str	r6, [r5, #52]	; 0x34
 800eebc:	2b09      	cmp	r3, #9
 800eebe:	d8d6      	bhi.n	800ee6e <prvTimerTask+0x52>
 800eec0:	4652      	mov	r2, sl
 800eec2:	409a      	lsls	r2, r3
 800eec4:	0013      	movs	r3, r2
 800eec6:	403a      	ands	r2, r7
 800eec8:	4693      	mov	fp, r2
 800eeca:	d16b      	bne.n	800efa4 <prvTimerTask+0x188>
 800eecc:	464a      	mov	r2, r9
 800eece:	421a      	tst	r2, r3
 800eed0:	d144      	bne.n	800ef5c <prvTimerTask+0x140>
 800eed2:	069b      	lsls	r3, r3, #26
 800eed4:	d5cb      	bpl.n	800ee6e <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800eed6:	0020      	movs	r0, r4
 800eed8:	f000 f9d0 	bl	800f27c <vPortFree>
 800eedc:	e7c5      	b.n	800ee6a <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800eede:	f7ff fa93 	bl	800e408 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800eee2:	f7ff fa99 	bl	800e418 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800eee6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800eee8:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800eeea:	4283      	cmp	r3, r0
 800eeec:	d908      	bls.n	800ef00 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800eeee:	f7ff ff5f 	bl	800edb0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800eef2:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800eef4:	f7ff fb26 	bl	800e544 <xTaskResumeAll>
 800eef8:	e7b5      	b.n	800ee66 <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800eefa:	f7ff ff59 	bl	800edb0 <prvSwitchTimerLists>
 800eefe:	e7db      	b.n	800eeb8 <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800ef00:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ef02:	6828      	ldr	r0, [r5, #0]
 800ef04:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800ef06:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ef08:	f7ff f814 	bl	800df34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef0c:	f7ff fb1a 	bl	800e544 <xTaskResumeAll>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1a8      	bne.n	800ee66 <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800ef14:	f000 f8b6 	bl	800f084 <vPortYield>
 800ef18:	e7a5      	b.n	800ee66 <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800ef1a:	f7ff fb13 	bl	800e544 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef24:	1d38      	adds	r0, r7, #4
 800ef26:	f7fe fd3b 	bl	800d9a0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d003      	beq.n	800ef38 <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	0038      	movs	r0, r7
 800ef34:	4798      	blx	r3
 800ef36:	e796      	b.n	800ee66 <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	0022      	movs	r2, r4
 800ef3c:	18f1      	adds	r1, r6, r3
 800ef3e:	0038      	movs	r0, r7
 800ef40:	0033      	movs	r3, r6
 800ef42:	f7ff fead 	bl	800eca0 <prvInsertTimerInActiveList>
 800ef46:	2801      	cmp	r0, #1
 800ef48:	d1f2      	bne.n	800ef30 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef4a:	4643      	mov	r3, r8
 800ef4c:	0032      	movs	r2, r6
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	2100      	movs	r1, #0
 800ef52:	2300      	movs	r3, #0
 800ef54:	0038      	movs	r0, r7
 800ef56:	f7ff ff01 	bl	800ed5c <xTimerGenericCommand>
 800ef5a:	e7e9      	b.n	800ef30 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800ef5c:	9b05      	ldr	r3, [sp, #20]
 800ef5e:	0020      	movs	r0, r4
 800ef60:	9302      	str	r3, [sp, #8]
 800ef62:	9a02      	ldr	r2, [sp, #8]
 800ef64:	69a3      	ldr	r3, [r4, #24]
 800ef66:	4694      	mov	ip, r2
 800ef68:	4463      	add	r3, ip
 800ef6a:	0019      	movs	r1, r3
 800ef6c:	0013      	movs	r3, r2
 800ef6e:	0032      	movs	r2, r6
 800ef70:	f7ff fe96 	bl	800eca0 <prvInsertTimerInActiveList>
 800ef74:	2801      	cmp	r0, #1
 800ef76:	d000      	beq.n	800ef7a <prvTimerTask+0x15e>
 800ef78:	e777      	b.n	800ee6a <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef7c:	0020      	movs	r0, r4
 800ef7e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ef80:	69e3      	ldr	r3, [r4, #28]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d000      	beq.n	800ef88 <prvTimerTask+0x16c>
 800ef86:	e770      	b.n	800ee6a <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef88:	69a1      	ldr	r1, [r4, #24]
 800ef8a:	9b05      	ldr	r3, [sp, #20]
 800ef8c:	468c      	mov	ip, r1
 800ef8e:	9302      	str	r3, [sp, #8]
 800ef90:	4463      	add	r3, ip
 800ef92:	001a      	movs	r2, r3
 800ef94:	465b      	mov	r3, fp
 800ef96:	2100      	movs	r1, #0
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	0020      	movs	r0, r4
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f7ff fedd 	bl	800ed5c <xTimerGenericCommand>
 800efa2:	e762      	b.n	800ee6a <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800efa4:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800efa6:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800efa8:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800efaa:	0032      	movs	r2, r6
 800efac:	1989      	adds	r1, r1, r6
 800efae:	0020      	movs	r0, r4
 800efb0:	f7ff fe76 	bl	800eca0 <prvInsertTimerInActiveList>
 800efb4:	e759      	b.n	800ee6a <prvTimerTask+0x4e>
 800efb6:	46c0      	nop			; (mov r8, r8)
 800efb8:	20002808 	.word	0x20002808

0800efbc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800efbc:	b510      	push	{r4, lr}
 800efbe:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800efc0:	f000 f86c 	bl	800f09c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800efc4:	6964      	ldr	r4, [r4, #20]
 800efc6:	1e63      	subs	r3, r4, #1
 800efc8:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800efca:	f000 f873 	bl	800f0b4 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800efce:	0020      	movs	r0, r4
 800efd0:	bd10      	pop	{r4, pc}
 800efd2:	46c0      	nop			; (mov r8, r8)

0800efd4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800efd4:	b510      	push	{r4, lr}
 800efd6:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800efd8:	f000 f860 	bl	800f09c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800efdc:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800efde:	f000 f869 	bl	800f0b4 <vPortExitCritical>

	return pvReturn;
}
 800efe2:	0020      	movs	r0, r4
 800efe4:	bd10      	pop	{r4, pc}
 800efe6:	46c0      	nop			; (mov r8, r8)

0800efe8 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800efe8:	b672      	cpsid	i
 800efea:	e7fe      	b.n	800efea <prvTaskExitError+0x2>

0800efec <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800efec:	4a06      	ldr	r2, [pc, #24]	; (800f008 <pxCurrentTCBConst2>)
 800efee:	6813      	ldr	r3, [r2, #0]
 800eff0:	6818      	ldr	r0, [r3, #0]
 800eff2:	3020      	adds	r0, #32
 800eff4:	f380 8809 	msr	PSP, r0
 800eff8:	2002      	movs	r0, #2
 800effa:	f380 8814 	msr	CONTROL, r0
 800effe:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f000:	46ae      	mov	lr, r5
 800f002:	b662      	cpsie	i
 800f004:	bd00      	pop	{pc}
 800f006:	46c0      	nop			; (mov r8, r8)

0800f008 <pxCurrentTCBConst2>:
 800f008:	200026e4 	.word	0x200026e4

0800f00c <pxPortInitialiseStack>:
{
 800f00c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f00e:	2480      	movs	r4, #128	; 0x80
 800f010:	1f03      	subs	r3, r0, #4
 800f012:	0464      	lsls	r4, r4, #17
 800f014:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f016:	3b04      	subs	r3, #4
 800f018:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f01a:	4903      	ldr	r1, [pc, #12]	; (800f028 <pxPortInitialiseStack+0x1c>)
 800f01c:	3b04      	subs	r3, #4
 800f01e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f020:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f022:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f024:	601a      	str	r2, [r3, #0]
}
 800f026:	bd10      	pop	{r4, pc}
 800f028:	0800efe9 	.word	0x0800efe9

0800f02c <SVC_Handler>:
 800f02c:	4770      	bx	lr
 800f02e:	46c0      	nop			; (mov r8, r8)

0800f030 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f030:	22ff      	movs	r2, #255	; 0xff
 800f032:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <xPortStartScheduler+0x40>)
 800f034:	0412      	lsls	r2, r2, #16
 800f036:	6819      	ldr	r1, [r3, #0]
{
 800f038:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f03a:	430a      	orrs	r2, r1
 800f03c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f03e:	22ff      	movs	r2, #255	; 0xff
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	0612      	lsls	r2, r2, #24
 800f044:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f046:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f048:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f04a:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <xPortStartScheduler+0x44>)
 800f04c:	0089      	lsls	r1, r1, #2
 800f04e:	6818      	ldr	r0, [r3, #0]
 800f050:	f7f1 f87e 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f054:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f056:	4b08      	ldr	r3, [pc, #32]	; (800f078 <xPortStartScheduler+0x48>)
 800f058:	3801      	subs	r0, #1
 800f05a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f05c:	4b07      	ldr	r3, [pc, #28]	; (800f07c <xPortStartScheduler+0x4c>)
 800f05e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f060:	2200      	movs	r2, #0
 800f062:	4b07      	ldr	r3, [pc, #28]	; (800f080 <xPortStartScheduler+0x50>)
 800f064:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f066:	f7ff ffc1 	bl	800efec <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f06a:	b672      	cpsid	i
 800f06c:	e7fe      	b.n	800f06c <xPortStartScheduler+0x3c>
 800f06e:	46c0      	nop			; (mov r8, r8)
 800f070:	e000ed20 	.word	0xe000ed20
 800f074:	200000b8 	.word	0x200000b8
 800f078:	e000e014 	.word	0xe000e014
 800f07c:	e000e010 	.word	0xe000e010
 800f080:	200000cc 	.word	0x200000cc

0800f084 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f084:	2280      	movs	r2, #128	; 0x80
 800f086:	4b04      	ldr	r3, [pc, #16]	; (800f098 <vPortYield+0x14>)
 800f088:	0552      	lsls	r2, r2, #21
 800f08a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f08c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f090:	f3bf 8f6f 	isb	sy
}
 800f094:	4770      	bx	lr
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	e000ed04 	.word	0xe000ed04

0800f09c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f09c:	b672      	cpsid	i
    uxCriticalNesting++;
 800f09e:	4a04      	ldr	r2, [pc, #16]	; (800f0b0 <vPortEnterCritical+0x14>)
 800f0a0:	6813      	ldr	r3, [r2, #0]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f0a6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f0aa:	f3bf 8f6f 	isb	sy
}
 800f0ae:	4770      	bx	lr
 800f0b0:	200000cc 	.word	0x200000cc

0800f0b4 <vPortExitCritical>:
    uxCriticalNesting--;
 800f0b4:	4a03      	ldr	r2, [pc, #12]	; (800f0c4 <vPortExitCritical+0x10>)
 800f0b6:	6813      	ldr	r3, [r2, #0]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d100      	bne.n	800f0c2 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f0c0:	b662      	cpsie	i
}
 800f0c2:	4770      	bx	lr
 800f0c4:	200000cc 	.word	0x200000cc

0800f0c8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f0c8:	f3ef 8010 	mrs	r0, PRIMASK
 800f0cc:	b672      	cpsid	i
 800f0ce:	4770      	bx	lr
}
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	46c0      	nop			; (mov r8, r8)

0800f0d4 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f0d4:	f380 8810 	msr	PRIMASK, r0
 800f0d8:	4770      	bx	lr
 800f0da:	46c0      	nop			; (mov r8, r8)

0800f0dc <PendSV_Handler>:
	__asm volatile
 800f0dc:	f3ef 8009 	mrs	r0, PSP
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	; (800f11c <pxCurrentTCBConst>)
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	3820      	subs	r0, #32
 800f0e6:	6010      	str	r0, [r2, #0]
 800f0e8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f0ea:	4644      	mov	r4, r8
 800f0ec:	464d      	mov	r5, r9
 800f0ee:	4656      	mov	r6, sl
 800f0f0:	465f      	mov	r7, fp
 800f0f2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f0f4:	b508      	push	{r3, lr}
 800f0f6:	b672      	cpsid	i
 800f0f8:	f7ff fb42 	bl	800e780 <vTaskSwitchContext>
 800f0fc:	b662      	cpsie	i
 800f0fe:	bc0c      	pop	{r2, r3}
 800f100:	6811      	ldr	r1, [r2, #0]
 800f102:	6808      	ldr	r0, [r1, #0]
 800f104:	3010      	adds	r0, #16
 800f106:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f108:	46a0      	mov	r8, r4
 800f10a:	46a9      	mov	r9, r5
 800f10c:	46b2      	mov	sl, r6
 800f10e:	46bb      	mov	fp, r7
 800f110:	f380 8809 	msr	PSP, r0
 800f114:	3820      	subs	r0, #32
 800f116:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f118:	4718      	bx	r3
 800f11a:	46c0      	nop			; (mov r8, r8)

0800f11c <pxCurrentTCBConst>:
 800f11c:	200026e4 	.word	0x200026e4

0800f120 <xPortSysTickHandler>:
{
 800f120:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f122:	f7ff ffd1 	bl	800f0c8 <ulSetInterruptMaskFromISR>
 800f126:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f128:	f7ff f982 	bl	800e430 <xTaskIncrementTick>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d003      	beq.n	800f138 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f130:	2280      	movs	r2, #128	; 0x80
 800f132:	4b03      	ldr	r3, [pc, #12]	; (800f140 <xPortSysTickHandler+0x20>)
 800f134:	0552      	lsls	r2, r2, #21
 800f136:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f138:	0020      	movs	r0, r4
 800f13a:	f7ff ffcb 	bl	800f0d4 <vClearInterruptMaskFromISR>
}
 800f13e:	bd10      	pop	{r4, pc}
 800f140:	e000ed04 	.word	0xe000ed04

0800f144 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f144:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f146:	4c11      	ldr	r4, [pc, #68]	; (800f18c <prvInsertBlockIntoFreeList+0x48>)
 800f148:	0022      	movs	r2, r4
 800f14a:	e000      	b.n	800f14e <prvInsertBlockIntoFreeList+0xa>
 800f14c:	001a      	movs	r2, r3
 800f14e:	6813      	ldr	r3, [r2, #0]
 800f150:	4283      	cmp	r3, r0
 800f152:	d3fb      	bcc.n	800f14c <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f154:	6851      	ldr	r1, [r2, #4]
 800f156:	1855      	adds	r5, r2, r1
 800f158:	42a8      	cmp	r0, r5
 800f15a:	d012      	beq.n	800f182 <prvInsertBlockIntoFreeList+0x3e>
 800f15c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f15e:	1845      	adds	r5, r0, r1
 800f160:	42ab      	cmp	r3, r5
 800f162:	d004      	beq.n	800f16e <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f164:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f166:	4290      	cmp	r0, r2
 800f168:	d000      	beq.n	800f16c <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f16a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f16c:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f16e:	68a4      	ldr	r4, [r4, #8]
 800f170:	42a3      	cmp	r3, r4
 800f172:	d0f7      	beq.n	800f164 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f174:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f176:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f178:	46a4      	mov	ip, r4
 800f17a:	4461      	add	r1, ip
 800f17c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f17e:	6003      	str	r3, [r0, #0]
 800f180:	e7f1      	b.n	800f166 <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f182:	6840      	ldr	r0, [r0, #4]
 800f184:	1809      	adds	r1, r1, r0
 800f186:	6051      	str	r1, [r2, #4]
 800f188:	0010      	movs	r0, r2
 800f18a:	e7e8      	b.n	800f15e <prvInsertBlockIntoFreeList+0x1a>
 800f18c:	20002840 	.word	0x20002840

0800f190 <pvPortMalloc>:
{
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	46c6      	mov	lr, r8
 800f194:	b500      	push	{lr}
 800f196:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f198:	f7ff f936 	bl	800e408 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f19c:	4d35      	ldr	r5, [pc, #212]	; (800f274 <pvPortMalloc+0xe4>)
 800f19e:	68ab      	ldr	r3, [r5, #8]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d03d      	beq.n	800f220 <pvPortMalloc+0x90>
 800f1a4:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1a6:	4226      	tst	r6, r4
 800f1a8:	d101      	bne.n	800f1ae <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800f1aa:	2c00      	cmp	r4, #0
 800f1ac:	d108      	bne.n	800f1c0 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800f1ae:	f7ff f9c9 	bl	800e544 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f1b2:	f7fd fcf3 	bl	800cb9c <vApplicationMallocFailedHook>
 800f1b6:	2700      	movs	r7, #0
}
 800f1b8:	0038      	movs	r0, r7
 800f1ba:	bc04      	pop	{r2}
 800f1bc:	4690      	mov	r8, r2
 800f1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800f1c0:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1c2:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f1c4:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1c6:	421a      	tst	r2, r3
 800f1c8:	d145      	bne.n	800f256 <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d0ef      	beq.n	800f1ae <pvPortMalloc+0x1e>
 800f1ce:	696a      	ldr	r2, [r5, #20]
 800f1d0:	4690      	mov	r8, r2
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d3eb      	bcc.n	800f1ae <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800f1d6:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800f1d8:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1da:	e004      	b.n	800f1e6 <pvPortMalloc+0x56>
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	d004      	beq.n	800f1ec <pvPortMalloc+0x5c>
 800f1e2:	0020      	movs	r0, r4
 800f1e4:	0014      	movs	r4, r2
 800f1e6:	6861      	ldr	r1, [r4, #4]
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	d3f7      	bcc.n	800f1dc <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800f1ec:	68aa      	ldr	r2, [r5, #8]
 800f1ee:	42a2      	cmp	r2, r4
 800f1f0:	d0dd      	beq.n	800f1ae <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1f2:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f1f4:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1f6:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f1f8:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f1fa:	1aca      	subs	r2, r1, r3
 800f1fc:	2a10      	cmp	r2, #16
 800f1fe:	d831      	bhi.n	800f264 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f200:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f202:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f204:	1a5b      	subs	r3, r3, r1
 800f206:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f208:	4293      	cmp	r3, r2
 800f20a:	d200      	bcs.n	800f20e <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f20c:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f20e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f210:	4331      	orrs	r1, r6
 800f212:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f214:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f216:	f7ff f995 	bl	800e544 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f21a:	2f00      	cmp	r7, #0
 800f21c:	d1cc      	bne.n	800f1b8 <pvPortMalloc+0x28>
 800f21e:	e7c8      	b.n	800f1b2 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f220:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f224:	4219      	tst	r1, r3
 800f226:	d119      	bne.n	800f25c <pvPortMalloc+0xcc>
 800f228:	001a      	movs	r2, r3
 800f22a:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800f22c:	26fd      	movs	r6, #253	; 0xfd
 800f22e:	01b6      	lsls	r6, r6, #6
 800f230:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f232:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f234:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f236:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f238:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800f23a:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f23c:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f23e:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f240:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f242:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800f244:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f246:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f248:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f24a:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f24c:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f24e:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f250:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f252:	60ee      	str	r6, [r5, #12]
 800f254:	e7a7      	b.n	800f1a6 <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f256:	4393      	bics	r3, r2
 800f258:	3308      	adds	r3, #8
 800f25a:	e7b6      	b.n	800f1ca <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f25c:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f25e:	438a      	bics	r2, r1
 800f260:	0011      	movs	r1, r2
 800f262:	e7e3      	b.n	800f22c <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f264:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f266:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f268:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f26a:	f7ff ff6b 	bl	800f144 <prvInsertBlockIntoFreeList>
 800f26e:	6861      	ldr	r1, [r4, #4]
 800f270:	e7c6      	b.n	800f200 <pvPortMalloc+0x70>
 800f272:	46c0      	nop			; (mov r8, r8)
 800f274:	20002840 	.word	0x20002840
 800f278:	20002858 	.word	0x20002858

0800f27c <vPortFree>:
{
 800f27c:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f27e:	2800      	cmp	r0, #0
 800f280:	d009      	beq.n	800f296 <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f282:	4d0d      	ldr	r5, [pc, #52]	; (800f2b8 <vPortFree+0x3c>)
 800f284:	3808      	subs	r0, #8
 800f286:	6843      	ldr	r3, [r0, #4]
 800f288:	68ea      	ldr	r2, [r5, #12]
 800f28a:	0004      	movs	r4, r0
 800f28c:	421a      	tst	r2, r3
 800f28e:	d002      	beq.n	800f296 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800f290:	6801      	ldr	r1, [r0, #0]
 800f292:	2900      	cmp	r1, #0
 800f294:	d000      	beq.n	800f298 <vPortFree+0x1c>
}
 800f296:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f298:	4393      	bics	r3, r2
 800f29a:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f29c:	f7ff f8b4 	bl	800e408 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2a0:	696a      	ldr	r2, [r5, #20]
 800f2a2:	6863      	ldr	r3, [r4, #4]
 800f2a4:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2a6:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2a8:	4463      	add	r3, ip
 800f2aa:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ac:	f7ff ff4a 	bl	800f144 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f2b0:	f7ff f948 	bl	800e544 <xTaskResumeAll>
}
 800f2b4:	e7ef      	b.n	800f296 <vPortFree+0x1a>
 800f2b6:	46c0      	nop			; (mov r8, r8)
 800f2b8:	20002840 	.word	0x20002840

0800f2bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f2c0:	f002 f904 	bl	80114cc <HAL_RCC_GetHCLKFreq>
 800f2c4:	21fa      	movs	r1, #250	; 0xfa
 800f2c6:	0089      	lsls	r1, r1, #2
 800f2c8:	f7f0 ff42 	bl	8000150 <__udivsi3>
 800f2cc:	f000 fb9e 	bl	800fa0c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f2d0:	2001      	movs	r0, #1
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	0021      	movs	r1, r4
 800f2d6:	4240      	negs	r0, r0
 800f2d8:	f000 fb58 	bl	800f98c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f2dc:	2000      	movs	r0, #0
 800f2de:	bd10      	pop	{r4, pc}

0800f2e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f2e0:	2110      	movs	r1, #16
 800f2e2:	4a06      	ldr	r2, [pc, #24]	; (800f2fc <HAL_Init+0x1c>)
{
 800f2e4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f2e6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f2e8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f2ea:	430b      	orrs	r3, r1
 800f2ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f2ee:	f7ff ffe5 	bl	800f2bc <HAL_InitTick>
  HAL_MspInit();
 800f2f2:	f001 fcdf 	bl	8010cb4 <HAL_MspInit>
}
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	bd10      	pop	{r4, pc}
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	40022000 	.word	0x40022000

0800f300 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f300:	4a02      	ldr	r2, [pc, #8]	; (800f30c <HAL_IncTick+0xc>)
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	3301      	adds	r3, #1
 800f306:	6013      	str	r3, [r2, #0]
}
 800f308:	4770      	bx	lr
 800f30a:	46c0      	nop			; (mov r8, r8)
 800f30c:	200067a0 	.word	0x200067a0

0800f310 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f310:	4b01      	ldr	r3, [pc, #4]	; (800f318 <HAL_GetTick+0x8>)
 800f312:	6818      	ldr	r0, [r3, #0]
}
 800f314:	4770      	bx	lr
 800f316:	46c0      	nop			; (mov r8, r8)
 800f318:	200067a0 	.word	0x200067a0

0800f31c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f31c:	b510      	push	{r4, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f322:	f7ff fff5 	bl	800f310 <HAL_GetTick>
 800f326:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f328:	f7ff fff2 	bl	800f310 <HAL_GetTick>
 800f32c:	9b01      	ldr	r3, [sp, #4]
 800f32e:	1b00      	subs	r0, r0, r4
 800f330:	4298      	cmp	r0, r3
 800f332:	d3f9      	bcc.n	800f328 <HAL_Delay+0xc>
  {
  }
}
 800f334:	b002      	add	sp, #8
 800f336:	bd10      	pop	{r4, pc}

0800f338 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f338:	4b01      	ldr	r3, [pc, #4]	; (800f340 <HAL_GetREVID+0x8>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	0c00      	lsrs	r0, r0, #16
}
 800f33e:	4770      	bx	lr
 800f340:	40015800 	.word	0x40015800

0800f344 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f344:	4b02      	ldr	r3, [pc, #8]	; (800f350 <HAL_GetDEVID+0xc>)
 800f346:	6818      	ldr	r0, [r3, #0]
 800f348:	0500      	lsls	r0, r0, #20
 800f34a:	0d00      	lsrs	r0, r0, #20
}
 800f34c:	4770      	bx	lr
 800f34e:	46c0      	nop			; (mov r8, r8)
 800f350:	40015800 	.word	0x40015800

0800f354 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f354:	2303      	movs	r3, #3
 800f356:	6802      	ldr	r2, [r0, #0]
{
 800f358:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f35a:	6891      	ldr	r1, [r2, #8]
{
 800f35c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f35e:	400b      	ands	r3, r1
 800f360:	2b01      	cmp	r3, #1
 800f362:	d001      	beq.n	800f368 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f364:	2000      	movs	r0, #0
}
 800f366:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f368:	6811      	ldr	r1, [r2, #0]
 800f36a:	420b      	tst	r3, r1
 800f36c:	d00e      	beq.n	800f38c <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f36e:	2305      	movs	r3, #5
 800f370:	6891      	ldr	r1, [r2, #8]
 800f372:	400b      	ands	r3, r1
 800f374:	2b01      	cmp	r3, #1
 800f376:	d00d      	beq.n	800f394 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f378:	2210      	movs	r2, #16
 800f37a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f37c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f37e:	4313      	orrs	r3, r2
 800f380:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f382:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f384:	3a0f      	subs	r2, #15
 800f386:	4313      	orrs	r3, r2
 800f388:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f38a:	e7ec      	b.n	800f366 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f38c:	68d3      	ldr	r3, [r2, #12]
 800f38e:	041b      	lsls	r3, r3, #16
 800f390:	d4ed      	bmi.n	800f36e <ADC_Disable+0x1a>
 800f392:	e7e7      	b.n	800f364 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f394:	2102      	movs	r1, #2
 800f396:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f398:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f39a:	430b      	orrs	r3, r1
 800f39c:	6093      	str	r3, [r2, #8]
 800f39e:	2303      	movs	r3, #3
 800f3a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f3a2:	f7ff ffb5 	bl	800f310 <HAL_GetTick>
 800f3a6:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f3a8:	e004      	b.n	800f3b4 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f3aa:	f7ff ffb1 	bl	800f310 <HAL_GetTick>
 800f3ae:	1b80      	subs	r0, r0, r6
 800f3b0:	2802      	cmp	r0, #2
 800f3b2:	d804      	bhi.n	800f3be <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	421d      	tst	r5, r3
 800f3ba:	d1f6      	bne.n	800f3aa <ADC_Disable+0x56>
 800f3bc:	e7d2      	b.n	800f364 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3be:	2210      	movs	r2, #16
 800f3c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f3c2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f3ca:	431d      	orrs	r5, r3
 800f3cc:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f3ce:	e7ca      	b.n	800f366 <ADC_Disable+0x12>

0800f3d0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f3d0:	2300      	movs	r3, #0
{
 800f3d2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f3d4:	6802      	ldr	r2, [r0, #0]
{
 800f3d6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f3d8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f3da:	6891      	ldr	r1, [r2, #8]
 800f3dc:	3303      	adds	r3, #3
{
 800f3de:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f3e0:	400b      	ands	r3, r1
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d031      	beq.n	800f44a <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f3e6:	6891      	ldr	r1, [r2, #8]
 800f3e8:	4b20      	ldr	r3, [pc, #128]	; (800f46c <ADC_Enable+0x9c>)
 800f3ea:	4219      	tst	r1, r3
 800f3ec:	d122      	bne.n	800f434 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	6893      	ldr	r3, [r2, #8]
 800f3f2:	430b      	orrs	r3, r1
 800f3f4:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f3f6:	4b1e      	ldr	r3, [pc, #120]	; (800f470 <ADC_Enable+0xa0>)
 800f3f8:	491e      	ldr	r1, [pc, #120]	; (800f474 <ADC_Enable+0xa4>)
 800f3fa:	6818      	ldr	r0, [r3, #0]
 800f3fc:	f7f0 fea8 	bl	8000150 <__udivsi3>
 800f400:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f402:	9b01      	ldr	r3, [sp, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d005      	beq.n	800f414 <ADC_Enable+0x44>
      wait_loop_index--;
 800f408:	9b01      	ldr	r3, [sp, #4]
 800f40a:	3b01      	subs	r3, #1
 800f40c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1f9      	bne.n	800f408 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f414:	f7ff ff7c 	bl	800f310 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f418:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f41a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f41c:	e004      	b.n	800f428 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f41e:	f7ff ff77 	bl	800f310 <HAL_GetTick>
 800f422:	1b80      	subs	r0, r0, r6
 800f424:	2802      	cmp	r0, #2
 800f426:	d818      	bhi.n	800f45a <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	421d      	tst	r5, r3
 800f42e:	d0f6      	beq.n	800f41e <ADC_Enable+0x4e>
  return HAL_OK;
 800f430:	2000      	movs	r0, #0
 800f432:	e008      	b.n	800f446 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f434:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f436:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f43a:	4313      	orrs	r3, r2
 800f43c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f43e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f440:	3a0f      	subs	r2, #15
 800f442:	4313      	orrs	r3, r2
 800f444:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f446:	b002      	add	sp, #8
 800f448:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f44a:	6811      	ldr	r1, [r2, #0]
 800f44c:	420b      	tst	r3, r1
 800f44e:	d1ef      	bne.n	800f430 <ADC_Enable+0x60>
 800f450:	68d3      	ldr	r3, [r2, #12]
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	d5c7      	bpl.n	800f3e6 <ADC_Enable+0x16>
  return HAL_OK;
 800f456:	2000      	movs	r0, #0
 800f458:	e7f5      	b.n	800f446 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f45a:	2210      	movs	r2, #16
 800f45c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f45e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f460:	4313      	orrs	r3, r2
 800f462:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f466:	431d      	orrs	r5, r3
 800f468:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f46a:	e7ec      	b.n	800f446 <ADC_Enable+0x76>
 800f46c:	80000017 	.word	0x80000017
 800f470:	200000b8 	.word	0x200000b8
 800f474:	000f4240 	.word	0x000f4240

0800f478 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f478:	2204      	movs	r2, #4
 800f47a:	6803      	ldr	r3, [r0, #0]
{
 800f47c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f47e:	6899      	ldr	r1, [r3, #8]
{
 800f480:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f482:	420a      	tst	r2, r1
 800f484:	d010      	beq.n	800f4a8 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f486:	6899      	ldr	r1, [r3, #8]
 800f488:	420a      	tst	r2, r1
 800f48a:	d10f      	bne.n	800f4ac <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f48c:	f7ff ff40 	bl	800f310 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f490:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f492:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f494:	e004      	b.n	800f4a0 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f496:	f7ff ff3b 	bl	800f310 <HAL_GetTick>
 800f49a:	1b80      	subs	r0, r0, r6
 800f49c:	2802      	cmp	r0, #2
 800f49e:	d80d      	bhi.n	800f4bc <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	421d      	tst	r5, r3
 800f4a6:	d1f6      	bne.n	800f496 <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f4a8:	2000      	movs	r0, #0
}
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f4ac:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f4ae:	0792      	lsls	r2, r2, #30
 800f4b0:	d4ec      	bmi.n	800f48c <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f4b2:	2110      	movs	r1, #16
 800f4b4:	689a      	ldr	r2, [r3, #8]
 800f4b6:	430a      	orrs	r2, r1
 800f4b8:	609a      	str	r2, [r3, #8]
 800f4ba:	e7e7      	b.n	800f48c <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4bc:	2210      	movs	r2, #16
 800f4be:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f4c0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f4c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f4c8:	3a0f      	subs	r2, #15
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f4ce:	e7ec      	b.n	800f4aa <ADC_ConversionStop+0x32>

0800f4d0 <HAL_ADC_Init>:
{
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f4d4:	d100      	bne.n	800f4d8 <HAL_ADC_Init+0x8>
 800f4d6:	e075      	b.n	800f5c4 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f4d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d068      	beq.n	800f5b0 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f4de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f4e0:	06db      	lsls	r3, r3, #27
 800f4e2:	d505      	bpl.n	800f4f0 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4e4:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f4e6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f4f0:	2004      	movs	r0, #4
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	689a      	ldr	r2, [r3, #8]
 800f4f6:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f4f8:	d1f4      	bne.n	800f4e4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f4fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f4fc:	4942      	ldr	r1, [pc, #264]	; (800f608 <HAL_ADC_Init+0x138>)
 800f4fe:	400a      	ands	r2, r1
 800f500:	3106      	adds	r1, #6
 800f502:	31ff      	adds	r1, #255	; 0xff
 800f504:	430a      	orrs	r2, r1
 800f506:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f508:	2203      	movs	r2, #3
 800f50a:	6899      	ldr	r1, [r3, #8]
 800f50c:	400a      	ands	r2, r1
 800f50e:	2a01      	cmp	r2, #1
 800f510:	d073      	beq.n	800f5fa <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f512:	2118      	movs	r1, #24
 800f514:	68da      	ldr	r2, [r3, #12]
 800f516:	438a      	bics	r2, r1
 800f518:	68a1      	ldr	r1, [r4, #8]
 800f51a:	430a      	orrs	r2, r1
 800f51c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f51e:	691a      	ldr	r2, [r3, #16]
 800f520:	6861      	ldr	r1, [r4, #4]
 800f522:	0092      	lsls	r2, r2, #2
 800f524:	0892      	lsrs	r2, r2, #2
 800f526:	430a      	orrs	r2, r1
 800f528:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	4937      	ldr	r1, [pc, #220]	; (800f60c <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f52e:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f530:	400a      	ands	r2, r1
 800f532:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f534:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f536:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f538:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f53a:	69e2      	ldr	r2, [r4, #28]
 800f53c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f53e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f540:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f542:	3a01      	subs	r2, #1
 800f544:	1e55      	subs	r5, r2, #1
 800f546:	41aa      	sbcs	r2, r5
 800f548:	0315      	lsls	r5, r2, #12
 800f54a:	68e2      	ldr	r2, [r4, #12]
 800f54c:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f54e:	6922      	ldr	r2, [r4, #16]
 800f550:	4339      	orrs	r1, r7
 800f552:	2a02      	cmp	r2, #2
 800f554:	d100      	bne.n	800f558 <HAL_ADC_Init+0x88>
 800f556:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f558:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f55a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f55c:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f55e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f560:	432a      	orrs	r2, r5
 800f562:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f564:	2901      	cmp	r1, #1
 800f566:	d042      	beq.n	800f5ee <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f568:	20c2      	movs	r0, #194	; 0xc2
 800f56a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f56c:	30ff      	adds	r0, #255	; 0xff
 800f56e:	4281      	cmp	r1, r0
 800f570:	d002      	beq.n	800f578 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f572:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f574:	4301      	orrs	r1, r0
 800f576:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f578:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f57a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f57c:	4311      	orrs	r1, r2
 800f57e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f580:	2180      	movs	r1, #128	; 0x80
 800f582:	0549      	lsls	r1, r1, #21
 800f584:	428d      	cmp	r5, r1
 800f586:	d01f      	beq.n	800f5c8 <HAL_ADC_Init+0xf8>
 800f588:	1e69      	subs	r1, r5, #1
 800f58a:	2906      	cmp	r1, #6
 800f58c:	d91c      	bls.n	800f5c8 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	491f      	ldr	r1, [pc, #124]	; (800f610 <HAL_ADC_Init+0x140>)
 800f592:	400b      	ands	r3, r1
 800f594:	4293      	cmp	r3, r2
 800f596:	d020      	beq.n	800f5da <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f598:	2212      	movs	r2, #18
 800f59a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f59c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f59e:	4393      	bics	r3, r2
 800f5a0:	3a02      	subs	r2, #2
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5a8:	3a0f      	subs	r2, #15
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5ae:	e79e      	b.n	800f4ee <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f5b0:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f5b2:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f5b4:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f5b6:	f7fc fb9d 	bl	800bcf4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f5ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5bc:	06db      	lsls	r3, r3, #27
 800f5be:	d500      	bpl.n	800f5c2 <HAL_ADC_Init+0xf2>
 800f5c0:	e790      	b.n	800f4e4 <HAL_ADC_Init+0x14>
 800f5c2:	e795      	b.n	800f4f0 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	e792      	b.n	800f4ee <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f5c8:	2107      	movs	r1, #7
 800f5ca:	6958      	ldr	r0, [r3, #20]
 800f5cc:	4388      	bics	r0, r1
 800f5ce:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f5d0:	6958      	ldr	r0, [r3, #20]
 800f5d2:	4029      	ands	r1, r5
 800f5d4:	4301      	orrs	r1, r0
 800f5d6:	6159      	str	r1, [r3, #20]
 800f5d8:	e7d9      	b.n	800f58e <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f5da:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f5dc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f5de:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f5e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f5e2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f5e4:	4393      	bics	r3, r2
 800f5e6:	3a02      	subs	r2, #2
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	6463      	str	r3, [r4, #68]	; 0x44
 800f5ec:	e77f      	b.n	800f4ee <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f5ee:	2e00      	cmp	r6, #0
 800f5f0:	d1ba      	bne.n	800f568 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f5f2:	2180      	movs	r1, #128	; 0x80
 800f5f4:	0249      	lsls	r1, r1, #9
 800f5f6:	430a      	orrs	r2, r1
 800f5f8:	e7b6      	b.n	800f568 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f5fa:	6819      	ldr	r1, [r3, #0]
 800f5fc:	420a      	tst	r2, r1
 800f5fe:	d194      	bne.n	800f52a <HAL_ADC_Init+0x5a>
 800f600:	68da      	ldr	r2, [r3, #12]
 800f602:	0412      	lsls	r2, r2, #16
 800f604:	d491      	bmi.n	800f52a <HAL_ADC_Init+0x5a>
 800f606:	e784      	b.n	800f512 <HAL_ADC_Init+0x42>
 800f608:	fffffefd 	.word	0xfffffefd
 800f60c:	fffe0219 	.word	0xfffe0219
 800f610:	833fffe7 	.word	0x833fffe7

0800f614 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f614:	6803      	ldr	r3, [r0, #0]
{
 800f616:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f618:	689a      	ldr	r2, [r3, #8]
{
 800f61a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f61c:	0752      	lsls	r2, r2, #29
 800f61e:	d421      	bmi.n	800f664 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f620:	2240      	movs	r2, #64	; 0x40
 800f622:	5c81      	ldrb	r1, [r0, r2]
 800f624:	2901      	cmp	r1, #1
 800f626:	d01d      	beq.n	800f664 <HAL_ADC_Start+0x50>
 800f628:	2101      	movs	r1, #1
 800f62a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f62c:	69c2      	ldr	r2, [r0, #28]
 800f62e:	2a01      	cmp	r2, #1
 800f630:	d112      	bne.n	800f658 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f632:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f634:	490c      	ldr	r1, [pc, #48]	; (800f668 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f636:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f638:	4011      	ands	r1, r2
 800f63a:	2280      	movs	r2, #128	; 0x80
 800f63c:	0052      	lsls	r2, r2, #1
 800f63e:	430a      	orrs	r2, r1
 800f640:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f642:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f644:	2200      	movs	r2, #0
 800f646:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f648:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f64a:	321c      	adds	r2, #28
 800f64c:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f64e:	689a      	ldr	r2, [r3, #8]
 800f650:	393c      	subs	r1, #60	; 0x3c
 800f652:	430a      	orrs	r2, r1
 800f654:	609a      	str	r2, [r3, #8]
}
 800f656:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f658:	f7ff feba 	bl	800f3d0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d1fa      	bne.n	800f656 <HAL_ADC_Start+0x42>
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	e7e6      	b.n	800f632 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f664:	2002      	movs	r0, #2
 800f666:	e7f6      	b.n	800f656 <HAL_ADC_Start+0x42>
 800f668:	fffff0fe 	.word	0xfffff0fe

0800f66c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f66c:	2340      	movs	r3, #64	; 0x40
{ 
 800f66e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f670:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f672:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f674:	2a01      	cmp	r2, #1
 800f676:	d014      	beq.n	800f6a2 <HAL_ADC_Stop+0x36>
 800f678:	2501      	movs	r5, #1
 800f67a:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f67c:	f7ff fefc 	bl	800f478 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f680:	2800      	cmp	r0, #0
 800f682:	d003      	beq.n	800f68c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f684:	2340      	movs	r3, #64	; 0x40
 800f686:	2200      	movs	r2, #0
 800f688:	54e2      	strb	r2, [r4, r3]
}
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f68c:	0020      	movs	r0, r4
 800f68e:	f7ff fe61 	bl	800f354 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f692:	2800      	cmp	r0, #0
 800f694:	d1f6      	bne.n	800f684 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f698:	4a03      	ldr	r2, [pc, #12]	; (800f6a8 <HAL_ADC_Stop+0x3c>)
 800f69a:	4013      	ands	r3, r2
 800f69c:	431d      	orrs	r5, r3
 800f69e:	6465      	str	r5, [r4, #68]	; 0x44
 800f6a0:	e7f0      	b.n	800f684 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f6a2:	2002      	movs	r0, #2
 800f6a4:	e7f1      	b.n	800f68a <HAL_ADC_Stop+0x1e>
 800f6a6:	46c0      	nop			; (mov r8, r8)
 800f6a8:	fffffefe 	.word	0xfffffefe

0800f6ac <HAL_ADC_PollForConversion>:
{
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f6ae:	6943      	ldr	r3, [r0, #20]
{
 800f6b0:	0006      	movs	r6, r0
 800f6b2:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f6b4:	2b08      	cmp	r3, #8
 800f6b6:	d04c      	beq.n	800f752 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f6b8:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f6ba:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	07db      	lsls	r3, r3, #31
 800f6c0:	d43e      	bmi.n	800f740 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f6c2:	f7ff fe25 	bl	800f310 <HAL_GetTick>
 800f6c6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f6c8:	6832      	ldr	r2, [r6, #0]
 800f6ca:	e001      	b.n	800f6d0 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f6cc:	1c63      	adds	r3, r4, #1
 800f6ce:	d127      	bne.n	800f720 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f6d0:	6813      	ldr	r3, [r2, #0]
 800f6d2:	421d      	tst	r5, r3
 800f6d4:	d0fa      	beq.n	800f6cc <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f6d6:	2380      	movs	r3, #128	; 0x80
 800f6d8:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	430b      	orrs	r3, r1
 800f6de:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f6e0:	23c0      	movs	r3, #192	; 0xc0
 800f6e2:	68d1      	ldr	r1, [r2, #12]
 800f6e4:	011b      	lsls	r3, r3, #4
 800f6e6:	4219      	tst	r1, r3
 800f6e8:	d113      	bne.n	800f712 <HAL_ADC_PollForConversion+0x66>
 800f6ea:	6a33      	ldr	r3, [r6, #32]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d110      	bne.n	800f712 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f6f0:	6813      	ldr	r3, [r2, #0]
 800f6f2:	071b      	lsls	r3, r3, #28
 800f6f4:	d50d      	bpl.n	800f712 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f6f6:	6893      	ldr	r3, [r2, #8]
 800f6f8:	075b      	lsls	r3, r3, #29
 800f6fa:	d42f      	bmi.n	800f75c <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f6fc:	210c      	movs	r1, #12
 800f6fe:	6853      	ldr	r3, [r2, #4]
 800f700:	438b      	bics	r3, r1
 800f702:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f704:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f706:	491a      	ldr	r1, [pc, #104]	; (800f770 <HAL_ADC_PollForConversion+0xc4>)
 800f708:	400b      	ands	r3, r1
 800f70a:	3104      	adds	r1, #4
 800f70c:	31ff      	adds	r1, #255	; 0xff
 800f70e:	430b      	orrs	r3, r1
 800f710:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f712:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f714:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f71a:	330c      	adds	r3, #12
 800f71c:	6013      	str	r3, [r2, #0]
}
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f720:	2c00      	cmp	r4, #0
 800f722:	d004      	beq.n	800f72e <HAL_ADC_PollForConversion+0x82>
 800f724:	f7ff fdf4 	bl	800f310 <HAL_GetTick>
 800f728:	1bc0      	subs	r0, r0, r7
 800f72a:	42a0      	cmp	r0, r4
 800f72c:	d9cc      	bls.n	800f6c8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f72e:	2204      	movs	r2, #4
 800f730:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f732:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f734:	4313      	orrs	r3, r2
 800f736:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f738:	2200      	movs	r2, #0
 800f73a:	2340      	movs	r3, #64	; 0x40
 800f73c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f73e:	e7ee      	b.n	800f71e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f740:	2220      	movs	r2, #32
 800f742:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f744:	4313      	orrs	r3, r2
 800f746:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f748:	2200      	movs	r2, #0
 800f74a:	2340      	movs	r3, #64	; 0x40
 800f74c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f74e:	2001      	movs	r0, #1
 800f750:	e7e5      	b.n	800f71e <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f752:	f7ff fddd 	bl	800f310 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f756:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f758:	0007      	movs	r7, r0
 800f75a:	e7b5      	b.n	800f6c8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f75c:	2120      	movs	r1, #32
 800f75e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f760:	430b      	orrs	r3, r1
 800f762:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f764:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f766:	391f      	subs	r1, #31
 800f768:	430b      	orrs	r3, r1
 800f76a:	64b3      	str	r3, [r6, #72]	; 0x48
 800f76c:	e7d1      	b.n	800f712 <HAL_ADC_PollForConversion+0x66>
 800f76e:	46c0      	nop			; (mov r8, r8)
 800f770:	fffffefe 	.word	0xfffffefe

0800f774 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f774:	2208      	movs	r2, #8
 800f776:	6803      	ldr	r3, [r0, #0]
 800f778:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f77a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f77c:	4770      	bx	lr
 800f77e:	46c0      	nop			; (mov r8, r8)

0800f780 <HAL_ADC_ConvCpltCallback>:
 800f780:	4770      	bx	lr
 800f782:	46c0      	nop			; (mov r8, r8)

0800f784 <HAL_ADC_LevelOutOfWindowCallback>:
 800f784:	4770      	bx	lr
 800f786:	46c0      	nop			; (mov r8, r8)

0800f788 <HAL_ADC_ErrorCallback>:
 800f788:	4770      	bx	lr
 800f78a:	46c0      	nop			; (mov r8, r8)

0800f78c <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f78c:	2204      	movs	r2, #4
 800f78e:	6803      	ldr	r3, [r0, #0]
{
 800f790:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f792:	6819      	ldr	r1, [r3, #0]
{
 800f794:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f796:	420a      	tst	r2, r1
 800f798:	d04a      	beq.n	800f830 <HAL_ADC_IRQHandler+0xa4>
 800f79a:	6859      	ldr	r1, [r3, #4]
 800f79c:	420a      	tst	r2, r1
 800f79e:	d047      	beq.n	800f830 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f7a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f7a2:	06d2      	lsls	r2, r2, #27
 800f7a4:	d404      	bmi.n	800f7b0 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800f7a6:	2280      	movs	r2, #128	; 0x80
 800f7a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f7aa:	0092      	lsls	r2, r2, #2
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f7b0:	22c0      	movs	r2, #192	; 0xc0
 800f7b2:	68d9      	ldr	r1, [r3, #12]
 800f7b4:	0112      	lsls	r2, r2, #4
 800f7b6:	4211      	tst	r1, r2
 800f7b8:	d113      	bne.n	800f7e2 <HAL_ADC_IRQHandler+0x56>
 800f7ba:	6a22      	ldr	r2, [r4, #32]
 800f7bc:	2a00      	cmp	r2, #0
 800f7be:	d110      	bne.n	800f7e2 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	0712      	lsls	r2, r2, #28
 800f7c4:	d50d      	bpl.n	800f7e2 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f7c6:	689a      	ldr	r2, [r3, #8]
 800f7c8:	0752      	lsls	r2, r2, #29
 800f7ca:	d444      	bmi.n	800f856 <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f7cc:	210c      	movs	r1, #12
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	438a      	bics	r2, r1
 800f7d2:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800f7d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7d6:	4a24      	ldr	r2, [pc, #144]	; (800f868 <HAL_ADC_IRQHandler+0xdc>)
 800f7d8:	4013      	ands	r3, r2
 800f7da:	3204      	adds	r2, #4
 800f7dc:	32ff      	adds	r2, #255	; 0xff
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800f7e2:	0020      	movs	r0, r4
 800f7e4:	f7ff ffcc 	bl	800f780 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800f7e8:	220c      	movs	r2, #12
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800f7ee:	2580      	movs	r5, #128	; 0x80
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	4215      	tst	r5, r2
 800f7f4:	d002      	beq.n	800f7fc <HAL_ADC_IRQHandler+0x70>
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	4215      	tst	r5, r2
 800f7fa:	d121      	bne.n	800f840 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800f7fc:	2210      	movs	r2, #16
 800f7fe:	6819      	ldr	r1, [r3, #0]
 800f800:	420a      	tst	r2, r1
 800f802:	d014      	beq.n	800f82e <HAL_ADC_IRQHandler+0xa2>
 800f804:	6859      	ldr	r1, [r3, #4]
 800f806:	420a      	tst	r2, r1
 800f808:	d011      	beq.n	800f82e <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f80a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f80c:	2a01      	cmp	r2, #1
 800f80e:	d002      	beq.n	800f816 <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800f810:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f812:	07d2      	lsls	r2, r2, #31
 800f814:	d509      	bpl.n	800f82a <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f816:	2102      	movs	r1, #2
 800f818:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800f81a:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f81c:	430a      	orrs	r2, r1
 800f81e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f820:	2210      	movs	r2, #16
 800f822:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800f824:	f7ff ffb0 	bl	800f788 <HAL_ADC_ErrorCallback>
 800f828:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f82a:	2210      	movs	r2, #16
 800f82c:	601a      	str	r2, [r3, #0]
}
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800f830:	2208      	movs	r2, #8
 800f832:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f834:	420a      	tst	r2, r1
 800f836:	d0da      	beq.n	800f7ee <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800f838:	6859      	ldr	r1, [r3, #4]
 800f83a:	420a      	tst	r2, r1
 800f83c:	d0d7      	beq.n	800f7ee <HAL_ADC_IRQHandler+0x62>
 800f83e:	e7af      	b.n	800f7a0 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f840:	2380      	movs	r3, #128	; 0x80
 800f842:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f844:	025b      	lsls	r3, r3, #9
 800f846:	4313      	orrs	r3, r2
 800f848:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f84a:	0020      	movs	r0, r4
 800f84c:	f7ff ff9a 	bl	800f784 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	601d      	str	r5, [r3, #0]
 800f854:	e7d2      	b.n	800f7fc <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f856:	2220      	movs	r2, #32
 800f858:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f85a:	4313      	orrs	r3, r2
 800f85c:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f85e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f860:	3a1f      	subs	r2, #31
 800f862:	4313      	orrs	r3, r2
 800f864:	64a3      	str	r3, [r4, #72]	; 0x48
 800f866:	e7bc      	b.n	800f7e2 <HAL_ADC_IRQHandler+0x56>
 800f868:	fffffefe 	.word	0xfffffefe

0800f86c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f86c:	2300      	movs	r3, #0
{
 800f86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f870:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f872:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f874:	3340      	adds	r3, #64	; 0x40
 800f876:	5cc2      	ldrb	r2, [r0, r3]
{
 800f878:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f87a:	2a01      	cmp	r2, #1
 800f87c:	d044      	beq.n	800f908 <HAL_ADC_ConfigChannel+0x9c>
 800f87e:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f880:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f882:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f884:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f886:	68b3      	ldr	r3, [r6, #8]
 800f888:	075b      	lsls	r3, r3, #29
 800f88a:	d509      	bpl.n	800f8a0 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f88c:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f88e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f890:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f892:	4313      	orrs	r3, r2
 800f894:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f896:	2340      	movs	r3, #64	; 0x40
 800f898:	2200      	movs	r2, #0
 800f89a:	54e2      	strb	r2, [r4, r3]
}
 800f89c:	b003      	add	sp, #12
 800f89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a0:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f8a2:	4d33      	ldr	r5, [pc, #204]	; (800f970 <HAL_ADC_ConfigChannel+0x104>)
 800f8a4:	001f      	movs	r7, r3
 800f8a6:	46ac      	mov	ip, r5
 800f8a8:	684d      	ldr	r5, [r1, #4]
 800f8aa:	409a      	lsls	r2, r3
 800f8ac:	3f10      	subs	r7, #16
 800f8ae:	4565      	cmp	r5, ip
 800f8b0:	d02c      	beq.n	800f90c <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f8b2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f8b4:	432a      	orrs	r2, r5
 800f8b6:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f8b8:	2280      	movs	r2, #128	; 0x80
 800f8ba:	0552      	lsls	r2, r2, #21
 800f8bc:	4290      	cmp	r0, r2
 800f8be:	d00f      	beq.n	800f8e0 <HAL_ADC_ConfigChannel+0x74>
 800f8c0:	3801      	subs	r0, #1
 800f8c2:	2806      	cmp	r0, #6
 800f8c4:	d90c      	bls.n	800f8e0 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f8c6:	2207      	movs	r2, #7
 800f8c8:	6888      	ldr	r0, [r1, #8]
 800f8ca:	6971      	ldr	r1, [r6, #20]
 800f8cc:	4011      	ands	r1, r2
 800f8ce:	4288      	cmp	r0, r1
 800f8d0:	d006      	beq.n	800f8e0 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f8d2:	6971      	ldr	r1, [r6, #20]
 800f8d4:	4391      	bics	r1, r2
 800f8d6:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f8d8:	6971      	ldr	r1, [r6, #20]
 800f8da:	4002      	ands	r2, r0
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f8e0:	2f02      	cmp	r7, #2
 800f8e2:	d80f      	bhi.n	800f904 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f8e4:	4923      	ldr	r1, [pc, #140]	; (800f974 <HAL_ADC_ConfigChannel+0x108>)
 800f8e6:	680a      	ldr	r2, [r1, #0]
 800f8e8:	2b10      	cmp	r3, #16
 800f8ea:	d029      	beq.n	800f940 <HAL_ADC_ConfigChannel+0xd4>
 800f8ec:	3b11      	subs	r3, #17
 800f8ee:	4258      	negs	r0, r3
 800f8f0:	4143      	adcs	r3, r0
 800f8f2:	4821      	ldr	r0, [pc, #132]	; (800f978 <HAL_ADC_ConfigChannel+0x10c>)
 800f8f4:	425b      	negs	r3, r3
 800f8f6:	4003      	ands	r3, r0
 800f8f8:	2080      	movs	r0, #128	; 0x80
 800f8fa:	0440      	lsls	r0, r0, #17
 800f8fc:	4684      	mov	ip, r0
 800f8fe:	4463      	add	r3, ip
 800f900:	4313      	orrs	r3, r2
 800f902:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f904:	2000      	movs	r0, #0
 800f906:	e7c6      	b.n	800f896 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800f908:	2002      	movs	r0, #2
 800f90a:	e7c7      	b.n	800f89c <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f90c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800f90e:	4391      	bics	r1, r2
 800f910:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f912:	2f02      	cmp	r7, #2
 800f914:	d8f6      	bhi.n	800f904 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f916:	4a17      	ldr	r2, [pc, #92]	; (800f974 <HAL_ADC_ConfigChannel+0x108>)
 800f918:	6811      	ldr	r1, [r2, #0]
 800f91a:	2b10      	cmp	r3, #16
 800f91c:	d00e      	beq.n	800f93c <HAL_ADC_ConfigChannel+0xd0>
 800f91e:	3b11      	subs	r3, #17
 800f920:	001a      	movs	r2, r3
 800f922:	1e53      	subs	r3, r2, #1
 800f924:	419a      	sbcs	r2, r3
 800f926:	4b14      	ldr	r3, [pc, #80]	; (800f978 <HAL_ADC_ConfigChannel+0x10c>)
 800f928:	4252      	negs	r2, r2
 800f92a:	4013      	ands	r3, r2
 800f92c:	4a13      	ldr	r2, [pc, #76]	; (800f97c <HAL_ADC_ConfigChannel+0x110>)
 800f92e:	4694      	mov	ip, r2
 800f930:	4463      	add	r3, ip
 800f932:	4a10      	ldr	r2, [pc, #64]	; (800f974 <HAL_ADC_ConfigChannel+0x108>)
 800f934:	400b      	ands	r3, r1
 800f936:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f938:	2000      	movs	r0, #0
 800f93a:	e7ac      	b.n	800f896 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f93c:	4b10      	ldr	r3, [pc, #64]	; (800f980 <HAL_ADC_ConfigChannel+0x114>)
 800f93e:	e7f8      	b.n	800f932 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f940:	2380      	movs	r3, #128	; 0x80
 800f942:	041b      	lsls	r3, r3, #16
 800f944:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f946:	4b0f      	ldr	r3, [pc, #60]	; (800f984 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f948:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	490e      	ldr	r1, [pc, #56]	; (800f988 <HAL_ADC_ConfigChannel+0x11c>)
 800f94e:	f7f0 fbff 	bl	8000150 <__udivsi3>
 800f952:	0083      	lsls	r3, r0, #2
 800f954:	1818      	adds	r0, r3, r0
 800f956:	0040      	lsls	r0, r0, #1
 800f958:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800f95a:	9b01      	ldr	r3, [sp, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d0d1      	beq.n	800f904 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800f960:	9b01      	ldr	r3, [sp, #4]
 800f962:	3b01      	subs	r3, #1
 800f964:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d1f9      	bne.n	800f960 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f96c:	2000      	movs	r0, #0
 800f96e:	e792      	b.n	800f896 <HAL_ADC_ConfigChannel+0x2a>
 800f970:	00001001 	.word	0x00001001
 800f974:	40012708 	.word	0x40012708
 800f978:	ff400000 	.word	0xff400000
 800f97c:	ffbfffff 	.word	0xffbfffff
 800f980:	ff7fffff 	.word	0xff7fffff
 800f984:	200000b8 	.word	0x200000b8
 800f988:	000f4240 	.word	0x000f4240

0800f98c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f98c:	22ff      	movs	r2, #255	; 0xff
 800f98e:	2303      	movs	r3, #3
 800f990:	b530      	push	{r4, r5, lr}
 800f992:	0014      	movs	r4, r2
 800f994:	b2c5      	uxtb	r5, r0
 800f996:	402b      	ands	r3, r5
 800f998:	00db      	lsls	r3, r3, #3
 800f99a:	409c      	lsls	r4, r3
 800f99c:	0189      	lsls	r1, r1, #6
 800f99e:	400a      	ands	r2, r1
 800f9a0:	43e4      	mvns	r4, r4
 800f9a2:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	db0b      	blt.n	800f9c0 <HAL_NVIC_SetPriority+0x34>
 800f9a8:	4b0c      	ldr	r3, [pc, #48]	; (800f9dc <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9aa:	0880      	lsrs	r0, r0, #2
 800f9ac:	469c      	mov	ip, r3
 800f9ae:	23c0      	movs	r3, #192	; 0xc0
 800f9b0:	0080      	lsls	r0, r0, #2
 800f9b2:	4460      	add	r0, ip
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	58c1      	ldr	r1, [r0, r3]
 800f9b8:	400c      	ands	r4, r1
 800f9ba:	4322      	orrs	r2, r4
 800f9bc:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f9be:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9c0:	230f      	movs	r3, #15
 800f9c2:	4907      	ldr	r1, [pc, #28]	; (800f9e0 <HAL_NVIC_SetPriority+0x54>)
 800f9c4:	402b      	ands	r3, r5
 800f9c6:	468c      	mov	ip, r1
 800f9c8:	3b08      	subs	r3, #8
 800f9ca:	089b      	lsrs	r3, r3, #2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4463      	add	r3, ip
 800f9d0:	69d9      	ldr	r1, [r3, #28]
 800f9d2:	400c      	ands	r4, r1
 800f9d4:	4322      	orrs	r2, r4
 800f9d6:	61da      	str	r2, [r3, #28]
 800f9d8:	e7f1      	b.n	800f9be <HAL_NVIC_SetPriority+0x32>
 800f9da:	46c0      	nop			; (mov r8, r8)
 800f9dc:	e000e100 	.word	0xe000e100
 800f9e0:	e000ed00 	.word	0xe000ed00

0800f9e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f9e4:	231f      	movs	r3, #31
 800f9e6:	4018      	ands	r0, r3
 800f9e8:	3b1e      	subs	r3, #30
 800f9ea:	4083      	lsls	r3, r0
 800f9ec:	4a01      	ldr	r2, [pc, #4]	; (800f9f4 <HAL_NVIC_EnableIRQ+0x10>)
 800f9ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f9f0:	4770      	bx	lr
 800f9f2:	46c0      	nop			; (mov r8, r8)
 800f9f4:	e000e100 	.word	0xe000e100

0800f9f8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f9f8:	231f      	movs	r3, #31
 800f9fa:	4018      	ands	r0, r3
 800f9fc:	3b1e      	subs	r3, #30
 800f9fe:	4083      	lsls	r3, r0
 800fa00:	2280      	movs	r2, #128	; 0x80
 800fa02:	4901      	ldr	r1, [pc, #4]	; (800fa08 <HAL_NVIC_DisableIRQ+0x10>)
 800fa04:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fa06:	4770      	bx	lr
 800fa08:	e000e100 	.word	0xe000e100

0800fa0c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fa0c:	4a0a      	ldr	r2, [pc, #40]	; (800fa38 <HAL_SYSTICK_Config+0x2c>)
 800fa0e:	1e43      	subs	r3, r0, #1
 800fa10:	2001      	movs	r0, #1
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d80e      	bhi.n	800fa34 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa16:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa18:	4a08      	ldr	r2, [pc, #32]	; (800fa3c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa1a:	4809      	ldr	r0, [pc, #36]	; (800fa40 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa1c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa1e:	6a03      	ldr	r3, [r0, #32]
 800fa20:	0609      	lsls	r1, r1, #24
 800fa22:	021b      	lsls	r3, r3, #8
 800fa24:	0a1b      	lsrs	r3, r3, #8
 800fa26:	430b      	orrs	r3, r1
 800fa28:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fa2a:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fa2c:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fa2e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fa30:	3307      	adds	r3, #7
 800fa32:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fa34:	4770      	bx	lr
 800fa36:	46c0      	nop			; (mov r8, r8)
 800fa38:	00ffffff 	.word	0x00ffffff
 800fa3c:	e000e010 	.word	0xe000e010
 800fa40:	e000ed00 	.word	0xe000ed00

0800fa44 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fa44:	4a05      	ldr	r2, [pc, #20]	; (800fa5c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fa46:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fa48:	2804      	cmp	r0, #4
 800fa4a:	d003      	beq.n	800fa54 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fa4c:	2104      	movs	r1, #4
 800fa4e:	438b      	bics	r3, r1
 800fa50:	6013      	str	r3, [r2, #0]
  }
}
 800fa52:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fa54:	4318      	orrs	r0, r3
 800fa56:	6010      	str	r0, [r2, #0]
 800fa58:	e7fb      	b.n	800fa52 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fa5a:	46c0      	nop			; (mov r8, r8)
 800fa5c:	e000e010 	.word	0xe000e010

0800fa60 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fa60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa62:	468c      	mov	ip, r1
 800fa64:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fa66:	0891      	lsrs	r1, r2, #2
 800fa68:	d010      	beq.n	800fa8c <CRC_Handle_8+0x2c>
 800fa6a:	4664      	mov	r4, ip
 800fa6c:	008f      	lsls	r7, r1, #2
 800fa6e:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fa70:	7823      	ldrb	r3, [r4, #0]
 800fa72:	7865      	ldrb	r5, [r4, #1]
 800fa74:	061b      	lsls	r3, r3, #24
 800fa76:	042d      	lsls	r5, r5, #16
 800fa78:	432b      	orrs	r3, r5
 800fa7a:	78e5      	ldrb	r5, [r4, #3]
 800fa7c:	432b      	orrs	r3, r5
 800fa7e:	78a5      	ldrb	r5, [r4, #2]
 800fa80:	3404      	adds	r4, #4
 800fa82:	022d      	lsls	r5, r5, #8
 800fa84:	432b      	orrs	r3, r5
 800fa86:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fa88:	42a7      	cmp	r7, r4
 800fa8a:	d1f1      	bne.n	800fa70 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	401a      	ands	r2, r3
 800fa90:	d00b      	beq.n	800faaa <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fa92:	0089      	lsls	r1, r1, #2
 800fa94:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fa96:	2a01      	cmp	r2, #1
 800fa98:	d013      	beq.n	800fac2 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fa9a:	2a02      	cmp	r2, #2
 800fa9c:	d107      	bne.n	800faae <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fa9e:	5c5a      	ldrb	r2, [r3, r1]
 800faa0:	4461      	add	r1, ip
 800faa2:	784b      	ldrb	r3, [r1, #1]
 800faa4:	0212      	lsls	r2, r2, #8
 800faa6:	4313      	orrs	r3, r2
 800faa8:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800faaa:	6830      	ldr	r0, [r6, #0]
}
 800faac:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800faae:	5c5a      	ldrb	r2, [r3, r1]
 800fab0:	4461      	add	r1, ip
 800fab2:	784b      	ldrb	r3, [r1, #1]
 800fab4:	0212      	lsls	r2, r2, #8
 800fab6:	4313      	orrs	r3, r2
 800fab8:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800faba:	788b      	ldrb	r3, [r1, #2]
 800fabc:	7033      	strb	r3, [r6, #0]
 800fabe:	6806      	ldr	r6, [r0, #0]
 800fac0:	e7f3      	b.n	800faaa <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fac2:	5ccb      	ldrb	r3, [r1, r3]
 800fac4:	7033      	strb	r3, [r6, #0]
 800fac6:	6806      	ldr	r6, [r0, #0]
 800fac8:	e7ef      	b.n	800faaa <CRC_Handle_8+0x4a>
 800faca:	46c0      	nop			; (mov r8, r8)

0800facc <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800facc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800face:	0857      	lsrs	r7, r2, #1
 800fad0:	6805      	ldr	r5, [r0, #0]
 800fad2:	d00a      	beq.n	800faea <CRC_Handle_16+0x1e>
 800fad4:	0008      	movs	r0, r1
 800fad6:	00be      	lsls	r6, r7, #2
 800fad8:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fada:	8803      	ldrh	r3, [r0, #0]
 800fadc:	8844      	ldrh	r4, [r0, #2]
 800fade:	041b      	lsls	r3, r3, #16
 800fae0:	4323      	orrs	r3, r4
 800fae2:	3004      	adds	r0, #4
 800fae4:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fae6:	4286      	cmp	r6, r0
 800fae8:	d1f7      	bne.n	800fada <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800faea:	07d3      	lsls	r3, r2, #31
 800faec:	d502      	bpl.n	800faf4 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800faee:	00bf      	lsls	r7, r7, #2
 800faf0:	5a7b      	ldrh	r3, [r7, r1]
 800faf2:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800faf4:	6828      	ldr	r0, [r5, #0]
}
 800faf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800faf8 <HAL_CRC_Init>:
{
 800faf8:	b510      	push	{r4, lr}
 800fafa:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fafc:	d01f      	beq.n	800fb3e <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fafe:	7f43      	ldrb	r3, [r0, #29]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d01d      	beq.n	800fb42 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fb06:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fb08:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fb0a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fb0c:	f000 f8ae 	bl	800fc6c <HAL_CRCEx_Init>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d114      	bne.n	800fb3e <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fb14:	7963      	ldrb	r3, [r4, #5]
 800fb16:	6822      	ldr	r2, [r4, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d01d      	beq.n	800fb58 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fb20:	2160      	movs	r1, #96	; 0x60
 800fb22:	6893      	ldr	r3, [r2, #8]
 800fb24:	438b      	bics	r3, r1
 800fb26:	6961      	ldr	r1, [r4, #20]
 800fb28:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fb2a:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fb2c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fb2e:	6893      	ldr	r3, [r2, #8]
 800fb30:	438b      	bics	r3, r1
 800fb32:	69a1      	ldr	r1, [r4, #24]
 800fb34:	430b      	orrs	r3, r1
 800fb36:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800fb3c:	e000      	b.n	800fb40 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fb3e:	2001      	movs	r0, #1
}
 800fb40:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fb42:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fb44:	f7fb fa20 	bl	800af88 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fb48:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fb4a:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fb4c:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fb4e:	f000 f88d 	bl	800fc6c <HAL_CRCEx_Init>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d0de      	beq.n	800fb14 <HAL_CRC_Init+0x1c>
 800fb56:	e7f2      	b.n	800fb3e <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	6113      	str	r3, [r2, #16]
 800fb5c:	e7e0      	b.n	800fb20 <HAL_CRC_Init+0x28>
 800fb5e:	46c0      	nop			; (mov r8, r8)

0800fb60 <HAL_CRC_Accumulate>:
{
 800fb60:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800fb62:	7f03      	ldrb	r3, [r0, #28]
{
 800fb64:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d021      	beq.n	800fbae <HAL_CRC_Accumulate+0x4e>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fb6e:	3301      	adds	r3, #1
 800fb70:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fb72:	6a03      	ldr	r3, [r0, #32]
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	d017      	beq.n	800fba8 <HAL_CRC_Accumulate+0x48>
 800fb78:	2b03      	cmp	r3, #3
 800fb7a:	d00a      	beq.n	800fb92 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fb7c:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d102      	bne.n	800fb88 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fb82:	0020      	movs	r0, r4
 800fb84:	f7ff ff6c 	bl	800fa60 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fb88:	2301      	movs	r3, #1
 800fb8a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	7723      	strb	r3, [r4, #28]
}
 800fb90:	bd10      	pop	{r4, pc}
 800fb92:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fb94:	2a00      	cmp	r2, #0
 800fb96:	d005      	beq.n	800fba4 <HAL_CRC_Accumulate+0x44>
 800fb98:	0092      	lsls	r2, r2, #2
 800fb9a:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fb9c:	c908      	ldmia	r1!, {r3}
 800fb9e:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fba0:	428a      	cmp	r2, r1
 800fba2:	d1fb      	bne.n	800fb9c <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800fba4:	6800      	ldr	r0, [r0, #0]
      break;
 800fba6:	e7ef      	b.n	800fb88 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fba8:	f7ff ff90 	bl	800facc <CRC_Handle_16>
      break;
 800fbac:	e7ec      	b.n	800fb88 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800fbae:	2002      	movs	r0, #2
 800fbb0:	e7ee      	b.n	800fb90 <HAL_CRC_Accumulate+0x30>
 800fbb2:	46c0      	nop			; (mov r8, r8)

0800fbb4 <HAL_CRC_Calculate>:
{
 800fbb4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800fbb6:	7f03      	ldrb	r3, [r0, #28]
{
 800fbb8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d026      	beq.n	800fc0c <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fbbe:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800fbc0:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fbc2:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800fbc4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800fbc6:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800fbc8:	6898      	ldr	r0, [r3, #8]
 800fbca:	4328      	orrs	r0, r5
 800fbcc:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800fbce:	6a20      	ldr	r0, [r4, #32]
 800fbd0:	2802      	cmp	r0, #2
 800fbd2:	d017      	beq.n	800fc04 <HAL_CRC_Calculate+0x50>
 800fbd4:	2803      	cmp	r0, #3
 800fbd6:	d007      	beq.n	800fbe8 <HAL_CRC_Calculate+0x34>
 800fbd8:	2801      	cmp	r0, #1
 800fbda:	d00f      	beq.n	800fbfc <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fbdc:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800fbde:	2301      	movs	r3, #1
 800fbe0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	7723      	strb	r3, [r4, #28]
}
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fbe8:	2a00      	cmp	r2, #0
 800fbea:	d005      	beq.n	800fbf8 <HAL_CRC_Calculate+0x44>
 800fbec:	0092      	lsls	r2, r2, #2
 800fbee:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fbf0:	c901      	ldmia	r1!, {r0}
 800fbf2:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800fbf4:	4291      	cmp	r1, r2
 800fbf6:	d1fb      	bne.n	800fbf0 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800fbf8:	6818      	ldr	r0, [r3, #0]
      break;
 800fbfa:	e7f0      	b.n	800fbde <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fbfc:	0020      	movs	r0, r4
 800fbfe:	f7ff ff2f 	bl	800fa60 <CRC_Handle_8>
      break;
 800fc02:	e7ec      	b.n	800fbde <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fc04:	0020      	movs	r0, r4
 800fc06:	f7ff ff61 	bl	800facc <CRC_Handle_16>
      break;
 800fc0a:	e7e8      	b.n	800fbde <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800fc0c:	2002      	movs	r0, #2
 800fc0e:	e7ea      	b.n	800fbe6 <HAL_CRC_Calculate+0x32>

0800fc10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800fc10:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800fc12:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800fc14:	2501      	movs	r5, #1
 800fc16:	e001      	b.n	800fc1c <HAL_CRCEx_Polynomial_Set+0xc>
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	d312      	bcc.n	800fc42 <HAL_CRCEx_Polynomial_Set+0x32>
 800fc1c:	002c      	movs	r4, r5
 800fc1e:	409c      	lsls	r4, r3
 800fc20:	4221      	tst	r1, r4
 800fc22:	d0f9      	beq.n	800fc18 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800fc24:	2a10      	cmp	r2, #16
 800fc26:	d01c      	beq.n	800fc62 <HAL_CRCEx_Polynomial_Set+0x52>
 800fc28:	2a18      	cmp	r2, #24
 800fc2a:	d012      	beq.n	800fc52 <HAL_CRCEx_Polynomial_Set+0x42>
 800fc2c:	2a08      	cmp	r2, #8
 800fc2e:	d014      	beq.n	800fc5a <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800fc30:	6800      	ldr	r0, [r0, #0]
 800fc32:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800fc34:	2118      	movs	r1, #24
 800fc36:	6883      	ldr	r3, [r0, #8]
 800fc38:	438b      	bics	r3, r1
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	6082      	str	r2, [r0, #8]
 800fc3e:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800fc40:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800fc42:	2a10      	cmp	r2, #16
 800fc44:	d003      	beq.n	800fc4e <HAL_CRCEx_Polynomial_Set+0x3e>
 800fc46:	2a18      	cmp	r2, #24
 800fc48:	d001      	beq.n	800fc4e <HAL_CRCEx_Polynomial_Set+0x3e>
 800fc4a:	2a08      	cmp	r2, #8
 800fc4c:	d1f0      	bne.n	800fc30 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fc4e:	2001      	movs	r0, #1
 800fc50:	e7f6      	b.n	800fc40 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800fc52:	2b06      	cmp	r3, #6
 800fc54:	d9ec      	bls.n	800fc30 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fc56:	2001      	movs	r0, #1
 800fc58:	e7f2      	b.n	800fc40 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800fc5a:	2b0f      	cmp	r3, #15
 800fc5c:	d9e8      	bls.n	800fc30 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fc5e:	2001      	movs	r0, #1
 800fc60:	e7ee      	b.n	800fc40 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	d9e4      	bls.n	800fc30 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fc66:	2001      	movs	r0, #1
 800fc68:	e7ea      	b.n	800fc40 <HAL_CRCEx_Polynomial_Set+0x30>
 800fc6a:	46c0      	nop			; (mov r8, r8)

0800fc6c <HAL_CRCEx_Init>:
{
 800fc6c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800fc6e:	7903      	ldrb	r3, [r0, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d108      	bne.n	800fc86 <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fc74:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fc76:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800fc78:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fc7a:	4a07      	ldr	r2, [pc, #28]	; (800fc98 <HAL_CRCEx_Init+0x2c>)
 800fc7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fc7e:	689a      	ldr	r2, [r3, #8]
 800fc80:	438a      	bics	r2, r1
 800fc82:	609a      	str	r2, [r3, #8]
}
 800fc84:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800fc86:	68c2      	ldr	r2, [r0, #12]
 800fc88:	6881      	ldr	r1, [r0, #8]
 800fc8a:	f7ff ffc1 	bl	800fc10 <HAL_CRCEx_Polynomial_Set>
 800fc8e:	1e43      	subs	r3, r0, #1
 800fc90:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800fc92:	b2c0      	uxtb	r0, r0
 800fc94:	e7f6      	b.n	800fc84 <HAL_CRCEx_Init+0x18>
 800fc96:	46c0      	nop			; (mov r8, r8)
 800fc98:	04c11db7 	.word	0x04c11db7

0800fc9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800fc9c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d023      	beq.n	800fcea <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800fca2:	2321      	movs	r3, #33	; 0x21
 800fca4:	5cc3      	ldrb	r3, [r0, r3]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d01b      	beq.n	800fce4 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fcac:	2121      	movs	r1, #33	; 0x21
 800fcae:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fcb0:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800fcb2:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800fcb4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fcb6:	4a0e      	ldr	r2, [pc, #56]	; (800fcf0 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fcb8:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fcba:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800fcbc:	6843      	ldr	r3, [r0, #4]
 800fcbe:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fcc0:	68c5      	ldr	r5, [r0, #12]
 800fcc2:	432b      	orrs	r3, r5
 800fcc4:	6905      	ldr	r5, [r0, #16]
 800fcc6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fcc8:	6945      	ldr	r5, [r0, #20]
 800fcca:	432b      	orrs	r3, r5
 800fccc:	6985      	ldr	r5, [r0, #24]
 800fcce:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800fcd0:	69c5      	ldr	r5, [r0, #28]
 800fcd2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800fcd4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800fcd6:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fcdc:	3301      	adds	r3, #1
 800fcde:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800fce0:	2000      	movs	r0, #0
}  
 800fce2:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800fce4:	2220      	movs	r2, #32
 800fce6:	5483      	strb	r3, [r0, r2]
 800fce8:	e7e0      	b.n	800fcac <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800fcea:	2001      	movs	r0, #1
 800fcec:	e7f9      	b.n	800fce2 <HAL_DMA_Init+0x46>
 800fcee:	46c0      	nop			; (mov r8, r8)
 800fcf0:	ffffc00f 	.word	0xffffc00f

0800fcf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fcf4:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800fcf6:	2420      	movs	r4, #32
 800fcf8:	5d05      	ldrb	r5, [r0, r4]
 800fcfa:	2d01      	cmp	r5, #1
 800fcfc:	d023      	beq.n	800fd46 <HAL_DMA_Start_IT+0x52>
 800fcfe:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fd00:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800fd02:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fd04:	3401      	adds	r4, #1
 800fd06:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800fd08:	6804      	ldr	r4, [r0, #0]
 800fd0a:	6825      	ldr	r5, [r4, #0]
 800fd0c:	43b5      	bics	r5, r6
 800fd0e:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fd10:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fd12:	6843      	ldr	r3, [r0, #4]
 800fd14:	2b10      	cmp	r3, #16
 800fd16:	d013      	beq.n	800fd40 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800fd18:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800fd1a:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fd1c:	2202      	movs	r2, #2
  return HAL_OK;    
 800fd1e:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	3202      	adds	r2, #2
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	3204      	adds	r2, #4
 800fd32:	4313      	orrs	r3, r2
 800fd34:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800fd36:	6823      	ldr	r3, [r4, #0]
 800fd38:	3a07      	subs	r2, #7
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	6023      	str	r3, [r4, #0]
} 
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800fd40:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800fd42:	60e1      	str	r1, [r4, #12]
 800fd44:	e7ea      	b.n	800fd1c <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800fd46:	2002      	movs	r0, #2
 800fd48:	e7f9      	b.n	800fd3e <HAL_DMA_Start_IT+0x4a>
 800fd4a:	46c0      	nop			; (mov r8, r8)

0800fd4c <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	6802      	ldr	r2, [r0, #0]
{
 800fd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800fd52:	6813      	ldr	r3, [r2, #0]
{
 800fd54:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800fd56:	438b      	bics	r3, r1
 800fd58:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800fd5a:	f7ff fad9 	bl	800f310 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fd5e:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800fd60:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fd62:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fd64:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fd66:	e004      	b.n	800fd72 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fd68:	f7ff fad2 	bl	800f310 <HAL_GetTick>
 800fd6c:	1bc0      	subs	r0, r0, r7
 800fd6e:	42b0      	cmp	r0, r6
 800fd70:	d809      	bhi.n	800fd86 <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	402b      	ands	r3, r5
 800fd78:	d1f6      	bne.n	800fd68 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800fd7a:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800fd7c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800fd7e:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800fd80:	3a01      	subs	r2, #1
 800fd82:	54a3      	strb	r3, [r4, r2]
}
 800fd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800fd86:	2220      	movs	r2, #32
 800fd88:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fd8a:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fd90:	2321      	movs	r3, #33	; 0x21
 800fd92:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fd94:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800fd96:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800fd98:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800fd9a:	e7f3      	b.n	800fd84 <HAL_DMA_Abort+0x38>

0800fd9c <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd9c:	6803      	ldr	r3, [r0, #0]
 800fd9e:	4aa2      	ldr	r2, [pc, #648]	; (8010028 <HAL_DMA_IRQHandler+0x28c>)
{        
 800fda0:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fda2:	0019      	movs	r1, r3
{        
 800fda4:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d937      	bls.n	800fe1a <HAL_DMA_IRQHandler+0x7e>
 800fdaa:	48a0      	ldr	r0, [pc, #640]	; (801002c <HAL_DMA_IRQHandler+0x290>)
 800fdac:	4da0      	ldr	r5, [pc, #640]	; (8010030 <HAL_DMA_IRQHandler+0x294>)
 800fdae:	6806      	ldr	r6, [r0, #0]
 800fdb0:	42ab      	cmp	r3, r5
 800fdb2:	d100      	bne.n	800fdb6 <HAL_DMA_IRQHandler+0x1a>
 800fdb4:	e0ed      	b.n	800ff92 <HAL_DMA_IRQHandler+0x1f6>
 800fdb6:	4d9f      	ldr	r5, [pc, #636]	; (8010034 <HAL_DMA_IRQHandler+0x298>)
 800fdb8:	42ab      	cmp	r3, r5
 800fdba:	d100      	bne.n	800fdbe <HAL_DMA_IRQHandler+0x22>
 800fdbc:	e334      	b.n	8010428 <HAL_DMA_IRQHandler+0x68c>
 800fdbe:	4d9e      	ldr	r5, [pc, #632]	; (8010038 <HAL_DMA_IRQHandler+0x29c>)
 800fdc0:	42ab      	cmp	r3, r5
 800fdc2:	d100      	bne.n	800fdc6 <HAL_DMA_IRQHandler+0x2a>
 800fdc4:	e129      	b.n	801001a <HAL_DMA_IRQHandler+0x27e>
 800fdc6:	4d9d      	ldr	r5, [pc, #628]	; (801003c <HAL_DMA_IRQHandler+0x2a0>)
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	d100      	bne.n	800fdce <HAL_DMA_IRQHandler+0x32>
 800fdcc:	e34b      	b.n	8010466 <HAL_DMA_IRQHandler+0x6ca>
 800fdce:	4d9c      	ldr	r5, [pc, #624]	; (8010040 <HAL_DMA_IRQHandler+0x2a4>)
 800fdd0:	42ab      	cmp	r3, r5
 800fdd2:	d100      	bne.n	800fdd6 <HAL_DMA_IRQHandler+0x3a>
 800fdd4:	e38b      	b.n	80104ee <HAL_DMA_IRQHandler+0x752>
 800fdd6:	4d9b      	ldr	r5, [pc, #620]	; (8010044 <HAL_DMA_IRQHandler+0x2a8>)
 800fdd8:	42ab      	cmp	r3, r5
 800fdda:	d100      	bne.n	800fdde <HAL_DMA_IRQHandler+0x42>
 800fddc:	e3cf      	b.n	801057e <HAL_DMA_IRQHandler+0x7e2>
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d100      	bne.n	800fde4 <HAL_DMA_IRQHandler+0x48>
 800fde2:	e35e      	b.n	80104a2 <HAL_DMA_IRQHandler+0x706>
 800fde4:	4a98      	ldr	r2, [pc, #608]	; (8010048 <HAL_DMA_IRQHandler+0x2ac>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d101      	bne.n	800fdee <HAL_DMA_IRQHandler+0x52>
 800fdea:	f000 fbe8 	bl	80105be <HAL_DMA_IRQHandler+0x822>
 800fdee:	4a97      	ldr	r2, [pc, #604]	; (801004c <HAL_DMA_IRQHandler+0x2b0>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d101      	bne.n	800fdf8 <HAL_DMA_IRQHandler+0x5c>
 800fdf4:	f000 fc04 	bl	8010600 <HAL_DMA_IRQHandler+0x864>
 800fdf8:	4a95      	ldr	r2, [pc, #596]	; (8010050 <HAL_DMA_IRQHandler+0x2b4>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d101      	bne.n	800fe02 <HAL_DMA_IRQHandler+0x66>
 800fdfe:	f000 fc21 	bl	8010644 <HAL_DMA_IRQHandler+0x8a8>
 800fe02:	4a94      	ldr	r2, [pc, #592]	; (8010054 <HAL_DMA_IRQHandler+0x2b8>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d101      	bne.n	800fe0c <HAL_DMA_IRQHandler+0x70>
 800fe08:	f000 fc37 	bl	801067a <HAL_DMA_IRQHandler+0x8de>
 800fe0c:	0332      	lsls	r2, r6, #12
 800fe0e:	d43c      	bmi.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe10:	4a86      	ldr	r2, [pc, #536]	; (801002c <HAL_DMA_IRQHandler+0x290>)
 800fe12:	6810      	ldr	r0, [r2, #0]
 800fe14:	2280      	movs	r2, #128	; 0x80
 800fe16:	02d2      	lsls	r2, r2, #11
 800fe18:	e0c0      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe1a:	488f      	ldr	r0, [pc, #572]	; (8010058 <HAL_DMA_IRQHandler+0x2bc>)
 800fe1c:	4d84      	ldr	r5, [pc, #528]	; (8010030 <HAL_DMA_IRQHandler+0x294>)
 800fe1e:	6806      	ldr	r6, [r0, #0]
 800fe20:	42ab      	cmp	r3, r5
 800fe22:	d02e      	beq.n	800fe82 <HAL_DMA_IRQHandler+0xe6>
 800fe24:	4d83      	ldr	r5, [pc, #524]	; (8010034 <HAL_DMA_IRQHandler+0x298>)
 800fe26:	42ab      	cmp	r3, r5
 800fe28:	d100      	bne.n	800fe2c <HAL_DMA_IRQHandler+0x90>
 800fe2a:	e2f6      	b.n	801041a <HAL_DMA_IRQHandler+0x67e>
 800fe2c:	4d82      	ldr	r5, [pc, #520]	; (8010038 <HAL_DMA_IRQHandler+0x29c>)
 800fe2e:	42ab      	cmp	r3, r5
 800fe30:	d100      	bne.n	800fe34 <HAL_DMA_IRQHandler+0x98>
 800fe32:	e0ea      	b.n	801000a <HAL_DMA_IRQHandler+0x26e>
 800fe34:	4d81      	ldr	r5, [pc, #516]	; (801003c <HAL_DMA_IRQHandler+0x2a0>)
 800fe36:	42ab      	cmp	r3, r5
 800fe38:	d100      	bne.n	800fe3c <HAL_DMA_IRQHandler+0xa0>
 800fe3a:	e30c      	b.n	8010456 <HAL_DMA_IRQHandler+0x6ba>
 800fe3c:	4d80      	ldr	r5, [pc, #512]	; (8010040 <HAL_DMA_IRQHandler+0x2a4>)
 800fe3e:	42ab      	cmp	r3, r5
 800fe40:	d100      	bne.n	800fe44 <HAL_DMA_IRQHandler+0xa8>
 800fe42:	e35b      	b.n	80104fc <HAL_DMA_IRQHandler+0x760>
 800fe44:	4d7f      	ldr	r5, [pc, #508]	; (8010044 <HAL_DMA_IRQHandler+0x2a8>)
 800fe46:	42ab      	cmp	r3, r5
 800fe48:	d100      	bne.n	800fe4c <HAL_DMA_IRQHandler+0xb0>
 800fe4a:	e390      	b.n	801056e <HAL_DMA_IRQHandler+0x7d2>
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d100      	bne.n	800fe52 <HAL_DMA_IRQHandler+0xb6>
 800fe50:	e31f      	b.n	8010492 <HAL_DMA_IRQHandler+0x6f6>
 800fe52:	4a7d      	ldr	r2, [pc, #500]	; (8010048 <HAL_DMA_IRQHandler+0x2ac>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d100      	bne.n	800fe5a <HAL_DMA_IRQHandler+0xbe>
 800fe58:	e3aa      	b.n	80105b0 <HAL_DMA_IRQHandler+0x814>
 800fe5a:	4a7c      	ldr	r2, [pc, #496]	; (801004c <HAL_DMA_IRQHandler+0x2b0>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d100      	bne.n	800fe62 <HAL_DMA_IRQHandler+0xc6>
 800fe60:	e3c7      	b.n	80105f2 <HAL_DMA_IRQHandler+0x856>
 800fe62:	4a7b      	ldr	r2, [pc, #492]	; (8010050 <HAL_DMA_IRQHandler+0x2b4>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d101      	bne.n	800fe6c <HAL_DMA_IRQHandler+0xd0>
 800fe68:	f000 fbe4 	bl	8010634 <HAL_DMA_IRQHandler+0x898>
 800fe6c:	4a79      	ldr	r2, [pc, #484]	; (8010054 <HAL_DMA_IRQHandler+0x2b8>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d100      	bne.n	800fe74 <HAL_DMA_IRQHandler+0xd8>
 800fe72:	e2e8      	b.n	8010446 <HAL_DMA_IRQHandler+0x6aa>
 800fe74:	0332      	lsls	r2, r6, #12
 800fe76:	d408      	bmi.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe78:	4a77      	ldr	r2, [pc, #476]	; (8010058 <HAL_DMA_IRQHandler+0x2bc>)
 800fe7a:	6810      	ldr	r0, [r2, #0]
 800fe7c:	2280      	movs	r2, #128	; 0x80
 800fe7e:	02d2      	lsls	r2, r2, #11
 800fe80:	e15f      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe82:	0732      	lsls	r2, r6, #28
 800fe84:	d401      	bmi.n	800fe8a <HAL_DMA_IRQHandler+0xee>
 800fe86:	f000 fc0a 	bl	801069e <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fe8a:	2208      	movs	r2, #8
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	4202      	tst	r2, r0
 800fe90:	d100      	bne.n	800fe94 <HAL_DMA_IRQHandler+0xf8>
 800fe92:	e1f4      	b.n	801027e <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800fe94:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe96:	4d66      	ldr	r5, [pc, #408]	; (8010030 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800fe98:	4390      	bics	r0, r2
 800fe9a:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe9c:	4862      	ldr	r0, [pc, #392]	; (8010028 <HAL_DMA_IRQHandler+0x28c>)
 800fe9e:	4283      	cmp	r3, r0
 800fea0:	d800      	bhi.n	800fea4 <HAL_DMA_IRQHandler+0x108>
 800fea2:	e1a9      	b.n	80101f8 <HAL_DMA_IRQHandler+0x45c>
 800fea4:	42ab      	cmp	r3, r5
 800fea6:	d100      	bne.n	800feaa <HAL_DMA_IRQHandler+0x10e>
 800fea8:	e310      	b.n	80104cc <HAL_DMA_IRQHandler+0x730>
 800feaa:	4a62      	ldr	r2, [pc, #392]	; (8010034 <HAL_DMA_IRQHandler+0x298>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d100      	bne.n	800feb2 <HAL_DMA_IRQHandler+0x116>
 800feb0:	e337      	b.n	8010522 <HAL_DMA_IRQHandler+0x786>
 800feb2:	4a61      	ldr	r2, [pc, #388]	; (8010038 <HAL_DMA_IRQHandler+0x29c>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d100      	bne.n	800feba <HAL_DMA_IRQHandler+0x11e>
 800feb8:	e2df      	b.n	801047a <HAL_DMA_IRQHandler+0x6de>
 800feba:	4a60      	ldr	r2, [pc, #384]	; (801003c <HAL_DMA_IRQHandler+0x2a0>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d100      	bne.n	800fec2 <HAL_DMA_IRQHandler+0x126>
 800fec0:	e370      	b.n	80105a4 <HAL_DMA_IRQHandler+0x808>
 800fec2:	4a5f      	ldr	r2, [pc, #380]	; (8010040 <HAL_DMA_IRQHandler+0x2a4>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d100      	bne.n	800feca <HAL_DMA_IRQHandler+0x12e>
 800fec8:	e38a      	b.n	80105e0 <HAL_DMA_IRQHandler+0x844>
 800feca:	4a5e      	ldr	r2, [pc, #376]	; (8010044 <HAL_DMA_IRQHandler+0x2a8>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d100      	bne.n	800fed2 <HAL_DMA_IRQHandler+0x136>
 800fed0:	e3a4      	b.n	801061c <HAL_DMA_IRQHandler+0x880>
 800fed2:	4283      	cmp	r3, r0
 800fed4:	d100      	bne.n	800fed8 <HAL_DMA_IRQHandler+0x13c>
 800fed6:	e3cd      	b.n	8010674 <HAL_DMA_IRQHandler+0x8d8>
 800fed8:	4a5b      	ldr	r2, [pc, #364]	; (8010048 <HAL_DMA_IRQHandler+0x2ac>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d100      	bne.n	800fee0 <HAL_DMA_IRQHandler+0x144>
 800fede:	e3d8      	b.n	8010692 <HAL_DMA_IRQHandler+0x8f6>
 800fee0:	4a5a      	ldr	r2, [pc, #360]	; (801004c <HAL_DMA_IRQHandler+0x2b0>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d100      	bne.n	800fee8 <HAL_DMA_IRQHandler+0x14c>
 800fee6:	e3d8      	b.n	801069a <HAL_DMA_IRQHandler+0x8fe>
 800fee8:	4a59      	ldr	r2, [pc, #356]	; (8010050 <HAL_DMA_IRQHandler+0x2b4>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d100      	bne.n	800fef0 <HAL_DMA_IRQHandler+0x154>
 800feee:	e2c4      	b.n	801047a <HAL_DMA_IRQHandler+0x6de>
 800fef0:	4a5a      	ldr	r2, [pc, #360]	; (801005c <HAL_DMA_IRQHandler+0x2c0>)
 800fef2:	189a      	adds	r2, r3, r2
 800fef4:	4250      	negs	r0, r2
 800fef6:	4142      	adcs	r2, r0
 800fef8:	4859      	ldr	r0, [pc, #356]	; (8010060 <HAL_DMA_IRQHandler+0x2c4>)
 800fefa:	4252      	negs	r2, r2
 800fefc:	4002      	ands	r2, r0
 800fefe:	2080      	movs	r0, #128	; 0x80
 800ff00:	0300      	lsls	r0, r0, #12
 800ff02:	4684      	mov	ip, r0
 800ff04:	4462      	add	r2, ip
 800ff06:	4849      	ldr	r0, [pc, #292]	; (801002c <HAL_DMA_IRQHandler+0x290>)
 800ff08:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ff0e:	4302      	orrs	r2, r0
 800ff10:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800ff12:	2221      	movs	r2, #33	; 0x21
 800ff14:	3003      	adds	r0, #3
 800ff16:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800ff18:	2000      	movs	r0, #0
 800ff1a:	3a01      	subs	r2, #1
 800ff1c:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800ff1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ff20:	2a00      	cmp	r2, #0
 800ff22:	d000      	beq.n	800ff26 <HAL_DMA_IRQHandler+0x18a>
 800ff24:	e1a7      	b.n	8010276 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff26:	4a41      	ldr	r2, [pc, #260]	; (801002c <HAL_DMA_IRQHandler+0x290>)
 800ff28:	4d41      	ldr	r5, [pc, #260]	; (8010030 <HAL_DMA_IRQHandler+0x294>)
 800ff2a:	6810      	ldr	r0, [r2, #0]
 800ff2c:	2204      	movs	r2, #4
 800ff2e:	42ab      	cmp	r3, r5
 800ff30:	d034      	beq.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 800ff32:	4d40      	ldr	r5, [pc, #256]	; (8010034 <HAL_DMA_IRQHandler+0x298>)
 800ff34:	2240      	movs	r2, #64	; 0x40
 800ff36:	42ab      	cmp	r3, r5
 800ff38:	d030      	beq.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 800ff3a:	4a3f      	ldr	r2, [pc, #252]	; (8010038 <HAL_DMA_IRQHandler+0x29c>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d100      	bne.n	800ff42 <HAL_DMA_IRQHandler+0x1a6>
 800ff40:	e3b1      	b.n	80106a6 <HAL_DMA_IRQHandler+0x90a>
 800ff42:	4a3e      	ldr	r2, [pc, #248]	; (801003c <HAL_DMA_IRQHandler+0x2a0>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d100      	bne.n	800ff4a <HAL_DMA_IRQHandler+0x1ae>
 800ff48:	e39e      	b.n	8010688 <HAL_DMA_IRQHandler+0x8ec>
 800ff4a:	4a3d      	ldr	r2, [pc, #244]	; (8010040 <HAL_DMA_IRQHandler+0x2a4>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d100      	bne.n	800ff52 <HAL_DMA_IRQHandler+0x1b6>
 800ff50:	e760      	b.n	800fe14 <HAL_DMA_IRQHandler+0x78>
 800ff52:	4a3c      	ldr	r2, [pc, #240]	; (8010044 <HAL_DMA_IRQHandler+0x2a8>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d100      	bne.n	800ff5a <HAL_DMA_IRQHandler+0x1be>
 800ff58:	e315      	b.n	8010586 <HAL_DMA_IRQHandler+0x7ea>
 800ff5a:	4a33      	ldr	r2, [pc, #204]	; (8010028 <HAL_DMA_IRQHandler+0x28c>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d100      	bne.n	800ff62 <HAL_DMA_IRQHandler+0x1c6>
 800ff60:	e2a3      	b.n	80104aa <HAL_DMA_IRQHandler+0x70e>
 800ff62:	4d39      	ldr	r5, [pc, #228]	; (8010048 <HAL_DMA_IRQHandler+0x2ac>)
 800ff64:	2204      	movs	r2, #4
 800ff66:	42ab      	cmp	r3, r5
 800ff68:	d018      	beq.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 800ff6a:	4d38      	ldr	r5, [pc, #224]	; (801004c <HAL_DMA_IRQHandler+0x2b0>)
 800ff6c:	323c      	adds	r2, #60	; 0x3c
 800ff6e:	42ab      	cmp	r3, r5
 800ff70:	d014      	beq.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 800ff72:	4a37      	ldr	r2, [pc, #220]	; (8010050 <HAL_DMA_IRQHandler+0x2b4>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d100      	bne.n	800ff7a <HAL_DMA_IRQHandler+0x1de>
 800ff78:	e395      	b.n	80106a6 <HAL_DMA_IRQHandler+0x90a>
 800ff7a:	4a38      	ldr	r2, [pc, #224]	; (801005c <HAL_DMA_IRQHandler+0x2c0>)
 800ff7c:	189a      	adds	r2, r3, r2
 800ff7e:	4255      	negs	r5, r2
 800ff80:	416a      	adcs	r2, r5
 800ff82:	4d38      	ldr	r5, [pc, #224]	; (8010064 <HAL_DMA_IRQHandler+0x2c8>)
 800ff84:	4252      	negs	r2, r2
 800ff86:	402a      	ands	r2, r5
 800ff88:	2580      	movs	r5, #128	; 0x80
 800ff8a:	02ed      	lsls	r5, r5, #11
 800ff8c:	46ac      	mov	ip, r5
 800ff8e:	4462      	add	r2, ip
 800ff90:	e004      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff92:	0732      	lsls	r2, r6, #28
 800ff94:	d500      	bpl.n	800ff98 <HAL_DMA_IRQHandler+0x1fc>
 800ff96:	e778      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff98:	2204      	movs	r2, #4
 800ff9a:	6800      	ldr	r0, [r0, #0]
 800ff9c:	4210      	tst	r0, r2
 800ff9e:	d000      	beq.n	800ffa2 <HAL_DMA_IRQHandler+0x206>
 800ffa0:	e0d1      	b.n	8010146 <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ffa2:	4a22      	ldr	r2, [pc, #136]	; (801002c <HAL_DMA_IRQHandler+0x290>)
 800ffa4:	6810      	ldr	r0, [r2, #0]
 800ffa6:	4a22      	ldr	r2, [pc, #136]	; (8010030 <HAL_DMA_IRQHandler+0x294>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d100      	bne.n	800ffae <HAL_DMA_IRQHandler+0x212>
 800ffac:	e122      	b.n	80101f4 <HAL_DMA_IRQHandler+0x458>
 800ffae:	4a21      	ldr	r2, [pc, #132]	; (8010034 <HAL_DMA_IRQHandler+0x298>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d05b      	beq.n	801006c <HAL_DMA_IRQHandler+0x2d0>
 800ffb4:	4a20      	ldr	r2, [pc, #128]	; (8010038 <HAL_DMA_IRQHandler+0x29c>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d100      	bne.n	800ffbc <HAL_DMA_IRQHandler+0x220>
 800ffba:	e19a      	b.n	80102f2 <HAL_DMA_IRQHandler+0x556>
 800ffbc:	4a1f      	ldr	r2, [pc, #124]	; (801003c <HAL_DMA_IRQHandler+0x2a0>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d100      	bne.n	800ffc4 <HAL_DMA_IRQHandler+0x228>
 800ffc2:	e237      	b.n	8010434 <HAL_DMA_IRQHandler+0x698>
 800ffc4:	4a1e      	ldr	r2, [pc, #120]	; (8010040 <HAL_DMA_IRQHandler+0x2a4>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d100      	bne.n	800ffcc <HAL_DMA_IRQHandler+0x230>
 800ffca:	e239      	b.n	8010440 <HAL_DMA_IRQHandler+0x6a4>
 800ffcc:	4a1d      	ldr	r2, [pc, #116]	; (8010044 <HAL_DMA_IRQHandler+0x2a8>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d100      	bne.n	800ffd4 <HAL_DMA_IRQHandler+0x238>
 800ffd2:	e24f      	b.n	8010474 <HAL_DMA_IRQHandler+0x6d8>
 800ffd4:	4a14      	ldr	r2, [pc, #80]	; (8010028 <HAL_DMA_IRQHandler+0x28c>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d100      	bne.n	800ffdc <HAL_DMA_IRQHandler+0x240>
 800ffda:	e297      	b.n	801050c <HAL_DMA_IRQHandler+0x770>
 800ffdc:	4a1a      	ldr	r2, [pc, #104]	; (8010048 <HAL_DMA_IRQHandler+0x2ac>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d100      	bne.n	800ffe4 <HAL_DMA_IRQHandler+0x248>
 800ffe2:	e107      	b.n	80101f4 <HAL_DMA_IRQHandler+0x458>
 800ffe4:	4a19      	ldr	r2, [pc, #100]	; (801004c <HAL_DMA_IRQHandler+0x2b0>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d040      	beq.n	801006c <HAL_DMA_IRQHandler+0x2d0>
 800ffea:	4a19      	ldr	r2, [pc, #100]	; (8010050 <HAL_DMA_IRQHandler+0x2b4>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d100      	bne.n	800fff2 <HAL_DMA_IRQHandler+0x256>
 800fff0:	e17f      	b.n	80102f2 <HAL_DMA_IRQHandler+0x556>
 800fff2:	4a1a      	ldr	r2, [pc, #104]	; (801005c <HAL_DMA_IRQHandler+0x2c0>)
 800fff4:	1899      	adds	r1, r3, r2
 800fff6:	424a      	negs	r2, r1
 800fff8:	4151      	adcs	r1, r2
 800fffa:	4a1b      	ldr	r2, [pc, #108]	; (8010068 <HAL_DMA_IRQHandler+0x2cc>)
 800fffc:	4249      	negs	r1, r1
 800fffe:	400a      	ands	r2, r1
 8010000:	2180      	movs	r1, #128	; 0x80
 8010002:	0289      	lsls	r1, r1, #10
 8010004:	468c      	mov	ip, r1
 8010006:	4462      	add	r2, ip
 8010008:	e031      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801000a:	0532      	lsls	r2, r6, #20
 801000c:	d500      	bpl.n	8010010 <HAL_DMA_IRQHandler+0x274>
 801000e:	e73c      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010010:	2280      	movs	r2, #128	; 0x80
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	0019      	movs	r1, r3
 8010016:	00d2      	lsls	r2, r2, #3
 8010018:	e093      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801001a:	0532      	lsls	r2, r6, #20
 801001c:	d500      	bpl.n	8010020 <HAL_DMA_IRQHandler+0x284>
 801001e:	e734      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010020:	2280      	movs	r2, #128	; 0x80
 8010022:	6800      	ldr	r0, [r0, #0]
 8010024:	00d2      	lsls	r2, r2, #3
 8010026:	e7b9      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 8010028:	40020080 	.word	0x40020080
 801002c:	40020400 	.word	0x40020400
 8010030:	40020008 	.word	0x40020008
 8010034:	4002001c 	.word	0x4002001c
 8010038:	40020030 	.word	0x40020030
 801003c:	40020044 	.word	0x40020044
 8010040:	40020058 	.word	0x40020058
 8010044:	4002006c 	.word	0x4002006c
 8010048:	40020408 	.word	0x40020408
 801004c:	4002041c 	.word	0x4002041c
 8010050:	40020430 	.word	0x40020430
 8010054:	40020444 	.word	0x40020444
 8010058:	40020000 	.word	0x40020000
 801005c:	bffdfbbc 	.word	0xbffdfbbc
 8010060:	fff88000 	.word	0xfff88000
 8010064:	fffc4000 	.word	0xfffc4000
 8010068:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801006c:	2220      	movs	r2, #32
 801006e:	4002      	ands	r2, r0
 8010070:	1e51      	subs	r1, r2, #1
 8010072:	418a      	sbcs	r2, r1
 8010074:	b2d2      	uxtb	r2, r2
 8010076:	2a00      	cmp	r2, #0
 8010078:	d050      	beq.n	801011c <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801007a:	2202      	movs	r2, #2
 801007c:	6819      	ldr	r1, [r3, #0]
 801007e:	420a      	tst	r2, r1
 8010080:	d04c      	beq.n	801011c <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010082:	6819      	ldr	r1, [r3, #0]
 8010084:	0689      	lsls	r1, r1, #26
 8010086:	d402      	bmi.n	801008e <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010088:	6819      	ldr	r1, [r3, #0]
 801008a:	4391      	bics	r1, r2
 801008c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801008e:	4ab5      	ldr	r2, [pc, #724]	; (8010364 <HAL_DMA_IRQHandler+0x5c8>)
 8010090:	49b5      	ldr	r1, [pc, #724]	; (8010368 <HAL_DMA_IRQHandler+0x5cc>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d800      	bhi.n	8010098 <HAL_DMA_IRQHandler+0x2fc>
 8010096:	e12f      	b.n	80102f8 <HAL_DMA_IRQHandler+0x55c>
 8010098:	428b      	cmp	r3, r1
 801009a:	d100      	bne.n	801009e <HAL_DMA_IRQHandler+0x302>
 801009c:	e20e      	b.n	80104bc <HAL_DMA_IRQHandler+0x720>
 801009e:	49b3      	ldr	r1, [pc, #716]	; (801036c <HAL_DMA_IRQHandler+0x5d0>)
 80100a0:	428b      	cmp	r3, r1
 80100a2:	d100      	bne.n	80100a6 <HAL_DMA_IRQHandler+0x30a>
 80100a4:	e237      	b.n	8010516 <HAL_DMA_IRQHandler+0x77a>
 80100a6:	49b2      	ldr	r1, [pc, #712]	; (8010370 <HAL_DMA_IRQHandler+0x5d4>)
 80100a8:	428b      	cmp	r3, r1
 80100aa:	d100      	bne.n	80100ae <HAL_DMA_IRQHandler+0x312>
 80100ac:	e271      	b.n	8010592 <HAL_DMA_IRQHandler+0x7f6>
 80100ae:	49b1      	ldr	r1, [pc, #708]	; (8010374 <HAL_DMA_IRQHandler+0x5d8>)
 80100b0:	428b      	cmp	r3, r1
 80100b2:	d100      	bne.n	80100b6 <HAL_DMA_IRQHandler+0x31a>
 80100b4:	e1fc      	b.n	80104b0 <HAL_DMA_IRQHandler+0x714>
 80100b6:	49b0      	ldr	r1, [pc, #704]	; (8010378 <HAL_DMA_IRQHandler+0x5dc>)
 80100b8:	428b      	cmp	r3, r1
 80100ba:	d100      	bne.n	80100be <HAL_DMA_IRQHandler+0x322>
 80100bc:	e28a      	b.n	80105d4 <HAL_DMA_IRQHandler+0x838>
 80100be:	49af      	ldr	r1, [pc, #700]	; (801037c <HAL_DMA_IRQHandler+0x5e0>)
 80100c0:	428b      	cmp	r3, r1
 80100c2:	d100      	bne.n	80100c6 <HAL_DMA_IRQHandler+0x32a>
 80100c4:	e2a7      	b.n	8010616 <HAL_DMA_IRQHandler+0x87a>
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d100      	bne.n	80100cc <HAL_DMA_IRQHandler+0x330>
 80100ca:	e2c4      	b.n	8010656 <HAL_DMA_IRQHandler+0x8ba>
 80100cc:	4aac      	ldr	r2, [pc, #688]	; (8010380 <HAL_DMA_IRQHandler+0x5e4>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d100      	bne.n	80100d4 <HAL_DMA_IRQHandler+0x338>
 80100d2:	e1f3      	b.n	80104bc <HAL_DMA_IRQHandler+0x720>
 80100d4:	4aab      	ldr	r2, [pc, #684]	; (8010384 <HAL_DMA_IRQHandler+0x5e8>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d100      	bne.n	80100dc <HAL_DMA_IRQHandler+0x340>
 80100da:	e21c      	b.n	8010516 <HAL_DMA_IRQHandler+0x77a>
 80100dc:	4aaa      	ldr	r2, [pc, #680]	; (8010388 <HAL_DMA_IRQHandler+0x5ec>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d100      	bne.n	80100e4 <HAL_DMA_IRQHandler+0x348>
 80100e2:	e256      	b.n	8010592 <HAL_DMA_IRQHandler+0x7f6>
 80100e4:	4aa9      	ldr	r2, [pc, #676]	; (801038c <HAL_DMA_IRQHandler+0x5f0>)
 80100e6:	4694      	mov	ip, r2
 80100e8:	4463      	add	r3, ip
 80100ea:	1e5a      	subs	r2, r3, #1
 80100ec:	4193      	sbcs	r3, r2
 80100ee:	22f0      	movs	r2, #240	; 0xf0
 80100f0:	425b      	negs	r3, r3
 80100f2:	0252      	lsls	r2, r2, #9
 80100f4:	4013      	ands	r3, r2
 80100f6:	2280      	movs	r2, #128	; 0x80
 80100f8:	0192      	lsls	r2, r2, #6
 80100fa:	4694      	mov	ip, r2
 80100fc:	4463      	add	r3, ip
 80100fe:	4aa4      	ldr	r2, [pc, #656]	; (8010390 <HAL_DMA_IRQHandler+0x5f4>)
 8010100:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010102:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010104:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010106:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010108:	2321      	movs	r3, #33	; 0x21
 801010a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 801010c:	2200      	movs	r2, #0
 801010e:	3b01      	subs	r3, #1
 8010110:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010114:	2b00      	cmp	r3, #0
 8010116:	d001      	beq.n	801011c <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 8010118:	0020      	movs	r0, r4
 801011a:	4798      	blx	r3
}  
 801011c:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801011e:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010120:	489c      	ldr	r0, [pc, #624]	; (8010394 <HAL_DMA_IRQHandler+0x5f8>)
 8010122:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010124:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010126:	432a      	orrs	r2, r5
 8010128:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801012a:	2221      	movs	r2, #33	; 0x21
 801012c:	3503      	adds	r5, #3
 801012e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010130:	2500      	movs	r5, #0
 8010132:	3a01      	subs	r2, #1
 8010134:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010136:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010138:	2a00      	cmp	r2, #0
 801013a:	d000      	beq.n	801013e <HAL_DMA_IRQHandler+0x3a2>
 801013c:	e09b      	b.n	8010276 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801013e:	6800      	ldr	r0, [r0, #0]
 8010140:	2204      	movs	r2, #4
 8010142:	4210      	tst	r0, r2
 8010144:	d050      	beq.n	80101e8 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010146:	2204      	movs	r2, #4
 8010148:	6818      	ldr	r0, [r3, #0]
 801014a:	4202      	tst	r2, r0
 801014c:	d048      	beq.n	80101e0 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801014e:	6818      	ldr	r0, [r3, #0]
 8010150:	0680      	lsls	r0, r0, #26
 8010152:	d402      	bmi.n	801015a <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	4390      	bics	r0, r2
 8010158:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801015a:	4a82      	ldr	r2, [pc, #520]	; (8010364 <HAL_DMA_IRQHandler+0x5c8>)
 801015c:	4291      	cmp	r1, r2
 801015e:	d800      	bhi.n	8010162 <HAL_DMA_IRQHandler+0x3c6>
 8010160:	e11e      	b.n	80103a0 <HAL_DMA_IRQHandler+0x604>
 8010162:	4981      	ldr	r1, [pc, #516]	; (8010368 <HAL_DMA_IRQHandler+0x5cc>)
 8010164:	428b      	cmp	r3, r1
 8010166:	d100      	bne.n	801016a <HAL_DMA_IRQHandler+0x3ce>
 8010168:	e1ac      	b.n	80104c4 <HAL_DMA_IRQHandler+0x728>
 801016a:	4980      	ldr	r1, [pc, #512]	; (801036c <HAL_DMA_IRQHandler+0x5d0>)
 801016c:	428b      	cmp	r3, r1
 801016e:	d100      	bne.n	8010172 <HAL_DMA_IRQHandler+0x3d6>
 8010170:	e1d5      	b.n	801051e <HAL_DMA_IRQHandler+0x782>
 8010172:	497f      	ldr	r1, [pc, #508]	; (8010370 <HAL_DMA_IRQHandler+0x5d4>)
 8010174:	428b      	cmp	r3, r1
 8010176:	d100      	bne.n	801017a <HAL_DMA_IRQHandler+0x3de>
 8010178:	e188      	b.n	801048c <HAL_DMA_IRQHandler+0x6f0>
 801017a:	497e      	ldr	r1, [pc, #504]	; (8010374 <HAL_DMA_IRQHandler+0x5d8>)
 801017c:	428b      	cmp	r3, r1
 801017e:	d100      	bne.n	8010182 <HAL_DMA_IRQHandler+0x3e6>
 8010180:	e20a      	b.n	8010598 <HAL_DMA_IRQHandler+0x7fc>
 8010182:	497d      	ldr	r1, [pc, #500]	; (8010378 <HAL_DMA_IRQHandler+0x5dc>)
 8010184:	428b      	cmp	r3, r1
 8010186:	d100      	bne.n	801018a <HAL_DMA_IRQHandler+0x3ee>
 8010188:	e22d      	b.n	80105e6 <HAL_DMA_IRQHandler+0x84a>
 801018a:	497c      	ldr	r1, [pc, #496]	; (801037c <HAL_DMA_IRQHandler+0x5e0>)
 801018c:	428b      	cmp	r3, r1
 801018e:	d100      	bne.n	8010192 <HAL_DMA_IRQHandler+0x3f6>
 8010190:	e247      	b.n	8010622 <HAL_DMA_IRQHandler+0x886>
 8010192:	4293      	cmp	r3, r2
 8010194:	d100      	bne.n	8010198 <HAL_DMA_IRQHandler+0x3fc>
 8010196:	e264      	b.n	8010662 <HAL_DMA_IRQHandler+0x8c6>
 8010198:	4a79      	ldr	r2, [pc, #484]	; (8010380 <HAL_DMA_IRQHandler+0x5e4>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d100      	bne.n	80101a0 <HAL_DMA_IRQHandler+0x404>
 801019e:	e191      	b.n	80104c4 <HAL_DMA_IRQHandler+0x728>
 80101a0:	4a78      	ldr	r2, [pc, #480]	; (8010384 <HAL_DMA_IRQHandler+0x5e8>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d100      	bne.n	80101a8 <HAL_DMA_IRQHandler+0x40c>
 80101a6:	e1ba      	b.n	801051e <HAL_DMA_IRQHandler+0x782>
 80101a8:	4a77      	ldr	r2, [pc, #476]	; (8010388 <HAL_DMA_IRQHandler+0x5ec>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d100      	bne.n	80101b0 <HAL_DMA_IRQHandler+0x414>
 80101ae:	e16d      	b.n	801048c <HAL_DMA_IRQHandler+0x6f0>
 80101b0:	4a76      	ldr	r2, [pc, #472]	; (801038c <HAL_DMA_IRQHandler+0x5f0>)
 80101b2:	189a      	adds	r2, r3, r2
 80101b4:	1e51      	subs	r1, r2, #1
 80101b6:	418a      	sbcs	r2, r1
 80101b8:	21f0      	movs	r1, #240	; 0xf0
 80101ba:	4252      	negs	r2, r2
 80101bc:	0289      	lsls	r1, r1, #10
 80101be:	400a      	ands	r2, r1
 80101c0:	2180      	movs	r1, #128	; 0x80
 80101c2:	01c9      	lsls	r1, r1, #7
 80101c4:	468c      	mov	ip, r1
 80101c6:	4462      	add	r2, ip
 80101c8:	4971      	ldr	r1, [pc, #452]	; (8010390 <HAL_DMA_IRQHandler+0x5f4>)
 80101ca:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80101cc:	2221      	movs	r2, #33	; 0x21
 80101ce:	2111      	movs	r1, #17
 80101d0:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80101d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80101d4:	2a00      	cmp	r2, #0
 80101d6:	d100      	bne.n	80101da <HAL_DMA_IRQHandler+0x43e>
 80101d8:	e6e3      	b.n	800ffa2 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 80101da:	0020      	movs	r0, r4
 80101dc:	4790      	blx	r2
 80101de:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80101e0:	4a60      	ldr	r2, [pc, #384]	; (8010364 <HAL_DMA_IRQHandler+0x5c8>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d900      	bls.n	80101e8 <HAL_DMA_IRQHandler+0x44c>
 80101e6:	e6dc      	b.n	800ffa2 <HAL_DMA_IRQHandler+0x206>
 80101e8:	4a6a      	ldr	r2, [pc, #424]	; (8010394 <HAL_DMA_IRQHandler+0x5f8>)
 80101ea:	6810      	ldr	r0, [r2, #0]
 80101ec:	4a5e      	ldr	r2, [pc, #376]	; (8010368 <HAL_DMA_IRQHandler+0x5cc>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d000      	beq.n	80101f4 <HAL_DMA_IRQHandler+0x458>
 80101f2:	e6dc      	b.n	800ffae <HAL_DMA_IRQHandler+0x212>
 80101f4:	2202      	movs	r2, #2
 80101f6:	e73a      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80101f8:	42ab      	cmp	r3, r5
 80101fa:	d090      	beq.n	801011e <HAL_DMA_IRQHandler+0x382>
 80101fc:	4a5b      	ldr	r2, [pc, #364]	; (801036c <HAL_DMA_IRQHandler+0x5d0>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d100      	bne.n	8010204 <HAL_DMA_IRQHandler+0x468>
 8010202:	e1a1      	b.n	8010548 <HAL_DMA_IRQHandler+0x7ac>
 8010204:	4a5a      	ldr	r2, [pc, #360]	; (8010370 <HAL_DMA_IRQHandler+0x5d4>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d100      	bne.n	801020c <HAL_DMA_IRQHandler+0x470>
 801020a:	e13c      	b.n	8010486 <HAL_DMA_IRQHandler+0x6ea>
 801020c:	4a59      	ldr	r2, [pc, #356]	; (8010374 <HAL_DMA_IRQHandler+0x5d8>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d100      	bne.n	8010214 <HAL_DMA_IRQHandler+0x478>
 8010212:	e1ca      	b.n	80105aa <HAL_DMA_IRQHandler+0x80e>
 8010214:	4a58      	ldr	r2, [pc, #352]	; (8010378 <HAL_DMA_IRQHandler+0x5dc>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d100      	bne.n	801021c <HAL_DMA_IRQHandler+0x480>
 801021a:	e1de      	b.n	80105da <HAL_DMA_IRQHandler+0x83e>
 801021c:	4a57      	ldr	r2, [pc, #348]	; (801037c <HAL_DMA_IRQHandler+0x5e0>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d100      	bne.n	8010224 <HAL_DMA_IRQHandler+0x488>
 8010222:	e201      	b.n	8010628 <HAL_DMA_IRQHandler+0x88c>
 8010224:	4283      	cmp	r3, r0
 8010226:	d100      	bne.n	801022a <HAL_DMA_IRQHandler+0x48e>
 8010228:	e21e      	b.n	8010668 <HAL_DMA_IRQHandler+0x8cc>
 801022a:	4a55      	ldr	r2, [pc, #340]	; (8010380 <HAL_DMA_IRQHandler+0x5e4>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d100      	bne.n	8010232 <HAL_DMA_IRQHandler+0x496>
 8010230:	e22d      	b.n	801068e <HAL_DMA_IRQHandler+0x8f2>
 8010232:	4a54      	ldr	r2, [pc, #336]	; (8010384 <HAL_DMA_IRQHandler+0x5e8>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d100      	bne.n	801023a <HAL_DMA_IRQHandler+0x49e>
 8010238:	e22d      	b.n	8010696 <HAL_DMA_IRQHandler+0x8fa>
 801023a:	4a53      	ldr	r2, [pc, #332]	; (8010388 <HAL_DMA_IRQHandler+0x5ec>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d100      	bne.n	8010242 <HAL_DMA_IRQHandler+0x4a6>
 8010240:	e121      	b.n	8010486 <HAL_DMA_IRQHandler+0x6ea>
 8010242:	4a52      	ldr	r2, [pc, #328]	; (801038c <HAL_DMA_IRQHandler+0x5f0>)
 8010244:	189a      	adds	r2, r3, r2
 8010246:	4250      	negs	r0, r2
 8010248:	4142      	adcs	r2, r0
 801024a:	4853      	ldr	r0, [pc, #332]	; (8010398 <HAL_DMA_IRQHandler+0x5fc>)
 801024c:	4252      	negs	r2, r2
 801024e:	4002      	ands	r2, r0
 8010250:	2080      	movs	r0, #128	; 0x80
 8010252:	0300      	lsls	r0, r0, #12
 8010254:	4684      	mov	ip, r0
 8010256:	4462      	add	r2, ip
 8010258:	484e      	ldr	r0, [pc, #312]	; (8010394 <HAL_DMA_IRQHandler+0x5f8>)
 801025a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801025c:	2001      	movs	r0, #1
 801025e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010260:	4302      	orrs	r2, r0
 8010262:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010264:	2221      	movs	r2, #33	; 0x21
 8010266:	3003      	adds	r0, #3
 8010268:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801026a:	2000      	movs	r0, #0
 801026c:	3a01      	subs	r2, #1
 801026e:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010272:	2a00      	cmp	r2, #0
 8010274:	d007      	beq.n	8010286 <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 8010276:	0020      	movs	r0, r4
 8010278:	4790      	blx	r2
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801027e:	4a39      	ldr	r2, [pc, #228]	; (8010364 <HAL_DMA_IRQHandler+0x5c8>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d900      	bls.n	8010286 <HAL_DMA_IRQHandler+0x4ea>
 8010284:	e64f      	b.n	800ff26 <HAL_DMA_IRQHandler+0x18a>
 8010286:	4a43      	ldr	r2, [pc, #268]	; (8010394 <HAL_DMA_IRQHandler+0x5f8>)
 8010288:	6810      	ldr	r0, [r2, #0]
 801028a:	4a37      	ldr	r2, [pc, #220]	; (8010368 <HAL_DMA_IRQHandler+0x5cc>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d100      	bne.n	8010292 <HAL_DMA_IRQHandler+0x4f6>
 8010290:	e756      	b.n	8010140 <HAL_DMA_IRQHandler+0x3a4>
 8010292:	4a36      	ldr	r2, [pc, #216]	; (801036c <HAL_DMA_IRQHandler+0x5d0>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d100      	bne.n	801029a <HAL_DMA_IRQHandler+0x4fe>
 8010298:	e0c4      	b.n	8010424 <HAL_DMA_IRQHandler+0x688>
 801029a:	4a35      	ldr	r2, [pc, #212]	; (8010370 <HAL_DMA_IRQHandler+0x5d4>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d100      	bne.n	80102a2 <HAL_DMA_IRQHandler+0x506>
 80102a0:	e0cb      	b.n	801043a <HAL_DMA_IRQHandler+0x69e>
 80102a2:	4a34      	ldr	r2, [pc, #208]	; (8010374 <HAL_DMA_IRQHandler+0x5d8>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d100      	bne.n	80102aa <HAL_DMA_IRQHandler+0x50e>
 80102a8:	e0d2      	b.n	8010450 <HAL_DMA_IRQHandler+0x6b4>
 80102aa:	4a33      	ldr	r2, [pc, #204]	; (8010378 <HAL_DMA_IRQHandler+0x5dc>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d100      	bne.n	80102b2 <HAL_DMA_IRQHandler+0x516>
 80102b0:	e5e4      	b.n	800fe7c <HAL_DMA_IRQHandler+0xe0>
 80102b2:	4a32      	ldr	r2, [pc, #200]	; (801037c <HAL_DMA_IRQHandler+0x5e0>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d100      	bne.n	80102ba <HAL_DMA_IRQHandler+0x51e>
 80102b8:	e15e      	b.n	8010578 <HAL_DMA_IRQHandler+0x7dc>
 80102ba:	4a2a      	ldr	r2, [pc, #168]	; (8010364 <HAL_DMA_IRQHandler+0x5c8>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d100      	bne.n	80102c2 <HAL_DMA_IRQHandler+0x526>
 80102c0:	e0ec      	b.n	801049c <HAL_DMA_IRQHandler+0x700>
 80102c2:	4a2f      	ldr	r2, [pc, #188]	; (8010380 <HAL_DMA_IRQHandler+0x5e4>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d100      	bne.n	80102ca <HAL_DMA_IRQHandler+0x52e>
 80102c8:	e73a      	b.n	8010140 <HAL_DMA_IRQHandler+0x3a4>
 80102ca:	4a2e      	ldr	r2, [pc, #184]	; (8010384 <HAL_DMA_IRQHandler+0x5e8>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d100      	bne.n	80102d2 <HAL_DMA_IRQHandler+0x536>
 80102d0:	e0a8      	b.n	8010424 <HAL_DMA_IRQHandler+0x688>
 80102d2:	4a2d      	ldr	r2, [pc, #180]	; (8010388 <HAL_DMA_IRQHandler+0x5ec>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d100      	bne.n	80102da <HAL_DMA_IRQHandler+0x53e>
 80102d8:	e0af      	b.n	801043a <HAL_DMA_IRQHandler+0x69e>
 80102da:	4a2c      	ldr	r2, [pc, #176]	; (801038c <HAL_DMA_IRQHandler+0x5f0>)
 80102dc:	189a      	adds	r2, r3, r2
 80102de:	4255      	negs	r5, r2
 80102e0:	416a      	adcs	r2, r5
 80102e2:	4d2e      	ldr	r5, [pc, #184]	; (801039c <HAL_DMA_IRQHandler+0x600>)
 80102e4:	4252      	negs	r2, r2
 80102e6:	402a      	ands	r2, r5
 80102e8:	2580      	movs	r5, #128	; 0x80
 80102ea:	02ed      	lsls	r5, r5, #11
 80102ec:	46ac      	mov	ip, r5
 80102ee:	4462      	add	r2, ip
 80102f0:	e727      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80102f2:	2280      	movs	r2, #128	; 0x80
 80102f4:	0092      	lsls	r2, r2, #2
 80102f6:	e6ba      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80102f8:	428b      	cmp	r3, r1
 80102fa:	d100      	bne.n	80102fe <HAL_DMA_IRQHandler+0x562>
 80102fc:	e0e0      	b.n	80104c0 <HAL_DMA_IRQHandler+0x724>
 80102fe:	491b      	ldr	r1, [pc, #108]	; (801036c <HAL_DMA_IRQHandler+0x5d0>)
 8010300:	428b      	cmp	r3, r1
 8010302:	d100      	bne.n	8010306 <HAL_DMA_IRQHandler+0x56a>
 8010304:	e105      	b.n	8010512 <HAL_DMA_IRQHandler+0x776>
 8010306:	491a      	ldr	r1, [pc, #104]	; (8010370 <HAL_DMA_IRQHandler+0x5d4>)
 8010308:	428b      	cmp	r3, r1
 801030a:	d100      	bne.n	801030e <HAL_DMA_IRQHandler+0x572>
 801030c:	e13e      	b.n	801058c <HAL_DMA_IRQHandler+0x7f0>
 801030e:	4919      	ldr	r1, [pc, #100]	; (8010374 <HAL_DMA_IRQHandler+0x5d8>)
 8010310:	428b      	cmp	r3, r1
 8010312:	d100      	bne.n	8010316 <HAL_DMA_IRQHandler+0x57a>
 8010314:	e0cf      	b.n	80104b6 <HAL_DMA_IRQHandler+0x71a>
 8010316:	4918      	ldr	r1, [pc, #96]	; (8010378 <HAL_DMA_IRQHandler+0x5dc>)
 8010318:	428b      	cmp	r3, r1
 801031a:	d100      	bne.n	801031e <HAL_DMA_IRQHandler+0x582>
 801031c:	e157      	b.n	80105ce <HAL_DMA_IRQHandler+0x832>
 801031e:	4917      	ldr	r1, [pc, #92]	; (801037c <HAL_DMA_IRQHandler+0x5e0>)
 8010320:	428b      	cmp	r3, r1
 8010322:	d100      	bne.n	8010326 <HAL_DMA_IRQHandler+0x58a>
 8010324:	e174      	b.n	8010610 <HAL_DMA_IRQHandler+0x874>
 8010326:	4293      	cmp	r3, r2
 8010328:	d100      	bne.n	801032c <HAL_DMA_IRQHandler+0x590>
 801032a:	e197      	b.n	801065c <HAL_DMA_IRQHandler+0x8c0>
 801032c:	4a14      	ldr	r2, [pc, #80]	; (8010380 <HAL_DMA_IRQHandler+0x5e4>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d100      	bne.n	8010334 <HAL_DMA_IRQHandler+0x598>
 8010332:	e0c5      	b.n	80104c0 <HAL_DMA_IRQHandler+0x724>
 8010334:	4a13      	ldr	r2, [pc, #76]	; (8010384 <HAL_DMA_IRQHandler+0x5e8>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d100      	bne.n	801033c <HAL_DMA_IRQHandler+0x5a0>
 801033a:	e0ea      	b.n	8010512 <HAL_DMA_IRQHandler+0x776>
 801033c:	4a12      	ldr	r2, [pc, #72]	; (8010388 <HAL_DMA_IRQHandler+0x5ec>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d100      	bne.n	8010344 <HAL_DMA_IRQHandler+0x5a8>
 8010342:	e123      	b.n	801058c <HAL_DMA_IRQHandler+0x7f0>
 8010344:	4a11      	ldr	r2, [pc, #68]	; (801038c <HAL_DMA_IRQHandler+0x5f0>)
 8010346:	4694      	mov	ip, r2
 8010348:	4463      	add	r3, ip
 801034a:	1e5a      	subs	r2, r3, #1
 801034c:	4193      	sbcs	r3, r2
 801034e:	22f0      	movs	r2, #240	; 0xf0
 8010350:	425b      	negs	r3, r3
 8010352:	0252      	lsls	r2, r2, #9
 8010354:	4013      	ands	r3, r2
 8010356:	2280      	movs	r2, #128	; 0x80
 8010358:	0192      	lsls	r2, r2, #6
 801035a:	4694      	mov	ip, r2
 801035c:	4463      	add	r3, ip
 801035e:	4a0d      	ldr	r2, [pc, #52]	; (8010394 <HAL_DMA_IRQHandler+0x5f8>)
 8010360:	6053      	str	r3, [r2, #4]
 8010362:	e6ce      	b.n	8010102 <HAL_DMA_IRQHandler+0x366>
 8010364:	40020080 	.word	0x40020080
 8010368:	40020008 	.word	0x40020008
 801036c:	4002001c 	.word	0x4002001c
 8010370:	40020030 	.word	0x40020030
 8010374:	40020044 	.word	0x40020044
 8010378:	40020058 	.word	0x40020058
 801037c:	4002006c 	.word	0x4002006c
 8010380:	40020408 	.word	0x40020408
 8010384:	4002041c 	.word	0x4002041c
 8010388:	40020430 	.word	0x40020430
 801038c:	bffdfbbc 	.word	0xbffdfbbc
 8010390:	40020400 	.word	0x40020400
 8010394:	40020000 	.word	0x40020000
 8010398:	fff88000 	.word	0xfff88000
 801039c:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80103a0:	49c2      	ldr	r1, [pc, #776]	; (80106ac <HAL_DMA_IRQHandler+0x910>)
 80103a2:	428b      	cmp	r3, r1
 80103a4:	d100      	bne.n	80103a8 <HAL_DMA_IRQHandler+0x60c>
 80103a6:	e08f      	b.n	80104c8 <HAL_DMA_IRQHandler+0x72c>
 80103a8:	49c1      	ldr	r1, [pc, #772]	; (80106b0 <HAL_DMA_IRQHandler+0x914>)
 80103aa:	428b      	cmp	r3, r1
 80103ac:	d100      	bne.n	80103b0 <HAL_DMA_IRQHandler+0x614>
 80103ae:	e0b4      	b.n	801051a <HAL_DMA_IRQHandler+0x77e>
 80103b0:	49c0      	ldr	r1, [pc, #768]	; (80106b4 <HAL_DMA_IRQHandler+0x918>)
 80103b2:	428b      	cmp	r3, r1
 80103b4:	d064      	beq.n	8010480 <HAL_DMA_IRQHandler+0x6e4>
 80103b6:	49c0      	ldr	r1, [pc, #768]	; (80106b8 <HAL_DMA_IRQHandler+0x91c>)
 80103b8:	428b      	cmp	r3, r1
 80103ba:	d100      	bne.n	80103be <HAL_DMA_IRQHandler+0x622>
 80103bc:	e0ef      	b.n	801059e <HAL_DMA_IRQHandler+0x802>
 80103be:	49bf      	ldr	r1, [pc, #764]	; (80106bc <HAL_DMA_IRQHandler+0x920>)
 80103c0:	428b      	cmp	r3, r1
 80103c2:	d100      	bne.n	80103c6 <HAL_DMA_IRQHandler+0x62a>
 80103c4:	e112      	b.n	80105ec <HAL_DMA_IRQHandler+0x850>
 80103c6:	49be      	ldr	r1, [pc, #760]	; (80106c0 <HAL_DMA_IRQHandler+0x924>)
 80103c8:	428b      	cmp	r3, r1
 80103ca:	d100      	bne.n	80103ce <HAL_DMA_IRQHandler+0x632>
 80103cc:	e12f      	b.n	801062e <HAL_DMA_IRQHandler+0x892>
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d100      	bne.n	80103d4 <HAL_DMA_IRQHandler+0x638>
 80103d2:	e14c      	b.n	801066e <HAL_DMA_IRQHandler+0x8d2>
 80103d4:	4abb      	ldr	r2, [pc, #748]	; (80106c4 <HAL_DMA_IRQHandler+0x928>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d076      	beq.n	80104c8 <HAL_DMA_IRQHandler+0x72c>
 80103da:	4abb      	ldr	r2, [pc, #748]	; (80106c8 <HAL_DMA_IRQHandler+0x92c>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d100      	bne.n	80103e2 <HAL_DMA_IRQHandler+0x646>
 80103e0:	e09b      	b.n	801051a <HAL_DMA_IRQHandler+0x77e>
 80103e2:	4aba      	ldr	r2, [pc, #744]	; (80106cc <HAL_DMA_IRQHandler+0x930>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d04b      	beq.n	8010480 <HAL_DMA_IRQHandler+0x6e4>
 80103e8:	4ab9      	ldr	r2, [pc, #740]	; (80106d0 <HAL_DMA_IRQHandler+0x934>)
 80103ea:	189a      	adds	r2, r3, r2
 80103ec:	1e51      	subs	r1, r2, #1
 80103ee:	418a      	sbcs	r2, r1
 80103f0:	21f0      	movs	r1, #240	; 0xf0
 80103f2:	4252      	negs	r2, r2
 80103f4:	0289      	lsls	r1, r1, #10
 80103f6:	400a      	ands	r2, r1
 80103f8:	2180      	movs	r1, #128	; 0x80
 80103fa:	01c9      	lsls	r1, r1, #7
 80103fc:	468c      	mov	ip, r1
 80103fe:	4462      	add	r2, ip
 8010400:	49b4      	ldr	r1, [pc, #720]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 8010402:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010404:	2221      	movs	r2, #33	; 0x21
 8010406:	2111      	movs	r1, #17
 8010408:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801040a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801040c:	2a00      	cmp	r2, #0
 801040e:	d100      	bne.n	8010412 <HAL_DMA_IRQHandler+0x676>
 8010410:	e6ea      	b.n	80101e8 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 8010412:	0020      	movs	r0, r4
 8010414:	4790      	blx	r2
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	e6e2      	b.n	80101e0 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801041a:	0632      	lsls	r2, r6, #24
 801041c:	d500      	bpl.n	8010420 <HAL_DMA_IRQHandler+0x684>
 801041e:	e534      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010420:	0019      	movs	r1, r3
 8010422:	6800      	ldr	r0, [r0, #0]
 8010424:	2240      	movs	r2, #64	; 0x40
 8010426:	e68c      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010428:	0632      	lsls	r2, r6, #24
 801042a:	d500      	bpl.n	801042e <HAL_DMA_IRQHandler+0x692>
 801042c:	e52d      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801042e:	6800      	ldr	r0, [r0, #0]
 8010430:	2240      	movs	r2, #64	; 0x40
 8010432:	e5b3      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010434:	2280      	movs	r2, #128	; 0x80
 8010436:	0192      	lsls	r2, r2, #6
 8010438:	e619      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801043a:	2280      	movs	r2, #128	; 0x80
 801043c:	00d2      	lsls	r2, r2, #3
 801043e:	e680      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010440:	2280      	movs	r2, #128	; 0x80
 8010442:	0292      	lsls	r2, r2, #10
 8010444:	e613      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010446:	0432      	lsls	r2, r6, #16
 8010448:	d500      	bpl.n	801044c <HAL_DMA_IRQHandler+0x6b0>
 801044a:	e51e      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801044c:	4aa1      	ldr	r2, [pc, #644]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 801044e:	6810      	ldr	r0, [r2, #0]
 8010450:	2280      	movs	r2, #128	; 0x80
 8010452:	01d2      	lsls	r2, r2, #7
 8010454:	e675      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010456:	0432      	lsls	r2, r6, #16
 8010458:	d500      	bpl.n	801045c <HAL_DMA_IRQHandler+0x6c0>
 801045a:	e516      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801045c:	2280      	movs	r2, #128	; 0x80
 801045e:	6800      	ldr	r0, [r0, #0]
 8010460:	0019      	movs	r1, r3
 8010462:	01d2      	lsls	r2, r2, #7
 8010464:	e66d      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010466:	0432      	lsls	r2, r6, #16
 8010468:	d500      	bpl.n	801046c <HAL_DMA_IRQHandler+0x6d0>
 801046a:	e50e      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801046c:	2280      	movs	r2, #128	; 0x80
 801046e:	6800      	ldr	r0, [r0, #0]
 8010470:	01d2      	lsls	r2, r2, #7
 8010472:	e593      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010474:	2280      	movs	r2, #128	; 0x80
 8010476:	0392      	lsls	r2, r2, #14
 8010478:	e5f9      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801047a:	2280      	movs	r2, #128	; 0x80
 801047c:	0112      	lsls	r2, r2, #4
 801047e:	e542      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010480:	2280      	movs	r2, #128	; 0x80
 8010482:	00d2      	lsls	r2, r2, #3
 8010484:	e7bc      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010486:	2280      	movs	r2, #128	; 0x80
 8010488:	0112      	lsls	r2, r2, #4
 801048a:	e6e5      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801048c:	2280      	movs	r2, #128	; 0x80
 801048e:	00d2      	lsls	r2, r2, #3
 8010490:	e69a      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010492:	0132      	lsls	r2, r6, #4
 8010494:	d500      	bpl.n	8010498 <HAL_DMA_IRQHandler+0x6fc>
 8010496:	e4f8      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010498:	0019      	movs	r1, r3
 801049a:	6800      	ldr	r0, [r0, #0]
 801049c:	2280      	movs	r2, #128	; 0x80
 801049e:	04d2      	lsls	r2, r2, #19
 80104a0:	e64f      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80104a2:	0132      	lsls	r2, r6, #4
 80104a4:	d500      	bpl.n	80104a8 <HAL_DMA_IRQHandler+0x70c>
 80104a6:	e4f0      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104a8:	6800      	ldr	r0, [r0, #0]
 80104aa:	2280      	movs	r2, #128	; 0x80
 80104ac:	04d2      	lsls	r2, r2, #19
 80104ae:	e575      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80104b0:	2380      	movs	r3, #128	; 0x80
 80104b2:	019b      	lsls	r3, r3, #6
 80104b4:	e623      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
 80104b6:	2380      	movs	r3, #128	; 0x80
 80104b8:	019b      	lsls	r3, r3, #6
 80104ba:	e750      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
 80104bc:	2302      	movs	r3, #2
 80104be:	e61e      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
 80104c0:	2302      	movs	r3, #2
 80104c2:	e74c      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80104c4:	2204      	movs	r2, #4
 80104c6:	e67f      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
 80104c8:	2204      	movs	r2, #4
 80104ca:	e799      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80104cc:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80104ce:	4882      	ldr	r0, [pc, #520]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 80104d0:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80104d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80104d4:	432a      	orrs	r2, r5
 80104d6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80104d8:	2221      	movs	r2, #33	; 0x21
 80104da:	3503      	adds	r5, #3
 80104dc:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80104de:	2500      	movs	r5, #0
 80104e0:	3a01      	subs	r2, #1
 80104e2:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80104e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	d000      	beq.n	80104ec <HAL_DMA_IRQHandler+0x750>
 80104ea:	e6c4      	b.n	8010276 <HAL_DMA_IRQHandler+0x4da>
 80104ec:	e554      	b.n	800ff98 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80104ee:	0332      	lsls	r2, r6, #12
 80104f0:	d500      	bpl.n	80104f4 <HAL_DMA_IRQHandler+0x758>
 80104f2:	e4ca      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104f4:	2280      	movs	r2, #128	; 0x80
 80104f6:	6800      	ldr	r0, [r0, #0]
 80104f8:	02d2      	lsls	r2, r2, #11
 80104fa:	e54f      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80104fc:	0332      	lsls	r2, r6, #12
 80104fe:	d500      	bpl.n	8010502 <HAL_DMA_IRQHandler+0x766>
 8010500:	e4c3      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010502:	2280      	movs	r2, #128	; 0x80
 8010504:	6800      	ldr	r0, [r0, #0]
 8010506:	0019      	movs	r1, r3
 8010508:	02d2      	lsls	r2, r2, #11
 801050a:	e61a      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801050c:	2280      	movs	r2, #128	; 0x80
 801050e:	0492      	lsls	r2, r2, #18
 8010510:	e5ad      	b.n	801006e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010512:	2320      	movs	r3, #32
 8010514:	e723      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
 8010516:	2320      	movs	r3, #32
 8010518:	e5f1      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801051a:	2240      	movs	r2, #64	; 0x40
 801051c:	e770      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
 801051e:	2240      	movs	r2, #64	; 0x40
 8010520:	e652      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010522:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010524:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010526:	486c      	ldr	r0, [pc, #432]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 8010528:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801052a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801052c:	432a      	orrs	r2, r5
 801052e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010530:	2221      	movs	r2, #33	; 0x21
 8010532:	3503      	adds	r5, #3
 8010534:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010536:	2500      	movs	r5, #0
 8010538:	3a01      	subs	r2, #1
 801053a:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801053c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801053e:	2a00      	cmp	r2, #0
 8010540:	d000      	beq.n	8010544 <HAL_DMA_IRQHandler+0x7a8>
 8010542:	e698      	b.n	8010276 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010544:	6800      	ldr	r0, [r0, #0]
 8010546:	e4f4      	b.n	800ff32 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010548:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801054a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801054c:	4861      	ldr	r0, [pc, #388]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 801054e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010550:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010552:	432a      	orrs	r2, r5
 8010554:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010556:	2221      	movs	r2, #33	; 0x21
 8010558:	3503      	adds	r5, #3
 801055a:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801055c:	2500      	movs	r5, #0
 801055e:	3a01      	subs	r2, #1
 8010560:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010562:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010564:	2a00      	cmp	r2, #0
 8010566:	d000      	beq.n	801056a <HAL_DMA_IRQHandler+0x7ce>
 8010568:	e685      	b.n	8010276 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801056a:	6800      	ldr	r0, [r0, #0]
 801056c:	e691      	b.n	8010292 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801056e:	0232      	lsls	r2, r6, #8
 8010570:	d500      	bpl.n	8010574 <HAL_DMA_IRQHandler+0x7d8>
 8010572:	e48a      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010574:	0019      	movs	r1, r3
 8010576:	6800      	ldr	r0, [r0, #0]
 8010578:	2280      	movs	r2, #128	; 0x80
 801057a:	03d2      	lsls	r2, r2, #15
 801057c:	e5e1      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801057e:	0232      	lsls	r2, r6, #8
 8010580:	d500      	bpl.n	8010584 <HAL_DMA_IRQHandler+0x7e8>
 8010582:	e482      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010584:	6800      	ldr	r0, [r0, #0]
 8010586:	2280      	movs	r2, #128	; 0x80
 8010588:	03d2      	lsls	r2, r2, #15
 801058a:	e507      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801058c:	2380      	movs	r3, #128	; 0x80
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	e6e5      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
 8010592:	2380      	movs	r3, #128	; 0x80
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	e5b2      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010598:	2280      	movs	r2, #128	; 0x80
 801059a:	01d2      	lsls	r2, r2, #7
 801059c:	e614      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
 801059e:	2280      	movs	r2, #128	; 0x80
 80105a0:	01d2      	lsls	r2, r2, #7
 80105a2:	e72d      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105a4:	2280      	movs	r2, #128	; 0x80
 80105a6:	0212      	lsls	r2, r2, #8
 80105a8:	e4ad      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
 80105aa:	2280      	movs	r2, #128	; 0x80
 80105ac:	0212      	lsls	r2, r2, #8
 80105ae:	e653      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105b0:	0732      	lsls	r2, r6, #28
 80105b2:	d500      	bpl.n	80105b6 <HAL_DMA_IRQHandler+0x81a>
 80105b4:	e469      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105b6:	4a47      	ldr	r2, [pc, #284]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 80105b8:	6810      	ldr	r0, [r2, #0]
 80105ba:	2204      	movs	r2, #4
 80105bc:	e5c1      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105be:	0732      	lsls	r2, r6, #28
 80105c0:	d500      	bpl.n	80105c4 <HAL_DMA_IRQHandler+0x828>
 80105c2:	e462      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105c4:	4a44      	ldr	r2, [pc, #272]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 80105c6:	493f      	ldr	r1, [pc, #252]	; (80106c4 <HAL_DMA_IRQHandler+0x928>)
 80105c8:	6810      	ldr	r0, [r2, #0]
 80105ca:	2204      	movs	r2, #4
 80105cc:	e4e6      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80105ce:	2380      	movs	r3, #128	; 0x80
 80105d0:	029b      	lsls	r3, r3, #10
 80105d2:	e6c4      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
 80105d4:	2380      	movs	r3, #128	; 0x80
 80105d6:	029b      	lsls	r3, r3, #10
 80105d8:	e591      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105da:	2280      	movs	r2, #128	; 0x80
 80105dc:	0312      	lsls	r2, r2, #12
 80105de:	e63b      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
 80105e0:	2280      	movs	r2, #128	; 0x80
 80105e2:	0312      	lsls	r2, r2, #12
 80105e4:	e48f      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80105e6:	2280      	movs	r2, #128	; 0x80
 80105e8:	02d2      	lsls	r2, r2, #11
 80105ea:	e5ed      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
 80105ec:	2280      	movs	r2, #128	; 0x80
 80105ee:	02d2      	lsls	r2, r2, #11
 80105f0:	e706      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105f2:	0632      	lsls	r2, r6, #24
 80105f4:	d500      	bpl.n	80105f8 <HAL_DMA_IRQHandler+0x85c>
 80105f6:	e448      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105f8:	4a36      	ldr	r2, [pc, #216]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 80105fa:	6810      	ldr	r0, [r2, #0]
 80105fc:	2240      	movs	r2, #64	; 0x40
 80105fe:	e5a0      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010600:	0632      	lsls	r2, r6, #24
 8010602:	d500      	bpl.n	8010606 <HAL_DMA_IRQHandler+0x86a>
 8010604:	e441      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010606:	4a34      	ldr	r2, [pc, #208]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 8010608:	492f      	ldr	r1, [pc, #188]	; (80106c8 <HAL_DMA_IRQHandler+0x92c>)
 801060a:	6810      	ldr	r0, [r2, #0]
 801060c:	2240      	movs	r2, #64	; 0x40
 801060e:	e4c5      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010610:	2380      	movs	r3, #128	; 0x80
 8010612:	039b      	lsls	r3, r3, #14
 8010614:	e6a3      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
 8010616:	2380      	movs	r3, #128	; 0x80
 8010618:	039b      	lsls	r3, r3, #14
 801061a:	e570      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801061c:	2280      	movs	r2, #128	; 0x80
 801061e:	0412      	lsls	r2, r2, #16
 8010620:	e471      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010622:	2280      	movs	r2, #128	; 0x80
 8010624:	03d2      	lsls	r2, r2, #15
 8010626:	e5cf      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010628:	2280      	movs	r2, #128	; 0x80
 801062a:	0412      	lsls	r2, r2, #16
 801062c:	e614      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801062e:	2280      	movs	r2, #128	; 0x80
 8010630:	03d2      	lsls	r2, r2, #15
 8010632:	e6e5      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010634:	0532      	lsls	r2, r6, #20
 8010636:	d500      	bpl.n	801063a <HAL_DMA_IRQHandler+0x89e>
 8010638:	e427      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801063a:	4a26      	ldr	r2, [pc, #152]	; (80106d4 <HAL_DMA_IRQHandler+0x938>)
 801063c:	6810      	ldr	r0, [r2, #0]
 801063e:	2280      	movs	r2, #128	; 0x80
 8010640:	00d2      	lsls	r2, r2, #3
 8010642:	e57e      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010644:	0532      	lsls	r2, r6, #20
 8010646:	d500      	bpl.n	801064a <HAL_DMA_IRQHandler+0x8ae>
 8010648:	e41f      	b.n	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801064a:	4a23      	ldr	r2, [pc, #140]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 801064c:	0019      	movs	r1, r3
 801064e:	6810      	ldr	r0, [r2, #0]
 8010650:	2280      	movs	r2, #128	; 0x80
 8010652:	00d2      	lsls	r2, r2, #3
 8010654:	e4a2      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010656:	2380      	movs	r3, #128	; 0x80
 8010658:	049b      	lsls	r3, r3, #18
 801065a:	e550      	b.n	80100fe <HAL_DMA_IRQHandler+0x362>
 801065c:	2380      	movs	r3, #128	; 0x80
 801065e:	049b      	lsls	r3, r3, #18
 8010660:	e67d      	b.n	801035e <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010662:	2280      	movs	r2, #128	; 0x80
 8010664:	04d2      	lsls	r2, r2, #19
 8010666:	e5af      	b.n	80101c8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010668:	2280      	movs	r2, #128	; 0x80
 801066a:	0512      	lsls	r2, r2, #20
 801066c:	e5f4      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801066e:	2280      	movs	r2, #128	; 0x80
 8010670:	04d2      	lsls	r2, r2, #19
 8010672:	e6c5      	b.n	8010400 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010674:	2280      	movs	r2, #128	; 0x80
 8010676:	0512      	lsls	r2, r2, #20
 8010678:	e445      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801067a:	0432      	lsls	r2, r6, #16
 801067c:	d501      	bpl.n	8010682 <HAL_DMA_IRQHandler+0x8e6>
 801067e:	f7ff fc04 	bl	800fe8a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010682:	0019      	movs	r1, r3
 8010684:	4a14      	ldr	r2, [pc, #80]	; (80106d8 <HAL_DMA_IRQHandler+0x93c>)
 8010686:	6810      	ldr	r0, [r2, #0]
 8010688:	2280      	movs	r2, #128	; 0x80
 801068a:	01d2      	lsls	r2, r2, #7
 801068c:	e486      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801068e:	2208      	movs	r2, #8
 8010690:	e5e2      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
 8010692:	2208      	movs	r2, #8
 8010694:	e437      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
 8010696:	2280      	movs	r2, #128	; 0x80
 8010698:	e5de      	b.n	8010258 <HAL_DMA_IRQHandler+0x4bc>
 801069a:	2280      	movs	r2, #128	; 0x80
 801069c:	e433      	b.n	800ff06 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801069e:	6800      	ldr	r0, [r0, #0]
 80106a0:	0019      	movs	r1, r3
 80106a2:	2204      	movs	r2, #4
 80106a4:	e54d      	b.n	8010142 <HAL_DMA_IRQHandler+0x3a6>
 80106a6:	2280      	movs	r2, #128	; 0x80
 80106a8:	00d2      	lsls	r2, r2, #3
 80106aa:	e477      	b.n	800ff9c <HAL_DMA_IRQHandler+0x200>
 80106ac:	40020008 	.word	0x40020008
 80106b0:	4002001c 	.word	0x4002001c
 80106b4:	40020030 	.word	0x40020030
 80106b8:	40020044 	.word	0x40020044
 80106bc:	40020058 	.word	0x40020058
 80106c0:	4002006c 	.word	0x4002006c
 80106c4:	40020408 	.word	0x40020408
 80106c8:	4002041c 	.word	0x4002041c
 80106cc:	40020430 	.word	0x40020430
 80106d0:	bffdfbbc 	.word	0xbffdfbbc
 80106d4:	40020000 	.word	0x40020000
 80106d8:	40020400 	.word	0x40020400

080106dc <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80106dc:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 80106de:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80106e0:	691a      	ldr	r2, [r3, #16]
 80106e2:	0612      	lsls	r2, r2, #24
 80106e4:	d504      	bpl.n	80106f0 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 80106e6:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80106e8:	4a03      	ldr	r2, [pc, #12]	; (80106f8 <HAL_FLASH_Unlock+0x1c>)
 80106ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80106ec:	4a03      	ldr	r2, [pc, #12]	; (80106fc <HAL_FLASH_Unlock+0x20>)
 80106ee:	605a      	str	r2, [r3, #4]
}
 80106f0:	4770      	bx	lr
 80106f2:	46c0      	nop			; (mov r8, r8)
 80106f4:	40022000 	.word	0x40022000
 80106f8:	45670123 	.word	0x45670123
 80106fc:	cdef89ab 	.word	0xcdef89ab

08010700 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010700:	2180      	movs	r1, #128	; 0x80
 8010702:	4a03      	ldr	r2, [pc, #12]	; (8010710 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8010704:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010706:	6913      	ldr	r3, [r2, #16]
 8010708:	430b      	orrs	r3, r1
 801070a:	6113      	str	r3, [r2, #16]
}
 801070c:	4770      	bx	lr
 801070e:	46c0      	nop			; (mov r8, r8)
 8010710:	40022000 	.word	0x40022000

08010714 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010718:	f7fe fdfa 	bl	800f310 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801071c:	4c1d      	ldr	r4, [pc, #116]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 801071e:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010720:	2601      	movs	r6, #1
 8010722:	e001      	b.n	8010728 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010724:	1c6b      	adds	r3, r5, #1
 8010726:	d11d      	bne.n	8010764 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010728:	68e3      	ldr	r3, [r4, #12]
 801072a:	421e      	tst	r6, r3
 801072c:	d1fa      	bne.n	8010724 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801072e:	2320      	movs	r3, #32
 8010730:	68e2      	ldr	r2, [r4, #12]
 8010732:	4213      	tst	r3, r2
 8010734:	d000      	beq.n	8010738 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010736:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010738:	4b16      	ldr	r3, [pc, #88]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
 801073a:	68da      	ldr	r2, [r3, #12]
 801073c:	06d2      	lsls	r2, r2, #27
 801073e:	d51a      	bpl.n	8010776 <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010740:	4b14      	ldr	r3, [pc, #80]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	06db      	lsls	r3, r3, #27
 8010746:	d504      	bpl.n	8010752 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010748:	2102      	movs	r1, #2
 801074a:	4a13      	ldr	r2, [pc, #76]	; (8010798 <FLASH_WaitForLastOperation+0x84>)
 801074c:	69d3      	ldr	r3, [r2, #28]
 801074e:	430b      	orrs	r3, r1
 8010750:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010752:	4b10      	ldr	r3, [pc, #64]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	075b      	lsls	r3, r3, #29
 8010758:	d416      	bmi.n	8010788 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801075a:	2214      	movs	r2, #20
    return HAL_ERROR;
 801075c:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801075e:	4b0d      	ldr	r3, [pc, #52]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
 8010760:	60da      	str	r2, [r3, #12]
}
 8010762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010764:	2d00      	cmp	r5, #0
 8010766:	d004      	beq.n	8010772 <FLASH_WaitForLastOperation+0x5e>
 8010768:	f7fe fdd2 	bl	800f310 <HAL_GetTick>
 801076c:	1bc0      	subs	r0, r0, r7
 801076e:	42a8      	cmp	r0, r5
 8010770:	d9da      	bls.n	8010728 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8010772:	2003      	movs	r0, #3
 8010774:	e7f5      	b.n	8010762 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010776:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010778:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801077a:	075b      	lsls	r3, r3, #29
 801077c:	d5f1      	bpl.n	8010762 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801077e:	4b05      	ldr	r3, [pc, #20]	; (8010794 <FLASH_WaitForLastOperation+0x80>)
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	06db      	lsls	r3, r3, #27
 8010784:	d5e5      	bpl.n	8010752 <FLASH_WaitForLastOperation+0x3e>
 8010786:	e7df      	b.n	8010748 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010788:	2101      	movs	r1, #1
 801078a:	4a03      	ldr	r2, [pc, #12]	; (8010798 <FLASH_WaitForLastOperation+0x84>)
 801078c:	69d3      	ldr	r3, [r2, #28]
 801078e:	430b      	orrs	r3, r1
 8010790:	61d3      	str	r3, [r2, #28]
 8010792:	e7e2      	b.n	801075a <FLASH_WaitForLastOperation+0x46>
 8010794:	40022000 	.word	0x40022000
 8010798:	20006d78 	.word	0x20006d78

0801079c <HAL_FLASH_Program>:
{
 801079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801079e:	464e      	mov	r6, r9
 80107a0:	4657      	mov	r7, sl
 80107a2:	46de      	mov	lr, fp
 80107a4:	4645      	mov	r5, r8
 80107a6:	b5e0      	push	{r5, r6, r7, lr}
 80107a8:	469a      	mov	sl, r3
 80107aa:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80107ac:	4b2a      	ldr	r3, [pc, #168]	; (8010858 <HAL_FLASH_Program+0xbc>)
{
 80107ae:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 80107b0:	4699      	mov	r9, r3
 80107b2:	7e1b      	ldrb	r3, [r3, #24]
{
 80107b4:	0004      	movs	r4, r0
 80107b6:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d048      	beq.n	801084e <HAL_FLASH_Program+0xb2>
 80107bc:	2501      	movs	r5, #1
 80107be:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80107c0:	4826      	ldr	r0, [pc, #152]	; (801085c <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 80107c2:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80107c4:	f7ff ffa6 	bl	8010714 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d136      	bne.n	801083a <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80107cc:	2c01      	cmp	r4, #1
 80107ce:	d040      	beq.n	8010852 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 80107d0:	3c02      	subs	r4, #2
 80107d2:	4263      	negs	r3, r4
 80107d4:	415c      	adcs	r4, r3
 80107d6:	2304      	movs	r3, #4
 80107d8:	4264      	negs	r4, r4
 80107da:	43ac      	bics	r4, r5
 80107dc:	46a0      	mov	r8, r4
 80107de:	469c      	mov	ip, r3
 80107e0:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107e2:	2300      	movs	r3, #0
      nbiterations = 4;
 80107e4:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107e6:	469b      	mov	fp, r3
 80107e8:	e018      	b.n	801081c <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80107ea:	4653      	mov	r3, sl
 80107ec:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107ee:	464a      	mov	r2, r9
 80107f0:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80107f2:	2701      	movs	r7, #1
 80107f4:	4c1a      	ldr	r4, [pc, #104]	; (8010860 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107f6:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80107f8:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80107fa:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80107fc:	433a      	orrs	r2, r7
 80107fe:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010800:	4816      	ldr	r0, [pc, #88]	; (801085c <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010802:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010804:	f7ff ff86 	bl	8010714 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010808:	6923      	ldr	r3, [r4, #16]
 801080a:	43bb      	bics	r3, r7
 801080c:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 801080e:	2800      	cmp	r0, #0
 8010810:	d113      	bne.n	801083a <HAL_FLASH_Program+0x9e>
 8010812:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010814:	b2eb      	uxtb	r3, r5
 8010816:	3602      	adds	r6, #2
 8010818:	4598      	cmp	r8, r3
 801081a:	d90e      	bls.n	801083a <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801081c:	2220      	movs	r2, #32
 801081e:	012b      	lsls	r3, r5, #4
 8010820:	4252      	negs	r2, r2
 8010822:	189a      	adds	r2, r3, r2
 8010824:	d5e1      	bpl.n	80107ea <HAL_FLASH_Program+0x4e>
 8010826:	2220      	movs	r2, #32
 8010828:	4651      	mov	r1, sl
 801082a:	1ad2      	subs	r2, r2, r3
 801082c:	4091      	lsls	r1, r2
 801082e:	000a      	movs	r2, r1
 8010830:	9901      	ldr	r1, [sp, #4]
 8010832:	40d9      	lsrs	r1, r3
 8010834:	000b      	movs	r3, r1
 8010836:	4313      	orrs	r3, r2
 8010838:	e7d9      	b.n	80107ee <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801083a:	2300      	movs	r3, #0
 801083c:	464a      	mov	r2, r9
 801083e:	7613      	strb	r3, [r2, #24]
}
 8010840:	b003      	add	sp, #12
 8010842:	bc3c      	pop	{r2, r3, r4, r5}
 8010844:	4690      	mov	r8, r2
 8010846:	4699      	mov	r9, r3
 8010848:	46a2      	mov	sl, r4
 801084a:	46ab      	mov	fp, r5
 801084c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 801084e:	2002      	movs	r0, #2
 8010850:	e7f6      	b.n	8010840 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010852:	2301      	movs	r3, #1
 8010854:	4698      	mov	r8, r3
 8010856:	e7c4      	b.n	80107e2 <HAL_FLASH_Program+0x46>
 8010858:	20006d78 	.word	0x20006d78
 801085c:	0000c350 	.word	0x0000c350
 8010860:	40022000 	.word	0x40022000

08010864 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010866:	464f      	mov	r7, r9
 8010868:	4646      	mov	r6, r8
 801086a:	46d6      	mov	lr, sl
 801086c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801086e:	4f30      	ldr	r7, [pc, #192]	; (8010930 <HAL_FLASHEx_Erase+0xcc>)
{
 8010870:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010872:	7e3b      	ldrb	r3, [r7, #24]
{
 8010874:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8010876:	2b01      	cmp	r3, #1
 8010878:	d057      	beq.n	801092a <HAL_FLASHEx_Erase+0xc6>
 801087a:	2301      	movs	r3, #1
 801087c:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801087e:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010880:	482c      	ldr	r0, [pc, #176]	; (8010934 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010882:	2b01      	cmp	r3, #1
 8010884:	d034      	beq.n	80108f0 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010886:	f7ff ff45 	bl	8010714 <FLASH_WaitForLastOperation>
 801088a:	2800      	cmp	r0, #0
 801088c:	d134      	bne.n	80108f8 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 801088e:	2301      	movs	r3, #1
 8010890:	464a      	mov	r2, r9
 8010892:	425b      	negs	r3, r3
 8010894:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010896:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010898:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801089a:	02db      	lsls	r3, r3, #11
 801089c:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 801089e:	429d      	cmp	r5, r3
 80108a0:	d22a      	bcs.n	80108f8 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108a2:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80108a4:	4c24      	ldr	r4, [pc, #144]	; (8010938 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108a6:	4698      	mov	r8, r3
 80108a8:	e00a      	b.n	80108c0 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 80108aa:	2380      	movs	r3, #128	; 0x80
 80108ac:	011b      	lsls	r3, r3, #4
 80108ae:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80108b0:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 80108b2:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80108b4:	4694      	mov	ip, r2
 80108b6:	68b3      	ldr	r3, [r6, #8]
 80108b8:	02db      	lsls	r3, r3, #11
 80108ba:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80108bc:	42ab      	cmp	r3, r5
 80108be:	d91c      	bls.n	80108fa <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80108c0:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108c2:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80108c4:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108c6:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80108c8:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80108ca:	481a      	ldr	r0, [pc, #104]	; (8010934 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80108cc:	4313      	orrs	r3, r2
 80108ce:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80108d0:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80108d2:	6923      	ldr	r3, [r4, #16]
 80108d4:	323e      	adds	r2, #62	; 0x3e
 80108d6:	4313      	orrs	r3, r2
 80108d8:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80108da:	f7ff ff1b 	bl	8010714 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80108de:	4652      	mov	r2, sl
 80108e0:	6923      	ldr	r3, [r4, #16]
 80108e2:	4393      	bics	r3, r2
 80108e4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d0df      	beq.n	80108aa <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 80108ea:	464b      	mov	r3, r9
 80108ec:	601d      	str	r5, [r3, #0]
            break;
 80108ee:	e004      	b.n	80108fa <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80108f0:	f7ff ff10 	bl	8010714 <FLASH_WaitForLastOperation>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d007      	beq.n	8010908 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 80108f8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80108fa:	2300      	movs	r3, #0
 80108fc:	763b      	strb	r3, [r7, #24]
}
 80108fe:	bc1c      	pop	{r2, r3, r4}
 8010900:	4690      	mov	r8, r2
 8010902:	4699      	mov	r9, r3
 8010904:	46a2      	mov	sl, r4
 8010906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010908:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801090a:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801090c:	4c0a      	ldr	r4, [pc, #40]	; (8010938 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801090e:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010910:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010912:	4808      	ldr	r0, [pc, #32]	; (8010934 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010914:	432b      	orrs	r3, r5
 8010916:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	4313      	orrs	r3, r2
 801091c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801091e:	f7ff fef9 	bl	8010714 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010922:	6923      	ldr	r3, [r4, #16]
 8010924:	43ab      	bics	r3, r5
 8010926:	6123      	str	r3, [r4, #16]
 8010928:	e7e7      	b.n	80108fa <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 801092a:	2002      	movs	r0, #2
 801092c:	e7e7      	b.n	80108fe <HAL_FLASHEx_Erase+0x9a>
 801092e:	46c0      	nop			; (mov r8, r8)
 8010930:	20006d78 	.word	0x20006d78
 8010934:	0000c350 	.word	0x0000c350
 8010938:	40022000 	.word	0x40022000

0801093c <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801093c:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801093e:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010940:	4b05      	ldr	r3, [pc, #20]	; (8010958 <FLASH_PageErase+0x1c>)
 8010942:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <FLASH_PageErase+0x20>)
 8010946:	691a      	ldr	r2, [r3, #16]
 8010948:	430a      	orrs	r2, r1
 801094a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801094c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801094e:	691a      	ldr	r2, [r3, #16]
 8010950:	313e      	adds	r1, #62	; 0x3e
 8010952:	430a      	orrs	r2, r1
 8010954:	611a      	str	r2, [r3, #16]
}
 8010956:	4770      	bx	lr
 8010958:	20006d78 	.word	0x20006d78
 801095c:	40022000 	.word	0x40022000

08010960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010962:	464e      	mov	r6, r9
 8010964:	46de      	mov	lr, fp
 8010966:	4657      	mov	r7, sl
 8010968:	4645      	mov	r5, r8
 801096a:	b5e0      	push	{r5, r6, r7, lr}
 801096c:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801096e:	6809      	ldr	r1, [r1, #0]
{ 
 8010970:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010972:	2900      	cmp	r1, #0
 8010974:	d100      	bne.n	8010978 <HAL_GPIO_Init+0x18>
 8010976:	e080      	b.n	8010a7a <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010978:	4b70      	ldr	r3, [pc, #448]	; (8010b3c <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 801097a:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801097c:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801097e:	4b70      	ldr	r3, [pc, #448]	; (8010b40 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010980:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010982:	4698      	mov	r8, r3
 8010984:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010986:	0033      	movs	r3, r6
 8010988:	4652      	mov	r2, sl
 801098a:	40a3      	lsls	r3, r4
 801098c:	4013      	ands	r3, r2
 801098e:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010990:	d06f      	beq.n	8010a72 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010992:	464b      	mov	r3, r9
 8010994:	6859      	ldr	r1, [r3, #4]
 8010996:	2310      	movs	r3, #16
 8010998:	000f      	movs	r7, r1
 801099a:	439f      	bics	r7, r3
 801099c:	003b      	movs	r3, r7
 801099e:	9701      	str	r7, [sp, #4]
 80109a0:	2f02      	cmp	r7, #2
 80109a2:	d100      	bne.n	80109a6 <HAL_GPIO_Init+0x46>
 80109a4:	e070      	b.n	8010a88 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80109a6:	2203      	movs	r2, #3
 80109a8:	0065      	lsls	r5, r4, #1
 80109aa:	40aa      	lsls	r2, r5
 80109ac:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 80109ae:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80109b0:	4013      	ands	r3, r2
 80109b2:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80109b4:	2303      	movs	r3, #3
 80109b6:	400b      	ands	r3, r1
 80109b8:	40ab      	lsls	r3, r5
 80109ba:	469c      	mov	ip, r3
 80109bc:	003b      	movs	r3, r7
 80109be:	4667      	mov	r7, ip
 80109c0:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80109c2:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 80109c4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80109c6:	3f01      	subs	r7, #1
 80109c8:	2f01      	cmp	r7, #1
 80109ca:	d800      	bhi.n	80109ce <HAL_GPIO_Init+0x6e>
 80109cc:	e079      	b.n	8010ac2 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80109ce:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 80109d0:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80109d2:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80109d4:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80109d6:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80109d8:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80109da:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80109dc:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 80109de:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80109e0:	4219      	tst	r1, r3
 80109e2:	d046      	beq.n	8010a72 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109e4:	465b      	mov	r3, fp
 80109e6:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80109e8:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109ea:	4332      	orrs	r2, r6
 80109ec:	619a      	str	r2, [r3, #24]
 80109ee:	699a      	ldr	r2, [r3, #24]
 80109f0:	4b54      	ldr	r3, [pc, #336]	; (8010b44 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80109f2:	4027      	ands	r7, r4
 80109f4:	469c      	mov	ip, r3
 80109f6:	230f      	movs	r3, #15
 80109f8:	00bf      	lsls	r7, r7, #2
 80109fa:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109fc:	4032      	ands	r2, r6
 80109fe:	9203      	str	r2, [sp, #12]
 8010a00:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010a02:	08a2      	lsrs	r2, r4, #2
 8010a04:	0092      	lsls	r2, r2, #2
 8010a06:	4462      	add	r2, ip
 8010a08:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010a0a:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010a0c:	2390      	movs	r3, #144	; 0x90
 8010a0e:	05db      	lsls	r3, r3, #23
 8010a10:	4298      	cmp	r0, r3
 8010a12:	d012      	beq.n	8010a3a <HAL_GPIO_Init+0xda>
 8010a14:	4b4c      	ldr	r3, [pc, #304]	; (8010b48 <HAL_GPIO_Init+0x1e8>)
 8010a16:	4298      	cmp	r0, r3
 8010a18:	d100      	bne.n	8010a1c <HAL_GPIO_Init+0xbc>
 8010a1a:	e083      	b.n	8010b24 <HAL_GPIO_Init+0x1c4>
 8010a1c:	4b4b      	ldr	r3, [pc, #300]	; (8010b4c <HAL_GPIO_Init+0x1ec>)
 8010a1e:	4298      	cmp	r0, r3
 8010a20:	d100      	bne.n	8010a24 <HAL_GPIO_Init+0xc4>
 8010a22:	e07b      	b.n	8010b1c <HAL_GPIO_Init+0x1bc>
 8010a24:	4b4a      	ldr	r3, [pc, #296]	; (8010b50 <HAL_GPIO_Init+0x1f0>)
 8010a26:	4298      	cmp	r0, r3
 8010a28:	d100      	bne.n	8010a2c <HAL_GPIO_Init+0xcc>
 8010a2a:	e07f      	b.n	8010b2c <HAL_GPIO_Init+0x1cc>
 8010a2c:	4b49      	ldr	r3, [pc, #292]	; (8010b54 <HAL_GPIO_Init+0x1f4>)
 8010a2e:	4298      	cmp	r0, r3
 8010a30:	d100      	bne.n	8010a34 <HAL_GPIO_Init+0xd4>
 8010a32:	e07f      	b.n	8010b34 <HAL_GPIO_Init+0x1d4>
 8010a34:	2305      	movs	r3, #5
 8010a36:	40bb      	lsls	r3, r7
 8010a38:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010a3a:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010a3c:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010a3e:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010a40:	9b00      	ldr	r3, [sp, #0]
 8010a42:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010a44:	03cb      	lsls	r3, r1, #15
 8010a46:	d451      	bmi.n	8010aec <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010a48:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010a4a:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010a4c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010a4e:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010a50:	038b      	lsls	r3, r1, #14
 8010a52:	d452      	bmi.n	8010afa <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010a54:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010a56:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010a58:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010a5a:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010a5c:	02cb      	lsls	r3, r1, #11
 8010a5e:	d453      	bmi.n	8010b08 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010a60:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010a62:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010a64:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010a66:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010a68:	028b      	lsls	r3, r1, #10
 8010a6a:	d454      	bmi.n	8010b16 <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010a6c:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010a6e:	4643      	mov	r3, r8
 8010a70:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010a72:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010a74:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010a76:	40e3      	lsrs	r3, r4
 8010a78:	d185      	bne.n	8010986 <HAL_GPIO_Init+0x26>
  } 
}
 8010a7a:	b005      	add	sp, #20
 8010a7c:	bc3c      	pop	{r2, r3, r4, r5}
 8010a7e:	4690      	mov	r8, r2
 8010a80:	4699      	mov	r9, r3
 8010a82:	46a2      	mov	sl, r4
 8010a84:	46ab      	mov	fp, r5
 8010a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010a88:	2507      	movs	r5, #7
 8010a8a:	4025      	ands	r5, r4
 8010a8c:	00ad      	lsls	r5, r5, #2
 8010a8e:	330d      	adds	r3, #13
 8010a90:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010a92:	08e2      	lsrs	r2, r4, #3
 8010a94:	0092      	lsls	r2, r2, #2
 8010a96:	1882      	adds	r2, r0, r2
 8010a98:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010a9a:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010a9c:	464b      	mov	r3, r9
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	40ab      	lsls	r3, r5
 8010aa2:	001d      	movs	r5, r3
 8010aa4:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010aa6:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010aa8:	2203      	movs	r2, #3
 8010aaa:	0065      	lsls	r5, r4, #1
 8010aac:	40aa      	lsls	r2, r5
 8010aae:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010ab0:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010ab2:	4017      	ands	r7, r2
 8010ab4:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010ab6:	2703      	movs	r7, #3
 8010ab8:	400f      	ands	r7, r1
 8010aba:	40af      	lsls	r7, r5
 8010abc:	4663      	mov	r3, ip
 8010abe:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010ac0:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010ac2:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010ac4:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010ac6:	4017      	ands	r7, r2
 8010ac8:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010aca:	68df      	ldr	r7, [r3, #12]
 8010acc:	4663      	mov	r3, ip
 8010ace:	40af      	lsls	r7, r5
 8010ad0:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010ad2:	0033      	movs	r3, r6
 8010ad4:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010ad6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010ad8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010ada:	439f      	bics	r7, r3
 8010adc:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010ade:	090f      	lsrs	r7, r1, #4
 8010ae0:	4037      	ands	r7, r6
 8010ae2:	40a7      	lsls	r7, r4
 8010ae4:	4663      	mov	r3, ip
 8010ae6:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010ae8:	6047      	str	r7, [r0, #4]
 8010aea:	e770      	b.n	80109ce <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010aec:	9b00      	ldr	r3, [sp, #0]
 8010aee:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010af0:	4643      	mov	r3, r8
 8010af2:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010af4:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010af6:	038b      	lsls	r3, r1, #14
 8010af8:	d5ac      	bpl.n	8010a54 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010afa:	9b00      	ldr	r3, [sp, #0]
 8010afc:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010afe:	4643      	mov	r3, r8
 8010b00:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010b02:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010b04:	02cb      	lsls	r3, r1, #11
 8010b06:	d5ab      	bpl.n	8010a60 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010b08:	9b00      	ldr	r3, [sp, #0]
 8010b0a:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010b0c:	4643      	mov	r3, r8
 8010b0e:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010b10:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010b12:	028b      	lsls	r3, r1, #10
 8010b14:	d5aa      	bpl.n	8010a6c <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	431a      	orrs	r2, r3
 8010b1a:	e7a8      	b.n	8010a6e <HAL_GPIO_Init+0x10e>
 8010b1c:	2302      	movs	r3, #2
 8010b1e:	40bb      	lsls	r3, r7
 8010b20:	431d      	orrs	r5, r3
 8010b22:	e78a      	b.n	8010a3a <HAL_GPIO_Init+0xda>
 8010b24:	0033      	movs	r3, r6
 8010b26:	40bb      	lsls	r3, r7
 8010b28:	431d      	orrs	r5, r3
 8010b2a:	e786      	b.n	8010a3a <HAL_GPIO_Init+0xda>
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	40bb      	lsls	r3, r7
 8010b30:	431d      	orrs	r5, r3
 8010b32:	e782      	b.n	8010a3a <HAL_GPIO_Init+0xda>
 8010b34:	2304      	movs	r3, #4
 8010b36:	40bb      	lsls	r3, r7
 8010b38:	431d      	orrs	r5, r3
 8010b3a:	e77e      	b.n	8010a3a <HAL_GPIO_Init+0xda>
 8010b3c:	40021000 	.word	0x40021000
 8010b40:	40010400 	.word	0x40010400
 8010b44:	40010000 	.word	0x40010000
 8010b48:	48000400 	.word	0x48000400
 8010b4c:	48000800 	.word	0x48000800
 8010b50:	48000c00 	.word	0x48000c00
 8010b54:	48001000 	.word	0x48001000

08010b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b5a:	46de      	mov	lr, fp
 8010b5c:	4657      	mov	r7, sl
 8010b5e:	464e      	mov	r6, r9
 8010b60:	4645      	mov	r5, r8
 8010b62:	b5e0      	push	{r5, r6, r7, lr}
 8010b64:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010b66:	2900      	cmp	r1, #0
 8010b68:	d055      	beq.n	8010c16 <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010b6e:	3202      	adds	r2, #2
 8010b70:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010b72:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010b74:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010b76:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010b78:	4666      	mov	r6, ip
 8010b7a:	000d      	movs	r5, r1
 8010b7c:	409e      	lsls	r6, r3
 8010b7e:	4035      	ands	r5, r6
    if (iocurrent)
 8010b80:	d045      	beq.n	8010c0e <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010b82:	4647      	mov	r7, r8
 8010b84:	005c      	lsls	r4, r3, #1
 8010b86:	40a7      	lsls	r7, r4
 8010b88:	43fc      	mvns	r4, r7
 8010b8a:	6802      	ldr	r2, [r0, #0]
 8010b8c:	4022      	ands	r2, r4
 8010b8e:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010b90:	08da      	lsrs	r2, r3, #3
 8010b92:	0092      	lsls	r2, r2, #2
 8010b94:	1887      	adds	r7, r0, r2
 8010b96:	9701      	str	r7, [sp, #4]
 8010b98:	6a3f      	ldr	r7, [r7, #32]
 8010b9a:	46ba      	mov	sl, r7
 8010b9c:	2707      	movs	r7, #7
 8010b9e:	401f      	ands	r7, r3
 8010ba0:	00bf      	lsls	r7, r7, #2
 8010ba2:	46bb      	mov	fp, r7
 8010ba4:	464f      	mov	r7, r9
 8010ba6:	465a      	mov	r2, fp
 8010ba8:	4097      	lsls	r7, r2
 8010baa:	46bb      	mov	fp, r7
 8010bac:	4657      	mov	r7, sl
 8010bae:	465a      	mov	r2, fp
 8010bb0:	4397      	bics	r7, r2
 8010bb2:	003a      	movs	r2, r7
 8010bb4:	9f01      	ldr	r7, [sp, #4]
 8010bb6:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010bb8:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bba:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010bbc:	4022      	ands	r2, r4
 8010bbe:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010bc0:	6842      	ldr	r2, [r0, #4]
 8010bc2:	43b2      	bics	r2, r6
 8010bc4:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010bc6:	68c2      	ldr	r2, [r0, #12]
 8010bc8:	4014      	ands	r4, r2
 8010bca:	60c4      	str	r4, [r0, #12]
 8010bcc:	4c2b      	ldr	r4, [pc, #172]	; (8010c7c <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010bce:	089a      	lsrs	r2, r3, #2
 8010bd0:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bd2:	4644      	mov	r4, r8
 8010bd4:	401c      	ands	r4, r3
 8010bd6:	00a4      	lsls	r4, r4, #2
 8010bd8:	40a7      	lsls	r7, r4
 8010bda:	0092      	lsls	r2, r2, #2
 8010bdc:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010bde:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010be0:	46ba      	mov	sl, r7
 8010be2:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010be4:	2790      	movs	r7, #144	; 0x90
 8010be6:	05ff      	lsls	r7, r7, #23
 8010be8:	42b8      	cmp	r0, r7
 8010bea:	d01b      	beq.n	8010c24 <HAL_GPIO_DeInit+0xcc>
 8010bec:	4f24      	ldr	r7, [pc, #144]	; (8010c80 <HAL_GPIO_DeInit+0x128>)
 8010bee:	42b8      	cmp	r0, r7
 8010bf0:	d033      	beq.n	8010c5a <HAL_GPIO_DeInit+0x102>
 8010bf2:	4f24      	ldr	r7, [pc, #144]	; (8010c84 <HAL_GPIO_DeInit+0x12c>)
 8010bf4:	42b8      	cmp	r0, r7
 8010bf6:	d038      	beq.n	8010c6a <HAL_GPIO_DeInit+0x112>
 8010bf8:	4f23      	ldr	r7, [pc, #140]	; (8010c88 <HAL_GPIO_DeInit+0x130>)
 8010bfa:	42b8      	cmp	r0, r7
 8010bfc:	d039      	beq.n	8010c72 <HAL_GPIO_DeInit+0x11a>
 8010bfe:	4f23      	ldr	r7, [pc, #140]	; (8010c8c <HAL_GPIO_DeInit+0x134>)
 8010c00:	42b8      	cmp	r0, r7
 8010c02:	d02e      	beq.n	8010c62 <HAL_GPIO_DeInit+0x10a>
 8010c04:	2705      	movs	r7, #5
 8010c06:	40a7      	lsls	r7, r4
 8010c08:	003c      	movs	r4, r7
 8010c0a:	42a6      	cmp	r6, r4
 8010c0c:	d00d      	beq.n	8010c2a <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010c0e:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010c10:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010c12:	40da      	lsrs	r2, r3
 8010c14:	d1b0      	bne.n	8010b78 <HAL_GPIO_DeInit+0x20>
  }
}
 8010c16:	b003      	add	sp, #12
 8010c18:	bc3c      	pop	{r2, r3, r4, r5}
 8010c1a:	4690      	mov	r8, r2
 8010c1c:	4699      	mov	r9, r3
 8010c1e:	46a2      	mov	sl, r4
 8010c20:	46ab      	mov	fp, r5
 8010c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c24:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010c26:	42a6      	cmp	r6, r4
 8010c28:	d1f1      	bne.n	8010c0e <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010c2a:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010c2c:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010c2e:	6894      	ldr	r4, [r2, #8]
    position++;
 8010c30:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010c32:	43b4      	bics	r4, r6
 8010c34:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010c36:	4c16      	ldr	r4, [pc, #88]	; (8010c90 <HAL_GPIO_DeInit+0x138>)
 8010c38:	6822      	ldr	r2, [r4, #0]
 8010c3a:	402a      	ands	r2, r5
 8010c3c:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010c3e:	6862      	ldr	r2, [r4, #4]
 8010c40:	402a      	ands	r2, r5
 8010c42:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010c44:	68a2      	ldr	r2, [r4, #8]
 8010c46:	402a      	ands	r2, r5
 8010c48:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010c4a:	68e2      	ldr	r2, [r4, #12]
 8010c4c:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010c4e:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010c50:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8010c52:	40da      	lsrs	r2, r3
 8010c54:	d000      	beq.n	8010c58 <HAL_GPIO_DeInit+0x100>
 8010c56:	e78f      	b.n	8010b78 <HAL_GPIO_DeInit+0x20>
 8010c58:	e7dd      	b.n	8010c16 <HAL_GPIO_DeInit+0xbe>
 8010c5a:	4667      	mov	r7, ip
 8010c5c:	40a7      	lsls	r7, r4
 8010c5e:	003c      	movs	r4, r7
 8010c60:	e7e1      	b.n	8010c26 <HAL_GPIO_DeInit+0xce>
 8010c62:	2704      	movs	r7, #4
 8010c64:	40a7      	lsls	r7, r4
 8010c66:	003c      	movs	r4, r7
 8010c68:	e7dd      	b.n	8010c26 <HAL_GPIO_DeInit+0xce>
 8010c6a:	2702      	movs	r7, #2
 8010c6c:	40a7      	lsls	r7, r4
 8010c6e:	003c      	movs	r4, r7
 8010c70:	e7d9      	b.n	8010c26 <HAL_GPIO_DeInit+0xce>
 8010c72:	4647      	mov	r7, r8
 8010c74:	40a7      	lsls	r7, r4
 8010c76:	003c      	movs	r4, r7
 8010c78:	e7d5      	b.n	8010c26 <HAL_GPIO_DeInit+0xce>
 8010c7a:	46c0      	nop			; (mov r8, r8)
 8010c7c:	40010000 	.word	0x40010000
 8010c80:	48000400 	.word	0x48000400
 8010c84:	48000800 	.word	0x48000800
 8010c88:	48000c00 	.word	0x48000c00
 8010c8c:	48001000 	.word	0x48001000
 8010c90:	40010400 	.word	0x40010400

08010c94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010c94:	6900      	ldr	r0, [r0, #16]
 8010c96:	4008      	ands	r0, r1
 8010c98:	1e41      	subs	r1, r0, #1
 8010c9a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010c9c:	b2c0      	uxtb	r0, r0
  }
 8010c9e:	4770      	bx	lr

08010ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	d101      	bne.n	8010ca8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010ca4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010ca6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010ca8:	6181      	str	r1, [r0, #24]
 8010caa:	e7fc      	b.n	8010ca6 <HAL_GPIO_WritePin+0x6>

08010cac <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010cac:	6943      	ldr	r3, [r0, #20]
 8010cae:	4059      	eors	r1, r3
 8010cb0:	6141      	str	r1, [r0, #20]
}
 8010cb2:	4770      	bx	lr

08010cb4 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010cb4:	4770      	bx	lr
 8010cb6:	46c0      	nop			; (mov r8, r8)

08010cb8 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010cb8:	2380      	movs	r3, #128	; 0x80
 8010cba:	4a03      	ldr	r2, [pc, #12]	; (8010cc8 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	6811      	ldr	r1, [r2, #0]
 8010cc0:	430b      	orrs	r3, r1
 8010cc2:	6013      	str	r3, [r2, #0]
}
 8010cc4:	4770      	bx	lr
 8010cc6:	46c0      	nop			; (mov r8, r8)
 8010cc8:	40007000 	.word	0x40007000

08010ccc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cce:	46c6      	mov	lr, r8
 8010cd0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010cd2:	6803      	ldr	r3, [r0, #0]
{
 8010cd4:	b082      	sub	sp, #8
 8010cd6:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010cd8:	07da      	lsls	r2, r3, #31
 8010cda:	d54b      	bpl.n	8010d74 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010cdc:	210c      	movs	r1, #12
 8010cde:	48c4      	ldr	r0, [pc, #784]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010ce0:	6842      	ldr	r2, [r0, #4]
 8010ce2:	400a      	ands	r2, r1
 8010ce4:	2a04      	cmp	r2, #4
 8010ce6:	d100      	bne.n	8010cea <HAL_RCC_OscConfig+0x1e>
 8010ce8:	e153      	b.n	8010f92 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010cea:	6842      	ldr	r2, [r0, #4]
 8010cec:	4011      	ands	r1, r2
 8010cee:	2908      	cmp	r1, #8
 8010cf0:	d108      	bne.n	8010d04 <HAL_RCC_OscConfig+0x38>
 8010cf2:	21c0      	movs	r1, #192	; 0xc0
 8010cf4:	6842      	ldr	r2, [r0, #4]
 8010cf6:	0249      	lsls	r1, r1, #9
 8010cf8:	400a      	ands	r2, r1
 8010cfa:	2180      	movs	r1, #128	; 0x80
 8010cfc:	0249      	lsls	r1, r1, #9
 8010cfe:	428a      	cmp	r2, r1
 8010d00:	d100      	bne.n	8010d04 <HAL_RCC_OscConfig+0x38>
 8010d02:	e146      	b.n	8010f92 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010d04:	4dba      	ldr	r5, [pc, #744]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010d06:	4abb      	ldr	r2, [pc, #748]	; (8010ff4 <HAL_RCC_OscConfig+0x328>)
 8010d08:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d0a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	602b      	str	r3, [r5, #0]
 8010d10:	682b      	ldr	r3, [r5, #0]
 8010d12:	4ab9      	ldr	r2, [pc, #740]	; (8010ff8 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d14:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010d16:	4013      	ands	r3, r2
 8010d18:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010d1a:	f7fe faf9 	bl	800f310 <HAL_GetTick>
 8010d1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d20:	e005      	b.n	8010d2e <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d22:	f7fe faf5 	bl	800f310 <HAL_GetTick>
 8010d26:	1bc0      	subs	r0, r0, r7
 8010d28:	2864      	cmp	r0, #100	; 0x64
 8010d2a:	d900      	bls.n	8010d2e <HAL_RCC_OscConfig+0x62>
 8010d2c:	e13b      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d2e:	682b      	ldr	r3, [r5, #0]
 8010d30:	4233      	tst	r3, r6
 8010d32:	d1f6      	bne.n	8010d22 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d34:	6863      	ldr	r3, [r4, #4]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d100      	bne.n	8010d3c <HAL_RCC_OscConfig+0x70>
 8010d3a:	e196      	b.n	801106a <HAL_RCC_OscConfig+0x39e>
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d000      	beq.n	8010d42 <HAL_RCC_OscConfig+0x76>
 8010d40:	e1bc      	b.n	80110bc <HAL_RCC_OscConfig+0x3f0>
 8010d42:	682b      	ldr	r3, [r5, #0]
 8010d44:	4aab      	ldr	r2, [pc, #684]	; (8010ff4 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d46:	4eaa      	ldr	r6, [pc, #680]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d48:	4013      	ands	r3, r2
 8010d4a:	602b      	str	r3, [r5, #0]
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	4aaa      	ldr	r2, [pc, #680]	; (8010ff8 <HAL_RCC_OscConfig+0x32c>)
 8010d50:	4013      	ands	r3, r2
 8010d52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010d54:	f7fe fadc 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d58:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010d5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d5c:	02ad      	lsls	r5, r5, #10
 8010d5e:	e005      	b.n	8010d6c <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d60:	f7fe fad6 	bl	800f310 <HAL_GetTick>
 8010d64:	1bc0      	subs	r0, r0, r7
 8010d66:	2864      	cmp	r0, #100	; 0x64
 8010d68:	d900      	bls.n	8010d6c <HAL_RCC_OscConfig+0xa0>
 8010d6a:	e11c      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d6c:	6833      	ldr	r3, [r6, #0]
 8010d6e:	422b      	tst	r3, r5
 8010d70:	d1f6      	bne.n	8010d60 <HAL_RCC_OscConfig+0x94>
 8010d72:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010d74:	079a      	lsls	r2, r3, #30
 8010d76:	d529      	bpl.n	8010dcc <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010d78:	220c      	movs	r2, #12
 8010d7a:	499d      	ldr	r1, [pc, #628]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010d7c:	6848      	ldr	r0, [r1, #4]
 8010d7e:	4202      	tst	r2, r0
 8010d80:	d100      	bne.n	8010d84 <HAL_RCC_OscConfig+0xb8>
 8010d82:	e0fd      	b.n	8010f80 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010d84:	6848      	ldr	r0, [r1, #4]
 8010d86:	4002      	ands	r2, r0
 8010d88:	2a08      	cmp	r2, #8
 8010d8a:	d100      	bne.n	8010d8e <HAL_RCC_OscConfig+0xc2>
 8010d8c:	e0ef      	b.n	8010f6e <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010d8e:	68e3      	ldr	r3, [r4, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d100      	bne.n	8010d96 <HAL_RCC_OscConfig+0xca>
 8010d94:	e138      	b.n	8011008 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010d96:	2201      	movs	r2, #1
 8010d98:	4f95      	ldr	r7, [pc, #596]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d9a:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010da2:	f7fe fab5 	bl	800f310 <HAL_GetTick>
 8010da6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010da8:	e005      	b.n	8010db6 <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010daa:	f7fe fab1 	bl	800f310 <HAL_GetTick>
 8010dae:	1b80      	subs	r0, r0, r6
 8010db0:	2864      	cmp	r0, #100	; 0x64
 8010db2:	d900      	bls.n	8010db6 <HAL_RCC_OscConfig+0xea>
 8010db4:	e0f7      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	421d      	tst	r5, r3
 8010dba:	d0f6      	beq.n	8010daa <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010dbc:	21f8      	movs	r1, #248	; 0xf8
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	438a      	bics	r2, r1
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	603b      	str	r3, [r7, #0]
 8010dca:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010dcc:	071a      	lsls	r2, r3, #28
 8010dce:	d45d      	bmi.n	8010e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010dd0:	075a      	lsls	r2, r3, #29
 8010dd2:	d474      	bmi.n	8010ebe <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010dd4:	06da      	lsls	r2, r3, #27
 8010dd6:	d512      	bpl.n	8010dfe <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8010dd8:	6962      	ldr	r2, [r4, #20]
 8010dda:	2a01      	cmp	r2, #1
 8010ddc:	d100      	bne.n	8010de0 <HAL_RCC_OscConfig+0x114>
 8010dde:	e18c      	b.n	80110fa <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010de0:	3205      	adds	r2, #5
 8010de2:	d000      	beq.n	8010de6 <HAL_RCC_OscConfig+0x11a>
 8010de4:	e124      	b.n	8011030 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8010de6:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010de8:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010dea:	4981      	ldr	r1, [pc, #516]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010dec:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010dee:	4382      	bics	r2, r0
 8010df0:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010df2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010df4:	69a2      	ldr	r2, [r4, #24]
 8010df6:	43a8      	bics	r0, r5
 8010df8:	00d2      	lsls	r2, r2, #3
 8010dfa:	4302      	orrs	r2, r0
 8010dfc:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010dfe:	069b      	lsls	r3, r3, #26
 8010e00:	d522      	bpl.n	8010e48 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010e02:	220c      	movs	r2, #12
 8010e04:	497a      	ldr	r1, [pc, #488]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010e06:	684b      	ldr	r3, [r1, #4]
 8010e08:	4013      	ands	r3, r2
 8010e0a:	2b0c      	cmp	r3, #12
 8010e0c:	d100      	bne.n	8010e10 <HAL_RCC_OscConfig+0x144>
 8010e0e:	e14a      	b.n	80110a6 <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010e10:	684b      	ldr	r3, [r1, #4]
 8010e12:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010e14:	2a08      	cmp	r2, #8
 8010e16:	d100      	bne.n	8010e1a <HAL_RCC_OscConfig+0x14e>
 8010e18:	e13e      	b.n	8011098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010e1a:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010e1c:	4d74      	ldr	r5, [pc, #464]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d100      	bne.n	8010e24 <HAL_RCC_OscConfig+0x158>
 8010e22:	e156      	b.n	80110d2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8010e24:	2680      	movs	r6, #128	; 0x80
 8010e26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010e28:	0276      	lsls	r6, r6, #9
 8010e2a:	4333      	orrs	r3, r6
 8010e2c:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010e2e:	f7fe fa6f 	bl	800f310 <HAL_GetTick>
 8010e32:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010e34:	e005      	b.n	8010e42 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010e36:	f7fe fa6b 	bl	800f310 <HAL_GetTick>
 8010e3a:	1bc0      	subs	r0, r0, r7
 8010e3c:	2864      	cmp	r0, #100	; 0x64
 8010e3e:	d900      	bls.n	8010e42 <HAL_RCC_OscConfig+0x176>
 8010e40:	e0b1      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010e42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010e44:	4233      	tst	r3, r6
 8010e46:	d0f6      	beq.n	8010e36 <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d01c      	beq.n	8010e88 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010e4e:	220c      	movs	r2, #12
 8010e50:	4d67      	ldr	r5, [pc, #412]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010e52:	6869      	ldr	r1, [r5, #4]
 8010e54:	400a      	ands	r2, r1
 8010e56:	2a08      	cmp	r2, #8
 8010e58:	d100      	bne.n	8010e5c <HAL_RCC_OscConfig+0x190>
 8010e5a:	e098      	b.n	8010f8e <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d100      	bne.n	8010e62 <HAL_RCC_OscConfig+0x196>
 8010e60:	e16a      	b.n	8011138 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010e62:	682b      	ldr	r3, [r5, #0]
 8010e64:	4a65      	ldr	r2, [pc, #404]	; (8010ffc <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e66:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8010e68:	4013      	ands	r3, r2
 8010e6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010e6c:	f7fe fa50 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e70:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8010e72:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e74:	e005      	b.n	8010e82 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010e76:	f7fe fa4b 	bl	800f310 <HAL_GetTick>
 8010e7a:	1b80      	subs	r0, r0, r6
 8010e7c:	2864      	cmp	r0, #100	; 0x64
 8010e7e:	d900      	bls.n	8010e82 <HAL_RCC_OscConfig+0x1b6>
 8010e80:	e091      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e82:	682b      	ldr	r3, [r5, #0]
 8010e84:	4223      	tst	r3, r4
 8010e86:	d1f6      	bne.n	8010e76 <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e08d      	b.n	8010fa8 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010e8c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8010e8e:	4d58      	ldr	r5, [pc, #352]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d100      	bne.n	8010e96 <HAL_RCC_OscConfig+0x1ca>
 8010e94:	e08c      	b.n	8010fb0 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 8010e96:	2201      	movs	r2, #1
 8010e98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010e9a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010ea0:	f7fe fa36 	bl	800f310 <HAL_GetTick>
 8010ea4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010ea6:	e004      	b.n	8010eb2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010ea8:	f7fe fa32 	bl	800f310 <HAL_GetTick>
 8010eac:	1bc0      	subs	r0, r0, r7
 8010eae:	2864      	cmp	r0, #100	; 0x64
 8010eb0:	d879      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010eb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010eb4:	421e      	tst	r6, r3
 8010eb6:	d0f7      	beq.n	8010ea8 <HAL_RCC_OscConfig+0x1dc>
 8010eb8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010eba:	075a      	lsls	r2, r3, #29
 8010ebc:	d58a      	bpl.n	8010dd4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010ebe:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010ec0:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8010ec2:	4a4b      	ldr	r2, [pc, #300]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010ec4:	0540      	lsls	r0, r0, #21
 8010ec6:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010ec8:	4d4d      	ldr	r5, [pc, #308]	; (8011000 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8010eca:	4301      	orrs	r1, r0
 8010ecc:	61d1      	str	r1, [r2, #28]
 8010ece:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010ed0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8010ed2:	4003      	ands	r3, r0
 8010ed4:	9301      	str	r3, [sp, #4]
 8010ed6:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010ed8:	682b      	ldr	r3, [r5, #0]
 8010eda:	4333      	orrs	r3, r6
 8010edc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8010ede:	f7fe fa17 	bl	800f310 <HAL_GetTick>
 8010ee2:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010ee4:	e004      	b.n	8010ef0 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010ee6:	f7fe fa13 	bl	800f310 <HAL_GetTick>
 8010eea:	1bc0      	subs	r0, r0, r7
 8010eec:	2864      	cmp	r0, #100	; 0x64
 8010eee:	d85a      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010ef0:	682b      	ldr	r3, [r5, #0]
 8010ef2:	4233      	tst	r3, r6
 8010ef4:	d0f7      	beq.n	8010ee6 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	4d3d      	ldr	r5, [pc, #244]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010efa:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010efc:	6a2b      	ldr	r3, [r5, #32]
 8010efe:	4393      	bics	r3, r2
 8010f00:	622b      	str	r3, [r5, #32]
 8010f02:	6a2b      	ldr	r3, [r5, #32]
 8010f04:	3203      	adds	r2, #3
 8010f06:	4393      	bics	r3, r2
 8010f08:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8010f0a:	f7fe fa01 	bl	800f310 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f0e:	4b3d      	ldr	r3, [pc, #244]	; (8011004 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8010f10:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f12:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010f14:	e004      	b.n	8010f20 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f16:	f7fe f9fb 	bl	800f310 <HAL_GetTick>
 8010f1a:	1bc0      	subs	r0, r0, r7
 8010f1c:	4540      	cmp	r0, r8
 8010f1e:	d842      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010f20:	6a2b      	ldr	r3, [r5, #32]
 8010f22:	421e      	tst	r6, r3
 8010f24:	d1f7      	bne.n	8010f16 <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010f26:	68a3      	ldr	r3, [r4, #8]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d100      	bne.n	8010f2e <HAL_RCC_OscConfig+0x262>
 8010f2c:	e157      	b.n	80111de <HAL_RCC_OscConfig+0x512>
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d100      	bne.n	8010f34 <HAL_RCC_OscConfig+0x268>
 8010f32:	e139      	b.n	80111a8 <HAL_RCC_OscConfig+0x4dc>
 8010f34:	2b05      	cmp	r3, #5
 8010f36:	d100      	bne.n	8010f3a <HAL_RCC_OscConfig+0x26e>
 8010f38:	e155      	b.n	80111e6 <HAL_RCC_OscConfig+0x51a>
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	6a2b      	ldr	r3, [r5, #32]
 8010f3e:	4393      	bics	r3, r2
 8010f40:	622b      	str	r3, [r5, #32]
 8010f42:	6a2b      	ldr	r3, [r5, #32]
 8010f44:	3203      	adds	r2, #3
 8010f46:	4393      	bics	r3, r2
 8010f48:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010f4a:	f7fe f9e1 	bl	800f310 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f4e:	4e28      	ldr	r6, [pc, #160]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8010f50:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f52:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f54:	4f2b      	ldr	r7, [pc, #172]	; (8011004 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f56:	e005      	b.n	8010f64 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010f58:	f7fe f9da 	bl	800f310 <HAL_GetTick>
 8010f5c:	4643      	mov	r3, r8
 8010f5e:	1ac0      	subs	r0, r0, r3
 8010f60:	42b8      	cmp	r0, r7
 8010f62:	d820      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010f64:	6a33      	ldr	r3, [r6, #32]
 8010f66:	421d      	tst	r5, r3
 8010f68:	d0f6      	beq.n	8010f58 <HAL_RCC_OscConfig+0x28c>
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	e732      	b.n	8010dd4 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010f6e:	684a      	ldr	r2, [r1, #4]
 8010f70:	21c0      	movs	r1, #192	; 0xc0
 8010f72:	0249      	lsls	r1, r1, #9
 8010f74:	400a      	ands	r2, r1
 8010f76:	2180      	movs	r1, #128	; 0x80
 8010f78:	0209      	lsls	r1, r1, #8
 8010f7a:	428a      	cmp	r2, r1
 8010f7c:	d000      	beq.n	8010f80 <HAL_RCC_OscConfig+0x2b4>
 8010f7e:	e706      	b.n	8010d8e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f80:	4a1b      	ldr	r2, [pc, #108]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010f82:	6812      	ldr	r2, [r2, #0]
 8010f84:	0792      	lsls	r2, r2, #30
 8010f86:	d526      	bpl.n	8010fd6 <HAL_RCC_OscConfig+0x30a>
 8010f88:	68e2      	ldr	r2, [r4, #12]
 8010f8a:	2a01      	cmp	r2, #1
 8010f8c:	d023      	beq.n	8010fd6 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8010f8e:	2001      	movs	r0, #1
 8010f90:	e00a      	b.n	8010fa8 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f92:	4a17      	ldr	r2, [pc, #92]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010f94:	6812      	ldr	r2, [r2, #0]
 8010f96:	0392      	lsls	r2, r2, #14
 8010f98:	d400      	bmi.n	8010f9c <HAL_RCC_OscConfig+0x2d0>
 8010f9a:	e6eb      	b.n	8010d74 <HAL_RCC_OscConfig+0xa8>
 8010f9c:	6862      	ldr	r2, [r4, #4]
 8010f9e:	2a00      	cmp	r2, #0
 8010fa0:	d000      	beq.n	8010fa4 <HAL_RCC_OscConfig+0x2d8>
 8010fa2:	e6e7      	b.n	8010d74 <HAL_RCC_OscConfig+0xa8>
 8010fa4:	e7f3      	b.n	8010f8e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8010fa6:	2003      	movs	r0, #3
}
 8010fa8:	b002      	add	sp, #8
 8010faa:	bc04      	pop	{r2}
 8010fac:	4690      	mov	r8, r2
 8010fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fb4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8010fb6:	4393      	bics	r3, r2
 8010fb8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010fba:	f7fe f9a9 	bl	800f310 <HAL_GetTick>
 8010fbe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fc0:	e004      	b.n	8010fcc <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010fc2:	f7fe f9a5 	bl	800f310 <HAL_GetTick>
 8010fc6:	1bc0      	subs	r0, r0, r7
 8010fc8:	2864      	cmp	r0, #100	; 0x64
 8010fca:	d8ec      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010fce:	421e      	tst	r6, r3
 8010fd0:	d1f7      	bne.n	8010fc2 <HAL_RCC_OscConfig+0x2f6>
 8010fd2:	6823      	ldr	r3, [r4, #0]
 8010fd4:	e771      	b.n	8010eba <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fd6:	25f8      	movs	r5, #248	; 0xf8
 8010fd8:	4805      	ldr	r0, [pc, #20]	; (8010ff0 <HAL_RCC_OscConfig+0x324>)
 8010fda:	6922      	ldr	r2, [r4, #16]
 8010fdc:	6801      	ldr	r1, [r0, #0]
 8010fde:	00d2      	lsls	r2, r2, #3
 8010fe0:	43a9      	bics	r1, r5
 8010fe2:	430a      	orrs	r2, r1
 8010fe4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010fe6:	071a      	lsls	r2, r3, #28
 8010fe8:	d400      	bmi.n	8010fec <HAL_RCC_OscConfig+0x320>
 8010fea:	e6f1      	b.n	8010dd0 <HAL_RCC_OscConfig+0x104>
 8010fec:	e74e      	b.n	8010e8c <HAL_RCC_OscConfig+0x1c0>
 8010fee:	46c0      	nop			; (mov r8, r8)
 8010ff0:	40021000 	.word	0x40021000
 8010ff4:	fffeffff 	.word	0xfffeffff
 8010ff8:	fffbffff 	.word	0xfffbffff
 8010ffc:	feffffff 	.word	0xfeffffff
 8011000:	40007000 	.word	0x40007000
 8011004:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8011008:	2201      	movs	r2, #1
 801100a:	4d7b      	ldr	r5, [pc, #492]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801100c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 801100e:	682b      	ldr	r3, [r5, #0]
 8011010:	4393      	bics	r3, r2
 8011012:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011014:	f7fe f97c 	bl	800f310 <HAL_GetTick>
 8011018:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801101a:	e004      	b.n	8011026 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801101c:	f7fe f978 	bl	800f310 <HAL_GetTick>
 8011020:	1bc0      	subs	r0, r0, r7
 8011022:	2864      	cmp	r0, #100	; 0x64
 8011024:	d8bf      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011026:	682b      	ldr	r3, [r5, #0]
 8011028:	421e      	tst	r6, r3
 801102a:	d1f7      	bne.n	801101c <HAL_RCC_OscConfig+0x350>
 801102c:	6823      	ldr	r3, [r4, #0]
 801102e:	e6cd      	b.n	8010dcc <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011030:	2204      	movs	r2, #4
 8011032:	4d71      	ldr	r5, [pc, #452]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011034:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011036:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011038:	4313      	orrs	r3, r2
 801103a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 801103c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801103e:	3a03      	subs	r2, #3
 8011040:	4393      	bics	r3, r2
 8011042:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011044:	f7fe f964 	bl	800f310 <HAL_GetTick>
 8011048:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801104a:	e004      	b.n	8011056 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801104c:	f7fe f960 	bl	800f310 <HAL_GetTick>
 8011050:	1bc0      	subs	r0, r0, r7
 8011052:	2864      	cmp	r0, #100	; 0x64
 8011054:	d8a7      	bhi.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011056:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011058:	421e      	tst	r6, r3
 801105a:	d1f7      	bne.n	801104c <HAL_RCC_OscConfig+0x380>
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	e6ce      	b.n	8010dfe <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011060:	2380      	movs	r3, #128	; 0x80
 8011062:	682a      	ldr	r2, [r5, #0]
 8011064:	02db      	lsls	r3, r3, #11
 8011066:	4313      	orrs	r3, r2
 8011068:	602b      	str	r3, [r5, #0]
 801106a:	2380      	movs	r3, #128	; 0x80
 801106c:	682a      	ldr	r2, [r5, #0]
 801106e:	025b      	lsls	r3, r3, #9
 8011070:	4313      	orrs	r3, r2
 8011072:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011074:	f7fe f94c 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011078:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 801107a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801107c:	4e5e      	ldr	r6, [pc, #376]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
 801107e:	02ad      	lsls	r5, r5, #10
 8011080:	e005      	b.n	801108e <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011082:	f7fe f945 	bl	800f310 <HAL_GetTick>
 8011086:	1bc0      	subs	r0, r0, r7
 8011088:	2864      	cmp	r0, #100	; 0x64
 801108a:	d900      	bls.n	801108e <HAL_RCC_OscConfig+0x3c2>
 801108c:	e78b      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801108e:	6833      	ldr	r3, [r6, #0]
 8011090:	422b      	tst	r3, r5
 8011092:	d0f6      	beq.n	8011082 <HAL_RCC_OscConfig+0x3b6>
 8011094:	6823      	ldr	r3, [r4, #0]
 8011096:	e66d      	b.n	8010d74 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011098:	22c0      	movs	r2, #192	; 0xc0
 801109a:	684b      	ldr	r3, [r1, #4]
 801109c:	0252      	lsls	r2, r2, #9
 801109e:	4013      	ands	r3, r2
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d000      	beq.n	80110a6 <HAL_RCC_OscConfig+0x3da>
 80110a4:	e6b9      	b.n	8010e1a <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80110a6:	4b54      	ldr	r3, [pc, #336]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
 80110a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110aa:	03db      	lsls	r3, r3, #15
 80110ac:	d400      	bmi.n	80110b0 <HAL_RCC_OscConfig+0x3e4>
 80110ae:	e6cb      	b.n	8010e48 <HAL_RCC_OscConfig+0x17c>
 80110b0:	69e3      	ldr	r3, [r4, #28]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d100      	bne.n	80110b8 <HAL_RCC_OscConfig+0x3ec>
 80110b6:	e6c7      	b.n	8010e48 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 80110b8:	2001      	movs	r0, #1
 80110ba:	e775      	b.n	8010fa8 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110bc:	2b05      	cmp	r3, #5
 80110be:	d0cf      	beq.n	8011060 <HAL_RCC_OscConfig+0x394>
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	4a4e      	ldr	r2, [pc, #312]	; (80111fc <HAL_RCC_OscConfig+0x530>)
 80110c4:	4013      	ands	r3, r2
 80110c6:	602b      	str	r3, [r5, #0]
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	4a4d      	ldr	r2, [pc, #308]	; (8011200 <HAL_RCC_OscConfig+0x534>)
 80110cc:	4013      	ands	r3, r2
 80110ce:	602b      	str	r3, [r5, #0]
 80110d0:	e7d0      	b.n	8011074 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 80110d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80110d4:	4a49      	ldr	r2, [pc, #292]	; (80111fc <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80110d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80110d8:	4013      	ands	r3, r2
 80110da:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80110dc:	f7fe f918 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80110e0:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 80110e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80110e4:	e005      	b.n	80110f2 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80110e6:	f7fe f913 	bl	800f310 <HAL_GetTick>
 80110ea:	1bc0      	subs	r0, r0, r7
 80110ec:	2864      	cmp	r0, #100	; 0x64
 80110ee:	d900      	bls.n	80110f2 <HAL_RCC_OscConfig+0x426>
 80110f0:	e759      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80110f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80110f4:	4233      	tst	r3, r6
 80110f6:	d1f6      	bne.n	80110e6 <HAL_RCC_OscConfig+0x41a>
 80110f8:	e6a6      	b.n	8010e48 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80110fa:	2104      	movs	r1, #4
 80110fc:	4d3e      	ldr	r5, [pc, #248]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80110fe:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011100:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011102:	430b      	orrs	r3, r1
 8011104:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011106:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011108:	431a      	orrs	r2, r3
 801110a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 801110c:	f7fe f900 	bl	800f310 <HAL_GetTick>
 8011110:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011112:	e005      	b.n	8011120 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011114:	f7fe f8fc 	bl	800f310 <HAL_GetTick>
 8011118:	1bc0      	subs	r0, r0, r7
 801111a:	2864      	cmp	r0, #100	; 0x64
 801111c:	d900      	bls.n	8011120 <HAL_RCC_OscConfig+0x454>
 801111e:	e742      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011120:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011122:	421e      	tst	r6, r3
 8011124:	d0f6      	beq.n	8011114 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011126:	21f8      	movs	r1, #248	; 0xf8
 8011128:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801112a:	69a3      	ldr	r3, [r4, #24]
 801112c:	438a      	bics	r2, r1
 801112e:	00db      	lsls	r3, r3, #3
 8011130:	4313      	orrs	r3, r2
 8011132:	636b      	str	r3, [r5, #52]	; 0x34
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	e662      	b.n	8010dfe <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	4a32      	ldr	r2, [pc, #200]	; (8011204 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801113c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801113e:	4013      	ands	r3, r2
 8011140:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011142:	f7fe f8e5 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011146:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8011148:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801114a:	e005      	b.n	8011158 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801114c:	f7fe f8e0 	bl	800f310 <HAL_GetTick>
 8011150:	1bc0      	subs	r0, r0, r7
 8011152:	2864      	cmp	r0, #100	; 0x64
 8011154:	d900      	bls.n	8011158 <HAL_RCC_OscConfig+0x48c>
 8011156:	e726      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011158:	682b      	ldr	r3, [r5, #0]
 801115a:	4233      	tst	r3, r6
 801115c:	d1f6      	bne.n	801114c <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801115e:	220f      	movs	r2, #15
 8011160:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011162:	4393      	bics	r3, r2
 8011164:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011166:	4313      	orrs	r3, r2
 8011168:	62eb      	str	r3, [r5, #44]	; 0x2c
 801116a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801116c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801116e:	686a      	ldr	r2, [r5, #4]
 8011170:	430b      	orrs	r3, r1
 8011172:	4925      	ldr	r1, [pc, #148]	; (8011208 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011174:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011176:	400a      	ands	r2, r1
 8011178:	4313      	orrs	r3, r2
 801117a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801117c:	2380      	movs	r3, #128	; 0x80
 801117e:	682a      	ldr	r2, [r5, #0]
 8011180:	045b      	lsls	r3, r3, #17
 8011182:	4313      	orrs	r3, r2
 8011184:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011186:	f7fe f8c3 	bl	800f310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801118a:	4d1b      	ldr	r5, [pc, #108]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 801118c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801118e:	04a4      	lsls	r4, r4, #18
 8011190:	e005      	b.n	801119e <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011192:	f7fe f8bd 	bl	800f310 <HAL_GetTick>
 8011196:	1b80      	subs	r0, r0, r6
 8011198:	2864      	cmp	r0, #100	; 0x64
 801119a:	d900      	bls.n	801119e <HAL_RCC_OscConfig+0x4d2>
 801119c:	e703      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801119e:	682b      	ldr	r3, [r5, #0]
 80111a0:	4223      	tst	r3, r4
 80111a2:	d0f6      	beq.n	8011192 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 80111a4:	2000      	movs	r0, #0
 80111a6:	e6ff      	b.n	8010fa8 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80111a8:	2201      	movs	r2, #1
 80111aa:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111ac:	4e12      	ldr	r6, [pc, #72]	; (80111f8 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80111ae:	4393      	bics	r3, r2
 80111b0:	622b      	str	r3, [r5, #32]
 80111b2:	6a2b      	ldr	r3, [r5, #32]
 80111b4:	3203      	adds	r2, #3
 80111b6:	4393      	bics	r3, r2
 80111b8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80111ba:	f7fe f8a9 	bl	800f310 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111be:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 80111c0:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111c2:	4f12      	ldr	r7, [pc, #72]	; (801120c <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111c4:	e006      	b.n	80111d4 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111c6:	f7fe f8a3 	bl	800f310 <HAL_GetTick>
 80111ca:	4643      	mov	r3, r8
 80111cc:	1ac0      	subs	r0, r0, r3
 80111ce:	42b8      	cmp	r0, r7
 80111d0:	d900      	bls.n	80111d4 <HAL_RCC_OscConfig+0x508>
 80111d2:	e6e8      	b.n	8010fa6 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111d4:	6a33      	ldr	r3, [r6, #32]
 80111d6:	421d      	tst	r5, r3
 80111d8:	d1f5      	bne.n	80111c6 <HAL_RCC_OscConfig+0x4fa>
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	e5fa      	b.n	8010dd4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80111de:	6a2a      	ldr	r2, [r5, #32]
 80111e0:	4313      	orrs	r3, r2
 80111e2:	622b      	str	r3, [r5, #32]
 80111e4:	e6b1      	b.n	8010f4a <HAL_RCC_OscConfig+0x27e>
 80111e6:	2204      	movs	r2, #4
 80111e8:	6a2b      	ldr	r3, [r5, #32]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	622b      	str	r3, [r5, #32]
 80111ee:	6a2b      	ldr	r3, [r5, #32]
 80111f0:	3a03      	subs	r2, #3
 80111f2:	4313      	orrs	r3, r2
 80111f4:	622b      	str	r3, [r5, #32]
 80111f6:	e6a8      	b.n	8010f4a <HAL_RCC_OscConfig+0x27e>
 80111f8:	40021000 	.word	0x40021000
 80111fc:	fffeffff 	.word	0xfffeffff
 8011200:	fffbffff 	.word	0xfffbffff
 8011204:	feffffff 	.word	0xfeffffff
 8011208:	ffc27fff 	.word	0xffc27fff
 801120c:	00001388 	.word	0x00001388

08011210 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011212:	46ce      	mov	lr, r9
 8011214:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011216:	2301      	movs	r3, #1
{
 8011218:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801121a:	4985      	ldr	r1, [pc, #532]	; (8011430 <HAL_RCC_ClockConfig+0x220>)
{
 801121c:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801121e:	680a      	ldr	r2, [r1, #0]
{
 8011220:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011222:	401a      	ands	r2, r3
 8011224:	42a2      	cmp	r2, r4
 8011226:	d20c      	bcs.n	8011242 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011228:	680a      	ldr	r2, [r1, #0]
 801122a:	439a      	bics	r2, r3
 801122c:	4322      	orrs	r2, r4
 801122e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011230:	680a      	ldr	r2, [r1, #0]
 8011232:	4013      	ands	r3, r2
 8011234:	42a3      	cmp	r3, r4
 8011236:	d054      	beq.n	80112e2 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8011238:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801123a:	bc0c      	pop	{r2, r3}
 801123c:	4690      	mov	r8, r2
 801123e:	4699      	mov	r9, r3
 8011240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011242:	6803      	ldr	r3, [r0, #0]
 8011244:	079a      	lsls	r2, r3, #30
 8011246:	d506      	bpl.n	8011256 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011248:	20f0      	movs	r0, #240	; 0xf0
 801124a:	497a      	ldr	r1, [pc, #488]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
 801124c:	684a      	ldr	r2, [r1, #4]
 801124e:	4382      	bics	r2, r0
 8011250:	68a8      	ldr	r0, [r5, #8]
 8011252:	4302      	orrs	r2, r0
 8011254:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011256:	07db      	lsls	r3, r3, #31
 8011258:	d52a      	bpl.n	80112b0 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801125a:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801125c:	4a75      	ldr	r2, [pc, #468]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801125e:	2b01      	cmp	r3, #1
 8011260:	d073      	beq.n	801134a <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011262:	2b02      	cmp	r3, #2
 8011264:	d075      	beq.n	8011352 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011266:	2b03      	cmp	r3, #3
 8011268:	d100      	bne.n	801126c <HAL_RCC_ClockConfig+0x5c>
 801126a:	e09c      	b.n	80113a6 <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801126c:	6812      	ldr	r2, [r2, #0]
 801126e:	0792      	lsls	r2, r2, #30
 8011270:	d5e2      	bpl.n	8011238 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011272:	2103      	movs	r1, #3
 8011274:	4e6f      	ldr	r6, [pc, #444]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
 8011276:	6872      	ldr	r2, [r6, #4]
 8011278:	438a      	bics	r2, r1
 801127a:	4313      	orrs	r3, r2
 801127c:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 801127e:	f7fe f847 	bl	800f310 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011282:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011284:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011286:	2b01      	cmp	r3, #1
 8011288:	d07d      	beq.n	8011386 <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801128a:	2b02      	cmp	r3, #2
 801128c:	d100      	bne.n	8011290 <HAL_RCC_ClockConfig+0x80>
 801128e:	e093      	b.n	80113b8 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011290:	2b03      	cmp	r3, #3
 8011292:	d066      	beq.n	8011362 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011294:	230c      	movs	r3, #12
 8011296:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011298:	4b67      	ldr	r3, [pc, #412]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 801129a:	4699      	mov	r9, r3
 801129c:	e004      	b.n	80112a8 <HAL_RCC_ClockConfig+0x98>
 801129e:	f7fe f837 	bl	800f310 <HAL_GetTick>
 80112a2:	1bc0      	subs	r0, r0, r7
 80112a4:	4548      	cmp	r0, r9
 80112a6:	d86c      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80112a8:	4642      	mov	r2, r8
 80112aa:	6873      	ldr	r3, [r6, #4]
 80112ac:	421a      	tst	r2, r3
 80112ae:	d1f6      	bne.n	801129e <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80112b0:	2201      	movs	r2, #1
 80112b2:	495f      	ldr	r1, [pc, #380]	; (8011430 <HAL_RCC_ClockConfig+0x220>)
 80112b4:	680b      	ldr	r3, [r1, #0]
 80112b6:	4393      	bics	r3, r2
 80112b8:	4323      	orrs	r3, r4
 80112ba:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80112bc:	680b      	ldr	r3, [r1, #0]
 80112be:	401a      	ands	r2, r3
 80112c0:	42a2      	cmp	r2, r4
 80112c2:	d1b9      	bne.n	8011238 <HAL_RCC_ClockConfig+0x28>
 80112c4:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112c6:	075b      	lsls	r3, r3, #29
 80112c8:	d506      	bpl.n	80112d8 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80112ca:	4a5a      	ldr	r2, [pc, #360]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
 80112cc:	495b      	ldr	r1, [pc, #364]	; (801143c <HAL_RCC_ClockConfig+0x22c>)
 80112ce:	6853      	ldr	r3, [r2, #4]
 80112d0:	400b      	ands	r3, r1
 80112d2:	68e9      	ldr	r1, [r5, #12]
 80112d4:	430b      	orrs	r3, r1
 80112d6:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80112d8:	2000      	movs	r0, #0
 80112da:	f7fd ffef 	bl	800f2bc <HAL_InitTick>
  return HAL_OK;
 80112de:	2000      	movs	r0, #0
 80112e0:	e7ab      	b.n	801123a <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80112e2:	6803      	ldr	r3, [r0, #0]
 80112e4:	079a      	lsls	r2, r3, #30
 80112e6:	d506      	bpl.n	80112f6 <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80112e8:	20f0      	movs	r0, #240	; 0xf0
 80112ea:	4952      	ldr	r1, [pc, #328]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
 80112ec:	684a      	ldr	r2, [r1, #4]
 80112ee:	4382      	bics	r2, r0
 80112f0:	68a8      	ldr	r0, [r5, #8]
 80112f2:	4302      	orrs	r2, r0
 80112f4:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80112f6:	07da      	lsls	r2, r3, #31
 80112f8:	d5e5      	bpl.n	80112c6 <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80112fa:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80112fc:	4a4d      	ldr	r2, [pc, #308]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d056      	beq.n	80113b0 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011302:	2b02      	cmp	r3, #2
 8011304:	d029      	beq.n	801135a <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011306:	2b03      	cmp	r3, #3
 8011308:	d073      	beq.n	80113f2 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801130a:	6812      	ldr	r2, [r2, #0]
 801130c:	0792      	lsls	r2, r2, #30
 801130e:	d593      	bpl.n	8011238 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011310:	2103      	movs	r1, #3
 8011312:	4c48      	ldr	r4, [pc, #288]	; (8011434 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011314:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011316:	6862      	ldr	r2, [r4, #4]
 8011318:	438a      	bics	r2, r1
 801131a:	4313      	orrs	r3, r2
 801131c:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 801131e:	f7fd fff7 	bl	800f310 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011322:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011324:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011326:	2b01      	cmp	r3, #1
 8011328:	d056      	beq.n	80113d8 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801132a:	2b02      	cmp	r3, #2
 801132c:	d065      	beq.n	80113fa <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801132e:	2b03      	cmp	r3, #3
 8011330:	d070      	beq.n	8011414 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011332:	4b41      	ldr	r3, [pc, #260]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 8011334:	4698      	mov	r8, r3
 8011336:	e004      	b.n	8011342 <HAL_RCC_ClockConfig+0x132>
 8011338:	f7fd ffea 	bl	800f310 <HAL_GetTick>
 801133c:	1b80      	subs	r0, r0, r6
 801133e:	4540      	cmp	r0, r8
 8011340:	d81f      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011342:	6863      	ldr	r3, [r4, #4]
 8011344:	421f      	tst	r7, r3
 8011346:	d1f7      	bne.n	8011338 <HAL_RCC_ClockConfig+0x128>
 8011348:	e7bc      	b.n	80112c4 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801134a:	6812      	ldr	r2, [r2, #0]
 801134c:	0392      	lsls	r2, r2, #14
 801134e:	d490      	bmi.n	8011272 <HAL_RCC_ClockConfig+0x62>
 8011350:	e772      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011352:	6812      	ldr	r2, [r2, #0]
 8011354:	0192      	lsls	r2, r2, #6
 8011356:	d48c      	bmi.n	8011272 <HAL_RCC_ClockConfig+0x62>
 8011358:	e76e      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801135a:	6812      	ldr	r2, [r2, #0]
 801135c:	0192      	lsls	r2, r2, #6
 801135e:	d4d7      	bmi.n	8011310 <HAL_RCC_ClockConfig+0x100>
 8011360:	e76a      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011362:	3309      	adds	r3, #9
 8011364:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011366:	4b34      	ldr	r3, [pc, #208]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 8011368:	4699      	mov	r9, r3
 801136a:	e004      	b.n	8011376 <HAL_RCC_ClockConfig+0x166>
 801136c:	f7fd ffd0 	bl	800f310 <HAL_GetTick>
 8011370:	1bc0      	subs	r0, r0, r7
 8011372:	4548      	cmp	r0, r9
 8011374:	d805      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011376:	4642      	mov	r2, r8
 8011378:	6873      	ldr	r3, [r6, #4]
 801137a:	4013      	ands	r3, r2
 801137c:	2b0c      	cmp	r3, #12
 801137e:	d1f5      	bne.n	801136c <HAL_RCC_ClockConfig+0x15c>
 8011380:	e796      	b.n	80112b0 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8011382:	2003      	movs	r0, #3
 8011384:	e759      	b.n	801123a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011386:	330b      	adds	r3, #11
 8011388:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801138a:	4b2b      	ldr	r3, [pc, #172]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 801138c:	4699      	mov	r9, r3
 801138e:	e004      	b.n	801139a <HAL_RCC_ClockConfig+0x18a>
 8011390:	f7fd ffbe 	bl	800f310 <HAL_GetTick>
 8011394:	1bc0      	subs	r0, r0, r7
 8011396:	4548      	cmp	r0, r9
 8011398:	d8f3      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801139a:	4642      	mov	r2, r8
 801139c:	6873      	ldr	r3, [r6, #4]
 801139e:	4013      	ands	r3, r2
 80113a0:	2b04      	cmp	r3, #4
 80113a2:	d1f5      	bne.n	8011390 <HAL_RCC_ClockConfig+0x180>
 80113a4:	e784      	b.n	80112b0 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80113a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80113a8:	03d2      	lsls	r2, r2, #15
 80113aa:	d500      	bpl.n	80113ae <HAL_RCC_ClockConfig+0x19e>
 80113ac:	e761      	b.n	8011272 <HAL_RCC_ClockConfig+0x62>
 80113ae:	e743      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80113b0:	6812      	ldr	r2, [r2, #0]
 80113b2:	0392      	lsls	r2, r2, #14
 80113b4:	d4ac      	bmi.n	8011310 <HAL_RCC_ClockConfig+0x100>
 80113b6:	e73f      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80113b8:	330a      	adds	r3, #10
 80113ba:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113bc:	4b1e      	ldr	r3, [pc, #120]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 80113be:	4699      	mov	r9, r3
 80113c0:	e004      	b.n	80113cc <HAL_RCC_ClockConfig+0x1bc>
 80113c2:	f7fd ffa5 	bl	800f310 <HAL_GetTick>
 80113c6:	1bc0      	subs	r0, r0, r7
 80113c8:	4548      	cmp	r0, r9
 80113ca:	d8da      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80113cc:	4642      	mov	r2, r8
 80113ce:	6873      	ldr	r3, [r6, #4]
 80113d0:	4013      	ands	r3, r2
 80113d2:	2b08      	cmp	r3, #8
 80113d4:	d1f5      	bne.n	80113c2 <HAL_RCC_ClockConfig+0x1b2>
 80113d6:	e76b      	b.n	80112b0 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113d8:	4b17      	ldr	r3, [pc, #92]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 80113da:	4698      	mov	r8, r3
 80113dc:	e004      	b.n	80113e8 <HAL_RCC_ClockConfig+0x1d8>
 80113de:	f7fd ff97 	bl	800f310 <HAL_GetTick>
 80113e2:	1b80      	subs	r0, r0, r6
 80113e4:	4540      	cmp	r0, r8
 80113e6:	d8cc      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80113e8:	6863      	ldr	r3, [r4, #4]
 80113ea:	403b      	ands	r3, r7
 80113ec:	2b04      	cmp	r3, #4
 80113ee:	d1f6      	bne.n	80113de <HAL_RCC_ClockConfig+0x1ce>
 80113f0:	e768      	b.n	80112c4 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80113f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80113f4:	03d2      	lsls	r2, r2, #15
 80113f6:	d48b      	bmi.n	8011310 <HAL_RCC_ClockConfig+0x100>
 80113f8:	e71e      	b.n	8011238 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113fa:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 80113fc:	4698      	mov	r8, r3
 80113fe:	e004      	b.n	801140a <HAL_RCC_ClockConfig+0x1fa>
 8011400:	f7fd ff86 	bl	800f310 <HAL_GetTick>
 8011404:	1b80      	subs	r0, r0, r6
 8011406:	4540      	cmp	r0, r8
 8011408:	d8bb      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801140a:	6863      	ldr	r3, [r4, #4]
 801140c:	403b      	ands	r3, r7
 801140e:	2b08      	cmp	r3, #8
 8011410:	d1f6      	bne.n	8011400 <HAL_RCC_ClockConfig+0x1f0>
 8011412:	e757      	b.n	80112c4 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011414:	4b08      	ldr	r3, [pc, #32]	; (8011438 <HAL_RCC_ClockConfig+0x228>)
 8011416:	4698      	mov	r8, r3
 8011418:	e004      	b.n	8011424 <HAL_RCC_ClockConfig+0x214>
 801141a:	f7fd ff79 	bl	800f310 <HAL_GetTick>
 801141e:	1b80      	subs	r0, r0, r6
 8011420:	4540      	cmp	r0, r8
 8011422:	d8ae      	bhi.n	8011382 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011424:	6863      	ldr	r3, [r4, #4]
 8011426:	403b      	ands	r3, r7
 8011428:	2b0c      	cmp	r3, #12
 801142a:	d1f6      	bne.n	801141a <HAL_RCC_ClockConfig+0x20a>
 801142c:	e74a      	b.n	80112c4 <HAL_RCC_ClockConfig+0xb4>
 801142e:	46c0      	nop			; (mov r8, r8)
 8011430:	40022000 	.word	0x40022000
 8011434:	40021000 	.word	0x40021000
 8011438:	00001388 	.word	0x00001388
 801143c:	fffff8ff 	.word	0xfffff8ff

08011440 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011440:	b570      	push	{r4, r5, r6, lr}
 8011442:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011444:	4669      	mov	r1, sp
 8011446:	4b1c      	ldr	r3, [pc, #112]	; (80114b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8011448:	000a      	movs	r2, r1
 801144a:	0018      	movs	r0, r3
 801144c:	c870      	ldmia	r0!, {r4, r5, r6}
 801144e:	c270      	stmia	r2!, {r4, r5, r6}
 8011450:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011452:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011454:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011456:	aa04      	add	r2, sp, #16
 8011458:	0010      	movs	r0, r2
 801145a:	cb70      	ldmia	r3!, {r4, r5, r6}
 801145c:	c070      	stmia	r0!, {r4, r5, r6}
 801145e:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011460:	4d16      	ldr	r5, [pc, #88]	; (80114bc <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011462:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011464:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8011466:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011468:	4018      	ands	r0, r3
 801146a:	2808      	cmp	r0, #8
 801146c:	d00a      	beq.n	8011484 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801146e:	380c      	subs	r0, #12
 8011470:	4243      	negs	r3, r0
 8011472:	4158      	adcs	r0, r3
 8011474:	4b12      	ldr	r3, [pc, #72]	; (80114c0 <HAL_RCC_GetSysClockFreq+0x80>)
 8011476:	4240      	negs	r0, r0
 8011478:	4018      	ands	r0, r3
 801147a:	4b12      	ldr	r3, [pc, #72]	; (80114c4 <HAL_RCC_GetSysClockFreq+0x84>)
 801147c:	469c      	mov	ip, r3
 801147e:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011480:	b008      	add	sp, #32
 8011482:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011484:	200f      	movs	r0, #15
 8011486:	0c9c      	lsrs	r4, r3, #18
 8011488:	4004      	ands	r4, r0
 801148a:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 801148c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801148e:	4008      	ands	r0, r1
 8011490:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011492:	22c0      	movs	r2, #192	; 0xc0
 8011494:	2080      	movs	r0, #128	; 0x80
 8011496:	0252      	lsls	r2, r2, #9
 8011498:	4013      	ands	r3, r2
 801149a:	0240      	lsls	r0, r0, #9
 801149c:	4283      	cmp	r3, r0
 801149e:	d001      	beq.n	80114a4 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d004      	beq.n	80114ae <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80114a4:	4807      	ldr	r0, [pc, #28]	; (80114c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80114a6:	f7ee fe53 	bl	8000150 <__udivsi3>
 80114aa:	4360      	muls	r0, r4
 80114ac:	e7e8      	b.n	8011480 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80114ae:	4806      	ldr	r0, [pc, #24]	; (80114c8 <HAL_RCC_GetSysClockFreq+0x88>)
 80114b0:	f7ee fe4e 	bl	8000150 <__udivsi3>
 80114b4:	4360      	muls	r0, r4
 80114b6:	e7e3      	b.n	8011480 <HAL_RCC_GetSysClockFreq+0x40>
 80114b8:	08017e94 	.word	0x08017e94
 80114bc:	40021000 	.word	0x40021000
 80114c0:	02625a00 	.word	0x02625a00
 80114c4:	007a1200 	.word	0x007a1200
 80114c8:	02dc6c00 	.word	0x02dc6c00

080114cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80114cc:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80114ce:	f7ff ffb7 	bl	8011440 <HAL_RCC_GetSysClockFreq>
 80114d2:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80114d4:	4a05      	ldr	r2, [pc, #20]	; (80114ec <HAL_RCC_GetHCLKFreq+0x20>)
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	3220      	adds	r2, #32
 80114da:	061b      	lsls	r3, r3, #24
 80114dc:	0f1b      	lsrs	r3, r3, #28
 80114de:	5cd3      	ldrb	r3, [r2, r3]
 80114e0:	40d8      	lsrs	r0, r3
 80114e2:	4b03      	ldr	r3, [pc, #12]	; (80114f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80114e4:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80114e6:	bd10      	pop	{r4, pc}
 80114e8:	40021000 	.word	0x40021000
 80114ec:	08017e94 	.word	0x08017e94
 80114f0:	200000b8 	.word	0x200000b8

080114f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80114f4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80114f6:	f7ff ffa3 	bl	8011440 <HAL_RCC_GetSysClockFreq>
 80114fa:	4908      	ldr	r1, [pc, #32]	; (801151c <HAL_RCC_GetPCLK1Freq+0x28>)
 80114fc:	4a08      	ldr	r2, [pc, #32]	; (8011520 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80114fe:	684b      	ldr	r3, [r1, #4]
 8011500:	3220      	adds	r2, #32
 8011502:	061b      	lsls	r3, r3, #24
 8011504:	0f1b      	lsrs	r3, r3, #28
 8011506:	5cd3      	ldrb	r3, [r2, r3]
 8011508:	40d8      	lsrs	r0, r3
 801150a:	4b06      	ldr	r3, [pc, #24]	; (8011524 <HAL_RCC_GetPCLK1Freq+0x30>)
 801150c:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801150e:	684b      	ldr	r3, [r1, #4]
 8011510:	055b      	lsls	r3, r3, #21
 8011512:	0f5b      	lsrs	r3, r3, #29
 8011514:	5cd3      	ldrb	r3, [r2, r3]
 8011516:	40d8      	lsrs	r0, r3
}    
 8011518:	bd10      	pop	{r4, pc}
 801151a:	46c0      	nop			; (mov r8, r8)
 801151c:	40021000 	.word	0x40021000
 8011520:	08017e94 	.word	0x08017e94
 8011524:	200000b8 	.word	0x200000b8

08011528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801152a:	46c6      	mov	lr, r8
 801152c:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801152e:	6803      	ldr	r3, [r0, #0]
{
 8011530:	b082      	sub	sp, #8
 8011532:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011534:	03da      	lsls	r2, r3, #15
 8011536:	d507      	bpl.n	8011548 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011538:	493e      	ldr	r1, [pc, #248]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801153a:	6840      	ldr	r0, [r0, #4]
 801153c:	6a0a      	ldr	r2, [r1, #32]
 801153e:	4042      	eors	r2, r0
 8011540:	20c0      	movs	r0, #192	; 0xc0
 8011542:	0080      	lsls	r0, r0, #2
 8011544:	4202      	tst	r2, r0
 8011546:	d131      	bne.n	80115ac <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011548:	07da      	lsls	r2, r3, #31
 801154a:	d506      	bpl.n	801155a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801154c:	2003      	movs	r0, #3
 801154e:	4939      	ldr	r1, [pc, #228]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011550:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011552:	4382      	bics	r2, r0
 8011554:	68a0      	ldr	r0, [r4, #8]
 8011556:	4302      	orrs	r2, r0
 8011558:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801155a:	079a      	lsls	r2, r3, #30
 801155c:	d506      	bpl.n	801156c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801155e:	4935      	ldr	r1, [pc, #212]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011560:	4835      	ldr	r0, [pc, #212]	; (8011638 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8011562:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011564:	4002      	ands	r2, r0
 8011566:	68e0      	ldr	r0, [r4, #12]
 8011568:	4302      	orrs	r2, r0
 801156a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801156c:	035a      	lsls	r2, r3, #13
 801156e:	d506      	bpl.n	801157e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011570:	4930      	ldr	r1, [pc, #192]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011572:	4832      	ldr	r0, [pc, #200]	; (801163c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011574:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011576:	4002      	ands	r2, r0
 8011578:	6920      	ldr	r0, [r4, #16]
 801157a:	4302      	orrs	r2, r0
 801157c:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801157e:	069a      	lsls	r2, r3, #26
 8011580:	d506      	bpl.n	8011590 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011582:	2010      	movs	r0, #16
 8011584:	492b      	ldr	r1, [pc, #172]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011586:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011588:	4382      	bics	r2, r0
 801158a:	6960      	ldr	r0, [r4, #20]
 801158c:	4302      	orrs	r2, r0
 801158e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011590:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011592:	055b      	lsls	r3, r3, #21
 8011594:	d506      	bpl.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011596:	2140      	movs	r1, #64	; 0x40
 8011598:	4a26      	ldr	r2, [pc, #152]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801159a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801159c:	438b      	bics	r3, r1
 801159e:	69a1      	ldr	r1, [r4, #24]
 80115a0:	430b      	orrs	r3, r1
 80115a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80115a4:	b002      	add	sp, #8
 80115a6:	bc04      	pop	{r2}
 80115a8:	4690      	mov	r8, r2
 80115aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80115ac:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80115ae:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80115b0:	69ca      	ldr	r2, [r1, #28]
 80115b2:	0540      	lsls	r0, r0, #21
 80115b4:	4302      	orrs	r2, r0
 80115b6:	61ca      	str	r2, [r1, #28]
 80115b8:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80115ba:	4d21      	ldr	r5, [pc, #132]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80115bc:	4003      	ands	r3, r0
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80115c2:	682b      	ldr	r3, [r5, #0]
 80115c4:	0076      	lsls	r6, r6, #1
 80115c6:	4333      	orrs	r3, r6
 80115c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80115ca:	f7fd fea1 	bl	800f310 <HAL_GetTick>
 80115ce:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80115d0:	e004      	b.n	80115dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80115d2:	f7fd fe9d 	bl	800f310 <HAL_GetTick>
 80115d6:	1bc0      	subs	r0, r0, r7
 80115d8:	2864      	cmp	r0, #100	; 0x64
 80115da:	d829      	bhi.n	8011630 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	4233      	tst	r3, r6
 80115e0:	d0f7      	beq.n	80115d2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80115e2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80115e4:	4d13      	ldr	r5, [pc, #76]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80115e6:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80115e8:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80115ea:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80115ec:	4b15      	ldr	r3, [pc, #84]	; (8011644 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80115ee:	4302      	orrs	r2, r0
 80115f0:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80115f2:	6a2a      	ldr	r2, [r5, #32]
 80115f4:	4814      	ldr	r0, [pc, #80]	; (8011648 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80115f6:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80115f8:	4002      	ands	r2, r0
 80115fa:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80115fc:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80115fe:	078b      	lsls	r3, r1, #30
 8011600:	d408      	bmi.n	8011614 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011602:	4a0c      	ldr	r2, [pc, #48]	; (8011634 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011604:	490f      	ldr	r1, [pc, #60]	; (8011644 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8011606:	6a13      	ldr	r3, [r2, #32]
 8011608:	400b      	ands	r3, r1
 801160a:	6861      	ldr	r1, [r4, #4]
 801160c:	430b      	orrs	r3, r1
 801160e:	6213      	str	r3, [r2, #32]
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	e799      	b.n	8011548 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011614:	f7fd fe7c 	bl	800f310 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011618:	4b0c      	ldr	r3, [pc, #48]	; (801164c <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 801161a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801161c:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801161e:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011620:	6a2b      	ldr	r3, [r5, #32]
 8011622:	421e      	tst	r6, r3
 8011624:	d1ed      	bne.n	8011602 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011626:	f7fd fe73 	bl	800f310 <HAL_GetTick>
 801162a:	1bc0      	subs	r0, r0, r7
 801162c:	4540      	cmp	r0, r8
 801162e:	d9f7      	bls.n	8011620 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011630:	2003      	movs	r0, #3
 8011632:	e7b7      	b.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011634:	40021000 	.word	0x40021000
 8011638:	fffcffff 	.word	0xfffcffff
 801163c:	fff3ffff 	.word	0xfff3ffff
 8011640:	40007000 	.word	0x40007000
 8011644:	fffffcff 	.word	0xfffffcff
 8011648:	fffeffff 	.word	0xfffeffff
 801164c:	00001388 	.word	0x00001388

08011650 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011650:	4770      	bx	lr
 8011652:	46c0      	nop			; (mov r8, r8)

08011654 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011654:	6803      	ldr	r3, [r0, #0]
{
 8011656:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011658:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801165a:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801165c:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801165e:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011660:	681c      	ldr	r4, [r3, #0]
 8011662:	4b13      	ldr	r3, [pc, #76]	; (80116b0 <HAL_RTC_GetTime+0x5c>)
 8011664:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011666:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011668:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801166a:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801166c:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801166e:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011670:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011672:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011674:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011676:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011678:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801167a:	2a00      	cmp	r2, #0
 801167c:	d115      	bne.n	80116aa <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 801167e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011680:	0900      	lsrs	r0, r0, #4
 8011682:	0082      	lsls	r2, r0, #2
 8011684:	1810      	adds	r0, r2, r0
 8011686:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011688:	4035      	ands	r5, r6
 801168a:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801168c:	0918      	lsrs	r0, r3, #4
 801168e:	0082      	lsls	r2, r0, #2
 8011690:	1812      	adds	r2, r2, r0
 8011692:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011694:	4033      	ands	r3, r6
 8011696:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011698:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801169a:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801169c:	0093      	lsls	r3, r2, #2
 801169e:	189b      	adds	r3, r3, r2
 80116a0:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80116a2:	4034      	ands	r4, r6
 80116a4:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80116a6:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80116a8:	708c      	strb	r4, [r1, #2]
}
 80116aa:	2000      	movs	r0, #0
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
 80116ae:	46c0      	nop			; (mov r8, r8)
 80116b0:	007f7f7f 	.word	0x007f7f7f

080116b4 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80116b4:	6803      	ldr	r3, [r0, #0]
 80116b6:	4815      	ldr	r0, [pc, #84]	; (801170c <HAL_RTC_GetDate+0x58>)
 80116b8:	685b      	ldr	r3, [r3, #4]
{
 80116ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80116bc:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80116be:	201f      	movs	r0, #31
 80116c0:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80116c2:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80116c4:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80116c6:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80116c8:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80116ca:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80116cc:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80116ce:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80116d0:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80116d2:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80116d4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80116d6:	2a00      	cmp	r2, #0
 80116d8:	d115      	bne.n	8011706 <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80116da:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80116dc:	093b      	lsrs	r3, r7, #4
 80116de:	009a      	lsls	r2, r3, #2
 80116e0:	18d2      	adds	r2, r2, r3
 80116e2:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80116e4:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80116e6:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80116e8:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80116ea:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80116ec:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80116ee:	092a      	lsrs	r2, r5, #4
 80116f0:	18c0      	adds	r0, r0, r3
 80116f2:	0093      	lsls	r3, r2, #2
 80116f4:	189b      	adds	r3, r3, r2
 80116f6:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80116f8:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80116fa:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80116fc:	4035      	ands	r5, r6
 80116fe:	1904      	adds	r4, r0, r4
 8011700:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011702:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011704:	708b      	strb	r3, [r1, #2]
}
 8011706:	2000      	movs	r0, #0
 8011708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170a:	46c0      	nop			; (mov r8, r8)
 801170c:	00ffff3f 	.word	0x00ffff3f

08011710 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011710:	21a0      	movs	r1, #160	; 0xa0
 8011712:	6802      	ldr	r2, [r0, #0]
{
 8011714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011716:	68d3      	ldr	r3, [r2, #12]
{
 8011718:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801171a:	438b      	bics	r3, r1
 801171c:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 801171e:	f7fd fdf7 	bl	800f310 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011722:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8011724:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011726:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011728:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801172a:	e004      	b.n	8011736 <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801172c:	f7fd fdf0 	bl	800f310 <HAL_GetTick>
 8011730:	1bc0      	subs	r0, r0, r7
 8011732:	42b0      	cmp	r0, r6
 8011734:	d805      	bhi.n	8011742 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011736:	6823      	ldr	r3, [r4, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	421d      	tst	r5, r3
 801173c:	d0f6      	beq.n	801172c <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 801173e:	2000      	movs	r0, #0
}
 8011740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8011742:	2003      	movs	r0, #3
 8011744:	e7fc      	b.n	8011740 <HAL_RTC_WaitForSynchro+0x30>
 8011746:	46c0      	nop			; (mov r8, r8)

08011748 <RTC_EnterInitMode>:
{
 8011748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801174a:	6803      	ldr	r3, [r0, #0]
{
 801174c:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801174e:	68da      	ldr	r2, [r3, #12]
 8011750:	0652      	lsls	r2, r2, #25
 8011752:	d501      	bpl.n	8011758 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8011754:	2000      	movs	r0, #0
}
 8011756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011758:	2201      	movs	r2, #1
 801175a:	4252      	negs	r2, r2
 801175c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801175e:	f7fd fdd7 	bl	800f310 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011762:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8011764:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011766:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011768:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801176a:	e004      	b.n	8011776 <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801176c:	f7fd fdd0 	bl	800f310 <HAL_GetTick>
 8011770:	1bc0      	subs	r0, r0, r7
 8011772:	42b0      	cmp	r0, r6
 8011774:	d804      	bhi.n	8011780 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	421d      	tst	r5, r3
 801177c:	d0f6      	beq.n	801176c <RTC_EnterInitMode+0x24>
 801177e:	e7e9      	b.n	8011754 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011780:	2003      	movs	r0, #3
 8011782:	e7e8      	b.n	8011756 <RTC_EnterInitMode+0xe>

08011784 <HAL_RTC_Init>:
{
 8011784:	b570      	push	{r4, r5, r6, lr}
 8011786:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011788:	d03e      	beq.n	8011808 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801178a:	7f43      	ldrb	r3, [r0, #29]
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d036      	beq.n	8011800 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011792:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011794:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011796:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011798:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801179a:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801179c:	625a      	str	r2, [r3, #36]	; 0x24
 801179e:	3a77      	subs	r2, #119	; 0x77
 80117a0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80117a2:	f7ff ffd1 	bl	8011748 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80117a6:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d123      	bne.n	80117f4 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80117ac:	689a      	ldr	r2, [r3, #8]
 80117ae:	4917      	ldr	r1, [pc, #92]	; (801180c <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80117b0:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80117b2:	400a      	ands	r2, r1
 80117b4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80117b6:	6862      	ldr	r2, [r4, #4]
 80117b8:	6899      	ldr	r1, [r3, #8]
 80117ba:	432a      	orrs	r2, r5
 80117bc:	6965      	ldr	r5, [r4, #20]
 80117be:	432a      	orrs	r2, r5
 80117c0:	430a      	orrs	r2, r1
 80117c2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80117c4:	68e2      	ldr	r2, [r4, #12]
 80117c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80117c8:	68a2      	ldr	r2, [r4, #8]
 80117ca:	6919      	ldr	r1, [r3, #16]
 80117cc:	0412      	lsls	r2, r2, #16
 80117ce:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80117d0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80117d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80117d4:	68da      	ldr	r2, [r3, #12]
 80117d6:	438a      	bics	r2, r1
 80117d8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80117da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117dc:	490c      	ldr	r1, [pc, #48]	; (8011810 <HAL_RTC_Init+0x8c>)
 80117de:	400a      	ands	r2, r1
 80117e0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80117e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117e4:	69a1      	ldr	r1, [r4, #24]
 80117e6:	430a      	orrs	r2, r1
 80117e8:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80117ea:	22ff      	movs	r2, #255	; 0xff
 80117ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80117ee:	2301      	movs	r3, #1
 80117f0:	7763      	strb	r3, [r4, #29]
}
 80117f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80117f4:	22ff      	movs	r2, #255	; 0xff
 80117f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80117f8:	2304      	movs	r3, #4
    return HAL_ERROR;
 80117fa:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 80117fc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80117fe:	e7f8      	b.n	80117f2 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011800:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011802:	f7ff ff25 	bl	8011650 <HAL_RTC_MspInit>
 8011806:	e7c4      	b.n	8011792 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8011808:	2001      	movs	r0, #1
 801180a:	e7f2      	b.n	80117f2 <HAL_RTC_Init+0x6e>
 801180c:	ff8fffbf 	.word	0xff8fffbf
 8011810:	fffbffff 	.word	0xfffbffff

08011814 <HAL_RTC_SetTime>:
{
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011816:	7f03      	ldrb	r3, [r0, #28]
{
 8011818:	0004      	movs	r4, r0
 801181a:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 801181c:	2b01      	cmp	r3, #1
 801181e:	d100      	bne.n	8011822 <HAL_RTC_SetTime+0xe>
 8011820:	e074      	b.n	801190c <HAL_RTC_SetTime+0xf8>
 8011822:	2301      	movs	r3, #1
 8011824:	6806      	ldr	r6, [r0, #0]
 8011826:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011828:	3301      	adds	r3, #1
 801182a:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801182c:	68b3      	ldr	r3, [r6, #8]
 801182e:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011830:	2a00      	cmp	r2, #0
 8011832:	d031      	beq.n	8011898 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011834:	403b      	ands	r3, r7
 8011836:	d065      	beq.n	8011904 <HAL_RTC_SetTime+0xf0>
 8011838:	7a0b      	ldrb	r3, [r1, #8]
 801183a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801183c:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801183e:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011840:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011842:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011844:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 8011846:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011848:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801184a:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801184c:	23ca      	movs	r3, #202	; 0xca
 801184e:	6273      	str	r3, [r6, #36]	; 0x24
 8011850:	3b77      	subs	r3, #119	; 0x77
 8011852:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011854:	0020      	movs	r0, r4
 8011856:	f7ff ff77 	bl	8011748 <RTC_EnterInitMode>
 801185a:	1e06      	subs	r6, r0, #0
 801185c:	d149      	bne.n	80118f2 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801185e:	4935      	ldr	r1, [pc, #212]	; (8011934 <HAL_RTC_SetTime+0x120>)
 8011860:	6822      	ldr	r2, [r4, #0]
 8011862:	4039      	ands	r1, r7
 8011864:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011866:	6893      	ldr	r3, [r2, #8]
 8011868:	4933      	ldr	r1, [pc, #204]	; (8011938 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801186a:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801186c:	400b      	ands	r3, r1
 801186e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011870:	68eb      	ldr	r3, [r5, #12]
 8011872:	6891      	ldr	r1, [r2, #8]
 8011874:	4303      	orrs	r3, r0
 8011876:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011878:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801187a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801187c:	68d3      	ldr	r3, [r2, #12]
 801187e:	438b      	bics	r3, r1
 8011880:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011882:	6893      	ldr	r3, [r2, #8]
 8011884:	069b      	lsls	r3, r3, #26
 8011886:	d543      	bpl.n	8011910 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011888:	23ff      	movs	r3, #255	; 0xff
 801188a:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801188c:	3bfe      	subs	r3, #254	; 0xfe
 801188e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011890:	2300      	movs	r3, #0
 8011892:	7723      	strb	r3, [r4, #28]
}
 8011894:	0030      	movs	r0, r6
 8011896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011898:	401f      	ands	r7, r3
 801189a:	d035      	beq.n	8011908 <HAL_RTC_SetTime+0xf4>
 801189c:	7a0f      	ldrb	r7, [r1, #8]
 801189e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80118a0:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 80118a2:	2300      	movs	r3, #0
  while(Value >= 10)
 80118a4:	2809      	cmp	r0, #9
 80118a6:	d906      	bls.n	80118b6 <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 80118a8:	380a      	subs	r0, #10
 80118aa:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80118ac:	3301      	adds	r3, #1
  while(Value >= 10)
 80118ae:	2809      	cmp	r0, #9
 80118b0:	d8fa      	bhi.n	80118a8 <HAL_RTC_SetTime+0x94>
 80118b2:	011b      	lsls	r3, r3, #4
 80118b4:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80118b6:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80118b8:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80118ba:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 80118bc:	2100      	movs	r1, #0
  while(Value >= 10)
 80118be:	2b09      	cmp	r3, #9
 80118c0:	d906      	bls.n	80118d0 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 80118c2:	3b0a      	subs	r3, #10
 80118c4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80118c6:	3101      	adds	r1, #1
  while(Value >= 10)
 80118c8:	2b09      	cmp	r3, #9
 80118ca:	d8fa      	bhi.n	80118c2 <HAL_RTC_SetTime+0xae>
 80118cc:	0109      	lsls	r1, r1, #4
 80118ce:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80118d0:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80118d2:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80118d4:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 80118d6:	2909      	cmp	r1, #9
 80118d8:	d929      	bls.n	801192e <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 80118da:	390a      	subs	r1, #10
 80118dc:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 80118de:	3201      	adds	r2, #1
  while(Value >= 10)
 80118e0:	2909      	cmp	r1, #9
 80118e2:	d8fa      	bhi.n	80118da <HAL_RTC_SetTime+0xc6>
 80118e4:	0112      	lsls	r2, r2, #4
 80118e6:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80118e8:	4307      	orrs	r7, r0
 80118ea:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80118ec:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80118ee:	430f      	orrs	r7, r1
 80118f0:	e7ac      	b.n	801184c <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80118f2:	22ff      	movs	r2, #255	; 0xff
 80118f4:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 80118f6:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80118f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80118fa:	2304      	movs	r3, #4
 80118fc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80118fe:	2300      	movs	r3, #0
 8011900:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011902:	e7c7      	b.n	8011894 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011904:	720b      	strb	r3, [r1, #8]
 8011906:	e799      	b.n	801183c <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011908:	720f      	strb	r7, [r1, #8]
 801190a:	e7c9      	b.n	80118a0 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 801190c:	2602      	movs	r6, #2
 801190e:	e7c1      	b.n	8011894 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011910:	0020      	movs	r0, r4
 8011912:	f7ff fefd 	bl	8011710 <HAL_RTC_WaitForSynchro>
 8011916:	2800      	cmp	r0, #0
 8011918:	d101      	bne.n	801191e <HAL_RTC_SetTime+0x10a>
 801191a:	6822      	ldr	r2, [r4, #0]
 801191c:	e7b4      	b.n	8011888 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801191e:	22ff      	movs	r2, #255	; 0xff
 8011920:	6823      	ldr	r3, [r4, #0]
 8011922:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011924:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011926:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011928:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 801192a:	2601      	movs	r6, #1
 801192c:	e7b2      	b.n	8011894 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 801192e:	2200      	movs	r2, #0
 8011930:	e7da      	b.n	80118e8 <HAL_RTC_SetTime+0xd4>
 8011932:	46c0      	nop			; (mov r8, r8)
 8011934:	007f7f7f 	.word	0x007f7f7f
 8011938:	fffbffff 	.word	0xfffbffff

0801193c <HAL_RTC_SetDate>:
{
 801193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 801193e:	7f03      	ldrb	r3, [r0, #28]
{
 8011940:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011942:	2b01      	cmp	r3, #1
 8011944:	d062      	beq.n	8011a0c <HAL_RTC_SetDate+0xd0>
 8011946:	2301      	movs	r3, #1
 8011948:	780f      	ldrb	r7, [r1, #0]
 801194a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 801194c:	3301      	adds	r3, #1
 801194e:	7743      	strb	r3, [r0, #29]
 8011950:	7848      	ldrb	r0, [r1, #1]
 8011952:	788e      	ldrb	r6, [r1, #2]
 8011954:	78cb      	ldrb	r3, [r1, #3]
 8011956:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011958:	2a00      	cmp	r2, #0
 801195a:	d022      	beq.n	80119a2 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801195c:	041b      	lsls	r3, r3, #16
 801195e:	433b      	orrs	r3, r7
 8011960:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011962:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011964:	4334      	orrs	r4, r6
 8011966:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011968:	22ca      	movs	r2, #202	; 0xca
 801196a:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801196c:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801196e:	625a      	str	r2, [r3, #36]	; 0x24
 8011970:	3a77      	subs	r2, #119	; 0x77
 8011972:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011974:	f7ff fee8 	bl	8011748 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011978:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801197a:	1e06      	subs	r6, r0, #0
 801197c:	d13e      	bne.n	80119fc <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801197e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011980:	4a2b      	ldr	r2, [pc, #172]	; (8011a30 <HAL_RTC_SetDate+0xf4>)
 8011982:	4014      	ands	r4, r2
 8011984:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011986:	68da      	ldr	r2, [r3, #12]
 8011988:	438a      	bics	r2, r1
 801198a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801198c:	689a      	ldr	r2, [r3, #8]
 801198e:	0692      	lsls	r2, r2, #26
 8011990:	d53e      	bpl.n	8011a10 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011992:	22ff      	movs	r2, #255	; 0xff
 8011994:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011996:	2301      	movs	r3, #1
 8011998:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801199a:	2300      	movs	r3, #0
 801199c:	772b      	strb	r3, [r5, #28]
}
 801199e:	0030      	movs	r0, r6
 80119a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80119a2:	2410      	movs	r4, #16
 80119a4:	4204      	tst	r4, r0
 80119a6:	d003      	beq.n	80119b0 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80119a8:	43a0      	bics	r0, r4
 80119aa:	300a      	adds	r0, #10
 80119ac:	b2c0      	uxtb	r0, r0
 80119ae:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 80119b0:	2100      	movs	r1, #0
  while(Value >= 10)
 80119b2:	2b09      	cmp	r3, #9
 80119b4:	d906      	bls.n	80119c4 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 80119b6:	3b0a      	subs	r3, #10
 80119b8:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80119ba:	3101      	adds	r1, #1
  while(Value >= 10)
 80119bc:	2b09      	cmp	r3, #9
 80119be:	d8fa      	bhi.n	80119b6 <HAL_RTC_SetDate+0x7a>
 80119c0:	0109      	lsls	r1, r1, #4
 80119c2:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80119c4:	430b      	orrs	r3, r1
 80119c6:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 80119c8:	2100      	movs	r1, #0
  while(Value >= 10)
 80119ca:	2809      	cmp	r0, #9
 80119cc:	d906      	bls.n	80119dc <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 80119ce:	380a      	subs	r0, #10
 80119d0:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80119d2:	3101      	adds	r1, #1
  while(Value >= 10)
 80119d4:	2809      	cmp	r0, #9
 80119d6:	d8fa      	bhi.n	80119ce <HAL_RTC_SetDate+0x92>
 80119d8:	0109      	lsls	r1, r1, #4
 80119da:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80119dc:	4308      	orrs	r0, r1
 80119de:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 80119e0:	2e09      	cmp	r6, #9
 80119e2:	d922      	bls.n	8011a2a <HAL_RTC_SetDate+0xee>
    Value -= 10;
 80119e4:	3e0a      	subs	r6, #10
 80119e6:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 80119e8:	3201      	adds	r2, #1
  while(Value >= 10)
 80119ea:	2e09      	cmp	r6, #9
 80119ec:	d8fa      	bhi.n	80119e4 <HAL_RTC_SetDate+0xa8>
 80119ee:	0112      	lsls	r2, r2, #4
 80119f0:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80119f2:	433b      	orrs	r3, r7
 80119f4:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80119f6:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80119f8:	431c      	orrs	r4, r3
 80119fa:	e7b5      	b.n	8011968 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80119fc:	22ff      	movs	r2, #255	; 0xff
 80119fe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011a00:	2304      	movs	r3, #4
 8011a02:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011a04:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011a06:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011a08:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011a0a:	e7c8      	b.n	801199e <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011a0c:	2602      	movs	r6, #2
 8011a0e:	e7c6      	b.n	801199e <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a10:	0028      	movs	r0, r5
 8011a12:	f7ff fe7d 	bl	8011710 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011a16:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d0ba      	beq.n	8011992 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011a1c:	22ff      	movs	r2, #255	; 0xff
 8011a1e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011a20:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011a22:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011a24:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011a26:	2601      	movs	r6, #1
 8011a28:	e7b9      	b.n	801199e <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011a2a:	2400      	movs	r4, #0
 8011a2c:	e7e1      	b.n	80119f2 <HAL_RTC_SetDate+0xb6>
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	00ffff3f 	.word	0x00ffff3f

08011a34 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011a34:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011a36:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011a38:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011a3a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011a3c:	600a      	str	r2, [r1, #0]
}
 8011a3e:	4770      	bx	lr

08011a40 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011a40:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011a42:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011a44:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011a46:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011a48:	6808      	ldr	r0, [r1, #0]
}
 8011a4a:	4770      	bx	lr

08011a4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011a4c:	2201      	movs	r2, #1
{
 8011a4e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011a50:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011a52:	6a03      	ldr	r3, [r0, #32]
 8011a54:	4393      	bics	r3, r2
 8011a56:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011a58:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8011a5a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8011a5c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011a5e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011a60:	680d      	ldr	r5, [r1, #0]
 8011a62:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011a64:	2502      	movs	r5, #2
 8011a66:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011a68:	688d      	ldr	r5, [r1, #8]
 8011a6a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011a6c:	4d0e      	ldr	r5, [pc, #56]	; (8011aa8 <TIM_OC1_SetConfig+0x5c>)
 8011a6e:	42a8      	cmp	r0, r5
 8011a70:	d008      	beq.n	8011a84 <TIM_OC1_SetConfig+0x38>
 8011a72:	4d0e      	ldr	r5, [pc, #56]	; (8011aac <TIM_OC1_SetConfig+0x60>)
 8011a74:	42a8      	cmp	r0, r5
 8011a76:	d005      	beq.n	8011a84 <TIM_OC1_SetConfig+0x38>
 8011a78:	4d0d      	ldr	r5, [pc, #52]	; (8011ab0 <TIM_OC1_SetConfig+0x64>)
 8011a7a:	42a8      	cmp	r0, r5
 8011a7c:	d002      	beq.n	8011a84 <TIM_OC1_SetConfig+0x38>
 8011a7e:	4d0d      	ldr	r5, [pc, #52]	; (8011ab4 <TIM_OC1_SetConfig+0x68>)
 8011a80:	42a8      	cmp	r0, r5
 8011a82:	d10b      	bne.n	8011a9c <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011a84:	2508      	movs	r5, #8
 8011a86:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011a88:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a8a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8011a8c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8011a8e:	2504      	movs	r5, #4
 8011a90:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011a92:	4d09      	ldr	r5, [pc, #36]	; (8011ab8 <TIM_OC1_SetConfig+0x6c>)
 8011a94:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a96:	694d      	ldr	r5, [r1, #20]
 8011a98:	4335      	orrs	r5, r6
 8011a9a:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a9c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011a9e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011aa0:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8011aa2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011aa4:	6203      	str	r3, [r0, #32]
}
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
 8011aa8:	40012c00 	.word	0x40012c00
 8011aac:	40014000 	.word	0x40014000
 8011ab0:	40014400 	.word	0x40014400
 8011ab4:	40014800 	.word	0x40014800
 8011ab8:	fffffcff 	.word	0xfffffcff

08011abc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011abc:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011abe:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ac0:	6a03      	ldr	r3, [r0, #32]
 8011ac2:	4a17      	ldr	r2, [pc, #92]	; (8011b20 <TIM_OC3_SetConfig+0x64>)
 8011ac4:	4013      	ands	r3, r2
 8011ac6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011ac8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8011aca:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8011acc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011ace:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ad0:	680c      	ldr	r4, [r1, #0]
 8011ad2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011ad4:	4c13      	ldr	r4, [pc, #76]	; (8011b24 <TIM_OC3_SetConfig+0x68>)
 8011ad6:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8011ad8:	688c      	ldr	r4, [r1, #8]
 8011ada:	0224      	lsls	r4, r4, #8
 8011adc:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011ade:	4c12      	ldr	r4, [pc, #72]	; (8011b28 <TIM_OC3_SetConfig+0x6c>)
 8011ae0:	42a0      	cmp	r0, r4
 8011ae2:	d015      	beq.n	8011b10 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011ae4:	4c11      	ldr	r4, [pc, #68]	; (8011b2c <TIM_OC3_SetConfig+0x70>)
 8011ae6:	42a0      	cmp	r0, r4
 8011ae8:	d005      	beq.n	8011af6 <TIM_OC3_SetConfig+0x3a>
 8011aea:	4c11      	ldr	r4, [pc, #68]	; (8011b30 <TIM_OC3_SetConfig+0x74>)
 8011aec:	42a0      	cmp	r0, r4
 8011aee:	d002      	beq.n	8011af6 <TIM_OC3_SetConfig+0x3a>
 8011af0:	4c10      	ldr	r4, [pc, #64]	; (8011b34 <TIM_OC3_SetConfig+0x78>)
 8011af2:	42a0      	cmp	r0, r4
 8011af4:	d106      	bne.n	8011b04 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011af6:	4c10      	ldr	r4, [pc, #64]	; (8011b38 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8011af8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011afa:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8011afc:	698a      	ldr	r2, [r1, #24]
 8011afe:	4332      	orrs	r2, r6
 8011b00:	0112      	lsls	r2, r2, #4
 8011b02:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b04:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b06:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8011b08:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8011b0a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b0c:	6203      	str	r3, [r0, #32]
}
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b10:	4c0a      	ldr	r4, [pc, #40]	; (8011b3c <TIM_OC3_SetConfig+0x80>)
 8011b12:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8011b14:	68cb      	ldr	r3, [r1, #12]
 8011b16:	021b      	lsls	r3, r3, #8
 8011b18:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b1a:	4c09      	ldr	r4, [pc, #36]	; (8011b40 <TIM_OC3_SetConfig+0x84>)
 8011b1c:	4023      	ands	r3, r4
 8011b1e:	e7ea      	b.n	8011af6 <TIM_OC3_SetConfig+0x3a>
 8011b20:	fffffeff 	.word	0xfffffeff
 8011b24:	fffffdff 	.word	0xfffffdff
 8011b28:	40012c00 	.word	0x40012c00
 8011b2c:	40014000 	.word	0x40014000
 8011b30:	40014400 	.word	0x40014400
 8011b34:	40014800 	.word	0x40014800
 8011b38:	ffffcfff 	.word	0xffffcfff
 8011b3c:	fffff7ff 	.word	0xfffff7ff
 8011b40:	fffffbff 	.word	0xfffffbff

08011b44 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011b44:	6a03      	ldr	r3, [r0, #32]
 8011b46:	4a14      	ldr	r2, [pc, #80]	; (8011b98 <TIM_OC4_SetConfig+0x54>)
{
 8011b48:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b4e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011b50:	4d12      	ldr	r5, [pc, #72]	; (8011b9c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8011b52:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8011b54:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011b56:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011b58:	680d      	ldr	r5, [r1, #0]
 8011b5a:	022d      	lsls	r5, r5, #8
 8011b5c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011b5e:	4d10      	ldr	r5, [pc, #64]	; (8011ba0 <TIM_OC4_SetConfig+0x5c>)
 8011b60:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8011b62:	688a      	ldr	r2, [r1, #8]
 8011b64:	0312      	lsls	r2, r2, #12
 8011b66:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011b68:	4d0e      	ldr	r5, [pc, #56]	; (8011ba4 <TIM_OC4_SetConfig+0x60>)
 8011b6a:	42a8      	cmp	r0, r5
 8011b6c:	d008      	beq.n	8011b80 <TIM_OC4_SetConfig+0x3c>
 8011b6e:	4d0e      	ldr	r5, [pc, #56]	; (8011ba8 <TIM_OC4_SetConfig+0x64>)
 8011b70:	42a8      	cmp	r0, r5
 8011b72:	d005      	beq.n	8011b80 <TIM_OC4_SetConfig+0x3c>
 8011b74:	4d0d      	ldr	r5, [pc, #52]	; (8011bac <TIM_OC4_SetConfig+0x68>)
 8011b76:	42a8      	cmp	r0, r5
 8011b78:	d002      	beq.n	8011b80 <TIM_OC4_SetConfig+0x3c>
 8011b7a:	4d0d      	ldr	r5, [pc, #52]	; (8011bb0 <TIM_OC4_SetConfig+0x6c>)
 8011b7c:	42a8      	cmp	r0, r5
 8011b7e:	d104      	bne.n	8011b8a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011b80:	4d0c      	ldr	r5, [pc, #48]	; (8011bb4 <TIM_OC4_SetConfig+0x70>)
 8011b82:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8011b84:	694d      	ldr	r5, [r1, #20]
 8011b86:	01ad      	lsls	r5, r5, #6
 8011b88:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b8a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011b8c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8011b8e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8011b90:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b92:	6202      	str	r2, [r0, #32]
}
 8011b94:	bd30      	pop	{r4, r5, pc}
 8011b96:	46c0      	nop			; (mov r8, r8)
 8011b98:	ffffefff 	.word	0xffffefff
 8011b9c:	ffff8cff 	.word	0xffff8cff
 8011ba0:	ffffdfff 	.word	0xffffdfff
 8011ba4:	40012c00 	.word	0x40012c00
 8011ba8:	40014000 	.word	0x40014000
 8011bac:	40014400 	.word	0x40014400
 8011bb0:	40014800 	.word	0x40014800
 8011bb4:	ffffbfff 	.word	0xffffbfff

08011bb8 <HAL_TIM_Base_MspInit>:
}
 8011bb8:	4770      	bx	lr
 8011bba:	46c0      	nop			; (mov r8, r8)

08011bbc <HAL_TIM_Base_MspDeInit>:
 8011bbc:	4770      	bx	lr
 8011bbe:	46c0      	nop			; (mov r8, r8)

08011bc0 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8011bc0:	2339      	movs	r3, #57	; 0x39
 8011bc2:	2202      	movs	r2, #2
{
 8011bc4:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8011bc6:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8011bc8:	6803      	ldr	r3, [r0, #0]
 8011bca:	4a0b      	ldr	r2, [pc, #44]	; (8011bf8 <HAL_TIM_Base_DeInit+0x38>)
 8011bcc:	6a19      	ldr	r1, [r3, #32]
{
 8011bce:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8011bd0:	4211      	tst	r1, r2
 8011bd2:	d107      	bne.n	8011be4 <HAL_TIM_Base_DeInit+0x24>
 8011bd4:	6a19      	ldr	r1, [r3, #32]
 8011bd6:	4a09      	ldr	r2, [pc, #36]	; (8011bfc <HAL_TIM_Base_DeInit+0x3c>)
 8011bd8:	4211      	tst	r1, r2
 8011bda:	d103      	bne.n	8011be4 <HAL_TIM_Base_DeInit+0x24>
 8011bdc:	2101      	movs	r1, #1
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	438a      	bics	r2, r1
 8011be2:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8011be4:	0020      	movs	r0, r4
 8011be6:	f7ff ffe9 	bl	8011bbc <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8011bea:	2300      	movs	r3, #0
 8011bec:	2239      	movs	r2, #57	; 0x39
 8011bee:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8011bf0:	3a01      	subs	r2, #1
}
 8011bf2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8011bf4:	54a3      	strb	r3, [r4, r2]
}
 8011bf6:	bd10      	pop	{r4, pc}
 8011bf8:	00001111 	.word	0x00001111
 8011bfc:	00000444 	.word	0x00000444

08011c00 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8011c00:	2239      	movs	r2, #57	; 0x39
 8011c02:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8011c04:	2101      	movs	r1, #1
{
 8011c06:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011c08:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011c0a:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	430b      	orrs	r3, r1
 8011c10:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8011c12:	5481      	strb	r1, [r0, r2]
}
 8011c14:	2000      	movs	r0, #0
 8011c16:	bd10      	pop	{r4, pc}

08011c18 <HAL_TIM_OC_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8011c18:	2201      	movs	r2, #1
 8011c1a:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011c1c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c1e:	6a19      	ldr	r1, [r3, #32]
 8011c20:	4391      	bics	r1, r2
 8011c22:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8011c24:	6a19      	ldr	r1, [r3, #32]
 8011c26:	430a      	orrs	r2, r1
 8011c28:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c2a:	4a0b      	ldr	r2, [pc, #44]	; (8011c58 <HAL_TIM_OC_Start+0x40>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d008      	beq.n	8011c42 <HAL_TIM_OC_Start+0x2a>
 8011c30:	4a0a      	ldr	r2, [pc, #40]	; (8011c5c <HAL_TIM_OC_Start+0x44>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d005      	beq.n	8011c42 <HAL_TIM_OC_Start+0x2a>
 8011c36:	4a0a      	ldr	r2, [pc, #40]	; (8011c60 <HAL_TIM_OC_Start+0x48>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d002      	beq.n	8011c42 <HAL_TIM_OC_Start+0x2a>
 8011c3c:	4a09      	ldr	r2, [pc, #36]	; (8011c64 <HAL_TIM_OC_Start+0x4c>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d104      	bne.n	8011c4c <HAL_TIM_OC_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8011c42:	2280      	movs	r2, #128	; 0x80
 8011c44:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011c46:	0212      	lsls	r2, r2, #8
 8011c48:	430a      	orrs	r2, r1
 8011c4a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8011c4c:	2101      	movs	r1, #1
 8011c4e:	681a      	ldr	r2, [r3, #0]
}
 8011c50:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8011c52:	430a      	orrs	r2, r1
 8011c54:	601a      	str	r2, [r3, #0]
}
 8011c56:	4770      	bx	lr
 8011c58:	40012c00 	.word	0x40012c00
 8011c5c:	40014000 	.word	0x40014000
 8011c60:	40014400 	.word	0x40014400
 8011c64:	40014800 	.word	0x40014800

08011c68 <HAL_TIM_PWM_MspInit>:
 8011c68:	4770      	bx	lr
 8011c6a:	46c0      	nop			; (mov r8, r8)

08011c6c <HAL_TIM_PWM_MspDeInit>:
 8011c6c:	4770      	bx	lr
 8011c6e:	46c0      	nop			; (mov r8, r8)

08011c70 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8011c70:	2339      	movs	r3, #57	; 0x39
 8011c72:	2202      	movs	r2, #2
{
 8011c74:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8011c76:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8011c78:	6803      	ldr	r3, [r0, #0]
 8011c7a:	4a0b      	ldr	r2, [pc, #44]	; (8011ca8 <HAL_TIM_PWM_DeInit+0x38>)
 8011c7c:	6a19      	ldr	r1, [r3, #32]
{
 8011c7e:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8011c80:	4211      	tst	r1, r2
 8011c82:	d107      	bne.n	8011c94 <HAL_TIM_PWM_DeInit+0x24>
 8011c84:	6a19      	ldr	r1, [r3, #32]
 8011c86:	4a09      	ldr	r2, [pc, #36]	; (8011cac <HAL_TIM_PWM_DeInit+0x3c>)
 8011c88:	4211      	tst	r1, r2
 8011c8a:	d103      	bne.n	8011c94 <HAL_TIM_PWM_DeInit+0x24>
 8011c8c:	2101      	movs	r1, #1
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	438a      	bics	r2, r1
 8011c92:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8011c94:	0020      	movs	r0, r4
 8011c96:	f7ff ffe9 	bl	8011c6c <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	2239      	movs	r2, #57	; 0x39
 8011c9e:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8011ca0:	3a01      	subs	r2, #1
}
 8011ca2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8011ca4:	54a3      	strb	r3, [r4, r2]
}
 8011ca6:	bd10      	pop	{r4, pc}
 8011ca8:	00001111 	.word	0x00001111
 8011cac:	00000444 	.word	0x00000444

08011cb0 <HAL_TIM_PWM_Start>:
 8011cb0:	b510      	push	{r4, lr}
 8011cb2:	f7ff ffb1 	bl	8011c18 <HAL_TIM_OC_Start>
 8011cb6:	bd10      	pop	{r4, pc}

08011cb8 <HAL_TIM_PWM_Stop>:
{
 8011cb8:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8011cba:	2401      	movs	r4, #1
 8011cbc:	408c      	lsls	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011cbe:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8011cc0:	6a1a      	ldr	r2, [r3, #32]
 8011cc2:	43a2      	bics	r2, r4
 8011cc4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8011cc6:	6a1a      	ldr	r2, [r3, #32]
 8011cc8:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011cca:	4a15      	ldr	r2, [pc, #84]	; (8011d20 <HAL_TIM_PWM_Stop+0x68>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d019      	beq.n	8011d04 <HAL_TIM_PWM_Stop+0x4c>
 8011cd0:	4a14      	ldr	r2, [pc, #80]	; (8011d24 <HAL_TIM_PWM_Stop+0x6c>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d016      	beq.n	8011d04 <HAL_TIM_PWM_Stop+0x4c>
 8011cd6:	4a14      	ldr	r2, [pc, #80]	; (8011d28 <HAL_TIM_PWM_Stop+0x70>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d013      	beq.n	8011d04 <HAL_TIM_PWM_Stop+0x4c>
 8011cdc:	4a13      	ldr	r2, [pc, #76]	; (8011d2c <HAL_TIM_PWM_Stop+0x74>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d010      	beq.n	8011d04 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8011ce2:	6a19      	ldr	r1, [r3, #32]
 8011ce4:	4a12      	ldr	r2, [pc, #72]	; (8011d30 <HAL_TIM_PWM_Stop+0x78>)
 8011ce6:	4211      	tst	r1, r2
 8011ce8:	d107      	bne.n	8011cfa <HAL_TIM_PWM_Stop+0x42>
 8011cea:	6a19      	ldr	r1, [r3, #32]
 8011cec:	4a11      	ldr	r2, [pc, #68]	; (8011d34 <HAL_TIM_PWM_Stop+0x7c>)
 8011cee:	4211      	tst	r1, r2
 8011cf0:	d103      	bne.n	8011cfa <HAL_TIM_PWM_Stop+0x42>
 8011cf2:	2101      	movs	r1, #1
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	438a      	bics	r2, r1
 8011cf8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011cfa:	2339      	movs	r3, #57	; 0x39
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	54c2      	strb	r2, [r0, r3]
}
 8011d00:	2000      	movs	r0, #0
 8011d02:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8011d04:	6a19      	ldr	r1, [r3, #32]
 8011d06:	4a0a      	ldr	r2, [pc, #40]	; (8011d30 <HAL_TIM_PWM_Stop+0x78>)
 8011d08:	4211      	tst	r1, r2
 8011d0a:	d1ea      	bne.n	8011ce2 <HAL_TIM_PWM_Stop+0x2a>
 8011d0c:	6a19      	ldr	r1, [r3, #32]
 8011d0e:	4a09      	ldr	r2, [pc, #36]	; (8011d34 <HAL_TIM_PWM_Stop+0x7c>)
 8011d10:	4211      	tst	r1, r2
 8011d12:	d1e6      	bne.n	8011ce2 <HAL_TIM_PWM_Stop+0x2a>
 8011d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d16:	4908      	ldr	r1, [pc, #32]	; (8011d38 <HAL_TIM_PWM_Stop+0x80>)
 8011d18:	400a      	ands	r2, r1
 8011d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8011d1c:	e7e1      	b.n	8011ce2 <HAL_TIM_PWM_Stop+0x2a>
 8011d1e:	46c0      	nop			; (mov r8, r8)
 8011d20:	40012c00 	.word	0x40012c00
 8011d24:	40014000 	.word	0x40014000
 8011d28:	40014400 	.word	0x40014400
 8011d2c:	40014800 	.word	0x40014800
 8011d30:	00001111 	.word	0x00001111
 8011d34:	00000444 	.word	0x00000444
 8011d38:	ffff7fff 	.word	0xffff7fff

08011d3c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8011d3c:	2338      	movs	r3, #56	; 0x38
{
 8011d3e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8011d40:	5cc2      	ldrb	r2, [r0, r3]
 8011d42:	2a01      	cmp	r2, #1
 8011d44:	d067      	beq.n	8011e16 <HAL_TIM_ConfigClockSource+0xda>
 8011d46:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8011d48:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8011d4a:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8011d50:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d52:	4d5a      	ldr	r5, [pc, #360]	; (8011ebc <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8011d54:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d56:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8011d58:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8011d5a:	680a      	ldr	r2, [r1, #0]
 8011d5c:	2a40      	cmp	r2, #64	; 0x40
 8011d5e:	d100      	bne.n	8011d62 <HAL_TIM_ConfigClockSource+0x26>
 8011d60:	e095      	b.n	8011e8e <HAL_TIM_ConfigClockSource+0x152>
 8011d62:	d91d      	bls.n	8011da0 <HAL_TIM_ConfigClockSource+0x64>
 8011d64:	2a70      	cmp	r2, #112	; 0x70
 8011d66:	d100      	bne.n	8011d6a <HAL_TIM_ConfigClockSource+0x2e>
 8011d68:	e081      	b.n	8011e6e <HAL_TIM_ConfigClockSource+0x132>
 8011d6a:	d92e      	bls.n	8011dca <HAL_TIM_ConfigClockSource+0x8e>
 8011d6c:	2480      	movs	r4, #128	; 0x80
 8011d6e:	0164      	lsls	r4, r4, #5
 8011d70:	42a2      	cmp	r2, r4
 8011d72:	d100      	bne.n	8011d76 <HAL_TIM_ConfigClockSource+0x3a>
 8011d74:	e076      	b.n	8011e64 <HAL_TIM_ConfigClockSource+0x128>
 8011d76:	2480      	movs	r4, #128	; 0x80
 8011d78:	01a4      	lsls	r4, r4, #6
 8011d7a:	42a2      	cmp	r2, r4
 8011d7c:	d11d      	bne.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 8011d7e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d80:	4c4f      	ldr	r4, [pc, #316]	; (8011ec0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011d82:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d84:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011d86:	688a      	ldr	r2, [r1, #8]
 8011d88:	68c9      	ldr	r1, [r1, #12]
 8011d8a:	432a      	orrs	r2, r5
 8011d8c:	0209      	lsls	r1, r1, #8
 8011d8e:	430a      	orrs	r2, r1
 8011d90:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8011d92:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011d94:	2280      	movs	r2, #128	; 0x80
 8011d96:	6899      	ldr	r1, [r3, #8]
 8011d98:	01d2      	lsls	r2, r2, #7
 8011d9a:	430a      	orrs	r2, r1
 8011d9c:	609a      	str	r2, [r3, #8]
    break;
 8011d9e:	e00c      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 8011da0:	2a10      	cmp	r2, #16
 8011da2:	d041      	beq.n	8011e28 <HAL_TIM_ConfigClockSource+0xec>
 8011da4:	d92e      	bls.n	8011e04 <HAL_TIM_ConfigClockSource+0xc8>
 8011da6:	2a20      	cmp	r2, #32
 8011da8:	d037      	beq.n	8011e1a <HAL_TIM_ConfigClockSource+0xde>
 8011daa:	2a30      	cmp	r2, #48	; 0x30
 8011dac:	d105      	bne.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8011dae:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011db0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011db2:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011db4:	3939      	subs	r1, #57	; 0x39
 8011db6:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011db8:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8011dba:	2339      	movs	r3, #57	; 0x39
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	3b01      	subs	r3, #1
 8011dc4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8011dc6:	2000      	movs	r0, #0
}
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8011dca:	2a50      	cmp	r2, #80	; 0x50
 8011dcc:	d033      	beq.n	8011e36 <HAL_TIM_ConfigClockSource+0xfa>
 8011dce:	2a60      	cmp	r2, #96	; 0x60
 8011dd0:	d1f3      	bne.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dd2:	2510      	movs	r5, #16
 8011dd4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011dd6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dd8:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011dda:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ddc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011dde:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011de0:	4e38      	ldr	r6, [pc, #224]	; (8011ec4 <HAL_TIM_ConfigClockSource+0x188>)
  tmpccmr1 |= (TIM_ICFilter << 12);
 8011de2:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011de4:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 8011de6:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011de8:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8011dea:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8011dec:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011dee:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011df0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8011df2:	0112      	lsls	r2, r2, #4
 8011df4:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8011df6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8011df8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011dfa:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011dfc:	3909      	subs	r1, #9
 8011dfe:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011e00:	609a      	str	r2, [r3, #8]
 8011e02:	e7da      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 8011e04:	2a00      	cmp	r2, #0
 8011e06:	d1d8      	bne.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e08:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011e0a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e0c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011e0e:	3969      	subs	r1, #105	; 0x69
 8011e10:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011e12:	609a      	str	r2, [r3, #8]
 8011e14:	e7d1      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  __HAL_LOCK(htim);
 8011e16:	2002      	movs	r0, #2
 8011e18:	e7d6      	b.n	8011dc8 <HAL_TIM_ConfigClockSource+0x8c>
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e1a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011e1c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e1e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011e20:	3949      	subs	r1, #73	; 0x49
 8011e22:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011e24:	609a      	str	r2, [r3, #8]
 8011e26:	e7c8      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e28:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011e2a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e2c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011e2e:	3959      	subs	r1, #89	; 0x59
 8011e30:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011e32:	609a      	str	r2, [r3, #8]
 8011e34:	e7c1      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e36:	684d      	ldr	r5, [r1, #4]
 8011e38:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8011e3a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e3c:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8011e3e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e40:	43a6      	bics	r6, r4
 8011e42:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e44:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8011e46:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e48:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8011e4a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011e4c:	240a      	movs	r4, #10
 8011e4e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8011e50:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8011e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e54:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e56:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011e58:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e5a:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011e5c:	3919      	subs	r1, #25
 8011e5e:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011e60:	609a      	str	r2, [r3, #8]
 8011e62:	e7aa      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8011e64:	2107      	movs	r1, #7
 8011e66:	689a      	ldr	r2, [r3, #8]
 8011e68:	438a      	bics	r2, r1
 8011e6a:	609a      	str	r2, [r3, #8]
    break;
 8011e6c:	e7a5      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 8011e6e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e70:	4c13      	ldr	r4, [pc, #76]	; (8011ec0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011e72:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e74:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011e76:	688a      	ldr	r2, [r1, #8]
 8011e78:	68c9      	ldr	r1, [r1, #12]
 8011e7a:	432a      	orrs	r2, r5
 8011e7c:	0209      	lsls	r1, r1, #8
 8011e7e:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011e80:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011e82:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8011e84:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8011e86:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011e88:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8011e8a:	609a      	str	r2, [r3, #8]
    break;
 8011e8c:	e795      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e8e:	684d      	ldr	r5, [r1, #4]
 8011e90:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8011e92:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e94:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8011e96:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e98:	43a6      	bics	r6, r4
 8011e9a:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e9c:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8011e9e:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ea0:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8011ea2:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ea4:	240a      	movs	r4, #10
 8011ea6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8011ea8:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8011eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011eac:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011eae:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8011eb0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011eb2:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011eb4:	3929      	subs	r1, #41	; 0x29
 8011eb6:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8011eb8:	609a      	str	r2, [r3, #8]
 8011eba:	e77e      	b.n	8011dba <HAL_TIM_ConfigClockSource+0x7e>
 8011ebc:	ffff0088 	.word	0xffff0088
 8011ec0:	ffff00ff 	.word	0xffff00ff
 8011ec4:	ffff0fff 	.word	0xffff0fff

08011ec8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ec8:	4a22      	ldr	r2, [pc, #136]	; (8011f54 <TIM_Base_SetConfig+0x8c>)
{
 8011eca:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011ecc:	6803      	ldr	r3, [r0, #0]
 8011ece:	688d      	ldr	r5, [r1, #8]
 8011ed0:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ed2:	4290      	cmp	r0, r2
 8011ed4:	d02c      	beq.n	8011f30 <TIM_Base_SetConfig+0x68>
 8011ed6:	2280      	movs	r2, #128	; 0x80
 8011ed8:	05d2      	lsls	r2, r2, #23
 8011eda:	4290      	cmp	r0, r2
 8011edc:	d012      	beq.n	8011f04 <TIM_Base_SetConfig+0x3c>
 8011ede:	4a1e      	ldr	r2, [pc, #120]	; (8011f58 <TIM_Base_SetConfig+0x90>)
 8011ee0:	4290      	cmp	r0, r2
 8011ee2:	d00f      	beq.n	8011f04 <TIM_Base_SetConfig+0x3c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011ee4:	4a1d      	ldr	r2, [pc, #116]	; (8011f5c <TIM_Base_SetConfig+0x94>)
 8011ee6:	4290      	cmp	r0, r2
 8011ee8:	d02e      	beq.n	8011f48 <TIM_Base_SetConfig+0x80>
 8011eea:	4a1d      	ldr	r2, [pc, #116]	; (8011f60 <TIM_Base_SetConfig+0x98>)
 8011eec:	4290      	cmp	r0, r2
 8011eee:	d023      	beq.n	8011f38 <TIM_Base_SetConfig+0x70>
 8011ef0:	4a1c      	ldr	r2, [pc, #112]	; (8011f64 <TIM_Base_SetConfig+0x9c>)
 8011ef2:	4290      	cmp	r0, r2
 8011ef4:	d020      	beq.n	8011f38 <TIM_Base_SetConfig+0x70>
 8011ef6:	4a1c      	ldr	r2, [pc, #112]	; (8011f68 <TIM_Base_SetConfig+0xa0>)
 8011ef8:	4290      	cmp	r0, r2
 8011efa:	d01d      	beq.n	8011f38 <TIM_Base_SetConfig+0x70>
  TIMx->CR1 = tmpcr1;
 8011efc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011efe:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f00:	6284      	str	r4, [r0, #40]	; 0x28
 8011f02:	e012      	b.n	8011f2a <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011f04:	2270      	movs	r2, #112	; 0x70
 8011f06:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011f08:	684a      	ldr	r2, [r1, #4]
 8011f0a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f0c:	4a17      	ldr	r2, [pc, #92]	; (8011f6c <TIM_Base_SetConfig+0xa4>)
 8011f0e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f10:	68ca      	ldr	r2, [r1, #12]
 8011f12:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011f14:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f16:	4b13      	ldr	r3, [pc, #76]	; (8011f64 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f18:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f1a:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f1c:	4298      	cmp	r0, r3
 8011f1e:	d002      	beq.n	8011f26 <TIM_Base_SetConfig+0x5e>
 8011f20:	4b11      	ldr	r3, [pc, #68]	; (8011f68 <TIM_Base_SetConfig+0xa0>)
 8011f22:	4298      	cmp	r0, r3
 8011f24:	d101      	bne.n	8011f2a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8011f26:	690b      	ldr	r3, [r1, #16]
 8011f28:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	6143      	str	r3, [r0, #20]
}
 8011f2e:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011f30:	2270      	movs	r2, #112	; 0x70
 8011f32:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011f34:	684a      	ldr	r2, [r1, #4]
 8011f36:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f38:	4a0c      	ldr	r2, [pc, #48]	; (8011f6c <TIM_Base_SetConfig+0xa4>)
 8011f3a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f3c:	68ca      	ldr	r2, [r1, #12]
 8011f3e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011f40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f42:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f44:	6284      	str	r4, [r0, #40]	; 0x28
 8011f46:	e7ee      	b.n	8011f26 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f48:	4a08      	ldr	r2, [pc, #32]	; (8011f6c <TIM_Base_SetConfig+0xa4>)
 8011f4a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f4c:	68ca      	ldr	r2, [r1, #12]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	e7d4      	b.n	8011efc <TIM_Base_SetConfig+0x34>
 8011f52:	46c0      	nop			; (mov r8, r8)
 8011f54:	40012c00 	.word	0x40012c00
 8011f58:	40000400 	.word	0x40000400
 8011f5c:	40002000 	.word	0x40002000
 8011f60:	40014000 	.word	0x40014000
 8011f64:	40014400 	.word	0x40014400
 8011f68:	40014800 	.word	0x40014800
 8011f6c:	fffffcff 	.word	0xfffffcff

08011f70 <HAL_TIM_Base_Init>:
{
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011f74:	d014      	beq.n	8011fa0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011f76:	2339      	movs	r3, #57	; 0x39
 8011f78:	5cc3      	ldrb	r3, [r0, r3]
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d00a      	beq.n	8011f96 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011f80:	2302      	movs	r3, #2
 8011f82:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f84:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011f86:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f88:	1d21      	adds	r1, r4, #4
 8011f8a:	f7ff ff9d 	bl	8011ec8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011f8e:	2301      	movs	r3, #1
  return HAL_OK;
 8011f90:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011f92:	5563      	strb	r3, [r4, r5]
}
 8011f94:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011f96:	2238      	movs	r2, #56	; 0x38
 8011f98:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011f9a:	f7ff fe0d 	bl	8011bb8 <HAL_TIM_Base_MspInit>
 8011f9e:	e7ef      	b.n	8011f80 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011fa0:	2001      	movs	r0, #1
 8011fa2:	e7f7      	b.n	8011f94 <HAL_TIM_Base_Init+0x24>

08011fa4 <HAL_TIM_PWM_Init>:
{
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011fa8:	d014      	beq.n	8011fd4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011faa:	2339      	movs	r3, #57	; 0x39
 8011fac:	5cc3      	ldrb	r3, [r0, r3]
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d00a      	beq.n	8011fca <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fb8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011fba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fbc:	1d21      	adds	r1, r4, #4
 8011fbe:	f7ff ff83 	bl	8011ec8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011fc2:	2301      	movs	r3, #1
  return HAL_OK;
 8011fc4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011fc6:	5563      	strb	r3, [r4, r5]
}
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011fca:	2238      	movs	r2, #56	; 0x38
 8011fcc:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8011fce:	f7ff fe4b 	bl	8011c68 <HAL_TIM_PWM_MspInit>
 8011fd2:	e7ef      	b.n	8011fb4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8011fd4:	2001      	movs	r0, #1
 8011fd6:	e7f7      	b.n	8011fc8 <HAL_TIM_PWM_Init+0x24>

08011fd8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011fd8:	2210      	movs	r2, #16
 8011fda:	6a03      	ldr	r3, [r0, #32]
{
 8011fdc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011fde:	4393      	bics	r3, r2
 8011fe0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011fe2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011fe4:	4c16      	ldr	r4, [pc, #88]	; (8012040 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8011fe6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8011fe8:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011fea:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011fec:	680c      	ldr	r4, [r1, #0]
 8011fee:	0224      	lsls	r4, r4, #8
 8011ff0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8011ff2:	2420      	movs	r4, #32
 8011ff4:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8011ff6:	688c      	ldr	r4, [r1, #8]
 8011ff8:	0124      	lsls	r4, r4, #4
 8011ffa:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011ffc:	4c11      	ldr	r4, [pc, #68]	; (8012044 <TIM_OC2_SetConfig+0x6c>)
 8011ffe:	42a0      	cmp	r0, r4
 8012000:	d015      	beq.n	801202e <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012002:	4c11      	ldr	r4, [pc, #68]	; (8012048 <TIM_OC2_SetConfig+0x70>)
 8012004:	42a0      	cmp	r0, r4
 8012006:	d005      	beq.n	8012014 <TIM_OC2_SetConfig+0x3c>
 8012008:	4c10      	ldr	r4, [pc, #64]	; (801204c <TIM_OC2_SetConfig+0x74>)
 801200a:	42a0      	cmp	r0, r4
 801200c:	d002      	beq.n	8012014 <TIM_OC2_SetConfig+0x3c>
 801200e:	4c10      	ldr	r4, [pc, #64]	; (8012050 <TIM_OC2_SetConfig+0x78>)
 8012010:	42a0      	cmp	r0, r4
 8012012:	d106      	bne.n	8012022 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012014:	4c0f      	ldr	r4, [pc, #60]	; (8012054 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012016:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012018:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 801201a:	698b      	ldr	r3, [r1, #24]
 801201c:	4333      	orrs	r3, r6
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8012022:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8012024:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012026:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8012028:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 801202a:	6202      	str	r2, [r0, #32]
}
 801202c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 801202e:	2480      	movs	r4, #128	; 0x80
 8012030:	43a2      	bics	r2, r4
 8012032:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8012034:	68ca      	ldr	r2, [r1, #12]
 8012036:	0112      	lsls	r2, r2, #4
 8012038:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 801203a:	2440      	movs	r4, #64	; 0x40
 801203c:	43a2      	bics	r2, r4
 801203e:	e7e9      	b.n	8012014 <TIM_OC2_SetConfig+0x3c>
 8012040:	ffff8cff 	.word	0xffff8cff
 8012044:	40012c00 	.word	0x40012c00
 8012048:	40014000 	.word	0x40014000
 801204c:	40014400 	.word	0x40014400
 8012050:	40014800 	.word	0x40014800
 8012054:	fffff3ff 	.word	0xfffff3ff

08012058 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8012058:	2338      	movs	r3, #56	; 0x38
{
 801205a:	b570      	push	{r4, r5, r6, lr}
 801205c:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 801205e:	5cc2      	ldrb	r2, [r0, r3]
{
 8012060:	0004      	movs	r4, r0
 8012062:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8012064:	2a01      	cmp	r2, #1
 8012066:	d038      	beq.n	80120da <HAL_TIM_PWM_ConfigChannel+0x82>
 8012068:	2201      	movs	r2, #1
 801206a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 801206c:	3301      	adds	r3, #1
 801206e:	3201      	adds	r2, #1
 8012070:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8012072:	2d04      	cmp	r5, #4
 8012074:	d043      	beq.n	80120fe <HAL_TIM_PWM_ConfigChannel+0xa6>
 8012076:	d91d      	bls.n	80120b4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8012078:	2d08      	cmp	r5, #8
 801207a:	d030      	beq.n	80120de <HAL_TIM_PWM_ConfigChannel+0x86>
 801207c:	2d0c      	cmp	r5, #12
 801207e:	d111      	bne.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012080:	6800      	ldr	r0, [r0, #0]
 8012082:	f7ff fd5f 	bl	8011b44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012086:	2280      	movs	r2, #128	; 0x80
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	0112      	lsls	r2, r2, #4
 801208c:	69d9      	ldr	r1, [r3, #28]
 801208e:	430a      	orrs	r2, r1
 8012090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012092:	69da      	ldr	r2, [r3, #28]
 8012094:	4923      	ldr	r1, [pc, #140]	; (8012124 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012096:	400a      	ands	r2, r1
 8012098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 801209a:	6932      	ldr	r2, [r6, #16]
 801209c:	69d9      	ldr	r1, [r3, #28]
 801209e:	0212      	lsls	r2, r2, #8
 80120a0:	430a      	orrs	r2, r1
 80120a2:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 80120a4:	2339      	movs	r3, #57	; 0x39
 80120a6:	2201      	movs	r2, #1
 80120a8:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80120aa:	2200      	movs	r2, #0
  return HAL_OK;
 80120ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80120ae:	3b01      	subs	r3, #1
 80120b0:	54e2      	strb	r2, [r4, r3]
}
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80120b4:	2d00      	cmp	r5, #0
 80120b6:	d1f5      	bne.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80120b8:	6800      	ldr	r0, [r0, #0]
 80120ba:	f7ff fcc7 	bl	8011a4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80120be:	2108      	movs	r1, #8
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	699a      	ldr	r2, [r3, #24]
 80120c4:	430a      	orrs	r2, r1
 80120c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80120c8:	699a      	ldr	r2, [r3, #24]
 80120ca:	3904      	subs	r1, #4
 80120cc:	438a      	bics	r2, r1
 80120ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80120d0:	699a      	ldr	r2, [r3, #24]
 80120d2:	6931      	ldr	r1, [r6, #16]
 80120d4:	430a      	orrs	r2, r1
 80120d6:	619a      	str	r2, [r3, #24]
    break;
 80120d8:	e7e4      	b.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
  __HAL_LOCK(htim);
 80120da:	2002      	movs	r0, #2
 80120dc:	e7e9      	b.n	80120b2 <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80120de:	6800      	ldr	r0, [r0, #0]
 80120e0:	f7ff fcec 	bl	8011abc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80120e4:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	69da      	ldr	r2, [r3, #28]
 80120ea:	4315      	orrs	r5, r2
 80120ec:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80120ee:	69da      	ldr	r2, [r3, #28]
 80120f0:	438a      	bics	r2, r1
 80120f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80120f4:	69da      	ldr	r2, [r3, #28]
 80120f6:	6931      	ldr	r1, [r6, #16]
 80120f8:	430a      	orrs	r2, r1
 80120fa:	61da      	str	r2, [r3, #28]
    break;
 80120fc:	e7d2      	b.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80120fe:	6800      	ldr	r0, [r0, #0]
 8012100:	f7ff ff6a 	bl	8011fd8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012104:	2280      	movs	r2, #128	; 0x80
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	0112      	lsls	r2, r2, #4
 801210a:	6999      	ldr	r1, [r3, #24]
 801210c:	430a      	orrs	r2, r1
 801210e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012110:	699a      	ldr	r2, [r3, #24]
 8012112:	4904      	ldr	r1, [pc, #16]	; (8012124 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012114:	400a      	ands	r2, r1
 8012116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8012118:	6932      	ldr	r2, [r6, #16]
 801211a:	6999      	ldr	r1, [r3, #24]
 801211c:	0212      	lsls	r2, r2, #8
 801211e:	430a      	orrs	r2, r1
 8012120:	619a      	str	r2, [r3, #24]
    break;
 8012122:	e7bf      	b.n	80120a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8012124:	fffffbff 	.word	0xfffffbff

08012128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012128:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801212a:	2438      	movs	r4, #56	; 0x38
 801212c:	5d03      	ldrb	r3, [r0, r4]
 801212e:	2b01      	cmp	r3, #1
 8012130:	d019      	beq.n	8012166 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8012132:	2539      	movs	r5, #57	; 0x39
 8012134:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012136:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8012138:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801213a:	6803      	ldr	r3, [r0, #0]
 801213c:	685a      	ldr	r2, [r3, #4]
 801213e:	43b2      	bics	r2, r6
 8012140:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012146:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012148:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801214a:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801214c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801214e:	689a      	ldr	r2, [r3, #8]
 8012150:	43b2      	bics	r2, r6
 8012152:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012154:	689a      	ldr	r2, [r3, #8]
 8012156:	430a      	orrs	r2, r1
 8012158:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 801215a:	2301      	movs	r3, #1
 801215c:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 801215e:	2300      	movs	r3, #0
 8012160:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8012162:	2000      	movs	r0, #0
}
 8012164:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8012166:	2002      	movs	r0, #2
 8012168:	e7fc      	b.n	8012164 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801216a:	46c0      	nop			; (mov r8, r8)

0801216c <HAL_UART_MspDeInit>:
 801216c:	4770      	bx	lr
 801216e:	46c0      	nop			; (mov r8, r8)

08012170 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8012170:	b570      	push	{r4, r5, r6, lr}
 8012172:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8012174:	2001      	movs	r0, #1
  if(huart == NULL)
 8012176:	2c00      	cmp	r4, #0
 8012178:	d012      	beq.n	80121a0 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801217a:	2669      	movs	r6, #105	; 0x69
 801217c:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 801217e:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8012180:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	4382      	bics	r2, r0
 8012188:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801218a:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 801218c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801218e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012190:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012192:	f7ff ffeb 	bl	801216c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8012196:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8012198:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801219a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801219c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801219e:	54e5      	strb	r5, [r4, r3]
}
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	46c0      	nop			; (mov r8, r8)

080121a4 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80121a4:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80121a6:	2069      	movs	r0, #105	; 0x69
{
 80121a8:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80121aa:	5c1c      	ldrb	r4, [r3, r0]
 80121ac:	2c01      	cmp	r4, #1
 80121ae:	d003      	beq.n	80121b8 <HAL_UART_Transmit_IT+0x14>
 80121b0:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80121b2:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80121b4:	2c22      	cmp	r4, #34	; 0x22
 80121b6:	d122      	bne.n	80121fe <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 80121b8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80121ba:	2900      	cmp	r1, #0
 80121bc:	d01f      	beq.n	80121fe <HAL_UART_Transmit_IT+0x5a>
 80121be:	2a00      	cmp	r2, #0
 80121c0:	d01d      	beq.n	80121fe <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 80121c2:	2468      	movs	r4, #104	; 0x68
 80121c4:	5d1d      	ldrb	r5, [r3, r4]
 80121c6:	2d01      	cmp	r5, #1
 80121c8:	d01d      	beq.n	8012206 <HAL_UART_Transmit_IT+0x62>
 80121ca:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 80121cc:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80121ce:	2150      	movs	r1, #80	; 0x50
 80121d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80121d2:	3102      	adds	r1, #2
 80121d4:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121d6:	2200      	movs	r2, #0
 80121d8:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80121da:	3269      	adds	r2, #105	; 0x69
 80121dc:	5c99      	ldrb	r1, [r3, r2]
 80121de:	2922      	cmp	r1, #34	; 0x22
 80121e0:	d00e      	beq.n	8012200 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80121e2:	2112      	movs	r1, #18
 80121e4:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80121e6:	2001      	movs	r0, #1
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	6891      	ldr	r1, [r2, #8]
 80121ec:	4301      	orrs	r1, r0
 80121ee:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 80121f0:	2000      	movs	r0, #0
 80121f2:	2168      	movs	r1, #104	; 0x68
 80121f4:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80121f6:	6813      	ldr	r3, [r2, #0]
 80121f8:	3118      	adds	r1, #24
 80121fa:	430b      	orrs	r3, r1
 80121fc:	6013      	str	r3, [r2, #0]
  }
}
 80121fe:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012200:	3110      	adds	r1, #16
 8012202:	5499      	strb	r1, [r3, r2]
 8012204:	e7ef      	b.n	80121e6 <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8012206:	2002      	movs	r0, #2
 8012208:	e7f9      	b.n	80121fe <HAL_UART_Transmit_IT+0x5a>
 801220a:	46c0      	nop			; (mov r8, r8)

0801220c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801220c:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801220e:	2069      	movs	r0, #105	; 0x69
{
 8012210:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012212:	5c1c      	ldrb	r4, [r3, r0]
 8012214:	2c01      	cmp	r4, #1
 8012216:	d003      	beq.n	8012220 <HAL_UART_Receive_IT+0x14>
 8012218:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801221a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801221c:	2c12      	cmp	r4, #18
 801221e:	d134      	bne.n	801228a <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8012220:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012222:	2900      	cmp	r1, #0
 8012224:	d031      	beq.n	801228a <HAL_UART_Receive_IT+0x7e>
 8012226:	2a00      	cmp	r2, #0
 8012228:	d02f      	beq.n	801228a <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 801222a:	2468      	movs	r4, #104	; 0x68
 801222c:	5d1d      	ldrb	r5, [r3, r4]
 801222e:	2d01      	cmp	r5, #1
 8012230:	d041      	beq.n	80122b6 <HAL_UART_Receive_IT+0xaa>
 8012232:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8012234:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8012236:	2158      	movs	r1, #88	; 0x58
 8012238:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 801223a:	3102      	adds	r1, #2
 801223c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 801223e:	2180      	movs	r1, #128	; 0x80
 8012240:	689a      	ldr	r2, [r3, #8]
 8012242:	0149      	lsls	r1, r1, #5
 8012244:	428a      	cmp	r2, r1
 8012246:	d021      	beq.n	801228c <HAL_UART_Receive_IT+0x80>
 8012248:	2a00      	cmp	r2, #0
 801224a:	d129      	bne.n	80122a0 <HAL_UART_Receive_IT+0x94>
 801224c:	691a      	ldr	r2, [r3, #16]
 801224e:	2a00      	cmp	r2, #0
 8012250:	d133      	bne.n	80122ba <HAL_UART_Receive_IT+0xae>
 8012252:	225c      	movs	r2, #92	; 0x5c
 8012254:	21ff      	movs	r1, #255	; 0xff
 8012256:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012258:	2200      	movs	r2, #0
 801225a:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801225c:	3269      	adds	r2, #105	; 0x69
 801225e:	5c99      	ldrb	r1, [r3, r2]
 8012260:	2912      	cmp	r1, #18
 8012262:	d01a      	beq.n	801229a <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012264:	2122      	movs	r1, #34	; 0x22
 8012266:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012268:	2180      	movs	r1, #128	; 0x80
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	0049      	lsls	r1, r1, #1
 801226e:	6810      	ldr	r0, [r2, #0]
 8012270:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012272:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012274:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012276:	6891      	ldr	r1, [r2, #8]
 8012278:	4301      	orrs	r1, r0
 801227a:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 801227c:	2000      	movs	r0, #0
 801227e:	2168      	movs	r1, #104	; 0x68
 8012280:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012282:	6813      	ldr	r3, [r2, #0]
 8012284:	3948      	subs	r1, #72	; 0x48
 8012286:	430b      	orrs	r3, r1
 8012288:	6013      	str	r3, [r2, #0]
  }
}
 801228a:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 801228c:	691a      	ldr	r2, [r3, #16]
 801228e:	2a00      	cmp	r2, #0
 8012290:	d1df      	bne.n	8012252 <HAL_UART_Receive_IT+0x46>
 8012292:	490c      	ldr	r1, [pc, #48]	; (80122c4 <HAL_UART_Receive_IT+0xb8>)
 8012294:	325c      	adds	r2, #92	; 0x5c
 8012296:	5299      	strh	r1, [r3, r2]
 8012298:	e7de      	b.n	8012258 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801229a:	3120      	adds	r1, #32
 801229c:	5499      	strb	r1, [r3, r2]
 801229e:	e7e3      	b.n	8012268 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 80122a0:	2180      	movs	r1, #128	; 0x80
 80122a2:	0549      	lsls	r1, r1, #21
 80122a4:	428a      	cmp	r2, r1
 80122a6:	d1d7      	bne.n	8012258 <HAL_UART_Receive_IT+0x4c>
 80122a8:	691a      	ldr	r2, [r3, #16]
 80122aa:	2a00      	cmp	r2, #0
 80122ac:	d005      	beq.n	80122ba <HAL_UART_Receive_IT+0xae>
 80122ae:	225c      	movs	r2, #92	; 0x5c
 80122b0:	213f      	movs	r1, #63	; 0x3f
 80122b2:	5299      	strh	r1, [r3, r2]
 80122b4:	e7d0      	b.n	8012258 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 80122b6:	2002      	movs	r0, #2
 80122b8:	e7e7      	b.n	801228a <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 80122ba:	225c      	movs	r2, #92	; 0x5c
 80122bc:	217f      	movs	r1, #127	; 0x7f
 80122be:	5299      	strh	r1, [r3, r2]
 80122c0:	e7ca      	b.n	8012258 <HAL_UART_Receive_IT+0x4c>
 80122c2:	46c0      	nop			; (mov r8, r8)
 80122c4:	000001ff 	.word	0x000001ff

080122c8 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122c8:	b570      	push	{r4, r5, r6, lr}
 80122ca:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122cc:	2069      	movs	r0, #105	; 0x69
 80122ce:	5c25      	ldrb	r5, [r4, r0]
 80122d0:	2d01      	cmp	r5, #1
 80122d2:	d003      	beq.n	80122dc <HAL_UART_Receive_DMA+0x14>
 80122d4:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80122d6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122d8:	2b12      	cmp	r3, #18
 80122da:	d12b      	bne.n	8012334 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 80122dc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80122de:	2900      	cmp	r1, #0
 80122e0:	d028      	beq.n	8012334 <HAL_UART_Receive_DMA+0x6c>
 80122e2:	2a00      	cmp	r2, #0
 80122e4:	d026      	beq.n	8012334 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 80122e6:	2368      	movs	r3, #104	; 0x68
 80122e8:	5ce5      	ldrb	r5, [r4, r3]
 80122ea:	2d01      	cmp	r5, #1
 80122ec:	d026      	beq.n	801233c <HAL_UART_Receive_DMA+0x74>
 80122ee:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 80122f0:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 80122f2:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80122f4:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122f6:	2300      	movs	r3, #0
 80122f8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80122fa:	3369      	adds	r3, #105	; 0x69
 80122fc:	5ce0      	ldrb	r0, [r4, r3]
 80122fe:	2812      	cmp	r0, #18
 8012300:	d019      	beq.n	8012336 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012302:	2022      	movs	r0, #34	; 0x22
 8012304:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012306:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012308:	4b0d      	ldr	r3, [pc, #52]	; (8012340 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801230a:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801230c:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801230e:	4b0d      	ldr	r3, [pc, #52]	; (8012344 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012310:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012312:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012314:	4b0c      	ldr	r3, [pc, #48]	; (8012348 <HAL_UART_Receive_DMA+0x80>)
 8012316:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012318:	0013      	movs	r3, r2
 801231a:	000a      	movs	r2, r1
 801231c:	0029      	movs	r1, r5
 801231e:	f7fd fce9 	bl	800fcf4 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012322:	2140      	movs	r1, #64	; 0x40
 8012324:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8012326:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012328:	6893      	ldr	r3, [r2, #8]
 801232a:	430b      	orrs	r3, r1
 801232c:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 801232e:	2368      	movs	r3, #104	; 0x68
 8012330:	2200      	movs	r2, #0
 8012332:	54e2      	strb	r2, [r4, r3]
  }
}
 8012334:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012336:	3020      	adds	r0, #32
 8012338:	54e0      	strb	r0, [r4, r3]
 801233a:	e7e4      	b.n	8012306 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 801233c:	2002      	movs	r0, #2
 801233e:	e7f9      	b.n	8012334 <HAL_UART_Receive_DMA+0x6c>
 8012340:	0801234d 	.word	0x0801234d
 8012344:	08012389 	.word	0x08012389
 8012348:	08012395 	.word	0x08012395

0801234c <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801234c:	6803      	ldr	r3, [r0, #0]
{
 801234e:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012350:	6819      	ldr	r1, [r3, #0]
 8012352:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012354:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012356:	400b      	ands	r3, r1
 8012358:	d10c      	bne.n	8012374 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 801235a:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801235c:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 801235e:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012360:	6811      	ldr	r1, [r2, #0]
 8012362:	688b      	ldr	r3, [r1, #8]
 8012364:	4383      	bics	r3, r0
 8012366:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012368:	2369      	movs	r3, #105	; 0x69
 801236a:	5cd1      	ldrb	r1, [r2, r3]
 801236c:	2932      	cmp	r1, #50	; 0x32
 801236e:	d005      	beq.n	801237c <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012370:	2101      	movs	r1, #1
 8012372:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012374:	0010      	movs	r0, r2
 8012376:	f7fa fb0d 	bl	800c994 <HAL_UART_RxCpltCallback>
}
 801237a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801237c:	3920      	subs	r1, #32
 801237e:	54d1      	strb	r1, [r2, r3]
 8012380:	e7f8      	b.n	8012374 <UART_DMAReceiveCplt+0x28>
 8012382:	46c0      	nop			; (mov r8, r8)

08012384 <HAL_UART_RxHalfCpltCallback>:
 8012384:	4770      	bx	lr
 8012386:	46c0      	nop			; (mov r8, r8)

08012388 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012388:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801238a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801238c:	f7ff fffa 	bl	8012384 <HAL_UART_RxHalfCpltCallback>
}
 8012390:	bd10      	pop	{r4, pc}
 8012392:	46c0      	nop			; (mov r8, r8)

08012394 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012394:	2300      	movs	r3, #0
 8012396:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012398:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801239a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 801239c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801239e:	3a08      	subs	r2, #8
 80123a0:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80123a2:	3369      	adds	r3, #105	; 0x69
 80123a4:	3a51      	subs	r2, #81	; 0x51
 80123a6:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80123a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80123aa:	320f      	adds	r2, #15
 80123ac:	4313      	orrs	r3, r2
 80123ae:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80123b0:	f7fa facc 	bl	800c94c <HAL_UART_ErrorCallback>
}
 80123b4:	bd10      	pop	{r4, pc}
 80123b6:	46c0      	nop			; (mov r8, r8)

080123b8 <UART_SetConfig>:
{
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80123bc:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123be:	69c1      	ldr	r1, [r0, #28]
 80123c0:	6883      	ldr	r3, [r0, #8]
 80123c2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80123c4:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123c6:	4303      	orrs	r3, r0
 80123c8:	6968      	ldr	r0, [r5, #20]
 80123ca:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80123cc:	4861      	ldr	r0, [pc, #388]	; (8012554 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123ce:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80123d0:	4002      	ands	r2, r0
 80123d2:	4313      	orrs	r3, r2
 80123d4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123d6:	6863      	ldr	r3, [r4, #4]
 80123d8:	4a5f      	ldr	r2, [pc, #380]	; (8012558 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80123da:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123dc:	4013      	ands	r3, r2
 80123de:	68ea      	ldr	r2, [r5, #12]
 80123e0:	4313      	orrs	r3, r2
 80123e2:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80123e4:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80123e6:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80123e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80123ea:	485c      	ldr	r0, [pc, #368]	; (801255c <UART_SetConfig+0x1a4>)
 80123ec:	4002      	ands	r2, r0
 80123ee:	4313      	orrs	r3, r2
 80123f0:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123f2:	4b5b      	ldr	r3, [pc, #364]	; (8012560 <UART_SetConfig+0x1a8>)
 80123f4:	429c      	cmp	r4, r3
 80123f6:	d044      	beq.n	8012482 <UART_SetConfig+0xca>
 80123f8:	4b5a      	ldr	r3, [pc, #360]	; (8012564 <UART_SetConfig+0x1ac>)
 80123fa:	429c      	cmp	r4, r3
 80123fc:	d018      	beq.n	8012430 <UART_SetConfig+0x78>
 80123fe:	4b5a      	ldr	r3, [pc, #360]	; (8012568 <UART_SetConfig+0x1b0>)
 8012400:	429c      	cmp	r4, r3
 8012402:	d100      	bne.n	8012406 <UART_SetConfig+0x4e>
 8012404:	e085      	b.n	8012512 <UART_SetConfig+0x15a>
 8012406:	4b59      	ldr	r3, [pc, #356]	; (801256c <UART_SetConfig+0x1b4>)
 8012408:	429c      	cmp	r4, r3
 801240a:	d031      	beq.n	8012470 <UART_SetConfig+0xb8>
 801240c:	4b58      	ldr	r3, [pc, #352]	; (8012570 <UART_SetConfig+0x1b8>)
 801240e:	429c      	cmp	r4, r3
 8012410:	d02e      	beq.n	8012470 <UART_SetConfig+0xb8>
 8012412:	4b58      	ldr	r3, [pc, #352]	; (8012574 <UART_SetConfig+0x1bc>)
 8012414:	429c      	cmp	r4, r3
 8012416:	d02b      	beq.n	8012470 <UART_SetConfig+0xb8>
 8012418:	4b57      	ldr	r3, [pc, #348]	; (8012578 <UART_SetConfig+0x1c0>)
 801241a:	429c      	cmp	r4, r3
 801241c:	d028      	beq.n	8012470 <UART_SetConfig+0xb8>
 801241e:	4b57      	ldr	r3, [pc, #348]	; (801257c <UART_SetConfig+0x1c4>)
 8012420:	429c      	cmp	r4, r3
 8012422:	d025      	beq.n	8012470 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012424:	2380      	movs	r3, #128	; 0x80
 8012426:	021b      	lsls	r3, r3, #8
 8012428:	4299      	cmp	r1, r3
 801242a:	d050      	beq.n	80124ce <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 801242c:	2001      	movs	r0, #1
 801242e:	e01c      	b.n	801246a <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012430:	20c0      	movs	r0, #192	; 0xc0
 8012432:	2280      	movs	r2, #128	; 0x80
 8012434:	4b52      	ldr	r3, [pc, #328]	; (8012580 <UART_SetConfig+0x1c8>)
 8012436:	0280      	lsls	r0, r0, #10
 8012438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243a:	0252      	lsls	r2, r2, #9
 801243c:	4003      	ands	r3, r0
 801243e:	4293      	cmp	r3, r2
 8012440:	d049      	beq.n	80124d6 <UART_SetConfig+0x11e>
 8012442:	d913      	bls.n	801246c <UART_SetConfig+0xb4>
 8012444:	2280      	movs	r2, #128	; 0x80
 8012446:	0292      	lsls	r2, r2, #10
 8012448:	4293      	cmp	r3, r2
 801244a:	d100      	bne.n	801244e <UART_SetConfig+0x96>
 801244c:	e070      	b.n	8012530 <UART_SetConfig+0x178>
 801244e:	4283      	cmp	r3, r0
 8012450:	d1e8      	bne.n	8012424 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012452:	2380      	movs	r3, #128	; 0x80
 8012454:	021b      	lsls	r3, r3, #8
 8012456:	4299      	cmp	r1, r3
 8012458:	d056      	beq.n	8012508 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801245a:	6869      	ldr	r1, [r5, #4]
 801245c:	4849      	ldr	r0, [pc, #292]	; (8012584 <UART_SetConfig+0x1cc>)
 801245e:	f7ed fe77 	bl	8000150 <__udivsi3>
 8012462:	0400      	lsls	r0, r0, #16
 8012464:	0c00      	lsrs	r0, r0, #16
 8012466:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012468:	2000      	movs	r0, #0
}
 801246a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1d9      	bne.n	8012424 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012470:	2380      	movs	r3, #128	; 0x80
 8012472:	021b      	lsls	r3, r3, #8
 8012474:	4299      	cmp	r1, r3
 8012476:	d060      	beq.n	801253a <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012478:	f7ff f83c 	bl	80114f4 <HAL_RCC_GetPCLK1Freq>
 801247c:	682c      	ldr	r4, [r5, #0]
 801247e:	6869      	ldr	r1, [r5, #4]
 8012480:	e7ed      	b.n	801245e <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012482:	4b3f      	ldr	r3, [pc, #252]	; (8012580 <UART_SetConfig+0x1c8>)
 8012484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012486:	2303      	movs	r3, #3
 8012488:	4013      	ands	r3, r2
 801248a:	4a3f      	ldr	r2, [pc, #252]	; (8012588 <UART_SetConfig+0x1d0>)
 801248c:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801248e:	2280      	movs	r2, #128	; 0x80
 8012490:	0212      	lsls	r2, r2, #8
 8012492:	4291      	cmp	r1, r2
 8012494:	d00e      	beq.n	80124b4 <UART_SetConfig+0xfc>
    switch (clocksource)
 8012496:	2b02      	cmp	r3, #2
 8012498:	d0df      	beq.n	801245a <UART_SetConfig+0xa2>
 801249a:	d956      	bls.n	801254a <UART_SetConfig+0x192>
 801249c:	2b04      	cmp	r3, #4
 801249e:	d01e      	beq.n	80124de <UART_SetConfig+0x126>
 80124a0:	2b08      	cmp	r3, #8
 80124a2:	d1c3      	bne.n	801242c <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80124a4:	2080      	movs	r0, #128	; 0x80
 80124a6:	6869      	ldr	r1, [r5, #4]
 80124a8:	0200      	lsls	r0, r0, #8
 80124aa:	f7ed fe51 	bl	8000150 <__udivsi3>
 80124ae:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80124b0:	2000      	movs	r0, #0
        break;
 80124b2:	e7da      	b.n	801246a <UART_SetConfig+0xb2>
    switch (clocksource)
 80124b4:	2b02      	cmp	r3, #2
 80124b6:	d027      	beq.n	8012508 <UART_SetConfig+0x150>
 80124b8:	d907      	bls.n	80124ca <UART_SetConfig+0x112>
 80124ba:	2b04      	cmp	r3, #4
 80124bc:	d014      	beq.n	80124e8 <UART_SetConfig+0x130>
 80124be:	2b08      	cmp	r3, #8
 80124c0:	d105      	bne.n	80124ce <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80124c2:	2080      	movs	r0, #128	; 0x80
 80124c4:	6869      	ldr	r1, [r5, #4]
 80124c6:	0240      	lsls	r0, r0, #9
 80124c8:	e020      	b.n	801250c <UART_SetConfig+0x154>
    switch (clocksource)
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d035      	beq.n	801253a <UART_SetConfig+0x182>
 80124ce:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80124d0:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80124d2:	60e3      	str	r3, [r4, #12]
 80124d4:	e7c9      	b.n	801246a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124d6:	2380      	movs	r3, #128	; 0x80
 80124d8:	021b      	lsls	r3, r3, #8
 80124da:	4299      	cmp	r1, r3
 80124dc:	d004      	beq.n	80124e8 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80124de:	f7fe ffaf 	bl	8011440 <HAL_RCC_GetSysClockFreq>
 80124e2:	682c      	ldr	r4, [r5, #0]
 80124e4:	6869      	ldr	r1, [r5, #4]
 80124e6:	e7ba      	b.n	801245e <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80124e8:	f7fe ffaa 	bl	8011440 <HAL_RCC_GetSysClockFreq>
 80124ec:	6869      	ldr	r1, [r5, #4]
 80124ee:	0040      	lsls	r0, r0, #1
 80124f0:	f7ed fe2e 	bl	8000150 <__udivsi3>
 80124f4:	682c      	ldr	r4, [r5, #0]
 80124f6:	220f      	movs	r2, #15
 80124f8:	0703      	lsls	r3, r0, #28
 80124fa:	0f5b      	lsrs	r3, r3, #29
 80124fc:	4390      	bics	r0, r2
 80124fe:	4303      	orrs	r3, r0
 8012500:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012502:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012504:	60e3      	str	r3, [r4, #12]
 8012506:	e7b0      	b.n	801246a <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012508:	6869      	ldr	r1, [r5, #4]
 801250a:	4820      	ldr	r0, [pc, #128]	; (801258c <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801250c:	f7ed fe20 	bl	8000150 <__udivsi3>
 8012510:	e7f1      	b.n	80124f6 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012512:	20c0      	movs	r0, #192	; 0xc0
 8012514:	2280      	movs	r2, #128	; 0x80
 8012516:	4b1a      	ldr	r3, [pc, #104]	; (8012580 <UART_SetConfig+0x1c8>)
 8012518:	0300      	lsls	r0, r0, #12
 801251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251c:	02d2      	lsls	r2, r2, #11
 801251e:	4003      	ands	r3, r0
 8012520:	4293      	cmp	r3, r2
 8012522:	d0d8      	beq.n	80124d6 <UART_SetConfig+0x11e>
 8012524:	d9a2      	bls.n	801246c <UART_SetConfig+0xb4>
 8012526:	2280      	movs	r2, #128	; 0x80
 8012528:	0312      	lsls	r2, r2, #12
 801252a:	4293      	cmp	r3, r2
 801252c:	d000      	beq.n	8012530 <UART_SetConfig+0x178>
 801252e:	e78e      	b.n	801244e <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012530:	2380      	movs	r3, #128	; 0x80
 8012532:	021b      	lsls	r3, r3, #8
 8012534:	4299      	cmp	r1, r3
 8012536:	d1b5      	bne.n	80124a4 <UART_SetConfig+0xec>
 8012538:	e7c3      	b.n	80124c2 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801253a:	f7fe ffdb 	bl	80114f4 <HAL_RCC_GetPCLK1Freq>
 801253e:	6869      	ldr	r1, [r5, #4]
 8012540:	0040      	lsls	r0, r0, #1
 8012542:	f7ed fe05 	bl	8000150 <__udivsi3>
 8012546:	682c      	ldr	r4, [r5, #0]
 8012548:	e7d5      	b.n	80124f6 <UART_SetConfig+0x13e>
    switch (clocksource)
 801254a:	2b00      	cmp	r3, #0
 801254c:	d094      	beq.n	8012478 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 801254e:	2001      	movs	r0, #1
 8012550:	e78b      	b.n	801246a <UART_SetConfig+0xb2>
 8012552:	46c0      	nop			; (mov r8, r8)
 8012554:	efff69f3 	.word	0xefff69f3
 8012558:	ffffcfff 	.word	0xffffcfff
 801255c:	fffff4ff 	.word	0xfffff4ff
 8012560:	40013800 	.word	0x40013800
 8012564:	40004400 	.word	0x40004400
 8012568:	40004800 	.word	0x40004800
 801256c:	40004c00 	.word	0x40004c00
 8012570:	40005000 	.word	0x40005000
 8012574:	40011400 	.word	0x40011400
 8012578:	40011800 	.word	0x40011800
 801257c:	40011c00 	.word	0x40011c00
 8012580:	40021000 	.word	0x40021000
 8012584:	007a1200 	.word	0x007a1200
 8012588:	08017ec4 	.word	0x08017ec4
 801258c:	00f42400 	.word	0x00f42400

08012590 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012590:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8012592:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012594:	07da      	lsls	r2, r3, #31
 8012596:	d506      	bpl.n	80125a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012598:	6801      	ldr	r1, [r0, #0]
 801259a:	4c28      	ldr	r4, [pc, #160]	; (801263c <UART_AdvFeatureConfig+0xac>)
 801259c:	684a      	ldr	r2, [r1, #4]
 801259e:	4022      	ands	r2, r4
 80125a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80125a2:	4322      	orrs	r2, r4
 80125a4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80125a6:	079a      	lsls	r2, r3, #30
 80125a8:	d506      	bpl.n	80125b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80125aa:	6801      	ldr	r1, [r0, #0]
 80125ac:	4c24      	ldr	r4, [pc, #144]	; (8012640 <UART_AdvFeatureConfig+0xb0>)
 80125ae:	684a      	ldr	r2, [r1, #4]
 80125b0:	4022      	ands	r2, r4
 80125b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80125b4:	4322      	orrs	r2, r4
 80125b6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80125b8:	075a      	lsls	r2, r3, #29
 80125ba:	d506      	bpl.n	80125ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80125bc:	6801      	ldr	r1, [r0, #0]
 80125be:	4c21      	ldr	r4, [pc, #132]	; (8012644 <UART_AdvFeatureConfig+0xb4>)
 80125c0:	684a      	ldr	r2, [r1, #4]
 80125c2:	4022      	ands	r2, r4
 80125c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80125c6:	4322      	orrs	r2, r4
 80125c8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80125ca:	071a      	lsls	r2, r3, #28
 80125cc:	d506      	bpl.n	80125dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80125ce:	6801      	ldr	r1, [r0, #0]
 80125d0:	4c1d      	ldr	r4, [pc, #116]	; (8012648 <UART_AdvFeatureConfig+0xb8>)
 80125d2:	684a      	ldr	r2, [r1, #4]
 80125d4:	4022      	ands	r2, r4
 80125d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80125d8:	4322      	orrs	r2, r4
 80125da:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80125dc:	06da      	lsls	r2, r3, #27
 80125de:	d506      	bpl.n	80125ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80125e0:	6801      	ldr	r1, [r0, #0]
 80125e2:	4c1a      	ldr	r4, [pc, #104]	; (801264c <UART_AdvFeatureConfig+0xbc>)
 80125e4:	688a      	ldr	r2, [r1, #8]
 80125e6:	4022      	ands	r2, r4
 80125e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80125ea:	4322      	orrs	r2, r4
 80125ec:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80125ee:	069a      	lsls	r2, r3, #26
 80125f0:	d506      	bpl.n	8012600 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80125f2:	6801      	ldr	r1, [r0, #0]
 80125f4:	4c16      	ldr	r4, [pc, #88]	; (8012650 <UART_AdvFeatureConfig+0xc0>)
 80125f6:	688a      	ldr	r2, [r1, #8]
 80125f8:	4022      	ands	r2, r4
 80125fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80125fc:	4322      	orrs	r2, r4
 80125fe:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012600:	065a      	lsls	r2, r3, #25
 8012602:	d50a      	bpl.n	801261a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012604:	6801      	ldr	r1, [r0, #0]
 8012606:	4d13      	ldr	r5, [pc, #76]	; (8012654 <UART_AdvFeatureConfig+0xc4>)
 8012608:	684a      	ldr	r2, [r1, #4]
 801260a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801260c:	402a      	ands	r2, r5
 801260e:	4322      	orrs	r2, r4
 8012610:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012612:	2280      	movs	r2, #128	; 0x80
 8012614:	0352      	lsls	r2, r2, #13
 8012616:	4294      	cmp	r4, r2
 8012618:	d009      	beq.n	801262e <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801261a:	061b      	lsls	r3, r3, #24
 801261c:	d506      	bpl.n	801262c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801261e:	6802      	ldr	r2, [r0, #0]
 8012620:	490d      	ldr	r1, [pc, #52]	; (8012658 <UART_AdvFeatureConfig+0xc8>)
 8012622:	6853      	ldr	r3, [r2, #4]
 8012624:	400b      	ands	r3, r1
 8012626:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012628:	430b      	orrs	r3, r1
 801262a:	6053      	str	r3, [r2, #4]
}
 801262c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801262e:	684a      	ldr	r2, [r1, #4]
 8012630:	4c0a      	ldr	r4, [pc, #40]	; (801265c <UART_AdvFeatureConfig+0xcc>)
 8012632:	4022      	ands	r2, r4
 8012634:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8012636:	4322      	orrs	r2, r4
 8012638:	604a      	str	r2, [r1, #4]
 801263a:	e7ee      	b.n	801261a <UART_AdvFeatureConfig+0x8a>
 801263c:	fffdffff 	.word	0xfffdffff
 8012640:	fffeffff 	.word	0xfffeffff
 8012644:	fffbffff 	.word	0xfffbffff
 8012648:	ffff7fff 	.word	0xffff7fff
 801264c:	ffffefff 	.word	0xffffefff
 8012650:	ffffdfff 	.word	0xffffdfff
 8012654:	ffefffff 	.word	0xffefffff
 8012658:	fff7ffff 	.word	0xfff7ffff
 801265c:	ff9fffff 	.word	0xff9fffff

08012660 <UART_WaitOnFlagUntilTimeout>:
{
 8012660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012662:	46c6      	mov	lr, r8
 8012664:	4690      	mov	r8, r2
 8012666:	b500      	push	{lr}
 8012668:	001d      	movs	r5, r3
 801266a:	0006      	movs	r6, r0
 801266c:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 801266e:	f7fc fe4f 	bl	800f310 <HAL_GetTick>
  if(Status == RESET)
 8012672:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012674:	0007      	movs	r7, r0
  if(Status == RESET)
 8012676:	2b00      	cmp	r3, #0
 8012678:	d112      	bne.n	80126a0 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801267a:	6832      	ldr	r2, [r6, #0]
 801267c:	e001      	b.n	8012682 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801267e:	1c6b      	adds	r3, r5, #1
 8012680:	d117      	bne.n	80126b2 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012682:	69d3      	ldr	r3, [r2, #28]
 8012684:	4023      	ands	r3, r4
 8012686:	42a3      	cmp	r3, r4
 8012688:	d1f9      	bne.n	801267e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801268a:	2000      	movs	r0, #0
}
 801268c:	bc04      	pop	{r2}
 801268e:	4690      	mov	r8, r2
 8012690:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012692:	2d00      	cmp	r5, #0
 8012694:	d015      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x62>
 8012696:	f7fc fe3b 	bl	800f310 <HAL_GetTick>
 801269a:	1bc0      	subs	r0, r0, r7
 801269c:	42a8      	cmp	r0, r5
 801269e:	d80f      	bhi.n	80126c0 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80126a0:	6832      	ldr	r2, [r6, #0]
 80126a2:	e001      	b.n	80126a8 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 80126a4:	1c6b      	adds	r3, r5, #1
 80126a6:	d1f4      	bne.n	8012692 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80126a8:	69d3      	ldr	r3, [r2, #28]
 80126aa:	4023      	ands	r3, r4
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	d0f9      	beq.n	80126a4 <UART_WaitOnFlagUntilTimeout+0x44>
 80126b0:	e7eb      	b.n	801268a <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80126b2:	2d00      	cmp	r5, #0
 80126b4:	d005      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x62>
 80126b6:	f7fc fe2b 	bl	800f310 <HAL_GetTick>
 80126ba:	1bc0      	subs	r0, r0, r7
 80126bc:	42a8      	cmp	r0, r5
 80126be:	d9dc      	bls.n	801267a <UART_WaitOnFlagUntilTimeout+0x1a>
 80126c0:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80126c2:	2180      	movs	r1, #128	; 0x80
 80126c4:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 80126c6:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80126c8:	438b      	bics	r3, r1
 80126ca:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80126cc:	6813      	ldr	r3, [r2, #0]
 80126ce:	3960      	subs	r1, #96	; 0x60
 80126d0:	438b      	bics	r3, r1
 80126d2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80126d4:	6813      	ldr	r3, [r2, #0]
 80126d6:	4907      	ldr	r1, [pc, #28]	; (80126f4 <UART_WaitOnFlagUntilTimeout+0x94>)
 80126d8:	400b      	ands	r3, r1
 80126da:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80126dc:	6893      	ldr	r3, [r2, #8]
 80126de:	3103      	adds	r1, #3
 80126e0:	31ff      	adds	r1, #255	; 0xff
 80126e2:	438b      	bics	r3, r1
 80126e4:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 80126e6:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 80126e8:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 80126ea:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80126ec:	3b01      	subs	r3, #1
 80126ee:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80126f0:	e7cc      	b.n	801268c <UART_WaitOnFlagUntilTimeout+0x2c>
 80126f2:	46c0      	nop			; (mov r8, r8)
 80126f4:	fffffeff 	.word	0xfffffeff

080126f8 <HAL_UART_Transmit>:
{
 80126f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126fa:	46c6      	mov	lr, r8
 80126fc:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80126fe:	2369      	movs	r3, #105	; 0x69
{
 8012700:	b500      	push	{lr}
 8012702:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012704:	5cc1      	ldrb	r1, [r0, r3]
{
 8012706:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012708:	2901      	cmp	r1, #1
 801270a:	d003      	beq.n	8012714 <HAL_UART_Transmit+0x1c>
 801270c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801270e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012710:	2b22      	cmp	r3, #34	; 0x22
 8012712:	d147      	bne.n	80127a4 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8012714:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012716:	2d00      	cmp	r5, #0
 8012718:	d044      	beq.n	80127a4 <HAL_UART_Transmit+0xac>
 801271a:	2a00      	cmp	r2, #0
 801271c:	d042      	beq.n	80127a4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 801271e:	2368      	movs	r3, #104	; 0x68
 8012720:	5ce1      	ldrb	r1, [r4, r3]
 8012722:	2901      	cmp	r1, #1
 8012724:	d046      	beq.n	80127b4 <HAL_UART_Transmit+0xbc>
 8012726:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012728:	2300      	movs	r3, #0
 801272a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801272c:	3369      	adds	r3, #105	; 0x69
 801272e:	5ce1      	ldrb	r1, [r4, r3]
 8012730:	2922      	cmp	r1, #34	; 0x22
 8012732:	d03a      	beq.n	80127aa <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012734:	2112      	movs	r1, #18
 8012736:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012738:	2350      	movs	r3, #80	; 0x50
 801273a:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801273c:	2380      	movs	r3, #128	; 0x80
 801273e:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8012740:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012742:	4698      	mov	r8, r3
 8012744:	e005      	b.n	8012752 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012746:	782a      	ldrb	r2, [r5, #0]
 8012748:	3501      	adds	r5, #1
 801274a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801274c:	5ba2      	ldrh	r2, [r4, r6]
 801274e:	2a00      	cmp	r2, #0
 8012750:	d018      	beq.n	8012784 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8012752:	3a01      	subs	r2, #1
 8012754:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012756:	003b      	movs	r3, r7
 8012758:	2200      	movs	r2, #0
 801275a:	2180      	movs	r1, #128	; 0x80
 801275c:	0020      	movs	r0, r4
 801275e:	f7ff ff7f 	bl	8012660 <UART_WaitOnFlagUntilTimeout>
 8012762:	2800      	cmp	r0, #0
 8012764:	d124      	bne.n	80127b0 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012766:	68a2      	ldr	r2, [r4, #8]
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	4542      	cmp	r2, r8
 801276c:	d1eb      	bne.n	8012746 <HAL_UART_Transmit+0x4e>
 801276e:	6922      	ldr	r2, [r4, #16]
 8012770:	2a00      	cmp	r2, #0
 8012772:	d1e8      	bne.n	8012746 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012774:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8012776:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012778:	05d2      	lsls	r2, r2, #23
 801277a:	0dd2      	lsrs	r2, r2, #23
 801277c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801277e:	5ba2      	ldrh	r2, [r4, r6]
 8012780:	2a00      	cmp	r2, #0
 8012782:	d1e6      	bne.n	8012752 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012784:	003b      	movs	r3, r7
 8012786:	2140      	movs	r1, #64	; 0x40
 8012788:	0020      	movs	r0, r4
 801278a:	f7ff ff69 	bl	8012660 <UART_WaitOnFlagUntilTimeout>
 801278e:	2800      	cmp	r0, #0
 8012790:	d10e      	bne.n	80127b0 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012792:	2369      	movs	r3, #105	; 0x69
 8012794:	5ce2      	ldrb	r2, [r4, r3]
 8012796:	2a32      	cmp	r2, #50	; 0x32
 8012798:	d00e      	beq.n	80127b8 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 801279a:	2201      	movs	r2, #1
 801279c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801279e:	2368      	movs	r3, #104	; 0x68
 80127a0:	2200      	movs	r2, #0
 80127a2:	54e2      	strb	r2, [r4, r3]
}
 80127a4:	bc04      	pop	{r2}
 80127a6:	4690      	mov	r8, r2
 80127a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80127aa:	3110      	adds	r1, #16
 80127ac:	54e1      	strb	r1, [r4, r3]
 80127ae:	e7c3      	b.n	8012738 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 80127b0:	2003      	movs	r0, #3
 80127b2:	e7f7      	b.n	80127a4 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 80127b4:	2002      	movs	r0, #2
 80127b6:	e7f5      	b.n	80127a4 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80127b8:	3a10      	subs	r2, #16
 80127ba:	54e2      	strb	r2, [r4, r3]
 80127bc:	e7ef      	b.n	801279e <HAL_UART_Transmit+0xa6>
 80127be:	46c0      	nop			; (mov r8, r8)

080127c0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127c0:	2300      	movs	r3, #0
{
 80127c2:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80127c4:	4a1a      	ldr	r2, [pc, #104]	; (8012830 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127c6:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80127c8:	6803      	ldr	r3, [r0, #0]
{
 80127ca:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d00d      	beq.n	80127ec <UART_CheckIdleState+0x2c>
 80127d0:	4a18      	ldr	r2, [pc, #96]	; (8012834 <UART_CheckIdleState+0x74>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d00a      	beq.n	80127ec <UART_CheckIdleState+0x2c>
 80127d6:	4a18      	ldr	r2, [pc, #96]	; (8012838 <UART_CheckIdleState+0x78>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d007      	beq.n	80127ec <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 80127dc:	2369      	movs	r3, #105	; 0x69
 80127de:	2201      	movs	r2, #1
 80127e0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80127e2:	2200      	movs	r2, #0
  return HAL_OK;
 80127e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80127e6:	3b01      	subs	r3, #1
 80127e8:	54e2      	strb	r2, [r4, r3]
}
 80127ea:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	0712      	lsls	r2, r2, #28
 80127f0:	d40e      	bmi.n	8012810 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	075b      	lsls	r3, r3, #29
 80127f6:	d5f1      	bpl.n	80127dc <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80127f8:	23fa      	movs	r3, #250	; 0xfa
 80127fa:	2180      	movs	r1, #128	; 0x80
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	2200      	movs	r2, #0
 8012800:	03c9      	lsls	r1, r1, #15
 8012802:	0020      	movs	r0, r4
 8012804:	f7ff ff2c 	bl	8012660 <UART_WaitOnFlagUntilTimeout>
 8012808:	2800      	cmp	r0, #0
 801280a:	d0e7      	beq.n	80127dc <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 801280c:	2003      	movs	r0, #3
 801280e:	e7ec      	b.n	80127ea <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012810:	23fa      	movs	r3, #250	; 0xfa
 8012812:	2180      	movs	r1, #128	; 0x80
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	2200      	movs	r2, #0
 8012818:	0389      	lsls	r1, r1, #14
 801281a:	0020      	movs	r0, r4
 801281c:	f7ff ff20 	bl	8012660 <UART_WaitOnFlagUntilTimeout>
 8012820:	2800      	cmp	r0, #0
 8012822:	d1f3      	bne.n	801280c <UART_CheckIdleState+0x4c>
 8012824:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	075b      	lsls	r3, r3, #29
 801282a:	d5d7      	bpl.n	80127dc <UART_CheckIdleState+0x1c>
 801282c:	e7e4      	b.n	80127f8 <UART_CheckIdleState+0x38>
 801282e:	46c0      	nop			; (mov r8, r8)
 8012830:	40013800 	.word	0x40013800
 8012834:	40004400 	.word	0x40004400
 8012838:	40004800 	.word	0x40004800

0801283c <HAL_UART_Init>:
{
 801283c:	b510      	push	{r4, lr}
 801283e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012840:	d02a      	beq.n	8012898 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8012842:	2369      	movs	r3, #105	; 0x69
 8012844:	5cc3      	ldrb	r3, [r0, r3]
 8012846:	b2db      	uxtb	r3, r3
 8012848:	2b00      	cmp	r3, #0
 801284a:	d020      	beq.n	801288e <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 801284c:	2369      	movs	r3, #105	; 0x69
 801284e:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8012850:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8012852:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012854:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012856:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8012858:	6813      	ldr	r3, [r2, #0]
 801285a:	438b      	bics	r3, r1
 801285c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801285e:	f7ff fdab 	bl	80123b8 <UART_SetConfig>
 8012862:	2801      	cmp	r0, #1
 8012864:	d018      	beq.n	8012898 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012868:	2b00      	cmp	r3, #0
 801286a:	d117      	bne.n	801289c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801286c:	6823      	ldr	r3, [r4, #0]
 801286e:	490d      	ldr	r1, [pc, #52]	; (80128a4 <HAL_UART_Init+0x68>)
 8012870:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8012872:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012874:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012876:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012878:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801287a:	689a      	ldr	r2, [r3, #8]
 801287c:	438a      	bics	r2, r1
 801287e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	3929      	subs	r1, #41	; 0x29
 8012884:	430a      	orrs	r2, r1
 8012886:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012888:	f7ff ff9a 	bl	80127c0 <UART_CheckIdleState>
}
 801288c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801288e:	2268      	movs	r2, #104	; 0x68
 8012890:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8012892:	f7fa fc0f 	bl	800d0b4 <HAL_UART_MspInit>
 8012896:	e7d9      	b.n	801284c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8012898:	2001      	movs	r0, #1
 801289a:	e7f7      	b.n	801288c <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 801289c:	0020      	movs	r0, r4
 801289e:	f7ff fe77 	bl	8012590 <UART_AdvFeatureConfig>
 80128a2:	e7e3      	b.n	801286c <HAL_UART_Init+0x30>
 80128a4:	ffffb7ff 	.word	0xffffb7ff

080128a8 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128a8:	2269      	movs	r2, #105	; 0x69
{
 80128aa:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128ac:	5c81      	ldrb	r1, [r0, r2]
{
 80128ae:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128b0:	2912      	cmp	r1, #18
 80128b2:	d003      	beq.n	80128bc <UART_Transmit_IT+0x14>
 80128b4:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80128b6:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128b8:	2a32      	cmp	r2, #50	; 0x32
 80128ba:	d112      	bne.n	80128e2 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80128bc:	2252      	movs	r2, #82	; 0x52
 80128be:	5a9a      	ldrh	r2, [r3, r2]
 80128c0:	6819      	ldr	r1, [r3, #0]
 80128c2:	2a00      	cmp	r2, #0
 80128c4:	d00e      	beq.n	80128e4 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128c6:	2480      	movs	r4, #128	; 0x80
 80128c8:	689d      	ldr	r5, [r3, #8]
 80128ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80128cc:	0164      	lsls	r4, r4, #5
 80128ce:	42a5      	cmp	r5, r4
 80128d0:	d012      	beq.n	80128f8 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80128d2:	1c44      	adds	r4, r0, #1
 80128d4:	64dc      	str	r4, [r3, #76]	; 0x4c
 80128d6:	7800      	ldrb	r0, [r0, #0]
 80128d8:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80128da:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 80128dc:	2000      	movs	r0, #0
      huart->TxXferCount--;
 80128de:	3a01      	subs	r2, #1
 80128e0:	525a      	strh	r2, [r3, r1]
  }
}
 80128e2:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80128e4:	680b      	ldr	r3, [r1, #0]
 80128e6:	3280      	adds	r2, #128	; 0x80
 80128e8:	4393      	bics	r3, r2
 80128ea:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80128ec:	680b      	ldr	r3, [r1, #0]
 80128ee:	3a40      	subs	r2, #64	; 0x40
 80128f0:	4313      	orrs	r3, r2
 80128f2:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 80128f4:	2000      	movs	r0, #0
 80128f6:	e7f4      	b.n	80128e2 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128f8:	691c      	ldr	r4, [r3, #16]
 80128fa:	2c00      	cmp	r4, #0
 80128fc:	d1e9      	bne.n	80128d2 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80128fe:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8012900:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012902:	05e4      	lsls	r4, r4, #23
 8012904:	0de4      	lsrs	r4, r4, #23
 8012906:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012908:	64d8      	str	r0, [r3, #76]	; 0x4c
 801290a:	e7e6      	b.n	80128da <UART_Transmit_IT+0x32>

0801290c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801290c:	2140      	movs	r1, #64	; 0x40
 801290e:	6803      	ldr	r3, [r0, #0]
{
 8012910:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	438a      	bics	r2, r1
 8012916:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012918:	2269      	movs	r2, #105	; 0x69
 801291a:	5c81      	ldrb	r1, [r0, r2]
 801291c:	2932      	cmp	r1, #50	; 0x32
 801291e:	d008      	beq.n	8012932 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012920:	2401      	movs	r4, #1
 8012922:	6899      	ldr	r1, [r3, #8]
 8012924:	43a1      	bics	r1, r4
 8012926:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8012928:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 801292a:	f7f9 fff7 	bl	800c91c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801292e:	2000      	movs	r0, #0
 8012930:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012932:	2322      	movs	r3, #34	; 0x22
 8012934:	5483      	strb	r3, [r0, r2]
 8012936:	e7f8      	b.n	801292a <UART_EndTransmit_IT+0x1e>

08012938 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012938:	2369      	movs	r3, #105	; 0x69
{
 801293a:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801293c:	5cc2      	ldrb	r2, [r0, r3]
 801293e:	2a22      	cmp	r2, #34	; 0x22
 8012940:	d003      	beq.n	801294a <UART_Receive_IT+0x12>
 8012942:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012944:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012946:	2b32      	cmp	r3, #50	; 0x32
 8012948:	d12b      	bne.n	80129a2 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 801294a:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801294c:	2180      	movs	r1, #128	; 0x80
 801294e:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8012950:	5ac3      	ldrh	r3, [r0, r3]
 8012952:	6804      	ldr	r4, [r0, #0]
 8012954:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012956:	0149      	lsls	r1, r1, #5
 8012958:	428d      	cmp	r5, r1
 801295a:	d024      	beq.n	80129a6 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801295c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801295e:	1c54      	adds	r4, r2, #1
 8012960:	400b      	ands	r3, r1
 8012962:	6544      	str	r4, [r0, #84]	; 0x54
 8012964:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012966:	225a      	movs	r2, #90	; 0x5a
 8012968:	5a83      	ldrh	r3, [r0, r2]
 801296a:	3b01      	subs	r3, #1
 801296c:	b29b      	uxth	r3, r3
 801296e:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012970:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012972:	2b00      	cmp	r3, #0
 8012974:	d115      	bne.n	80129a2 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012976:	2120      	movs	r1, #32
 8012978:	6803      	ldr	r3, [r0, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	438a      	bics	r2, r1
 801297e:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012980:	2269      	movs	r2, #105	; 0x69
 8012982:	5c81      	ldrb	r1, [r0, r2]
 8012984:	2932      	cmp	r1, #50	; 0x32
 8012986:	d017      	beq.n	80129b8 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012988:	6819      	ldr	r1, [r3, #0]
 801298a:	4c0d      	ldr	r4, [pc, #52]	; (80129c0 <UART_Receive_IT+0x88>)
 801298c:	4021      	ands	r1, r4
 801298e:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012990:	6899      	ldr	r1, [r3, #8]
 8012992:	3403      	adds	r4, #3
 8012994:	34ff      	adds	r4, #255	; 0xff
 8012996:	43a1      	bics	r1, r4
 8012998:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 801299a:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 801299c:	f7f9 fffa 	bl	800c994 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80129a0:	2200      	movs	r2, #0
  }
}
 80129a2:	0010      	movs	r0, r2
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129a6:	6901      	ldr	r1, [r0, #16]
 80129a8:	2900      	cmp	r1, #0
 80129aa:	d1d7      	bne.n	801295c <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80129ac:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80129ae:	400b      	ands	r3, r1
 80129b0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80129b2:	3202      	adds	r2, #2
 80129b4:	6542      	str	r2, [r0, #84]	; 0x54
 80129b6:	e7d6      	b.n	8012966 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80129b8:	2312      	movs	r3, #18
 80129ba:	5483      	strb	r3, [r0, r2]
 80129bc:	e7ee      	b.n	801299c <UART_Receive_IT+0x64>
 80129be:	46c0      	nop			; (mov r8, r8)
 80129c0:	fffffeff 	.word	0xfffffeff

080129c4 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80129c4:	4770      	bx	lr
 80129c6:	46c0      	nop			; (mov r8, r8)

080129c8 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80129c8:	2201      	movs	r2, #1
 80129ca:	6803      	ldr	r3, [r0, #0]
{
 80129cc:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80129ce:	69d9      	ldr	r1, [r3, #28]
{
 80129d0:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80129d2:	420a      	tst	r2, r1
 80129d4:	d002      	beq.n	80129dc <HAL_UART_IRQHandler+0x14>
 80129d6:	6819      	ldr	r1, [r3, #0]
 80129d8:	05c9      	lsls	r1, r1, #23
 80129da:	d456      	bmi.n	8012a8a <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129dc:	2202      	movs	r2, #2
 80129de:	69d9      	ldr	r1, [r3, #28]
 80129e0:	420a      	tst	r2, r1
 80129e2:	d003      	beq.n	80129ec <HAL_UART_IRQHandler+0x24>
 80129e4:	2101      	movs	r1, #1
 80129e6:	6898      	ldr	r0, [r3, #8]
 80129e8:	4201      	tst	r1, r0
 80129ea:	d146      	bne.n	8012a7a <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129ec:	2204      	movs	r2, #4
 80129ee:	69d9      	ldr	r1, [r3, #28]
 80129f0:	420a      	tst	r2, r1
 80129f2:	d003      	beq.n	80129fc <HAL_UART_IRQHandler+0x34>
 80129f4:	2101      	movs	r1, #1
 80129f6:	6898      	ldr	r0, [r3, #8]
 80129f8:	4201      	tst	r1, r0
 80129fa:	d136      	bne.n	8012a6a <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129fc:	2208      	movs	r2, #8
 80129fe:	69d9      	ldr	r1, [r3, #28]
 8012a00:	420a      	tst	r2, r1
 8012a02:	d003      	beq.n	8012a0c <HAL_UART_IRQHandler+0x44>
 8012a04:	2101      	movs	r1, #1
 8012a06:	6898      	ldr	r0, [r3, #8]
 8012a08:	4201      	tst	r1, r0
 8012a0a:	d120      	bne.n	8012a4e <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a0c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	d126      	bne.n	8012a60 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012a12:	2280      	movs	r2, #128	; 0x80
 8012a14:	69d9      	ldr	r1, [r3, #28]
 8012a16:	0352      	lsls	r2, r2, #13
 8012a18:	4211      	tst	r1, r2
 8012a1a:	d002      	beq.n	8012a22 <HAL_UART_IRQHandler+0x5a>
 8012a1c:	6899      	ldr	r1, [r3, #8]
 8012a1e:	0249      	lsls	r1, r1, #9
 8012a20:	d43e      	bmi.n	8012aa0 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012a22:	2220      	movs	r2, #32
 8012a24:	69d9      	ldr	r1, [r3, #28]
 8012a26:	420a      	tst	r2, r1
 8012a28:	d002      	beq.n	8012a30 <HAL_UART_IRQHandler+0x68>
 8012a2a:	6819      	ldr	r1, [r3, #0]
 8012a2c:	420a      	tst	r2, r1
 8012a2e:	d140      	bne.n	8012ab2 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012a30:	2280      	movs	r2, #128	; 0x80
 8012a32:	69d9      	ldr	r1, [r3, #28]
 8012a34:	420a      	tst	r2, r1
 8012a36:	d002      	beq.n	8012a3e <HAL_UART_IRQHandler+0x76>
 8012a38:	6819      	ldr	r1, [r3, #0]
 8012a3a:	420a      	tst	r2, r1
 8012a3c:	d142      	bne.n	8012ac4 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012a3e:	2240      	movs	r2, #64	; 0x40
 8012a40:	69d9      	ldr	r1, [r3, #28]
 8012a42:	420a      	tst	r2, r1
 8012a44:	d002      	beq.n	8012a4c <HAL_UART_IRQHandler+0x84>
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	421a      	tst	r2, r3
 8012a4a:	d125      	bne.n	8012a98 <HAL_UART_IRQHandler+0xd0>
}
 8012a4c:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012a4e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012a52:	4302      	orrs	r2, r0
 8012a54:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012a56:	2269      	movs	r2, #105	; 0x69
 8012a58:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a5a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012a5c:	2a00      	cmp	r2, #0
 8012a5e:	d0d8      	beq.n	8012a12 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8012a60:	0020      	movs	r0, r4
 8012a62:	f7f9 ff73 	bl	800c94c <HAL_UART_ErrorCallback>
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	e7d3      	b.n	8012a12 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a6a:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012a6c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012a70:	4302      	orrs	r2, r0
 8012a72:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012a74:	2269      	movs	r2, #105	; 0x69
 8012a76:	54a1      	strb	r1, [r4, r2]
 8012a78:	e7c0      	b.n	80129fc <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a7a:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012a7c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a7e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012a80:	4302      	orrs	r2, r0
 8012a82:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012a84:	2269      	movs	r2, #105	; 0x69
 8012a86:	54a1      	strb	r1, [r4, r2]
 8012a88:	e7b0      	b.n	80129ec <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012a8a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a8c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012a8e:	4311      	orrs	r1, r2
 8012a90:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012a92:	2169      	movs	r1, #105	; 0x69
 8012a94:	5442      	strb	r2, [r0, r1]
 8012a96:	e7a1      	b.n	80129dc <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8012a98:	0020      	movs	r0, r4
 8012a9a:	f7ff ff37 	bl	801290c <UART_EndTransmit_IT>
}
 8012a9e:	e7d5      	b.n	8012a4c <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012aa0:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012aa2:	2369      	movs	r3, #105	; 0x69
 8012aa4:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8012aa6:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8012aa8:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012aaa:	f7ff ff8b 	bl	80129c4 <HAL_UARTEx_WakeupCallback>
 8012aae:	6823      	ldr	r3, [r4, #0]
 8012ab0:	e7b7      	b.n	8012a22 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8012ab2:	0020      	movs	r0, r4
 8012ab4:	f7ff ff40 	bl	8012938 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ab8:	2108      	movs	r1, #8
 8012aba:	6823      	ldr	r3, [r4, #0]
 8012abc:	699a      	ldr	r2, [r3, #24]
 8012abe:	430a      	orrs	r2, r1
 8012ac0:	619a      	str	r2, [r3, #24]
 8012ac2:	e7b5      	b.n	8012a30 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012ac4:	0020      	movs	r0, r4
 8012ac6:	f7ff feef 	bl	80128a8 <UART_Transmit_IT>
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	e7b7      	b.n	8012a3e <HAL_UART_IRQHandler+0x76>
 8012ace:	46c0      	nop			; (mov r8, r8)

08012ad0 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012ad0:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012ad2:	f7f1 f849 	bl	8003b68 <Module_Init>
 8012ad6:	e7fe      	b.n	8012ad6 <main+0x6>

08012ad8 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012ad8:	e7fe      	b.n	8012ad8 <UserTask>
 8012ada:	46c0      	nop			; (mov r8, r8)

08012adc <atof>:
 8012adc:	b510      	push	{r4, lr}
 8012ade:	2100      	movs	r1, #0
 8012ae0:	f001 fb74 	bl	80141cc <strtod>
 8012ae4:	bd10      	pop	{r4, pc}

08012ae6 <atoi>:
 8012ae6:	b510      	push	{r4, lr}
 8012ae8:	220a      	movs	r2, #10
 8012aea:	2100      	movs	r1, #0
 8012aec:	f001 fc3a 	bl	8014364 <strtol>
 8012af0:	bd10      	pop	{r4, pc}

08012af2 <atol>:
 8012af2:	b510      	push	{r4, lr}
 8012af4:	220a      	movs	r2, #10
 8012af6:	2100      	movs	r1, #0
 8012af8:	f001 fc34 	bl	8014364 <strtol>
 8012afc:	bd10      	pop	{r4, pc}
	...

08012b00 <calloc>:
 8012b00:	b510      	push	{r4, lr}
 8012b02:	4b03      	ldr	r3, [pc, #12]	; (8012b10 <calloc+0x10>)
 8012b04:	000a      	movs	r2, r1
 8012b06:	0001      	movs	r1, r0
 8012b08:	6818      	ldr	r0, [r3, #0]
 8012b0a:	f000 f803 	bl	8012b14 <_calloc_r>
 8012b0e:	bd10      	pop	{r4, pc}
 8012b10:	200000d0 	.word	0x200000d0

08012b14 <_calloc_r>:
 8012b14:	b510      	push	{r4, lr}
 8012b16:	4351      	muls	r1, r2
 8012b18:	f000 f872 	bl	8012c00 <_malloc_r>
 8012b1c:	1e04      	subs	r4, r0, #0
 8012b1e:	d01a      	beq.n	8012b56 <_calloc_r+0x42>
 8012b20:	0003      	movs	r3, r0
 8012b22:	3b08      	subs	r3, #8
 8012b24:	685a      	ldr	r2, [r3, #4]
 8012b26:	2303      	movs	r3, #3
 8012b28:	439a      	bics	r2, r3
 8012b2a:	3a04      	subs	r2, #4
 8012b2c:	2a24      	cmp	r2, #36	; 0x24
 8012b2e:	d819      	bhi.n	8012b64 <_calloc_r+0x50>
 8012b30:	0003      	movs	r3, r0
 8012b32:	2a13      	cmp	r2, #19
 8012b34:	d90b      	bls.n	8012b4e <_calloc_r+0x3a>
 8012b36:	2100      	movs	r1, #0
 8012b38:	3308      	adds	r3, #8
 8012b3a:	6001      	str	r1, [r0, #0]
 8012b3c:	6041      	str	r1, [r0, #4]
 8012b3e:	2a1b      	cmp	r2, #27
 8012b40:	d905      	bls.n	8012b4e <_calloc_r+0x3a>
 8012b42:	6081      	str	r1, [r0, #8]
 8012b44:	60c1      	str	r1, [r0, #12]
 8012b46:	2a24      	cmp	r2, #36	; 0x24
 8012b48:	d007      	beq.n	8012b5a <_calloc_r+0x46>
 8012b4a:	0003      	movs	r3, r0
 8012b4c:	3310      	adds	r3, #16
 8012b4e:	2200      	movs	r2, #0
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	605a      	str	r2, [r3, #4]
 8012b54:	609a      	str	r2, [r3, #8]
 8012b56:	0020      	movs	r0, r4
 8012b58:	bd10      	pop	{r4, pc}
 8012b5a:	0003      	movs	r3, r0
 8012b5c:	6101      	str	r1, [r0, #16]
 8012b5e:	3318      	adds	r3, #24
 8012b60:	6141      	str	r1, [r0, #20]
 8012b62:	e7f4      	b.n	8012b4e <_calloc_r+0x3a>
 8012b64:	2100      	movs	r1, #0
 8012b66:	f000 fa8d 	bl	8013084 <memset>
 8012b6a:	e7f4      	b.n	8012b56 <_calloc_r+0x42>

08012b6c <__libc_init_array>:
 8012b6c:	b570      	push	{r4, r5, r6, lr}
 8012b6e:	2600      	movs	r6, #0
 8012b70:	4d0c      	ldr	r5, [pc, #48]	; (8012ba4 <__libc_init_array+0x38>)
 8012b72:	4c0d      	ldr	r4, [pc, #52]	; (8012ba8 <__libc_init_array+0x3c>)
 8012b74:	1b64      	subs	r4, r4, r5
 8012b76:	10a4      	asrs	r4, r4, #2
 8012b78:	42a6      	cmp	r6, r4
 8012b7a:	d109      	bne.n	8012b90 <__libc_init_array+0x24>
 8012b7c:	2600      	movs	r6, #0
 8012b7e:	f004 fe41 	bl	8017804 <_init>
 8012b82:	4d0a      	ldr	r5, [pc, #40]	; (8012bac <__libc_init_array+0x40>)
 8012b84:	4c0a      	ldr	r4, [pc, #40]	; (8012bb0 <__libc_init_array+0x44>)
 8012b86:	1b64      	subs	r4, r4, r5
 8012b88:	10a4      	asrs	r4, r4, #2
 8012b8a:	42a6      	cmp	r6, r4
 8012b8c:	d105      	bne.n	8012b9a <__libc_init_array+0x2e>
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	00b3      	lsls	r3, r6, #2
 8012b92:	58eb      	ldr	r3, [r5, r3]
 8012b94:	4798      	blx	r3
 8012b96:	3601      	adds	r6, #1
 8012b98:	e7ee      	b.n	8012b78 <__libc_init_array+0xc>
 8012b9a:	00b3      	lsls	r3, r6, #2
 8012b9c:	58eb      	ldr	r3, [r5, r3]
 8012b9e:	4798      	blx	r3
 8012ba0:	3601      	adds	r6, #1
 8012ba2:	e7f2      	b.n	8012b8a <__libc_init_array+0x1e>
 8012ba4:	0801adb4 	.word	0x0801adb4
 8012ba8:	0801adb4 	.word	0x0801adb4
 8012bac:	0801adb4 	.word	0x0801adb4
 8012bb0:	0801adbc 	.word	0x0801adbc

08012bb4 <__locale_ctype_ptr_l>:
 8012bb4:	30ec      	adds	r0, #236	; 0xec
 8012bb6:	6800      	ldr	r0, [r0, #0]
 8012bb8:	4770      	bx	lr
	...

08012bbc <__locale_ctype_ptr>:
 8012bbc:	4b04      	ldr	r3, [pc, #16]	; (8012bd0 <__locale_ctype_ptr+0x14>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d100      	bne.n	8012bc8 <__locale_ctype_ptr+0xc>
 8012bc6:	4b03      	ldr	r3, [pc, #12]	; (8012bd4 <__locale_ctype_ptr+0x18>)
 8012bc8:	33ec      	adds	r3, #236	; 0xec
 8012bca:	6818      	ldr	r0, [r3, #0]
 8012bcc:	4770      	bx	lr
 8012bce:	46c0      	nop			; (mov r8, r8)
 8012bd0:	200000d0 	.word	0x200000d0
 8012bd4:	20000500 	.word	0x20000500

08012bd8 <malloc>:
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	4b03      	ldr	r3, [pc, #12]	; (8012be8 <malloc+0x10>)
 8012bdc:	0001      	movs	r1, r0
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	f000 f80e 	bl	8012c00 <_malloc_r>
 8012be4:	bd10      	pop	{r4, pc}
 8012be6:	46c0      	nop			; (mov r8, r8)
 8012be8:	200000d0 	.word	0x200000d0

08012bec <free>:
 8012bec:	b510      	push	{r4, lr}
 8012bee:	4b03      	ldr	r3, [pc, #12]	; (8012bfc <free+0x10>)
 8012bf0:	0001      	movs	r1, r0
 8012bf2:	6818      	ldr	r0, [r3, #0]
 8012bf4:	f003 fd10 	bl	8016618 <_free_r>
 8012bf8:	bd10      	pop	{r4, pc}
 8012bfa:	46c0      	nop			; (mov r8, r8)
 8012bfc:	200000d0 	.word	0x200000d0

08012c00 <_malloc_r>:
 8012c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c02:	000d      	movs	r5, r1
 8012c04:	b085      	sub	sp, #20
 8012c06:	350b      	adds	r5, #11
 8012c08:	9001      	str	r0, [sp, #4]
 8012c0a:	2d16      	cmp	r5, #22
 8012c0c:	d908      	bls.n	8012c20 <_malloc_r+0x20>
 8012c0e:	2307      	movs	r3, #7
 8012c10:	439d      	bics	r5, r3
 8012c12:	d506      	bpl.n	8012c22 <_malloc_r+0x22>
 8012c14:	230c      	movs	r3, #12
 8012c16:	9a01      	ldr	r2, [sp, #4]
 8012c18:	6013      	str	r3, [r2, #0]
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	b005      	add	sp, #20
 8012c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c20:	2510      	movs	r5, #16
 8012c22:	428d      	cmp	r5, r1
 8012c24:	d3f6      	bcc.n	8012c14 <_malloc_r+0x14>
 8012c26:	9801      	ldr	r0, [sp, #4]
 8012c28:	f000 fa34 	bl	8013094 <__malloc_lock>
 8012c2c:	23f8      	movs	r3, #248	; 0xf8
 8012c2e:	33ff      	adds	r3, #255	; 0xff
 8012c30:	4ac4      	ldr	r2, [pc, #784]	; (8012f44 <_malloc_r+0x344>)
 8012c32:	429d      	cmp	r5, r3
 8012c34:	d820      	bhi.n	8012c78 <_malloc_r+0x78>
 8012c36:	0029      	movs	r1, r5
 8012c38:	3108      	adds	r1, #8
 8012c3a:	1851      	adds	r1, r2, r1
 8012c3c:	0008      	movs	r0, r1
 8012c3e:	684c      	ldr	r4, [r1, #4]
 8012c40:	3808      	subs	r0, #8
 8012c42:	08eb      	lsrs	r3, r5, #3
 8012c44:	4284      	cmp	r4, r0
 8012c46:	d104      	bne.n	8012c52 <_malloc_r+0x52>
 8012c48:	68cc      	ldr	r4, [r1, #12]
 8012c4a:	3302      	adds	r3, #2
 8012c4c:	469c      	mov	ip, r3
 8012c4e:	42a1      	cmp	r1, r4
 8012c50:	d02a      	beq.n	8012ca8 <_malloc_r+0xa8>
 8012c52:	2303      	movs	r3, #3
 8012c54:	6862      	ldr	r2, [r4, #4]
 8012c56:	68a1      	ldr	r1, [r4, #8]
 8012c58:	439a      	bics	r2, r3
 8012c5a:	0013      	movs	r3, r2
 8012c5c:	68e2      	ldr	r2, [r4, #12]
 8012c5e:	18e3      	adds	r3, r4, r3
 8012c60:	60ca      	str	r2, [r1, #12]
 8012c62:	6091      	str	r1, [r2, #8]
 8012c64:	2201      	movs	r2, #1
 8012c66:	6859      	ldr	r1, [r3, #4]
 8012c68:	430a      	orrs	r2, r1
 8012c6a:	605a      	str	r2, [r3, #4]
 8012c6c:	9801      	ldr	r0, [sp, #4]
 8012c6e:	f000 fa19 	bl	80130a4 <__malloc_unlock>
 8012c72:	0020      	movs	r0, r4
 8012c74:	3008      	adds	r0, #8
 8012c76:	e7d1      	b.n	8012c1c <_malloc_r+0x1c>
 8012c78:	0a69      	lsrs	r1, r5, #9
 8012c7a:	233f      	movs	r3, #63	; 0x3f
 8012c7c:	2900      	cmp	r1, #0
 8012c7e:	d003      	beq.n	8012c88 <_malloc_r+0x88>
 8012c80:	2904      	cmp	r1, #4
 8012c82:	d828      	bhi.n	8012cd6 <_malloc_r+0xd6>
 8012c84:	09ab      	lsrs	r3, r5, #6
 8012c86:	3338      	adds	r3, #56	; 0x38
 8012c88:	2103      	movs	r1, #3
 8012c8a:	468c      	mov	ip, r1
 8012c8c:	00d8      	lsls	r0, r3, #3
 8012c8e:	1880      	adds	r0, r0, r2
 8012c90:	68c4      	ldr	r4, [r0, #12]
 8012c92:	4284      	cmp	r4, r0
 8012c94:	d006      	beq.n	8012ca4 <_malloc_r+0xa4>
 8012c96:	4666      	mov	r6, ip
 8012c98:	6861      	ldr	r1, [r4, #4]
 8012c9a:	43b1      	bics	r1, r6
 8012c9c:	1b4f      	subs	r7, r1, r5
 8012c9e:	2f0f      	cmp	r7, #15
 8012ca0:	dd31      	ble.n	8012d06 <_malloc_r+0x106>
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	469c      	mov	ip, r3
 8012ca8:	6914      	ldr	r4, [r2, #16]
 8012caa:	49a7      	ldr	r1, [pc, #668]	; (8012f48 <_malloc_r+0x348>)
 8012cac:	428c      	cmp	r4, r1
 8012cae:	d055      	beq.n	8012d5c <_malloc_r+0x15c>
 8012cb0:	2303      	movs	r3, #3
 8012cb2:	6860      	ldr	r0, [r4, #4]
 8012cb4:	4398      	bics	r0, r3
 8012cb6:	0003      	movs	r3, r0
 8012cb8:	1b46      	subs	r6, r0, r5
 8012cba:	2e0f      	cmp	r6, #15
 8012cbc:	dd31      	ble.n	8012d22 <_malloc_r+0x122>
 8012cbe:	2701      	movs	r7, #1
 8012cc0:	1960      	adds	r0, r4, r5
 8012cc2:	433d      	orrs	r5, r7
 8012cc4:	4337      	orrs	r7, r6
 8012cc6:	6065      	str	r5, [r4, #4]
 8012cc8:	6150      	str	r0, [r2, #20]
 8012cca:	6110      	str	r0, [r2, #16]
 8012ccc:	60c1      	str	r1, [r0, #12]
 8012cce:	6081      	str	r1, [r0, #8]
 8012cd0:	6047      	str	r7, [r0, #4]
 8012cd2:	50e6      	str	r6, [r4, r3]
 8012cd4:	e7ca      	b.n	8012c6c <_malloc_r+0x6c>
 8012cd6:	2914      	cmp	r1, #20
 8012cd8:	d802      	bhi.n	8012ce0 <_malloc_r+0xe0>
 8012cda:	000b      	movs	r3, r1
 8012cdc:	335b      	adds	r3, #91	; 0x5b
 8012cde:	e7d3      	b.n	8012c88 <_malloc_r+0x88>
 8012ce0:	2954      	cmp	r1, #84	; 0x54
 8012ce2:	d802      	bhi.n	8012cea <_malloc_r+0xea>
 8012ce4:	0b2b      	lsrs	r3, r5, #12
 8012ce6:	336e      	adds	r3, #110	; 0x6e
 8012ce8:	e7ce      	b.n	8012c88 <_malloc_r+0x88>
 8012cea:	23aa      	movs	r3, #170	; 0xaa
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	4299      	cmp	r1, r3
 8012cf0:	d802      	bhi.n	8012cf8 <_malloc_r+0xf8>
 8012cf2:	0beb      	lsrs	r3, r5, #15
 8012cf4:	3377      	adds	r3, #119	; 0x77
 8012cf6:	e7c7      	b.n	8012c88 <_malloc_r+0x88>
 8012cf8:	4894      	ldr	r0, [pc, #592]	; (8012f4c <_malloc_r+0x34c>)
 8012cfa:	237e      	movs	r3, #126	; 0x7e
 8012cfc:	4281      	cmp	r1, r0
 8012cfe:	d8c3      	bhi.n	8012c88 <_malloc_r+0x88>
 8012d00:	0cab      	lsrs	r3, r5, #18
 8012d02:	337c      	adds	r3, #124	; 0x7c
 8012d04:	e7c0      	b.n	8012c88 <_malloc_r+0x88>
 8012d06:	68e6      	ldr	r6, [r4, #12]
 8012d08:	2f00      	cmp	r7, #0
 8012d0a:	db08      	blt.n	8012d1e <_malloc_r+0x11e>
 8012d0c:	68a3      	ldr	r3, [r4, #8]
 8012d0e:	1861      	adds	r1, r4, r1
 8012d10:	60de      	str	r6, [r3, #12]
 8012d12:	60b3      	str	r3, [r6, #8]
 8012d14:	2301      	movs	r3, #1
 8012d16:	684a      	ldr	r2, [r1, #4]
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	604b      	str	r3, [r1, #4]
 8012d1c:	e7a6      	b.n	8012c6c <_malloc_r+0x6c>
 8012d1e:	0034      	movs	r4, r6
 8012d20:	e7b7      	b.n	8012c92 <_malloc_r+0x92>
 8012d22:	6151      	str	r1, [r2, #20]
 8012d24:	6111      	str	r1, [r2, #16]
 8012d26:	2e00      	cmp	r6, #0
 8012d28:	db05      	blt.n	8012d36 <_malloc_r+0x136>
 8012d2a:	2101      	movs	r1, #1
 8012d2c:	1823      	adds	r3, r4, r0
 8012d2e:	685a      	ldr	r2, [r3, #4]
 8012d30:	4311      	orrs	r1, r2
 8012d32:	6059      	str	r1, [r3, #4]
 8012d34:	e79a      	b.n	8012c6c <_malloc_r+0x6c>
 8012d36:	4986      	ldr	r1, [pc, #536]	; (8012f50 <_malloc_r+0x350>)
 8012d38:	6857      	ldr	r7, [r2, #4]
 8012d3a:	4288      	cmp	r0, r1
 8012d3c:	d900      	bls.n	8012d40 <_malloc_r+0x140>
 8012d3e:	e090      	b.n	8012e62 <_malloc_r+0x262>
 8012d40:	08c3      	lsrs	r3, r0, #3
 8012d42:	39ff      	subs	r1, #255	; 0xff
 8012d44:	1098      	asrs	r0, r3, #2
 8012d46:	39ff      	subs	r1, #255	; 0xff
 8012d48:	4081      	lsls	r1, r0
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	4339      	orrs	r1, r7
 8012d4e:	6051      	str	r1, [r2, #4]
 8012d50:	189a      	adds	r2, r3, r2
 8012d52:	6893      	ldr	r3, [r2, #8]
 8012d54:	60e2      	str	r2, [r4, #12]
 8012d56:	60a3      	str	r3, [r4, #8]
 8012d58:	6094      	str	r4, [r2, #8]
 8012d5a:	60dc      	str	r4, [r3, #12]
 8012d5c:	4663      	mov	r3, ip
 8012d5e:	2201      	movs	r2, #1
 8012d60:	4978      	ldr	r1, [pc, #480]	; (8012f44 <_malloc_r+0x344>)
 8012d62:	109b      	asrs	r3, r3, #2
 8012d64:	6848      	ldr	r0, [r1, #4]
 8012d66:	409a      	lsls	r2, r3
 8012d68:	4290      	cmp	r0, r2
 8012d6a:	d32d      	bcc.n	8012dc8 <_malloc_r+0x1c8>
 8012d6c:	4202      	tst	r2, r0
 8012d6e:	d109      	bne.n	8012d84 <_malloc_r+0x184>
 8012d70:	2303      	movs	r3, #3
 8012d72:	4664      	mov	r4, ip
 8012d74:	439c      	bics	r4, r3
 8012d76:	0023      	movs	r3, r4
 8012d78:	3304      	adds	r3, #4
 8012d7a:	469c      	mov	ip, r3
 8012d7c:	0052      	lsls	r2, r2, #1
 8012d7e:	4202      	tst	r2, r0
 8012d80:	d100      	bne.n	8012d84 <_malloc_r+0x184>
 8012d82:	e0a4      	b.n	8012ece <_malloc_r+0x2ce>
 8012d84:	4663      	mov	r3, ip
 8012d86:	00db      	lsls	r3, r3, #3
 8012d88:	18cb      	adds	r3, r1, r3
 8012d8a:	9303      	str	r3, [sp, #12]
 8012d8c:	001f      	movs	r7, r3
 8012d8e:	4663      	mov	r3, ip
 8012d90:	9302      	str	r3, [sp, #8]
 8012d92:	68fc      	ldr	r4, [r7, #12]
 8012d94:	42bc      	cmp	r4, r7
 8012d96:	d000      	beq.n	8012d9a <_malloc_r+0x19a>
 8012d98:	e09c      	b.n	8012ed4 <_malloc_r+0x2d4>
 8012d9a:	2003      	movs	r0, #3
 8012d9c:	9b02      	ldr	r3, [sp, #8]
 8012d9e:	3708      	adds	r7, #8
 8012da0:	3301      	adds	r3, #1
 8012da2:	9302      	str	r3, [sp, #8]
 8012da4:	4203      	tst	r3, r0
 8012da6:	d1f4      	bne.n	8012d92 <_malloc_r+0x192>
 8012da8:	4663      	mov	r3, ip
 8012daa:	2003      	movs	r0, #3
 8012dac:	4203      	tst	r3, r0
 8012dae:	d000      	beq.n	8012db2 <_malloc_r+0x1b2>
 8012db0:	e0b3      	b.n	8012f1a <_malloc_r+0x31a>
 8012db2:	684b      	ldr	r3, [r1, #4]
 8012db4:	4393      	bics	r3, r2
 8012db6:	604b      	str	r3, [r1, #4]
 8012db8:	4b62      	ldr	r3, [pc, #392]	; (8012f44 <_malloc_r+0x344>)
 8012dba:	0052      	lsls	r2, r2, #1
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d302      	bcc.n	8012dc8 <_malloc_r+0x1c8>
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	d000      	beq.n	8012dc8 <_malloc_r+0x1c8>
 8012dc6:	e0b9      	b.n	8012f3c <_malloc_r+0x33c>
 8012dc8:	2303      	movs	r3, #3
 8012dca:	688f      	ldr	r7, [r1, #8]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	439a      	bics	r2, r3
 8012dd0:	9202      	str	r2, [sp, #8]
 8012dd2:	42aa      	cmp	r2, r5
 8012dd4:	d303      	bcc.n	8012dde <_malloc_r+0x1de>
 8012dd6:	1b52      	subs	r2, r2, r5
 8012dd8:	2a0f      	cmp	r2, #15
 8012dda:	dd00      	ble.n	8012dde <_malloc_r+0x1de>
 8012ddc:	e116      	b.n	801300c <_malloc_r+0x40c>
 8012dde:	4b5d      	ldr	r3, [pc, #372]	; (8012f54 <_malloc_r+0x354>)
 8012de0:	2008      	movs	r0, #8
 8012de2:	681e      	ldr	r6, [r3, #0]
 8012de4:	f002 fd26 	bl	8015834 <sysconf>
 8012de8:	4b5b      	ldr	r3, [pc, #364]	; (8012f58 <_malloc_r+0x358>)
 8012dea:	3610      	adds	r6, #16
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	1976      	adds	r6, r6, r5
 8012df0:	9003      	str	r0, [sp, #12]
 8012df2:	3301      	adds	r3, #1
 8012df4:	d003      	beq.n	8012dfe <_malloc_r+0x1fe>
 8012df6:	3e01      	subs	r6, #1
 8012df8:	1836      	adds	r6, r6, r0
 8012dfa:	4243      	negs	r3, r0
 8012dfc:	401e      	ands	r6, r3
 8012dfe:	0031      	movs	r1, r6
 8012e00:	9801      	ldr	r0, [sp, #4]
 8012e02:	f000 fb27 	bl	8013454 <_sbrk_r>
 8012e06:	0004      	movs	r4, r0
 8012e08:	1c43      	adds	r3, r0, #1
 8012e0a:	d100      	bne.n	8012e0e <_malloc_r+0x20e>
 8012e0c:	e0d6      	b.n	8012fbc <_malloc_r+0x3bc>
 8012e0e:	9b02      	ldr	r3, [sp, #8]
 8012e10:	18fb      	adds	r3, r7, r3
 8012e12:	4283      	cmp	r3, r0
 8012e14:	d903      	bls.n	8012e1e <_malloc_r+0x21e>
 8012e16:	4a4b      	ldr	r2, [pc, #300]	; (8012f44 <_malloc_r+0x344>)
 8012e18:	4297      	cmp	r7, r2
 8012e1a:	d000      	beq.n	8012e1e <_malloc_r+0x21e>
 8012e1c:	e0ce      	b.n	8012fbc <_malloc_r+0x3bc>
 8012e1e:	494f      	ldr	r1, [pc, #316]	; (8012f5c <_malloc_r+0x35c>)
 8012e20:	680a      	ldr	r2, [r1, #0]
 8012e22:	18b2      	adds	r2, r6, r2
 8012e24:	600a      	str	r2, [r1, #0]
 8012e26:	9903      	ldr	r1, [sp, #12]
 8012e28:	4694      	mov	ip, r2
 8012e2a:	1e48      	subs	r0, r1, #1
 8012e2c:	42a3      	cmp	r3, r4
 8012e2e:	d000      	beq.n	8012e32 <_malloc_r+0x232>
 8012e30:	e09a      	b.n	8012f68 <_malloc_r+0x368>
 8012e32:	4203      	tst	r3, r0
 8012e34:	d000      	beq.n	8012e38 <_malloc_r+0x238>
 8012e36:	e097      	b.n	8012f68 <_malloc_r+0x368>
 8012e38:	9a02      	ldr	r2, [sp, #8]
 8012e3a:	4b42      	ldr	r3, [pc, #264]	; (8012f44 <_malloc_r+0x344>)
 8012e3c:	1992      	adds	r2, r2, r6
 8012e3e:	2601      	movs	r6, #1
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	4316      	orrs	r6, r2
 8012e44:	605e      	str	r6, [r3, #4]
 8012e46:	4b45      	ldr	r3, [pc, #276]	; (8012f5c <_malloc_r+0x35c>)
 8012e48:	4a45      	ldr	r2, [pc, #276]	; (8012f60 <_malloc_r+0x360>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	6811      	ldr	r1, [r2, #0]
 8012e4e:	428b      	cmp	r3, r1
 8012e50:	d900      	bls.n	8012e54 <_malloc_r+0x254>
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	4a43      	ldr	r2, [pc, #268]	; (8012f64 <_malloc_r+0x364>)
 8012e56:	6811      	ldr	r1, [r2, #0]
 8012e58:	428b      	cmp	r3, r1
 8012e5a:	d800      	bhi.n	8012e5e <_malloc_r+0x25e>
 8012e5c:	e0ae      	b.n	8012fbc <_malloc_r+0x3bc>
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	e0ac      	b.n	8012fbc <_malloc_r+0x3bc>
 8012e62:	0a40      	lsrs	r0, r0, #9
 8012e64:	2804      	cmp	r0, #4
 8012e66:	d810      	bhi.n	8012e8a <_malloc_r+0x28a>
 8012e68:	0999      	lsrs	r1, r3, #6
 8012e6a:	3138      	adds	r1, #56	; 0x38
 8012e6c:	00ce      	lsls	r6, r1, #3
 8012e6e:	18b6      	adds	r6, r6, r2
 8012e70:	68b0      	ldr	r0, [r6, #8]
 8012e72:	4286      	cmp	r6, r0
 8012e74:	d124      	bne.n	8012ec0 <_malloc_r+0x2c0>
 8012e76:	2301      	movs	r3, #1
 8012e78:	1089      	asrs	r1, r1, #2
 8012e7a:	408b      	lsls	r3, r1
 8012e7c:	433b      	orrs	r3, r7
 8012e7e:	6053      	str	r3, [r2, #4]
 8012e80:	60e6      	str	r6, [r4, #12]
 8012e82:	60a0      	str	r0, [r4, #8]
 8012e84:	60b4      	str	r4, [r6, #8]
 8012e86:	60c4      	str	r4, [r0, #12]
 8012e88:	e768      	b.n	8012d5c <_malloc_r+0x15c>
 8012e8a:	2814      	cmp	r0, #20
 8012e8c:	d802      	bhi.n	8012e94 <_malloc_r+0x294>
 8012e8e:	0001      	movs	r1, r0
 8012e90:	315b      	adds	r1, #91	; 0x5b
 8012e92:	e7eb      	b.n	8012e6c <_malloc_r+0x26c>
 8012e94:	2854      	cmp	r0, #84	; 0x54
 8012e96:	d802      	bhi.n	8012e9e <_malloc_r+0x29e>
 8012e98:	0b19      	lsrs	r1, r3, #12
 8012e9a:	316e      	adds	r1, #110	; 0x6e
 8012e9c:	e7e6      	b.n	8012e6c <_malloc_r+0x26c>
 8012e9e:	21aa      	movs	r1, #170	; 0xaa
 8012ea0:	0049      	lsls	r1, r1, #1
 8012ea2:	4288      	cmp	r0, r1
 8012ea4:	d802      	bhi.n	8012eac <_malloc_r+0x2ac>
 8012ea6:	0bd9      	lsrs	r1, r3, #15
 8012ea8:	3177      	adds	r1, #119	; 0x77
 8012eaa:	e7df      	b.n	8012e6c <_malloc_r+0x26c>
 8012eac:	4e27      	ldr	r6, [pc, #156]	; (8012f4c <_malloc_r+0x34c>)
 8012eae:	217e      	movs	r1, #126	; 0x7e
 8012eb0:	42b0      	cmp	r0, r6
 8012eb2:	d8db      	bhi.n	8012e6c <_malloc_r+0x26c>
 8012eb4:	0c99      	lsrs	r1, r3, #18
 8012eb6:	317c      	adds	r1, #124	; 0x7c
 8012eb8:	e7d8      	b.n	8012e6c <_malloc_r+0x26c>
 8012eba:	6880      	ldr	r0, [r0, #8]
 8012ebc:	4286      	cmp	r6, r0
 8012ebe:	d004      	beq.n	8012eca <_malloc_r+0x2ca>
 8012ec0:	2103      	movs	r1, #3
 8012ec2:	6842      	ldr	r2, [r0, #4]
 8012ec4:	438a      	bics	r2, r1
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d8f7      	bhi.n	8012eba <_malloc_r+0x2ba>
 8012eca:	68c6      	ldr	r6, [r0, #12]
 8012ecc:	e7d8      	b.n	8012e80 <_malloc_r+0x280>
 8012ece:	2304      	movs	r3, #4
 8012ed0:	449c      	add	ip, r3
 8012ed2:	e753      	b.n	8012d7c <_malloc_r+0x17c>
 8012ed4:	2003      	movs	r0, #3
 8012ed6:	6863      	ldr	r3, [r4, #4]
 8012ed8:	4383      	bics	r3, r0
 8012eda:	1b5e      	subs	r6, r3, r5
 8012edc:	68e0      	ldr	r0, [r4, #12]
 8012ede:	2e0f      	cmp	r6, #15
 8012ee0:	dd0e      	ble.n	8012f00 <_malloc_r+0x300>
 8012ee2:	2701      	movs	r7, #1
 8012ee4:	1962      	adds	r2, r4, r5
 8012ee6:	433d      	orrs	r5, r7
 8012ee8:	6065      	str	r5, [r4, #4]
 8012eea:	68a5      	ldr	r5, [r4, #8]
 8012eec:	4337      	orrs	r7, r6
 8012eee:	60e8      	str	r0, [r5, #12]
 8012ef0:	6085      	str	r5, [r0, #8]
 8012ef2:	614a      	str	r2, [r1, #20]
 8012ef4:	610a      	str	r2, [r1, #16]
 8012ef6:	4914      	ldr	r1, [pc, #80]	; (8012f48 <_malloc_r+0x348>)
 8012ef8:	6057      	str	r7, [r2, #4]
 8012efa:	60d1      	str	r1, [r2, #12]
 8012efc:	6091      	str	r1, [r2, #8]
 8012efe:	e6e8      	b.n	8012cd2 <_malloc_r+0xd2>
 8012f00:	2e00      	cmp	r6, #0
 8012f02:	db08      	blt.n	8012f16 <_malloc_r+0x316>
 8012f04:	2201      	movs	r2, #1
 8012f06:	18e3      	adds	r3, r4, r3
 8012f08:	6859      	ldr	r1, [r3, #4]
 8012f0a:	430a      	orrs	r2, r1
 8012f0c:	605a      	str	r2, [r3, #4]
 8012f0e:	68a3      	ldr	r3, [r4, #8]
 8012f10:	60d8      	str	r0, [r3, #12]
 8012f12:	6083      	str	r3, [r0, #8]
 8012f14:	e6aa      	b.n	8012c6c <_malloc_r+0x6c>
 8012f16:	0004      	movs	r4, r0
 8012f18:	e73c      	b.n	8012d94 <_malloc_r+0x194>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	425b      	negs	r3, r3
 8012f1e:	449c      	add	ip, r3
 8012f20:	9b03      	ldr	r3, [sp, #12]
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	3b08      	subs	r3, #8
 8012f26:	9003      	str	r0, [sp, #12]
 8012f28:	4298      	cmp	r0, r3
 8012f2a:	d100      	bne.n	8012f2e <_malloc_r+0x32e>
 8012f2c:	e73c      	b.n	8012da8 <_malloc_r+0x1a8>
 8012f2e:	e743      	b.n	8012db8 <_malloc_r+0x1b8>
 8012f30:	2004      	movs	r0, #4
 8012f32:	0052      	lsls	r2, r2, #1
 8012f34:	4484      	add	ip, r0
 8012f36:	421a      	tst	r2, r3
 8012f38:	d0fa      	beq.n	8012f30 <_malloc_r+0x330>
 8012f3a:	e723      	b.n	8012d84 <_malloc_r+0x184>
 8012f3c:	9802      	ldr	r0, [sp, #8]
 8012f3e:	4684      	mov	ip, r0
 8012f40:	e7f9      	b.n	8012f36 <_malloc_r+0x336>
 8012f42:	46c0      	nop			; (mov r8, r8)
 8012f44:	2000066c 	.word	0x2000066c
 8012f48:	20000674 	.word	0x20000674
 8012f4c:	00000554 	.word	0x00000554
 8012f50:	000001ff 	.word	0x000001ff
 8012f54:	200067d4 	.word	0x200067d4
 8012f58:	20000a74 	.word	0x20000a74
 8012f5c:	200067a4 	.word	0x200067a4
 8012f60:	200067cc 	.word	0x200067cc
 8012f64:	200067d0 	.word	0x200067d0
 8012f68:	492e      	ldr	r1, [pc, #184]	; (8013024 <_malloc_r+0x424>)
 8012f6a:	680a      	ldr	r2, [r1, #0]
 8012f6c:	3201      	adds	r2, #1
 8012f6e:	d133      	bne.n	8012fd8 <_malloc_r+0x3d8>
 8012f70:	600c      	str	r4, [r1, #0]
 8012f72:	2307      	movs	r3, #7
 8012f74:	4023      	ands	r3, r4
 8012f76:	d002      	beq.n	8012f7e <_malloc_r+0x37e>
 8012f78:	2208      	movs	r2, #8
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	18e4      	adds	r4, r4, r3
 8012f7e:	9a03      	ldr	r2, [sp, #12]
 8012f80:	19a6      	adds	r6, r4, r6
 8012f82:	18d3      	adds	r3, r2, r3
 8012f84:	4006      	ands	r6, r0
 8012f86:	1b9e      	subs	r6, r3, r6
 8012f88:	0031      	movs	r1, r6
 8012f8a:	9801      	ldr	r0, [sp, #4]
 8012f8c:	f000 fa62 	bl	8013454 <_sbrk_r>
 8012f90:	1c43      	adds	r3, r0, #1
 8012f92:	d101      	bne.n	8012f98 <_malloc_r+0x398>
 8012f94:	0020      	movs	r0, r4
 8012f96:	2600      	movs	r6, #0
 8012f98:	4a23      	ldr	r2, [pc, #140]	; (8013028 <_malloc_r+0x428>)
 8012f9a:	1b00      	subs	r0, r0, r4
 8012f9c:	6813      	ldr	r3, [r2, #0]
 8012f9e:	199b      	adds	r3, r3, r6
 8012fa0:	6013      	str	r3, [r2, #0]
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	4a21      	ldr	r2, [pc, #132]	; (801302c <_malloc_r+0x42c>)
 8012fa6:	1986      	adds	r6, r0, r6
 8012fa8:	431e      	orrs	r6, r3
 8012faa:	6094      	str	r4, [r2, #8]
 8012fac:	6066      	str	r6, [r4, #4]
 8012fae:	4297      	cmp	r7, r2
 8012fb0:	d100      	bne.n	8012fb4 <_malloc_r+0x3b4>
 8012fb2:	e748      	b.n	8012e46 <_malloc_r+0x246>
 8012fb4:	9a02      	ldr	r2, [sp, #8]
 8012fb6:	2a0f      	cmp	r2, #15
 8012fb8:	d813      	bhi.n	8012fe2 <_malloc_r+0x3e2>
 8012fba:	6063      	str	r3, [r4, #4]
 8012fbc:	2203      	movs	r2, #3
 8012fbe:	4b1b      	ldr	r3, [pc, #108]	; (801302c <_malloc_r+0x42c>)
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	4393      	bics	r3, r2
 8012fc6:	1b5a      	subs	r2, r3, r5
 8012fc8:	42ab      	cmp	r3, r5
 8012fca:	d301      	bcc.n	8012fd0 <_malloc_r+0x3d0>
 8012fcc:	2a0f      	cmp	r2, #15
 8012fce:	dc1d      	bgt.n	801300c <_malloc_r+0x40c>
 8012fd0:	9801      	ldr	r0, [sp, #4]
 8012fd2:	f000 f867 	bl	80130a4 <__malloc_unlock>
 8012fd6:	e620      	b.n	8012c1a <_malloc_r+0x1a>
 8012fd8:	1ae3      	subs	r3, r4, r3
 8012fda:	4a13      	ldr	r2, [pc, #76]	; (8013028 <_malloc_r+0x428>)
 8012fdc:	4463      	add	r3, ip
 8012fde:	6013      	str	r3, [r2, #0]
 8012fe0:	e7c7      	b.n	8012f72 <_malloc_r+0x372>
 8012fe2:	2207      	movs	r2, #7
 8012fe4:	9e02      	ldr	r6, [sp, #8]
 8012fe6:	3e0c      	subs	r6, #12
 8012fe8:	4396      	bics	r6, r2
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	4013      	ands	r3, r2
 8012fee:	2205      	movs	r2, #5
 8012ff0:	4333      	orrs	r3, r6
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	19bb      	adds	r3, r7, r6
 8012ff6:	605a      	str	r2, [r3, #4]
 8012ff8:	609a      	str	r2, [r3, #8]
 8012ffa:	2e0f      	cmp	r6, #15
 8012ffc:	d800      	bhi.n	8013000 <_malloc_r+0x400>
 8012ffe:	e722      	b.n	8012e46 <_malloc_r+0x246>
 8013000:	0039      	movs	r1, r7
 8013002:	9801      	ldr	r0, [sp, #4]
 8013004:	3108      	adds	r1, #8
 8013006:	f003 fb07 	bl	8016618 <_free_r>
 801300a:	e71c      	b.n	8012e46 <_malloc_r+0x246>
 801300c:	2301      	movs	r3, #1
 801300e:	0018      	movs	r0, r3
 8013010:	4906      	ldr	r1, [pc, #24]	; (801302c <_malloc_r+0x42c>)
 8013012:	4328      	orrs	r0, r5
 8013014:	688c      	ldr	r4, [r1, #8]
 8013016:	4313      	orrs	r3, r2
 8013018:	1965      	adds	r5, r4, r5
 801301a:	6060      	str	r0, [r4, #4]
 801301c:	608d      	str	r5, [r1, #8]
 801301e:	606b      	str	r3, [r5, #4]
 8013020:	e624      	b.n	8012c6c <_malloc_r+0x6c>
 8013022:	46c0      	nop			; (mov r8, r8)
 8013024:	20000a74 	.word	0x20000a74
 8013028:	200067a4 	.word	0x200067a4
 801302c:	2000066c 	.word	0x2000066c

08013030 <__ascii_mbtowc>:
 8013030:	b082      	sub	sp, #8
 8013032:	2900      	cmp	r1, #0
 8013034:	d100      	bne.n	8013038 <__ascii_mbtowc+0x8>
 8013036:	a901      	add	r1, sp, #4
 8013038:	1e10      	subs	r0, r2, #0
 801303a:	d006      	beq.n	801304a <__ascii_mbtowc+0x1a>
 801303c:	2b00      	cmp	r3, #0
 801303e:	d006      	beq.n	801304e <__ascii_mbtowc+0x1e>
 8013040:	7813      	ldrb	r3, [r2, #0]
 8013042:	600b      	str	r3, [r1, #0]
 8013044:	7810      	ldrb	r0, [r2, #0]
 8013046:	1e43      	subs	r3, r0, #1
 8013048:	4198      	sbcs	r0, r3
 801304a:	b002      	add	sp, #8
 801304c:	4770      	bx	lr
 801304e:	2002      	movs	r0, #2
 8013050:	4240      	negs	r0, r0
 8013052:	e7fa      	b.n	801304a <__ascii_mbtowc+0x1a>

08013054 <memcmp>:
 8013054:	b530      	push	{r4, r5, lr}
 8013056:	2400      	movs	r4, #0
 8013058:	42a2      	cmp	r2, r4
 801305a:	d101      	bne.n	8013060 <memcmp+0xc>
 801305c:	2000      	movs	r0, #0
 801305e:	e005      	b.n	801306c <memcmp+0x18>
 8013060:	5d03      	ldrb	r3, [r0, r4]
 8013062:	1c65      	adds	r5, r4, #1
 8013064:	5d0c      	ldrb	r4, [r1, r4]
 8013066:	42a3      	cmp	r3, r4
 8013068:	d001      	beq.n	801306e <memcmp+0x1a>
 801306a:	1b18      	subs	r0, r3, r4
 801306c:	bd30      	pop	{r4, r5, pc}
 801306e:	002c      	movs	r4, r5
 8013070:	e7f2      	b.n	8013058 <memcmp+0x4>

08013072 <memcpy>:
 8013072:	2300      	movs	r3, #0
 8013074:	b510      	push	{r4, lr}
 8013076:	429a      	cmp	r2, r3
 8013078:	d100      	bne.n	801307c <memcpy+0xa>
 801307a:	bd10      	pop	{r4, pc}
 801307c:	5ccc      	ldrb	r4, [r1, r3]
 801307e:	54c4      	strb	r4, [r0, r3]
 8013080:	3301      	adds	r3, #1
 8013082:	e7f8      	b.n	8013076 <memcpy+0x4>

08013084 <memset>:
 8013084:	0003      	movs	r3, r0
 8013086:	1812      	adds	r2, r2, r0
 8013088:	4293      	cmp	r3, r2
 801308a:	d100      	bne.n	801308e <memset+0xa>
 801308c:	4770      	bx	lr
 801308e:	7019      	strb	r1, [r3, #0]
 8013090:	3301      	adds	r3, #1
 8013092:	e7f9      	b.n	8013088 <memset+0x4>

08013094 <__malloc_lock>:
 8013094:	b510      	push	{r4, lr}
 8013096:	4802      	ldr	r0, [pc, #8]	; (80130a0 <__malloc_lock+0xc>)
 8013098:	f003 feb2 	bl	8016e00 <__retarget_lock_acquire_recursive>
 801309c:	bd10      	pop	{r4, pc}
 801309e:	46c0      	nop			; (mov r8, r8)
 80130a0:	20006d9c 	.word	0x20006d9c

080130a4 <__malloc_unlock>:
 80130a4:	b510      	push	{r4, lr}
 80130a6:	4802      	ldr	r0, [pc, #8]	; (80130b0 <__malloc_unlock+0xc>)
 80130a8:	f003 feab 	bl	8016e02 <__retarget_lock_release_recursive>
 80130ac:	bd10      	pop	{r4, pc}
 80130ae:	46c0      	nop			; (mov r8, r8)
 80130b0:	20006d9c 	.word	0x20006d9c

080130b4 <rand>:
 80130b4:	4b09      	ldr	r3, [pc, #36]	; (80130dc <rand+0x28>)
 80130b6:	b510      	push	{r4, lr}
 80130b8:	681c      	ldr	r4, [r3, #0]
 80130ba:	4a09      	ldr	r2, [pc, #36]	; (80130e0 <rand+0x2c>)
 80130bc:	34a8      	adds	r4, #168	; 0xa8
 80130be:	6820      	ldr	r0, [r4, #0]
 80130c0:	6861      	ldr	r1, [r4, #4]
 80130c2:	4b08      	ldr	r3, [pc, #32]	; (80130e4 <rand+0x30>)
 80130c4:	f7ed fa52 	bl	800056c <__aeabi_lmul>
 80130c8:	2201      	movs	r2, #1
 80130ca:	2300      	movs	r3, #0
 80130cc:	1880      	adds	r0, r0, r2
 80130ce:	4159      	adcs	r1, r3
 80130d0:	6020      	str	r0, [r4, #0]
 80130d2:	6061      	str	r1, [r4, #4]
 80130d4:	0048      	lsls	r0, r1, #1
 80130d6:	0840      	lsrs	r0, r0, #1
 80130d8:	bd10      	pop	{r4, pc}
 80130da:	46c0      	nop			; (mov r8, r8)
 80130dc:	200000d0 	.word	0x200000d0
 80130e0:	4c957f2d 	.word	0x4c957f2d
 80130e4:	5851f42d 	.word	0x5851f42d

080130e8 <realloc>:
 80130e8:	b510      	push	{r4, lr}
 80130ea:	4b03      	ldr	r3, [pc, #12]	; (80130f8 <realloc+0x10>)
 80130ec:	000a      	movs	r2, r1
 80130ee:	0001      	movs	r1, r0
 80130f0:	6818      	ldr	r0, [r3, #0]
 80130f2:	f000 f803 	bl	80130fc <_realloc_r>
 80130f6:	bd10      	pop	{r4, pc}
 80130f8:	200000d0 	.word	0x200000d0

080130fc <_realloc_r>:
 80130fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130fe:	b087      	sub	sp, #28
 8013100:	9003      	str	r0, [sp, #12]
 8013102:	1e0c      	subs	r4, r1, #0
 8013104:	9205      	str	r2, [sp, #20]
 8013106:	d106      	bne.n	8013116 <_realloc_r+0x1a>
 8013108:	0011      	movs	r1, r2
 801310a:	f7ff fd79 	bl	8012c00 <_malloc_r>
 801310e:	0007      	movs	r7, r0
 8013110:	0038      	movs	r0, r7
 8013112:	b007      	add	sp, #28
 8013114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013116:	9803      	ldr	r0, [sp, #12]
 8013118:	f7ff ffbc 	bl	8013094 <__malloc_lock>
 801311c:	0023      	movs	r3, r4
 801311e:	3b08      	subs	r3, #8
 8013120:	685f      	ldr	r7, [r3, #4]
 8013122:	9302      	str	r3, [sp, #8]
 8013124:	003a      	movs	r2, r7
 8013126:	2303      	movs	r3, #3
 8013128:	9e05      	ldr	r6, [sp, #20]
 801312a:	439a      	bics	r2, r3
 801312c:	360b      	adds	r6, #11
 801312e:	9204      	str	r2, [sp, #16]
 8013130:	2e16      	cmp	r6, #22
 8013132:	d908      	bls.n	8013146 <_realloc_r+0x4a>
 8013134:	3304      	adds	r3, #4
 8013136:	439e      	bics	r6, r3
 8013138:	9601      	str	r6, [sp, #4]
 801313a:	d506      	bpl.n	801314a <_realloc_r+0x4e>
 801313c:	230c      	movs	r3, #12
 801313e:	9a03      	ldr	r2, [sp, #12]
 8013140:	2700      	movs	r7, #0
 8013142:	6013      	str	r3, [r2, #0]
 8013144:	e7e4      	b.n	8013110 <_realloc_r+0x14>
 8013146:	2310      	movs	r3, #16
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	9b01      	ldr	r3, [sp, #4]
 801314c:	9a05      	ldr	r2, [sp, #20]
 801314e:	4293      	cmp	r3, r2
 8013150:	d3f4      	bcc.n	801313c <_realloc_r+0x40>
 8013152:	9b01      	ldr	r3, [sp, #4]
 8013154:	9a04      	ldr	r2, [sp, #16]
 8013156:	4293      	cmp	r3, r2
 8013158:	dc00      	bgt.n	801315c <_realloc_r+0x60>
 801315a:	e16f      	b.n	801343c <_realloc_r+0x340>
 801315c:	9b02      	ldr	r3, [sp, #8]
 801315e:	48bc      	ldr	r0, [pc, #752]	; (8013450 <_realloc_r+0x354>)
 8013160:	189b      	adds	r3, r3, r2
 8013162:	6882      	ldr	r2, [r0, #8]
 8013164:	4694      	mov	ip, r2
 8013166:	685a      	ldr	r2, [r3, #4]
 8013168:	459c      	cmp	ip, r3
 801316a:	d006      	beq.n	801317a <_realloc_r+0x7e>
 801316c:	2501      	movs	r5, #1
 801316e:	0011      	movs	r1, r2
 8013170:	43a9      	bics	r1, r5
 8013172:	1859      	adds	r1, r3, r1
 8013174:	6849      	ldr	r1, [r1, #4]
 8013176:	4229      	tst	r1, r5
 8013178:	d146      	bne.n	8013208 <_realloc_r+0x10c>
 801317a:	2103      	movs	r1, #3
 801317c:	438a      	bics	r2, r1
 801317e:	9904      	ldr	r1, [sp, #16]
 8013180:	188e      	adds	r6, r1, r2
 8013182:	9901      	ldr	r1, [sp, #4]
 8013184:	459c      	cmp	ip, r3
 8013186:	d117      	bne.n	80131b8 <_realloc_r+0xbc>
 8013188:	3110      	adds	r1, #16
 801318a:	42b1      	cmp	r1, r6
 801318c:	dc3e      	bgt.n	801320c <_realloc_r+0x110>
 801318e:	9901      	ldr	r1, [sp, #4]
 8013190:	9b02      	ldr	r3, [sp, #8]
 8013192:	468c      	mov	ip, r1
 8013194:	4463      	add	r3, ip
 8013196:	6083      	str	r3, [r0, #8]
 8013198:	001a      	movs	r2, r3
 801319a:	1a73      	subs	r3, r6, r1
 801319c:	2601      	movs	r6, #1
 801319e:	4333      	orrs	r3, r6
 80131a0:	6053      	str	r3, [r2, #4]
 80131a2:	0023      	movs	r3, r4
 80131a4:	3b08      	subs	r3, #8
 80131a6:	685a      	ldr	r2, [r3, #4]
 80131a8:	9803      	ldr	r0, [sp, #12]
 80131aa:	4016      	ands	r6, r2
 80131ac:	430e      	orrs	r6, r1
 80131ae:	605e      	str	r6, [r3, #4]
 80131b0:	f7ff ff78 	bl	80130a4 <__malloc_unlock>
 80131b4:	0027      	movs	r7, r4
 80131b6:	e7ab      	b.n	8013110 <_realloc_r+0x14>
 80131b8:	42b1      	cmp	r1, r6
 80131ba:	dc27      	bgt.n	801320c <_realloc_r+0x110>
 80131bc:	68da      	ldr	r2, [r3, #12]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	60da      	str	r2, [r3, #12]
 80131c2:	6093      	str	r3, [r2, #8]
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	9a02      	ldr	r2, [sp, #8]
 80131c8:	1af4      	subs	r4, r6, r3
 80131ca:	9b02      	ldr	r3, [sp, #8]
 80131cc:	1992      	adds	r2, r2, r6
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	9304      	str	r3, [sp, #16]
 80131d2:	2301      	movs	r3, #1
 80131d4:	9804      	ldr	r0, [sp, #16]
 80131d6:	4018      	ands	r0, r3
 80131d8:	2c0f      	cmp	r4, #15
 80131da:	d800      	bhi.n	80131de <_realloc_r+0xe2>
 80131dc:	e130      	b.n	8013440 <_realloc_r+0x344>
 80131de:	9d01      	ldr	r5, [sp, #4]
 80131e0:	9902      	ldr	r1, [sp, #8]
 80131e2:	4328      	orrs	r0, r5
 80131e4:	1949      	adds	r1, r1, r5
 80131e6:	9d02      	ldr	r5, [sp, #8]
 80131e8:	431c      	orrs	r4, r3
 80131ea:	6068      	str	r0, [r5, #4]
 80131ec:	604c      	str	r4, [r1, #4]
 80131ee:	6850      	ldr	r0, [r2, #4]
 80131f0:	3108      	adds	r1, #8
 80131f2:	4303      	orrs	r3, r0
 80131f4:	6053      	str	r3, [r2, #4]
 80131f6:	9803      	ldr	r0, [sp, #12]
 80131f8:	f003 fa0e 	bl	8016618 <_free_r>
 80131fc:	9803      	ldr	r0, [sp, #12]
 80131fe:	f7ff ff51 	bl	80130a4 <__malloc_unlock>
 8013202:	9f02      	ldr	r7, [sp, #8]
 8013204:	3708      	adds	r7, #8
 8013206:	e783      	b.n	8013110 <_realloc_r+0x14>
 8013208:	2200      	movs	r2, #0
 801320a:	0013      	movs	r3, r2
 801320c:	07f9      	lsls	r1, r7, #31
 801320e:	d500      	bpl.n	8013212 <_realloc_r+0x116>
 8013210:	e0c6      	b.n	80133a0 <_realloc_r+0x2a4>
 8013212:	0021      	movs	r1, r4
 8013214:	3908      	subs	r1, #8
 8013216:	680d      	ldr	r5, [r1, #0]
 8013218:	9902      	ldr	r1, [sp, #8]
 801321a:	1b4d      	subs	r5, r1, r5
 801321c:	2103      	movs	r1, #3
 801321e:	686f      	ldr	r7, [r5, #4]
 8013220:	438f      	bics	r7, r1
 8013222:	9904      	ldr	r1, [sp, #16]
 8013224:	187f      	adds	r7, r7, r1
 8013226:	2b00      	cmp	r3, #0
 8013228:	d100      	bne.n	801322c <_realloc_r+0x130>
 801322a:	e084      	b.n	8013336 <_realloc_r+0x23a>
 801322c:	19d6      	adds	r6, r2, r7
 801322e:	459c      	cmp	ip, r3
 8013230:	d148      	bne.n	80132c4 <_realloc_r+0x1c8>
 8013232:	9b01      	ldr	r3, [sp, #4]
 8013234:	3310      	adds	r3, #16
 8013236:	42b3      	cmp	r3, r6
 8013238:	dc7d      	bgt.n	8013336 <_realloc_r+0x23a>
 801323a:	68aa      	ldr	r2, [r5, #8]
 801323c:	68eb      	ldr	r3, [r5, #12]
 801323e:	002f      	movs	r7, r5
 8013240:	60d3      	str	r3, [r2, #12]
 8013242:	609a      	str	r2, [r3, #8]
 8013244:	000a      	movs	r2, r1
 8013246:	3a04      	subs	r2, #4
 8013248:	3708      	adds	r7, #8
 801324a:	2a24      	cmp	r2, #36	; 0x24
 801324c:	d835      	bhi.n	80132ba <_realloc_r+0x1be>
 801324e:	003b      	movs	r3, r7
 8013250:	2a13      	cmp	r2, #19
 8013252:	d908      	bls.n	8013266 <_realloc_r+0x16a>
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	60ab      	str	r3, [r5, #8]
 8013258:	6863      	ldr	r3, [r4, #4]
 801325a:	60eb      	str	r3, [r5, #12]
 801325c:	2a1b      	cmp	r2, #27
 801325e:	d81a      	bhi.n	8013296 <_realloc_r+0x19a>
 8013260:	002b      	movs	r3, r5
 8013262:	3408      	adds	r4, #8
 8013264:	3310      	adds	r3, #16
 8013266:	6822      	ldr	r2, [r4, #0]
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	6862      	ldr	r2, [r4, #4]
 801326c:	605a      	str	r2, [r3, #4]
 801326e:	68a2      	ldr	r2, [r4, #8]
 8013270:	609a      	str	r2, [r3, #8]
 8013272:	9b01      	ldr	r3, [sp, #4]
 8013274:	18ea      	adds	r2, r5, r3
 8013276:	4b76      	ldr	r3, [pc, #472]	; (8013450 <_realloc_r+0x354>)
 8013278:	609a      	str	r2, [r3, #8]
 801327a:	9b01      	ldr	r3, [sp, #4]
 801327c:	1af3      	subs	r3, r6, r3
 801327e:	2601      	movs	r6, #1
 8013280:	4333      	orrs	r3, r6
 8013282:	6053      	str	r3, [r2, #4]
 8013284:	686b      	ldr	r3, [r5, #4]
 8013286:	401e      	ands	r6, r3
 8013288:	9b01      	ldr	r3, [sp, #4]
 801328a:	431e      	orrs	r6, r3
 801328c:	606e      	str	r6, [r5, #4]
 801328e:	9803      	ldr	r0, [sp, #12]
 8013290:	f7ff ff08 	bl	80130a4 <__malloc_unlock>
 8013294:	e73c      	b.n	8013110 <_realloc_r+0x14>
 8013296:	68a3      	ldr	r3, [r4, #8]
 8013298:	612b      	str	r3, [r5, #16]
 801329a:	68e3      	ldr	r3, [r4, #12]
 801329c:	616b      	str	r3, [r5, #20]
 801329e:	2a24      	cmp	r2, #36	; 0x24
 80132a0:	d003      	beq.n	80132aa <_realloc_r+0x1ae>
 80132a2:	002b      	movs	r3, r5
 80132a4:	3410      	adds	r4, #16
 80132a6:	3318      	adds	r3, #24
 80132a8:	e7dd      	b.n	8013266 <_realloc_r+0x16a>
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	61ab      	str	r3, [r5, #24]
 80132ae:	002b      	movs	r3, r5
 80132b0:	6962      	ldr	r2, [r4, #20]
 80132b2:	3320      	adds	r3, #32
 80132b4:	61ea      	str	r2, [r5, #28]
 80132b6:	3418      	adds	r4, #24
 80132b8:	e7d5      	b.n	8013266 <_realloc_r+0x16a>
 80132ba:	0021      	movs	r1, r4
 80132bc:	0038      	movs	r0, r7
 80132be:	f003 fdac 	bl	8016e1a <memmove>
 80132c2:	e7d6      	b.n	8013272 <_realloc_r+0x176>
 80132c4:	9a01      	ldr	r2, [sp, #4]
 80132c6:	42b2      	cmp	r2, r6
 80132c8:	dc35      	bgt.n	8013336 <_realloc_r+0x23a>
 80132ca:	0028      	movs	r0, r5
 80132cc:	68da      	ldr	r2, [r3, #12]
 80132ce:	689b      	ldr	r3, [r3, #8]
 80132d0:	3008      	adds	r0, #8
 80132d2:	60da      	str	r2, [r3, #12]
 80132d4:	6093      	str	r3, [r2, #8]
 80132d6:	68aa      	ldr	r2, [r5, #8]
 80132d8:	68eb      	ldr	r3, [r5, #12]
 80132da:	60d3      	str	r3, [r2, #12]
 80132dc:	609a      	str	r2, [r3, #8]
 80132de:	9a04      	ldr	r2, [sp, #16]
 80132e0:	3a04      	subs	r2, #4
 80132e2:	2a24      	cmp	r2, #36	; 0x24
 80132e4:	d823      	bhi.n	801332e <_realloc_r+0x232>
 80132e6:	2a13      	cmp	r2, #19
 80132e8:	d907      	bls.n	80132fa <_realloc_r+0x1fe>
 80132ea:	6823      	ldr	r3, [r4, #0]
 80132ec:	60ab      	str	r3, [r5, #8]
 80132ee:	6863      	ldr	r3, [r4, #4]
 80132f0:	60eb      	str	r3, [r5, #12]
 80132f2:	2a1b      	cmp	r2, #27
 80132f4:	d809      	bhi.n	801330a <_realloc_r+0x20e>
 80132f6:	3408      	adds	r4, #8
 80132f8:	3008      	adds	r0, #8
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	6003      	str	r3, [r0, #0]
 80132fe:	6863      	ldr	r3, [r4, #4]
 8013300:	6043      	str	r3, [r0, #4]
 8013302:	68a3      	ldr	r3, [r4, #8]
 8013304:	6083      	str	r3, [r0, #8]
 8013306:	9502      	str	r5, [sp, #8]
 8013308:	e75c      	b.n	80131c4 <_realloc_r+0xc8>
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	612b      	str	r3, [r5, #16]
 801330e:	68e3      	ldr	r3, [r4, #12]
 8013310:	616b      	str	r3, [r5, #20]
 8013312:	2a24      	cmp	r2, #36	; 0x24
 8013314:	d003      	beq.n	801331e <_realloc_r+0x222>
 8013316:	0028      	movs	r0, r5
 8013318:	3410      	adds	r4, #16
 801331a:	3018      	adds	r0, #24
 801331c:	e7ed      	b.n	80132fa <_realloc_r+0x1fe>
 801331e:	0028      	movs	r0, r5
 8013320:	6923      	ldr	r3, [r4, #16]
 8013322:	3020      	adds	r0, #32
 8013324:	61ab      	str	r3, [r5, #24]
 8013326:	6963      	ldr	r3, [r4, #20]
 8013328:	3418      	adds	r4, #24
 801332a:	61eb      	str	r3, [r5, #28]
 801332c:	e7e5      	b.n	80132fa <_realloc_r+0x1fe>
 801332e:	0021      	movs	r1, r4
 8013330:	f003 fd73 	bl	8016e1a <memmove>
 8013334:	e7e7      	b.n	8013306 <_realloc_r+0x20a>
 8013336:	9b01      	ldr	r3, [sp, #4]
 8013338:	42bb      	cmp	r3, r7
 801333a:	dc31      	bgt.n	80133a0 <_realloc_r+0x2a4>
 801333c:	0028      	movs	r0, r5
 801333e:	68aa      	ldr	r2, [r5, #8]
 8013340:	68eb      	ldr	r3, [r5, #12]
 8013342:	3008      	adds	r0, #8
 8013344:	60d3      	str	r3, [r2, #12]
 8013346:	609a      	str	r2, [r3, #8]
 8013348:	9a04      	ldr	r2, [sp, #16]
 801334a:	3a04      	subs	r2, #4
 801334c:	2a24      	cmp	r2, #36	; 0x24
 801334e:	d823      	bhi.n	8013398 <_realloc_r+0x29c>
 8013350:	2a13      	cmp	r2, #19
 8013352:	d907      	bls.n	8013364 <_realloc_r+0x268>
 8013354:	6823      	ldr	r3, [r4, #0]
 8013356:	60ab      	str	r3, [r5, #8]
 8013358:	6863      	ldr	r3, [r4, #4]
 801335a:	60eb      	str	r3, [r5, #12]
 801335c:	2a1b      	cmp	r2, #27
 801335e:	d809      	bhi.n	8013374 <_realloc_r+0x278>
 8013360:	3408      	adds	r4, #8
 8013362:	3008      	adds	r0, #8
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	6003      	str	r3, [r0, #0]
 8013368:	6863      	ldr	r3, [r4, #4]
 801336a:	6043      	str	r3, [r0, #4]
 801336c:	68a3      	ldr	r3, [r4, #8]
 801336e:	6083      	str	r3, [r0, #8]
 8013370:	003e      	movs	r6, r7
 8013372:	e7c8      	b.n	8013306 <_realloc_r+0x20a>
 8013374:	68a3      	ldr	r3, [r4, #8]
 8013376:	612b      	str	r3, [r5, #16]
 8013378:	68e3      	ldr	r3, [r4, #12]
 801337a:	616b      	str	r3, [r5, #20]
 801337c:	2a24      	cmp	r2, #36	; 0x24
 801337e:	d003      	beq.n	8013388 <_realloc_r+0x28c>
 8013380:	0028      	movs	r0, r5
 8013382:	3410      	adds	r4, #16
 8013384:	3018      	adds	r0, #24
 8013386:	e7ed      	b.n	8013364 <_realloc_r+0x268>
 8013388:	0028      	movs	r0, r5
 801338a:	6923      	ldr	r3, [r4, #16]
 801338c:	3020      	adds	r0, #32
 801338e:	61ab      	str	r3, [r5, #24]
 8013390:	6963      	ldr	r3, [r4, #20]
 8013392:	3418      	adds	r4, #24
 8013394:	61eb      	str	r3, [r5, #28]
 8013396:	e7e5      	b.n	8013364 <_realloc_r+0x268>
 8013398:	0021      	movs	r1, r4
 801339a:	f003 fd3e 	bl	8016e1a <memmove>
 801339e:	e7e7      	b.n	8013370 <_realloc_r+0x274>
 80133a0:	9905      	ldr	r1, [sp, #20]
 80133a2:	9803      	ldr	r0, [sp, #12]
 80133a4:	f7ff fc2c 	bl	8012c00 <_malloc_r>
 80133a8:	1e07      	subs	r7, r0, #0
 80133aa:	d100      	bne.n	80133ae <_realloc_r+0x2b2>
 80133ac:	e76f      	b.n	801328e <_realloc_r+0x192>
 80133ae:	0023      	movs	r3, r4
 80133b0:	2201      	movs	r2, #1
 80133b2:	3b08      	subs	r3, #8
 80133b4:	685b      	ldr	r3, [r3, #4]
 80133b6:	4393      	bics	r3, r2
 80133b8:	9a02      	ldr	r2, [sp, #8]
 80133ba:	18d3      	adds	r3, r2, r3
 80133bc:	0002      	movs	r2, r0
 80133be:	3a08      	subs	r2, #8
 80133c0:	4293      	cmp	r3, r2
 80133c2:	d105      	bne.n	80133d0 <_realloc_r+0x2d4>
 80133c4:	685e      	ldr	r6, [r3, #4]
 80133c6:	2303      	movs	r3, #3
 80133c8:	439e      	bics	r6, r3
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	18f6      	adds	r6, r6, r3
 80133ce:	e6f9      	b.n	80131c4 <_realloc_r+0xc8>
 80133d0:	9a04      	ldr	r2, [sp, #16]
 80133d2:	3a04      	subs	r2, #4
 80133d4:	2a24      	cmp	r2, #36	; 0x24
 80133d6:	d82d      	bhi.n	8013434 <_realloc_r+0x338>
 80133d8:	2a13      	cmp	r2, #19
 80133da:	d928      	bls.n	801342e <_realloc_r+0x332>
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	6003      	str	r3, [r0, #0]
 80133e0:	6863      	ldr	r3, [r4, #4]
 80133e2:	6043      	str	r3, [r0, #4]
 80133e4:	2a1b      	cmp	r2, #27
 80133e6:	d80e      	bhi.n	8013406 <_realloc_r+0x30a>
 80133e8:	0022      	movs	r2, r4
 80133ea:	0003      	movs	r3, r0
 80133ec:	3208      	adds	r2, #8
 80133ee:	3308      	adds	r3, #8
 80133f0:	6811      	ldr	r1, [r2, #0]
 80133f2:	6019      	str	r1, [r3, #0]
 80133f4:	6851      	ldr	r1, [r2, #4]
 80133f6:	6059      	str	r1, [r3, #4]
 80133f8:	6892      	ldr	r2, [r2, #8]
 80133fa:	609a      	str	r2, [r3, #8]
 80133fc:	0021      	movs	r1, r4
 80133fe:	9803      	ldr	r0, [sp, #12]
 8013400:	f003 f90a 	bl	8016618 <_free_r>
 8013404:	e743      	b.n	801328e <_realloc_r+0x192>
 8013406:	68a3      	ldr	r3, [r4, #8]
 8013408:	6083      	str	r3, [r0, #8]
 801340a:	68e3      	ldr	r3, [r4, #12]
 801340c:	60c3      	str	r3, [r0, #12]
 801340e:	2a24      	cmp	r2, #36	; 0x24
 8013410:	d004      	beq.n	801341c <_realloc_r+0x320>
 8013412:	0022      	movs	r2, r4
 8013414:	0003      	movs	r3, r0
 8013416:	3210      	adds	r2, #16
 8013418:	3310      	adds	r3, #16
 801341a:	e7e9      	b.n	80133f0 <_realloc_r+0x2f4>
 801341c:	6923      	ldr	r3, [r4, #16]
 801341e:	0022      	movs	r2, r4
 8013420:	6103      	str	r3, [r0, #16]
 8013422:	0003      	movs	r3, r0
 8013424:	6961      	ldr	r1, [r4, #20]
 8013426:	3218      	adds	r2, #24
 8013428:	3318      	adds	r3, #24
 801342a:	6141      	str	r1, [r0, #20]
 801342c:	e7e0      	b.n	80133f0 <_realloc_r+0x2f4>
 801342e:	0003      	movs	r3, r0
 8013430:	0022      	movs	r2, r4
 8013432:	e7dd      	b.n	80133f0 <_realloc_r+0x2f4>
 8013434:	0021      	movs	r1, r4
 8013436:	f003 fcf0 	bl	8016e1a <memmove>
 801343a:	e7df      	b.n	80133fc <_realloc_r+0x300>
 801343c:	9e04      	ldr	r6, [sp, #16]
 801343e:	e6c1      	b.n	80131c4 <_realloc_r+0xc8>
 8013440:	9902      	ldr	r1, [sp, #8]
 8013442:	4306      	orrs	r6, r0
 8013444:	604e      	str	r6, [r1, #4]
 8013446:	6851      	ldr	r1, [r2, #4]
 8013448:	430b      	orrs	r3, r1
 801344a:	6053      	str	r3, [r2, #4]
 801344c:	e6d6      	b.n	80131fc <_realloc_r+0x100>
 801344e:	46c0      	nop			; (mov r8, r8)
 8013450:	2000066c 	.word	0x2000066c

08013454 <_sbrk_r>:
 8013454:	2300      	movs	r3, #0
 8013456:	b570      	push	{r4, r5, r6, lr}
 8013458:	4c06      	ldr	r4, [pc, #24]	; (8013474 <_sbrk_r+0x20>)
 801345a:	0005      	movs	r5, r0
 801345c:	0008      	movs	r0, r1
 801345e:	6023      	str	r3, [r4, #0]
 8013460:	f004 f9c0 	bl	80177e4 <_sbrk>
 8013464:	1c43      	adds	r3, r0, #1
 8013466:	d103      	bne.n	8013470 <_sbrk_r+0x1c>
 8013468:	6823      	ldr	r3, [r4, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d000      	beq.n	8013470 <_sbrk_r+0x1c>
 801346e:	602b      	str	r3, [r5, #0]
 8013470:	bd70      	pop	{r4, r5, r6, pc}
 8013472:	46c0      	nop			; (mov r8, r8)
 8013474:	20006da4 	.word	0x20006da4

08013478 <sprintf>:
 8013478:	b40e      	push	{r1, r2, r3}
 801347a:	b500      	push	{lr}
 801347c:	490b      	ldr	r1, [pc, #44]	; (80134ac <sprintf+0x34>)
 801347e:	b09c      	sub	sp, #112	; 0x70
 8013480:	ab1d      	add	r3, sp, #116	; 0x74
 8013482:	9002      	str	r0, [sp, #8]
 8013484:	9006      	str	r0, [sp, #24]
 8013486:	9107      	str	r1, [sp, #28]
 8013488:	9104      	str	r1, [sp, #16]
 801348a:	4809      	ldr	r0, [pc, #36]	; (80134b0 <sprintf+0x38>)
 801348c:	4909      	ldr	r1, [pc, #36]	; (80134b4 <sprintf+0x3c>)
 801348e:	cb04      	ldmia	r3!, {r2}
 8013490:	9105      	str	r1, [sp, #20]
 8013492:	6800      	ldr	r0, [r0, #0]
 8013494:	a902      	add	r1, sp, #8
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	f000 ff78 	bl	801438c <_svfprintf_r>
 801349c:	2300      	movs	r3, #0
 801349e:	9a02      	ldr	r2, [sp, #8]
 80134a0:	7013      	strb	r3, [r2, #0]
 80134a2:	b01c      	add	sp, #112	; 0x70
 80134a4:	bc08      	pop	{r3}
 80134a6:	b003      	add	sp, #12
 80134a8:	4718      	bx	r3
 80134aa:	46c0      	nop			; (mov r8, r8)
 80134ac:	7fffffff 	.word	0x7fffffff
 80134b0:	200000d0 	.word	0x200000d0
 80134b4:	ffff0208 	.word	0xffff0208

080134b8 <strcat>:
 80134b8:	0002      	movs	r2, r0
 80134ba:	b510      	push	{r4, lr}
 80134bc:	7813      	ldrb	r3, [r2, #0]
 80134be:	1c54      	adds	r4, r2, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d105      	bne.n	80134d0 <strcat+0x18>
 80134c4:	5ccc      	ldrb	r4, [r1, r3]
 80134c6:	54d4      	strb	r4, [r2, r3]
 80134c8:	3301      	adds	r3, #1
 80134ca:	2c00      	cmp	r4, #0
 80134cc:	d1fa      	bne.n	80134c4 <strcat+0xc>
 80134ce:	bd10      	pop	{r4, pc}
 80134d0:	0022      	movs	r2, r4
 80134d2:	e7f3      	b.n	80134bc <strcat+0x4>

080134d4 <strchr>:
 80134d4:	b2c9      	uxtb	r1, r1
 80134d6:	7803      	ldrb	r3, [r0, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d004      	beq.n	80134e6 <strchr+0x12>
 80134dc:	428b      	cmp	r3, r1
 80134de:	d100      	bne.n	80134e2 <strchr+0xe>
 80134e0:	4770      	bx	lr
 80134e2:	3001      	adds	r0, #1
 80134e4:	e7f7      	b.n	80134d6 <strchr+0x2>
 80134e6:	424b      	negs	r3, r1
 80134e8:	4159      	adcs	r1, r3
 80134ea:	4249      	negs	r1, r1
 80134ec:	4008      	ands	r0, r1
 80134ee:	e7f7      	b.n	80134e0 <strchr+0xc>

080134f0 <strcpy>:
 80134f0:	0003      	movs	r3, r0
 80134f2:	780a      	ldrb	r2, [r1, #0]
 80134f4:	3101      	adds	r1, #1
 80134f6:	701a      	strb	r2, [r3, #0]
 80134f8:	3301      	adds	r3, #1
 80134fa:	2a00      	cmp	r2, #0
 80134fc:	d1f9      	bne.n	80134f2 <strcpy+0x2>
 80134fe:	4770      	bx	lr

08013500 <strncmp>:
 8013500:	2300      	movs	r3, #0
 8013502:	b530      	push	{r4, r5, lr}
 8013504:	429a      	cmp	r2, r3
 8013506:	d00a      	beq.n	801351e <strncmp+0x1e>
 8013508:	3a01      	subs	r2, #1
 801350a:	5cc4      	ldrb	r4, [r0, r3]
 801350c:	5ccd      	ldrb	r5, [r1, r3]
 801350e:	42ac      	cmp	r4, r5
 8013510:	d104      	bne.n	801351c <strncmp+0x1c>
 8013512:	4293      	cmp	r3, r2
 8013514:	d002      	beq.n	801351c <strncmp+0x1c>
 8013516:	3301      	adds	r3, #1
 8013518:	2c00      	cmp	r4, #0
 801351a:	d1f6      	bne.n	801350a <strncmp+0xa>
 801351c:	1b63      	subs	r3, r4, r5
 801351e:	0018      	movs	r0, r3
 8013520:	bd30      	pop	{r4, r5, pc}

08013522 <strncpy>:
 8013522:	b530      	push	{r4, r5, lr}
 8013524:	0005      	movs	r5, r0
 8013526:	2a00      	cmp	r2, #0
 8013528:	d100      	bne.n	801352c <strncpy+0xa>
 801352a:	bd30      	pop	{r4, r5, pc}
 801352c:	780c      	ldrb	r4, [r1, #0]
 801352e:	3a01      	subs	r2, #1
 8013530:	1c6b      	adds	r3, r5, #1
 8013532:	702c      	strb	r4, [r5, #0]
 8013534:	3101      	adds	r1, #1
 8013536:	2c00      	cmp	r4, #0
 8013538:	d105      	bne.n	8013546 <strncpy+0x24>
 801353a:	189a      	adds	r2, r3, r2
 801353c:	429a      	cmp	r2, r3
 801353e:	d0f4      	beq.n	801352a <strncpy+0x8>
 8013540:	701c      	strb	r4, [r3, #0]
 8013542:	3301      	adds	r3, #1
 8013544:	e7fa      	b.n	801353c <strncpy+0x1a>
 8013546:	001d      	movs	r5, r3
 8013548:	e7ed      	b.n	8013526 <strncpy+0x4>
	...

0801354c <sulp>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	0016      	movs	r6, r2
 8013550:	000d      	movs	r5, r1
 8013552:	f003 ff17 	bl	8017384 <__ulp>
 8013556:	2e00      	cmp	r6, #0
 8013558:	d00d      	beq.n	8013576 <sulp+0x2a>
 801355a:	236b      	movs	r3, #107	; 0x6b
 801355c:	006a      	lsls	r2, r5, #1
 801355e:	0d52      	lsrs	r2, r2, #21
 8013560:	1a9b      	subs	r3, r3, r2
 8013562:	2b00      	cmp	r3, #0
 8013564:	dd07      	ble.n	8013576 <sulp+0x2a>
 8013566:	2400      	movs	r4, #0
 8013568:	4a03      	ldr	r2, [pc, #12]	; (8013578 <sulp+0x2c>)
 801356a:	051b      	lsls	r3, r3, #20
 801356c:	189d      	adds	r5, r3, r2
 801356e:	002b      	movs	r3, r5
 8013570:	0022      	movs	r2, r4
 8013572:	f7ee fd71 	bl	8002058 <__aeabi_dmul>
 8013576:	bd70      	pop	{r4, r5, r6, pc}
 8013578:	3ff00000 	.word	0x3ff00000

0801357c <_strtod_l>:
 801357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357e:	b0a7      	sub	sp, #156	; 0x9c
 8013580:	9307      	str	r3, [sp, #28]
 8013582:	2300      	movs	r3, #0
 8013584:	9004      	str	r0, [sp, #16]
 8013586:	9807      	ldr	r0, [sp, #28]
 8013588:	9322      	str	r3, [sp, #136]	; 0x88
 801358a:	9106      	str	r1, [sp, #24]
 801358c:	921d      	str	r2, [sp, #116]	; 0x74
 801358e:	f003 fc28 	bl	8016de2 <__localeconv_l>
 8013592:	0005      	movs	r5, r0
 8013594:	6800      	ldr	r0, [r0, #0]
 8013596:	f7ec fdbf 	bl	8000118 <strlen>
 801359a:	2600      	movs	r6, #0
 801359c:	2700      	movs	r7, #0
 801359e:	9b06      	ldr	r3, [sp, #24]
 80135a0:	9005      	str	r0, [sp, #20]
 80135a2:	9321      	str	r3, [sp, #132]	; 0x84
 80135a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135a6:	781a      	ldrb	r2, [r3, #0]
 80135a8:	2a0d      	cmp	r2, #13
 80135aa:	d839      	bhi.n	8013620 <_strtod_l+0xa4>
 80135ac:	2a09      	cmp	r2, #9
 80135ae:	d23d      	bcs.n	801362c <_strtod_l+0xb0>
 80135b0:	2a00      	cmp	r2, #0
 80135b2:	d044      	beq.n	801363e <_strtod_l+0xc2>
 80135b4:	2300      	movs	r3, #0
 80135b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80135b8:	2200      	movs	r2, #0
 80135ba:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80135bc:	920c      	str	r2, [sp, #48]	; 0x30
 80135be:	7823      	ldrb	r3, [r4, #0]
 80135c0:	2b30      	cmp	r3, #48	; 0x30
 80135c2:	d000      	beq.n	80135c6 <_strtod_l+0x4a>
 80135c4:	e07e      	b.n	80136c4 <_strtod_l+0x148>
 80135c6:	7863      	ldrb	r3, [r4, #1]
 80135c8:	2b58      	cmp	r3, #88	; 0x58
 80135ca:	d002      	beq.n	80135d2 <_strtod_l+0x56>
 80135cc:	2b78      	cmp	r3, #120	; 0x78
 80135ce:	d000      	beq.n	80135d2 <_strtod_l+0x56>
 80135d0:	e06e      	b.n	80136b0 <_strtod_l+0x134>
 80135d2:	9b07      	ldr	r3, [sp, #28]
 80135d4:	4a96      	ldr	r2, [pc, #600]	; (8013830 <_strtod_l+0x2b4>)
 80135d6:	9302      	str	r3, [sp, #8]
 80135d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135da:	a921      	add	r1, sp, #132	; 0x84
 80135dc:	9301      	str	r3, [sp, #4]
 80135de:	ab22      	add	r3, sp, #136	; 0x88
 80135e0:	9300      	str	r3, [sp, #0]
 80135e2:	9804      	ldr	r0, [sp, #16]
 80135e4:	ab23      	add	r3, sp, #140	; 0x8c
 80135e6:	f003 f914 	bl	8016812 <__gethex>
 80135ea:	2507      	movs	r5, #7
 80135ec:	9005      	str	r0, [sp, #20]
 80135ee:	4005      	ands	r5, r0
 80135f0:	d005      	beq.n	80135fe <_strtod_l+0x82>
 80135f2:	2d06      	cmp	r5, #6
 80135f4:	d12f      	bne.n	8013656 <_strtod_l+0xda>
 80135f6:	2300      	movs	r3, #0
 80135f8:	3401      	adds	r4, #1
 80135fa:	9421      	str	r4, [sp, #132]	; 0x84
 80135fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80135fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <_strtod_l+0x8e>
 8013604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013606:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01d      	beq.n	801364c <_strtod_l+0xd0>
 8013610:	2380      	movs	r3, #128	; 0x80
 8013612:	0032      	movs	r2, r6
 8013614:	061b      	lsls	r3, r3, #24
 8013616:	18fb      	adds	r3, r7, r3
 8013618:	0010      	movs	r0, r2
 801361a:	0019      	movs	r1, r3
 801361c:	b027      	add	sp, #156	; 0x9c
 801361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013620:	2a2b      	cmp	r2, #43	; 0x2b
 8013622:	d016      	beq.n	8013652 <_strtod_l+0xd6>
 8013624:	2a2d      	cmp	r2, #45	; 0x2d
 8013626:	d003      	beq.n	8013630 <_strtod_l+0xb4>
 8013628:	2a20      	cmp	r2, #32
 801362a:	d1c3      	bne.n	80135b4 <_strtod_l+0x38>
 801362c:	3301      	adds	r3, #1
 801362e:	e7b8      	b.n	80135a2 <_strtod_l+0x26>
 8013630:	2201      	movs	r2, #1
 8013632:	9213      	str	r2, [sp, #76]	; 0x4c
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	9221      	str	r2, [sp, #132]	; 0x84
 8013638:	785b      	ldrb	r3, [r3, #1]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d1bc      	bne.n	80135b8 <_strtod_l+0x3c>
 801363e:	9b06      	ldr	r3, [sp, #24]
 8013640:	9321      	str	r3, [sp, #132]	; 0x84
 8013642:	2300      	movs	r3, #0
 8013644:	9313      	str	r3, [sp, #76]	; 0x4c
 8013646:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1db      	bne.n	8013604 <_strtod_l+0x88>
 801364c:	0032      	movs	r2, r6
 801364e:	003b      	movs	r3, r7
 8013650:	e7e2      	b.n	8013618 <_strtod_l+0x9c>
 8013652:	2200      	movs	r2, #0
 8013654:	e7ed      	b.n	8013632 <_strtod_l+0xb6>
 8013656:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013658:	2a00      	cmp	r2, #0
 801365a:	d007      	beq.n	801366c <_strtod_l+0xf0>
 801365c:	2135      	movs	r1, #53	; 0x35
 801365e:	a824      	add	r0, sp, #144	; 0x90
 8013660:	f003 ff7d 	bl	801755e <__copybits>
 8013664:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013666:	9804      	ldr	r0, [sp, #16]
 8013668:	f003 fc12 	bl	8016e90 <_Bfree>
 801366c:	1e68      	subs	r0, r5, #1
 801366e:	2804      	cmp	r0, #4
 8013670:	d806      	bhi.n	8013680 <_strtod_l+0x104>
 8013672:	f7ec fd59 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013676:	030c      	.short	0x030c
 8013678:	1917      	.short	0x1917
 801367a:	0c          	.byte	0x0c
 801367b:	00          	.byte	0x00
 801367c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801367e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013680:	9b05      	ldr	r3, [sp, #20]
 8013682:	071b      	lsls	r3, r3, #28
 8013684:	d5bb      	bpl.n	80135fe <_strtod_l+0x82>
 8013686:	2380      	movs	r3, #128	; 0x80
 8013688:	061b      	lsls	r3, r3, #24
 801368a:	431f      	orrs	r7, r3
 801368c:	e7b7      	b.n	80135fe <_strtod_l+0x82>
 801368e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013690:	4a68      	ldr	r2, [pc, #416]	; (8013834 <_strtod_l+0x2b8>)
 8013692:	4969      	ldr	r1, [pc, #420]	; (8013838 <_strtod_l+0x2bc>)
 8013694:	401a      	ands	r2, r3
 8013696:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013698:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801369a:	185b      	adds	r3, r3, r1
 801369c:	051b      	lsls	r3, r3, #20
 801369e:	431a      	orrs	r2, r3
 80136a0:	0017      	movs	r7, r2
 80136a2:	e7ed      	b.n	8013680 <_strtod_l+0x104>
 80136a4:	4f65      	ldr	r7, [pc, #404]	; (801383c <_strtod_l+0x2c0>)
 80136a6:	e7eb      	b.n	8013680 <_strtod_l+0x104>
 80136a8:	2601      	movs	r6, #1
 80136aa:	4f65      	ldr	r7, [pc, #404]	; (8013840 <_strtod_l+0x2c4>)
 80136ac:	4276      	negs	r6, r6
 80136ae:	e7e7      	b.n	8013680 <_strtod_l+0x104>
 80136b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136b2:	1c5a      	adds	r2, r3, #1
 80136b4:	9221      	str	r2, [sp, #132]	; 0x84
 80136b6:	785b      	ldrb	r3, [r3, #1]
 80136b8:	2b30      	cmp	r3, #48	; 0x30
 80136ba:	d0f9      	beq.n	80136b0 <_strtod_l+0x134>
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d09e      	beq.n	80135fe <_strtod_l+0x82>
 80136c0:	2301      	movs	r3, #1
 80136c2:	930c      	str	r3, [sp, #48]	; 0x30
 80136c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136c6:	220a      	movs	r2, #10
 80136c8:	9312      	str	r3, [sp, #72]	; 0x48
 80136ca:	2300      	movs	r3, #0
 80136cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80136ce:	9308      	str	r3, [sp, #32]
 80136d0:	930a      	str	r3, [sp, #40]	; 0x28
 80136d2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80136d4:	7804      	ldrb	r4, [r0, #0]
 80136d6:	0023      	movs	r3, r4
 80136d8:	3b30      	subs	r3, #48	; 0x30
 80136da:	b2d9      	uxtb	r1, r3
 80136dc:	2909      	cmp	r1, #9
 80136de:	d934      	bls.n	801374a <_strtod_l+0x1ce>
 80136e0:	9a05      	ldr	r2, [sp, #20]
 80136e2:	6829      	ldr	r1, [r5, #0]
 80136e4:	f7ff ff0c 	bl	8013500 <strncmp>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d040      	beq.n	801376e <_strtod_l+0x1f2>
 80136ec:	2000      	movs	r0, #0
 80136ee:	0023      	movs	r3, r4
 80136f0:	4684      	mov	ip, r0
 80136f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136f4:	9007      	str	r0, [sp, #28]
 80136f6:	9205      	str	r2, [sp, #20]
 80136f8:	2220      	movs	r2, #32
 80136fa:	0019      	movs	r1, r3
 80136fc:	4391      	bics	r1, r2
 80136fe:	000a      	movs	r2, r1
 8013700:	2100      	movs	r1, #0
 8013702:	2a45      	cmp	r2, #69	; 0x45
 8013704:	d000      	beq.n	8013708 <_strtod_l+0x18c>
 8013706:	e0bf      	b.n	8013888 <_strtod_l+0x30c>
 8013708:	9b05      	ldr	r3, [sp, #20]
 801370a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801370c:	4303      	orrs	r3, r0
 801370e:	4313      	orrs	r3, r2
 8013710:	428b      	cmp	r3, r1
 8013712:	d094      	beq.n	801363e <_strtod_l+0xc2>
 8013714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013716:	9306      	str	r3, [sp, #24]
 8013718:	3301      	adds	r3, #1
 801371a:	9321      	str	r3, [sp, #132]	; 0x84
 801371c:	9b06      	ldr	r3, [sp, #24]
 801371e:	785b      	ldrb	r3, [r3, #1]
 8013720:	2b2b      	cmp	r3, #43	; 0x2b
 8013722:	d100      	bne.n	8013726 <_strtod_l+0x1aa>
 8013724:	e082      	b.n	801382c <_strtod_l+0x2b0>
 8013726:	000c      	movs	r4, r1
 8013728:	2b2d      	cmp	r3, #45	; 0x2d
 801372a:	d105      	bne.n	8013738 <_strtod_l+0x1bc>
 801372c:	2401      	movs	r4, #1
 801372e:	9b06      	ldr	r3, [sp, #24]
 8013730:	3302      	adds	r3, #2
 8013732:	9321      	str	r3, [sp, #132]	; 0x84
 8013734:	9b06      	ldr	r3, [sp, #24]
 8013736:	789b      	ldrb	r3, [r3, #2]
 8013738:	001a      	movs	r2, r3
 801373a:	3a30      	subs	r2, #48	; 0x30
 801373c:	2a09      	cmp	r2, #9
 801373e:	d800      	bhi.n	8013742 <_strtod_l+0x1c6>
 8013740:	e084      	b.n	801384c <_strtod_l+0x2d0>
 8013742:	9a06      	ldr	r2, [sp, #24]
 8013744:	2100      	movs	r1, #0
 8013746:	9221      	str	r2, [sp, #132]	; 0x84
 8013748:	e09e      	b.n	8013888 <_strtod_l+0x30c>
 801374a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801374c:	2908      	cmp	r1, #8
 801374e:	dc09      	bgt.n	8013764 <_strtod_l+0x1e8>
 8013750:	9908      	ldr	r1, [sp, #32]
 8013752:	4351      	muls	r1, r2
 8013754:	18cb      	adds	r3, r1, r3
 8013756:	9308      	str	r3, [sp, #32]
 8013758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801375a:	3001      	adds	r0, #1
 801375c:	3301      	adds	r3, #1
 801375e:	930a      	str	r3, [sp, #40]	; 0x28
 8013760:	9021      	str	r0, [sp, #132]	; 0x84
 8013762:	e7b6      	b.n	80136d2 <_strtod_l+0x156>
 8013764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013766:	4351      	muls	r1, r2
 8013768:	18cb      	adds	r3, r1, r3
 801376a:	930b      	str	r3, [sp, #44]	; 0x2c
 801376c:	e7f4      	b.n	8013758 <_strtod_l+0x1dc>
 801376e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013770:	9b05      	ldr	r3, [sp, #20]
 8013772:	4694      	mov	ip, r2
 8013774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013776:	4463      	add	r3, ip
 8013778:	9321      	str	r3, [sp, #132]	; 0x84
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2a00      	cmp	r2, #0
 801377e:	d036      	beq.n	80137ee <_strtod_l+0x272>
 8013780:	4684      	mov	ip, r0
 8013782:	9205      	str	r2, [sp, #20]
 8013784:	001a      	movs	r2, r3
 8013786:	3a30      	subs	r2, #48	; 0x30
 8013788:	2a09      	cmp	r2, #9
 801378a:	d912      	bls.n	80137b2 <_strtod_l+0x236>
 801378c:	2201      	movs	r2, #1
 801378e:	9207      	str	r2, [sp, #28]
 8013790:	e7b2      	b.n	80136f8 <_strtod_l+0x17c>
 8013792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013794:	3001      	adds	r0, #1
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	9221      	str	r2, [sp, #132]	; 0x84
 801379a:	785b      	ldrb	r3, [r3, #1]
 801379c:	2b30      	cmp	r3, #48	; 0x30
 801379e:	d0f8      	beq.n	8013792 <_strtod_l+0x216>
 80137a0:	001a      	movs	r2, r3
 80137a2:	3a31      	subs	r2, #49	; 0x31
 80137a4:	2a08      	cmp	r2, #8
 80137a6:	d83c      	bhi.n	8013822 <_strtod_l+0x2a6>
 80137a8:	4684      	mov	ip, r0
 80137aa:	2000      	movs	r0, #0
 80137ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80137ae:	9005      	str	r0, [sp, #20]
 80137b0:	9212      	str	r2, [sp, #72]	; 0x48
 80137b2:	3b30      	subs	r3, #48	; 0x30
 80137b4:	1c42      	adds	r2, r0, #1
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d013      	beq.n	80137e2 <_strtod_l+0x266>
 80137ba:	210a      	movs	r1, #10
 80137bc:	4494      	add	ip, r2
 80137be:	9a05      	ldr	r2, [sp, #20]
 80137c0:	1885      	adds	r5, r0, r2
 80137c2:	42aa      	cmp	r2, r5
 80137c4:	d115      	bne.n	80137f2 <_strtod_l+0x276>
 80137c6:	9905      	ldr	r1, [sp, #20]
 80137c8:	9a05      	ldr	r2, [sp, #20]
 80137ca:	3101      	adds	r1, #1
 80137cc:	1809      	adds	r1, r1, r0
 80137ce:	1812      	adds	r2, r2, r0
 80137d0:	9105      	str	r1, [sp, #20]
 80137d2:	2a08      	cmp	r2, #8
 80137d4:	dc1b      	bgt.n	801380e <_strtod_l+0x292>
 80137d6:	220a      	movs	r2, #10
 80137d8:	9908      	ldr	r1, [sp, #32]
 80137da:	434a      	muls	r2, r1
 80137dc:	189b      	adds	r3, r3, r2
 80137de:	2200      	movs	r2, #0
 80137e0:	9308      	str	r3, [sp, #32]
 80137e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137e4:	0010      	movs	r0, r2
 80137e6:	1c59      	adds	r1, r3, #1
 80137e8:	9121      	str	r1, [sp, #132]	; 0x84
 80137ea:	785b      	ldrb	r3, [r3, #1]
 80137ec:	e7ca      	b.n	8013784 <_strtod_l+0x208>
 80137ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80137f0:	e7d4      	b.n	801379c <_strtod_l+0x220>
 80137f2:	1c54      	adds	r4, r2, #1
 80137f4:	2a08      	cmp	r2, #8
 80137f6:	dc04      	bgt.n	8013802 <_strtod_l+0x286>
 80137f8:	9a08      	ldr	r2, [sp, #32]
 80137fa:	434a      	muls	r2, r1
 80137fc:	9208      	str	r2, [sp, #32]
 80137fe:	0022      	movs	r2, r4
 8013800:	e7df      	b.n	80137c2 <_strtod_l+0x246>
 8013802:	2c10      	cmp	r4, #16
 8013804:	dcfb      	bgt.n	80137fe <_strtod_l+0x282>
 8013806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013808:	434a      	muls	r2, r1
 801380a:	920b      	str	r2, [sp, #44]	; 0x2c
 801380c:	e7f7      	b.n	80137fe <_strtod_l+0x282>
 801380e:	9905      	ldr	r1, [sp, #20]
 8013810:	2200      	movs	r2, #0
 8013812:	2910      	cmp	r1, #16
 8013814:	dce5      	bgt.n	80137e2 <_strtod_l+0x266>
 8013816:	210a      	movs	r1, #10
 8013818:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801381a:	4341      	muls	r1, r0
 801381c:	185b      	adds	r3, r3, r1
 801381e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013820:	e7df      	b.n	80137e2 <_strtod_l+0x266>
 8013822:	2200      	movs	r2, #0
 8013824:	4694      	mov	ip, r2
 8013826:	9205      	str	r2, [sp, #20]
 8013828:	3201      	adds	r2, #1
 801382a:	e7b0      	b.n	801378e <_strtod_l+0x212>
 801382c:	000c      	movs	r4, r1
 801382e:	e77e      	b.n	801372e <_strtod_l+0x1b2>
 8013830:	0801aaf8 	.word	0x0801aaf8
 8013834:	ffefffff 	.word	0xffefffff
 8013838:	00000433 	.word	0x00000433
 801383c:	7ff00000 	.word	0x7ff00000
 8013840:	7fffffff 	.word	0x7fffffff
 8013844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013846:	1c5a      	adds	r2, r3, #1
 8013848:	9221      	str	r2, [sp, #132]	; 0x84
 801384a:	785b      	ldrb	r3, [r3, #1]
 801384c:	2b30      	cmp	r3, #48	; 0x30
 801384e:	d0f9      	beq.n	8013844 <_strtod_l+0x2c8>
 8013850:	001a      	movs	r2, r3
 8013852:	3a31      	subs	r2, #49	; 0x31
 8013854:	2100      	movs	r1, #0
 8013856:	2a08      	cmp	r2, #8
 8013858:	d816      	bhi.n	8013888 <_strtod_l+0x30c>
 801385a:	3b30      	subs	r3, #48	; 0x30
 801385c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801385e:	930e      	str	r3, [sp, #56]	; 0x38
 8013860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013862:	1c59      	adds	r1, r3, #1
 8013864:	9121      	str	r1, [sp, #132]	; 0x84
 8013866:	785b      	ldrb	r3, [r3, #1]
 8013868:	001a      	movs	r2, r3
 801386a:	3a30      	subs	r2, #48	; 0x30
 801386c:	2a09      	cmp	r2, #9
 801386e:	d932      	bls.n	80138d6 <_strtod_l+0x35a>
 8013870:	1b4a      	subs	r2, r1, r5
 8013872:	4dad      	ldr	r5, [pc, #692]	; (8013b28 <_strtod_l+0x5ac>)
 8013874:	0029      	movs	r1, r5
 8013876:	2a08      	cmp	r2, #8
 8013878:	dc03      	bgt.n	8013882 <_strtod_l+0x306>
 801387a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801387c:	42a9      	cmp	r1, r5
 801387e:	dd00      	ble.n	8013882 <_strtod_l+0x306>
 8013880:	0029      	movs	r1, r5
 8013882:	2c00      	cmp	r4, #0
 8013884:	d000      	beq.n	8013888 <_strtod_l+0x30c>
 8013886:	4249      	negs	r1, r1
 8013888:	9a05      	ldr	r2, [sp, #20]
 801388a:	2a00      	cmp	r2, #0
 801388c:	d149      	bne.n	8013922 <_strtod_l+0x3a6>
 801388e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013890:	4310      	orrs	r0, r2
 8013892:	d000      	beq.n	8013896 <_strtod_l+0x31a>
 8013894:	e6b3      	b.n	80135fe <_strtod_l+0x82>
 8013896:	9a07      	ldr	r2, [sp, #28]
 8013898:	2a00      	cmp	r2, #0
 801389a:	d000      	beq.n	801389e <_strtod_l+0x322>
 801389c:	e6cf      	b.n	801363e <_strtod_l+0xc2>
 801389e:	2b4e      	cmp	r3, #78	; 0x4e
 80138a0:	d025      	beq.n	80138ee <_strtod_l+0x372>
 80138a2:	dc1f      	bgt.n	80138e4 <_strtod_l+0x368>
 80138a4:	2b49      	cmp	r3, #73	; 0x49
 80138a6:	d000      	beq.n	80138aa <_strtod_l+0x32e>
 80138a8:	e6c9      	b.n	801363e <_strtod_l+0xc2>
 80138aa:	49a0      	ldr	r1, [pc, #640]	; (8013b2c <_strtod_l+0x5b0>)
 80138ac:	a821      	add	r0, sp, #132	; 0x84
 80138ae:	f003 f9ed 	bl	8016c8c <__match>
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d100      	bne.n	80138b8 <_strtod_l+0x33c>
 80138b6:	e6c2      	b.n	801363e <_strtod_l+0xc2>
 80138b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138ba:	499d      	ldr	r1, [pc, #628]	; (8013b30 <_strtod_l+0x5b4>)
 80138bc:	3b01      	subs	r3, #1
 80138be:	a821      	add	r0, sp, #132	; 0x84
 80138c0:	9321      	str	r3, [sp, #132]	; 0x84
 80138c2:	f003 f9e3 	bl	8016c8c <__match>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d102      	bne.n	80138d0 <_strtod_l+0x354>
 80138ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138cc:	3301      	adds	r3, #1
 80138ce:	9321      	str	r3, [sp, #132]	; 0x84
 80138d0:	4f98      	ldr	r7, [pc, #608]	; (8013b34 <_strtod_l+0x5b8>)
 80138d2:	2600      	movs	r6, #0
 80138d4:	e693      	b.n	80135fe <_strtod_l+0x82>
 80138d6:	220a      	movs	r2, #10
 80138d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80138da:	434a      	muls	r2, r1
 80138dc:	18d2      	adds	r2, r2, r3
 80138de:	3a30      	subs	r2, #48	; 0x30
 80138e0:	920e      	str	r2, [sp, #56]	; 0x38
 80138e2:	e7bd      	b.n	8013860 <_strtod_l+0x2e4>
 80138e4:	2b69      	cmp	r3, #105	; 0x69
 80138e6:	d0e0      	beq.n	80138aa <_strtod_l+0x32e>
 80138e8:	2b6e      	cmp	r3, #110	; 0x6e
 80138ea:	d000      	beq.n	80138ee <_strtod_l+0x372>
 80138ec:	e6a7      	b.n	801363e <_strtod_l+0xc2>
 80138ee:	4992      	ldr	r1, [pc, #584]	; (8013b38 <_strtod_l+0x5bc>)
 80138f0:	a821      	add	r0, sp, #132	; 0x84
 80138f2:	f003 f9cb 	bl	8016c8c <__match>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	d100      	bne.n	80138fc <_strtod_l+0x380>
 80138fa:	e6a0      	b.n	801363e <_strtod_l+0xc2>
 80138fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b28      	cmp	r3, #40	; 0x28
 8013902:	d10c      	bne.n	801391e <_strtod_l+0x3a2>
 8013904:	aa24      	add	r2, sp, #144	; 0x90
 8013906:	498d      	ldr	r1, [pc, #564]	; (8013b3c <_strtod_l+0x5c0>)
 8013908:	a821      	add	r0, sp, #132	; 0x84
 801390a:	f003 f9d3 	bl	8016cb4 <__hexnan>
 801390e:	2805      	cmp	r0, #5
 8013910:	d105      	bne.n	801391e <_strtod_l+0x3a2>
 8013912:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013914:	4a87      	ldr	r2, [pc, #540]	; (8013b34 <_strtod_l+0x5b8>)
 8013916:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013918:	431a      	orrs	r2, r3
 801391a:	0017      	movs	r7, r2
 801391c:	e66f      	b.n	80135fe <_strtod_l+0x82>
 801391e:	4f88      	ldr	r7, [pc, #544]	; (8013b40 <_strtod_l+0x5c4>)
 8013920:	e7d7      	b.n	80138d2 <_strtod_l+0x356>
 8013922:	4663      	mov	r3, ip
 8013924:	1acb      	subs	r3, r1, r3
 8013926:	9307      	str	r3, [sp, #28]
 8013928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <_strtod_l+0x3b6>
 801392e:	9b05      	ldr	r3, [sp, #20]
 8013930:	930a      	str	r3, [sp, #40]	; 0x28
 8013932:	9c05      	ldr	r4, [sp, #20]
 8013934:	2c10      	cmp	r4, #16
 8013936:	dd00      	ble.n	801393a <_strtod_l+0x3be>
 8013938:	2410      	movs	r4, #16
 801393a:	9808      	ldr	r0, [sp, #32]
 801393c:	f7ef f9d2 	bl	8002ce4 <__aeabi_ui2d>
 8013940:	9b05      	ldr	r3, [sp, #20]
 8013942:	0006      	movs	r6, r0
 8013944:	000f      	movs	r7, r1
 8013946:	2b09      	cmp	r3, #9
 8013948:	dc15      	bgt.n	8013976 <_strtod_l+0x3fa>
 801394a:	9b07      	ldr	r3, [sp, #28]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d100      	bne.n	8013952 <_strtod_l+0x3d6>
 8013950:	e655      	b.n	80135fe <_strtod_l+0x82>
 8013952:	9b07      	ldr	r3, [sp, #28]
 8013954:	2b00      	cmp	r3, #0
 8013956:	dc00      	bgt.n	801395a <_strtod_l+0x3de>
 8013958:	e07d      	b.n	8013a56 <_strtod_l+0x4da>
 801395a:	2b16      	cmp	r3, #22
 801395c:	dc62      	bgt.n	8013a24 <_strtod_l+0x4a8>
 801395e:	00dc      	lsls	r4, r3, #3
 8013960:	4b78      	ldr	r3, [pc, #480]	; (8013b44 <_strtod_l+0x5c8>)
 8013962:	0032      	movs	r2, r6
 8013964:	1919      	adds	r1, r3, r4
 8013966:	003b      	movs	r3, r7
 8013968:	6808      	ldr	r0, [r1, #0]
 801396a:	6849      	ldr	r1, [r1, #4]
 801396c:	f7ee fb74 	bl	8002058 <__aeabi_dmul>
 8013970:	0006      	movs	r6, r0
 8013972:	000f      	movs	r7, r1
 8013974:	e643      	b.n	80135fe <_strtod_l+0x82>
 8013976:	0022      	movs	r2, r4
 8013978:	4b72      	ldr	r3, [pc, #456]	; (8013b44 <_strtod_l+0x5c8>)
 801397a:	3a09      	subs	r2, #9
 801397c:	00d2      	lsls	r2, r2, #3
 801397e:	189b      	adds	r3, r3, r2
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	f7ee fb68 	bl	8002058 <__aeabi_dmul>
 8013988:	0006      	movs	r6, r0
 801398a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801398c:	000f      	movs	r7, r1
 801398e:	f7ef f9a9 	bl	8002ce4 <__aeabi_ui2d>
 8013992:	000b      	movs	r3, r1
 8013994:	0002      	movs	r2, r0
 8013996:	0039      	movs	r1, r7
 8013998:	0030      	movs	r0, r6
 801399a:	f7ed fc37 	bl	800120c <__aeabi_dadd>
 801399e:	9b05      	ldr	r3, [sp, #20]
 80139a0:	0006      	movs	r6, r0
 80139a2:	000f      	movs	r7, r1
 80139a4:	2b0f      	cmp	r3, #15
 80139a6:	ddd0      	ble.n	801394a <_strtod_l+0x3ce>
 80139a8:	9b05      	ldr	r3, [sp, #20]
 80139aa:	1b1c      	subs	r4, r3, r4
 80139ac:	9b07      	ldr	r3, [sp, #28]
 80139ae:	18e4      	adds	r4, r4, r3
 80139b0:	2c00      	cmp	r4, #0
 80139b2:	dc00      	bgt.n	80139b6 <_strtod_l+0x43a>
 80139b4:	e094      	b.n	8013ae0 <_strtod_l+0x564>
 80139b6:	230f      	movs	r3, #15
 80139b8:	4023      	ands	r3, r4
 80139ba:	d00a      	beq.n	80139d2 <_strtod_l+0x456>
 80139bc:	4961      	ldr	r1, [pc, #388]	; (8013b44 <_strtod_l+0x5c8>)
 80139be:	00db      	lsls	r3, r3, #3
 80139c0:	18c9      	adds	r1, r1, r3
 80139c2:	0032      	movs	r2, r6
 80139c4:	6808      	ldr	r0, [r1, #0]
 80139c6:	6849      	ldr	r1, [r1, #4]
 80139c8:	003b      	movs	r3, r7
 80139ca:	f7ee fb45 	bl	8002058 <__aeabi_dmul>
 80139ce:	0006      	movs	r6, r0
 80139d0:	000f      	movs	r7, r1
 80139d2:	230f      	movs	r3, #15
 80139d4:	439c      	bics	r4, r3
 80139d6:	d06e      	beq.n	8013ab6 <_strtod_l+0x53a>
 80139d8:	3326      	adds	r3, #38	; 0x26
 80139da:	33ff      	adds	r3, #255	; 0xff
 80139dc:	429c      	cmp	r4, r3
 80139de:	dd48      	ble.n	8013a72 <_strtod_l+0x4f6>
 80139e0:	2400      	movs	r4, #0
 80139e2:	9405      	str	r4, [sp, #20]
 80139e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80139e6:	940a      	str	r4, [sp, #40]	; 0x28
 80139e8:	2322      	movs	r3, #34	; 0x22
 80139ea:	2600      	movs	r6, #0
 80139ec:	9a04      	ldr	r2, [sp, #16]
 80139ee:	4f51      	ldr	r7, [pc, #324]	; (8013b34 <_strtod_l+0x5b8>)
 80139f0:	6013      	str	r3, [r2, #0]
 80139f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139f4:	42b3      	cmp	r3, r6
 80139f6:	d100      	bne.n	80139fa <_strtod_l+0x47e>
 80139f8:	e601      	b.n	80135fe <_strtod_l+0x82>
 80139fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80139fc:	9804      	ldr	r0, [sp, #16]
 80139fe:	f003 fa47 	bl	8016e90 <_Bfree>
 8013a02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a04:	9804      	ldr	r0, [sp, #16]
 8013a06:	f003 fa43 	bl	8016e90 <_Bfree>
 8013a0a:	9905      	ldr	r1, [sp, #20]
 8013a0c:	9804      	ldr	r0, [sp, #16]
 8013a0e:	f003 fa3f 	bl	8016e90 <_Bfree>
 8013a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a14:	9804      	ldr	r0, [sp, #16]
 8013a16:	f003 fa3b 	bl	8016e90 <_Bfree>
 8013a1a:	0021      	movs	r1, r4
 8013a1c:	9804      	ldr	r0, [sp, #16]
 8013a1e:	f003 fa37 	bl	8016e90 <_Bfree>
 8013a22:	e5ec      	b.n	80135fe <_strtod_l+0x82>
 8013a24:	2325      	movs	r3, #37	; 0x25
 8013a26:	9a05      	ldr	r2, [sp, #20]
 8013a28:	1a9b      	subs	r3, r3, r2
 8013a2a:	9a07      	ldr	r2, [sp, #28]
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	dbbb      	blt.n	80139a8 <_strtod_l+0x42c>
 8013a30:	230f      	movs	r3, #15
 8013a32:	9a05      	ldr	r2, [sp, #20]
 8013a34:	4c43      	ldr	r4, [pc, #268]	; (8013b44 <_strtod_l+0x5c8>)
 8013a36:	1a9d      	subs	r5, r3, r2
 8013a38:	00e9      	lsls	r1, r5, #3
 8013a3a:	1861      	adds	r1, r4, r1
 8013a3c:	0032      	movs	r2, r6
 8013a3e:	6808      	ldr	r0, [r1, #0]
 8013a40:	6849      	ldr	r1, [r1, #4]
 8013a42:	003b      	movs	r3, r7
 8013a44:	f7ee fb08 	bl	8002058 <__aeabi_dmul>
 8013a48:	9b07      	ldr	r3, [sp, #28]
 8013a4a:	1b5e      	subs	r6, r3, r5
 8013a4c:	00f6      	lsls	r6, r6, #3
 8013a4e:	19a6      	adds	r6, r4, r6
 8013a50:	6832      	ldr	r2, [r6, #0]
 8013a52:	6873      	ldr	r3, [r6, #4]
 8013a54:	e78a      	b.n	801396c <_strtod_l+0x3f0>
 8013a56:	9b07      	ldr	r3, [sp, #28]
 8013a58:	3316      	adds	r3, #22
 8013a5a:	dba5      	blt.n	80139a8 <_strtod_l+0x42c>
 8013a5c:	9b07      	ldr	r3, [sp, #28]
 8013a5e:	0030      	movs	r0, r6
 8013a60:	00da      	lsls	r2, r3, #3
 8013a62:	4b38      	ldr	r3, [pc, #224]	; (8013b44 <_strtod_l+0x5c8>)
 8013a64:	0039      	movs	r1, r7
 8013a66:	1a9b      	subs	r3, r3, r2
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	f7ed feea 	bl	8001844 <__aeabi_ddiv>
 8013a70:	e77e      	b.n	8013970 <_strtod_l+0x3f4>
 8013a72:	2300      	movs	r3, #0
 8013a74:	0030      	movs	r0, r6
 8013a76:	0039      	movs	r1, r7
 8013a78:	001d      	movs	r5, r3
 8013a7a:	1124      	asrs	r4, r4, #4
 8013a7c:	2c01      	cmp	r4, #1
 8013a7e:	dc1d      	bgt.n	8013abc <_strtod_l+0x540>
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d001      	beq.n	8013a88 <_strtod_l+0x50c>
 8013a84:	0006      	movs	r6, r0
 8013a86:	000f      	movs	r7, r1
 8013a88:	4b2f      	ldr	r3, [pc, #188]	; (8013b48 <_strtod_l+0x5cc>)
 8013a8a:	00ed      	lsls	r5, r5, #3
 8013a8c:	18ff      	adds	r7, r7, r3
 8013a8e:	4b2f      	ldr	r3, [pc, #188]	; (8013b4c <_strtod_l+0x5d0>)
 8013a90:	0032      	movs	r2, r6
 8013a92:	195d      	adds	r5, r3, r5
 8013a94:	6828      	ldr	r0, [r5, #0]
 8013a96:	6869      	ldr	r1, [r5, #4]
 8013a98:	003b      	movs	r3, r7
 8013a9a:	f7ee fadd 	bl	8002058 <__aeabi_dmul>
 8013a9e:	4b25      	ldr	r3, [pc, #148]	; (8013b34 <_strtod_l+0x5b8>)
 8013aa0:	4a2b      	ldr	r2, [pc, #172]	; (8013b50 <_strtod_l+0x5d4>)
 8013aa2:	0006      	movs	r6, r0
 8013aa4:	400b      	ands	r3, r1
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d89a      	bhi.n	80139e0 <_strtod_l+0x464>
 8013aaa:	4a2a      	ldr	r2, [pc, #168]	; (8013b54 <_strtod_l+0x5d8>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d913      	bls.n	8013ad8 <_strtod_l+0x55c>
 8013ab0:	2601      	movs	r6, #1
 8013ab2:	4f29      	ldr	r7, [pc, #164]	; (8013b58 <_strtod_l+0x5dc>)
 8013ab4:	4276      	negs	r6, r6
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	9306      	str	r3, [sp, #24]
 8013aba:	e07b      	b.n	8013bb4 <_strtod_l+0x638>
 8013abc:	2201      	movs	r2, #1
 8013abe:	4214      	tst	r4, r2
 8013ac0:	d007      	beq.n	8013ad2 <_strtod_l+0x556>
 8013ac2:	4a22      	ldr	r2, [pc, #136]	; (8013b4c <_strtod_l+0x5d0>)
 8013ac4:	00eb      	lsls	r3, r5, #3
 8013ac6:	189b      	adds	r3, r3, r2
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	f7ee fac4 	bl	8002058 <__aeabi_dmul>
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	3501      	adds	r5, #1
 8013ad4:	1064      	asrs	r4, r4, #1
 8013ad6:	e7d1      	b.n	8013a7c <_strtod_l+0x500>
 8013ad8:	23d4      	movs	r3, #212	; 0xd4
 8013ada:	049b      	lsls	r3, r3, #18
 8013adc:	18cf      	adds	r7, r1, r3
 8013ade:	e7ea      	b.n	8013ab6 <_strtod_l+0x53a>
 8013ae0:	2c00      	cmp	r4, #0
 8013ae2:	d0e8      	beq.n	8013ab6 <_strtod_l+0x53a>
 8013ae4:	230f      	movs	r3, #15
 8013ae6:	4264      	negs	r4, r4
 8013ae8:	4023      	ands	r3, r4
 8013aea:	d00a      	beq.n	8013b02 <_strtod_l+0x586>
 8013aec:	4a15      	ldr	r2, [pc, #84]	; (8013b44 <_strtod_l+0x5c8>)
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	18d3      	adds	r3, r2, r3
 8013af2:	0030      	movs	r0, r6
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	0039      	movs	r1, r7
 8013afa:	f7ed fea3 	bl	8001844 <__aeabi_ddiv>
 8013afe:	0006      	movs	r6, r0
 8013b00:	000f      	movs	r7, r1
 8013b02:	1124      	asrs	r4, r4, #4
 8013b04:	d0d7      	beq.n	8013ab6 <_strtod_l+0x53a>
 8013b06:	2c1f      	cmp	r4, #31
 8013b08:	dd28      	ble.n	8013b5c <_strtod_l+0x5e0>
 8013b0a:	2400      	movs	r4, #0
 8013b0c:	9405      	str	r4, [sp, #20]
 8013b0e:	940b      	str	r4, [sp, #44]	; 0x2c
 8013b10:	940a      	str	r4, [sp, #40]	; 0x28
 8013b12:	2322      	movs	r3, #34	; 0x22
 8013b14:	9a04      	ldr	r2, [sp, #16]
 8013b16:	2600      	movs	r6, #0
 8013b18:	6013      	str	r3, [r2, #0]
 8013b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b1c:	2700      	movs	r7, #0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d000      	beq.n	8013b24 <_strtod_l+0x5a8>
 8013b22:	e76a      	b.n	80139fa <_strtod_l+0x47e>
 8013b24:	e56b      	b.n	80135fe <_strtod_l+0x82>
 8013b26:	46c0      	nop			; (mov r8, r8)
 8013b28:	00004e1f 	.word	0x00004e1f
 8013b2c:	0801ab4d 	.word	0x0801ab4d
 8013b30:	0801aca0 	.word	0x0801aca0
 8013b34:	7ff00000 	.word	0x7ff00000
 8013b38:	0801ab55 	.word	0x0801ab55
 8013b3c:	0801ab0c 	.word	0x0801ab0c
 8013b40:	fff80000 	.word	0xfff80000
 8013b44:	0801acd8 	.word	0x0801acd8
 8013b48:	fcb00000 	.word	0xfcb00000
 8013b4c:	0801acb0 	.word	0x0801acb0
 8013b50:	7ca00000 	.word	0x7ca00000
 8013b54:	7c900000 	.word	0x7c900000
 8013b58:	7fefffff 	.word	0x7fefffff
 8013b5c:	2310      	movs	r3, #16
 8013b5e:	4023      	ands	r3, r4
 8013b60:	9306      	str	r3, [sp, #24]
 8013b62:	d001      	beq.n	8013b68 <_strtod_l+0x5ec>
 8013b64:	236a      	movs	r3, #106	; 0x6a
 8013b66:	9306      	str	r3, [sp, #24]
 8013b68:	2300      	movs	r3, #0
 8013b6a:	0030      	movs	r0, r6
 8013b6c:	0039      	movs	r1, r7
 8013b6e:	001d      	movs	r5, r3
 8013b70:	2c00      	cmp	r4, #0
 8013b72:	dd00      	ble.n	8013b76 <_strtod_l+0x5fa>
 8013b74:	e10e      	b.n	8013d94 <_strtod_l+0x818>
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d001      	beq.n	8013b7e <_strtod_l+0x602>
 8013b7a:	0006      	movs	r6, r0
 8013b7c:	000f      	movs	r7, r1
 8013b7e:	9b06      	ldr	r3, [sp, #24]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00f      	beq.n	8013ba4 <_strtod_l+0x628>
 8013b84:	236b      	movs	r3, #107	; 0x6b
 8013b86:	0079      	lsls	r1, r7, #1
 8013b88:	0d49      	lsrs	r1, r1, #21
 8013b8a:	003a      	movs	r2, r7
 8013b8c:	1a5b      	subs	r3, r3, r1
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	dd08      	ble.n	8013ba4 <_strtod_l+0x628>
 8013b92:	2b1f      	cmp	r3, #31
 8013b94:	dc00      	bgt.n	8013b98 <_strtod_l+0x61c>
 8013b96:	e112      	b.n	8013dbe <_strtod_l+0x842>
 8013b98:	2600      	movs	r6, #0
 8013b9a:	2b34      	cmp	r3, #52	; 0x34
 8013b9c:	dc00      	bgt.n	8013ba0 <_strtod_l+0x624>
 8013b9e:	e107      	b.n	8013db0 <_strtod_l+0x834>
 8013ba0:	27dc      	movs	r7, #220	; 0xdc
 8013ba2:	04bf      	lsls	r7, r7, #18
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	0030      	movs	r0, r6
 8013baa:	0039      	movs	r1, r7
 8013bac:	f7ec fc56 	bl	800045c <__aeabi_dcmpeq>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	d1aa      	bne.n	8013b0a <_strtod_l+0x58e>
 8013bb4:	9b08      	ldr	r3, [sp, #32]
 8013bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013bbc:	9b05      	ldr	r3, [sp, #20]
 8013bbe:	9804      	ldr	r0, [sp, #16]
 8013bc0:	f003 f9ae 	bl	8016f20 <__s2b>
 8013bc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d100      	bne.n	8013bcc <_strtod_l+0x650>
 8013bca:	e709      	b.n	80139e0 <_strtod_l+0x464>
 8013bcc:	9b07      	ldr	r3, [sp, #28]
 8013bce:	9a07      	ldr	r2, [sp, #28]
 8013bd0:	17db      	asrs	r3, r3, #31
 8013bd2:	4252      	negs	r2, r2
 8013bd4:	4013      	ands	r3, r2
 8013bd6:	9315      	str	r3, [sp, #84]	; 0x54
 8013bd8:	9b07      	ldr	r3, [sp, #28]
 8013bda:	2400      	movs	r4, #0
 8013bdc:	43db      	mvns	r3, r3
 8013bde:	9a07      	ldr	r2, [sp, #28]
 8013be0:	17db      	asrs	r3, r3, #31
 8013be2:	401a      	ands	r2, r3
 8013be4:	921c      	str	r2, [sp, #112]	; 0x70
 8013be6:	9405      	str	r4, [sp, #20]
 8013be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bea:	9804      	ldr	r0, [sp, #16]
 8013bec:	6859      	ldr	r1, [r3, #4]
 8013bee:	f003 f927 	bl	8016e40 <_Balloc>
 8013bf2:	900a      	str	r0, [sp, #40]	; 0x28
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d100      	bne.n	8013bfa <_strtod_l+0x67e>
 8013bf8:	e6f6      	b.n	80139e8 <_strtod_l+0x46c>
 8013bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bfe:	691b      	ldr	r3, [r3, #16]
 8013c00:	310c      	adds	r1, #12
 8013c02:	1c9a      	adds	r2, r3, #2
 8013c04:	0092      	lsls	r2, r2, #2
 8013c06:	300c      	adds	r0, #12
 8013c08:	9308      	str	r3, [sp, #32]
 8013c0a:	f7ff fa32 	bl	8013072 <memcpy>
 8013c0e:	ab24      	add	r3, sp, #144	; 0x90
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	ab23      	add	r3, sp, #140	; 0x8c
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	0032      	movs	r2, r6
 8013c18:	003b      	movs	r3, r7
 8013c1a:	9804      	ldr	r0, [sp, #16]
 8013c1c:	960e      	str	r6, [sp, #56]	; 0x38
 8013c1e:	970f      	str	r7, [sp, #60]	; 0x3c
 8013c20:	f003 fc22 	bl	8017468 <__d2b>
 8013c24:	9022      	str	r0, [sp, #136]	; 0x88
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d100      	bne.n	8013c2c <_strtod_l+0x6b0>
 8013c2a:	e6dd      	b.n	80139e8 <_strtod_l+0x46c>
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	9804      	ldr	r0, [sp, #16]
 8013c30:	f003 f9fd 	bl	801702e <__i2b>
 8013c34:	9005      	str	r0, [sp, #20]
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d100      	bne.n	8013c3c <_strtod_l+0x6c0>
 8013c3a:	e6d5      	b.n	80139e8 <_strtod_l+0x46c>
 8013c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	da00      	bge.n	8013c44 <_strtod_l+0x6c8>
 8013c42:	e0c1      	b.n	8013dc8 <_strtod_l+0x84c>
 8013c44:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c46:	189d      	adds	r5, r3, r2
 8013c48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c4a:	4694      	mov	ip, r2
 8013c4c:	9906      	ldr	r1, [sp, #24]
 8013c4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013c50:	1a5b      	subs	r3, r3, r1
 8013c52:	2136      	movs	r1, #54	; 0x36
 8013c54:	189b      	adds	r3, r3, r2
 8013c56:	1a8a      	subs	r2, r1, r2
 8013c58:	49b2      	ldr	r1, [pc, #712]	; (8013f24 <_strtod_l+0x9a8>)
 8013c5a:	3b01      	subs	r3, #1
 8013c5c:	2001      	movs	r0, #1
 8013c5e:	428b      	cmp	r3, r1
 8013c60:	db00      	blt.n	8013c64 <_strtod_l+0x6e8>
 8013c62:	e0bd      	b.n	8013de0 <_strtod_l+0x864>
 8013c64:	1ac9      	subs	r1, r1, r3
 8013c66:	1a52      	subs	r2, r2, r1
 8013c68:	291f      	cmp	r1, #31
 8013c6a:	dd00      	ble.n	8013c6e <_strtod_l+0x6f2>
 8013c6c:	e0b1      	b.n	8013dd2 <_strtod_l+0x856>
 8013c6e:	4088      	lsls	r0, r1
 8013c70:	2300      	movs	r3, #0
 8013c72:	9014      	str	r0, [sp, #80]	; 0x50
 8013c74:	9310      	str	r3, [sp, #64]	; 0x40
 8013c76:	18ab      	adds	r3, r5, r2
 8013c78:	9308      	str	r3, [sp, #32]
 8013c7a:	0013      	movs	r3, r2
 8013c7c:	9a06      	ldr	r2, [sp, #24]
 8013c7e:	4463      	add	r3, ip
 8013c80:	18d3      	adds	r3, r2, r3
 8013c82:	9a08      	ldr	r2, [sp, #32]
 8013c84:	930c      	str	r3, [sp, #48]	; 0x30
 8013c86:	002b      	movs	r3, r5
 8013c88:	4295      	cmp	r5, r2
 8013c8a:	dd00      	ble.n	8013c8e <_strtod_l+0x712>
 8013c8c:	0013      	movs	r3, r2
 8013c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c90:	4293      	cmp	r3, r2
 8013c92:	dd00      	ble.n	8013c96 <_strtod_l+0x71a>
 8013c94:	0013      	movs	r3, r2
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	dd06      	ble.n	8013ca8 <_strtod_l+0x72c>
 8013c9a:	9a08      	ldr	r2, [sp, #32]
 8013c9c:	1aed      	subs	r5, r5, r3
 8013c9e:	1ad2      	subs	r2, r2, r3
 8013ca0:	9208      	str	r2, [sp, #32]
 8013ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ca4:	1ad2      	subs	r2, r2, r3
 8013ca6:	920c      	str	r2, [sp, #48]	; 0x30
 8013ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d017      	beq.n	8013cde <_strtod_l+0x762>
 8013cae:	001a      	movs	r2, r3
 8013cb0:	9905      	ldr	r1, [sp, #20]
 8013cb2:	9804      	ldr	r0, [sp, #16]
 8013cb4:	f003 fa54 	bl	8017160 <__pow5mult>
 8013cb8:	9005      	str	r0, [sp, #20]
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d100      	bne.n	8013cc0 <_strtod_l+0x744>
 8013cbe:	e693      	b.n	80139e8 <_strtod_l+0x46c>
 8013cc0:	0001      	movs	r1, r0
 8013cc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013cc4:	9804      	ldr	r0, [sp, #16]
 8013cc6:	f003 f9bb 	bl	8017040 <__multiply>
 8013cca:	9012      	str	r0, [sp, #72]	; 0x48
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	d100      	bne.n	8013cd2 <_strtod_l+0x756>
 8013cd0:	e68a      	b.n	80139e8 <_strtod_l+0x46c>
 8013cd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013cd4:	9804      	ldr	r0, [sp, #16]
 8013cd6:	f003 f8db 	bl	8016e90 <_Bfree>
 8013cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cdc:	9322      	str	r3, [sp, #136]	; 0x88
 8013cde:	9b08      	ldr	r3, [sp, #32]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	dd00      	ble.n	8013ce6 <_strtod_l+0x76a>
 8013ce4:	e07f      	b.n	8013de6 <_strtod_l+0x86a>
 8013ce6:	9b07      	ldr	r3, [sp, #28]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	dd08      	ble.n	8013cfe <_strtod_l+0x782>
 8013cec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013cee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013cf0:	9804      	ldr	r0, [sp, #16]
 8013cf2:	f003 fa35 	bl	8017160 <__pow5mult>
 8013cf6:	900a      	str	r0, [sp, #40]	; 0x28
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d100      	bne.n	8013cfe <_strtod_l+0x782>
 8013cfc:	e674      	b.n	80139e8 <_strtod_l+0x46c>
 8013cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	dd08      	ble.n	8013d16 <_strtod_l+0x79a>
 8013d04:	001a      	movs	r2, r3
 8013d06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d08:	9804      	ldr	r0, [sp, #16]
 8013d0a:	f003 fa6b 	bl	80171e4 <__lshift>
 8013d0e:	900a      	str	r0, [sp, #40]	; 0x28
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d100      	bne.n	8013d16 <_strtod_l+0x79a>
 8013d14:	e668      	b.n	80139e8 <_strtod_l+0x46c>
 8013d16:	2d00      	cmp	r5, #0
 8013d18:	dd08      	ble.n	8013d2c <_strtod_l+0x7b0>
 8013d1a:	002a      	movs	r2, r5
 8013d1c:	9905      	ldr	r1, [sp, #20]
 8013d1e:	9804      	ldr	r0, [sp, #16]
 8013d20:	f003 fa60 	bl	80171e4 <__lshift>
 8013d24:	9005      	str	r0, [sp, #20]
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d100      	bne.n	8013d2c <_strtod_l+0x7b0>
 8013d2a:	e65d      	b.n	80139e8 <_strtod_l+0x46c>
 8013d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d30:	9804      	ldr	r0, [sp, #16]
 8013d32:	f003 fac3 	bl	80172bc <__mdiff>
 8013d36:	1e04      	subs	r4, r0, #0
 8013d38:	d100      	bne.n	8013d3c <_strtod_l+0x7c0>
 8013d3a:	e655      	b.n	80139e8 <_strtod_l+0x46c>
 8013d3c:	2500      	movs	r5, #0
 8013d3e:	68c3      	ldr	r3, [r0, #12]
 8013d40:	9905      	ldr	r1, [sp, #20]
 8013d42:	60c5      	str	r5, [r0, #12]
 8013d44:	9312      	str	r3, [sp, #72]	; 0x48
 8013d46:	f003 fa9f 	bl	8017288 <__mcmp>
 8013d4a:	42a8      	cmp	r0, r5
 8013d4c:	da55      	bge.n	8013dfa <_strtod_l+0x87e>
 8013d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d50:	42ab      	cmp	r3, r5
 8013d52:	d11b      	bne.n	8013d8c <_strtod_l+0x810>
 8013d54:	42ae      	cmp	r6, r5
 8013d56:	d119      	bne.n	8013d8c <_strtod_l+0x810>
 8013d58:	033b      	lsls	r3, r7, #12
 8013d5a:	42ab      	cmp	r3, r5
 8013d5c:	d116      	bne.n	8013d8c <_strtod_l+0x810>
 8013d5e:	22d6      	movs	r2, #214	; 0xd6
 8013d60:	4b71      	ldr	r3, [pc, #452]	; (8013f28 <_strtod_l+0x9ac>)
 8013d62:	04d2      	lsls	r2, r2, #19
 8013d64:	403b      	ands	r3, r7
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d910      	bls.n	8013d8c <_strtod_l+0x810>
 8013d6a:	6963      	ldr	r3, [r4, #20]
 8013d6c:	42ab      	cmp	r3, r5
 8013d6e:	d102      	bne.n	8013d76 <_strtod_l+0x7fa>
 8013d70:	6923      	ldr	r3, [r4, #16]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	dd0a      	ble.n	8013d8c <_strtod_l+0x810>
 8013d76:	0021      	movs	r1, r4
 8013d78:	2201      	movs	r2, #1
 8013d7a:	9804      	ldr	r0, [sp, #16]
 8013d7c:	f003 fa32 	bl	80171e4 <__lshift>
 8013d80:	9905      	ldr	r1, [sp, #20]
 8013d82:	0004      	movs	r4, r0
 8013d84:	f003 fa80 	bl	8017288 <__mcmp>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	dc6b      	bgt.n	8013e64 <_strtod_l+0x8e8>
 8013d8c:	9b06      	ldr	r3, [sp, #24]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d178      	bne.n	8013e84 <_strtod_l+0x908>
 8013d92:	e632      	b.n	80139fa <_strtod_l+0x47e>
 8013d94:	2201      	movs	r2, #1
 8013d96:	4214      	tst	r4, r2
 8013d98:	d007      	beq.n	8013daa <_strtod_l+0x82e>
 8013d9a:	4a64      	ldr	r2, [pc, #400]	; (8013f2c <_strtod_l+0x9b0>)
 8013d9c:	00eb      	lsls	r3, r5, #3
 8013d9e:	18d3      	adds	r3, r2, r3
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	f7ee f958 	bl	8002058 <__aeabi_dmul>
 8013da8:	2301      	movs	r3, #1
 8013daa:	3501      	adds	r5, #1
 8013dac:	1064      	asrs	r4, r4, #1
 8013dae:	e6df      	b.n	8013b70 <_strtod_l+0x5f4>
 8013db0:	2101      	movs	r1, #1
 8013db2:	3b20      	subs	r3, #32
 8013db4:	4249      	negs	r1, r1
 8013db6:	4099      	lsls	r1, r3
 8013db8:	400a      	ands	r2, r1
 8013dba:	0017      	movs	r7, r2
 8013dbc:	e6f2      	b.n	8013ba4 <_strtod_l+0x628>
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	4252      	negs	r2, r2
 8013dc2:	409a      	lsls	r2, r3
 8013dc4:	4016      	ands	r6, r2
 8013dc6:	e6ed      	b.n	8013ba4 <_strtod_l+0x628>
 8013dc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013dca:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013dcc:	1ad2      	subs	r2, r2, r3
 8013dce:	4694      	mov	ip, r2
 8013dd0:	e73c      	b.n	8013c4c <_strtod_l+0x6d0>
 8013dd2:	4957      	ldr	r1, [pc, #348]	; (8013f30 <_strtod_l+0x9b4>)
 8013dd4:	1acb      	subs	r3, r1, r3
 8013dd6:	0001      	movs	r1, r0
 8013dd8:	4099      	lsls	r1, r3
 8013dda:	9110      	str	r1, [sp, #64]	; 0x40
 8013ddc:	9014      	str	r0, [sp, #80]	; 0x50
 8013dde:	e74a      	b.n	8013c76 <_strtod_l+0x6fa>
 8013de0:	2300      	movs	r3, #0
 8013de2:	9310      	str	r3, [sp, #64]	; 0x40
 8013de4:	e7fa      	b.n	8013ddc <_strtod_l+0x860>
 8013de6:	9a08      	ldr	r2, [sp, #32]
 8013de8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013dea:	9804      	ldr	r0, [sp, #16]
 8013dec:	f003 f9fa 	bl	80171e4 <__lshift>
 8013df0:	9022      	str	r0, [sp, #136]	; 0x88
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d000      	beq.n	8013df8 <_strtod_l+0x87c>
 8013df6:	e776      	b.n	8013ce6 <_strtod_l+0x76a>
 8013df8:	e5f6      	b.n	80139e8 <_strtod_l+0x46c>
 8013dfa:	970c      	str	r7, [sp, #48]	; 0x30
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	d000      	beq.n	8013e02 <_strtod_l+0x886>
 8013e00:	e0a0      	b.n	8013f44 <_strtod_l+0x9c8>
 8013e02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e04:	033b      	lsls	r3, r7, #12
 8013e06:	0b1b      	lsrs	r3, r3, #12
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	d027      	beq.n	8013e5c <_strtod_l+0x8e0>
 8013e0c:	4a49      	ldr	r2, [pc, #292]	; (8013f34 <_strtod_l+0x9b8>)
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	d157      	bne.n	8013ec2 <_strtod_l+0x946>
 8013e12:	2201      	movs	r2, #1
 8013e14:	9b06      	ldr	r3, [sp, #24]
 8013e16:	4252      	negs	r2, r2
 8013e18:	0031      	movs	r1, r6
 8013e1a:	0010      	movs	r0, r2
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d00b      	beq.n	8013e38 <_strtod_l+0x8bc>
 8013e20:	25d4      	movs	r5, #212	; 0xd4
 8013e22:	4b41      	ldr	r3, [pc, #260]	; (8013f28 <_strtod_l+0x9ac>)
 8013e24:	04ed      	lsls	r5, r5, #19
 8013e26:	403b      	ands	r3, r7
 8013e28:	0010      	movs	r0, r2
 8013e2a:	42ab      	cmp	r3, r5
 8013e2c:	d804      	bhi.n	8013e38 <_strtod_l+0x8bc>
 8013e2e:	306c      	adds	r0, #108	; 0x6c
 8013e30:	0d1b      	lsrs	r3, r3, #20
 8013e32:	1ac3      	subs	r3, r0, r3
 8013e34:	409a      	lsls	r2, r3
 8013e36:	0010      	movs	r0, r2
 8013e38:	4281      	cmp	r1, r0
 8013e3a:	d142      	bne.n	8013ec2 <_strtod_l+0x946>
 8013e3c:	4b3e      	ldr	r3, [pc, #248]	; (8013f38 <_strtod_l+0x9bc>)
 8013e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d102      	bne.n	8013e4a <_strtod_l+0x8ce>
 8013e44:	1c4b      	adds	r3, r1, #1
 8013e46:	d100      	bne.n	8013e4a <_strtod_l+0x8ce>
 8013e48:	e5ce      	b.n	80139e8 <_strtod_l+0x46c>
 8013e4a:	4b37      	ldr	r3, [pc, #220]	; (8013f28 <_strtod_l+0x9ac>)
 8013e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e4e:	2600      	movs	r6, #0
 8013e50:	401a      	ands	r2, r3
 8013e52:	0013      	movs	r3, r2
 8013e54:	2280      	movs	r2, #128	; 0x80
 8013e56:	0352      	lsls	r2, r2, #13
 8013e58:	189f      	adds	r7, r3, r2
 8013e5a:	e797      	b.n	8013d8c <_strtod_l+0x810>
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d130      	bne.n	8013ec2 <_strtod_l+0x946>
 8013e60:	2e00      	cmp	r6, #0
 8013e62:	d12e      	bne.n	8013ec2 <_strtod_l+0x946>
 8013e64:	9906      	ldr	r1, [sp, #24]
 8013e66:	003b      	movs	r3, r7
 8013e68:	4a2f      	ldr	r2, [pc, #188]	; (8013f28 <_strtod_l+0x9ac>)
 8013e6a:	2900      	cmp	r1, #0
 8013e6c:	d020      	beq.n	8013eb0 <_strtod_l+0x934>
 8013e6e:	0011      	movs	r1, r2
 8013e70:	20d6      	movs	r0, #214	; 0xd6
 8013e72:	4039      	ands	r1, r7
 8013e74:	04c0      	lsls	r0, r0, #19
 8013e76:	4281      	cmp	r1, r0
 8013e78:	dc1a      	bgt.n	8013eb0 <_strtod_l+0x934>
 8013e7a:	23dc      	movs	r3, #220	; 0xdc
 8013e7c:	049b      	lsls	r3, r3, #18
 8013e7e:	4299      	cmp	r1, r3
 8013e80:	dc00      	bgt.n	8013e84 <_strtod_l+0x908>
 8013e82:	e646      	b.n	8013b12 <_strtod_l+0x596>
 8013e84:	4b2d      	ldr	r3, [pc, #180]	; (8013f3c <_strtod_l+0x9c0>)
 8013e86:	0030      	movs	r0, r6
 8013e88:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e92:	0039      	movs	r1, r7
 8013e94:	f7ee f8e0 	bl	8002058 <__aeabi_dmul>
 8013e98:	0006      	movs	r6, r0
 8013e9a:	000f      	movs	r7, r1
 8013e9c:	1e0b      	subs	r3, r1, #0
 8013e9e:	d000      	beq.n	8013ea2 <_strtod_l+0x926>
 8013ea0:	e5ab      	b.n	80139fa <_strtod_l+0x47e>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d000      	beq.n	8013ea8 <_strtod_l+0x92c>
 8013ea6:	e5a8      	b.n	80139fa <_strtod_l+0x47e>
 8013ea8:	9a04      	ldr	r2, [sp, #16]
 8013eaa:	3322      	adds	r3, #34	; 0x22
 8013eac:	6013      	str	r3, [r2, #0]
 8013eae:	e5a4      	b.n	80139fa <_strtod_l+0x47e>
 8013eb0:	2601      	movs	r6, #1
 8013eb2:	4013      	ands	r3, r2
 8013eb4:	4a22      	ldr	r2, [pc, #136]	; (8013f40 <_strtod_l+0x9c4>)
 8013eb6:	4276      	negs	r6, r6
 8013eb8:	189b      	adds	r3, r3, r2
 8013eba:	4a1e      	ldr	r2, [pc, #120]	; (8013f34 <_strtod_l+0x9b8>)
 8013ebc:	431a      	orrs	r2, r3
 8013ebe:	0017      	movs	r7, r2
 8013ec0:	e764      	b.n	8013d8c <_strtod_l+0x810>
 8013ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d015      	beq.n	8013ef4 <_strtod_l+0x978>
 8013ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ecc:	4213      	tst	r3, r2
 8013ece:	d100      	bne.n	8013ed2 <_strtod_l+0x956>
 8013ed0:	e75c      	b.n	8013d8c <_strtod_l+0x810>
 8013ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ed4:	9a06      	ldr	r2, [sp, #24]
 8013ed6:	0030      	movs	r0, r6
 8013ed8:	0039      	movs	r1, r7
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00f      	beq.n	8013efe <_strtod_l+0x982>
 8013ede:	f7ff fb35 	bl	801354c <sulp>
 8013ee2:	0002      	movs	r2, r0
 8013ee4:	000b      	movs	r3, r1
 8013ee6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013ee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013eea:	f7ed f98f 	bl	800120c <__aeabi_dadd>
 8013eee:	0006      	movs	r6, r0
 8013ef0:	000f      	movs	r7, r1
 8013ef2:	e74b      	b.n	8013d8c <_strtod_l+0x810>
 8013ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ef6:	4233      	tst	r3, r6
 8013ef8:	d100      	bne.n	8013efc <_strtod_l+0x980>
 8013efa:	e747      	b.n	8013d8c <_strtod_l+0x810>
 8013efc:	e7e9      	b.n	8013ed2 <_strtod_l+0x956>
 8013efe:	f7ff fb25 	bl	801354c <sulp>
 8013f02:	0002      	movs	r2, r0
 8013f04:	000b      	movs	r3, r1
 8013f06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013f08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013f0a:	f7ee fb17 	bl	800253c <__aeabi_dsub>
 8013f0e:	2200      	movs	r2, #0
 8013f10:	2300      	movs	r3, #0
 8013f12:	0006      	movs	r6, r0
 8013f14:	000f      	movs	r7, r1
 8013f16:	f7ec faa1 	bl	800045c <__aeabi_dcmpeq>
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	d000      	beq.n	8013f20 <_strtod_l+0x9a4>
 8013f1e:	e5f8      	b.n	8013b12 <_strtod_l+0x596>
 8013f20:	e734      	b.n	8013d8c <_strtod_l+0x810>
 8013f22:	46c0      	nop			; (mov r8, r8)
 8013f24:	fffffc02 	.word	0xfffffc02
 8013f28:	7ff00000 	.word	0x7ff00000
 8013f2c:	0801ab20 	.word	0x0801ab20
 8013f30:	fffffbe2 	.word	0xfffffbe2
 8013f34:	000fffff 	.word	0x000fffff
 8013f38:	7fefffff 	.word	0x7fefffff
 8013f3c:	39500000 	.word	0x39500000
 8013f40:	fff00000 	.word	0xfff00000
 8013f44:	9905      	ldr	r1, [sp, #20]
 8013f46:	0020      	movs	r0, r4
 8013f48:	f003 fae2 	bl	8017510 <__ratio>
 8013f4c:	2380      	movs	r3, #128	; 0x80
 8013f4e:	2200      	movs	r2, #0
 8013f50:	05db      	lsls	r3, r3, #23
 8013f52:	9008      	str	r0, [sp, #32]
 8013f54:	9109      	str	r1, [sp, #36]	; 0x24
 8013f56:	f7ec fa91 	bl	800047c <__aeabi_dcmple>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	d100      	bne.n	8013f60 <_strtod_l+0x9e4>
 8013f5e:	e07f      	b.n	8014060 <_strtod_l+0xae4>
 8013f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d04b      	beq.n	8013ffe <_strtod_l+0xa82>
 8013f66:	2200      	movs	r2, #0
 8013f68:	4b8a      	ldr	r3, [pc, #552]	; (8014194 <_strtod_l+0xc18>)
 8013f6a:	9210      	str	r2, [sp, #64]	; 0x40
 8013f6c:	9311      	str	r3, [sp, #68]	; 0x44
 8013f6e:	4b89      	ldr	r3, [pc, #548]	; (8014194 <_strtod_l+0xc18>)
 8013f70:	9308      	str	r3, [sp, #32]
 8013f72:	4a89      	ldr	r2, [pc, #548]	; (8014198 <_strtod_l+0xc1c>)
 8013f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f76:	4013      	ands	r3, r2
 8013f78:	9314      	str	r3, [sp, #80]	; 0x50
 8013f7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f7c:	4b87      	ldr	r3, [pc, #540]	; (801419c <_strtod_l+0xc20>)
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d000      	beq.n	8013f84 <_strtod_l+0xa08>
 8013f82:	e0ba      	b.n	80140fa <_strtod_l+0xb7e>
 8013f84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f88:	921a      	str	r2, [sp, #104]	; 0x68
 8013f8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f8c:	4a84      	ldr	r2, [pc, #528]	; (80141a0 <_strtod_l+0xc24>)
 8013f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f90:	4694      	mov	ip, r2
 8013f92:	4463      	add	r3, ip
 8013f94:	001f      	movs	r7, r3
 8013f96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f9a:	0030      	movs	r0, r6
 8013f9c:	0039      	movs	r1, r7
 8013f9e:	920c      	str	r2, [sp, #48]	; 0x30
 8013fa0:	930d      	str	r3, [sp, #52]	; 0x34
 8013fa2:	f003 f9ef 	bl	8017384 <__ulp>
 8013fa6:	0002      	movs	r2, r0
 8013fa8:	000b      	movs	r3, r1
 8013faa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013fac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013fae:	f7ee f853 	bl	8002058 <__aeabi_dmul>
 8013fb2:	0032      	movs	r2, r6
 8013fb4:	003b      	movs	r3, r7
 8013fb6:	f7ed f929 	bl	800120c <__aeabi_dadd>
 8013fba:	4a77      	ldr	r2, [pc, #476]	; (8014198 <_strtod_l+0xc1c>)
 8013fbc:	4b79      	ldr	r3, [pc, #484]	; (80141a4 <_strtod_l+0xc28>)
 8013fbe:	0006      	movs	r6, r0
 8013fc0:	400a      	ands	r2, r1
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d964      	bls.n	8014090 <_strtod_l+0xb14>
 8013fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fc8:	4a77      	ldr	r2, [pc, #476]	; (80141a8 <_strtod_l+0xc2c>)
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d103      	bne.n	8013fd6 <_strtod_l+0xa5a>
 8013fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	d100      	bne.n	8013fd6 <_strtod_l+0xa5a>
 8013fd4:	e508      	b.n	80139e8 <_strtod_l+0x46c>
 8013fd6:	2601      	movs	r6, #1
 8013fd8:	4f73      	ldr	r7, [pc, #460]	; (80141a8 <_strtod_l+0xc2c>)
 8013fda:	4276      	negs	r6, r6
 8013fdc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013fde:	9804      	ldr	r0, [sp, #16]
 8013fe0:	f002 ff56 	bl	8016e90 <_Bfree>
 8013fe4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013fe6:	9804      	ldr	r0, [sp, #16]
 8013fe8:	f002 ff52 	bl	8016e90 <_Bfree>
 8013fec:	9905      	ldr	r1, [sp, #20]
 8013fee:	9804      	ldr	r0, [sp, #16]
 8013ff0:	f002 ff4e 	bl	8016e90 <_Bfree>
 8013ff4:	0021      	movs	r1, r4
 8013ff6:	9804      	ldr	r0, [sp, #16]
 8013ff8:	f002 ff4a 	bl	8016e90 <_Bfree>
 8013ffc:	e5f4      	b.n	8013be8 <_strtod_l+0x66c>
 8013ffe:	2e00      	cmp	r6, #0
 8014000:	d11e      	bne.n	8014040 <_strtod_l+0xac4>
 8014002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014004:	031b      	lsls	r3, r3, #12
 8014006:	d121      	bne.n	801404c <_strtod_l+0xad0>
 8014008:	9808      	ldr	r0, [sp, #32]
 801400a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801400c:	2200      	movs	r2, #0
 801400e:	4b61      	ldr	r3, [pc, #388]	; (8014194 <_strtod_l+0xc18>)
 8014010:	f7ec fa2a 	bl	8000468 <__aeabi_dcmplt>
 8014014:	2800      	cmp	r0, #0
 8014016:	d11f      	bne.n	8014058 <_strtod_l+0xadc>
 8014018:	9808      	ldr	r0, [sp, #32]
 801401a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801401c:	2200      	movs	r2, #0
 801401e:	4b63      	ldr	r3, [pc, #396]	; (80141ac <_strtod_l+0xc30>)
 8014020:	f7ee f81a 	bl	8002058 <__aeabi_dmul>
 8014024:	0005      	movs	r5, r0
 8014026:	9108      	str	r1, [sp, #32]
 8014028:	2280      	movs	r2, #128	; 0x80
 801402a:	0612      	lsls	r2, r2, #24
 801402c:	4694      	mov	ip, r2
 801402e:	9b08      	ldr	r3, [sp, #32]
 8014030:	951e      	str	r5, [sp, #120]	; 0x78
 8014032:	4463      	add	r3, ip
 8014034:	931f      	str	r3, [sp, #124]	; 0x7c
 8014036:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801403a:	9210      	str	r2, [sp, #64]	; 0x40
 801403c:	9311      	str	r3, [sp, #68]	; 0x44
 801403e:	e798      	b.n	8013f72 <_strtod_l+0x9f6>
 8014040:	2e01      	cmp	r6, #1
 8014042:	d103      	bne.n	801404c <_strtod_l+0xad0>
 8014044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014046:	2b00      	cmp	r3, #0
 8014048:	d100      	bne.n	801404c <_strtod_l+0xad0>
 801404a:	e562      	b.n	8013b12 <_strtod_l+0x596>
 801404c:	2200      	movs	r2, #0
 801404e:	4b58      	ldr	r3, [pc, #352]	; (80141b0 <_strtod_l+0xc34>)
 8014050:	2500      	movs	r5, #0
 8014052:	9210      	str	r2, [sp, #64]	; 0x40
 8014054:	9311      	str	r3, [sp, #68]	; 0x44
 8014056:	e78a      	b.n	8013f6e <_strtod_l+0x9f2>
 8014058:	4b54      	ldr	r3, [pc, #336]	; (80141ac <_strtod_l+0xc30>)
 801405a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801405c:	9308      	str	r3, [sp, #32]
 801405e:	e7e3      	b.n	8014028 <_strtod_l+0xaac>
 8014060:	4b52      	ldr	r3, [pc, #328]	; (80141ac <_strtod_l+0xc30>)
 8014062:	9808      	ldr	r0, [sp, #32]
 8014064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014066:	2200      	movs	r2, #0
 8014068:	f7ed fff6 	bl	8002058 <__aeabi_dmul>
 801406c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801406e:	0005      	movs	r5, r0
 8014070:	9108      	str	r1, [sp, #32]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d107      	bne.n	8014086 <_strtod_l+0xb0a>
 8014076:	2380      	movs	r3, #128	; 0x80
 8014078:	061b      	lsls	r3, r3, #24
 801407a:	18cb      	adds	r3, r1, r3
 801407c:	9016      	str	r0, [sp, #88]	; 0x58
 801407e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014080:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014084:	e7d9      	b.n	801403a <_strtod_l+0xabe>
 8014086:	0002      	movs	r2, r0
 8014088:	9b08      	ldr	r3, [sp, #32]
 801408a:	9216      	str	r2, [sp, #88]	; 0x58
 801408c:	9317      	str	r3, [sp, #92]	; 0x5c
 801408e:	e7f7      	b.n	8014080 <_strtod_l+0xb04>
 8014090:	23d4      	movs	r3, #212	; 0xd4
 8014092:	049b      	lsls	r3, r3, #18
 8014094:	18cf      	adds	r7, r1, r3
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d19f      	bne.n	8013fdc <_strtod_l+0xa60>
 801409c:	4b3e      	ldr	r3, [pc, #248]	; (8014198 <_strtod_l+0xc1c>)
 801409e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80140a0:	970c      	str	r7, [sp, #48]	; 0x30
 80140a2:	403b      	ands	r3, r7
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d199      	bne.n	8013fdc <_strtod_l+0xa60>
 80140a8:	9908      	ldr	r1, [sp, #32]
 80140aa:	0028      	movs	r0, r5
 80140ac:	f7ee fdaa 	bl	8002c04 <__aeabi_d2iz>
 80140b0:	f7ee fdde 	bl	8002c70 <__aeabi_i2d>
 80140b4:	000b      	movs	r3, r1
 80140b6:	0002      	movs	r2, r0
 80140b8:	9908      	ldr	r1, [sp, #32]
 80140ba:	0028      	movs	r0, r5
 80140bc:	f7ee fa3e 	bl	800253c <__aeabi_dsub>
 80140c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140c2:	9008      	str	r0, [sp, #32]
 80140c4:	9109      	str	r1, [sp, #36]	; 0x24
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d104      	bne.n	80140d4 <_strtod_l+0xb58>
 80140ca:	2e00      	cmp	r6, #0
 80140cc:	d102      	bne.n	80140d4 <_strtod_l+0xb58>
 80140ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140d0:	031b      	lsls	r3, r3, #12
 80140d2:	d058      	beq.n	8014186 <_strtod_l+0xc0a>
 80140d4:	9808      	ldr	r0, [sp, #32]
 80140d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140d8:	4a36      	ldr	r2, [pc, #216]	; (80141b4 <_strtod_l+0xc38>)
 80140da:	4b37      	ldr	r3, [pc, #220]	; (80141b8 <_strtod_l+0xc3c>)
 80140dc:	f7ec f9c4 	bl	8000468 <__aeabi_dcmplt>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d000      	beq.n	80140e6 <_strtod_l+0xb6a>
 80140e4:	e489      	b.n	80139fa <_strtod_l+0x47e>
 80140e6:	9808      	ldr	r0, [sp, #32]
 80140e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ea:	4a34      	ldr	r2, [pc, #208]	; (80141bc <_strtod_l+0xc40>)
 80140ec:	4b2f      	ldr	r3, [pc, #188]	; (80141ac <_strtod_l+0xc30>)
 80140ee:	f7ec f9cf 	bl	8000490 <__aeabi_dcmpgt>
 80140f2:	2800      	cmp	r0, #0
 80140f4:	d100      	bne.n	80140f8 <_strtod_l+0xb7c>
 80140f6:	e771      	b.n	8013fdc <_strtod_l+0xa60>
 80140f8:	e47f      	b.n	80139fa <_strtod_l+0x47e>
 80140fa:	9b06      	ldr	r3, [sp, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d02a      	beq.n	8014156 <_strtod_l+0xbda>
 8014100:	23d4      	movs	r3, #212	; 0xd4
 8014102:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014104:	04db      	lsls	r3, r3, #19
 8014106:	429a      	cmp	r2, r3
 8014108:	d825      	bhi.n	8014156 <_strtod_l+0xbda>
 801410a:	4a2d      	ldr	r2, [pc, #180]	; (80141c0 <_strtod_l+0xc44>)
 801410c:	4b2d      	ldr	r3, [pc, #180]	; (80141c4 <_strtod_l+0xc48>)
 801410e:	0028      	movs	r0, r5
 8014110:	9908      	ldr	r1, [sp, #32]
 8014112:	f7ec f9b3 	bl	800047c <__aeabi_dcmple>
 8014116:	2800      	cmp	r0, #0
 8014118:	d016      	beq.n	8014148 <_strtod_l+0xbcc>
 801411a:	0028      	movs	r0, r5
 801411c:	9908      	ldr	r1, [sp, #32]
 801411e:	f7ec fa67 	bl	80005f0 <__aeabi_d2uiz>
 8014122:	2800      	cmp	r0, #0
 8014124:	d100      	bne.n	8014128 <_strtod_l+0xbac>
 8014126:	3001      	adds	r0, #1
 8014128:	f7ee fddc 	bl	8002ce4 <__aeabi_ui2d>
 801412c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801412e:	0005      	movs	r5, r0
 8014130:	9108      	str	r1, [sp, #32]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d122      	bne.n	801417c <_strtod_l+0xc00>
 8014136:	2380      	movs	r3, #128	; 0x80
 8014138:	061b      	lsls	r3, r3, #24
 801413a:	18cb      	adds	r3, r1, r3
 801413c:	9018      	str	r0, [sp, #96]	; 0x60
 801413e:	9319      	str	r3, [sp, #100]	; 0x64
 8014140:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014142:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014144:	9210      	str	r2, [sp, #64]	; 0x40
 8014146:	9311      	str	r3, [sp, #68]	; 0x44
 8014148:	22d6      	movs	r2, #214	; 0xd6
 801414a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801414c:	04d2      	lsls	r2, r2, #19
 801414e:	189b      	adds	r3, r3, r2
 8014150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014152:	1a9b      	subs	r3, r3, r2
 8014154:	9311      	str	r3, [sp, #68]	; 0x44
 8014156:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014158:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801415a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801415c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801415e:	f003 f911 	bl	8017384 <__ulp>
 8014162:	0002      	movs	r2, r0
 8014164:	000b      	movs	r3, r1
 8014166:	0030      	movs	r0, r6
 8014168:	0039      	movs	r1, r7
 801416a:	f7ed ff75 	bl	8002058 <__aeabi_dmul>
 801416e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014172:	f7ed f84b 	bl	800120c <__aeabi_dadd>
 8014176:	0006      	movs	r6, r0
 8014178:	000f      	movs	r7, r1
 801417a:	e78c      	b.n	8014096 <_strtod_l+0xb1a>
 801417c:	0002      	movs	r2, r0
 801417e:	9b08      	ldr	r3, [sp, #32]
 8014180:	9218      	str	r2, [sp, #96]	; 0x60
 8014182:	9319      	str	r3, [sp, #100]	; 0x64
 8014184:	e7dc      	b.n	8014140 <_strtod_l+0xbc4>
 8014186:	4a0b      	ldr	r2, [pc, #44]	; (80141b4 <_strtod_l+0xc38>)
 8014188:	4b0f      	ldr	r3, [pc, #60]	; (80141c8 <_strtod_l+0xc4c>)
 801418a:	9808      	ldr	r0, [sp, #32]
 801418c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801418e:	f7ec f96b 	bl	8000468 <__aeabi_dcmplt>
 8014192:	e7ae      	b.n	80140f2 <_strtod_l+0xb76>
 8014194:	3ff00000 	.word	0x3ff00000
 8014198:	7ff00000 	.word	0x7ff00000
 801419c:	7fe00000 	.word	0x7fe00000
 80141a0:	fcb00000 	.word	0xfcb00000
 80141a4:	7c9fffff 	.word	0x7c9fffff
 80141a8:	7fefffff 	.word	0x7fefffff
 80141ac:	3fe00000 	.word	0x3fe00000
 80141b0:	bff00000 	.word	0xbff00000
 80141b4:	94a03595 	.word	0x94a03595
 80141b8:	3fdfffff 	.word	0x3fdfffff
 80141bc:	35afe535 	.word	0x35afe535
 80141c0:	ffc00000 	.word	0xffc00000
 80141c4:	41dfffff 	.word	0x41dfffff
 80141c8:	3fcfffff 	.word	0x3fcfffff

080141cc <strtod>:
 80141cc:	4b06      	ldr	r3, [pc, #24]	; (80141e8 <strtod+0x1c>)
 80141ce:	b510      	push	{r4, lr}
 80141d0:	0004      	movs	r4, r0
 80141d2:	6818      	ldr	r0, [r3, #0]
 80141d4:	000a      	movs	r2, r1
 80141d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d100      	bne.n	80141de <strtod+0x12>
 80141dc:	4b03      	ldr	r3, [pc, #12]	; (80141ec <strtod+0x20>)
 80141de:	0021      	movs	r1, r4
 80141e0:	f7ff f9cc 	bl	801357c <_strtod_l>
 80141e4:	bd10      	pop	{r4, pc}
 80141e6:	46c0      	nop			; (mov r8, r8)
 80141e8:	200000d0 	.word	0x200000d0
 80141ec:	20000500 	.word	0x20000500

080141f0 <strtok>:
 80141f0:	4b03      	ldr	r3, [pc, #12]	; (8014200 <strtok+0x10>)
 80141f2:	b510      	push	{r4, lr}
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	2301      	movs	r3, #1
 80141f8:	325c      	adds	r2, #92	; 0x5c
 80141fa:	f000 f803 	bl	8014204 <__strtok_r>
 80141fe:	bd10      	pop	{r4, pc}
 8014200:	200000d0 	.word	0x200000d0

08014204 <__strtok_r>:
 8014204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014206:	2800      	cmp	r0, #0
 8014208:	d104      	bne.n	8014214 <__strtok_r+0x10>
 801420a:	6810      	ldr	r0, [r2, #0]
 801420c:	2800      	cmp	r0, #0
 801420e:	d101      	bne.n	8014214 <__strtok_r+0x10>
 8014210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014212:	0020      	movs	r0, r4
 8014214:	000e      	movs	r6, r1
 8014216:	7805      	ldrb	r5, [r0, #0]
 8014218:	1c44      	adds	r4, r0, #1
 801421a:	7837      	ldrb	r7, [r6, #0]
 801421c:	2f00      	cmp	r7, #0
 801421e:	d104      	bne.n	801422a <__strtok_r+0x26>
 8014220:	2d00      	cmp	r5, #0
 8014222:	d110      	bne.n	8014246 <__strtok_r+0x42>
 8014224:	6015      	str	r5, [r2, #0]
 8014226:	0028      	movs	r0, r5
 8014228:	e7f2      	b.n	8014210 <__strtok_r+0xc>
 801422a:	3601      	adds	r6, #1
 801422c:	42bd      	cmp	r5, r7
 801422e:	d1f4      	bne.n	801421a <__strtok_r+0x16>
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1ee      	bne.n	8014212 <__strtok_r+0xe>
 8014234:	6014      	str	r4, [r2, #0]
 8014236:	7003      	strb	r3, [r0, #0]
 8014238:	e7ea      	b.n	8014210 <__strtok_r+0xc>
 801423a:	0033      	movs	r3, r6
 801423c:	e00d      	b.n	801425a <__strtok_r+0x56>
 801423e:	3501      	adds	r5, #1
 8014240:	2f00      	cmp	r7, #0
 8014242:	d103      	bne.n	801424c <__strtok_r+0x48>
 8014244:	001c      	movs	r4, r3
 8014246:	000d      	movs	r5, r1
 8014248:	7826      	ldrb	r6, [r4, #0]
 801424a:	1c63      	adds	r3, r4, #1
 801424c:	782f      	ldrb	r7, [r5, #0]
 801424e:	42be      	cmp	r6, r7
 8014250:	d1f5      	bne.n	801423e <__strtok_r+0x3a>
 8014252:	2e00      	cmp	r6, #0
 8014254:	d0f1      	beq.n	801423a <__strtok_r+0x36>
 8014256:	2100      	movs	r1, #0
 8014258:	7021      	strb	r1, [r4, #0]
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e7d8      	b.n	8014210 <__strtok_r+0xc>
	...

08014260 <_strtol_l.isra.0>:
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	001f      	movs	r7, r3
 8014264:	000e      	movs	r6, r1
 8014266:	b087      	sub	sp, #28
 8014268:	9005      	str	r0, [sp, #20]
 801426a:	9101      	str	r1, [sp, #4]
 801426c:	9202      	str	r2, [sp, #8]
 801426e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014270:	7834      	ldrb	r4, [r6, #0]
 8014272:	f7fe fc9f 	bl	8012bb4 <__locale_ctype_ptr_l>
 8014276:	2208      	movs	r2, #8
 8014278:	1900      	adds	r0, r0, r4
 801427a:	7843      	ldrb	r3, [r0, #1]
 801427c:	1c75      	adds	r5, r6, #1
 801427e:	4013      	ands	r3, r2
 8014280:	d136      	bne.n	80142f0 <_strtol_l.isra.0+0x90>
 8014282:	2c2d      	cmp	r4, #45	; 0x2d
 8014284:	d136      	bne.n	80142f4 <_strtol_l.isra.0+0x94>
 8014286:	1cb5      	adds	r5, r6, #2
 8014288:	7874      	ldrb	r4, [r6, #1]
 801428a:	2601      	movs	r6, #1
 801428c:	2f00      	cmp	r7, #0
 801428e:	d062      	beq.n	8014356 <_strtol_l.isra.0+0xf6>
 8014290:	2f10      	cmp	r7, #16
 8014292:	d109      	bne.n	80142a8 <_strtol_l.isra.0+0x48>
 8014294:	2c30      	cmp	r4, #48	; 0x30
 8014296:	d107      	bne.n	80142a8 <_strtol_l.isra.0+0x48>
 8014298:	2220      	movs	r2, #32
 801429a:	782b      	ldrb	r3, [r5, #0]
 801429c:	4393      	bics	r3, r2
 801429e:	2b58      	cmp	r3, #88	; 0x58
 80142a0:	d154      	bne.n	801434c <_strtol_l.isra.0+0xec>
 80142a2:	2710      	movs	r7, #16
 80142a4:	786c      	ldrb	r4, [r5, #1]
 80142a6:	3502      	adds	r5, #2
 80142a8:	4b2d      	ldr	r3, [pc, #180]	; (8014360 <_strtol_l.isra.0+0x100>)
 80142aa:	0039      	movs	r1, r7
 80142ac:	18f3      	adds	r3, r6, r3
 80142ae:	0018      	movs	r0, r3
 80142b0:	9303      	str	r3, [sp, #12]
 80142b2:	f7eb ffd3 	bl	800025c <__aeabi_uidivmod>
 80142b6:	9104      	str	r1, [sp, #16]
 80142b8:	2101      	movs	r1, #1
 80142ba:	2300      	movs	r3, #0
 80142bc:	4249      	negs	r1, r1
 80142be:	0002      	movs	r2, r0
 80142c0:	468c      	mov	ip, r1
 80142c2:	0018      	movs	r0, r3
 80142c4:	0021      	movs	r1, r4
 80142c6:	3930      	subs	r1, #48	; 0x30
 80142c8:	2909      	cmp	r1, #9
 80142ca:	d81a      	bhi.n	8014302 <_strtol_l.isra.0+0xa2>
 80142cc:	000c      	movs	r4, r1
 80142ce:	42a7      	cmp	r7, r4
 80142d0:	dd23      	ble.n	801431a <_strtol_l.isra.0+0xba>
 80142d2:	1c59      	adds	r1, r3, #1
 80142d4:	d009      	beq.n	80142ea <_strtol_l.isra.0+0x8a>
 80142d6:	4663      	mov	r3, ip
 80142d8:	4282      	cmp	r2, r0
 80142da:	d306      	bcc.n	80142ea <_strtol_l.isra.0+0x8a>
 80142dc:	d102      	bne.n	80142e4 <_strtol_l.isra.0+0x84>
 80142de:	9904      	ldr	r1, [sp, #16]
 80142e0:	42a1      	cmp	r1, r4
 80142e2:	db02      	blt.n	80142ea <_strtol_l.isra.0+0x8a>
 80142e4:	2301      	movs	r3, #1
 80142e6:	4378      	muls	r0, r7
 80142e8:	1820      	adds	r0, r4, r0
 80142ea:	782c      	ldrb	r4, [r5, #0]
 80142ec:	3501      	adds	r5, #1
 80142ee:	e7e9      	b.n	80142c4 <_strtol_l.isra.0+0x64>
 80142f0:	002e      	movs	r6, r5
 80142f2:	e7bc      	b.n	801426e <_strtol_l.isra.0+0xe>
 80142f4:	2c2b      	cmp	r4, #43	; 0x2b
 80142f6:	d001      	beq.n	80142fc <_strtol_l.isra.0+0x9c>
 80142f8:	001e      	movs	r6, r3
 80142fa:	e7c7      	b.n	801428c <_strtol_l.isra.0+0x2c>
 80142fc:	1cb5      	adds	r5, r6, #2
 80142fe:	7874      	ldrb	r4, [r6, #1]
 8014300:	e7fa      	b.n	80142f8 <_strtol_l.isra.0+0x98>
 8014302:	0021      	movs	r1, r4
 8014304:	3941      	subs	r1, #65	; 0x41
 8014306:	2919      	cmp	r1, #25
 8014308:	d801      	bhi.n	801430e <_strtol_l.isra.0+0xae>
 801430a:	3c37      	subs	r4, #55	; 0x37
 801430c:	e7df      	b.n	80142ce <_strtol_l.isra.0+0x6e>
 801430e:	0021      	movs	r1, r4
 8014310:	3961      	subs	r1, #97	; 0x61
 8014312:	2919      	cmp	r1, #25
 8014314:	d801      	bhi.n	801431a <_strtol_l.isra.0+0xba>
 8014316:	3c57      	subs	r4, #87	; 0x57
 8014318:	e7d9      	b.n	80142ce <_strtol_l.isra.0+0x6e>
 801431a:	1c5a      	adds	r2, r3, #1
 801431c:	d108      	bne.n	8014330 <_strtol_l.isra.0+0xd0>
 801431e:	9a05      	ldr	r2, [sp, #20]
 8014320:	3323      	adds	r3, #35	; 0x23
 8014322:	6013      	str	r3, [r2, #0]
 8014324:	9b02      	ldr	r3, [sp, #8]
 8014326:	9803      	ldr	r0, [sp, #12]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d109      	bne.n	8014340 <_strtol_l.isra.0+0xe0>
 801432c:	b007      	add	sp, #28
 801432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014330:	2e00      	cmp	r6, #0
 8014332:	d000      	beq.n	8014336 <_strtol_l.isra.0+0xd6>
 8014334:	4240      	negs	r0, r0
 8014336:	9a02      	ldr	r2, [sp, #8]
 8014338:	2a00      	cmp	r2, #0
 801433a:	d0f7      	beq.n	801432c <_strtol_l.isra.0+0xcc>
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <_strtol_l.isra.0+0xe4>
 8014340:	1e6b      	subs	r3, r5, #1
 8014342:	9301      	str	r3, [sp, #4]
 8014344:	9b02      	ldr	r3, [sp, #8]
 8014346:	9a01      	ldr	r2, [sp, #4]
 8014348:	601a      	str	r2, [r3, #0]
 801434a:	e7ef      	b.n	801432c <_strtol_l.isra.0+0xcc>
 801434c:	2430      	movs	r4, #48	; 0x30
 801434e:	2f00      	cmp	r7, #0
 8014350:	d1aa      	bne.n	80142a8 <_strtol_l.isra.0+0x48>
 8014352:	2708      	movs	r7, #8
 8014354:	e7a8      	b.n	80142a8 <_strtol_l.isra.0+0x48>
 8014356:	2c30      	cmp	r4, #48	; 0x30
 8014358:	d09e      	beq.n	8014298 <_strtol_l.isra.0+0x38>
 801435a:	270a      	movs	r7, #10
 801435c:	e7a4      	b.n	80142a8 <_strtol_l.isra.0+0x48>
 801435e:	46c0      	nop			; (mov r8, r8)
 8014360:	7fffffff 	.word	0x7fffffff

08014364 <strtol>:
 8014364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014366:	0013      	movs	r3, r2
 8014368:	4a06      	ldr	r2, [pc, #24]	; (8014384 <strtol+0x20>)
 801436a:	0005      	movs	r5, r0
 801436c:	6810      	ldr	r0, [r2, #0]
 801436e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014370:	2c00      	cmp	r4, #0
 8014372:	d100      	bne.n	8014376 <strtol+0x12>
 8014374:	4c04      	ldr	r4, [pc, #16]	; (8014388 <strtol+0x24>)
 8014376:	000a      	movs	r2, r1
 8014378:	9400      	str	r4, [sp, #0]
 801437a:	0029      	movs	r1, r5
 801437c:	f7ff ff70 	bl	8014260 <_strtol_l.isra.0>
 8014380:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8014382:	46c0      	nop			; (mov r8, r8)
 8014384:	200000d0 	.word	0x200000d0
 8014388:	20000500 	.word	0x20000500

0801438c <_svfprintf_r>:
 801438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801438e:	b0d9      	sub	sp, #356	; 0x164
 8014390:	910b      	str	r1, [sp, #44]	; 0x2c
 8014392:	9209      	str	r2, [sp, #36]	; 0x24
 8014394:	001c      	movs	r4, r3
 8014396:	900a      	str	r0, [sp, #40]	; 0x28
 8014398:	f002 fd26 	bl	8016de8 <_localeconv_r>
 801439c:	6803      	ldr	r3, [r0, #0]
 801439e:	0018      	movs	r0, r3
 80143a0:	931c      	str	r3, [sp, #112]	; 0x70
 80143a2:	f7eb feb9 	bl	8000118 <strlen>
 80143a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143a8:	9014      	str	r0, [sp, #80]	; 0x50
 80143aa:	899b      	ldrh	r3, [r3, #12]
 80143ac:	061b      	lsls	r3, r3, #24
 80143ae:	d518      	bpl.n	80143e2 <_svfprintf_r+0x56>
 80143b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	9308      	str	r3, [sp, #32]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d113      	bne.n	80143e2 <_svfprintf_r+0x56>
 80143ba:	2140      	movs	r1, #64	; 0x40
 80143bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143be:	f7fe fc1f 	bl	8012c00 <_malloc_r>
 80143c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143c4:	6018      	str	r0, [r3, #0]
 80143c6:	6118      	str	r0, [r3, #16]
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d107      	bne.n	80143dc <_svfprintf_r+0x50>
 80143cc:	230c      	movs	r3, #12
 80143ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143d0:	6013      	str	r3, [r2, #0]
 80143d2:	3b0d      	subs	r3, #13
 80143d4:	9315      	str	r3, [sp, #84]	; 0x54
 80143d6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80143d8:	b059      	add	sp, #356	; 0x164
 80143da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143dc:	2340      	movs	r3, #64	; 0x40
 80143de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143e0:	6153      	str	r3, [r2, #20]
 80143e2:	2600      	movs	r6, #0
 80143e4:	af2f      	add	r7, sp, #188	; 0xbc
 80143e6:	972c      	str	r7, [sp, #176]	; 0xb0
 80143e8:	962e      	str	r6, [sp, #184]	; 0xb8
 80143ea:	962d      	str	r6, [sp, #180]	; 0xb4
 80143ec:	960d      	str	r6, [sp, #52]	; 0x34
 80143ee:	961a      	str	r6, [sp, #104]	; 0x68
 80143f0:	9619      	str	r6, [sp, #100]	; 0x64
 80143f2:	961e      	str	r6, [sp, #120]	; 0x78
 80143f4:	961d      	str	r6, [sp, #116]	; 0x74
 80143f6:	9613      	str	r6, [sp, #76]	; 0x4c
 80143f8:	961b      	str	r6, [sp, #108]	; 0x6c
 80143fa:	961f      	str	r6, [sp, #124]	; 0x7c
 80143fc:	9615      	str	r6, [sp, #84]	; 0x54
 80143fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014400:	782b      	ldrb	r3, [r5, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d002      	beq.n	801440c <_svfprintf_r+0x80>
 8014406:	2b25      	cmp	r3, #37	; 0x25
 8014408:	d000      	beq.n	801440c <_svfprintf_r+0x80>
 801440a:	e095      	b.n	8014538 <_svfprintf_r+0x1ac>
 801440c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801440e:	1aee      	subs	r6, r5, r3
 8014410:	d017      	beq.n	8014442 <_svfprintf_r+0xb6>
 8014412:	603b      	str	r3, [r7, #0]
 8014414:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014416:	607e      	str	r6, [r7, #4]
 8014418:	199b      	adds	r3, r3, r6
 801441a:	932e      	str	r3, [sp, #184]	; 0xb8
 801441c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801441e:	3708      	adds	r7, #8
 8014420:	9308      	str	r3, [sp, #32]
 8014422:	3301      	adds	r3, #1
 8014424:	932d      	str	r3, [sp, #180]	; 0xb4
 8014426:	2b07      	cmp	r3, #7
 8014428:	dd08      	ble.n	801443c <_svfprintf_r+0xb0>
 801442a:	aa2c      	add	r2, sp, #176	; 0xb0
 801442c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801442e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014430:	f003 f900 	bl	8017634 <__ssprint_r>
 8014434:	2800      	cmp	r0, #0
 8014436:	d000      	beq.n	801443a <_svfprintf_r+0xae>
 8014438:	e2d9      	b.n	80149ee <_svfprintf_r+0x662>
 801443a:	af2f      	add	r7, sp, #188	; 0xbc
 801443c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801443e:	199b      	adds	r3, r3, r6
 8014440:	9315      	str	r3, [sp, #84]	; 0x54
 8014442:	782b      	ldrb	r3, [r5, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d101      	bne.n	801444c <_svfprintf_r+0xc0>
 8014448:	f001 f9e5 	bl	8015816 <_svfprintf_r+0x148a>
 801444c:	1c6b      	adds	r3, r5, #1
 801444e:	221b      	movs	r2, #27
 8014450:	9311      	str	r3, [sp, #68]	; 0x44
 8014452:	2300      	movs	r3, #0
 8014454:	a91e      	add	r1, sp, #120	; 0x78
 8014456:	1852      	adds	r2, r2, r1
 8014458:	7013      	strb	r3, [r2, #0]
 801445a:	2201      	movs	r2, #1
 801445c:	001e      	movs	r6, r3
 801445e:	2520      	movs	r5, #32
 8014460:	4252      	negs	r2, r2
 8014462:	9208      	str	r2, [sp, #32]
 8014464:	9316      	str	r3, [sp, #88]	; 0x58
 8014466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	930e      	str	r3, [sp, #56]	; 0x38
 801446c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801446e:	3301      	adds	r3, #1
 8014470:	9311      	str	r3, [sp, #68]	; 0x44
 8014472:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014474:	3820      	subs	r0, #32
 8014476:	285a      	cmp	r0, #90	; 0x5a
 8014478:	d901      	bls.n	801447e <_svfprintf_r+0xf2>
 801447a:	f000 fe3d 	bl	80150f8 <_svfprintf_r+0xd6c>
 801447e:	f7eb fe5d 	bl	800013c <__gnu_thumb1_case_shi>
 8014482:	009e      	.short	0x009e
 8014484:	063b063b 	.word	0x063b063b
 8014488:	063b00a7 	.word	0x063b00a7
 801448c:	063b063b 	.word	0x063b063b
 8014490:	063b0080 	.word	0x063b0080
 8014494:	00a9063b 	.word	0x00a9063b
 8014498:	063b00b3 	.word	0x063b00b3
 801449c:	00b900b1 	.word	0x00b900b1
 80144a0:	00dd063b 	.word	0x00dd063b
 80144a4:	00df00df 	.word	0x00df00df
 80144a8:	00df00df 	.word	0x00df00df
 80144ac:	00df00df 	.word	0x00df00df
 80144b0:	00df00df 	.word	0x00df00df
 80144b4:	063b00df 	.word	0x063b00df
 80144b8:	063b063b 	.word	0x063b063b
 80144bc:	063b063b 	.word	0x063b063b
 80144c0:	063b063b 	.word	0x063b063b
 80144c4:	063b0240 	.word	0x063b0240
 80144c8:	01fd010a 	.word	0x01fd010a
 80144cc:	02400240 	.word	0x02400240
 80144d0:	063b0240 	.word	0x063b0240
 80144d4:	063b063b 	.word	0x063b063b
 80144d8:	00f1063b 	.word	0x00f1063b
 80144dc:	063b063b 	.word	0x063b063b
 80144e0:	063b04e2 	.word	0x063b04e2
 80144e4:	063b063b 	.word	0x063b063b
 80144e8:	063b0537 	.word	0x063b0537
 80144ec:	063b0557 	.word	0x063b0557
 80144f0:	005d063b 	.word	0x005d063b
 80144f4:	063b063b 	.word	0x063b063b
 80144f8:	063b063b 	.word	0x063b063b
 80144fc:	063b063b 	.word	0x063b063b
 8014500:	063b063b 	.word	0x063b063b
 8014504:	063b0240 	.word	0x063b0240
 8014508:	01ff010a 	.word	0x01ff010a
 801450c:	02400240 	.word	0x02400240
 8014510:	00f30240 	.word	0x00f30240
 8014514:	010601ff 	.word	0x010601ff
 8014518:	00ff063b 	.word	0x00ff063b
 801451c:	04c5063b 	.word	0x04c5063b
 8014520:	052704e4 	.word	0x052704e4
 8014524:	063b0106 	.word	0x063b0106
 8014528:	fff20537 	.word	0xfff20537
 801452c:	063b0559 	.word	0x063b0559
 8014530:	0582063b 	.word	0x0582063b
 8014534:	fff2063b 	.word	0xfff2063b
 8014538:	3501      	adds	r5, #1
 801453a:	e761      	b.n	8014400 <_svfprintf_r+0x74>
 801453c:	4bcb      	ldr	r3, [pc, #812]	; (801486c <_svfprintf_r+0x4e0>)
 801453e:	2220      	movs	r2, #32
 8014540:	931e      	str	r3, [sp, #120]	; 0x78
 8014542:	4032      	ands	r2, r6
 8014544:	d101      	bne.n	801454a <_svfprintf_r+0x1be>
 8014546:	f000 fd21 	bl	8014f8c <_svfprintf_r+0xc00>
 801454a:	2307      	movs	r3, #7
 801454c:	3407      	adds	r4, #7
 801454e:	439c      	bics	r4, r3
 8014550:	0023      	movs	r3, r4
 8014552:	3308      	adds	r3, #8
 8014554:	9312      	str	r3, [sp, #72]	; 0x48
 8014556:	6823      	ldr	r3, [r4, #0]
 8014558:	6864      	ldr	r4, [r4, #4]
 801455a:	9306      	str	r3, [sp, #24]
 801455c:	9407      	str	r4, [sp, #28]
 801455e:	07f3      	lsls	r3, r6, #31
 8014560:	d50a      	bpl.n	8014578 <_svfprintf_r+0x1ec>
 8014562:	9b06      	ldr	r3, [sp, #24]
 8014564:	9a07      	ldr	r2, [sp, #28]
 8014566:	4313      	orrs	r3, r2
 8014568:	d006      	beq.n	8014578 <_svfprintf_r+0x1ec>
 801456a:	2230      	movs	r2, #48	; 0x30
 801456c:	ab25      	add	r3, sp, #148	; 0x94
 801456e:	701a      	strb	r2, [r3, #0]
 8014570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014572:	705a      	strb	r2, [r3, #1]
 8014574:	2302      	movs	r3, #2
 8014576:	431e      	orrs	r6, r3
 8014578:	4bbd      	ldr	r3, [pc, #756]	; (8014870 <_svfprintf_r+0x4e4>)
 801457a:	401e      	ands	r6, r3
 801457c:	2302      	movs	r3, #2
 801457e:	f000 fc74 	bl	8014e6a <_svfprintf_r+0xade>
 8014582:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014584:	f002 fc30 	bl	8016de8 <_localeconv_r>
 8014588:	6843      	ldr	r3, [r0, #4]
 801458a:	0018      	movs	r0, r3
 801458c:	931f      	str	r3, [sp, #124]	; 0x7c
 801458e:	f7eb fdc3 	bl	8000118 <strlen>
 8014592:	901b      	str	r0, [sp, #108]	; 0x6c
 8014594:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014596:	f002 fc27 	bl	8016de8 <_localeconv_r>
 801459a:	6883      	ldr	r3, [r0, #8]
 801459c:	9313      	str	r3, [sp, #76]	; 0x4c
 801459e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d100      	bne.n	80145a6 <_svfprintf_r+0x21a>
 80145a4:	e75f      	b.n	8014466 <_svfprintf_r+0xda>
 80145a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d100      	bne.n	80145ae <_svfprintf_r+0x222>
 80145ac:	e75b      	b.n	8014466 <_svfprintf_r+0xda>
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d100      	bne.n	80145b6 <_svfprintf_r+0x22a>
 80145b4:	e757      	b.n	8014466 <_svfprintf_r+0xda>
 80145b6:	2380      	movs	r3, #128	; 0x80
 80145b8:	00db      	lsls	r3, r3, #3
 80145ba:	431e      	orrs	r6, r3
 80145bc:	e753      	b.n	8014466 <_svfprintf_r+0xda>
 80145be:	231b      	movs	r3, #27
 80145c0:	aa1e      	add	r2, sp, #120	; 0x78
 80145c2:	189b      	adds	r3, r3, r2
 80145c4:	781a      	ldrb	r2, [r3, #0]
 80145c6:	2a00      	cmp	r2, #0
 80145c8:	d000      	beq.n	80145cc <_svfprintf_r+0x240>
 80145ca:	e74c      	b.n	8014466 <_svfprintf_r+0xda>
 80145cc:	701d      	strb	r5, [r3, #0]
 80145ce:	e74a      	b.n	8014466 <_svfprintf_r+0xda>
 80145d0:	2301      	movs	r3, #1
 80145d2:	e7f2      	b.n	80145ba <_svfprintf_r+0x22e>
 80145d4:	6823      	ldr	r3, [r4, #0]
 80145d6:	3404      	adds	r4, #4
 80145d8:	9316      	str	r3, [sp, #88]	; 0x58
 80145da:	2b00      	cmp	r3, #0
 80145dc:	db00      	blt.n	80145e0 <_svfprintf_r+0x254>
 80145de:	e742      	b.n	8014466 <_svfprintf_r+0xda>
 80145e0:	425b      	negs	r3, r3
 80145e2:	9316      	str	r3, [sp, #88]	; 0x58
 80145e4:	2304      	movs	r3, #4
 80145e6:	e7e8      	b.n	80145ba <_svfprintf_r+0x22e>
 80145e8:	231b      	movs	r3, #27
 80145ea:	aa1e      	add	r2, sp, #120	; 0x78
 80145ec:	189b      	adds	r3, r3, r2
 80145ee:	222b      	movs	r2, #43	; 0x2b
 80145f0:	701a      	strb	r2, [r3, #0]
 80145f2:	e738      	b.n	8014466 <_svfprintf_r+0xda>
 80145f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145f8:	7812      	ldrb	r2, [r2, #0]
 80145fa:	3301      	adds	r3, #1
 80145fc:	920e      	str	r2, [sp, #56]	; 0x38
 80145fe:	2a2a      	cmp	r2, #42	; 0x2a
 8014600:	d008      	beq.n	8014614 <_svfprintf_r+0x288>
 8014602:	2200      	movs	r2, #0
 8014604:	9208      	str	r2, [sp, #32]
 8014606:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014608:	001a      	movs	r2, r3
 801460a:	3930      	subs	r1, #48	; 0x30
 801460c:	2909      	cmp	r1, #9
 801460e:	d90c      	bls.n	801462a <_svfprintf_r+0x29e>
 8014610:	9211      	str	r2, [sp, #68]	; 0x44
 8014612:	e72e      	b.n	8014472 <_svfprintf_r+0xe6>
 8014614:	6821      	ldr	r1, [r4, #0]
 8014616:	1d22      	adds	r2, r4, #4
 8014618:	9108      	str	r1, [sp, #32]
 801461a:	2900      	cmp	r1, #0
 801461c:	da02      	bge.n	8014624 <_svfprintf_r+0x298>
 801461e:	2101      	movs	r1, #1
 8014620:	4249      	negs	r1, r1
 8014622:	9108      	str	r1, [sp, #32]
 8014624:	0014      	movs	r4, r2
 8014626:	9311      	str	r3, [sp, #68]	; 0x44
 8014628:	e71d      	b.n	8014466 <_svfprintf_r+0xda>
 801462a:	200a      	movs	r0, #10
 801462c:	9a08      	ldr	r2, [sp, #32]
 801462e:	4342      	muls	r2, r0
 8014630:	1852      	adds	r2, r2, r1
 8014632:	9208      	str	r2, [sp, #32]
 8014634:	781a      	ldrb	r2, [r3, #0]
 8014636:	3301      	adds	r3, #1
 8014638:	920e      	str	r2, [sp, #56]	; 0x38
 801463a:	e7e4      	b.n	8014606 <_svfprintf_r+0x27a>
 801463c:	2380      	movs	r3, #128	; 0x80
 801463e:	e7bc      	b.n	80145ba <_svfprintf_r+0x22e>
 8014640:	2300      	movs	r3, #0
 8014642:	9316      	str	r3, [sp, #88]	; 0x58
 8014644:	220a      	movs	r2, #10
 8014646:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014648:	4353      	muls	r3, r2
 801464a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801464c:	3a30      	subs	r2, #48	; 0x30
 801464e:	18d3      	adds	r3, r2, r3
 8014650:	9316      	str	r3, [sp, #88]	; 0x58
 8014652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	9211      	str	r2, [sp, #68]	; 0x44
 801465a:	930e      	str	r3, [sp, #56]	; 0x38
 801465c:	3b30      	subs	r3, #48	; 0x30
 801465e:	2b09      	cmp	r3, #9
 8014660:	d9f0      	bls.n	8014644 <_svfprintf_r+0x2b8>
 8014662:	e7d5      	b.n	8014610 <_svfprintf_r+0x284>
 8014664:	2308      	movs	r3, #8
 8014666:	e7a8      	b.n	80145ba <_svfprintf_r+0x22e>
 8014668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	2b68      	cmp	r3, #104	; 0x68
 801466e:	d105      	bne.n	801467c <_svfprintf_r+0x2f0>
 8014670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014672:	3301      	adds	r3, #1
 8014674:	9311      	str	r3, [sp, #68]	; 0x44
 8014676:	2380      	movs	r3, #128	; 0x80
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	e79e      	b.n	80145ba <_svfprintf_r+0x22e>
 801467c:	2340      	movs	r3, #64	; 0x40
 801467e:	e79c      	b.n	80145ba <_svfprintf_r+0x22e>
 8014680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	2b6c      	cmp	r3, #108	; 0x6c
 8014686:	d104      	bne.n	8014692 <_svfprintf_r+0x306>
 8014688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801468a:	3301      	adds	r3, #1
 801468c:	9311      	str	r3, [sp, #68]	; 0x44
 801468e:	432e      	orrs	r6, r5
 8014690:	e6e9      	b.n	8014466 <_svfprintf_r+0xda>
 8014692:	2310      	movs	r3, #16
 8014694:	e791      	b.n	80145ba <_svfprintf_r+0x22e>
 8014696:	1d23      	adds	r3, r4, #4
 8014698:	6822      	ldr	r2, [r4, #0]
 801469a:	9312      	str	r3, [sp, #72]	; 0x48
 801469c:	ab3f      	add	r3, sp, #252	; 0xfc
 801469e:	701a      	strb	r2, [r3, #0]
 80146a0:	221b      	movs	r2, #27
 80146a2:	2000      	movs	r0, #0
 80146a4:	a91e      	add	r1, sp, #120	; 0x78
 80146a6:	1852      	adds	r2, r2, r1
 80146a8:	7010      	strb	r0, [r2, #0]
 80146aa:	2201      	movs	r2, #1
 80146ac:	0005      	movs	r5, r0
 80146ae:	900c      	str	r0, [sp, #48]	; 0x30
 80146b0:	9208      	str	r2, [sp, #32]
 80146b2:	9017      	str	r0, [sp, #92]	; 0x5c
 80146b4:	9010      	str	r0, [sp, #64]	; 0x40
 80146b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80146b8:	9309      	str	r3, [sp, #36]	; 0x24
 80146ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146bc:	9a08      	ldr	r2, [sp, #32]
 80146be:	9318      	str	r3, [sp, #96]	; 0x60
 80146c0:	4293      	cmp	r3, r2
 80146c2:	da00      	bge.n	80146c6 <_svfprintf_r+0x33a>
 80146c4:	9218      	str	r2, [sp, #96]	; 0x60
 80146c6:	231b      	movs	r3, #27
 80146c8:	aa1e      	add	r2, sp, #120	; 0x78
 80146ca:	189b      	adds	r3, r3, r2
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	1e5a      	subs	r2, r3, #1
 80146d0:	4193      	sbcs	r3, r2
 80146d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146d4:	18d3      	adds	r3, r2, r3
 80146d6:	9318      	str	r3, [sp, #96]	; 0x60
 80146d8:	2302      	movs	r3, #2
 80146da:	4033      	ands	r3, r6
 80146dc:	9320      	str	r3, [sp, #128]	; 0x80
 80146de:	d002      	beq.n	80146e6 <_svfprintf_r+0x35a>
 80146e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80146e2:	3302      	adds	r3, #2
 80146e4:	9318      	str	r3, [sp, #96]	; 0x60
 80146e6:	2384      	movs	r3, #132	; 0x84
 80146e8:	4033      	ands	r3, r6
 80146ea:	9321      	str	r3, [sp, #132]	; 0x84
 80146ec:	d121      	bne.n	8014732 <_svfprintf_r+0x3a6>
 80146ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80146f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146f2:	1a9c      	subs	r4, r3, r2
 80146f4:	2c00      	cmp	r4, #0
 80146f6:	dd1c      	ble.n	8014732 <_svfprintf_r+0x3a6>
 80146f8:	0039      	movs	r1, r7
 80146fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146fc:	485d      	ldr	r0, [pc, #372]	; (8014874 <_svfprintf_r+0x4e8>)
 80146fe:	9322      	str	r3, [sp, #136]	; 0x88
 8014700:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014702:	3301      	adds	r3, #1
 8014704:	3108      	adds	r1, #8
 8014706:	6038      	str	r0, [r7, #0]
 8014708:	2c10      	cmp	r4, #16
 801470a:	dd01      	ble.n	8014710 <_svfprintf_r+0x384>
 801470c:	f000 fd08 	bl	8015120 <_svfprintf_r+0xd94>
 8014710:	607c      	str	r4, [r7, #4]
 8014712:	18a4      	adds	r4, r4, r2
 8014714:	942e      	str	r4, [sp, #184]	; 0xb8
 8014716:	932d      	str	r3, [sp, #180]	; 0xb4
 8014718:	000f      	movs	r7, r1
 801471a:	2b07      	cmp	r3, #7
 801471c:	dd09      	ble.n	8014732 <_svfprintf_r+0x3a6>
 801471e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014722:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014724:	f002 ff86 	bl	8017634 <__ssprint_r>
 8014728:	2800      	cmp	r0, #0
 801472a:	d001      	beq.n	8014730 <_svfprintf_r+0x3a4>
 801472c:	f001 f852 	bl	80157d4 <_svfprintf_r+0x1448>
 8014730:	af2f      	add	r7, sp, #188	; 0xbc
 8014732:	231b      	movs	r3, #27
 8014734:	aa1e      	add	r2, sp, #120	; 0x78
 8014736:	189b      	adds	r3, r3, r2
 8014738:	781a      	ldrb	r2, [r3, #0]
 801473a:	2a00      	cmp	r2, #0
 801473c:	d017      	beq.n	801476e <_svfprintf_r+0x3e2>
 801473e:	603b      	str	r3, [r7, #0]
 8014740:	2301      	movs	r3, #1
 8014742:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014744:	607b      	str	r3, [r7, #4]
 8014746:	0013      	movs	r3, r2
 8014748:	3301      	adds	r3, #1
 801474a:	932e      	str	r3, [sp, #184]	; 0xb8
 801474c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801474e:	3708      	adds	r7, #8
 8014750:	9322      	str	r3, [sp, #136]	; 0x88
 8014752:	3301      	adds	r3, #1
 8014754:	932d      	str	r3, [sp, #180]	; 0xb4
 8014756:	2b07      	cmp	r3, #7
 8014758:	dd09      	ble.n	801476e <_svfprintf_r+0x3e2>
 801475a:	aa2c      	add	r2, sp, #176	; 0xb0
 801475c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801475e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014760:	f002 ff68 	bl	8017634 <__ssprint_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	d001      	beq.n	801476c <_svfprintf_r+0x3e0>
 8014768:	f001 f834 	bl	80157d4 <_svfprintf_r+0x1448>
 801476c:	af2f      	add	r7, sp, #188	; 0xbc
 801476e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014770:	2b00      	cmp	r3, #0
 8014772:	d019      	beq.n	80147a8 <_svfprintf_r+0x41c>
 8014774:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014776:	9320      	str	r3, [sp, #128]	; 0x80
 8014778:	ab25      	add	r3, sp, #148	; 0x94
 801477a:	603b      	str	r3, [r7, #0]
 801477c:	2302      	movs	r3, #2
 801477e:	607b      	str	r3, [r7, #4]
 8014780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014782:	3708      	adds	r7, #8
 8014784:	3302      	adds	r3, #2
 8014786:	932e      	str	r3, [sp, #184]	; 0xb8
 8014788:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801478a:	9320      	str	r3, [sp, #128]	; 0x80
 801478c:	3301      	adds	r3, #1
 801478e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014790:	2b07      	cmp	r3, #7
 8014792:	dd09      	ble.n	80147a8 <_svfprintf_r+0x41c>
 8014794:	aa2c      	add	r2, sp, #176	; 0xb0
 8014796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014798:	980a      	ldr	r0, [sp, #40]	; 0x28
 801479a:	f002 ff4b 	bl	8017634 <__ssprint_r>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d001      	beq.n	80147a6 <_svfprintf_r+0x41a>
 80147a2:	f001 f817 	bl	80157d4 <_svfprintf_r+0x1448>
 80147a6:	af2f      	add	r7, sp, #188	; 0xbc
 80147a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147aa:	2b80      	cmp	r3, #128	; 0x80
 80147ac:	d121      	bne.n	80147f2 <_svfprintf_r+0x466>
 80147ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80147b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80147b2:	1a9c      	subs	r4, r3, r2
 80147b4:	2c00      	cmp	r4, #0
 80147b6:	dd1c      	ble.n	80147f2 <_svfprintf_r+0x466>
 80147b8:	0039      	movs	r1, r7
 80147ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147bc:	482e      	ldr	r0, [pc, #184]	; (8014878 <_svfprintf_r+0x4ec>)
 80147be:	9320      	str	r3, [sp, #128]	; 0x80
 80147c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147c2:	3301      	adds	r3, #1
 80147c4:	3108      	adds	r1, #8
 80147c6:	6038      	str	r0, [r7, #0]
 80147c8:	2c10      	cmp	r4, #16
 80147ca:	dd01      	ble.n	80147d0 <_svfprintf_r+0x444>
 80147cc:	f000 fcbc 	bl	8015148 <_svfprintf_r+0xdbc>
 80147d0:	607c      	str	r4, [r7, #4]
 80147d2:	18a4      	adds	r4, r4, r2
 80147d4:	942e      	str	r4, [sp, #184]	; 0xb8
 80147d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80147d8:	000f      	movs	r7, r1
 80147da:	2b07      	cmp	r3, #7
 80147dc:	dd09      	ble.n	80147f2 <_svfprintf_r+0x466>
 80147de:	aa2c      	add	r2, sp, #176	; 0xb0
 80147e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147e4:	f002 ff26 	bl	8017634 <__ssprint_r>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	d001      	beq.n	80147f0 <_svfprintf_r+0x464>
 80147ec:	f000 fff2 	bl	80157d4 <_svfprintf_r+0x1448>
 80147f0:	af2f      	add	r7, sp, #188	; 0xbc
 80147f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147f4:	9a08      	ldr	r2, [sp, #32]
 80147f6:	1a9c      	subs	r4, r3, r2
 80147f8:	2c00      	cmp	r4, #0
 80147fa:	dd1c      	ble.n	8014836 <_svfprintf_r+0x4aa>
 80147fc:	0039      	movs	r1, r7
 80147fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014800:	481d      	ldr	r0, [pc, #116]	; (8014878 <_svfprintf_r+0x4ec>)
 8014802:	9317      	str	r3, [sp, #92]	; 0x5c
 8014804:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014806:	3301      	adds	r3, #1
 8014808:	3108      	adds	r1, #8
 801480a:	6038      	str	r0, [r7, #0]
 801480c:	2c10      	cmp	r4, #16
 801480e:	dd01      	ble.n	8014814 <_svfprintf_r+0x488>
 8014810:	f000 fcb4 	bl	801517c <_svfprintf_r+0xdf0>
 8014814:	18a2      	adds	r2, r4, r2
 8014816:	607c      	str	r4, [r7, #4]
 8014818:	922e      	str	r2, [sp, #184]	; 0xb8
 801481a:	932d      	str	r3, [sp, #180]	; 0xb4
 801481c:	000f      	movs	r7, r1
 801481e:	2b07      	cmp	r3, #7
 8014820:	dd09      	ble.n	8014836 <_svfprintf_r+0x4aa>
 8014822:	aa2c      	add	r2, sp, #176	; 0xb0
 8014824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014828:	f002 ff04 	bl	8017634 <__ssprint_r>
 801482c:	2800      	cmp	r0, #0
 801482e:	d001      	beq.n	8014834 <_svfprintf_r+0x4a8>
 8014830:	f000 ffd0 	bl	80157d4 <_svfprintf_r+0x1448>
 8014834:	af2f      	add	r7, sp, #188	; 0xbc
 8014836:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014838:	9317      	str	r3, [sp, #92]	; 0x5c
 801483a:	05f3      	lsls	r3, r6, #23
 801483c:	d501      	bpl.n	8014842 <_svfprintf_r+0x4b6>
 801483e:	f000 fcb1 	bl	80151a4 <_svfprintf_r+0xe18>
 8014842:	9a08      	ldr	r2, [sp, #32]
 8014844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014846:	4694      	mov	ip, r2
 8014848:	603b      	str	r3, [r7, #0]
 801484a:	9b08      	ldr	r3, [sp, #32]
 801484c:	607b      	str	r3, [r7, #4]
 801484e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014850:	4463      	add	r3, ip
 8014852:	932e      	str	r3, [sp, #184]	; 0xb8
 8014854:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014856:	9308      	str	r3, [sp, #32]
 8014858:	3301      	adds	r3, #1
 801485a:	932d      	str	r3, [sp, #180]	; 0xb4
 801485c:	2b07      	cmp	r3, #7
 801485e:	dd01      	ble.n	8014864 <_svfprintf_r+0x4d8>
 8014860:	f000 fd94 	bl	801538c <_svfprintf_r+0x1000>
 8014864:	3708      	adds	r7, #8
 8014866:	f000 fce4 	bl	8015232 <_svfprintf_r+0xea6>
 801486a:	46c0      	nop			; (mov r8, r8)
 801486c:	0801ab69 	.word	0x0801ab69
 8014870:	fffffbff 	.word	0xfffffbff
 8014874:	0801ab7c 	.word	0x0801ab7c
 8014878:	0801ab8c 	.word	0x0801ab8c
 801487c:	2310      	movs	r3, #16
 801487e:	431e      	orrs	r6, r3
 8014880:	06b3      	lsls	r3, r6, #26
 8014882:	d52c      	bpl.n	80148de <_svfprintf_r+0x552>
 8014884:	2307      	movs	r3, #7
 8014886:	3407      	adds	r4, #7
 8014888:	439c      	bics	r4, r3
 801488a:	0023      	movs	r3, r4
 801488c:	3308      	adds	r3, #8
 801488e:	9312      	str	r3, [sp, #72]	; 0x48
 8014890:	6823      	ldr	r3, [r4, #0]
 8014892:	6864      	ldr	r4, [r4, #4]
 8014894:	9306      	str	r3, [sp, #24]
 8014896:	9407      	str	r4, [sp, #28]
 8014898:	9b07      	ldr	r3, [sp, #28]
 801489a:	2b00      	cmp	r3, #0
 801489c:	da0b      	bge.n	80148b6 <_svfprintf_r+0x52a>
 801489e:	9906      	ldr	r1, [sp, #24]
 80148a0:	9a07      	ldr	r2, [sp, #28]
 80148a2:	2400      	movs	r4, #0
 80148a4:	424b      	negs	r3, r1
 80148a6:	4194      	sbcs	r4, r2
 80148a8:	9306      	str	r3, [sp, #24]
 80148aa:	9407      	str	r4, [sp, #28]
 80148ac:	231b      	movs	r3, #27
 80148ae:	aa1e      	add	r2, sp, #120	; 0x78
 80148b0:	189b      	adds	r3, r3, r2
 80148b2:	222d      	movs	r2, #45	; 0x2d
 80148b4:	701a      	strb	r2, [r3, #0]
 80148b6:	9b08      	ldr	r3, [sp, #32]
 80148b8:	3301      	adds	r3, #1
 80148ba:	d000      	beq.n	80148be <_svfprintf_r+0x532>
 80148bc:	e382      	b.n	8014fc4 <_svfprintf_r+0xc38>
 80148be:	9b07      	ldr	r3, [sp, #28]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d000      	beq.n	80148c6 <_svfprintf_r+0x53a>
 80148c4:	e3b0      	b.n	8015028 <_svfprintf_r+0xc9c>
 80148c6:	9b06      	ldr	r3, [sp, #24]
 80148c8:	2b09      	cmp	r3, #9
 80148ca:	d900      	bls.n	80148ce <_svfprintf_r+0x542>
 80148cc:	e3ac      	b.n	8015028 <_svfprintf_r+0xc9c>
 80148ce:	23e7      	movs	r3, #231	; 0xe7
 80148d0:	aa1e      	add	r2, sp, #120	; 0x78
 80148d2:	189b      	adds	r3, r3, r2
 80148d4:	9a06      	ldr	r2, [sp, #24]
 80148d6:	3230      	adds	r2, #48	; 0x30
 80148d8:	701a      	strb	r2, [r3, #0]
 80148da:	9309      	str	r3, [sp, #36]	; 0x24
 80148dc:	e395      	b.n	801500a <_svfprintf_r+0xc7e>
 80148de:	1d23      	adds	r3, r4, #4
 80148e0:	9312      	str	r3, [sp, #72]	; 0x48
 80148e2:	06f3      	lsls	r3, r6, #27
 80148e4:	d504      	bpl.n	80148f0 <_svfprintf_r+0x564>
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	9306      	str	r3, [sp, #24]
 80148ea:	17db      	asrs	r3, r3, #31
 80148ec:	9307      	str	r3, [sp, #28]
 80148ee:	e7d3      	b.n	8014898 <_svfprintf_r+0x50c>
 80148f0:	6823      	ldr	r3, [r4, #0]
 80148f2:	0672      	lsls	r2, r6, #25
 80148f4:	d501      	bpl.n	80148fa <_svfprintf_r+0x56e>
 80148f6:	b21b      	sxth	r3, r3
 80148f8:	e7f6      	b.n	80148e8 <_svfprintf_r+0x55c>
 80148fa:	05b2      	lsls	r2, r6, #22
 80148fc:	d5f4      	bpl.n	80148e8 <_svfprintf_r+0x55c>
 80148fe:	b25b      	sxtb	r3, r3
 8014900:	e7f2      	b.n	80148e8 <_svfprintf_r+0x55c>
 8014902:	2307      	movs	r3, #7
 8014904:	3407      	adds	r4, #7
 8014906:	439c      	bics	r4, r3
 8014908:	0023      	movs	r3, r4
 801490a:	2201      	movs	r2, #1
 801490c:	3308      	adds	r3, #8
 801490e:	9312      	str	r3, [sp, #72]	; 0x48
 8014910:	6823      	ldr	r3, [r4, #0]
 8014912:	4252      	negs	r2, r2
 8014914:	931a      	str	r3, [sp, #104]	; 0x68
 8014916:	6863      	ldr	r3, [r4, #4]
 8014918:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801491a:	005c      	lsls	r4, r3, #1
 801491c:	0864      	lsrs	r4, r4, #1
 801491e:	9319      	str	r3, [sp, #100]	; 0x64
 8014920:	0028      	movs	r0, r5
 8014922:	4bcf      	ldr	r3, [pc, #828]	; (8014c60 <_svfprintf_r+0x8d4>)
 8014924:	0021      	movs	r1, r4
 8014926:	f7ee f951 	bl	8002bcc <__aeabi_dcmpun>
 801492a:	2800      	cmp	r0, #0
 801492c:	d125      	bne.n	801497a <_svfprintf_r+0x5ee>
 801492e:	2201      	movs	r2, #1
 8014930:	4bcb      	ldr	r3, [pc, #812]	; (8014c60 <_svfprintf_r+0x8d4>)
 8014932:	4252      	negs	r2, r2
 8014934:	0028      	movs	r0, r5
 8014936:	0021      	movs	r1, r4
 8014938:	f7eb fda0 	bl	800047c <__aeabi_dcmple>
 801493c:	2800      	cmp	r0, #0
 801493e:	d11c      	bne.n	801497a <_svfprintf_r+0x5ee>
 8014940:	2200      	movs	r2, #0
 8014942:	2300      	movs	r3, #0
 8014944:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014946:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014948:	f7eb fd8e 	bl	8000468 <__aeabi_dcmplt>
 801494c:	2800      	cmp	r0, #0
 801494e:	d004      	beq.n	801495a <_svfprintf_r+0x5ce>
 8014950:	231b      	movs	r3, #27
 8014952:	aa1e      	add	r2, sp, #120	; 0x78
 8014954:	189b      	adds	r3, r3, r2
 8014956:	222d      	movs	r2, #45	; 0x2d
 8014958:	701a      	strb	r2, [r3, #0]
 801495a:	4bc2      	ldr	r3, [pc, #776]	; (8014c64 <_svfprintf_r+0x8d8>)
 801495c:	9309      	str	r3, [sp, #36]	; 0x24
 801495e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014960:	2b47      	cmp	r3, #71	; 0x47
 8014962:	dc01      	bgt.n	8014968 <_svfprintf_r+0x5dc>
 8014964:	4bc0      	ldr	r3, [pc, #768]	; (8014c68 <_svfprintf_r+0x8dc>)
 8014966:	9309      	str	r3, [sp, #36]	; 0x24
 8014968:	2380      	movs	r3, #128	; 0x80
 801496a:	439e      	bics	r6, r3
 801496c:	2300      	movs	r3, #0
 801496e:	930c      	str	r3, [sp, #48]	; 0x30
 8014970:	3303      	adds	r3, #3
 8014972:	9308      	str	r3, [sp, #32]
 8014974:	2300      	movs	r3, #0
 8014976:	9317      	str	r3, [sp, #92]	; 0x5c
 8014978:	e34f      	b.n	801501a <_svfprintf_r+0xc8e>
 801497a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801497c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801497e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014980:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014982:	f7ee f923 	bl	8002bcc <__aeabi_dcmpun>
 8014986:	2800      	cmp	r0, #0
 8014988:	d00e      	beq.n	80149a8 <_svfprintf_r+0x61c>
 801498a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801498c:	2b00      	cmp	r3, #0
 801498e:	da04      	bge.n	801499a <_svfprintf_r+0x60e>
 8014990:	231b      	movs	r3, #27
 8014992:	aa1e      	add	r2, sp, #120	; 0x78
 8014994:	189b      	adds	r3, r3, r2
 8014996:	222d      	movs	r2, #45	; 0x2d
 8014998:	701a      	strb	r2, [r3, #0]
 801499a:	4bb4      	ldr	r3, [pc, #720]	; (8014c6c <_svfprintf_r+0x8e0>)
 801499c:	9309      	str	r3, [sp, #36]	; 0x24
 801499e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149a0:	2b47      	cmp	r3, #71	; 0x47
 80149a2:	dce1      	bgt.n	8014968 <_svfprintf_r+0x5dc>
 80149a4:	4bb2      	ldr	r3, [pc, #712]	; (8014c70 <_svfprintf_r+0x8e4>)
 80149a6:	e7de      	b.n	8014966 <_svfprintf_r+0x5da>
 80149a8:	2320      	movs	r3, #32
 80149aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149ac:	439a      	bics	r2, r3
 80149ae:	920f      	str	r2, [sp, #60]	; 0x3c
 80149b0:	2a41      	cmp	r2, #65	; 0x41
 80149b2:	d124      	bne.n	80149fe <_svfprintf_r+0x672>
 80149b4:	2230      	movs	r2, #48	; 0x30
 80149b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80149b8:	ab25      	add	r3, sp, #148	; 0x94
 80149ba:	701a      	strb	r2, [r3, #0]
 80149bc:	3228      	adds	r2, #40	; 0x28
 80149be:	2961      	cmp	r1, #97	; 0x61
 80149c0:	d100      	bne.n	80149c4 <_svfprintf_r+0x638>
 80149c2:	3220      	adds	r2, #32
 80149c4:	705a      	strb	r2, [r3, #1]
 80149c6:	2302      	movs	r3, #2
 80149c8:	431e      	orrs	r6, r3
 80149ca:	9b08      	ldr	r3, [sp, #32]
 80149cc:	2b63      	cmp	r3, #99	; 0x63
 80149ce:	dc00      	bgt.n	80149d2 <_svfprintf_r+0x646>
 80149d0:	e09e      	b.n	8014b10 <_svfprintf_r+0x784>
 80149d2:	1c59      	adds	r1, r3, #1
 80149d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149d6:	f7fe f913 	bl	8012c00 <_malloc_r>
 80149da:	9009      	str	r0, [sp, #36]	; 0x24
 80149dc:	2800      	cmp	r0, #0
 80149de:	d000      	beq.n	80149e2 <_svfprintf_r+0x656>
 80149e0:	e09b      	b.n	8014b1a <_svfprintf_r+0x78e>
 80149e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e4:	899a      	ldrh	r2, [r3, #12]
 80149e6:	2340      	movs	r3, #64	; 0x40
 80149e8:	4313      	orrs	r3, r2
 80149ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149ec:	8193      	strh	r3, [r2, #12]
 80149ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149f0:	899b      	ldrh	r3, [r3, #12]
 80149f2:	065b      	lsls	r3, r3, #25
 80149f4:	d400      	bmi.n	80149f8 <_svfprintf_r+0x66c>
 80149f6:	e4ee      	b.n	80143d6 <_svfprintf_r+0x4a>
 80149f8:	2301      	movs	r3, #1
 80149fa:	425b      	negs	r3, r3
 80149fc:	e4ea      	b.n	80143d4 <_svfprintf_r+0x48>
 80149fe:	9b08      	ldr	r3, [sp, #32]
 8014a00:	900c      	str	r0, [sp, #48]	; 0x30
 8014a02:	3301      	adds	r3, #1
 8014a04:	d100      	bne.n	8014a08 <_svfprintf_r+0x67c>
 8014a06:	e08b      	b.n	8014b20 <_svfprintf_r+0x794>
 8014a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a0a:	2b47      	cmp	r3, #71	; 0x47
 8014a0c:	d103      	bne.n	8014a16 <_svfprintf_r+0x68a>
 8014a0e:	9b08      	ldr	r3, [sp, #32]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d100      	bne.n	8014a16 <_svfprintf_r+0x68a>
 8014a14:	e087      	b.n	8014b26 <_svfprintf_r+0x79a>
 8014a16:	2380      	movs	r3, #128	; 0x80
 8014a18:	005b      	lsls	r3, r3, #1
 8014a1a:	4333      	orrs	r3, r6
 8014a1c:	9320      	str	r3, [sp, #128]	; 0x80
 8014a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a20:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	db00      	blt.n	8014a28 <_svfprintf_r+0x69c>
 8014a26:	e082      	b.n	8014b2e <_svfprintf_r+0x7a2>
 8014a28:	2280      	movs	r2, #128	; 0x80
 8014a2a:	0612      	lsls	r2, r2, #24
 8014a2c:	4694      	mov	ip, r2
 8014a2e:	4463      	add	r3, ip
 8014a30:	930d      	str	r3, [sp, #52]	; 0x34
 8014a32:	232d      	movs	r3, #45	; 0x2d
 8014a34:	9322      	str	r3, [sp, #136]	; 0x88
 8014a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a38:	2b41      	cmp	r3, #65	; 0x41
 8014a3a:	d000      	beq.n	8014a3e <_svfprintf_r+0x6b2>
 8014a3c:	e105      	b.n	8014c4a <_svfprintf_r+0x8be>
 8014a3e:	aa26      	add	r2, sp, #152	; 0x98
 8014a40:	0020      	movs	r0, r4
 8014a42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a44:	f002 fdc4 	bl	80175d0 <frexp>
 8014a48:	23ff      	movs	r3, #255	; 0xff
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	059b      	lsls	r3, r3, #22
 8014a4e:	f7ed fb03 	bl	8002058 <__aeabi_dmul>
 8014a52:	2200      	movs	r2, #0
 8014a54:	2300      	movs	r3, #0
 8014a56:	0004      	movs	r4, r0
 8014a58:	000d      	movs	r5, r1
 8014a5a:	f7eb fcff 	bl	800045c <__aeabi_dcmpeq>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d001      	beq.n	8014a66 <_svfprintf_r+0x6da>
 8014a62:	2301      	movs	r3, #1
 8014a64:	9326      	str	r3, [sp, #152]	; 0x98
 8014a66:	4b83      	ldr	r3, [pc, #524]	; (8014c74 <_svfprintf_r+0x8e8>)
 8014a68:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a6c:	2b61      	cmp	r3, #97	; 0x61
 8014a6e:	d101      	bne.n	8014a74 <_svfprintf_r+0x6e8>
 8014a70:	4b81      	ldr	r3, [pc, #516]	; (8014c78 <_svfprintf_r+0x8ec>)
 8014a72:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a74:	9b08      	ldr	r3, [sp, #32]
 8014a76:	3b01      	subs	r3, #1
 8014a78:	9310      	str	r3, [sp, #64]	; 0x40
 8014a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7c:	9318      	str	r3, [sp, #96]	; 0x60
 8014a7e:	2200      	movs	r2, #0
 8014a80:	4b7e      	ldr	r3, [pc, #504]	; (8014c7c <_svfprintf_r+0x8f0>)
 8014a82:	0020      	movs	r0, r4
 8014a84:	0029      	movs	r1, r5
 8014a86:	f7ed fae7 	bl	8002058 <__aeabi_dmul>
 8014a8a:	000d      	movs	r5, r1
 8014a8c:	0004      	movs	r4, r0
 8014a8e:	f7ee f8b9 	bl	8002c04 <__aeabi_d2iz>
 8014a92:	9021      	str	r0, [sp, #132]	; 0x84
 8014a94:	f7ee f8ec 	bl	8002c70 <__aeabi_i2d>
 8014a98:	0002      	movs	r2, r0
 8014a9a:	000b      	movs	r3, r1
 8014a9c:	0020      	movs	r0, r4
 8014a9e:	0029      	movs	r1, r5
 8014aa0:	f7ed fd4c 	bl	800253c <__aeabi_dsub>
 8014aa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014aa6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8014aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014aae:	0004      	movs	r4, r0
 8014ab0:	5c9b      	ldrb	r3, [r3, r2]
 8014ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ab4:	000d      	movs	r5, r1
 8014ab6:	7013      	strb	r3, [r2, #0]
 8014ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014aba:	9323      	str	r3, [sp, #140]	; 0x8c
 8014abc:	3301      	adds	r3, #1
 8014abe:	d00a      	beq.n	8014ad6 <_svfprintf_r+0x74a>
 8014ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	3b01      	subs	r3, #1
 8014ac6:	9310      	str	r3, [sp, #64]	; 0x40
 8014ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aca:	9318      	str	r3, [sp, #96]	; 0x60
 8014acc:	2300      	movs	r3, #0
 8014ace:	f7eb fcc5 	bl	800045c <__aeabi_dcmpeq>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d0d3      	beq.n	8014a7e <_svfprintf_r+0x6f2>
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	4b69      	ldr	r3, [pc, #420]	; (8014c80 <_svfprintf_r+0x8f4>)
 8014ada:	0020      	movs	r0, r4
 8014adc:	0029      	movs	r1, r5
 8014ade:	f7eb fcd7 	bl	8000490 <__aeabi_dcmpgt>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d126      	bne.n	8014b34 <_svfprintf_r+0x7a8>
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4b65      	ldr	r3, [pc, #404]	; (8014c80 <_svfprintf_r+0x8f4>)
 8014aea:	0020      	movs	r0, r4
 8014aec:	0029      	movs	r1, r5
 8014aee:	f7eb fcb5 	bl	800045c <__aeabi_dcmpeq>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d002      	beq.n	8014afc <_svfprintf_r+0x770>
 8014af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014af8:	07db      	lsls	r3, r3, #31
 8014afa:	d41b      	bmi.n	8014b34 <_svfprintf_r+0x7a8>
 8014afc:	2130      	movs	r1, #48	; 0x30
 8014afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014b02:	1898      	adds	r0, r3, r2
 8014b04:	930d      	str	r3, [sp, #52]	; 0x34
 8014b06:	1ac2      	subs	r2, r0, r3
 8014b08:	d426      	bmi.n	8014b58 <_svfprintf_r+0x7cc>
 8014b0a:	7019      	strb	r1, [r3, #0]
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	e7f9      	b.n	8014b04 <_svfprintf_r+0x778>
 8014b10:	2300      	movs	r3, #0
 8014b12:	930c      	str	r3, [sp, #48]	; 0x30
 8014b14:	ab3f      	add	r3, sp, #252	; 0xfc
 8014b16:	9309      	str	r3, [sp, #36]	; 0x24
 8014b18:	e77d      	b.n	8014a16 <_svfprintf_r+0x68a>
 8014b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8014b1e:	e77a      	b.n	8014a16 <_svfprintf_r+0x68a>
 8014b20:	2306      	movs	r3, #6
 8014b22:	9308      	str	r3, [sp, #32]
 8014b24:	e777      	b.n	8014a16 <_svfprintf_r+0x68a>
 8014b26:	9b08      	ldr	r3, [sp, #32]
 8014b28:	930c      	str	r3, [sp, #48]	; 0x30
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e7f9      	b.n	8014b22 <_svfprintf_r+0x796>
 8014b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8014b30:	2300      	movs	r3, #0
 8014b32:	e77f      	b.n	8014a34 <_svfprintf_r+0x6a8>
 8014b34:	2030      	movs	r0, #48	; 0x30
 8014b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b38:	932a      	str	r3, [sp, #168]	; 0xa8
 8014b3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b3c:	7bda      	ldrb	r2, [r3, #15]
 8014b3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014b40:	3b01      	subs	r3, #1
 8014b42:	932a      	str	r3, [sp, #168]	; 0xa8
 8014b44:	7819      	ldrb	r1, [r3, #0]
 8014b46:	4291      	cmp	r1, r2
 8014b48:	d07d      	beq.n	8014c46 <_svfprintf_r+0x8ba>
 8014b4a:	1c4a      	adds	r2, r1, #1
 8014b4c:	b2d2      	uxtb	r2, r2
 8014b4e:	2939      	cmp	r1, #57	; 0x39
 8014b50:	d101      	bne.n	8014b56 <_svfprintf_r+0x7ca>
 8014b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b54:	7a92      	ldrb	r2, [r2, #10]
 8014b56:	701a      	strb	r2, [r3, #0]
 8014b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b5c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014b5e:	1a9b      	subs	r3, r3, r2
 8014b60:	930d      	str	r3, [sp, #52]	; 0x34
 8014b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b64:	2b47      	cmp	r3, #71	; 0x47
 8014b66:	d000      	beq.n	8014b6a <_svfprintf_r+0x7de>
 8014b68:	e0d2      	b.n	8014d10 <_svfprintf_r+0x984>
 8014b6a:	1ceb      	adds	r3, r5, #3
 8014b6c:	db03      	blt.n	8014b76 <_svfprintf_r+0x7ea>
 8014b6e:	9b08      	ldr	r3, [sp, #32]
 8014b70:	42ab      	cmp	r3, r5
 8014b72:	db00      	blt.n	8014b76 <_svfprintf_r+0x7ea>
 8014b74:	e0fd      	b.n	8014d72 <_svfprintf_r+0x9e6>
 8014b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b78:	3b02      	subs	r3, #2
 8014b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8014b7c:	2238      	movs	r2, #56	; 0x38
 8014b7e:	466b      	mov	r3, sp
 8014b80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b82:	189b      	adds	r3, r3, r2
 8014b84:	3a18      	subs	r2, #24
 8014b86:	4391      	bics	r1, r2
 8014b88:	1e6c      	subs	r4, r5, #1
 8014b8a:	000a      	movs	r2, r1
 8014b8c:	9426      	str	r4, [sp, #152]	; 0x98
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	2100      	movs	r1, #0
 8014b92:	2a41      	cmp	r2, #65	; 0x41
 8014b94:	d102      	bne.n	8014b9c <_svfprintf_r+0x810>
 8014b96:	330f      	adds	r3, #15
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	3101      	adds	r1, #1
 8014b9c:	aa28      	add	r2, sp, #160	; 0xa0
 8014b9e:	7013      	strb	r3, [r2, #0]
 8014ba0:	232b      	movs	r3, #43	; 0x2b
 8014ba2:	2c00      	cmp	r4, #0
 8014ba4:	da02      	bge.n	8014bac <_svfprintf_r+0x820>
 8014ba6:	2401      	movs	r4, #1
 8014ba8:	232d      	movs	r3, #45	; 0x2d
 8014baa:	1b64      	subs	r4, r4, r5
 8014bac:	7053      	strb	r3, [r2, #1]
 8014bae:	2c09      	cmp	r4, #9
 8014bb0:	dc00      	bgt.n	8014bb4 <_svfprintf_r+0x828>
 8014bb2:	e0c7      	b.n	8014d44 <_svfprintf_r+0x9b8>
 8014bb4:	2537      	movs	r5, #55	; 0x37
 8014bb6:	ab1e      	add	r3, sp, #120	; 0x78
 8014bb8:	18ed      	adds	r5, r5, r3
 8014bba:	1e6b      	subs	r3, r5, #1
 8014bbc:	0020      	movs	r0, r4
 8014bbe:	210a      	movs	r1, #10
 8014bc0:	9308      	str	r3, [sp, #32]
 8014bc2:	f7eb fc35 	bl	8000430 <__aeabi_idivmod>
 8014bc6:	1e6b      	subs	r3, r5, #1
 8014bc8:	3130      	adds	r1, #48	; 0x30
 8014bca:	7019      	strb	r1, [r3, #0]
 8014bcc:	0020      	movs	r0, r4
 8014bce:	210a      	movs	r1, #10
 8014bd0:	f7eb fb48 	bl	8000264 <__divsi3>
 8014bd4:	0004      	movs	r4, r0
 8014bd6:	2809      	cmp	r0, #9
 8014bd8:	dd00      	ble.n	8014bdc <_svfprintf_r+0x850>
 8014bda:	e0ac      	b.n	8014d36 <_svfprintf_r+0x9aa>
 8014bdc:	232a      	movs	r3, #42	; 0x2a
 8014bde:	2137      	movs	r1, #55	; 0x37
 8014be0:	aa1e      	add	r2, sp, #120	; 0x78
 8014be2:	3d02      	subs	r5, #2
 8014be4:	3430      	adds	r4, #48	; 0x30
 8014be6:	702c      	strb	r4, [r5, #0]
 8014be8:	189b      	adds	r3, r3, r2
 8014bea:	1889      	adds	r1, r1, r2
 8014bec:	001a      	movs	r2, r3
 8014bee:	428d      	cmp	r5, r1
 8014bf0:	d200      	bcs.n	8014bf4 <_svfprintf_r+0x868>
 8014bf2:	e0a2      	b.n	8014d3a <_svfprintf_r+0x9ae>
 8014bf4:	ab28      	add	r3, sp, #160	; 0xa0
 8014bf6:	1ad3      	subs	r3, r2, r3
 8014bf8:	931d      	str	r3, [sp, #116]	; 0x74
 8014bfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bfe:	4694      	mov	ip, r2
 8014c00:	4463      	add	r3, ip
 8014c02:	9308      	str	r3, [sp, #32]
 8014c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	dc01      	bgt.n	8014c0e <_svfprintf_r+0x882>
 8014c0a:	07f3      	lsls	r3, r6, #31
 8014c0c:	d504      	bpl.n	8014c18 <_svfprintf_r+0x88c>
 8014c0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c10:	9b08      	ldr	r3, [sp, #32]
 8014c12:	4694      	mov	ip, r2
 8014c14:	4463      	add	r3, ip
 8014c16:	9308      	str	r3, [sp, #32]
 8014c18:	2280      	movs	r2, #128	; 0x80
 8014c1a:	4b1a      	ldr	r3, [pc, #104]	; (8014c84 <_svfprintf_r+0x8f8>)
 8014c1c:	0052      	lsls	r2, r2, #1
 8014c1e:	4033      	ands	r3, r6
 8014c20:	431a      	orrs	r2, r3
 8014c22:	2300      	movs	r3, #0
 8014c24:	001d      	movs	r5, r3
 8014c26:	9220      	str	r2, [sp, #128]	; 0x80
 8014c28:	9310      	str	r3, [sp, #64]	; 0x40
 8014c2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d100      	bne.n	8014c34 <_svfprintf_r+0x8a8>
 8014c32:	e270      	b.n	8015116 <_svfprintf_r+0xd8a>
 8014c34:	231b      	movs	r3, #27
 8014c36:	aa1e      	add	r2, sp, #120	; 0x78
 8014c38:	189b      	adds	r3, r3, r2
 8014c3a:	222d      	movs	r2, #45	; 0x2d
 8014c3c:	701a      	strb	r2, [r3, #0]
 8014c3e:	2300      	movs	r3, #0
 8014c40:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014c42:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c44:	e539      	b.n	80146ba <_svfprintf_r+0x32e>
 8014c46:	7018      	strb	r0, [r3, #0]
 8014c48:	e779      	b.n	8014b3e <_svfprintf_r+0x7b2>
 8014c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c4c:	2b46      	cmp	r3, #70	; 0x46
 8014c4e:	d01b      	beq.n	8014c88 <_svfprintf_r+0x8fc>
 8014c50:	9d08      	ldr	r5, [sp, #32]
 8014c52:	2b45      	cmp	r3, #69	; 0x45
 8014c54:	d101      	bne.n	8014c5a <_svfprintf_r+0x8ce>
 8014c56:	9b08      	ldr	r3, [sp, #32]
 8014c58:	1c5d      	adds	r5, r3, #1
 8014c5a:	2302      	movs	r3, #2
 8014c5c:	e016      	b.n	8014c8c <_svfprintf_r+0x900>
 8014c5e:	46c0      	nop			; (mov r8, r8)
 8014c60:	7fefffff 	.word	0x7fefffff
 8014c64:	0801ab4c 	.word	0x0801ab4c
 8014c68:	0801ab48 	.word	0x0801ab48
 8014c6c:	0801ab54 	.word	0x0801ab54
 8014c70:	0801ab50 	.word	0x0801ab50
 8014c74:	0801ab69 	.word	0x0801ab69
 8014c78:	0801ab58 	.word	0x0801ab58
 8014c7c:	40300000 	.word	0x40300000
 8014c80:	3fe00000 	.word	0x3fe00000
 8014c84:	fffffbff 	.word	0xfffffbff
 8014c88:	2303      	movs	r3, #3
 8014c8a:	9d08      	ldr	r5, [sp, #32]
 8014c8c:	aa2a      	add	r2, sp, #168	; 0xa8
 8014c8e:	9204      	str	r2, [sp, #16]
 8014c90:	aa27      	add	r2, sp, #156	; 0x9c
 8014c92:	9203      	str	r2, [sp, #12]
 8014c94:	aa26      	add	r2, sp, #152	; 0x98
 8014c96:	9202      	str	r2, [sp, #8]
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	9501      	str	r5, [sp, #4]
 8014c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c9e:	0022      	movs	r2, r4
 8014ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ca2:	f000 fe79 	bl	8015998 <_dtoa_r>
 8014ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ca8:	9009      	str	r0, [sp, #36]	; 0x24
 8014caa:	2b47      	cmp	r3, #71	; 0x47
 8014cac:	d101      	bne.n	8014cb2 <_svfprintf_r+0x926>
 8014cae:	07f3      	lsls	r3, r6, #31
 8014cb0:	d524      	bpl.n	8014cfc <_svfprintf_r+0x970>
 8014cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cb4:	195b      	adds	r3, r3, r5
 8014cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8014cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cba:	2b46      	cmp	r3, #70	; 0x46
 8014cbc:	d113      	bne.n	8014ce6 <_svfprintf_r+0x95a>
 8014cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	2b30      	cmp	r3, #48	; 0x30
 8014cc4:	d10a      	bne.n	8014cdc <_svfprintf_r+0x950>
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	2300      	movs	r3, #0
 8014cca:	0020      	movs	r0, r4
 8014ccc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014cce:	f7eb fbc5 	bl	800045c <__aeabi_dcmpeq>
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d102      	bne.n	8014cdc <_svfprintf_r+0x950>
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	1b5d      	subs	r5, r3, r5
 8014cda:	9526      	str	r5, [sp, #152]	; 0x98
 8014cdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ce0:	4694      	mov	ip, r2
 8014ce2:	4463      	add	r3, ip
 8014ce4:	9310      	str	r3, [sp, #64]	; 0x40
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2300      	movs	r3, #0
 8014cea:	0020      	movs	r0, r4
 8014cec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014cee:	f7eb fbb5 	bl	800045c <__aeabi_dcmpeq>
 8014cf2:	2230      	movs	r2, #48	; 0x30
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d006      	beq.n	8014d06 <_svfprintf_r+0x97a>
 8014cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cfa:	932a      	str	r3, [sp, #168]	; 0xa8
 8014cfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014cfe:	e72c      	b.n	8014b5a <_svfprintf_r+0x7ce>
 8014d00:	1c59      	adds	r1, r3, #1
 8014d02:	912a      	str	r1, [sp, #168]	; 0xa8
 8014d04:	701a      	strb	r2, [r3, #0]
 8014d06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014d08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014d0a:	4299      	cmp	r1, r3
 8014d0c:	d8f8      	bhi.n	8014d00 <_svfprintf_r+0x974>
 8014d0e:	e7f5      	b.n	8014cfc <_svfprintf_r+0x970>
 8014d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d12:	2b46      	cmp	r3, #70	; 0x46
 8014d14:	d000      	beq.n	8014d18 <_svfprintf_r+0x98c>
 8014d16:	e731      	b.n	8014b7c <_svfprintf_r+0x7f0>
 8014d18:	9b08      	ldr	r3, [sp, #32]
 8014d1a:	2d00      	cmp	r5, #0
 8014d1c:	dd21      	ble.n	8014d62 <_svfprintf_r+0x9d6>
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d101      	bne.n	8014d26 <_svfprintf_r+0x99a>
 8014d22:	07f3      	lsls	r3, r6, #31
 8014d24:	d54a      	bpl.n	8014dbc <_svfprintf_r+0xa30>
 8014d26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d28:	18eb      	adds	r3, r5, r3
 8014d2a:	9a08      	ldr	r2, [sp, #32]
 8014d2c:	18d3      	adds	r3, r2, r3
 8014d2e:	9308      	str	r3, [sp, #32]
 8014d30:	2366      	movs	r3, #102	; 0x66
 8014d32:	930e      	str	r3, [sp, #56]	; 0x38
 8014d34:	e034      	b.n	8014da0 <_svfprintf_r+0xa14>
 8014d36:	9d08      	ldr	r5, [sp, #32]
 8014d38:	e73f      	b.n	8014bba <_svfprintf_r+0x82e>
 8014d3a:	782a      	ldrb	r2, [r5, #0]
 8014d3c:	3501      	adds	r5, #1
 8014d3e:	701a      	strb	r2, [r3, #0]
 8014d40:	3301      	adds	r3, #1
 8014d42:	e753      	b.n	8014bec <_svfprintf_r+0x860>
 8014d44:	232a      	movs	r3, #42	; 0x2a
 8014d46:	aa1e      	add	r2, sp, #120	; 0x78
 8014d48:	189b      	adds	r3, r3, r2
 8014d4a:	2900      	cmp	r1, #0
 8014d4c:	d105      	bne.n	8014d5a <_svfprintf_r+0x9ce>
 8014d4e:	2230      	movs	r2, #48	; 0x30
 8014d50:	ab28      	add	r3, sp, #160	; 0xa0
 8014d52:	709a      	strb	r2, [r3, #2]
 8014d54:	232b      	movs	r3, #43	; 0x2b
 8014d56:	aa1e      	add	r2, sp, #120	; 0x78
 8014d58:	189b      	adds	r3, r3, r2
 8014d5a:	3430      	adds	r4, #48	; 0x30
 8014d5c:	1c5a      	adds	r2, r3, #1
 8014d5e:	701c      	strb	r4, [r3, #0]
 8014d60:	e748      	b.n	8014bf4 <_svfprintf_r+0x868>
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d102      	bne.n	8014d6c <_svfprintf_r+0x9e0>
 8014d66:	3301      	adds	r3, #1
 8014d68:	421e      	tst	r6, r3
 8014d6a:	d029      	beq.n	8014dc0 <_svfprintf_r+0xa34>
 8014d6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d6e:	3301      	adds	r3, #1
 8014d70:	e7db      	b.n	8014d2a <_svfprintf_r+0x99e>
 8014d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d74:	42ab      	cmp	r3, r5
 8014d76:	dc06      	bgt.n	8014d86 <_svfprintf_r+0x9fa>
 8014d78:	07f3      	lsls	r3, r6, #31
 8014d7a:	d524      	bpl.n	8014dc6 <_svfprintf_r+0xa3a>
 8014d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d7e:	18eb      	adds	r3, r5, r3
 8014d80:	9308      	str	r3, [sp, #32]
 8014d82:	2367      	movs	r3, #103	; 0x67
 8014d84:	e7d5      	b.n	8014d32 <_svfprintf_r+0x9a6>
 8014d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d8a:	4694      	mov	ip, r2
 8014d8c:	4463      	add	r3, ip
 8014d8e:	9308      	str	r3, [sp, #32]
 8014d90:	2367      	movs	r3, #103	; 0x67
 8014d92:	930e      	str	r3, [sp, #56]	; 0x38
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	dc03      	bgt.n	8014da0 <_svfprintf_r+0xa14>
 8014d98:	9b08      	ldr	r3, [sp, #32]
 8014d9a:	1b5b      	subs	r3, r3, r5
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	9308      	str	r3, [sp, #32]
 8014da0:	2380      	movs	r3, #128	; 0x80
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	401e      	ands	r6, r3
 8014da6:	2300      	movs	r3, #0
 8014da8:	960f      	str	r6, [sp, #60]	; 0x3c
 8014daa:	9310      	str	r3, [sp, #64]	; 0x40
 8014dac:	2e00      	cmp	r6, #0
 8014dae:	d100      	bne.n	8014db2 <_svfprintf_r+0xa26>
 8014db0:	e73c      	b.n	8014c2c <_svfprintf_r+0x8a0>
 8014db2:	2d00      	cmp	r5, #0
 8014db4:	dc27      	bgt.n	8014e06 <_svfprintf_r+0xa7a>
 8014db6:	2300      	movs	r3, #0
 8014db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dba:	e737      	b.n	8014c2c <_svfprintf_r+0x8a0>
 8014dbc:	9508      	str	r5, [sp, #32]
 8014dbe:	e7b7      	b.n	8014d30 <_svfprintf_r+0x9a4>
 8014dc0:	2266      	movs	r2, #102	; 0x66
 8014dc2:	920e      	str	r2, [sp, #56]	; 0x38
 8014dc4:	e7eb      	b.n	8014d9e <_svfprintf_r+0xa12>
 8014dc6:	9508      	str	r5, [sp, #32]
 8014dc8:	e7db      	b.n	8014d82 <_svfprintf_r+0x9f6>
 8014dca:	42ab      	cmp	r3, r5
 8014dcc:	da0e      	bge.n	8014dec <_svfprintf_r+0xa60>
 8014dce:	1aed      	subs	r5, r5, r3
 8014dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dd2:	785b      	ldrb	r3, [r3, #1]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d012      	beq.n	8014dfe <_svfprintf_r+0xa72>
 8014dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dda:	3301      	adds	r3, #1
 8014ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014de0:	3301      	adds	r3, #1
 8014de2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	2bff      	cmp	r3, #255	; 0xff
 8014dea:	d1ee      	bne.n	8014dca <_svfprintf_r+0xa3e>
 8014dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014df0:	189b      	adds	r3, r3, r2
 8014df2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014df4:	4353      	muls	r3, r2
 8014df6:	9a08      	ldr	r2, [sp, #32]
 8014df8:	189b      	adds	r3, r3, r2
 8014dfa:	9308      	str	r3, [sp, #32]
 8014dfc:	e716      	b.n	8014c2c <_svfprintf_r+0x8a0>
 8014dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e00:	3301      	adds	r3, #1
 8014e02:	9310      	str	r3, [sp, #64]	; 0x40
 8014e04:	e7ee      	b.n	8014de4 <_svfprintf_r+0xa58>
 8014e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e0a:	e7eb      	b.n	8014de4 <_svfprintf_r+0xa58>
 8014e0c:	0022      	movs	r2, r4
 8014e0e:	ca08      	ldmia	r2!, {r3}
 8014e10:	9212      	str	r2, [sp, #72]	; 0x48
 8014e12:	06b2      	lsls	r2, r6, #26
 8014e14:	d508      	bpl.n	8014e28 <_svfprintf_r+0xa9c>
 8014e16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e18:	601a      	str	r2, [r3, #0]
 8014e1a:	17d2      	asrs	r2, r2, #31
 8014e1c:	605a      	str	r2, [r3, #4]
 8014e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014e22:	9309      	str	r3, [sp, #36]	; 0x24
 8014e24:	f7ff faeb 	bl	80143fe <_svfprintf_r+0x72>
 8014e28:	06f2      	lsls	r2, r6, #27
 8014e2a:	d502      	bpl.n	8014e32 <_svfprintf_r+0xaa6>
 8014e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e2e:	601a      	str	r2, [r3, #0]
 8014e30:	e7f5      	b.n	8014e1e <_svfprintf_r+0xa92>
 8014e32:	0672      	lsls	r2, r6, #25
 8014e34:	d502      	bpl.n	8014e3c <_svfprintf_r+0xab0>
 8014e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e38:	801a      	strh	r2, [r3, #0]
 8014e3a:	e7f0      	b.n	8014e1e <_svfprintf_r+0xa92>
 8014e3c:	05b2      	lsls	r2, r6, #22
 8014e3e:	d5f5      	bpl.n	8014e2c <_svfprintf_r+0xaa0>
 8014e40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e42:	701a      	strb	r2, [r3, #0]
 8014e44:	e7eb      	b.n	8014e1e <_svfprintf_r+0xa92>
 8014e46:	2310      	movs	r3, #16
 8014e48:	431e      	orrs	r6, r3
 8014e4a:	2220      	movs	r2, #32
 8014e4c:	4032      	ands	r2, r6
 8014e4e:	d025      	beq.n	8014e9c <_svfprintf_r+0xb10>
 8014e50:	2307      	movs	r3, #7
 8014e52:	3407      	adds	r4, #7
 8014e54:	439c      	bics	r4, r3
 8014e56:	0023      	movs	r3, r4
 8014e58:	3308      	adds	r3, #8
 8014e5a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	6864      	ldr	r4, [r4, #4]
 8014e60:	9306      	str	r3, [sp, #24]
 8014e62:	9407      	str	r4, [sp, #28]
 8014e64:	4bc2      	ldr	r3, [pc, #776]	; (8015170 <_svfprintf_r+0xde4>)
 8014e66:	401e      	ands	r6, r3
 8014e68:	2300      	movs	r3, #0
 8014e6a:	221b      	movs	r2, #27
 8014e6c:	a91e      	add	r1, sp, #120	; 0x78
 8014e6e:	1852      	adds	r2, r2, r1
 8014e70:	2100      	movs	r1, #0
 8014e72:	7011      	strb	r1, [r2, #0]
 8014e74:	9a08      	ldr	r2, [sp, #32]
 8014e76:	3201      	adds	r2, #1
 8014e78:	d100      	bne.n	8014e7c <_svfprintf_r+0xaf0>
 8014e7a:	e0a6      	b.n	8014fca <_svfprintf_r+0xc3e>
 8014e7c:	0032      	movs	r2, r6
 8014e7e:	2180      	movs	r1, #128	; 0x80
 8014e80:	9807      	ldr	r0, [sp, #28]
 8014e82:	438e      	bics	r6, r1
 8014e84:	9906      	ldr	r1, [sp, #24]
 8014e86:	4301      	orrs	r1, r0
 8014e88:	d000      	beq.n	8014e8c <_svfprintf_r+0xb00>
 8014e8a:	e09e      	b.n	8014fca <_svfprintf_r+0xc3e>
 8014e8c:	9908      	ldr	r1, [sp, #32]
 8014e8e:	2900      	cmp	r1, #0
 8014e90:	d100      	bne.n	8014e94 <_svfprintf_r+0xb08>
 8014e92:	e125      	b.n	80150e0 <_svfprintf_r+0xd54>
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d000      	beq.n	8014e9a <_svfprintf_r+0xb0e>
 8014e98:	e09a      	b.n	8014fd0 <_svfprintf_r+0xc44>
 8014e9a:	e518      	b.n	80148ce <_svfprintf_r+0x542>
 8014e9c:	1d23      	adds	r3, r4, #4
 8014e9e:	9312      	str	r3, [sp, #72]	; 0x48
 8014ea0:	2310      	movs	r3, #16
 8014ea2:	4033      	ands	r3, r6
 8014ea4:	d003      	beq.n	8014eae <_svfprintf_r+0xb22>
 8014ea6:	6823      	ldr	r3, [r4, #0]
 8014ea8:	9306      	str	r3, [sp, #24]
 8014eaa:	9207      	str	r2, [sp, #28]
 8014eac:	e7da      	b.n	8014e64 <_svfprintf_r+0xad8>
 8014eae:	2240      	movs	r2, #64	; 0x40
 8014eb0:	4032      	ands	r2, r6
 8014eb2:	d004      	beq.n	8014ebe <_svfprintf_r+0xb32>
 8014eb4:	6822      	ldr	r2, [r4, #0]
 8014eb6:	b292      	uxth	r2, r2
 8014eb8:	9206      	str	r2, [sp, #24]
 8014eba:	9307      	str	r3, [sp, #28]
 8014ebc:	e7d2      	b.n	8014e64 <_svfprintf_r+0xad8>
 8014ebe:	2380      	movs	r3, #128	; 0x80
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	4033      	ands	r3, r6
 8014ec4:	d002      	beq.n	8014ecc <_svfprintf_r+0xb40>
 8014ec6:	6823      	ldr	r3, [r4, #0]
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	e7ed      	b.n	8014ea8 <_svfprintf_r+0xb1c>
 8014ecc:	6822      	ldr	r2, [r4, #0]
 8014ece:	e7f3      	b.n	8014eb8 <_svfprintf_r+0xb2c>
 8014ed0:	1d23      	adds	r3, r4, #4
 8014ed2:	49a8      	ldr	r1, [pc, #672]	; (8015174 <_svfprintf_r+0xde8>)
 8014ed4:	aa25      	add	r2, sp, #148	; 0x94
 8014ed6:	9312      	str	r3, [sp, #72]	; 0x48
 8014ed8:	6823      	ldr	r3, [r4, #0]
 8014eda:	8011      	strh	r1, [r2, #0]
 8014edc:	4aa6      	ldr	r2, [pc, #664]	; (8015178 <_svfprintf_r+0xdec>)
 8014ede:	9306      	str	r3, [sp, #24]
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	921e      	str	r2, [sp, #120]	; 0x78
 8014ee4:	2278      	movs	r2, #120	; 0x78
 8014ee6:	9307      	str	r3, [sp, #28]
 8014ee8:	3302      	adds	r3, #2
 8014eea:	431e      	orrs	r6, r3
 8014eec:	920e      	str	r2, [sp, #56]	; 0x38
 8014eee:	e7bc      	b.n	8014e6a <_svfprintf_r+0xade>
 8014ef0:	1d23      	adds	r3, r4, #4
 8014ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	2400      	movs	r4, #0
 8014ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8014efa:	231b      	movs	r3, #27
 8014efc:	aa1e      	add	r2, sp, #120	; 0x78
 8014efe:	189b      	adds	r3, r3, r2
 8014f00:	701c      	strb	r4, [r3, #0]
 8014f02:	9b08      	ldr	r3, [sp, #32]
 8014f04:	3301      	adds	r3, #1
 8014f06:	d00e      	beq.n	8014f26 <_svfprintf_r+0xb9a>
 8014f08:	9a08      	ldr	r2, [sp, #32]
 8014f0a:	0021      	movs	r1, r4
 8014f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f0e:	f001 ff79 	bl	8016e04 <memchr>
 8014f12:	900c      	str	r0, [sp, #48]	; 0x30
 8014f14:	42a0      	cmp	r0, r4
 8014f16:	d100      	bne.n	8014f1a <_svfprintf_r+0xb8e>
 8014f18:	e100      	b.n	801511c <_svfprintf_r+0xd90>
 8014f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f1c:	1a83      	subs	r3, r0, r2
 8014f1e:	9308      	str	r3, [sp, #32]
 8014f20:	940c      	str	r4, [sp, #48]	; 0x30
 8014f22:	0023      	movs	r3, r4
 8014f24:	e527      	b.n	8014976 <_svfprintf_r+0x5ea>
 8014f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f28:	f7eb f8f6 	bl	8000118 <strlen>
 8014f2c:	9008      	str	r0, [sp, #32]
 8014f2e:	e7f7      	b.n	8014f20 <_svfprintf_r+0xb94>
 8014f30:	2310      	movs	r3, #16
 8014f32:	431e      	orrs	r6, r3
 8014f34:	2220      	movs	r2, #32
 8014f36:	4032      	ands	r2, r6
 8014f38:	d00b      	beq.n	8014f52 <_svfprintf_r+0xbc6>
 8014f3a:	2307      	movs	r3, #7
 8014f3c:	3407      	adds	r4, #7
 8014f3e:	439c      	bics	r4, r3
 8014f40:	0023      	movs	r3, r4
 8014f42:	3308      	adds	r3, #8
 8014f44:	9312      	str	r3, [sp, #72]	; 0x48
 8014f46:	6823      	ldr	r3, [r4, #0]
 8014f48:	6864      	ldr	r4, [r4, #4]
 8014f4a:	9306      	str	r3, [sp, #24]
 8014f4c:	9407      	str	r4, [sp, #28]
 8014f4e:	2301      	movs	r3, #1
 8014f50:	e78b      	b.n	8014e6a <_svfprintf_r+0xade>
 8014f52:	1d23      	adds	r3, r4, #4
 8014f54:	9312      	str	r3, [sp, #72]	; 0x48
 8014f56:	2310      	movs	r3, #16
 8014f58:	4033      	ands	r3, r6
 8014f5a:	d003      	beq.n	8014f64 <_svfprintf_r+0xbd8>
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	9306      	str	r3, [sp, #24]
 8014f60:	9207      	str	r2, [sp, #28]
 8014f62:	e7f4      	b.n	8014f4e <_svfprintf_r+0xbc2>
 8014f64:	2240      	movs	r2, #64	; 0x40
 8014f66:	4032      	ands	r2, r6
 8014f68:	d004      	beq.n	8014f74 <_svfprintf_r+0xbe8>
 8014f6a:	6822      	ldr	r2, [r4, #0]
 8014f6c:	b292      	uxth	r2, r2
 8014f6e:	9206      	str	r2, [sp, #24]
 8014f70:	9307      	str	r3, [sp, #28]
 8014f72:	e7ec      	b.n	8014f4e <_svfprintf_r+0xbc2>
 8014f74:	2380      	movs	r3, #128	; 0x80
 8014f76:	009b      	lsls	r3, r3, #2
 8014f78:	4033      	ands	r3, r6
 8014f7a:	d002      	beq.n	8014f82 <_svfprintf_r+0xbf6>
 8014f7c:	6823      	ldr	r3, [r4, #0]
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	e7ed      	b.n	8014f5e <_svfprintf_r+0xbd2>
 8014f82:	6822      	ldr	r2, [r4, #0]
 8014f84:	e7f3      	b.n	8014f6e <_svfprintf_r+0xbe2>
 8014f86:	4b7c      	ldr	r3, [pc, #496]	; (8015178 <_svfprintf_r+0xdec>)
 8014f88:	f7ff fad9 	bl	801453e <_svfprintf_r+0x1b2>
 8014f8c:	1d23      	adds	r3, r4, #4
 8014f8e:	9312      	str	r3, [sp, #72]	; 0x48
 8014f90:	2310      	movs	r3, #16
 8014f92:	4033      	ands	r3, r6
 8014f94:	d004      	beq.n	8014fa0 <_svfprintf_r+0xc14>
 8014f96:	6823      	ldr	r3, [r4, #0]
 8014f98:	9306      	str	r3, [sp, #24]
 8014f9a:	9207      	str	r2, [sp, #28]
 8014f9c:	f7ff fadf 	bl	801455e <_svfprintf_r+0x1d2>
 8014fa0:	2240      	movs	r2, #64	; 0x40
 8014fa2:	4032      	ands	r2, r6
 8014fa4:	d005      	beq.n	8014fb2 <_svfprintf_r+0xc26>
 8014fa6:	6822      	ldr	r2, [r4, #0]
 8014fa8:	b292      	uxth	r2, r2
 8014faa:	9206      	str	r2, [sp, #24]
 8014fac:	9307      	str	r3, [sp, #28]
 8014fae:	f7ff fad6 	bl	801455e <_svfprintf_r+0x1d2>
 8014fb2:	2380      	movs	r3, #128	; 0x80
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	4033      	ands	r3, r6
 8014fb8:	d002      	beq.n	8014fc0 <_svfprintf_r+0xc34>
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	e7eb      	b.n	8014f98 <_svfprintf_r+0xc0c>
 8014fc0:	6822      	ldr	r2, [r4, #0]
 8014fc2:	e7f2      	b.n	8014faa <_svfprintf_r+0xc1e>
 8014fc4:	0032      	movs	r2, r6
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e759      	b.n	8014e7e <_svfprintf_r+0xaf2>
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d100      	bne.n	8014fd0 <_svfprintf_r+0xc44>
 8014fce:	e476      	b.n	80148be <_svfprintf_r+0x532>
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d06b      	beq.n	80150ac <_svfprintf_r+0xd20>
 8014fd4:	2507      	movs	r5, #7
 8014fd6:	ab58      	add	r3, sp, #352	; 0x160
 8014fd8:	1e5a      	subs	r2, r3, #1
 8014fda:	9209      	str	r2, [sp, #36]	; 0x24
 8014fdc:	9a06      	ldr	r2, [sp, #24]
 8014fde:	1e59      	subs	r1, r3, #1
 8014fe0:	402a      	ands	r2, r5
 8014fe2:	3230      	adds	r2, #48	; 0x30
 8014fe4:	700a      	strb	r2, [r1, #0]
 8014fe6:	9907      	ldr	r1, [sp, #28]
 8014fe8:	074c      	lsls	r4, r1, #29
 8014fea:	9906      	ldr	r1, [sp, #24]
 8014fec:	08c8      	lsrs	r0, r1, #3
 8014fee:	9907      	ldr	r1, [sp, #28]
 8014ff0:	4304      	orrs	r4, r0
 8014ff2:	08c9      	lsrs	r1, r1, #3
 8014ff4:	9107      	str	r1, [sp, #28]
 8014ff6:	0021      	movs	r1, r4
 8014ff8:	9807      	ldr	r0, [sp, #28]
 8014ffa:	9406      	str	r4, [sp, #24]
 8014ffc:	4301      	orrs	r1, r0
 8014ffe:	d111      	bne.n	8015024 <_svfprintf_r+0xc98>
 8015000:	07f1      	lsls	r1, r6, #31
 8015002:	d502      	bpl.n	801500a <_svfprintf_r+0xc7e>
 8015004:	3b02      	subs	r3, #2
 8015006:	2a30      	cmp	r2, #48	; 0x30
 8015008:	d173      	bne.n	80150f2 <_svfprintf_r+0xd66>
 801500a:	9b08      	ldr	r3, [sp, #32]
 801500c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801500e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015010:	ab58      	add	r3, sp, #352	; 0x160
 8015012:	1a9b      	subs	r3, r3, r2
 8015014:	9308      	str	r3, [sp, #32]
 8015016:	2300      	movs	r3, #0
 8015018:	930c      	str	r3, [sp, #48]	; 0x30
 801501a:	9310      	str	r3, [sp, #64]	; 0x40
 801501c:	930f      	str	r3, [sp, #60]	; 0x3c
 801501e:	001d      	movs	r5, r3
 8015020:	f7ff fb4b 	bl	80146ba <_svfprintf_r+0x32e>
 8015024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015026:	e7d7      	b.n	8014fd8 <_svfprintf_r+0xc4c>
 8015028:	2480      	movs	r4, #128	; 0x80
 801502a:	2300      	movs	r3, #0
 801502c:	00e4      	lsls	r4, r4, #3
 801502e:	930d      	str	r3, [sp, #52]	; 0x34
 8015030:	4034      	ands	r4, r6
 8015032:	ab58      	add	r3, sp, #352	; 0x160
 8015034:	3b01      	subs	r3, #1
 8015036:	9309      	str	r3, [sp, #36]	; 0x24
 8015038:	220a      	movs	r2, #10
 801503a:	9806      	ldr	r0, [sp, #24]
 801503c:	9907      	ldr	r1, [sp, #28]
 801503e:	2300      	movs	r3, #0
 8015040:	f7eb fa74 	bl	800052c <__aeabi_uldivmod>
 8015044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015046:	3230      	adds	r2, #48	; 0x30
 8015048:	701a      	strb	r2, [r3, #0]
 801504a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801504c:	3301      	adds	r3, #1
 801504e:	930d      	str	r3, [sp, #52]	; 0x34
 8015050:	2c00      	cmp	r4, #0
 8015052:	d01d      	beq.n	8015090 <_svfprintf_r+0xd04>
 8015054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	429a      	cmp	r2, r3
 801505c:	d118      	bne.n	8015090 <_svfprintf_r+0xd04>
 801505e:	2aff      	cmp	r2, #255	; 0xff
 8015060:	d016      	beq.n	8015090 <_svfprintf_r+0xd04>
 8015062:	9b07      	ldr	r3, [sp, #28]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d102      	bne.n	801506e <_svfprintf_r+0xce2>
 8015068:	9b06      	ldr	r3, [sp, #24]
 801506a:	2b09      	cmp	r3, #9
 801506c:	d910      	bls.n	8015090 <_svfprintf_r+0xd04>
 801506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015070:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015072:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	0018      	movs	r0, r3
 8015078:	9309      	str	r3, [sp, #36]	; 0x24
 801507a:	f7fe fa52 	bl	8013522 <strncpy>
 801507e:	2200      	movs	r2, #0
 8015080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015082:	920d      	str	r2, [sp, #52]	; 0x34
 8015084:	785b      	ldrb	r3, [r3, #1]
 8015086:	1e5a      	subs	r2, r3, #1
 8015088:	4193      	sbcs	r3, r2
 801508a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801508c:	18d3      	adds	r3, r2, r3
 801508e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015090:	220a      	movs	r2, #10
 8015092:	9806      	ldr	r0, [sp, #24]
 8015094:	9907      	ldr	r1, [sp, #28]
 8015096:	2300      	movs	r3, #0
 8015098:	f7eb fa48 	bl	800052c <__aeabi_uldivmod>
 801509c:	9006      	str	r0, [sp, #24]
 801509e:	9107      	str	r1, [sp, #28]
 80150a0:	9b06      	ldr	r3, [sp, #24]
 80150a2:	9a07      	ldr	r2, [sp, #28]
 80150a4:	4313      	orrs	r3, r2
 80150a6:	d0b0      	beq.n	801500a <_svfprintf_r+0xc7e>
 80150a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150aa:	e7c3      	b.n	8015034 <_svfprintf_r+0xca8>
 80150ac:	200f      	movs	r0, #15
 80150ae:	ab58      	add	r3, sp, #352	; 0x160
 80150b0:	9309      	str	r3, [sp, #36]	; 0x24
 80150b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80150b6:	3b01      	subs	r3, #1
 80150b8:	9309      	str	r3, [sp, #36]	; 0x24
 80150ba:	9b06      	ldr	r3, [sp, #24]
 80150bc:	4003      	ands	r3, r0
 80150be:	5cd3      	ldrb	r3, [r2, r3]
 80150c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150c2:	7013      	strb	r3, [r2, #0]
 80150c4:	9b07      	ldr	r3, [sp, #28]
 80150c6:	0719      	lsls	r1, r3, #28
 80150c8:	9b06      	ldr	r3, [sp, #24]
 80150ca:	091a      	lsrs	r2, r3, #4
 80150cc:	9b07      	ldr	r3, [sp, #28]
 80150ce:	4311      	orrs	r1, r2
 80150d0:	091b      	lsrs	r3, r3, #4
 80150d2:	9307      	str	r3, [sp, #28]
 80150d4:	000b      	movs	r3, r1
 80150d6:	9a07      	ldr	r2, [sp, #28]
 80150d8:	9106      	str	r1, [sp, #24]
 80150da:	4313      	orrs	r3, r2
 80150dc:	d1e9      	bne.n	80150b2 <_svfprintf_r+0xd26>
 80150de:	e794      	b.n	801500a <_svfprintf_r+0xc7e>
 80150e0:	a958      	add	r1, sp, #352	; 0x160
 80150e2:	9109      	str	r1, [sp, #36]	; 0x24
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d190      	bne.n	801500a <_svfprintf_r+0xc7e>
 80150e8:	07d3      	lsls	r3, r2, #31
 80150ea:	d58e      	bpl.n	801500a <_svfprintf_r+0xc7e>
 80150ec:	23e7      	movs	r3, #231	; 0xe7
 80150ee:	aa1e      	add	r2, sp, #120	; 0x78
 80150f0:	189b      	adds	r3, r3, r2
 80150f2:	2230      	movs	r2, #48	; 0x30
 80150f4:	f7ff fbf0 	bl	80148d8 <_svfprintf_r+0x54c>
 80150f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d100      	bne.n	8015100 <_svfprintf_r+0xd74>
 80150fe:	e38a      	b.n	8015816 <_svfprintf_r+0x148a>
 8015100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015102:	ab3f      	add	r3, sp, #252	; 0xfc
 8015104:	701a      	strb	r2, [r3, #0]
 8015106:	221b      	movs	r2, #27
 8015108:	2000      	movs	r0, #0
 801510a:	a91e      	add	r1, sp, #120	; 0x78
 801510c:	1852      	adds	r2, r2, r1
 801510e:	7010      	strb	r0, [r2, #0]
 8015110:	9412      	str	r4, [sp, #72]	; 0x48
 8015112:	f7ff faca 	bl	80146aa <_svfprintf_r+0x31e>
 8015116:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801511a:	e592      	b.n	8014c42 <_svfprintf_r+0x8b6>
 801511c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801511e:	e42a      	b.n	8014976 <_svfprintf_r+0x5ea>
 8015120:	2010      	movs	r0, #16
 8015122:	1812      	adds	r2, r2, r0
 8015124:	6078      	str	r0, [r7, #4]
 8015126:	922e      	str	r2, [sp, #184]	; 0xb8
 8015128:	932d      	str	r3, [sp, #180]	; 0xb4
 801512a:	2b07      	cmp	r3, #7
 801512c:	dd08      	ble.n	8015140 <_svfprintf_r+0xdb4>
 801512e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015132:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015134:	f002 fa7e 	bl	8017634 <__ssprint_r>
 8015138:	2800      	cmp	r0, #0
 801513a:	d000      	beq.n	801513e <_svfprintf_r+0xdb2>
 801513c:	e34a      	b.n	80157d4 <_svfprintf_r+0x1448>
 801513e:	a92f      	add	r1, sp, #188	; 0xbc
 8015140:	3c10      	subs	r4, #16
 8015142:	000f      	movs	r7, r1
 8015144:	f7ff fad8 	bl	80146f8 <_svfprintf_r+0x36c>
 8015148:	2010      	movs	r0, #16
 801514a:	1812      	adds	r2, r2, r0
 801514c:	6078      	str	r0, [r7, #4]
 801514e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015150:	932d      	str	r3, [sp, #180]	; 0xb4
 8015152:	2b07      	cmp	r3, #7
 8015154:	dd08      	ble.n	8015168 <_svfprintf_r+0xddc>
 8015156:	aa2c      	add	r2, sp, #176	; 0xb0
 8015158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801515a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801515c:	f002 fa6a 	bl	8017634 <__ssprint_r>
 8015160:	2800      	cmp	r0, #0
 8015162:	d000      	beq.n	8015166 <_svfprintf_r+0xdda>
 8015164:	e336      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015166:	a92f      	add	r1, sp, #188	; 0xbc
 8015168:	3c10      	subs	r4, #16
 801516a:	000f      	movs	r7, r1
 801516c:	f7ff fb24 	bl	80147b8 <_svfprintf_r+0x42c>
 8015170:	fffffbff 	.word	0xfffffbff
 8015174:	00007830 	.word	0x00007830
 8015178:	0801ab58 	.word	0x0801ab58
 801517c:	2010      	movs	r0, #16
 801517e:	1812      	adds	r2, r2, r0
 8015180:	6078      	str	r0, [r7, #4]
 8015182:	922e      	str	r2, [sp, #184]	; 0xb8
 8015184:	932d      	str	r3, [sp, #180]	; 0xb4
 8015186:	2b07      	cmp	r3, #7
 8015188:	dd08      	ble.n	801519c <_svfprintf_r+0xe10>
 801518a:	aa2c      	add	r2, sp, #176	; 0xb0
 801518c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801518e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015190:	f002 fa50 	bl	8017634 <__ssprint_r>
 8015194:	2800      	cmp	r0, #0
 8015196:	d000      	beq.n	801519a <_svfprintf_r+0xe0e>
 8015198:	e31c      	b.n	80157d4 <_svfprintf_r+0x1448>
 801519a:	a92f      	add	r1, sp, #188	; 0xbc
 801519c:	3c10      	subs	r4, #16
 801519e:	000f      	movs	r7, r1
 80151a0:	f7ff fb2c 	bl	80147fc <_svfprintf_r+0x470>
 80151a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151a6:	2b65      	cmp	r3, #101	; 0x65
 80151a8:	dc00      	bgt.n	80151ac <_svfprintf_r+0xe20>
 80151aa:	e259      	b.n	8015660 <_svfprintf_r+0x12d4>
 80151ac:	2200      	movs	r2, #0
 80151ae:	2300      	movs	r3, #0
 80151b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80151b2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80151b4:	f7eb f952 	bl	800045c <__aeabi_dcmpeq>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d07c      	beq.n	80152b6 <_svfprintf_r+0xf2a>
 80151bc:	4b81      	ldr	r3, [pc, #516]	; (80153c4 <_svfprintf_r+0x1038>)
 80151be:	603b      	str	r3, [r7, #0]
 80151c0:	2301      	movs	r3, #1
 80151c2:	607b      	str	r3, [r7, #4]
 80151c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151c6:	3708      	adds	r7, #8
 80151c8:	3301      	adds	r3, #1
 80151ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80151cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151ce:	9308      	str	r3, [sp, #32]
 80151d0:	3301      	adds	r3, #1
 80151d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80151d4:	2b07      	cmp	r3, #7
 80151d6:	dd08      	ble.n	80151ea <_svfprintf_r+0xe5e>
 80151d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80151da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151de:	f002 fa29 	bl	8017634 <__ssprint_r>
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d000      	beq.n	80151e8 <_svfprintf_r+0xe5c>
 80151e6:	e2f5      	b.n	80157d4 <_svfprintf_r+0x1448>
 80151e8:	af2f      	add	r7, sp, #188	; 0xbc
 80151ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151ee:	4293      	cmp	r3, r2
 80151f0:	db01      	blt.n	80151f6 <_svfprintf_r+0xe6a>
 80151f2:	07f3      	lsls	r3, r6, #31
 80151f4:	d51d      	bpl.n	8015232 <_svfprintf_r+0xea6>
 80151f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80151fa:	4694      	mov	ip, r2
 80151fc:	603b      	str	r3, [r7, #0]
 80151fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015200:	607b      	str	r3, [r7, #4]
 8015202:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015204:	3708      	adds	r7, #8
 8015206:	4463      	add	r3, ip
 8015208:	932e      	str	r3, [sp, #184]	; 0xb8
 801520a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801520c:	9308      	str	r3, [sp, #32]
 801520e:	3301      	adds	r3, #1
 8015210:	932d      	str	r3, [sp, #180]	; 0xb4
 8015212:	2b07      	cmp	r3, #7
 8015214:	dd08      	ble.n	8015228 <_svfprintf_r+0xe9c>
 8015216:	aa2c      	add	r2, sp, #176	; 0xb0
 8015218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801521a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801521c:	f002 fa0a 	bl	8017634 <__ssprint_r>
 8015220:	2800      	cmp	r0, #0
 8015222:	d000      	beq.n	8015226 <_svfprintf_r+0xe9a>
 8015224:	e2d6      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015226:	af2f      	add	r7, sp, #188	; 0xbc
 8015228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522a:	2510      	movs	r5, #16
 801522c:	1e5c      	subs	r4, r3, #1
 801522e:	2c00      	cmp	r4, #0
 8015230:	dc2f      	bgt.n	8015292 <_svfprintf_r+0xf06>
 8015232:	0773      	lsls	r3, r6, #29
 8015234:	d500      	bpl.n	8015238 <_svfprintf_r+0xeac>
 8015236:	e2af      	b.n	8015798 <_svfprintf_r+0x140c>
 8015238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801523a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801523c:	4293      	cmp	r3, r2
 801523e:	da00      	bge.n	8015242 <_svfprintf_r+0xeb6>
 8015240:	0013      	movs	r3, r2
 8015242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015244:	18d3      	adds	r3, r2, r3
 8015246:	9315      	str	r3, [sp, #84]	; 0x54
 8015248:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d007      	beq.n	8015260 <_svfprintf_r+0xed4>
 8015250:	aa2c      	add	r2, sp, #176	; 0xb0
 8015252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015254:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015256:	f002 f9ed 	bl	8017634 <__ssprint_r>
 801525a:	2800      	cmp	r0, #0
 801525c:	d000      	beq.n	8015260 <_svfprintf_r+0xed4>
 801525e:	e2b9      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015260:	2300      	movs	r3, #0
 8015262:	932d      	str	r3, [sp, #180]	; 0xb4
 8015264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015266:	2b00      	cmp	r3, #0
 8015268:	d000      	beq.n	801526c <_svfprintf_r+0xee0>
 801526a:	e2cf      	b.n	801580c <_svfprintf_r+0x1480>
 801526c:	af2f      	add	r7, sp, #188	; 0xbc
 801526e:	e5d6      	b.n	8014e1e <_svfprintf_r+0xa92>
 8015270:	3210      	adds	r2, #16
 8015272:	607d      	str	r5, [r7, #4]
 8015274:	922e      	str	r2, [sp, #184]	; 0xb8
 8015276:	932d      	str	r3, [sp, #180]	; 0xb4
 8015278:	2b07      	cmp	r3, #7
 801527a:	dd08      	ble.n	801528e <_svfprintf_r+0xf02>
 801527c:	aa2c      	add	r2, sp, #176	; 0xb0
 801527e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015280:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015282:	f002 f9d7 	bl	8017634 <__ssprint_r>
 8015286:	2800      	cmp	r0, #0
 8015288:	d000      	beq.n	801528c <_svfprintf_r+0xf00>
 801528a:	e2a3      	b.n	80157d4 <_svfprintf_r+0x1448>
 801528c:	a92f      	add	r1, sp, #188	; 0xbc
 801528e:	000f      	movs	r7, r1
 8015290:	3c10      	subs	r4, #16
 8015292:	0039      	movs	r1, r7
 8015294:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015296:	484c      	ldr	r0, [pc, #304]	; (80153c8 <_svfprintf_r+0x103c>)
 8015298:	9308      	str	r3, [sp, #32]
 801529a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801529c:	3301      	adds	r3, #1
 801529e:	3108      	adds	r1, #8
 80152a0:	6038      	str	r0, [r7, #0]
 80152a2:	2c10      	cmp	r4, #16
 80152a4:	dce4      	bgt.n	8015270 <_svfprintf_r+0xee4>
 80152a6:	607c      	str	r4, [r7, #4]
 80152a8:	18a4      	adds	r4, r4, r2
 80152aa:	942e      	str	r4, [sp, #184]	; 0xb8
 80152ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80152ae:	000f      	movs	r7, r1
 80152b0:	2b07      	cmp	r3, #7
 80152b2:	ddbe      	ble.n	8015232 <_svfprintf_r+0xea6>
 80152b4:	e06a      	b.n	801538c <_svfprintf_r+0x1000>
 80152b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	dd00      	ble.n	80152be <_svfprintf_r+0xf32>
 80152bc:	e086      	b.n	80153cc <_svfprintf_r+0x1040>
 80152be:	4b41      	ldr	r3, [pc, #260]	; (80153c4 <_svfprintf_r+0x1038>)
 80152c0:	603b      	str	r3, [r7, #0]
 80152c2:	2301      	movs	r3, #1
 80152c4:	607b      	str	r3, [r7, #4]
 80152c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152c8:	3708      	adds	r7, #8
 80152ca:	3301      	adds	r3, #1
 80152cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80152ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152d0:	9308      	str	r3, [sp, #32]
 80152d2:	3301      	adds	r3, #1
 80152d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80152d6:	2b07      	cmp	r3, #7
 80152d8:	dd08      	ble.n	80152ec <_svfprintf_r+0xf60>
 80152da:	aa2c      	add	r2, sp, #176	; 0xb0
 80152dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152e0:	f002 f9a8 	bl	8017634 <__ssprint_r>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	d000      	beq.n	80152ea <_svfprintf_r+0xf5e>
 80152e8:	e274      	b.n	80157d4 <_svfprintf_r+0x1448>
 80152ea:	af2f      	add	r7, sp, #188	; 0xbc
 80152ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d104      	bne.n	80152fc <_svfprintf_r+0xf70>
 80152f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d101      	bne.n	80152fc <_svfprintf_r+0xf70>
 80152f8:	07f3      	lsls	r3, r6, #31
 80152fa:	d59a      	bpl.n	8015232 <_svfprintf_r+0xea6>
 80152fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015300:	4694      	mov	ip, r2
 8015302:	603b      	str	r3, [r7, #0]
 8015304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015306:	607b      	str	r3, [r7, #4]
 8015308:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801530a:	3708      	adds	r7, #8
 801530c:	4463      	add	r3, ip
 801530e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015310:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015312:	9308      	str	r3, [sp, #32]
 8015314:	3301      	adds	r3, #1
 8015316:	932d      	str	r3, [sp, #180]	; 0xb4
 8015318:	2b07      	cmp	r3, #7
 801531a:	dd08      	ble.n	801532e <_svfprintf_r+0xfa2>
 801531c:	aa2c      	add	r2, sp, #176	; 0xb0
 801531e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015322:	f002 f987 	bl	8017634 <__ssprint_r>
 8015326:	2800      	cmp	r0, #0
 8015328:	d000      	beq.n	801532c <_svfprintf_r+0xfa0>
 801532a:	e253      	b.n	80157d4 <_svfprintf_r+0x1448>
 801532c:	af2f      	add	r7, sp, #188	; 0xbc
 801532e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015330:	2c00      	cmp	r4, #0
 8015332:	da1a      	bge.n	801536a <_svfprintf_r+0xfde>
 8015334:	0039      	movs	r1, r7
 8015336:	2510      	movs	r5, #16
 8015338:	4264      	negs	r4, r4
 801533a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801533c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801533e:	9308      	str	r3, [sp, #32]
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	4b21      	ldr	r3, [pc, #132]	; (80153c8 <_svfprintf_r+0x103c>)
 8015344:	3708      	adds	r7, #8
 8015346:	600b      	str	r3, [r1, #0]
 8015348:	2c10      	cmp	r4, #16
 801534a:	dc29      	bgt.n	80153a0 <_svfprintf_r+0x1014>
 801534c:	604c      	str	r4, [r1, #4]
 801534e:	1824      	adds	r4, r4, r0
 8015350:	942e      	str	r4, [sp, #184]	; 0xb8
 8015352:	922d      	str	r2, [sp, #180]	; 0xb4
 8015354:	2a07      	cmp	r2, #7
 8015356:	dd08      	ble.n	801536a <_svfprintf_r+0xfde>
 8015358:	aa2c      	add	r2, sp, #176	; 0xb0
 801535a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801535c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801535e:	f002 f969 	bl	8017634 <__ssprint_r>
 8015362:	2800      	cmp	r0, #0
 8015364:	d000      	beq.n	8015368 <_svfprintf_r+0xfdc>
 8015366:	e235      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015368:	af2f      	add	r7, sp, #188	; 0xbc
 801536a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801536e:	468c      	mov	ip, r1
 8015370:	603b      	str	r3, [r7, #0]
 8015372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015374:	607b      	str	r3, [r7, #4]
 8015376:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015378:	4463      	add	r3, ip
 801537a:	932e      	str	r3, [sp, #184]	; 0xb8
 801537c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	9308      	str	r3, [sp, #32]
 8015382:	922d      	str	r2, [sp, #180]	; 0xb4
 8015384:	2a07      	cmp	r2, #7
 8015386:	dc01      	bgt.n	801538c <_svfprintf_r+0x1000>
 8015388:	f7ff fa6c 	bl	8014864 <_svfprintf_r+0x4d8>
 801538c:	aa2c      	add	r2, sp, #176	; 0xb0
 801538e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015390:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015392:	f002 f94f 	bl	8017634 <__ssprint_r>
 8015396:	2800      	cmp	r0, #0
 8015398:	d000      	beq.n	801539c <_svfprintf_r+0x1010>
 801539a:	e21b      	b.n	80157d4 <_svfprintf_r+0x1448>
 801539c:	af2f      	add	r7, sp, #188	; 0xbc
 801539e:	e748      	b.n	8015232 <_svfprintf_r+0xea6>
 80153a0:	3010      	adds	r0, #16
 80153a2:	604d      	str	r5, [r1, #4]
 80153a4:	902e      	str	r0, [sp, #184]	; 0xb8
 80153a6:	922d      	str	r2, [sp, #180]	; 0xb4
 80153a8:	2a07      	cmp	r2, #7
 80153aa:	dd08      	ble.n	80153be <_svfprintf_r+0x1032>
 80153ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80153ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153b2:	f002 f93f 	bl	8017634 <__ssprint_r>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d000      	beq.n	80153bc <_svfprintf_r+0x1030>
 80153ba:	e20b      	b.n	80157d4 <_svfprintf_r+0x1448>
 80153bc:	af2f      	add	r7, sp, #188	; 0xbc
 80153be:	3c10      	subs	r4, #16
 80153c0:	0039      	movs	r1, r7
 80153c2:	e7ba      	b.n	801533a <_svfprintf_r+0xfae>
 80153c4:	0801ab7a 	.word	0x0801ab7a
 80153c8:	0801ab8c 	.word	0x0801ab8c
 80153cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ce:	002c      	movs	r4, r5
 80153d0:	429d      	cmp	r5, r3
 80153d2:	dd00      	ble.n	80153d6 <_svfprintf_r+0x104a>
 80153d4:	001c      	movs	r4, r3
 80153d6:	2c00      	cmp	r4, #0
 80153d8:	dd15      	ble.n	8015406 <_svfprintf_r+0x107a>
 80153da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153dc:	607c      	str	r4, [r7, #4]
 80153de:	603b      	str	r3, [r7, #0]
 80153e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80153e2:	3708      	adds	r7, #8
 80153e4:	18e3      	adds	r3, r4, r3
 80153e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80153e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153ea:	9308      	str	r3, [sp, #32]
 80153ec:	3301      	adds	r3, #1
 80153ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80153f0:	2b07      	cmp	r3, #7
 80153f2:	dd08      	ble.n	8015406 <_svfprintf_r+0x107a>
 80153f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80153f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153fa:	f002 f91b 	bl	8017634 <__ssprint_r>
 80153fe:	2800      	cmp	r0, #0
 8015400:	d000      	beq.n	8015404 <_svfprintf_r+0x1078>
 8015402:	e1e7      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015404:	af2f      	add	r7, sp, #188	; 0xbc
 8015406:	43e3      	mvns	r3, r4
 8015408:	17db      	asrs	r3, r3, #31
 801540a:	401c      	ands	r4, r3
 801540c:	1b2c      	subs	r4, r5, r4
 801540e:	2c00      	cmp	r4, #0
 8015410:	dd1a      	ble.n	8015448 <_svfprintf_r+0x10bc>
 8015412:	0039      	movs	r1, r7
 8015414:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015416:	48d4      	ldr	r0, [pc, #848]	; (8015768 <_svfprintf_r+0x13dc>)
 8015418:	9308      	str	r3, [sp, #32]
 801541a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801541c:	3301      	adds	r3, #1
 801541e:	3108      	adds	r1, #8
 8015420:	6038      	str	r0, [r7, #0]
 8015422:	2c10      	cmp	r4, #16
 8015424:	dd00      	ble.n	8015428 <_svfprintf_r+0x109c>
 8015426:	e089      	b.n	801553c <_svfprintf_r+0x11b0>
 8015428:	607c      	str	r4, [r7, #4]
 801542a:	18a4      	adds	r4, r4, r2
 801542c:	942e      	str	r4, [sp, #184]	; 0xb8
 801542e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015430:	000f      	movs	r7, r1
 8015432:	2b07      	cmp	r3, #7
 8015434:	dd08      	ble.n	8015448 <_svfprintf_r+0x10bc>
 8015436:	aa2c      	add	r2, sp, #176	; 0xb0
 8015438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801543a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801543c:	f002 f8fa 	bl	8017634 <__ssprint_r>
 8015440:	2800      	cmp	r0, #0
 8015442:	d000      	beq.n	8015446 <_svfprintf_r+0x10ba>
 8015444:	e1c6      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015446:	af2f      	add	r7, sp, #188	; 0xbc
 8015448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801544a:	195d      	adds	r5, r3, r5
 801544c:	0573      	lsls	r3, r6, #21
 801544e:	d50d      	bpl.n	801546c <_svfprintf_r+0x10e0>
 8015450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015452:	2b00      	cmp	r3, #0
 8015454:	d000      	beq.n	8015458 <_svfprintf_r+0x10cc>
 8015456:	e084      	b.n	8015562 <_svfprintf_r+0x11d6>
 8015458:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801545a:	2b00      	cmp	r3, #0
 801545c:	d000      	beq.n	8015460 <_svfprintf_r+0x10d4>
 801545e:	e083      	b.n	8015568 <_svfprintf_r+0x11dc>
 8015460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015462:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015464:	189b      	adds	r3, r3, r2
 8015466:	429d      	cmp	r5, r3
 8015468:	d900      	bls.n	801546c <_svfprintf_r+0x10e0>
 801546a:	001d      	movs	r5, r3
 801546c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801546e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015470:	4293      	cmp	r3, r2
 8015472:	db01      	blt.n	8015478 <_svfprintf_r+0x10ec>
 8015474:	07f3      	lsls	r3, r6, #31
 8015476:	d518      	bpl.n	80154aa <_svfprintf_r+0x111e>
 8015478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801547a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801547c:	4694      	mov	ip, r2
 801547e:	603b      	str	r3, [r7, #0]
 8015480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015482:	607b      	str	r3, [r7, #4]
 8015484:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015486:	3708      	adds	r7, #8
 8015488:	4463      	add	r3, ip
 801548a:	932e      	str	r3, [sp, #184]	; 0xb8
 801548c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801548e:	9308      	str	r3, [sp, #32]
 8015490:	3301      	adds	r3, #1
 8015492:	932d      	str	r3, [sp, #180]	; 0xb4
 8015494:	2b07      	cmp	r3, #7
 8015496:	dd08      	ble.n	80154aa <_svfprintf_r+0x111e>
 8015498:	aa2c      	add	r2, sp, #176	; 0xb0
 801549a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801549c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801549e:	f002 f8c9 	bl	8017634 <__ssprint_r>
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d000      	beq.n	80154a8 <_svfprintf_r+0x111c>
 80154a6:	e195      	b.n	80157d4 <_svfprintf_r+0x1448>
 80154a8:	af2f      	add	r7, sp, #188	; 0xbc
 80154aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ae:	4694      	mov	ip, r2
 80154b0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80154b2:	4463      	add	r3, ip
 80154b4:	1b5b      	subs	r3, r3, r5
 80154b6:	1a54      	subs	r4, r2, r1
 80154b8:	429c      	cmp	r4, r3
 80154ba:	dd00      	ble.n	80154be <_svfprintf_r+0x1132>
 80154bc:	001c      	movs	r4, r3
 80154be:	2c00      	cmp	r4, #0
 80154c0:	dd14      	ble.n	80154ec <_svfprintf_r+0x1160>
 80154c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154c4:	603d      	str	r5, [r7, #0]
 80154c6:	18e3      	adds	r3, r4, r3
 80154c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80154ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154cc:	607c      	str	r4, [r7, #4]
 80154ce:	9308      	str	r3, [sp, #32]
 80154d0:	3301      	adds	r3, #1
 80154d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80154d4:	3708      	adds	r7, #8
 80154d6:	2b07      	cmp	r3, #7
 80154d8:	dd08      	ble.n	80154ec <_svfprintf_r+0x1160>
 80154da:	aa2c      	add	r2, sp, #176	; 0xb0
 80154dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154e0:	f002 f8a8 	bl	8017634 <__ssprint_r>
 80154e4:	2800      	cmp	r0, #0
 80154e6:	d000      	beq.n	80154ea <_svfprintf_r+0x115e>
 80154e8:	e174      	b.n	80157d4 <_svfprintf_r+0x1448>
 80154ea:	af2f      	add	r7, sp, #188	; 0xbc
 80154ec:	43e3      	mvns	r3, r4
 80154ee:	17db      	asrs	r3, r3, #31
 80154f0:	401c      	ands	r4, r3
 80154f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80154f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154f6:	2510      	movs	r5, #16
 80154f8:	1a9b      	subs	r3, r3, r2
 80154fa:	1b1c      	subs	r4, r3, r4
 80154fc:	2c00      	cmp	r4, #0
 80154fe:	dc00      	bgt.n	8015502 <_svfprintf_r+0x1176>
 8015500:	e697      	b.n	8015232 <_svfprintf_r+0xea6>
 8015502:	0039      	movs	r1, r7
 8015504:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015506:	4898      	ldr	r0, [pc, #608]	; (8015768 <_svfprintf_r+0x13dc>)
 8015508:	9308      	str	r3, [sp, #32]
 801550a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801550c:	3301      	adds	r3, #1
 801550e:	3108      	adds	r1, #8
 8015510:	6038      	str	r0, [r7, #0]
 8015512:	2c10      	cmp	r4, #16
 8015514:	dc00      	bgt.n	8015518 <_svfprintf_r+0x118c>
 8015516:	e6c6      	b.n	80152a6 <_svfprintf_r+0xf1a>
 8015518:	3210      	adds	r2, #16
 801551a:	607d      	str	r5, [r7, #4]
 801551c:	922e      	str	r2, [sp, #184]	; 0xb8
 801551e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015520:	2b07      	cmp	r3, #7
 8015522:	dd08      	ble.n	8015536 <_svfprintf_r+0x11aa>
 8015524:	aa2c      	add	r2, sp, #176	; 0xb0
 8015526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015528:	980a      	ldr	r0, [sp, #40]	; 0x28
 801552a:	f002 f883 	bl	8017634 <__ssprint_r>
 801552e:	2800      	cmp	r0, #0
 8015530:	d000      	beq.n	8015534 <_svfprintf_r+0x11a8>
 8015532:	e14f      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015534:	a92f      	add	r1, sp, #188	; 0xbc
 8015536:	3c10      	subs	r4, #16
 8015538:	000f      	movs	r7, r1
 801553a:	e7e2      	b.n	8015502 <_svfprintf_r+0x1176>
 801553c:	2010      	movs	r0, #16
 801553e:	1812      	adds	r2, r2, r0
 8015540:	6078      	str	r0, [r7, #4]
 8015542:	922e      	str	r2, [sp, #184]	; 0xb8
 8015544:	932d      	str	r3, [sp, #180]	; 0xb4
 8015546:	2b07      	cmp	r3, #7
 8015548:	dd08      	ble.n	801555c <_svfprintf_r+0x11d0>
 801554a:	aa2c      	add	r2, sp, #176	; 0xb0
 801554c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801554e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015550:	f002 f870 	bl	8017634 <__ssprint_r>
 8015554:	2800      	cmp	r0, #0
 8015556:	d000      	beq.n	801555a <_svfprintf_r+0x11ce>
 8015558:	e13c      	b.n	80157d4 <_svfprintf_r+0x1448>
 801555a:	a92f      	add	r1, sp, #188	; 0xbc
 801555c:	3c10      	subs	r4, #16
 801555e:	000f      	movs	r7, r1
 8015560:	e757      	b.n	8015412 <_svfprintf_r+0x1086>
 8015562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015564:	2b00      	cmp	r3, #0
 8015566:	d061      	beq.n	801562c <_svfprintf_r+0x12a0>
 8015568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801556a:	3b01      	subs	r3, #1
 801556c:	9310      	str	r3, [sp, #64]	; 0x40
 801556e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015570:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015572:	4694      	mov	ip, r2
 8015574:	603b      	str	r3, [r7, #0]
 8015576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015578:	607b      	str	r3, [r7, #4]
 801557a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801557c:	3708      	adds	r7, #8
 801557e:	4463      	add	r3, ip
 8015580:	932e      	str	r3, [sp, #184]	; 0xb8
 8015582:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015584:	9308      	str	r3, [sp, #32]
 8015586:	3301      	adds	r3, #1
 8015588:	932d      	str	r3, [sp, #180]	; 0xb4
 801558a:	2b07      	cmp	r3, #7
 801558c:	dd08      	ble.n	80155a0 <_svfprintf_r+0x1214>
 801558e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015592:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015594:	f002 f84e 	bl	8017634 <__ssprint_r>
 8015598:	2800      	cmp	r0, #0
 801559a:	d000      	beq.n	801559e <_svfprintf_r+0x1212>
 801559c:	e11a      	b.n	80157d4 <_svfprintf_r+0x1448>
 801559e:	af2f      	add	r7, sp, #188	; 0xbc
 80155a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155a4:	189b      	adds	r3, r3, r2
 80155a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155a8:	1b5b      	subs	r3, r3, r5
 80155aa:	7814      	ldrb	r4, [r2, #0]
 80155ac:	429c      	cmp	r4, r3
 80155ae:	dd00      	ble.n	80155b2 <_svfprintf_r+0x1226>
 80155b0:	001c      	movs	r4, r3
 80155b2:	2c00      	cmp	r4, #0
 80155b4:	dd14      	ble.n	80155e0 <_svfprintf_r+0x1254>
 80155b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155b8:	603d      	str	r5, [r7, #0]
 80155ba:	18e3      	adds	r3, r4, r3
 80155bc:	932e      	str	r3, [sp, #184]	; 0xb8
 80155be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155c0:	607c      	str	r4, [r7, #4]
 80155c2:	9308      	str	r3, [sp, #32]
 80155c4:	3301      	adds	r3, #1
 80155c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80155c8:	3708      	adds	r7, #8
 80155ca:	2b07      	cmp	r3, #7
 80155cc:	dd08      	ble.n	80155e0 <_svfprintf_r+0x1254>
 80155ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80155d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155d4:	f002 f82e 	bl	8017634 <__ssprint_r>
 80155d8:	2800      	cmp	r0, #0
 80155da:	d000      	beq.n	80155de <_svfprintf_r+0x1252>
 80155dc:	e0fa      	b.n	80157d4 <_svfprintf_r+0x1448>
 80155de:	af2f      	add	r7, sp, #188	; 0xbc
 80155e0:	43e3      	mvns	r3, r4
 80155e2:	17db      	asrs	r3, r3, #31
 80155e4:	401c      	ands	r4, r3
 80155e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	1b1c      	subs	r4, r3, r4
 80155ec:	2c00      	cmp	r4, #0
 80155ee:	dd19      	ble.n	8015624 <_svfprintf_r+0x1298>
 80155f0:	0039      	movs	r1, r7
 80155f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155f4:	485c      	ldr	r0, [pc, #368]	; (8015768 <_svfprintf_r+0x13dc>)
 80155f6:	9308      	str	r3, [sp, #32]
 80155f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80155fa:	3301      	adds	r3, #1
 80155fc:	3108      	adds	r1, #8
 80155fe:	6038      	str	r0, [r7, #0]
 8015600:	2c10      	cmp	r4, #16
 8015602:	dc1a      	bgt.n	801563a <_svfprintf_r+0x12ae>
 8015604:	607c      	str	r4, [r7, #4]
 8015606:	18a4      	adds	r4, r4, r2
 8015608:	942e      	str	r4, [sp, #184]	; 0xb8
 801560a:	932d      	str	r3, [sp, #180]	; 0xb4
 801560c:	000f      	movs	r7, r1
 801560e:	2b07      	cmp	r3, #7
 8015610:	dd08      	ble.n	8015624 <_svfprintf_r+0x1298>
 8015612:	aa2c      	add	r2, sp, #176	; 0xb0
 8015614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015616:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015618:	f002 f80c 	bl	8017634 <__ssprint_r>
 801561c:	2800      	cmp	r0, #0
 801561e:	d000      	beq.n	8015622 <_svfprintf_r+0x1296>
 8015620:	e0d8      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015622:	af2f      	add	r7, sp, #188	; 0xbc
 8015624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015626:	781b      	ldrb	r3, [r3, #0]
 8015628:	18ed      	adds	r5, r5, r3
 801562a:	e711      	b.n	8015450 <_svfprintf_r+0x10c4>
 801562c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801562e:	3b01      	subs	r3, #1
 8015630:	9313      	str	r3, [sp, #76]	; 0x4c
 8015632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015634:	3b01      	subs	r3, #1
 8015636:	930f      	str	r3, [sp, #60]	; 0x3c
 8015638:	e799      	b.n	801556e <_svfprintf_r+0x11e2>
 801563a:	2010      	movs	r0, #16
 801563c:	1812      	adds	r2, r2, r0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	922e      	str	r2, [sp, #184]	; 0xb8
 8015642:	932d      	str	r3, [sp, #180]	; 0xb4
 8015644:	2b07      	cmp	r3, #7
 8015646:	dd08      	ble.n	801565a <_svfprintf_r+0x12ce>
 8015648:	aa2c      	add	r2, sp, #176	; 0xb0
 801564a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801564c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801564e:	f001 fff1 	bl	8017634 <__ssprint_r>
 8015652:	2800      	cmp	r0, #0
 8015654:	d000      	beq.n	8015658 <_svfprintf_r+0x12cc>
 8015656:	e0bd      	b.n	80157d4 <_svfprintf_r+0x1448>
 8015658:	a92f      	add	r1, sp, #188	; 0xbc
 801565a:	3c10      	subs	r4, #16
 801565c:	000f      	movs	r7, r1
 801565e:	e7c7      	b.n	80155f0 <_svfprintf_r+0x1264>
 8015660:	003c      	movs	r4, r7
 8015662:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015664:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015668:	9308      	str	r3, [sp, #32]
 801566a:	3101      	adds	r1, #1
 801566c:	3301      	adds	r3, #1
 801566e:	3408      	adds	r4, #8
 8015670:	2a01      	cmp	r2, #1
 8015672:	dc03      	bgt.n	801567c <_svfprintf_r+0x12f0>
 8015674:	2201      	movs	r2, #1
 8015676:	4216      	tst	r6, r2
 8015678:	d100      	bne.n	801567c <_svfprintf_r+0x12f0>
 801567a:	e088      	b.n	801578e <_svfprintf_r+0x1402>
 801567c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801567e:	912e      	str	r1, [sp, #184]	; 0xb8
 8015680:	603a      	str	r2, [r7, #0]
 8015682:	2201      	movs	r2, #1
 8015684:	932d      	str	r3, [sp, #180]	; 0xb4
 8015686:	607a      	str	r2, [r7, #4]
 8015688:	2b07      	cmp	r3, #7
 801568a:	dd08      	ble.n	801569e <_svfprintf_r+0x1312>
 801568c:	aa2c      	add	r2, sp, #176	; 0xb0
 801568e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015692:	f001 ffcf 	bl	8017634 <__ssprint_r>
 8015696:	2800      	cmp	r0, #0
 8015698:	d000      	beq.n	801569c <_svfprintf_r+0x1310>
 801569a:	e09b      	b.n	80157d4 <_svfprintf_r+0x1448>
 801569c:	ac2f      	add	r4, sp, #188	; 0xbc
 801569e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80156a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80156a2:	4694      	mov	ip, r2
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156a8:	6063      	str	r3, [r4, #4]
 80156aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156ac:	3408      	adds	r4, #8
 80156ae:	4463      	add	r3, ip
 80156b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80156b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156b4:	9308      	str	r3, [sp, #32]
 80156b6:	3301      	adds	r3, #1
 80156b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ba:	2b07      	cmp	r3, #7
 80156bc:	dd08      	ble.n	80156d0 <_svfprintf_r+0x1344>
 80156be:	aa2c      	add	r2, sp, #176	; 0xb0
 80156c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156c4:	f001 ffb6 	bl	8017634 <__ssprint_r>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d000      	beq.n	80156ce <_svfprintf_r+0x1342>
 80156cc:	e082      	b.n	80157d4 <_svfprintf_r+0x1448>
 80156ce:	ac2f      	add	r4, sp, #188	; 0xbc
 80156d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156d2:	2200      	movs	r2, #0
 80156d4:	1e5d      	subs	r5, r3, #1
 80156d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80156d8:	2300      	movs	r3, #0
 80156da:	9919      	ldr	r1, [sp, #100]	; 0x64
 80156dc:	f7ea febe 	bl	800045c <__aeabi_dcmpeq>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d12c      	bne.n	801573e <_svfprintf_r+0x13b2>
 80156e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80156e8:	9308      	str	r3, [sp, #32]
 80156ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156ec:	6065      	str	r5, [r4, #4]
 80156ee:	1c5a      	adds	r2, r3, #1
 80156f0:	930e      	str	r3, [sp, #56]	; 0x38
 80156f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f4:	922d      	str	r2, [sp, #180]	; 0xb4
 80156f6:	3301      	adds	r3, #1
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	9b08      	ldr	r3, [sp, #32]
 80156fc:	3408      	adds	r4, #8
 80156fe:	3b01      	subs	r3, #1
 8015700:	185b      	adds	r3, r3, r1
 8015702:	932e      	str	r3, [sp, #184]	; 0xb8
 8015704:	2a07      	cmp	r2, #7
 8015706:	dd07      	ble.n	8015718 <_svfprintf_r+0x138c>
 8015708:	aa2c      	add	r2, sp, #176	; 0xb0
 801570a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801570c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801570e:	f001 ff91 	bl	8017634 <__ssprint_r>
 8015712:	2800      	cmp	r0, #0
 8015714:	d15e      	bne.n	80157d4 <_svfprintf_r+0x1448>
 8015716:	ac2f      	add	r4, sp, #188	; 0xbc
 8015718:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801571a:	ab28      	add	r3, sp, #160	; 0xa0
 801571c:	4694      	mov	ip, r2
 801571e:	6023      	str	r3, [r4, #0]
 8015720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015722:	6063      	str	r3, [r4, #4]
 8015724:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015726:	4463      	add	r3, ip
 8015728:	932e      	str	r3, [sp, #184]	; 0xb8
 801572a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801572c:	9308      	str	r3, [sp, #32]
 801572e:	3301      	adds	r3, #1
 8015730:	932d      	str	r3, [sp, #180]	; 0xb4
 8015732:	2b07      	cmp	r3, #7
 8015734:	dd00      	ble.n	8015738 <_svfprintf_r+0x13ac>
 8015736:	e629      	b.n	801538c <_svfprintf_r+0x1000>
 8015738:	3408      	adds	r4, #8
 801573a:	0027      	movs	r7, r4
 801573c:	e579      	b.n	8015232 <_svfprintf_r+0xea6>
 801573e:	2710      	movs	r7, #16
 8015740:	2d00      	cmp	r5, #0
 8015742:	dde9      	ble.n	8015718 <_svfprintf_r+0x138c>
 8015744:	0021      	movs	r1, r4
 8015746:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015748:	4807      	ldr	r0, [pc, #28]	; (8015768 <_svfprintf_r+0x13dc>)
 801574a:	9308      	str	r3, [sp, #32]
 801574c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801574e:	3301      	adds	r3, #1
 8015750:	3108      	adds	r1, #8
 8015752:	6020      	str	r0, [r4, #0]
 8015754:	2d10      	cmp	r5, #16
 8015756:	dc09      	bgt.n	801576c <_svfprintf_r+0x13e0>
 8015758:	6065      	str	r5, [r4, #4]
 801575a:	000c      	movs	r4, r1
 801575c:	18ad      	adds	r5, r5, r2
 801575e:	952e      	str	r5, [sp, #184]	; 0xb8
 8015760:	932d      	str	r3, [sp, #180]	; 0xb4
 8015762:	2b07      	cmp	r3, #7
 8015764:	ddd8      	ble.n	8015718 <_svfprintf_r+0x138c>
 8015766:	e7cf      	b.n	8015708 <_svfprintf_r+0x137c>
 8015768:	0801ab8c 	.word	0x0801ab8c
 801576c:	3210      	adds	r2, #16
 801576e:	6067      	str	r7, [r4, #4]
 8015770:	922e      	str	r2, [sp, #184]	; 0xb8
 8015772:	932d      	str	r3, [sp, #180]	; 0xb4
 8015774:	2b07      	cmp	r3, #7
 8015776:	dd07      	ble.n	8015788 <_svfprintf_r+0x13fc>
 8015778:	aa2c      	add	r2, sp, #176	; 0xb0
 801577a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801577c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801577e:	f001 ff59 	bl	8017634 <__ssprint_r>
 8015782:	2800      	cmp	r0, #0
 8015784:	d126      	bne.n	80157d4 <_svfprintf_r+0x1448>
 8015786:	a92f      	add	r1, sp, #188	; 0xbc
 8015788:	3d10      	subs	r5, #16
 801578a:	000c      	movs	r4, r1
 801578c:	e7da      	b.n	8015744 <_svfprintf_r+0x13b8>
 801578e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015790:	912e      	str	r1, [sp, #184]	; 0xb8
 8015792:	c705      	stmia	r7!, {r0, r2}
 8015794:	932d      	str	r3, [sp, #180]	; 0xb4
 8015796:	e7e4      	b.n	8015762 <_svfprintf_r+0x13d6>
 8015798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801579a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801579c:	2510      	movs	r5, #16
 801579e:	1a9c      	subs	r4, r3, r2
 80157a0:	2c00      	cmp	r4, #0
 80157a2:	dc00      	bgt.n	80157a6 <_svfprintf_r+0x141a>
 80157a4:	e548      	b.n	8015238 <_svfprintf_r+0xeac>
 80157a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157a8:	4921      	ldr	r1, [pc, #132]	; (8015830 <_svfprintf_r+0x14a4>)
 80157aa:	9308      	str	r3, [sp, #32]
 80157ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80157ae:	3301      	adds	r3, #1
 80157b0:	6039      	str	r1, [r7, #0]
 80157b2:	2c10      	cmp	r4, #16
 80157b4:	dc19      	bgt.n	80157ea <_svfprintf_r+0x145e>
 80157b6:	607c      	str	r4, [r7, #4]
 80157b8:	18a4      	adds	r4, r4, r2
 80157ba:	942e      	str	r4, [sp, #184]	; 0xb8
 80157bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80157be:	2b07      	cmp	r3, #7
 80157c0:	dc00      	bgt.n	80157c4 <_svfprintf_r+0x1438>
 80157c2:	e539      	b.n	8015238 <_svfprintf_r+0xeac>
 80157c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80157c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157ca:	f001 ff33 	bl	8017634 <__ssprint_r>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d100      	bne.n	80157d4 <_svfprintf_r+0x1448>
 80157d2:	e531      	b.n	8015238 <_svfprintf_r+0xeac>
 80157d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d101      	bne.n	80157de <_svfprintf_r+0x1452>
 80157da:	f7ff f908 	bl	80149ee <_svfprintf_r+0x662>
 80157de:	0019      	movs	r1, r3
 80157e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157e2:	f000 ff19 	bl	8016618 <_free_r>
 80157e6:	f7ff f902 	bl	80149ee <_svfprintf_r+0x662>
 80157ea:	3210      	adds	r2, #16
 80157ec:	607d      	str	r5, [r7, #4]
 80157ee:	922e      	str	r2, [sp, #184]	; 0xb8
 80157f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80157f2:	3708      	adds	r7, #8
 80157f4:	2b07      	cmp	r3, #7
 80157f6:	dd07      	ble.n	8015808 <_svfprintf_r+0x147c>
 80157f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80157fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157fe:	f001 ff19 	bl	8017634 <__ssprint_r>
 8015802:	2800      	cmp	r0, #0
 8015804:	d1e6      	bne.n	80157d4 <_svfprintf_r+0x1448>
 8015806:	af2f      	add	r7, sp, #188	; 0xbc
 8015808:	3c10      	subs	r4, #16
 801580a:	e7cc      	b.n	80157a6 <_svfprintf_r+0x141a>
 801580c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801580e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015810:	f000 ff02 	bl	8016618 <_free_r>
 8015814:	e52a      	b.n	801526c <_svfprintf_r+0xee0>
 8015816:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015818:	9306      	str	r3, [sp, #24]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d101      	bne.n	8015822 <_svfprintf_r+0x1496>
 801581e:	f7ff f8e6 	bl	80149ee <_svfprintf_r+0x662>
 8015822:	aa2c      	add	r2, sp, #176	; 0xb0
 8015824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015828:	f001 ff04 	bl	8017634 <__ssprint_r>
 801582c:	f7ff f8df 	bl	80149ee <_svfprintf_r+0x662>
 8015830:	0801ab7c 	.word	0x0801ab7c

08015834 <sysconf>:
 8015834:	2380      	movs	r3, #128	; 0x80
 8015836:	b510      	push	{r4, lr}
 8015838:	015b      	lsls	r3, r3, #5
 801583a:	2808      	cmp	r0, #8
 801583c:	d004      	beq.n	8015848 <sysconf+0x14>
 801583e:	f000 fe7d 	bl	801653c <__errno>
 8015842:	2316      	movs	r3, #22
 8015844:	6003      	str	r3, [r0, #0]
 8015846:	3b17      	subs	r3, #23
 8015848:	0018      	movs	r0, r3
 801584a:	bd10      	pop	{r4, pc}

0801584c <__ascii_wctomb>:
 801584c:	1e0b      	subs	r3, r1, #0
 801584e:	d004      	beq.n	801585a <__ascii_wctomb+0xe>
 8015850:	2aff      	cmp	r2, #255	; 0xff
 8015852:	d904      	bls.n	801585e <__ascii_wctomb+0x12>
 8015854:	238a      	movs	r3, #138	; 0x8a
 8015856:	6003      	str	r3, [r0, #0]
 8015858:	3b8b      	subs	r3, #139	; 0x8b
 801585a:	0018      	movs	r0, r3
 801585c:	4770      	bx	lr
 801585e:	700a      	strb	r2, [r1, #0]
 8015860:	2301      	movs	r3, #1
 8015862:	e7fa      	b.n	801585a <__ascii_wctomb+0xe>

08015864 <register_fini>:
 8015864:	4b03      	ldr	r3, [pc, #12]	; (8015874 <register_fini+0x10>)
 8015866:	b510      	push	{r4, lr}
 8015868:	2b00      	cmp	r3, #0
 801586a:	d002      	beq.n	8015872 <register_fini+0xe>
 801586c:	4802      	ldr	r0, [pc, #8]	; (8015878 <register_fini+0x14>)
 801586e:	f000 f805 	bl	801587c <atexit>
 8015872:	bd10      	pop	{r4, pc}
 8015874:	00000000 	.word	0x00000000
 8015878:	08016549 	.word	0x08016549

0801587c <atexit>:
 801587c:	2300      	movs	r3, #0
 801587e:	b510      	push	{r4, lr}
 8015880:	0001      	movs	r1, r0
 8015882:	001a      	movs	r2, r3
 8015884:	0018      	movs	r0, r3
 8015886:	f001 ff53 	bl	8017730 <__register_exitproc>
 801588a:	bd10      	pop	{r4, pc}

0801588c <quorem>:
 801588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801588e:	6903      	ldr	r3, [r0, #16]
 8015890:	690c      	ldr	r4, [r1, #16]
 8015892:	b089      	sub	sp, #36	; 0x24
 8015894:	0007      	movs	r7, r0
 8015896:	9105      	str	r1, [sp, #20]
 8015898:	2600      	movs	r6, #0
 801589a:	42a3      	cmp	r3, r4
 801589c:	db65      	blt.n	801596a <quorem+0xde>
 801589e:	000b      	movs	r3, r1
 80158a0:	3c01      	subs	r4, #1
 80158a2:	3314      	adds	r3, #20
 80158a4:	00a5      	lsls	r5, r4, #2
 80158a6:	9303      	str	r3, [sp, #12]
 80158a8:	195b      	adds	r3, r3, r5
 80158aa:	9304      	str	r3, [sp, #16]
 80158ac:	0003      	movs	r3, r0
 80158ae:	3314      	adds	r3, #20
 80158b0:	9302      	str	r3, [sp, #8]
 80158b2:	195d      	adds	r5, r3, r5
 80158b4:	9b04      	ldr	r3, [sp, #16]
 80158b6:	6828      	ldr	r0, [r5, #0]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	1c59      	adds	r1, r3, #1
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	f7ea fc47 	bl	8000150 <__udivsi3>
 80158c2:	9001      	str	r0, [sp, #4]
 80158c4:	42b0      	cmp	r0, r6
 80158c6:	d029      	beq.n	801591c <quorem+0x90>
 80158c8:	9b03      	ldr	r3, [sp, #12]
 80158ca:	9802      	ldr	r0, [sp, #8]
 80158cc:	469c      	mov	ip, r3
 80158ce:	9606      	str	r6, [sp, #24]
 80158d0:	4662      	mov	r2, ip
 80158d2:	ca08      	ldmia	r2!, {r3}
 80158d4:	4694      	mov	ip, r2
 80158d6:	9a01      	ldr	r2, [sp, #4]
 80158d8:	b299      	uxth	r1, r3
 80158da:	4351      	muls	r1, r2
 80158dc:	0c1b      	lsrs	r3, r3, #16
 80158de:	4353      	muls	r3, r2
 80158e0:	1989      	adds	r1, r1, r6
 80158e2:	0c0a      	lsrs	r2, r1, #16
 80158e4:	189b      	adds	r3, r3, r2
 80158e6:	9307      	str	r3, [sp, #28]
 80158e8:	0c1e      	lsrs	r6, r3, #16
 80158ea:	6803      	ldr	r3, [r0, #0]
 80158ec:	b289      	uxth	r1, r1
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	9b06      	ldr	r3, [sp, #24]
 80158f2:	18d2      	adds	r2, r2, r3
 80158f4:	6803      	ldr	r3, [r0, #0]
 80158f6:	1a52      	subs	r2, r2, r1
 80158f8:	0c19      	lsrs	r1, r3, #16
 80158fa:	466b      	mov	r3, sp
 80158fc:	8b9b      	ldrh	r3, [r3, #28]
 80158fe:	1acb      	subs	r3, r1, r3
 8015900:	1411      	asrs	r1, r2, #16
 8015902:	185b      	adds	r3, r3, r1
 8015904:	1419      	asrs	r1, r3, #16
 8015906:	b292      	uxth	r2, r2
 8015908:	041b      	lsls	r3, r3, #16
 801590a:	431a      	orrs	r2, r3
 801590c:	9b04      	ldr	r3, [sp, #16]
 801590e:	9106      	str	r1, [sp, #24]
 8015910:	c004      	stmia	r0!, {r2}
 8015912:	4563      	cmp	r3, ip
 8015914:	d2dc      	bcs.n	80158d0 <quorem+0x44>
 8015916:	682b      	ldr	r3, [r5, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d02d      	beq.n	8015978 <quorem+0xec>
 801591c:	9905      	ldr	r1, [sp, #20]
 801591e:	0038      	movs	r0, r7
 8015920:	f001 fcb2 	bl	8017288 <__mcmp>
 8015924:	2800      	cmp	r0, #0
 8015926:	db1f      	blt.n	8015968 <quorem+0xdc>
 8015928:	2500      	movs	r5, #0
 801592a:	9b01      	ldr	r3, [sp, #4]
 801592c:	9802      	ldr	r0, [sp, #8]
 801592e:	3301      	adds	r3, #1
 8015930:	9903      	ldr	r1, [sp, #12]
 8015932:	9301      	str	r3, [sp, #4]
 8015934:	6802      	ldr	r2, [r0, #0]
 8015936:	c908      	ldmia	r1!, {r3}
 8015938:	b292      	uxth	r2, r2
 801593a:	1955      	adds	r5, r2, r5
 801593c:	b29a      	uxth	r2, r3
 801593e:	1aaa      	subs	r2, r5, r2
 8015940:	6805      	ldr	r5, [r0, #0]
 8015942:	0c1b      	lsrs	r3, r3, #16
 8015944:	0c2d      	lsrs	r5, r5, #16
 8015946:	1aeb      	subs	r3, r5, r3
 8015948:	1415      	asrs	r5, r2, #16
 801594a:	195b      	adds	r3, r3, r5
 801594c:	141d      	asrs	r5, r3, #16
 801594e:	b292      	uxth	r2, r2
 8015950:	041b      	lsls	r3, r3, #16
 8015952:	4313      	orrs	r3, r2
 8015954:	c008      	stmia	r0!, {r3}
 8015956:	9b04      	ldr	r3, [sp, #16]
 8015958:	428b      	cmp	r3, r1
 801595a:	d2eb      	bcs.n	8015934 <quorem+0xa8>
 801595c:	9a02      	ldr	r2, [sp, #8]
 801595e:	00a3      	lsls	r3, r4, #2
 8015960:	18d3      	adds	r3, r2, r3
 8015962:	681a      	ldr	r2, [r3, #0]
 8015964:	2a00      	cmp	r2, #0
 8015966:	d011      	beq.n	801598c <quorem+0x100>
 8015968:	9e01      	ldr	r6, [sp, #4]
 801596a:	0030      	movs	r0, r6
 801596c:	b009      	add	sp, #36	; 0x24
 801596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015970:	682b      	ldr	r3, [r5, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d104      	bne.n	8015980 <quorem+0xf4>
 8015976:	3c01      	subs	r4, #1
 8015978:	9b02      	ldr	r3, [sp, #8]
 801597a:	3d04      	subs	r5, #4
 801597c:	42ab      	cmp	r3, r5
 801597e:	d3f7      	bcc.n	8015970 <quorem+0xe4>
 8015980:	613c      	str	r4, [r7, #16]
 8015982:	e7cb      	b.n	801591c <quorem+0x90>
 8015984:	681a      	ldr	r2, [r3, #0]
 8015986:	2a00      	cmp	r2, #0
 8015988:	d104      	bne.n	8015994 <quorem+0x108>
 801598a:	3c01      	subs	r4, #1
 801598c:	9a02      	ldr	r2, [sp, #8]
 801598e:	3b04      	subs	r3, #4
 8015990:	429a      	cmp	r2, r3
 8015992:	d3f7      	bcc.n	8015984 <quorem+0xf8>
 8015994:	613c      	str	r4, [r7, #16]
 8015996:	e7e7      	b.n	8015968 <quorem+0xdc>

08015998 <_dtoa_r>:
 8015998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801599a:	0014      	movs	r4, r2
 801599c:	001d      	movs	r5, r3
 801599e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80159a0:	b09b      	sub	sp, #108	; 0x6c
 80159a2:	9002      	str	r0, [sp, #8]
 80159a4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80159a6:	9406      	str	r4, [sp, #24]
 80159a8:	9507      	str	r5, [sp, #28]
 80159aa:	2900      	cmp	r1, #0
 80159ac:	d009      	beq.n	80159c2 <_dtoa_r+0x2a>
 80159ae:	2301      	movs	r3, #1
 80159b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80159b2:	4093      	lsls	r3, r2
 80159b4:	604a      	str	r2, [r1, #4]
 80159b6:	608b      	str	r3, [r1, #8]
 80159b8:	f001 fa6a 	bl	8016e90 <_Bfree>
 80159bc:	2300      	movs	r3, #0
 80159be:	9a02      	ldr	r2, [sp, #8]
 80159c0:	6413      	str	r3, [r2, #64]	; 0x40
 80159c2:	2d00      	cmp	r5, #0
 80159c4:	da20      	bge.n	8015a08 <_dtoa_r+0x70>
 80159c6:	2301      	movs	r3, #1
 80159c8:	6033      	str	r3, [r6, #0]
 80159ca:	006b      	lsls	r3, r5, #1
 80159cc:	085b      	lsrs	r3, r3, #1
 80159ce:	9307      	str	r3, [sp, #28]
 80159d0:	9c07      	ldr	r4, [sp, #28]
 80159d2:	4bb2      	ldr	r3, [pc, #712]	; (8015c9c <_dtoa_r+0x304>)
 80159d4:	0022      	movs	r2, r4
 80159d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80159d8:	401a      	ands	r2, r3
 80159da:	429a      	cmp	r2, r3
 80159dc:	d117      	bne.n	8015a0e <_dtoa_r+0x76>
 80159de:	4bb0      	ldr	r3, [pc, #704]	; (8015ca0 <_dtoa_r+0x308>)
 80159e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80159e2:	6013      	str	r3, [r2, #0]
 80159e4:	9b06      	ldr	r3, [sp, #24]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d103      	bne.n	80159f2 <_dtoa_r+0x5a>
 80159ea:	0324      	lsls	r4, r4, #12
 80159ec:	d101      	bne.n	80159f2 <_dtoa_r+0x5a>
 80159ee:	f000 fd89 	bl	8016504 <_dtoa_r+0xb6c>
 80159f2:	4bac      	ldr	r3, [pc, #688]	; (8015ca4 <_dtoa_r+0x30c>)
 80159f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80159f6:	9308      	str	r3, [sp, #32]
 80159f8:	2a00      	cmp	r2, #0
 80159fa:	d002      	beq.n	8015a02 <_dtoa_r+0x6a>
 80159fc:	4baa      	ldr	r3, [pc, #680]	; (8015ca8 <_dtoa_r+0x310>)
 80159fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a00:	6013      	str	r3, [r2, #0]
 8015a02:	9808      	ldr	r0, [sp, #32]
 8015a04:	b01b      	add	sp, #108	; 0x6c
 8015a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a08:	2300      	movs	r3, #0
 8015a0a:	6033      	str	r3, [r6, #0]
 8015a0c:	e7e0      	b.n	80159d0 <_dtoa_r+0x38>
 8015a0e:	9e06      	ldr	r6, [sp, #24]
 8015a10:	9f07      	ldr	r7, [sp, #28]
 8015a12:	2200      	movs	r2, #0
 8015a14:	2300      	movs	r3, #0
 8015a16:	0030      	movs	r0, r6
 8015a18:	0039      	movs	r1, r7
 8015a1a:	f7ea fd1f 	bl	800045c <__aeabi_dcmpeq>
 8015a1e:	1e05      	subs	r5, r0, #0
 8015a20:	d00b      	beq.n	8015a3a <_dtoa_r+0xa2>
 8015a22:	2301      	movs	r3, #1
 8015a24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015a26:	6013      	str	r3, [r2, #0]
 8015a28:	4ba0      	ldr	r3, [pc, #640]	; (8015cac <_dtoa_r+0x314>)
 8015a2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a2c:	9308      	str	r3, [sp, #32]
 8015a2e:	2a00      	cmp	r2, #0
 8015a30:	d0e7      	beq.n	8015a02 <_dtoa_r+0x6a>
 8015a32:	4a9f      	ldr	r2, [pc, #636]	; (8015cb0 <_dtoa_r+0x318>)
 8015a34:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015a36:	600a      	str	r2, [r1, #0]
 8015a38:	e7e3      	b.n	8015a02 <_dtoa_r+0x6a>
 8015a3a:	ab18      	add	r3, sp, #96	; 0x60
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	ab19      	add	r3, sp, #100	; 0x64
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	0032      	movs	r2, r6
 8015a44:	003b      	movs	r3, r7
 8015a46:	9802      	ldr	r0, [sp, #8]
 8015a48:	f001 fd0e 	bl	8017468 <__d2b>
 8015a4c:	0063      	lsls	r3, r4, #1
 8015a4e:	9003      	str	r0, [sp, #12]
 8015a50:	0d5b      	lsrs	r3, r3, #21
 8015a52:	d074      	beq.n	8015b3e <_dtoa_r+0x1a6>
 8015a54:	033a      	lsls	r2, r7, #12
 8015a56:	4c97      	ldr	r4, [pc, #604]	; (8015cb4 <_dtoa_r+0x31c>)
 8015a58:	0b12      	lsrs	r2, r2, #12
 8015a5a:	4314      	orrs	r4, r2
 8015a5c:	0021      	movs	r1, r4
 8015a5e:	4a96      	ldr	r2, [pc, #600]	; (8015cb8 <_dtoa_r+0x320>)
 8015a60:	0030      	movs	r0, r6
 8015a62:	9516      	str	r5, [sp, #88]	; 0x58
 8015a64:	189e      	adds	r6, r3, r2
 8015a66:	2200      	movs	r2, #0
 8015a68:	4b94      	ldr	r3, [pc, #592]	; (8015cbc <_dtoa_r+0x324>)
 8015a6a:	f7ec fd67 	bl	800253c <__aeabi_dsub>
 8015a6e:	4a94      	ldr	r2, [pc, #592]	; (8015cc0 <_dtoa_r+0x328>)
 8015a70:	4b94      	ldr	r3, [pc, #592]	; (8015cc4 <_dtoa_r+0x32c>)
 8015a72:	f7ec faf1 	bl	8002058 <__aeabi_dmul>
 8015a76:	4a94      	ldr	r2, [pc, #592]	; (8015cc8 <_dtoa_r+0x330>)
 8015a78:	4b94      	ldr	r3, [pc, #592]	; (8015ccc <_dtoa_r+0x334>)
 8015a7a:	f7eb fbc7 	bl	800120c <__aeabi_dadd>
 8015a7e:	0004      	movs	r4, r0
 8015a80:	0030      	movs	r0, r6
 8015a82:	000d      	movs	r5, r1
 8015a84:	f7ed f8f4 	bl	8002c70 <__aeabi_i2d>
 8015a88:	4a91      	ldr	r2, [pc, #580]	; (8015cd0 <_dtoa_r+0x338>)
 8015a8a:	4b92      	ldr	r3, [pc, #584]	; (8015cd4 <_dtoa_r+0x33c>)
 8015a8c:	f7ec fae4 	bl	8002058 <__aeabi_dmul>
 8015a90:	0002      	movs	r2, r0
 8015a92:	000b      	movs	r3, r1
 8015a94:	0020      	movs	r0, r4
 8015a96:	0029      	movs	r1, r5
 8015a98:	f7eb fbb8 	bl	800120c <__aeabi_dadd>
 8015a9c:	0004      	movs	r4, r0
 8015a9e:	000d      	movs	r5, r1
 8015aa0:	f7ed f8b0 	bl	8002c04 <__aeabi_d2iz>
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	0007      	movs	r7, r0
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	0020      	movs	r0, r4
 8015aac:	0029      	movs	r1, r5
 8015aae:	f7ea fcdb 	bl	8000468 <__aeabi_dcmplt>
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	d009      	beq.n	8015aca <_dtoa_r+0x132>
 8015ab6:	0038      	movs	r0, r7
 8015ab8:	f7ed f8da 	bl	8002c70 <__aeabi_i2d>
 8015abc:	002b      	movs	r3, r5
 8015abe:	0022      	movs	r2, r4
 8015ac0:	f7ea fccc 	bl	800045c <__aeabi_dcmpeq>
 8015ac4:	4243      	negs	r3, r0
 8015ac6:	4158      	adcs	r0, r3
 8015ac8:	1a3f      	subs	r7, r7, r0
 8015aca:	2301      	movs	r3, #1
 8015acc:	9314      	str	r3, [sp, #80]	; 0x50
 8015ace:	2f16      	cmp	r7, #22
 8015ad0:	d80d      	bhi.n	8015aee <_dtoa_r+0x156>
 8015ad2:	4981      	ldr	r1, [pc, #516]	; (8015cd8 <_dtoa_r+0x340>)
 8015ad4:	00fb      	lsls	r3, r7, #3
 8015ad6:	18c9      	adds	r1, r1, r3
 8015ad8:	6808      	ldr	r0, [r1, #0]
 8015ada:	6849      	ldr	r1, [r1, #4]
 8015adc:	9a06      	ldr	r2, [sp, #24]
 8015ade:	9b07      	ldr	r3, [sp, #28]
 8015ae0:	f7ea fcd6 	bl	8000490 <__aeabi_dcmpgt>
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d046      	beq.n	8015b76 <_dtoa_r+0x1de>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	3f01      	subs	r7, #1
 8015aec:	9314      	str	r3, [sp, #80]	; 0x50
 8015aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015af0:	1b9e      	subs	r6, r3, r6
 8015af2:	2300      	movs	r3, #0
 8015af4:	930a      	str	r3, [sp, #40]	; 0x28
 8015af6:	0033      	movs	r3, r6
 8015af8:	3b01      	subs	r3, #1
 8015afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8015afc:	d504      	bpl.n	8015b08 <_dtoa_r+0x170>
 8015afe:	2301      	movs	r3, #1
 8015b00:	1b9b      	subs	r3, r3, r6
 8015b02:	930a      	str	r3, [sp, #40]	; 0x28
 8015b04:	2300      	movs	r3, #0
 8015b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b08:	2f00      	cmp	r7, #0
 8015b0a:	db36      	blt.n	8015b7a <_dtoa_r+0x1e2>
 8015b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b0e:	9711      	str	r7, [sp, #68]	; 0x44
 8015b10:	19db      	adds	r3, r3, r7
 8015b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b14:	2300      	movs	r3, #0
 8015b16:	9304      	str	r3, [sp, #16]
 8015b18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015b1a:	2401      	movs	r4, #1
 8015b1c:	2b09      	cmp	r3, #9
 8015b1e:	d900      	bls.n	8015b22 <_dtoa_r+0x18a>
 8015b20:	e082      	b.n	8015c28 <_dtoa_r+0x290>
 8015b22:	2b05      	cmp	r3, #5
 8015b24:	dd02      	ble.n	8015b2c <_dtoa_r+0x194>
 8015b26:	2400      	movs	r4, #0
 8015b28:	3b04      	subs	r3, #4
 8015b2a:	9320      	str	r3, [sp, #128]	; 0x80
 8015b2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015b2e:	1e98      	subs	r0, r3, #2
 8015b30:	2803      	cmp	r0, #3
 8015b32:	d900      	bls.n	8015b36 <_dtoa_r+0x19e>
 8015b34:	e082      	b.n	8015c3c <_dtoa_r+0x2a4>
 8015b36:	f7ea faf7 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015b3a:	7573      	.short	0x7573
 8015b3c:	6828      	.short	0x6828
 8015b3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b42:	189e      	adds	r6, r3, r2
 8015b44:	4b65      	ldr	r3, [pc, #404]	; (8015cdc <_dtoa_r+0x344>)
 8015b46:	18f2      	adds	r2, r6, r3
 8015b48:	2a20      	cmp	r2, #32
 8015b4a:	dd0f      	ble.n	8015b6c <_dtoa_r+0x1d4>
 8015b4c:	2340      	movs	r3, #64	; 0x40
 8015b4e:	1a9b      	subs	r3, r3, r2
 8015b50:	409c      	lsls	r4, r3
 8015b52:	4b63      	ldr	r3, [pc, #396]	; (8015ce0 <_dtoa_r+0x348>)
 8015b54:	9806      	ldr	r0, [sp, #24]
 8015b56:	18f3      	adds	r3, r6, r3
 8015b58:	40d8      	lsrs	r0, r3
 8015b5a:	4320      	orrs	r0, r4
 8015b5c:	f7ed f8c2 	bl	8002ce4 <__aeabi_ui2d>
 8015b60:	2301      	movs	r3, #1
 8015b62:	4c60      	ldr	r4, [pc, #384]	; (8015ce4 <_dtoa_r+0x34c>)
 8015b64:	3e01      	subs	r6, #1
 8015b66:	1909      	adds	r1, r1, r4
 8015b68:	9316      	str	r3, [sp, #88]	; 0x58
 8015b6a:	e77c      	b.n	8015a66 <_dtoa_r+0xce>
 8015b6c:	2320      	movs	r3, #32
 8015b6e:	9806      	ldr	r0, [sp, #24]
 8015b70:	1a9b      	subs	r3, r3, r2
 8015b72:	4098      	lsls	r0, r3
 8015b74:	e7f2      	b.n	8015b5c <_dtoa_r+0x1c4>
 8015b76:	9014      	str	r0, [sp, #80]	; 0x50
 8015b78:	e7b9      	b.n	8015aee <_dtoa_r+0x156>
 8015b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b7c:	1bdb      	subs	r3, r3, r7
 8015b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8015b80:	427b      	negs	r3, r7
 8015b82:	9304      	str	r3, [sp, #16]
 8015b84:	2300      	movs	r3, #0
 8015b86:	9311      	str	r3, [sp, #68]	; 0x44
 8015b88:	e7c6      	b.n	8015b18 <_dtoa_r+0x180>
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	dd57      	ble.n	8015c44 <_dtoa_r+0x2ac>
 8015b94:	930c      	str	r3, [sp, #48]	; 0x30
 8015b96:	9309      	str	r3, [sp, #36]	; 0x24
 8015b98:	2200      	movs	r2, #0
 8015b9a:	9902      	ldr	r1, [sp, #8]
 8015b9c:	644a      	str	r2, [r1, #68]	; 0x44
 8015b9e:	3204      	adds	r2, #4
 8015ba0:	0010      	movs	r0, r2
 8015ba2:	9902      	ldr	r1, [sp, #8]
 8015ba4:	3014      	adds	r0, #20
 8015ba6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015ba8:	4298      	cmp	r0, r3
 8015baa:	d950      	bls.n	8015c4e <_dtoa_r+0x2b6>
 8015bac:	9802      	ldr	r0, [sp, #8]
 8015bae:	f001 f947 	bl	8016e40 <_Balloc>
 8015bb2:	9b02      	ldr	r3, [sp, #8]
 8015bb4:	9008      	str	r0, [sp, #32]
 8015bb6:	6418      	str	r0, [r3, #64]	; 0x40
 8015bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bba:	2b0e      	cmp	r3, #14
 8015bbc:	d900      	bls.n	8015bc0 <_dtoa_r+0x228>
 8015bbe:	e10c      	b.n	8015dda <_dtoa_r+0x442>
 8015bc0:	2c00      	cmp	r4, #0
 8015bc2:	d100      	bne.n	8015bc6 <_dtoa_r+0x22e>
 8015bc4:	e109      	b.n	8015dda <_dtoa_r+0x442>
 8015bc6:	9b06      	ldr	r3, [sp, #24]
 8015bc8:	9c07      	ldr	r4, [sp, #28]
 8015bca:	9312      	str	r3, [sp, #72]	; 0x48
 8015bcc:	9413      	str	r4, [sp, #76]	; 0x4c
 8015bce:	2f00      	cmp	r7, #0
 8015bd0:	dc00      	bgt.n	8015bd4 <_dtoa_r+0x23c>
 8015bd2:	e08b      	b.n	8015cec <_dtoa_r+0x354>
 8015bd4:	210f      	movs	r1, #15
 8015bd6:	003a      	movs	r2, r7
 8015bd8:	4b3f      	ldr	r3, [pc, #252]	; (8015cd8 <_dtoa_r+0x340>)
 8015bda:	400a      	ands	r2, r1
 8015bdc:	00d2      	lsls	r2, r2, #3
 8015bde:	189b      	adds	r3, r3, r2
 8015be0:	681d      	ldr	r5, [r3, #0]
 8015be2:	685e      	ldr	r6, [r3, #4]
 8015be4:	2302      	movs	r3, #2
 8015be6:	113c      	asrs	r4, r7, #4
 8015be8:	930e      	str	r3, [sp, #56]	; 0x38
 8015bea:	06e3      	lsls	r3, r4, #27
 8015bec:	d50b      	bpl.n	8015c06 <_dtoa_r+0x26e>
 8015bee:	4b3e      	ldr	r3, [pc, #248]	; (8015ce8 <_dtoa_r+0x350>)
 8015bf0:	400c      	ands	r4, r1
 8015bf2:	6a1a      	ldr	r2, [r3, #32]
 8015bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015bf8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015bfa:	f7eb fe23 	bl	8001844 <__aeabi_ddiv>
 8015bfe:	2303      	movs	r3, #3
 8015c00:	9006      	str	r0, [sp, #24]
 8015c02:	9107      	str	r1, [sp, #28]
 8015c04:	930e      	str	r3, [sp, #56]	; 0x38
 8015c06:	2300      	movs	r3, #0
 8015c08:	e03b      	b.n	8015c82 <_dtoa_r+0x2ea>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8015c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c10:	18fb      	adds	r3, r7, r3
 8015c12:	930c      	str	r3, [sp, #48]	; 0x30
 8015c14:	3301      	adds	r3, #1
 8015c16:	9309      	str	r3, [sp, #36]	; 0x24
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	dcbd      	bgt.n	8015b98 <_dtoa_r+0x200>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	e7bb      	b.n	8015b98 <_dtoa_r+0x200>
 8015c20:	2300      	movs	r3, #0
 8015c22:	e7b3      	b.n	8015b8c <_dtoa_r+0x1f4>
 8015c24:	2300      	movs	r3, #0
 8015c26:	e7f1      	b.n	8015c0c <_dtoa_r+0x274>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	940d      	str	r4, [sp, #52]	; 0x34
 8015c2c:	9320      	str	r3, [sp, #128]	; 0x80
 8015c2e:	3b01      	subs	r3, #1
 8015c30:	2200      	movs	r2, #0
 8015c32:	930c      	str	r3, [sp, #48]	; 0x30
 8015c34:	9309      	str	r3, [sp, #36]	; 0x24
 8015c36:	3313      	adds	r3, #19
 8015c38:	9221      	str	r2, [sp, #132]	; 0x84
 8015c3a:	e7ad      	b.n	8015b98 <_dtoa_r+0x200>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8015c40:	3b02      	subs	r3, #2
 8015c42:	e7f5      	b.n	8015c30 <_dtoa_r+0x298>
 8015c44:	2301      	movs	r3, #1
 8015c46:	930c      	str	r3, [sp, #48]	; 0x30
 8015c48:	9309      	str	r3, [sp, #36]	; 0x24
 8015c4a:	001a      	movs	r2, r3
 8015c4c:	e7f4      	b.n	8015c38 <_dtoa_r+0x2a0>
 8015c4e:	9802      	ldr	r0, [sp, #8]
 8015c50:	3101      	adds	r1, #1
 8015c52:	6441      	str	r1, [r0, #68]	; 0x44
 8015c54:	0052      	lsls	r2, r2, #1
 8015c56:	e7a3      	b.n	8015ba0 <_dtoa_r+0x208>
 8015c58:	2301      	movs	r3, #1
 8015c5a:	421c      	tst	r4, r3
 8015c5c:	d00e      	beq.n	8015c7c <_dtoa_r+0x2e4>
 8015c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c60:	4a21      	ldr	r2, [pc, #132]	; (8015ce8 <_dtoa_r+0x350>)
 8015c62:	3301      	adds	r3, #1
 8015c64:	930e      	str	r3, [sp, #56]	; 0x38
 8015c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c68:	0028      	movs	r0, r5
 8015c6a:	00db      	lsls	r3, r3, #3
 8015c6c:	189b      	adds	r3, r3, r2
 8015c6e:	0031      	movs	r1, r6
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	f7ec f9f0 	bl	8002058 <__aeabi_dmul>
 8015c78:	0005      	movs	r5, r0
 8015c7a:	000e      	movs	r6, r1
 8015c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c7e:	1064      	asrs	r4, r4, #1
 8015c80:	3301      	adds	r3, #1
 8015c82:	9310      	str	r3, [sp, #64]	; 0x40
 8015c84:	2c00      	cmp	r4, #0
 8015c86:	d1e7      	bne.n	8015c58 <_dtoa_r+0x2c0>
 8015c88:	9806      	ldr	r0, [sp, #24]
 8015c8a:	9907      	ldr	r1, [sp, #28]
 8015c8c:	002a      	movs	r2, r5
 8015c8e:	0033      	movs	r3, r6
 8015c90:	f7eb fdd8 	bl	8001844 <__aeabi_ddiv>
 8015c94:	9006      	str	r0, [sp, #24]
 8015c96:	9107      	str	r1, [sp, #28]
 8015c98:	e043      	b.n	8015d22 <_dtoa_r+0x38a>
 8015c9a:	46c0      	nop			; (mov r8, r8)
 8015c9c:	7ff00000 	.word	0x7ff00000
 8015ca0:	0000270f 	.word	0x0000270f
 8015ca4:	0801aca6 	.word	0x0801aca6
 8015ca8:	0801aca9 	.word	0x0801aca9
 8015cac:	0801ab7a 	.word	0x0801ab7a
 8015cb0:	0801ab7b 	.word	0x0801ab7b
 8015cb4:	3ff00000 	.word	0x3ff00000
 8015cb8:	fffffc01 	.word	0xfffffc01
 8015cbc:	3ff80000 	.word	0x3ff80000
 8015cc0:	636f4361 	.word	0x636f4361
 8015cc4:	3fd287a7 	.word	0x3fd287a7
 8015cc8:	8b60c8b3 	.word	0x8b60c8b3
 8015ccc:	3fc68a28 	.word	0x3fc68a28
 8015cd0:	509f79fb 	.word	0x509f79fb
 8015cd4:	3fd34413 	.word	0x3fd34413
 8015cd8:	0801acd8 	.word	0x0801acd8
 8015cdc:	00000432 	.word	0x00000432
 8015ce0:	00000412 	.word	0x00000412
 8015ce4:	fe100000 	.word	0xfe100000
 8015ce8:	0801acb0 	.word	0x0801acb0
 8015cec:	2302      	movs	r3, #2
 8015cee:	930e      	str	r3, [sp, #56]	; 0x38
 8015cf0:	2f00      	cmp	r7, #0
 8015cf2:	d016      	beq.n	8015d22 <_dtoa_r+0x38a>
 8015cf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015cf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015cf8:	427c      	negs	r4, r7
 8015cfa:	330d      	adds	r3, #13
 8015cfc:	4023      	ands	r3, r4
 8015cfe:	4acf      	ldr	r2, [pc, #828]	; (801603c <_dtoa_r+0x6a4>)
 8015d00:	00db      	lsls	r3, r3, #3
 8015d02:	18d3      	adds	r3, r2, r3
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	f7ec f9a6 	bl	8002058 <__aeabi_dmul>
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	2601      	movs	r6, #1
 8015d10:	001d      	movs	r5, r3
 8015d12:	9006      	str	r0, [sp, #24]
 8015d14:	9107      	str	r1, [sp, #28]
 8015d16:	1124      	asrs	r4, r4, #4
 8015d18:	2c00      	cmp	r4, #0
 8015d1a:	d000      	beq.n	8015d1e <_dtoa_r+0x386>
 8015d1c:	e08c      	b.n	8015e38 <_dtoa_r+0x4a0>
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d1b8      	bne.n	8015c94 <_dtoa_r+0x2fc>
 8015d22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d100      	bne.n	8015d2a <_dtoa_r+0x392>
 8015d28:	e096      	b.n	8015e58 <_dtoa_r+0x4c0>
 8015d2a:	9c06      	ldr	r4, [sp, #24]
 8015d2c:	9d07      	ldr	r5, [sp, #28]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	4bc3      	ldr	r3, [pc, #780]	; (8016040 <_dtoa_r+0x6a8>)
 8015d32:	0020      	movs	r0, r4
 8015d34:	0029      	movs	r1, r5
 8015d36:	f7ea fb97 	bl	8000468 <__aeabi_dcmplt>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d100      	bne.n	8015d40 <_dtoa_r+0x3a8>
 8015d3e:	e08b      	b.n	8015e58 <_dtoa_r+0x4c0>
 8015d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d100      	bne.n	8015d48 <_dtoa_r+0x3b0>
 8015d46:	e087      	b.n	8015e58 <_dtoa_r+0x4c0>
 8015d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	dd41      	ble.n	8015dd2 <_dtoa_r+0x43a>
 8015d4e:	4bbd      	ldr	r3, [pc, #756]	; (8016044 <_dtoa_r+0x6ac>)
 8015d50:	2200      	movs	r2, #0
 8015d52:	0020      	movs	r0, r4
 8015d54:	0029      	movs	r1, r5
 8015d56:	f7ec f97f 	bl	8002058 <__aeabi_dmul>
 8015d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d5c:	9006      	str	r0, [sp, #24]
 8015d5e:	9107      	str	r1, [sp, #28]
 8015d60:	3301      	adds	r3, #1
 8015d62:	930e      	str	r3, [sp, #56]	; 0x38
 8015d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d66:	1e7e      	subs	r6, r7, #1
 8015d68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8015d6c:	f7ec ff80 	bl	8002c70 <__aeabi_i2d>
 8015d70:	9a06      	ldr	r2, [sp, #24]
 8015d72:	9b07      	ldr	r3, [sp, #28]
 8015d74:	f7ec f970 	bl	8002058 <__aeabi_dmul>
 8015d78:	2200      	movs	r2, #0
 8015d7a:	4bb3      	ldr	r3, [pc, #716]	; (8016048 <_dtoa_r+0x6b0>)
 8015d7c:	f7eb fa46 	bl	800120c <__aeabi_dadd>
 8015d80:	4ab2      	ldr	r2, [pc, #712]	; (801604c <_dtoa_r+0x6b4>)
 8015d82:	900e      	str	r0, [sp, #56]	; 0x38
 8015d84:	910f      	str	r1, [sp, #60]	; 0x3c
 8015d86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015d88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015d8a:	4694      	mov	ip, r2
 8015d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d8e:	4463      	add	r3, ip
 8015d90:	9315      	str	r3, [sp, #84]	; 0x54
 8015d92:	001d      	movs	r5, r3
 8015d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d161      	bne.n	8015e5e <_dtoa_r+0x4c6>
 8015d9a:	9806      	ldr	r0, [sp, #24]
 8015d9c:	9907      	ldr	r1, [sp, #28]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	4bab      	ldr	r3, [pc, #684]	; (8016050 <_dtoa_r+0x6b8>)
 8015da2:	f7ec fbcb 	bl	800253c <__aeabi_dsub>
 8015da6:	0022      	movs	r2, r4
 8015da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015daa:	9006      	str	r0, [sp, #24]
 8015dac:	9107      	str	r1, [sp, #28]
 8015dae:	f7ea fb6f 	bl	8000490 <__aeabi_dcmpgt>
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d000      	beq.n	8015db8 <_dtoa_r+0x420>
 8015db6:	e2aa      	b.n	801630e <_dtoa_r+0x976>
 8015db8:	48a6      	ldr	r0, [pc, #664]	; (8016054 <_dtoa_r+0x6bc>)
 8015dba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015dbc:	4684      	mov	ip, r0
 8015dbe:	4461      	add	r1, ip
 8015dc0:	000b      	movs	r3, r1
 8015dc2:	9806      	ldr	r0, [sp, #24]
 8015dc4:	9907      	ldr	r1, [sp, #28]
 8015dc6:	0022      	movs	r2, r4
 8015dc8:	f7ea fb4e 	bl	8000468 <__aeabi_dcmplt>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d000      	beq.n	8015dd2 <_dtoa_r+0x43a>
 8015dd0:	e297      	b.n	8016302 <_dtoa_r+0x96a>
 8015dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015dd4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dd6:	9306      	str	r3, [sp, #24]
 8015dd8:	9407      	str	r4, [sp, #28]
 8015dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	da00      	bge.n	8015de2 <_dtoa_r+0x44a>
 8015de0:	e15e      	b.n	80160a0 <_dtoa_r+0x708>
 8015de2:	2f0e      	cmp	r7, #14
 8015de4:	dd00      	ble.n	8015de8 <_dtoa_r+0x450>
 8015de6:	e15b      	b.n	80160a0 <_dtoa_r+0x708>
 8015de8:	4b94      	ldr	r3, [pc, #592]	; (801603c <_dtoa_r+0x6a4>)
 8015dea:	00fa      	lsls	r2, r7, #3
 8015dec:	189b      	adds	r3, r3, r2
 8015dee:	685c      	ldr	r4, [r3, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	9304      	str	r3, [sp, #16]
 8015df4:	9405      	str	r4, [sp, #20]
 8015df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	db00      	blt.n	8015dfe <_dtoa_r+0x466>
 8015dfc:	e0da      	b.n	8015fb4 <_dtoa_r+0x61c>
 8015dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	dd00      	ble.n	8015e06 <_dtoa_r+0x46e>
 8015e04:	e0d6      	b.n	8015fb4 <_dtoa_r+0x61c>
 8015e06:	d000      	beq.n	8015e0a <_dtoa_r+0x472>
 8015e08:	e27f      	b.n	801630a <_dtoa_r+0x972>
 8015e0a:	9804      	ldr	r0, [sp, #16]
 8015e0c:	9905      	ldr	r1, [sp, #20]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	4b8f      	ldr	r3, [pc, #572]	; (8016050 <_dtoa_r+0x6b8>)
 8015e12:	f7ec f921 	bl	8002058 <__aeabi_dmul>
 8015e16:	9a06      	ldr	r2, [sp, #24]
 8015e18:	9b07      	ldr	r3, [sp, #28]
 8015e1a:	f7ea fb43 	bl	80004a4 <__aeabi_dcmpge>
 8015e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e20:	9304      	str	r3, [sp, #16]
 8015e22:	001e      	movs	r6, r3
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d000      	beq.n	8015e2a <_dtoa_r+0x492>
 8015e28:	e251      	b.n	80162ce <_dtoa_r+0x936>
 8015e2a:	9b08      	ldr	r3, [sp, #32]
 8015e2c:	9a08      	ldr	r2, [sp, #32]
 8015e2e:	1c5d      	adds	r5, r3, #1
 8015e30:	2331      	movs	r3, #49	; 0x31
 8015e32:	3701      	adds	r7, #1
 8015e34:	7013      	strb	r3, [r2, #0]
 8015e36:	e24d      	b.n	80162d4 <_dtoa_r+0x93c>
 8015e38:	4234      	tst	r4, r6
 8015e3a:	d00a      	beq.n	8015e52 <_dtoa_r+0x4ba>
 8015e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e3e:	4a86      	ldr	r2, [pc, #536]	; (8016058 <_dtoa_r+0x6c0>)
 8015e40:	3301      	adds	r3, #1
 8015e42:	930e      	str	r3, [sp, #56]	; 0x38
 8015e44:	00eb      	lsls	r3, r5, #3
 8015e46:	189b      	adds	r3, r3, r2
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	f7ec f904 	bl	8002058 <__aeabi_dmul>
 8015e50:	0033      	movs	r3, r6
 8015e52:	1064      	asrs	r4, r4, #1
 8015e54:	3501      	adds	r5, #1
 8015e56:	e75f      	b.n	8015d18 <_dtoa_r+0x380>
 8015e58:	003e      	movs	r6, r7
 8015e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5c:	e784      	b.n	8015d68 <_dtoa_r+0x3d0>
 8015e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e60:	1e5a      	subs	r2, r3, #1
 8015e62:	4b76      	ldr	r3, [pc, #472]	; (801603c <_dtoa_r+0x6a4>)
 8015e64:	00d2      	lsls	r2, r2, #3
 8015e66:	189b      	adds	r3, r3, r2
 8015e68:	6818      	ldr	r0, [r3, #0]
 8015e6a:	6859      	ldr	r1, [r3, #4]
 8015e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d04b      	beq.n	8015f0a <_dtoa_r+0x572>
 8015e72:	0002      	movs	r2, r0
 8015e74:	000b      	movs	r3, r1
 8015e76:	2000      	movs	r0, #0
 8015e78:	4978      	ldr	r1, [pc, #480]	; (801605c <_dtoa_r+0x6c4>)
 8015e7a:	f7eb fce3 	bl	8001844 <__aeabi_ddiv>
 8015e7e:	002b      	movs	r3, r5
 8015e80:	0022      	movs	r2, r4
 8015e82:	f7ec fb5b 	bl	800253c <__aeabi_dsub>
 8015e86:	9b08      	ldr	r3, [sp, #32]
 8015e88:	900e      	str	r0, [sp, #56]	; 0x38
 8015e8a:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8015e8e:	9806      	ldr	r0, [sp, #24]
 8015e90:	9907      	ldr	r1, [sp, #28]
 8015e92:	f7ec feb7 	bl	8002c04 <__aeabi_d2iz>
 8015e96:	0004      	movs	r4, r0
 8015e98:	f7ec feea 	bl	8002c70 <__aeabi_i2d>
 8015e9c:	0002      	movs	r2, r0
 8015e9e:	000b      	movs	r3, r1
 8015ea0:	9806      	ldr	r0, [sp, #24]
 8015ea2:	9907      	ldr	r1, [sp, #28]
 8015ea4:	f7ec fb4a 	bl	800253c <__aeabi_dsub>
 8015ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015eaa:	3430      	adds	r4, #48	; 0x30
 8015eac:	1c5d      	adds	r5, r3, #1
 8015eae:	701c      	strb	r4, [r3, #0]
 8015eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015eb4:	9006      	str	r0, [sp, #24]
 8015eb6:	9107      	str	r1, [sp, #28]
 8015eb8:	f7ea fad6 	bl	8000468 <__aeabi_dcmplt>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d16c      	bne.n	8015f9a <_dtoa_r+0x602>
 8015ec0:	9a06      	ldr	r2, [sp, #24]
 8015ec2:	9b07      	ldr	r3, [sp, #28]
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	495e      	ldr	r1, [pc, #376]	; (8016040 <_dtoa_r+0x6a8>)
 8015ec8:	f7ec fb38 	bl	800253c <__aeabi_dsub>
 8015ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ed0:	f7ea faca 	bl	8000468 <__aeabi_dcmplt>
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	d000      	beq.n	8015eda <_dtoa_r+0x542>
 8015ed8:	e0c3      	b.n	8016062 <_dtoa_r+0x6ca>
 8015eda:	9b08      	ldr	r3, [sp, #32]
 8015edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ede:	1aeb      	subs	r3, r5, r3
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	dc00      	bgt.n	8015ee6 <_dtoa_r+0x54e>
 8015ee4:	e775      	b.n	8015dd2 <_dtoa_r+0x43a>
 8015ee6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015eea:	2200      	movs	r2, #0
 8015eec:	4b55      	ldr	r3, [pc, #340]	; (8016044 <_dtoa_r+0x6ac>)
 8015eee:	f7ec f8b3 	bl	8002058 <__aeabi_dmul>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	900e      	str	r0, [sp, #56]	; 0x38
 8015ef6:	910f      	str	r1, [sp, #60]	; 0x3c
 8015ef8:	9806      	ldr	r0, [sp, #24]
 8015efa:	9907      	ldr	r1, [sp, #28]
 8015efc:	4b51      	ldr	r3, [pc, #324]	; (8016044 <_dtoa_r+0x6ac>)
 8015efe:	f7ec f8ab 	bl	8002058 <__aeabi_dmul>
 8015f02:	9515      	str	r5, [sp, #84]	; 0x54
 8015f04:	9006      	str	r0, [sp, #24]
 8015f06:	9107      	str	r1, [sp, #28]
 8015f08:	e7c1      	b.n	8015e8e <_dtoa_r+0x4f6>
 8015f0a:	0022      	movs	r2, r4
 8015f0c:	002b      	movs	r3, r5
 8015f0e:	f7ec f8a3 	bl	8002058 <__aeabi_dmul>
 8015f12:	9c08      	ldr	r4, [sp, #32]
 8015f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f16:	0023      	movs	r3, r4
 8015f18:	4694      	mov	ip, r2
 8015f1a:	900e      	str	r0, [sp, #56]	; 0x38
 8015f1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f1e:	4463      	add	r3, ip
 8015f20:	9315      	str	r3, [sp, #84]	; 0x54
 8015f22:	9806      	ldr	r0, [sp, #24]
 8015f24:	9907      	ldr	r1, [sp, #28]
 8015f26:	f7ec fe6d 	bl	8002c04 <__aeabi_d2iz>
 8015f2a:	0005      	movs	r5, r0
 8015f2c:	f7ec fea0 	bl	8002c70 <__aeabi_i2d>
 8015f30:	000b      	movs	r3, r1
 8015f32:	0002      	movs	r2, r0
 8015f34:	9806      	ldr	r0, [sp, #24]
 8015f36:	9907      	ldr	r1, [sp, #28]
 8015f38:	f7ec fb00 	bl	800253c <__aeabi_dsub>
 8015f3c:	3530      	adds	r5, #48	; 0x30
 8015f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f40:	7025      	strb	r5, [r4, #0]
 8015f42:	3401      	adds	r4, #1
 8015f44:	9006      	str	r0, [sp, #24]
 8015f46:	9107      	str	r1, [sp, #28]
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	d12a      	bne.n	8015fa2 <_dtoa_r+0x60a>
 8015f4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f50:	9a08      	ldr	r2, [sp, #32]
 8015f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f54:	4694      	mov	ip, r2
 8015f56:	4463      	add	r3, ip
 8015f58:	2200      	movs	r2, #0
 8015f5a:	001d      	movs	r5, r3
 8015f5c:	4b3f      	ldr	r3, [pc, #252]	; (801605c <_dtoa_r+0x6c4>)
 8015f5e:	f7eb f955 	bl	800120c <__aeabi_dadd>
 8015f62:	0002      	movs	r2, r0
 8015f64:	000b      	movs	r3, r1
 8015f66:	9806      	ldr	r0, [sp, #24]
 8015f68:	9907      	ldr	r1, [sp, #28]
 8015f6a:	f7ea fa91 	bl	8000490 <__aeabi_dcmpgt>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d000      	beq.n	8015f74 <_dtoa_r+0x5dc>
 8015f72:	e076      	b.n	8016062 <_dtoa_r+0x6ca>
 8015f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f78:	2000      	movs	r0, #0
 8015f7a:	4938      	ldr	r1, [pc, #224]	; (801605c <_dtoa_r+0x6c4>)
 8015f7c:	f7ec fade 	bl	800253c <__aeabi_dsub>
 8015f80:	0002      	movs	r2, r0
 8015f82:	000b      	movs	r3, r1
 8015f84:	9806      	ldr	r0, [sp, #24]
 8015f86:	9907      	ldr	r1, [sp, #28]
 8015f88:	f7ea fa6e 	bl	8000468 <__aeabi_dcmplt>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	d100      	bne.n	8015f92 <_dtoa_r+0x5fa>
 8015f90:	e71f      	b.n	8015dd2 <_dtoa_r+0x43a>
 8015f92:	1e6b      	subs	r3, r5, #1
 8015f94:	781a      	ldrb	r2, [r3, #0]
 8015f96:	2a30      	cmp	r2, #48	; 0x30
 8015f98:	d001      	beq.n	8015f9e <_dtoa_r+0x606>
 8015f9a:	0037      	movs	r7, r6
 8015f9c:	e03f      	b.n	801601e <_dtoa_r+0x686>
 8015f9e:	001d      	movs	r5, r3
 8015fa0:	e7f7      	b.n	8015f92 <_dtoa_r+0x5fa>
 8015fa2:	9806      	ldr	r0, [sp, #24]
 8015fa4:	9907      	ldr	r1, [sp, #28]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	4b26      	ldr	r3, [pc, #152]	; (8016044 <_dtoa_r+0x6ac>)
 8015faa:	f7ec f855 	bl	8002058 <__aeabi_dmul>
 8015fae:	9006      	str	r0, [sp, #24]
 8015fb0:	9107      	str	r1, [sp, #28]
 8015fb2:	e7b6      	b.n	8015f22 <_dtoa_r+0x58a>
 8015fb4:	9e08      	ldr	r6, [sp, #32]
 8015fb6:	9a04      	ldr	r2, [sp, #16]
 8015fb8:	9b05      	ldr	r3, [sp, #20]
 8015fba:	9806      	ldr	r0, [sp, #24]
 8015fbc:	9907      	ldr	r1, [sp, #28]
 8015fbe:	f7eb fc41 	bl	8001844 <__aeabi_ddiv>
 8015fc2:	f7ec fe1f 	bl	8002c04 <__aeabi_d2iz>
 8015fc6:	0004      	movs	r4, r0
 8015fc8:	f7ec fe52 	bl	8002c70 <__aeabi_i2d>
 8015fcc:	9a04      	ldr	r2, [sp, #16]
 8015fce:	9b05      	ldr	r3, [sp, #20]
 8015fd0:	f7ec f842 	bl	8002058 <__aeabi_dmul>
 8015fd4:	0002      	movs	r2, r0
 8015fd6:	000b      	movs	r3, r1
 8015fd8:	9806      	ldr	r0, [sp, #24]
 8015fda:	9907      	ldr	r1, [sp, #28]
 8015fdc:	f7ec faae 	bl	800253c <__aeabi_dsub>
 8015fe0:	0023      	movs	r3, r4
 8015fe2:	3330      	adds	r3, #48	; 0x30
 8015fe4:	7033      	strb	r3, [r6, #0]
 8015fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fe8:	9b08      	ldr	r3, [sp, #32]
 8015fea:	1c75      	adds	r5, r6, #1
 8015fec:	1aeb      	subs	r3, r5, r3
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d148      	bne.n	8016084 <_dtoa_r+0x6ec>
 8015ff2:	0002      	movs	r2, r0
 8015ff4:	000b      	movs	r3, r1
 8015ff6:	f7eb f909 	bl	800120c <__aeabi_dadd>
 8015ffa:	9a04      	ldr	r2, [sp, #16]
 8015ffc:	9b05      	ldr	r3, [sp, #20]
 8015ffe:	9006      	str	r0, [sp, #24]
 8016000:	9107      	str	r1, [sp, #28]
 8016002:	f7ea fa45 	bl	8000490 <__aeabi_dcmpgt>
 8016006:	2800      	cmp	r0, #0
 8016008:	d12a      	bne.n	8016060 <_dtoa_r+0x6c8>
 801600a:	9a04      	ldr	r2, [sp, #16]
 801600c:	9b05      	ldr	r3, [sp, #20]
 801600e:	9806      	ldr	r0, [sp, #24]
 8016010:	9907      	ldr	r1, [sp, #28]
 8016012:	f7ea fa23 	bl	800045c <__aeabi_dcmpeq>
 8016016:	2800      	cmp	r0, #0
 8016018:	d001      	beq.n	801601e <_dtoa_r+0x686>
 801601a:	07e3      	lsls	r3, r4, #31
 801601c:	d420      	bmi.n	8016060 <_dtoa_r+0x6c8>
 801601e:	9903      	ldr	r1, [sp, #12]
 8016020:	9802      	ldr	r0, [sp, #8]
 8016022:	f000 ff35 	bl	8016e90 <_Bfree>
 8016026:	2300      	movs	r3, #0
 8016028:	702b      	strb	r3, [r5, #0]
 801602a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801602c:	3701      	adds	r7, #1
 801602e:	601f      	str	r7, [r3, #0]
 8016030:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016032:	2b00      	cmp	r3, #0
 8016034:	d100      	bne.n	8016038 <_dtoa_r+0x6a0>
 8016036:	e4e4      	b.n	8015a02 <_dtoa_r+0x6a>
 8016038:	601d      	str	r5, [r3, #0]
 801603a:	e4e2      	b.n	8015a02 <_dtoa_r+0x6a>
 801603c:	0801acd8 	.word	0x0801acd8
 8016040:	3ff00000 	.word	0x3ff00000
 8016044:	40240000 	.word	0x40240000
 8016048:	401c0000 	.word	0x401c0000
 801604c:	fcc00000 	.word	0xfcc00000
 8016050:	40140000 	.word	0x40140000
 8016054:	7cc00000 	.word	0x7cc00000
 8016058:	0801acb0 	.word	0x0801acb0
 801605c:	3fe00000 	.word	0x3fe00000
 8016060:	003e      	movs	r6, r7
 8016062:	1e6b      	subs	r3, r5, #1
 8016064:	781a      	ldrb	r2, [r3, #0]
 8016066:	2a39      	cmp	r2, #57	; 0x39
 8016068:	d106      	bne.n	8016078 <_dtoa_r+0x6e0>
 801606a:	9a08      	ldr	r2, [sp, #32]
 801606c:	429a      	cmp	r2, r3
 801606e:	d107      	bne.n	8016080 <_dtoa_r+0x6e8>
 8016070:	2330      	movs	r3, #48	; 0x30
 8016072:	7013      	strb	r3, [r2, #0]
 8016074:	0013      	movs	r3, r2
 8016076:	3601      	adds	r6, #1
 8016078:	781a      	ldrb	r2, [r3, #0]
 801607a:	3201      	adds	r2, #1
 801607c:	701a      	strb	r2, [r3, #0]
 801607e:	e78c      	b.n	8015f9a <_dtoa_r+0x602>
 8016080:	001d      	movs	r5, r3
 8016082:	e7ee      	b.n	8016062 <_dtoa_r+0x6ca>
 8016084:	2200      	movs	r2, #0
 8016086:	4ba4      	ldr	r3, [pc, #656]	; (8016318 <_dtoa_r+0x980>)
 8016088:	f7eb ffe6 	bl	8002058 <__aeabi_dmul>
 801608c:	2200      	movs	r2, #0
 801608e:	2300      	movs	r3, #0
 8016090:	9006      	str	r0, [sp, #24]
 8016092:	9107      	str	r1, [sp, #28]
 8016094:	002e      	movs	r6, r5
 8016096:	f7ea f9e1 	bl	800045c <__aeabi_dcmpeq>
 801609a:	2800      	cmp	r0, #0
 801609c:	d08b      	beq.n	8015fb6 <_dtoa_r+0x61e>
 801609e:	e7be      	b.n	801601e <_dtoa_r+0x686>
 80160a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160a2:	2a00      	cmp	r2, #0
 80160a4:	d100      	bne.n	80160a8 <_dtoa_r+0x710>
 80160a6:	e0da      	b.n	801625e <_dtoa_r+0x8c6>
 80160a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80160aa:	2a01      	cmp	r2, #1
 80160ac:	dd00      	ble.n	80160b0 <_dtoa_r+0x718>
 80160ae:	e0bd      	b.n	801622c <_dtoa_r+0x894>
 80160b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80160b2:	2a00      	cmp	r2, #0
 80160b4:	d100      	bne.n	80160b8 <_dtoa_r+0x720>
 80160b6:	e0b5      	b.n	8016224 <_dtoa_r+0x88c>
 80160b8:	4a98      	ldr	r2, [pc, #608]	; (801631c <_dtoa_r+0x984>)
 80160ba:	189b      	adds	r3, r3, r2
 80160bc:	9d04      	ldr	r5, [sp, #16]
 80160be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80160c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160c2:	2101      	movs	r1, #1
 80160c4:	18d2      	adds	r2, r2, r3
 80160c6:	920a      	str	r2, [sp, #40]	; 0x28
 80160c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160ca:	9802      	ldr	r0, [sp, #8]
 80160cc:	18d3      	adds	r3, r2, r3
 80160ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80160d0:	f000 ffad 	bl	801702e <__i2b>
 80160d4:	0006      	movs	r6, r0
 80160d6:	2c00      	cmp	r4, #0
 80160d8:	dd0e      	ble.n	80160f8 <_dtoa_r+0x760>
 80160da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160dc:	2b00      	cmp	r3, #0
 80160de:	dd0b      	ble.n	80160f8 <_dtoa_r+0x760>
 80160e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160e2:	0023      	movs	r3, r4
 80160e4:	4294      	cmp	r4, r2
 80160e6:	dd00      	ble.n	80160ea <_dtoa_r+0x752>
 80160e8:	0013      	movs	r3, r2
 80160ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160ec:	1ae4      	subs	r4, r4, r3
 80160ee:	1ad2      	subs	r2, r2, r3
 80160f0:	920a      	str	r2, [sp, #40]	; 0x28
 80160f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160f4:	1ad3      	subs	r3, r2, r3
 80160f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80160f8:	9b04      	ldr	r3, [sp, #16]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d01f      	beq.n	801613e <_dtoa_r+0x7a6>
 80160fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016100:	2b00      	cmp	r3, #0
 8016102:	d100      	bne.n	8016106 <_dtoa_r+0x76e>
 8016104:	e0af      	b.n	8016266 <_dtoa_r+0x8ce>
 8016106:	2d00      	cmp	r5, #0
 8016108:	d011      	beq.n	801612e <_dtoa_r+0x796>
 801610a:	0031      	movs	r1, r6
 801610c:	002a      	movs	r2, r5
 801610e:	9802      	ldr	r0, [sp, #8]
 8016110:	f001 f826 	bl	8017160 <__pow5mult>
 8016114:	9a03      	ldr	r2, [sp, #12]
 8016116:	0001      	movs	r1, r0
 8016118:	0006      	movs	r6, r0
 801611a:	9802      	ldr	r0, [sp, #8]
 801611c:	f000 ff90 	bl	8017040 <__multiply>
 8016120:	9903      	ldr	r1, [sp, #12]
 8016122:	9010      	str	r0, [sp, #64]	; 0x40
 8016124:	9802      	ldr	r0, [sp, #8]
 8016126:	f000 feb3 	bl	8016e90 <_Bfree>
 801612a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801612c:	9303      	str	r3, [sp, #12]
 801612e:	9b04      	ldr	r3, [sp, #16]
 8016130:	1b5a      	subs	r2, r3, r5
 8016132:	d004      	beq.n	801613e <_dtoa_r+0x7a6>
 8016134:	9903      	ldr	r1, [sp, #12]
 8016136:	9802      	ldr	r0, [sp, #8]
 8016138:	f001 f812 	bl	8017160 <__pow5mult>
 801613c:	9003      	str	r0, [sp, #12]
 801613e:	2101      	movs	r1, #1
 8016140:	9802      	ldr	r0, [sp, #8]
 8016142:	f000 ff74 	bl	801702e <__i2b>
 8016146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016148:	9004      	str	r0, [sp, #16]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d100      	bne.n	8016150 <_dtoa_r+0x7b8>
 801614e:	e1e3      	b.n	8016518 <_dtoa_r+0xb80>
 8016150:	001a      	movs	r2, r3
 8016152:	0001      	movs	r1, r0
 8016154:	9802      	ldr	r0, [sp, #8]
 8016156:	f001 f803 	bl	8017160 <__pow5mult>
 801615a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801615c:	9004      	str	r0, [sp, #16]
 801615e:	2b01      	cmp	r3, #1
 8016160:	dd00      	ble.n	8016164 <_dtoa_r+0x7cc>
 8016162:	e082      	b.n	801626a <_dtoa_r+0x8d2>
 8016164:	2500      	movs	r5, #0
 8016166:	9b06      	ldr	r3, [sp, #24]
 8016168:	42ab      	cmp	r3, r5
 801616a:	d10e      	bne.n	801618a <_dtoa_r+0x7f2>
 801616c:	9b07      	ldr	r3, [sp, #28]
 801616e:	031b      	lsls	r3, r3, #12
 8016170:	42ab      	cmp	r3, r5
 8016172:	d10a      	bne.n	801618a <_dtoa_r+0x7f2>
 8016174:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016176:	9a07      	ldr	r2, [sp, #28]
 8016178:	4213      	tst	r3, r2
 801617a:	d006      	beq.n	801618a <_dtoa_r+0x7f2>
 801617c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801617e:	3501      	adds	r5, #1
 8016180:	3301      	adds	r3, #1
 8016182:	930a      	str	r3, [sp, #40]	; 0x28
 8016184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016186:	3301      	adds	r3, #1
 8016188:	930b      	str	r3, [sp, #44]	; 0x2c
 801618a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801618c:	2001      	movs	r0, #1
 801618e:	2b00      	cmp	r3, #0
 8016190:	d16c      	bne.n	801626c <_dtoa_r+0x8d4>
 8016192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016194:	1818      	adds	r0, r3, r0
 8016196:	231f      	movs	r3, #31
 8016198:	4018      	ands	r0, r3
 801619a:	d07e      	beq.n	801629a <_dtoa_r+0x902>
 801619c:	3301      	adds	r3, #1
 801619e:	1a1b      	subs	r3, r3, r0
 80161a0:	2b04      	cmp	r3, #4
 80161a2:	dd70      	ble.n	8016286 <_dtoa_r+0x8ee>
 80161a4:	231c      	movs	r3, #28
 80161a6:	1a18      	subs	r0, r3, r0
 80161a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161aa:	1824      	adds	r4, r4, r0
 80161ac:	181b      	adds	r3, r3, r0
 80161ae:	930a      	str	r3, [sp, #40]	; 0x28
 80161b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b2:	181b      	adds	r3, r3, r0
 80161b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80161b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	dd05      	ble.n	80161c8 <_dtoa_r+0x830>
 80161bc:	001a      	movs	r2, r3
 80161be:	9903      	ldr	r1, [sp, #12]
 80161c0:	9802      	ldr	r0, [sp, #8]
 80161c2:	f001 f80f 	bl	80171e4 <__lshift>
 80161c6:	9003      	str	r0, [sp, #12]
 80161c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	dd05      	ble.n	80161da <_dtoa_r+0x842>
 80161ce:	001a      	movs	r2, r3
 80161d0:	9904      	ldr	r1, [sp, #16]
 80161d2:	9802      	ldr	r0, [sp, #8]
 80161d4:	f001 f806 	bl	80171e4 <__lshift>
 80161d8:	9004      	str	r0, [sp, #16]
 80161da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d05e      	beq.n	801629e <_dtoa_r+0x906>
 80161e0:	9904      	ldr	r1, [sp, #16]
 80161e2:	9803      	ldr	r0, [sp, #12]
 80161e4:	f001 f850 	bl	8017288 <__mcmp>
 80161e8:	2800      	cmp	r0, #0
 80161ea:	da58      	bge.n	801629e <_dtoa_r+0x906>
 80161ec:	2300      	movs	r3, #0
 80161ee:	220a      	movs	r2, #10
 80161f0:	9903      	ldr	r1, [sp, #12]
 80161f2:	9802      	ldr	r0, [sp, #8]
 80161f4:	f000 fe56 	bl	8016ea4 <__multadd>
 80161f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161fa:	3f01      	subs	r7, #1
 80161fc:	9003      	str	r0, [sp, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d100      	bne.n	8016204 <_dtoa_r+0x86c>
 8016202:	e190      	b.n	8016526 <_dtoa_r+0xb8e>
 8016204:	2300      	movs	r3, #0
 8016206:	0031      	movs	r1, r6
 8016208:	220a      	movs	r2, #10
 801620a:	9802      	ldr	r0, [sp, #8]
 801620c:	f000 fe4a 	bl	8016ea4 <__multadd>
 8016210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016212:	0006      	movs	r6, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	dd00      	ble.n	801621a <_dtoa_r+0x882>
 8016218:	e088      	b.n	801632c <_dtoa_r+0x994>
 801621a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801621c:	2b02      	cmp	r3, #2
 801621e:	dc00      	bgt.n	8016222 <_dtoa_r+0x88a>
 8016220:	e084      	b.n	801632c <_dtoa_r+0x994>
 8016222:	e044      	b.n	80162ae <_dtoa_r+0x916>
 8016224:	2336      	movs	r3, #54	; 0x36
 8016226:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016228:	1a9b      	subs	r3, r3, r2
 801622a:	e747      	b.n	80160bc <_dtoa_r+0x724>
 801622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622e:	1e5d      	subs	r5, r3, #1
 8016230:	9b04      	ldr	r3, [sp, #16]
 8016232:	42ab      	cmp	r3, r5
 8016234:	db08      	blt.n	8016248 <_dtoa_r+0x8b0>
 8016236:	1b5d      	subs	r5, r3, r5
 8016238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801623a:	2b00      	cmp	r3, #0
 801623c:	da0c      	bge.n	8016258 <_dtoa_r+0x8c0>
 801623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016242:	1a9c      	subs	r4, r3, r2
 8016244:	2300      	movs	r3, #0
 8016246:	e73b      	b.n	80160c0 <_dtoa_r+0x728>
 8016248:	9b04      	ldr	r3, [sp, #16]
 801624a:	9504      	str	r5, [sp, #16]
 801624c:	1aea      	subs	r2, r5, r3
 801624e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016250:	2500      	movs	r5, #0
 8016252:	189b      	adds	r3, r3, r2
 8016254:	9311      	str	r3, [sp, #68]	; 0x44
 8016256:	e7ef      	b.n	8016238 <_dtoa_r+0x8a0>
 8016258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801625c:	e730      	b.n	80160c0 <_dtoa_r+0x728>
 801625e:	9d04      	ldr	r5, [sp, #16]
 8016260:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016262:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016264:	e737      	b.n	80160d6 <_dtoa_r+0x73e>
 8016266:	9a04      	ldr	r2, [sp, #16]
 8016268:	e764      	b.n	8016134 <_dtoa_r+0x79c>
 801626a:	2500      	movs	r5, #0
 801626c:	9b04      	ldr	r3, [sp, #16]
 801626e:	9a04      	ldr	r2, [sp, #16]
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	9310      	str	r3, [sp, #64]	; 0x40
 8016274:	3303      	adds	r3, #3
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	18d3      	adds	r3, r2, r3
 801627a:	6858      	ldr	r0, [r3, #4]
 801627c:	f000 fe8e 	bl	8016f9c <__hi0bits>
 8016280:	2320      	movs	r3, #32
 8016282:	1a18      	subs	r0, r3, r0
 8016284:	e785      	b.n	8016192 <_dtoa_r+0x7fa>
 8016286:	2b04      	cmp	r3, #4
 8016288:	d095      	beq.n	80161b6 <_dtoa_r+0x81e>
 801628a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801628c:	331c      	adds	r3, #28
 801628e:	18d2      	adds	r2, r2, r3
 8016290:	920a      	str	r2, [sp, #40]	; 0x28
 8016292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016294:	18e4      	adds	r4, r4, r3
 8016296:	18d3      	adds	r3, r2, r3
 8016298:	e78c      	b.n	80161b4 <_dtoa_r+0x81c>
 801629a:	0003      	movs	r3, r0
 801629c:	e7f5      	b.n	801628a <_dtoa_r+0x8f2>
 801629e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	dc3d      	bgt.n	8016320 <_dtoa_r+0x988>
 80162a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162a6:	2b02      	cmp	r3, #2
 80162a8:	dd3a      	ble.n	8016320 <_dtoa_r+0x988>
 80162aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ac:	930c      	str	r3, [sp, #48]	; 0x30
 80162ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d10c      	bne.n	80162ce <_dtoa_r+0x936>
 80162b4:	9904      	ldr	r1, [sp, #16]
 80162b6:	2205      	movs	r2, #5
 80162b8:	9802      	ldr	r0, [sp, #8]
 80162ba:	f000 fdf3 	bl	8016ea4 <__multadd>
 80162be:	9004      	str	r0, [sp, #16]
 80162c0:	0001      	movs	r1, r0
 80162c2:	9803      	ldr	r0, [sp, #12]
 80162c4:	f000 ffe0 	bl	8017288 <__mcmp>
 80162c8:	2800      	cmp	r0, #0
 80162ca:	dd00      	ble.n	80162ce <_dtoa_r+0x936>
 80162cc:	e5ad      	b.n	8015e2a <_dtoa_r+0x492>
 80162ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162d0:	9d08      	ldr	r5, [sp, #32]
 80162d2:	43df      	mvns	r7, r3
 80162d4:	2300      	movs	r3, #0
 80162d6:	9309      	str	r3, [sp, #36]	; 0x24
 80162d8:	9904      	ldr	r1, [sp, #16]
 80162da:	9802      	ldr	r0, [sp, #8]
 80162dc:	f000 fdd8 	bl	8016e90 <_Bfree>
 80162e0:	2e00      	cmp	r6, #0
 80162e2:	d100      	bne.n	80162e6 <_dtoa_r+0x94e>
 80162e4:	e69b      	b.n	801601e <_dtoa_r+0x686>
 80162e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d005      	beq.n	80162f8 <_dtoa_r+0x960>
 80162ec:	42b3      	cmp	r3, r6
 80162ee:	d003      	beq.n	80162f8 <_dtoa_r+0x960>
 80162f0:	0019      	movs	r1, r3
 80162f2:	9802      	ldr	r0, [sp, #8]
 80162f4:	f000 fdcc 	bl	8016e90 <_Bfree>
 80162f8:	0031      	movs	r1, r6
 80162fa:	9802      	ldr	r0, [sp, #8]
 80162fc:	f000 fdc8 	bl	8016e90 <_Bfree>
 8016300:	e68d      	b.n	801601e <_dtoa_r+0x686>
 8016302:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016304:	9304      	str	r3, [sp, #16]
 8016306:	001e      	movs	r6, r3
 8016308:	e7e1      	b.n	80162ce <_dtoa_r+0x936>
 801630a:	2300      	movs	r3, #0
 801630c:	e7fa      	b.n	8016304 <_dtoa_r+0x96c>
 801630e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016310:	0037      	movs	r7, r6
 8016312:	9304      	str	r3, [sp, #16]
 8016314:	001e      	movs	r6, r3
 8016316:	e588      	b.n	8015e2a <_dtoa_r+0x492>
 8016318:	40240000 	.word	0x40240000
 801631c:	00000433 	.word	0x00000433
 8016320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016322:	2b00      	cmp	r3, #0
 8016324:	d100      	bne.n	8016328 <_dtoa_r+0x990>
 8016326:	e0b2      	b.n	801648e <_dtoa_r+0xaf6>
 8016328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632a:	930c      	str	r3, [sp, #48]	; 0x30
 801632c:	2c00      	cmp	r4, #0
 801632e:	dd05      	ble.n	801633c <_dtoa_r+0x9a4>
 8016330:	0031      	movs	r1, r6
 8016332:	0022      	movs	r2, r4
 8016334:	9802      	ldr	r0, [sp, #8]
 8016336:	f000 ff55 	bl	80171e4 <__lshift>
 801633a:	0006      	movs	r6, r0
 801633c:	0030      	movs	r0, r6
 801633e:	2d00      	cmp	r5, #0
 8016340:	d011      	beq.n	8016366 <_dtoa_r+0x9ce>
 8016342:	6871      	ldr	r1, [r6, #4]
 8016344:	9802      	ldr	r0, [sp, #8]
 8016346:	f000 fd7b 	bl	8016e40 <_Balloc>
 801634a:	0031      	movs	r1, r6
 801634c:	0004      	movs	r4, r0
 801634e:	6933      	ldr	r3, [r6, #16]
 8016350:	310c      	adds	r1, #12
 8016352:	1c9a      	adds	r2, r3, #2
 8016354:	0092      	lsls	r2, r2, #2
 8016356:	300c      	adds	r0, #12
 8016358:	f7fc fe8b 	bl	8013072 <memcpy>
 801635c:	2201      	movs	r2, #1
 801635e:	0021      	movs	r1, r4
 8016360:	9802      	ldr	r0, [sp, #8]
 8016362:	f000 ff3f 	bl	80171e4 <__lshift>
 8016366:	9609      	str	r6, [sp, #36]	; 0x24
 8016368:	0006      	movs	r6, r0
 801636a:	9b08      	ldr	r3, [sp, #32]
 801636c:	930a      	str	r3, [sp, #40]	; 0x28
 801636e:	9904      	ldr	r1, [sp, #16]
 8016370:	9803      	ldr	r0, [sp, #12]
 8016372:	f7ff fa8b 	bl	801588c <quorem>
 8016376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016378:	900d      	str	r0, [sp, #52]	; 0x34
 801637a:	0004      	movs	r4, r0
 801637c:	9803      	ldr	r0, [sp, #12]
 801637e:	f000 ff83 	bl	8017288 <__mcmp>
 8016382:	0032      	movs	r2, r6
 8016384:	9010      	str	r0, [sp, #64]	; 0x40
 8016386:	9904      	ldr	r1, [sp, #16]
 8016388:	9802      	ldr	r0, [sp, #8]
 801638a:	f000 ff97 	bl	80172bc <__mdiff>
 801638e:	2301      	movs	r3, #1
 8016390:	930b      	str	r3, [sp, #44]	; 0x2c
 8016392:	68c3      	ldr	r3, [r0, #12]
 8016394:	3430      	adds	r4, #48	; 0x30
 8016396:	0005      	movs	r5, r0
 8016398:	2b00      	cmp	r3, #0
 801639a:	d104      	bne.n	80163a6 <_dtoa_r+0xa0e>
 801639c:	0001      	movs	r1, r0
 801639e:	9803      	ldr	r0, [sp, #12]
 80163a0:	f000 ff72 	bl	8017288 <__mcmp>
 80163a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80163a6:	0029      	movs	r1, r5
 80163a8:	9802      	ldr	r0, [sp, #8]
 80163aa:	f000 fd71 	bl	8016e90 <_Bfree>
 80163ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80163b2:	4313      	orrs	r3, r2
 80163b4:	d10e      	bne.n	80163d4 <_dtoa_r+0xa3c>
 80163b6:	9a06      	ldr	r2, [sp, #24]
 80163b8:	3301      	adds	r3, #1
 80163ba:	4213      	tst	r3, r2
 80163bc:	d10a      	bne.n	80163d4 <_dtoa_r+0xa3c>
 80163be:	2c39      	cmp	r4, #57	; 0x39
 80163c0:	d026      	beq.n	8016410 <_dtoa_r+0xa78>
 80163c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dd01      	ble.n	80163cc <_dtoa_r+0xa34>
 80163c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80163ca:	3431      	adds	r4, #49	; 0x31
 80163cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163ce:	1c5d      	adds	r5, r3, #1
 80163d0:	701c      	strb	r4, [r3, #0]
 80163d2:	e781      	b.n	80162d8 <_dtoa_r+0x940>
 80163d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	db07      	blt.n	80163ea <_dtoa_r+0xa52>
 80163da:	001d      	movs	r5, r3
 80163dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163de:	431d      	orrs	r5, r3
 80163e0:	d122      	bne.n	8016428 <_dtoa_r+0xa90>
 80163e2:	2301      	movs	r3, #1
 80163e4:	9a06      	ldr	r2, [sp, #24]
 80163e6:	4213      	tst	r3, r2
 80163e8:	d11e      	bne.n	8016428 <_dtoa_r+0xa90>
 80163ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	dded      	ble.n	80163cc <_dtoa_r+0xa34>
 80163f0:	9903      	ldr	r1, [sp, #12]
 80163f2:	2201      	movs	r2, #1
 80163f4:	9802      	ldr	r0, [sp, #8]
 80163f6:	f000 fef5 	bl	80171e4 <__lshift>
 80163fa:	9904      	ldr	r1, [sp, #16]
 80163fc:	9003      	str	r0, [sp, #12]
 80163fe:	f000 ff43 	bl	8017288 <__mcmp>
 8016402:	2800      	cmp	r0, #0
 8016404:	dc02      	bgt.n	801640c <_dtoa_r+0xa74>
 8016406:	d1e1      	bne.n	80163cc <_dtoa_r+0xa34>
 8016408:	07e3      	lsls	r3, r4, #31
 801640a:	d5df      	bpl.n	80163cc <_dtoa_r+0xa34>
 801640c:	2c39      	cmp	r4, #57	; 0x39
 801640e:	d1db      	bne.n	80163c8 <_dtoa_r+0xa30>
 8016410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016414:	1c5d      	adds	r5, r3, #1
 8016416:	2339      	movs	r3, #57	; 0x39
 8016418:	7013      	strb	r3, [r2, #0]
 801641a:	1e6b      	subs	r3, r5, #1
 801641c:	781a      	ldrb	r2, [r3, #0]
 801641e:	2a39      	cmp	r2, #57	; 0x39
 8016420:	d067      	beq.n	80164f2 <_dtoa_r+0xb5a>
 8016422:	3201      	adds	r2, #1
 8016424:	701a      	strb	r2, [r3, #0]
 8016426:	e757      	b.n	80162d8 <_dtoa_r+0x940>
 8016428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801642a:	1c5d      	adds	r5, r3, #1
 801642c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801642e:	2b00      	cmp	r3, #0
 8016430:	dd04      	ble.n	801643c <_dtoa_r+0xaa4>
 8016432:	2c39      	cmp	r4, #57	; 0x39
 8016434:	d0ec      	beq.n	8016410 <_dtoa_r+0xa78>
 8016436:	3401      	adds	r4, #1
 8016438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801643a:	e7c9      	b.n	80163d0 <_dtoa_r+0xa38>
 801643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801643e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016440:	701c      	strb	r4, [r3, #0]
 8016442:	9b08      	ldr	r3, [sp, #32]
 8016444:	1aeb      	subs	r3, r5, r3
 8016446:	4293      	cmp	r3, r2
 8016448:	d03e      	beq.n	80164c8 <_dtoa_r+0xb30>
 801644a:	2300      	movs	r3, #0
 801644c:	220a      	movs	r2, #10
 801644e:	9903      	ldr	r1, [sp, #12]
 8016450:	9802      	ldr	r0, [sp, #8]
 8016452:	f000 fd27 	bl	8016ea4 <__multadd>
 8016456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016458:	9003      	str	r0, [sp, #12]
 801645a:	42b3      	cmp	r3, r6
 801645c:	d109      	bne.n	8016472 <_dtoa_r+0xada>
 801645e:	2300      	movs	r3, #0
 8016460:	220a      	movs	r2, #10
 8016462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016464:	9802      	ldr	r0, [sp, #8]
 8016466:	f000 fd1d 	bl	8016ea4 <__multadd>
 801646a:	9009      	str	r0, [sp, #36]	; 0x24
 801646c:	0006      	movs	r6, r0
 801646e:	950a      	str	r5, [sp, #40]	; 0x28
 8016470:	e77d      	b.n	801636e <_dtoa_r+0x9d6>
 8016472:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016474:	2300      	movs	r3, #0
 8016476:	220a      	movs	r2, #10
 8016478:	9802      	ldr	r0, [sp, #8]
 801647a:	f000 fd13 	bl	8016ea4 <__multadd>
 801647e:	2300      	movs	r3, #0
 8016480:	9009      	str	r0, [sp, #36]	; 0x24
 8016482:	220a      	movs	r2, #10
 8016484:	0031      	movs	r1, r6
 8016486:	9802      	ldr	r0, [sp, #8]
 8016488:	f000 fd0c 	bl	8016ea4 <__multadd>
 801648c:	e7ee      	b.n	801646c <_dtoa_r+0xad4>
 801648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016490:	930c      	str	r3, [sp, #48]	; 0x30
 8016492:	9b08      	ldr	r3, [sp, #32]
 8016494:	9306      	str	r3, [sp, #24]
 8016496:	9904      	ldr	r1, [sp, #16]
 8016498:	9803      	ldr	r0, [sp, #12]
 801649a:	f7ff f9f7 	bl	801588c <quorem>
 801649e:	9b06      	ldr	r3, [sp, #24]
 80164a0:	3030      	adds	r0, #48	; 0x30
 80164a2:	1c5d      	adds	r5, r3, #1
 80164a4:	7018      	strb	r0, [r3, #0]
 80164a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164a8:	9b08      	ldr	r3, [sp, #32]
 80164aa:	0004      	movs	r4, r0
 80164ac:	1aeb      	subs	r3, r5, r3
 80164ae:	429a      	cmp	r2, r3
 80164b0:	dd08      	ble.n	80164c4 <_dtoa_r+0xb2c>
 80164b2:	2300      	movs	r3, #0
 80164b4:	220a      	movs	r2, #10
 80164b6:	9903      	ldr	r1, [sp, #12]
 80164b8:	9802      	ldr	r0, [sp, #8]
 80164ba:	f000 fcf3 	bl	8016ea4 <__multadd>
 80164be:	9506      	str	r5, [sp, #24]
 80164c0:	9003      	str	r0, [sp, #12]
 80164c2:	e7e8      	b.n	8016496 <_dtoa_r+0xafe>
 80164c4:	2300      	movs	r3, #0
 80164c6:	9309      	str	r3, [sp, #36]	; 0x24
 80164c8:	9903      	ldr	r1, [sp, #12]
 80164ca:	2201      	movs	r2, #1
 80164cc:	9802      	ldr	r0, [sp, #8]
 80164ce:	f000 fe89 	bl	80171e4 <__lshift>
 80164d2:	9904      	ldr	r1, [sp, #16]
 80164d4:	9003      	str	r0, [sp, #12]
 80164d6:	f000 fed7 	bl	8017288 <__mcmp>
 80164da:	2800      	cmp	r0, #0
 80164dc:	dc9d      	bgt.n	801641a <_dtoa_r+0xa82>
 80164de:	d101      	bne.n	80164e4 <_dtoa_r+0xb4c>
 80164e0:	07e3      	lsls	r3, r4, #31
 80164e2:	d49a      	bmi.n	801641a <_dtoa_r+0xa82>
 80164e4:	1e6b      	subs	r3, r5, #1
 80164e6:	781a      	ldrb	r2, [r3, #0]
 80164e8:	2a30      	cmp	r2, #48	; 0x30
 80164ea:	d000      	beq.n	80164ee <_dtoa_r+0xb56>
 80164ec:	e6f4      	b.n	80162d8 <_dtoa_r+0x940>
 80164ee:	001d      	movs	r5, r3
 80164f0:	e7f8      	b.n	80164e4 <_dtoa_r+0xb4c>
 80164f2:	9a08      	ldr	r2, [sp, #32]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d103      	bne.n	8016500 <_dtoa_r+0xb68>
 80164f8:	2331      	movs	r3, #49	; 0x31
 80164fa:	3701      	adds	r7, #1
 80164fc:	7013      	strb	r3, [r2, #0]
 80164fe:	e6eb      	b.n	80162d8 <_dtoa_r+0x940>
 8016500:	001d      	movs	r5, r3
 8016502:	e78a      	b.n	801641a <_dtoa_r+0xa82>
 8016504:	4b0b      	ldr	r3, [pc, #44]	; (8016534 <_dtoa_r+0xb9c>)
 8016506:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016508:	9308      	str	r3, [sp, #32]
 801650a:	4b0b      	ldr	r3, [pc, #44]	; (8016538 <_dtoa_r+0xba0>)
 801650c:	2a00      	cmp	r2, #0
 801650e:	d001      	beq.n	8016514 <_dtoa_r+0xb7c>
 8016510:	f7ff fa75 	bl	80159fe <_dtoa_r+0x66>
 8016514:	f7ff fa75 	bl	8015a02 <_dtoa_r+0x6a>
 8016518:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801651a:	2b01      	cmp	r3, #1
 801651c:	dc00      	bgt.n	8016520 <_dtoa_r+0xb88>
 801651e:	e621      	b.n	8016164 <_dtoa_r+0x7cc>
 8016520:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016522:	2001      	movs	r0, #1
 8016524:	e635      	b.n	8016192 <_dtoa_r+0x7fa>
 8016526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016528:	2b00      	cmp	r3, #0
 801652a:	dcb2      	bgt.n	8016492 <_dtoa_r+0xafa>
 801652c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801652e:	2b02      	cmp	r3, #2
 8016530:	ddaf      	ble.n	8016492 <_dtoa_r+0xafa>
 8016532:	e6bc      	b.n	80162ae <_dtoa_r+0x916>
 8016534:	0801ac9d 	.word	0x0801ac9d
 8016538:	0801aca5 	.word	0x0801aca5

0801653c <__errno>:
 801653c:	4b01      	ldr	r3, [pc, #4]	; (8016544 <__errno+0x8>)
 801653e:	6818      	ldr	r0, [r3, #0]
 8016540:	4770      	bx	lr
 8016542:	46c0      	nop			; (mov r8, r8)
 8016544:	200000d0 	.word	0x200000d0

08016548 <__libc_fini_array>:
 8016548:	b570      	push	{r4, r5, r6, lr}
 801654a:	4d07      	ldr	r5, [pc, #28]	; (8016568 <__libc_fini_array+0x20>)
 801654c:	4c07      	ldr	r4, [pc, #28]	; (801656c <__libc_fini_array+0x24>)
 801654e:	1b64      	subs	r4, r4, r5
 8016550:	10a4      	asrs	r4, r4, #2
 8016552:	2c00      	cmp	r4, #0
 8016554:	d102      	bne.n	801655c <__libc_fini_array+0x14>
 8016556:	f001 f95b 	bl	8017810 <_fini>
 801655a:	bd70      	pop	{r4, r5, r6, pc}
 801655c:	3c01      	subs	r4, #1
 801655e:	00a3      	lsls	r3, r4, #2
 8016560:	58eb      	ldr	r3, [r5, r3]
 8016562:	4798      	blx	r3
 8016564:	e7f5      	b.n	8016552 <__libc_fini_array+0xa>
 8016566:	46c0      	nop			; (mov r8, r8)
 8016568:	0801adbc 	.word	0x0801adbc
 801656c:	0801adc0 	.word	0x0801adc0

08016570 <_malloc_trim_r>:
 8016570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016572:	0005      	movs	r5, r0
 8016574:	2008      	movs	r0, #8
 8016576:	000c      	movs	r4, r1
 8016578:	f7ff f95c 	bl	8015834 <sysconf>
 801657c:	0007      	movs	r7, r0
 801657e:	0028      	movs	r0, r5
 8016580:	f7fc fd88 	bl	8013094 <__malloc_lock>
 8016584:	2203      	movs	r2, #3
 8016586:	4e21      	ldr	r6, [pc, #132]	; (801660c <_malloc_trim_r+0x9c>)
 8016588:	0039      	movs	r1, r7
 801658a:	68b3      	ldr	r3, [r6, #8]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	4393      	bics	r3, r2
 8016590:	1b18      	subs	r0, r3, r4
 8016592:	3811      	subs	r0, #17
 8016594:	19c0      	adds	r0, r0, r7
 8016596:	9301      	str	r3, [sp, #4]
 8016598:	f7e9 fdda 	bl	8000150 <__udivsi3>
 801659c:	1e44      	subs	r4, r0, #1
 801659e:	437c      	muls	r4, r7
 80165a0:	42a7      	cmp	r7, r4
 80165a2:	dd04      	ble.n	80165ae <_malloc_trim_r+0x3e>
 80165a4:	0028      	movs	r0, r5
 80165a6:	f7fc fd7d 	bl	80130a4 <__malloc_unlock>
 80165aa:	2000      	movs	r0, #0
 80165ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80165ae:	2100      	movs	r1, #0
 80165b0:	0028      	movs	r0, r5
 80165b2:	f7fc ff4f 	bl	8013454 <_sbrk_r>
 80165b6:	68b3      	ldr	r3, [r6, #8]
 80165b8:	9a01      	ldr	r2, [sp, #4]
 80165ba:	189b      	adds	r3, r3, r2
 80165bc:	4298      	cmp	r0, r3
 80165be:	d1f1      	bne.n	80165a4 <_malloc_trim_r+0x34>
 80165c0:	4261      	negs	r1, r4
 80165c2:	0028      	movs	r0, r5
 80165c4:	f7fc ff46 	bl	8013454 <_sbrk_r>
 80165c8:	1c43      	adds	r3, r0, #1
 80165ca:	d110      	bne.n	80165ee <_malloc_trim_r+0x7e>
 80165cc:	2100      	movs	r1, #0
 80165ce:	0028      	movs	r0, r5
 80165d0:	f7fc ff40 	bl	8013454 <_sbrk_r>
 80165d4:	68b2      	ldr	r2, [r6, #8]
 80165d6:	1a81      	subs	r1, r0, r2
 80165d8:	290f      	cmp	r1, #15
 80165da:	dde3      	ble.n	80165a4 <_malloc_trim_r+0x34>
 80165dc:	4b0c      	ldr	r3, [pc, #48]	; (8016610 <_malloc_trim_r+0xa0>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	1ac0      	subs	r0, r0, r3
 80165e2:	4b0c      	ldr	r3, [pc, #48]	; (8016614 <_malloc_trim_r+0xa4>)
 80165e4:	6018      	str	r0, [r3, #0]
 80165e6:	2301      	movs	r3, #1
 80165e8:	430b      	orrs	r3, r1
 80165ea:	6053      	str	r3, [r2, #4]
 80165ec:	e7da      	b.n	80165a4 <_malloc_trim_r+0x34>
 80165ee:	68b2      	ldr	r2, [r6, #8]
 80165f0:	2601      	movs	r6, #1
 80165f2:	9b01      	ldr	r3, [sp, #4]
 80165f4:	0028      	movs	r0, r5
 80165f6:	1b1b      	subs	r3, r3, r4
 80165f8:	4333      	orrs	r3, r6
 80165fa:	6053      	str	r3, [r2, #4]
 80165fc:	4b05      	ldr	r3, [pc, #20]	; (8016614 <_malloc_trim_r+0xa4>)
 80165fe:	681a      	ldr	r2, [r3, #0]
 8016600:	1b14      	subs	r4, r2, r4
 8016602:	601c      	str	r4, [r3, #0]
 8016604:	f7fc fd4e 	bl	80130a4 <__malloc_unlock>
 8016608:	0030      	movs	r0, r6
 801660a:	e7cf      	b.n	80165ac <_malloc_trim_r+0x3c>
 801660c:	2000066c 	.word	0x2000066c
 8016610:	20000a74 	.word	0x20000a74
 8016614:	200067a4 	.word	0x200067a4

08016618 <_free_r>:
 8016618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801661a:	1e0d      	subs	r5, r1, #0
 801661c:	9001      	str	r0, [sp, #4]
 801661e:	d02d      	beq.n	801667c <_free_r+0x64>
 8016620:	f7fc fd38 	bl	8013094 <__malloc_lock>
 8016624:	2301      	movs	r3, #1
 8016626:	0029      	movs	r1, r5
 8016628:	469c      	mov	ip, r3
 801662a:	3908      	subs	r1, #8
 801662c:	684f      	ldr	r7, [r1, #4]
 801662e:	4662      	mov	r2, ip
 8016630:	003b      	movs	r3, r7
 8016632:	4666      	mov	r6, ip
 8016634:	4393      	bics	r3, r2
 8016636:	18c8      	adds	r0, r1, r3
 8016638:	6845      	ldr	r5, [r0, #4]
 801663a:	3202      	adds	r2, #2
 801663c:	4395      	bics	r5, r2
 801663e:	4a4a      	ldr	r2, [pc, #296]	; (8016768 <_free_r+0x150>)
 8016640:	4037      	ands	r7, r6
 8016642:	6896      	ldr	r6, [r2, #8]
 8016644:	4286      	cmp	r6, r0
 8016646:	d11a      	bne.n	801667e <_free_r+0x66>
 8016648:	195b      	adds	r3, r3, r5
 801664a:	2f00      	cmp	r7, #0
 801664c:	d106      	bne.n	801665c <_free_r+0x44>
 801664e:	6808      	ldr	r0, [r1, #0]
 8016650:	1a09      	subs	r1, r1, r0
 8016652:	688d      	ldr	r5, [r1, #8]
 8016654:	181b      	adds	r3, r3, r0
 8016656:	68c8      	ldr	r0, [r1, #12]
 8016658:	60e8      	str	r0, [r5, #12]
 801665a:	6085      	str	r5, [r0, #8]
 801665c:	2001      	movs	r0, #1
 801665e:	4318      	orrs	r0, r3
 8016660:	6048      	str	r0, [r1, #4]
 8016662:	6091      	str	r1, [r2, #8]
 8016664:	4a41      	ldr	r2, [pc, #260]	; (801676c <_free_r+0x154>)
 8016666:	6812      	ldr	r2, [r2, #0]
 8016668:	429a      	cmp	r2, r3
 801666a:	d804      	bhi.n	8016676 <_free_r+0x5e>
 801666c:	4b40      	ldr	r3, [pc, #256]	; (8016770 <_free_r+0x158>)
 801666e:	9801      	ldr	r0, [sp, #4]
 8016670:	6819      	ldr	r1, [r3, #0]
 8016672:	f7ff ff7d 	bl	8016570 <_malloc_trim_r>
 8016676:	9801      	ldr	r0, [sp, #4]
 8016678:	f7fc fd14 	bl	80130a4 <__malloc_unlock>
 801667c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801667e:	2600      	movs	r6, #0
 8016680:	6045      	str	r5, [r0, #4]
 8016682:	42b7      	cmp	r7, r6
 8016684:	d109      	bne.n	801669a <_free_r+0x82>
 8016686:	680f      	ldr	r7, [r1, #0]
 8016688:	4c3a      	ldr	r4, [pc, #232]	; (8016774 <_free_r+0x15c>)
 801668a:	1bc9      	subs	r1, r1, r7
 801668c:	19db      	adds	r3, r3, r7
 801668e:	688f      	ldr	r7, [r1, #8]
 8016690:	42a7      	cmp	r7, r4
 8016692:	d02b      	beq.n	80166ec <_free_r+0xd4>
 8016694:	68cc      	ldr	r4, [r1, #12]
 8016696:	60fc      	str	r4, [r7, #12]
 8016698:	60a7      	str	r7, [r4, #8]
 801669a:	1947      	adds	r7, r0, r5
 801669c:	687c      	ldr	r4, [r7, #4]
 801669e:	2701      	movs	r7, #1
 80166a0:	423c      	tst	r4, r7
 80166a2:	d10b      	bne.n	80166bc <_free_r+0xa4>
 80166a4:	195b      	adds	r3, r3, r5
 80166a6:	6885      	ldr	r5, [r0, #8]
 80166a8:	2e00      	cmp	r6, #0
 80166aa:	d121      	bne.n	80166f0 <_free_r+0xd8>
 80166ac:	4c31      	ldr	r4, [pc, #196]	; (8016774 <_free_r+0x15c>)
 80166ae:	42a5      	cmp	r5, r4
 80166b0:	d11e      	bne.n	80166f0 <_free_r+0xd8>
 80166b2:	003e      	movs	r6, r7
 80166b4:	6151      	str	r1, [r2, #20]
 80166b6:	6111      	str	r1, [r2, #16]
 80166b8:	60cd      	str	r5, [r1, #12]
 80166ba:	608d      	str	r5, [r1, #8]
 80166bc:	2001      	movs	r0, #1
 80166be:	0005      	movs	r5, r0
 80166c0:	431d      	orrs	r5, r3
 80166c2:	604d      	str	r5, [r1, #4]
 80166c4:	50cb      	str	r3, [r1, r3]
 80166c6:	2e00      	cmp	r6, #0
 80166c8:	d1d5      	bne.n	8016676 <_free_r+0x5e>
 80166ca:	4d2b      	ldr	r5, [pc, #172]	; (8016778 <_free_r+0x160>)
 80166cc:	42ab      	cmp	r3, r5
 80166ce:	d813      	bhi.n	80166f8 <_free_r+0xe0>
 80166d0:	08db      	lsrs	r3, r3, #3
 80166d2:	109d      	asrs	r5, r3, #2
 80166d4:	40a8      	lsls	r0, r5
 80166d6:	6854      	ldr	r4, [r2, #4]
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	4320      	orrs	r0, r4
 80166dc:	6050      	str	r0, [r2, #4]
 80166de:	189a      	adds	r2, r3, r2
 80166e0:	6893      	ldr	r3, [r2, #8]
 80166e2:	60ca      	str	r2, [r1, #12]
 80166e4:	608b      	str	r3, [r1, #8]
 80166e6:	6091      	str	r1, [r2, #8]
 80166e8:	60d9      	str	r1, [r3, #12]
 80166ea:	e7c4      	b.n	8016676 <_free_r+0x5e>
 80166ec:	4666      	mov	r6, ip
 80166ee:	e7d4      	b.n	801669a <_free_r+0x82>
 80166f0:	68c0      	ldr	r0, [r0, #12]
 80166f2:	60e8      	str	r0, [r5, #12]
 80166f4:	6085      	str	r5, [r0, #8]
 80166f6:	e7e1      	b.n	80166bc <_free_r+0xa4>
 80166f8:	0a5d      	lsrs	r5, r3, #9
 80166fa:	2d04      	cmp	r5, #4
 80166fc:	d812      	bhi.n	8016724 <_free_r+0x10c>
 80166fe:	0998      	lsrs	r0, r3, #6
 8016700:	3038      	adds	r0, #56	; 0x38
 8016702:	00c6      	lsls	r6, r0, #3
 8016704:	18b6      	adds	r6, r6, r2
 8016706:	68b5      	ldr	r5, [r6, #8]
 8016708:	2703      	movs	r7, #3
 801670a:	42ae      	cmp	r6, r5
 801670c:	d125      	bne.n	801675a <_free_r+0x142>
 801670e:	2301      	movs	r3, #1
 8016710:	1080      	asrs	r0, r0, #2
 8016712:	4083      	lsls	r3, r0
 8016714:	6850      	ldr	r0, [r2, #4]
 8016716:	4303      	orrs	r3, r0
 8016718:	6053      	str	r3, [r2, #4]
 801671a:	60ce      	str	r6, [r1, #12]
 801671c:	608d      	str	r5, [r1, #8]
 801671e:	60b1      	str	r1, [r6, #8]
 8016720:	60e9      	str	r1, [r5, #12]
 8016722:	e7a8      	b.n	8016676 <_free_r+0x5e>
 8016724:	2d14      	cmp	r5, #20
 8016726:	d802      	bhi.n	801672e <_free_r+0x116>
 8016728:	0028      	movs	r0, r5
 801672a:	305b      	adds	r0, #91	; 0x5b
 801672c:	e7e9      	b.n	8016702 <_free_r+0xea>
 801672e:	2d54      	cmp	r5, #84	; 0x54
 8016730:	d802      	bhi.n	8016738 <_free_r+0x120>
 8016732:	0b18      	lsrs	r0, r3, #12
 8016734:	306e      	adds	r0, #110	; 0x6e
 8016736:	e7e4      	b.n	8016702 <_free_r+0xea>
 8016738:	20aa      	movs	r0, #170	; 0xaa
 801673a:	0040      	lsls	r0, r0, #1
 801673c:	4285      	cmp	r5, r0
 801673e:	d802      	bhi.n	8016746 <_free_r+0x12e>
 8016740:	0bd8      	lsrs	r0, r3, #15
 8016742:	3077      	adds	r0, #119	; 0x77
 8016744:	e7dd      	b.n	8016702 <_free_r+0xea>
 8016746:	4e0d      	ldr	r6, [pc, #52]	; (801677c <_free_r+0x164>)
 8016748:	207e      	movs	r0, #126	; 0x7e
 801674a:	42b5      	cmp	r5, r6
 801674c:	d8d9      	bhi.n	8016702 <_free_r+0xea>
 801674e:	0c98      	lsrs	r0, r3, #18
 8016750:	307c      	adds	r0, #124	; 0x7c
 8016752:	e7d6      	b.n	8016702 <_free_r+0xea>
 8016754:	68ad      	ldr	r5, [r5, #8]
 8016756:	42ae      	cmp	r6, r5
 8016758:	d003      	beq.n	8016762 <_free_r+0x14a>
 801675a:	686a      	ldr	r2, [r5, #4]
 801675c:	43ba      	bics	r2, r7
 801675e:	429a      	cmp	r2, r3
 8016760:	d8f8      	bhi.n	8016754 <_free_r+0x13c>
 8016762:	68ee      	ldr	r6, [r5, #12]
 8016764:	e7d9      	b.n	801671a <_free_r+0x102>
 8016766:	46c0      	nop			; (mov r8, r8)
 8016768:	2000066c 	.word	0x2000066c
 801676c:	20000a78 	.word	0x20000a78
 8016770:	200067d4 	.word	0x200067d4
 8016774:	20000674 	.word	0x20000674
 8016778:	000001ff 	.word	0x000001ff
 801677c:	00000554 	.word	0x00000554

08016780 <rshift>:
 8016780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016782:	0004      	movs	r4, r0
 8016784:	6905      	ldr	r5, [r0, #16]
 8016786:	3414      	adds	r4, #20
 8016788:	114b      	asrs	r3, r1, #5
 801678a:	0026      	movs	r6, r4
 801678c:	429d      	cmp	r5, r3
 801678e:	dd14      	ble.n	80167ba <rshift+0x3a>
 8016790:	221f      	movs	r2, #31
 8016792:	00ad      	lsls	r5, r5, #2
 8016794:	009b      	lsls	r3, r3, #2
 8016796:	4011      	ands	r1, r2
 8016798:	1965      	adds	r5, r4, r5
 801679a:	18e3      	adds	r3, r4, r3
 801679c:	0022      	movs	r2, r4
 801679e:	2900      	cmp	r1, #0
 80167a0:	d01e      	beq.n	80167e0 <rshift+0x60>
 80167a2:	cb04      	ldmia	r3!, {r2}
 80167a4:	2720      	movs	r7, #32
 80167a6:	40ca      	lsrs	r2, r1
 80167a8:	46a4      	mov	ip, r4
 80167aa:	1a7f      	subs	r7, r7, r1
 80167ac:	4666      	mov	r6, ip
 80167ae:	429d      	cmp	r5, r3
 80167b0:	d80b      	bhi.n	80167ca <rshift+0x4a>
 80167b2:	6032      	str	r2, [r6, #0]
 80167b4:	2a00      	cmp	r2, #0
 80167b6:	d000      	beq.n	80167ba <rshift+0x3a>
 80167b8:	3604      	adds	r6, #4
 80167ba:	1b33      	subs	r3, r6, r4
 80167bc:	109b      	asrs	r3, r3, #2
 80167be:	6103      	str	r3, [r0, #16]
 80167c0:	42a6      	cmp	r6, r4
 80167c2:	d101      	bne.n	80167c8 <rshift+0x48>
 80167c4:	2300      	movs	r3, #0
 80167c6:	6143      	str	r3, [r0, #20]
 80167c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ca:	681e      	ldr	r6, [r3, #0]
 80167cc:	40be      	lsls	r6, r7
 80167ce:	4332      	orrs	r2, r6
 80167d0:	4666      	mov	r6, ip
 80167d2:	c604      	stmia	r6!, {r2}
 80167d4:	cb04      	ldmia	r3!, {r2}
 80167d6:	46b4      	mov	ip, r6
 80167d8:	40ca      	lsrs	r2, r1
 80167da:	e7e7      	b.n	80167ac <rshift+0x2c>
 80167dc:	cb02      	ldmia	r3!, {r1}
 80167de:	c202      	stmia	r2!, {r1}
 80167e0:	0016      	movs	r6, r2
 80167e2:	429d      	cmp	r5, r3
 80167e4:	d8fa      	bhi.n	80167dc <rshift+0x5c>
 80167e6:	e7e8      	b.n	80167ba <rshift+0x3a>

080167e8 <__hexdig_fun>:
 80167e8:	0003      	movs	r3, r0
 80167ea:	3b30      	subs	r3, #48	; 0x30
 80167ec:	2b09      	cmp	r3, #9
 80167ee:	d803      	bhi.n	80167f8 <__hexdig_fun+0x10>
 80167f0:	3820      	subs	r0, #32
 80167f2:	b2c3      	uxtb	r3, r0
 80167f4:	0018      	movs	r0, r3
 80167f6:	4770      	bx	lr
 80167f8:	0003      	movs	r3, r0
 80167fa:	3b61      	subs	r3, #97	; 0x61
 80167fc:	2b05      	cmp	r3, #5
 80167fe:	d801      	bhi.n	8016804 <__hexdig_fun+0x1c>
 8016800:	3847      	subs	r0, #71	; 0x47
 8016802:	e7f6      	b.n	80167f2 <__hexdig_fun+0xa>
 8016804:	0002      	movs	r2, r0
 8016806:	3a41      	subs	r2, #65	; 0x41
 8016808:	2300      	movs	r3, #0
 801680a:	2a05      	cmp	r2, #5
 801680c:	d8f2      	bhi.n	80167f4 <__hexdig_fun+0xc>
 801680e:	3827      	subs	r0, #39	; 0x27
 8016810:	e7ef      	b.n	80167f2 <__hexdig_fun+0xa>

08016812 <__gethex>:
 8016812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016814:	b08d      	sub	sp, #52	; 0x34
 8016816:	9005      	str	r0, [sp, #20]
 8016818:	9814      	ldr	r0, [sp, #80]	; 0x50
 801681a:	9109      	str	r1, [sp, #36]	; 0x24
 801681c:	9202      	str	r2, [sp, #8]
 801681e:	930a      	str	r3, [sp, #40]	; 0x28
 8016820:	f000 fadf 	bl	8016de2 <__localeconv_l>
 8016824:	6803      	ldr	r3, [r0, #0]
 8016826:	0018      	movs	r0, r3
 8016828:	9307      	str	r3, [sp, #28]
 801682a:	f7e9 fc75 	bl	8000118 <strlen>
 801682e:	2202      	movs	r2, #2
 8016830:	9b07      	ldr	r3, [sp, #28]
 8016832:	4252      	negs	r2, r2
 8016834:	181b      	adds	r3, r3, r0
 8016836:	3b01      	subs	r3, #1
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	9004      	str	r0, [sp, #16]
 801683c:	930b      	str	r3, [sp, #44]	; 0x2c
 801683e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016840:	6819      	ldr	r1, [r3, #0]
 8016842:	1c8b      	adds	r3, r1, #2
 8016844:	1a52      	subs	r2, r2, r1
 8016846:	18d1      	adds	r1, r2, r3
 8016848:	9301      	str	r3, [sp, #4]
 801684a:	9108      	str	r1, [sp, #32]
 801684c:	9901      	ldr	r1, [sp, #4]
 801684e:	3301      	adds	r3, #1
 8016850:	7808      	ldrb	r0, [r1, #0]
 8016852:	2830      	cmp	r0, #48	; 0x30
 8016854:	d0f7      	beq.n	8016846 <__gethex+0x34>
 8016856:	f7ff ffc7 	bl	80167e8 <__hexdig_fun>
 801685a:	1e07      	subs	r7, r0, #0
 801685c:	d000      	beq.n	8016860 <__gethex+0x4e>
 801685e:	e06f      	b.n	8016940 <__gethex+0x12e>
 8016860:	9a04      	ldr	r2, [sp, #16]
 8016862:	9907      	ldr	r1, [sp, #28]
 8016864:	9801      	ldr	r0, [sp, #4]
 8016866:	f7fc fe4b 	bl	8013500 <strncmp>
 801686a:	2800      	cmp	r0, #0
 801686c:	d000      	beq.n	8016870 <__gethex+0x5e>
 801686e:	e06d      	b.n	801694c <__gethex+0x13a>
 8016870:	9b01      	ldr	r3, [sp, #4]
 8016872:	9a04      	ldr	r2, [sp, #16]
 8016874:	189c      	adds	r4, r3, r2
 8016876:	7820      	ldrb	r0, [r4, #0]
 8016878:	f7ff ffb6 	bl	80167e8 <__hexdig_fun>
 801687c:	2800      	cmp	r0, #0
 801687e:	d069      	beq.n	8016954 <__gethex+0x142>
 8016880:	9401      	str	r4, [sp, #4]
 8016882:	9b01      	ldr	r3, [sp, #4]
 8016884:	7818      	ldrb	r0, [r3, #0]
 8016886:	2830      	cmp	r0, #48	; 0x30
 8016888:	d009      	beq.n	801689e <__gethex+0x8c>
 801688a:	f7ff ffad 	bl	80167e8 <__hexdig_fun>
 801688e:	4243      	negs	r3, r0
 8016890:	4143      	adcs	r3, r0
 8016892:	9303      	str	r3, [sp, #12]
 8016894:	2301      	movs	r3, #1
 8016896:	0026      	movs	r6, r4
 8016898:	9308      	str	r3, [sp, #32]
 801689a:	9c01      	ldr	r4, [sp, #4]
 801689c:	e004      	b.n	80168a8 <__gethex+0x96>
 801689e:	9b01      	ldr	r3, [sp, #4]
 80168a0:	3301      	adds	r3, #1
 80168a2:	9301      	str	r3, [sp, #4]
 80168a4:	e7ed      	b.n	8016882 <__gethex+0x70>
 80168a6:	3401      	adds	r4, #1
 80168a8:	7820      	ldrb	r0, [r4, #0]
 80168aa:	f7ff ff9d 	bl	80167e8 <__hexdig_fun>
 80168ae:	2800      	cmp	r0, #0
 80168b0:	d1f9      	bne.n	80168a6 <__gethex+0x94>
 80168b2:	9a04      	ldr	r2, [sp, #16]
 80168b4:	9907      	ldr	r1, [sp, #28]
 80168b6:	0020      	movs	r0, r4
 80168b8:	f7fc fe22 	bl	8013500 <strncmp>
 80168bc:	2800      	cmp	r0, #0
 80168be:	d109      	bne.n	80168d4 <__gethex+0xc2>
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	d10a      	bne.n	80168da <__gethex+0xc8>
 80168c4:	9b04      	ldr	r3, [sp, #16]
 80168c6:	18e4      	adds	r4, r4, r3
 80168c8:	0026      	movs	r6, r4
 80168ca:	7820      	ldrb	r0, [r4, #0]
 80168cc:	f7ff ff8c 	bl	80167e8 <__hexdig_fun>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d139      	bne.n	8016948 <__gethex+0x136>
 80168d4:	2700      	movs	r7, #0
 80168d6:	42be      	cmp	r6, r7
 80168d8:	d001      	beq.n	80168de <__gethex+0xcc>
 80168da:	1b37      	subs	r7, r6, r4
 80168dc:	00bf      	lsls	r7, r7, #2
 80168de:	7823      	ldrb	r3, [r4, #0]
 80168e0:	2b50      	cmp	r3, #80	; 0x50
 80168e2:	d001      	beq.n	80168e8 <__gethex+0xd6>
 80168e4:	2b70      	cmp	r3, #112	; 0x70
 80168e6:	d142      	bne.n	801696e <__gethex+0x15c>
 80168e8:	7863      	ldrb	r3, [r4, #1]
 80168ea:	2b2b      	cmp	r3, #43	; 0x2b
 80168ec:	d034      	beq.n	8016958 <__gethex+0x146>
 80168ee:	2b2d      	cmp	r3, #45	; 0x2d
 80168f0:	d036      	beq.n	8016960 <__gethex+0x14e>
 80168f2:	2300      	movs	r3, #0
 80168f4:	1c66      	adds	r6, r4, #1
 80168f6:	9306      	str	r3, [sp, #24]
 80168f8:	7830      	ldrb	r0, [r6, #0]
 80168fa:	f7ff ff75 	bl	80167e8 <__hexdig_fun>
 80168fe:	1e43      	subs	r3, r0, #1
 8016900:	b2db      	uxtb	r3, r3
 8016902:	2b18      	cmp	r3, #24
 8016904:	d833      	bhi.n	801696e <__gethex+0x15c>
 8016906:	3810      	subs	r0, #16
 8016908:	0005      	movs	r5, r0
 801690a:	3601      	adds	r6, #1
 801690c:	7830      	ldrb	r0, [r6, #0]
 801690e:	f7ff ff6b 	bl	80167e8 <__hexdig_fun>
 8016912:	1e43      	subs	r3, r0, #1
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b18      	cmp	r3, #24
 8016918:	d924      	bls.n	8016964 <__gethex+0x152>
 801691a:	9b06      	ldr	r3, [sp, #24]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d000      	beq.n	8016922 <__gethex+0x110>
 8016920:	426d      	negs	r5, r5
 8016922:	197f      	adds	r7, r7, r5
 8016924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016926:	601e      	str	r6, [r3, #0]
 8016928:	9b03      	ldr	r3, [sp, #12]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d021      	beq.n	8016972 <__gethex+0x160>
 801692e:	9b08      	ldr	r3, [sp, #32]
 8016930:	2606      	movs	r6, #6
 8016932:	425a      	negs	r2, r3
 8016934:	4153      	adcs	r3, r2
 8016936:	425b      	negs	r3, r3
 8016938:	401e      	ands	r6, r3
 801693a:	0030      	movs	r0, r6
 801693c:	b00d      	add	sp, #52	; 0x34
 801693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016940:	2300      	movs	r3, #0
 8016942:	9303      	str	r3, [sp, #12]
 8016944:	001e      	movs	r6, r3
 8016946:	e7a8      	b.n	801689a <__gethex+0x88>
 8016948:	3401      	adds	r4, #1
 801694a:	e7be      	b.n	80168ca <__gethex+0xb8>
 801694c:	9c01      	ldr	r4, [sp, #4]
 801694e:	2301      	movs	r3, #1
 8016950:	9303      	str	r3, [sp, #12]
 8016952:	e7c4      	b.n	80168de <__gethex+0xcc>
 8016954:	0007      	movs	r7, r0
 8016956:	e7fa      	b.n	801694e <__gethex+0x13c>
 8016958:	2300      	movs	r3, #0
 801695a:	9306      	str	r3, [sp, #24]
 801695c:	1ca6      	adds	r6, r4, #2
 801695e:	e7cb      	b.n	80168f8 <__gethex+0xe6>
 8016960:	2301      	movs	r3, #1
 8016962:	e7fa      	b.n	801695a <__gethex+0x148>
 8016964:	230a      	movs	r3, #10
 8016966:	435d      	muls	r5, r3
 8016968:	182d      	adds	r5, r5, r0
 801696a:	3d10      	subs	r5, #16
 801696c:	e7cd      	b.n	801690a <__gethex+0xf8>
 801696e:	0026      	movs	r6, r4
 8016970:	e7d8      	b.n	8016924 <__gethex+0x112>
 8016972:	9b01      	ldr	r3, [sp, #4]
 8016974:	9903      	ldr	r1, [sp, #12]
 8016976:	1ae3      	subs	r3, r4, r3
 8016978:	3b01      	subs	r3, #1
 801697a:	2b07      	cmp	r3, #7
 801697c:	dc47      	bgt.n	8016a0e <__gethex+0x1fc>
 801697e:	9805      	ldr	r0, [sp, #20]
 8016980:	f000 fa5e 	bl	8016e40 <_Balloc>
 8016984:	0003      	movs	r3, r0
 8016986:	3314      	adds	r3, #20
 8016988:	9303      	str	r3, [sp, #12]
 801698a:	9308      	str	r3, [sp, #32]
 801698c:	2300      	movs	r3, #0
 801698e:	0005      	movs	r5, r0
 8016990:	001e      	movs	r6, r3
 8016992:	9306      	str	r3, [sp, #24]
 8016994:	9b01      	ldr	r3, [sp, #4]
 8016996:	42a3      	cmp	r3, r4
 8016998:	d33c      	bcc.n	8016a14 <__gethex+0x202>
 801699a:	9c08      	ldr	r4, [sp, #32]
 801699c:	9b03      	ldr	r3, [sp, #12]
 801699e:	c440      	stmia	r4!, {r6}
 80169a0:	1ae4      	subs	r4, r4, r3
 80169a2:	10a4      	asrs	r4, r4, #2
 80169a4:	612c      	str	r4, [r5, #16]
 80169a6:	0030      	movs	r0, r6
 80169a8:	f000 faf8 	bl	8016f9c <__hi0bits>
 80169ac:	9b02      	ldr	r3, [sp, #8]
 80169ae:	0164      	lsls	r4, r4, #5
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	1a26      	subs	r6, r4, r0
 80169b4:	9301      	str	r3, [sp, #4]
 80169b6:	429e      	cmp	r6, r3
 80169b8:	dd5f      	ble.n	8016a7a <__gethex+0x268>
 80169ba:	1af6      	subs	r6, r6, r3
 80169bc:	0031      	movs	r1, r6
 80169be:	0028      	movs	r0, r5
 80169c0:	f000 fde3 	bl	801758a <__any_on>
 80169c4:	1e04      	subs	r4, r0, #0
 80169c6:	d00f      	beq.n	80169e8 <__gethex+0x1d6>
 80169c8:	2401      	movs	r4, #1
 80169ca:	211f      	movs	r1, #31
 80169cc:	0020      	movs	r0, r4
 80169ce:	1e73      	subs	r3, r6, #1
 80169d0:	4019      	ands	r1, r3
 80169d2:	4088      	lsls	r0, r1
 80169d4:	0001      	movs	r1, r0
 80169d6:	115a      	asrs	r2, r3, #5
 80169d8:	9803      	ldr	r0, [sp, #12]
 80169da:	0092      	lsls	r2, r2, #2
 80169dc:	5812      	ldr	r2, [r2, r0]
 80169de:	420a      	tst	r2, r1
 80169e0:	d002      	beq.n	80169e8 <__gethex+0x1d6>
 80169e2:	42a3      	cmp	r3, r4
 80169e4:	dc41      	bgt.n	8016a6a <__gethex+0x258>
 80169e6:	2402      	movs	r4, #2
 80169e8:	0031      	movs	r1, r6
 80169ea:	0028      	movs	r0, r5
 80169ec:	f7ff fec8 	bl	8016780 <rshift>
 80169f0:	19bf      	adds	r7, r7, r6
 80169f2:	9b02      	ldr	r3, [sp, #8]
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	9304      	str	r3, [sp, #16]
 80169f8:	42bb      	cmp	r3, r7
 80169fa:	da4e      	bge.n	8016a9a <__gethex+0x288>
 80169fc:	0029      	movs	r1, r5
 80169fe:	9805      	ldr	r0, [sp, #20]
 8016a00:	f000 fa46 	bl	8016e90 <_Bfree>
 8016a04:	2300      	movs	r3, #0
 8016a06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a08:	26a3      	movs	r6, #163	; 0xa3
 8016a0a:	6013      	str	r3, [r2, #0]
 8016a0c:	e795      	b.n	801693a <__gethex+0x128>
 8016a0e:	3101      	adds	r1, #1
 8016a10:	105b      	asrs	r3, r3, #1
 8016a12:	e7b2      	b.n	801697a <__gethex+0x168>
 8016a14:	1e63      	subs	r3, r4, #1
 8016a16:	9309      	str	r3, [sp, #36]	; 0x24
 8016a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	4293      	cmp	r3, r2
 8016a1e:	d015      	beq.n	8016a4c <__gethex+0x23a>
 8016a20:	9b06      	ldr	r3, [sp, #24]
 8016a22:	2b20      	cmp	r3, #32
 8016a24:	d105      	bne.n	8016a32 <__gethex+0x220>
 8016a26:	9b08      	ldr	r3, [sp, #32]
 8016a28:	601e      	str	r6, [r3, #0]
 8016a2a:	2600      	movs	r6, #0
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	9308      	str	r3, [sp, #32]
 8016a30:	9606      	str	r6, [sp, #24]
 8016a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a34:	7818      	ldrb	r0, [r3, #0]
 8016a36:	f7ff fed7 	bl	80167e8 <__hexdig_fun>
 8016a3a:	230f      	movs	r3, #15
 8016a3c:	4018      	ands	r0, r3
 8016a3e:	9b06      	ldr	r3, [sp, #24]
 8016a40:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016a42:	4098      	lsls	r0, r3
 8016a44:	3304      	adds	r3, #4
 8016a46:	4306      	orrs	r6, r0
 8016a48:	9306      	str	r3, [sp, #24]
 8016a4a:	e7a3      	b.n	8016994 <__gethex+0x182>
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	9a04      	ldr	r2, [sp, #16]
 8016a50:	1a9c      	subs	r4, r3, r2
 8016a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a54:	191c      	adds	r4, r3, r4
 8016a56:	9b01      	ldr	r3, [sp, #4]
 8016a58:	429c      	cmp	r4, r3
 8016a5a:	d3e1      	bcc.n	8016a20 <__gethex+0x20e>
 8016a5c:	9907      	ldr	r1, [sp, #28]
 8016a5e:	0020      	movs	r0, r4
 8016a60:	f7fc fd4e 	bl	8013500 <strncmp>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d1db      	bne.n	8016a20 <__gethex+0x20e>
 8016a68:	e794      	b.n	8016994 <__gethex+0x182>
 8016a6a:	1eb1      	subs	r1, r6, #2
 8016a6c:	0028      	movs	r0, r5
 8016a6e:	f000 fd8c 	bl	801758a <__any_on>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d0b7      	beq.n	80169e6 <__gethex+0x1d4>
 8016a76:	2403      	movs	r4, #3
 8016a78:	e7b6      	b.n	80169e8 <__gethex+0x1d6>
 8016a7a:	9b01      	ldr	r3, [sp, #4]
 8016a7c:	2400      	movs	r4, #0
 8016a7e:	429e      	cmp	r6, r3
 8016a80:	dab7      	bge.n	80169f2 <__gethex+0x1e0>
 8016a82:	1b9e      	subs	r6, r3, r6
 8016a84:	0029      	movs	r1, r5
 8016a86:	0032      	movs	r2, r6
 8016a88:	9805      	ldr	r0, [sp, #20]
 8016a8a:	f000 fbab 	bl	80171e4 <__lshift>
 8016a8e:	0003      	movs	r3, r0
 8016a90:	3314      	adds	r3, #20
 8016a92:	0005      	movs	r5, r0
 8016a94:	1bbf      	subs	r7, r7, r6
 8016a96:	9303      	str	r3, [sp, #12]
 8016a98:	e7ab      	b.n	80169f2 <__gethex+0x1e0>
 8016a9a:	9b02      	ldr	r3, [sp, #8]
 8016a9c:	685e      	ldr	r6, [r3, #4]
 8016a9e:	42be      	cmp	r6, r7
 8016aa0:	dd6b      	ble.n	8016b7a <__gethex+0x368>
 8016aa2:	9b01      	ldr	r3, [sp, #4]
 8016aa4:	1bf6      	subs	r6, r6, r7
 8016aa6:	42b3      	cmp	r3, r6
 8016aa8:	dc32      	bgt.n	8016b10 <__gethex+0x2fe>
 8016aaa:	9b02      	ldr	r3, [sp, #8]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	d026      	beq.n	8016b00 <__gethex+0x2ee>
 8016ab2:	2b03      	cmp	r3, #3
 8016ab4:	d028      	beq.n	8016b08 <__gethex+0x2f6>
 8016ab6:	2b01      	cmp	r3, #1
 8016ab8:	d119      	bne.n	8016aee <__gethex+0x2dc>
 8016aba:	9b01      	ldr	r3, [sp, #4]
 8016abc:	42b3      	cmp	r3, r6
 8016abe:	d116      	bne.n	8016aee <__gethex+0x2dc>
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	dc0d      	bgt.n	8016ae0 <__gethex+0x2ce>
 8016ac4:	9b02      	ldr	r3, [sp, #8]
 8016ac6:	2662      	movs	r6, #98	; 0x62
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	9301      	str	r3, [sp, #4]
 8016acc:	9a01      	ldr	r2, [sp, #4]
 8016ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ad0:	601a      	str	r2, [r3, #0]
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	9a03      	ldr	r2, [sp, #12]
 8016ad6:	612b      	str	r3, [r5, #16]
 8016ad8:	6013      	str	r3, [r2, #0]
 8016ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016adc:	601d      	str	r5, [r3, #0]
 8016ade:	e72c      	b.n	801693a <__gethex+0x128>
 8016ae0:	9901      	ldr	r1, [sp, #4]
 8016ae2:	0028      	movs	r0, r5
 8016ae4:	3901      	subs	r1, #1
 8016ae6:	f000 fd50 	bl	801758a <__any_on>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	d1ea      	bne.n	8016ac4 <__gethex+0x2b2>
 8016aee:	0029      	movs	r1, r5
 8016af0:	9805      	ldr	r0, [sp, #20]
 8016af2:	f000 f9cd 	bl	8016e90 <_Bfree>
 8016af6:	2300      	movs	r3, #0
 8016af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016afa:	2650      	movs	r6, #80	; 0x50
 8016afc:	6013      	str	r3, [r2, #0]
 8016afe:	e71c      	b.n	801693a <__gethex+0x128>
 8016b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d0de      	beq.n	8016ac4 <__gethex+0x2b2>
 8016b06:	e7f2      	b.n	8016aee <__gethex+0x2dc>
 8016b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d1da      	bne.n	8016ac4 <__gethex+0x2b2>
 8016b0e:	e7ee      	b.n	8016aee <__gethex+0x2dc>
 8016b10:	1e77      	subs	r7, r6, #1
 8016b12:	2c00      	cmp	r4, #0
 8016b14:	d12f      	bne.n	8016b76 <__gethex+0x364>
 8016b16:	2f00      	cmp	r7, #0
 8016b18:	d004      	beq.n	8016b24 <__gethex+0x312>
 8016b1a:	0039      	movs	r1, r7
 8016b1c:	0028      	movs	r0, r5
 8016b1e:	f000 fd34 	bl	801758a <__any_on>
 8016b22:	0004      	movs	r4, r0
 8016b24:	231f      	movs	r3, #31
 8016b26:	117a      	asrs	r2, r7, #5
 8016b28:	401f      	ands	r7, r3
 8016b2a:	3b1e      	subs	r3, #30
 8016b2c:	40bb      	lsls	r3, r7
 8016b2e:	9903      	ldr	r1, [sp, #12]
 8016b30:	0092      	lsls	r2, r2, #2
 8016b32:	5852      	ldr	r2, [r2, r1]
 8016b34:	421a      	tst	r2, r3
 8016b36:	d001      	beq.n	8016b3c <__gethex+0x32a>
 8016b38:	2302      	movs	r3, #2
 8016b3a:	431c      	orrs	r4, r3
 8016b3c:	9b01      	ldr	r3, [sp, #4]
 8016b3e:	0031      	movs	r1, r6
 8016b40:	1b9b      	subs	r3, r3, r6
 8016b42:	2602      	movs	r6, #2
 8016b44:	0028      	movs	r0, r5
 8016b46:	9301      	str	r3, [sp, #4]
 8016b48:	f7ff fe1a 	bl	8016780 <rshift>
 8016b4c:	9b02      	ldr	r3, [sp, #8]
 8016b4e:	685f      	ldr	r7, [r3, #4]
 8016b50:	2c00      	cmp	r4, #0
 8016b52:	d040      	beq.n	8016bd6 <__gethex+0x3c4>
 8016b54:	9b02      	ldr	r3, [sp, #8]
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d010      	beq.n	8016b7e <__gethex+0x36c>
 8016b5c:	2b03      	cmp	r3, #3
 8016b5e:	d012      	beq.n	8016b86 <__gethex+0x374>
 8016b60:	2b01      	cmp	r3, #1
 8016b62:	d106      	bne.n	8016b72 <__gethex+0x360>
 8016b64:	07a2      	lsls	r2, r4, #30
 8016b66:	d504      	bpl.n	8016b72 <__gethex+0x360>
 8016b68:	9a03      	ldr	r2, [sp, #12]
 8016b6a:	6812      	ldr	r2, [r2, #0]
 8016b6c:	4314      	orrs	r4, r2
 8016b6e:	421c      	tst	r4, r3
 8016b70:	d10c      	bne.n	8016b8c <__gethex+0x37a>
 8016b72:	2310      	movs	r3, #16
 8016b74:	e02e      	b.n	8016bd4 <__gethex+0x3c2>
 8016b76:	2401      	movs	r4, #1
 8016b78:	e7d4      	b.n	8016b24 <__gethex+0x312>
 8016b7a:	2601      	movs	r6, #1
 8016b7c:	e7e8      	b.n	8016b50 <__gethex+0x33e>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b82:	1a9b      	subs	r3, r3, r2
 8016b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d0f2      	beq.n	8016b72 <__gethex+0x360>
 8016b8c:	692c      	ldr	r4, [r5, #16]
 8016b8e:	00a3      	lsls	r3, r4, #2
 8016b90:	9304      	str	r3, [sp, #16]
 8016b92:	002b      	movs	r3, r5
 8016b94:	00a2      	lsls	r2, r4, #2
 8016b96:	3314      	adds	r3, #20
 8016b98:	1899      	adds	r1, r3, r2
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	4694      	mov	ip, r2
 8016b9e:	681a      	ldr	r2, [r3, #0]
 8016ba0:	1c50      	adds	r0, r2, #1
 8016ba2:	d01d      	beq.n	8016be0 <__gethex+0x3ce>
 8016ba4:	3201      	adds	r2, #1
 8016ba6:	601a      	str	r2, [r3, #0]
 8016ba8:	002b      	movs	r3, r5
 8016baa:	3314      	adds	r3, #20
 8016bac:	2e02      	cmp	r6, #2
 8016bae:	d13a      	bne.n	8016c26 <__gethex+0x414>
 8016bb0:	9a02      	ldr	r2, [sp, #8]
 8016bb2:	9901      	ldr	r1, [sp, #4]
 8016bb4:	6812      	ldr	r2, [r2, #0]
 8016bb6:	3a01      	subs	r2, #1
 8016bb8:	428a      	cmp	r2, r1
 8016bba:	d10a      	bne.n	8016bd2 <__gethex+0x3c0>
 8016bbc:	114a      	asrs	r2, r1, #5
 8016bbe:	211f      	movs	r1, #31
 8016bc0:	9801      	ldr	r0, [sp, #4]
 8016bc2:	0092      	lsls	r2, r2, #2
 8016bc4:	4001      	ands	r1, r0
 8016bc6:	2001      	movs	r0, #1
 8016bc8:	0004      	movs	r4, r0
 8016bca:	408c      	lsls	r4, r1
 8016bcc:	58d3      	ldr	r3, [r2, r3]
 8016bce:	4223      	tst	r3, r4
 8016bd0:	d148      	bne.n	8016c64 <__gethex+0x452>
 8016bd2:	2320      	movs	r3, #32
 8016bd4:	431e      	orrs	r6, r3
 8016bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016bd8:	601d      	str	r5, [r3, #0]
 8016bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bdc:	601f      	str	r7, [r3, #0]
 8016bde:	e6ac      	b.n	801693a <__gethex+0x128>
 8016be0:	4662      	mov	r2, ip
 8016be2:	c304      	stmia	r3!, {r2}
 8016be4:	4299      	cmp	r1, r3
 8016be6:	d8da      	bhi.n	8016b9e <__gethex+0x38c>
 8016be8:	68ab      	ldr	r3, [r5, #8]
 8016bea:	429c      	cmp	r4, r3
 8016bec:	db12      	blt.n	8016c14 <__gethex+0x402>
 8016bee:	686b      	ldr	r3, [r5, #4]
 8016bf0:	9805      	ldr	r0, [sp, #20]
 8016bf2:	1c59      	adds	r1, r3, #1
 8016bf4:	f000 f924 	bl	8016e40 <_Balloc>
 8016bf8:	0029      	movs	r1, r5
 8016bfa:	692b      	ldr	r3, [r5, #16]
 8016bfc:	9003      	str	r0, [sp, #12]
 8016bfe:	1c9a      	adds	r2, r3, #2
 8016c00:	0092      	lsls	r2, r2, #2
 8016c02:	310c      	adds	r1, #12
 8016c04:	300c      	adds	r0, #12
 8016c06:	f7fc fa34 	bl	8013072 <memcpy>
 8016c0a:	0029      	movs	r1, r5
 8016c0c:	9805      	ldr	r0, [sp, #20]
 8016c0e:	f000 f93f 	bl	8016e90 <_Bfree>
 8016c12:	9d03      	ldr	r5, [sp, #12]
 8016c14:	692b      	ldr	r3, [r5, #16]
 8016c16:	1c5a      	adds	r2, r3, #1
 8016c18:	612a      	str	r2, [r5, #16]
 8016c1a:	2201      	movs	r2, #1
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	009b      	lsls	r3, r3, #2
 8016c20:	18eb      	adds	r3, r5, r3
 8016c22:	605a      	str	r2, [r3, #4]
 8016c24:	e7c0      	b.n	8016ba8 <__gethex+0x396>
 8016c26:	692a      	ldr	r2, [r5, #16]
 8016c28:	42a2      	cmp	r2, r4
 8016c2a:	dd0a      	ble.n	8016c42 <__gethex+0x430>
 8016c2c:	2101      	movs	r1, #1
 8016c2e:	0028      	movs	r0, r5
 8016c30:	f7ff fda6 	bl	8016780 <rshift>
 8016c34:	9b02      	ldr	r3, [sp, #8]
 8016c36:	3701      	adds	r7, #1
 8016c38:	689b      	ldr	r3, [r3, #8]
 8016c3a:	2601      	movs	r6, #1
 8016c3c:	42bb      	cmp	r3, r7
 8016c3e:	dac8      	bge.n	8016bd2 <__gethex+0x3c0>
 8016c40:	e6dc      	b.n	80169fc <__gethex+0x1ea>
 8016c42:	241f      	movs	r4, #31
 8016c44:	9a01      	ldr	r2, [sp, #4]
 8016c46:	2601      	movs	r6, #1
 8016c48:	4022      	ands	r2, r4
 8016c4a:	1e14      	subs	r4, r2, #0
 8016c4c:	d0c1      	beq.n	8016bd2 <__gethex+0x3c0>
 8016c4e:	9a04      	ldr	r2, [sp, #16]
 8016c50:	189b      	adds	r3, r3, r2
 8016c52:	3b04      	subs	r3, #4
 8016c54:	6818      	ldr	r0, [r3, #0]
 8016c56:	f000 f9a1 	bl	8016f9c <__hi0bits>
 8016c5a:	2120      	movs	r1, #32
 8016c5c:	1b0c      	subs	r4, r1, r4
 8016c5e:	42a0      	cmp	r0, r4
 8016c60:	dbe4      	blt.n	8016c2c <__gethex+0x41a>
 8016c62:	e7b6      	b.n	8016bd2 <__gethex+0x3c0>
 8016c64:	0006      	movs	r6, r0
 8016c66:	e7b4      	b.n	8016bd2 <__gethex+0x3c0>

08016c68 <L_shift>:
 8016c68:	2308      	movs	r3, #8
 8016c6a:	b570      	push	{r4, r5, r6, lr}
 8016c6c:	2520      	movs	r5, #32
 8016c6e:	1a9a      	subs	r2, r3, r2
 8016c70:	0092      	lsls	r2, r2, #2
 8016c72:	1aad      	subs	r5, r5, r2
 8016c74:	6843      	ldr	r3, [r0, #4]
 8016c76:	6806      	ldr	r6, [r0, #0]
 8016c78:	001c      	movs	r4, r3
 8016c7a:	40ac      	lsls	r4, r5
 8016c7c:	40d3      	lsrs	r3, r2
 8016c7e:	4334      	orrs	r4, r6
 8016c80:	6004      	str	r4, [r0, #0]
 8016c82:	6043      	str	r3, [r0, #4]
 8016c84:	3004      	adds	r0, #4
 8016c86:	4288      	cmp	r0, r1
 8016c88:	d3f4      	bcc.n	8016c74 <L_shift+0xc>
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}

08016c8c <__match>:
 8016c8c:	b530      	push	{r4, r5, lr}
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	780c      	ldrb	r4, [r1, #0]
 8016c92:	3301      	adds	r3, #1
 8016c94:	2c00      	cmp	r4, #0
 8016c96:	d102      	bne.n	8016c9e <__match+0x12>
 8016c98:	6003      	str	r3, [r0, #0]
 8016c9a:	2001      	movs	r0, #1
 8016c9c:	bd30      	pop	{r4, r5, pc}
 8016c9e:	781a      	ldrb	r2, [r3, #0]
 8016ca0:	0015      	movs	r5, r2
 8016ca2:	3d41      	subs	r5, #65	; 0x41
 8016ca4:	2d19      	cmp	r5, #25
 8016ca6:	d800      	bhi.n	8016caa <__match+0x1e>
 8016ca8:	3220      	adds	r2, #32
 8016caa:	3101      	adds	r1, #1
 8016cac:	42a2      	cmp	r2, r4
 8016cae:	d0ef      	beq.n	8016c90 <__match+0x4>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	e7f3      	b.n	8016c9c <__match+0x10>

08016cb4 <__hexnan>:
 8016cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cb6:	b08b      	sub	sp, #44	; 0x2c
 8016cb8:	9201      	str	r2, [sp, #4]
 8016cba:	680a      	ldr	r2, [r1, #0]
 8016cbc:	9901      	ldr	r1, [sp, #4]
 8016cbe:	1153      	asrs	r3, r2, #5
 8016cc0:	009b      	lsls	r3, r3, #2
 8016cc2:	18cb      	adds	r3, r1, r3
 8016cc4:	9304      	str	r3, [sp, #16]
 8016cc6:	231f      	movs	r3, #31
 8016cc8:	401a      	ands	r2, r3
 8016cca:	9008      	str	r0, [sp, #32]
 8016ccc:	9206      	str	r2, [sp, #24]
 8016cce:	d002      	beq.n	8016cd6 <__hexnan+0x22>
 8016cd0:	9b04      	ldr	r3, [sp, #16]
 8016cd2:	3304      	adds	r3, #4
 8016cd4:	9304      	str	r3, [sp, #16]
 8016cd6:	9b04      	ldr	r3, [sp, #16]
 8016cd8:	2500      	movs	r5, #0
 8016cda:	1f1e      	subs	r6, r3, #4
 8016cdc:	0037      	movs	r7, r6
 8016cde:	0034      	movs	r4, r6
 8016ce0:	9b08      	ldr	r3, [sp, #32]
 8016ce2:	6035      	str	r5, [r6, #0]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	9507      	str	r5, [sp, #28]
 8016ce8:	9305      	str	r3, [sp, #20]
 8016cea:	9502      	str	r5, [sp, #8]
 8016cec:	9b05      	ldr	r3, [sp, #20]
 8016cee:	3301      	adds	r3, #1
 8016cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf2:	9b05      	ldr	r3, [sp, #20]
 8016cf4:	785b      	ldrb	r3, [r3, #1]
 8016cf6:	9303      	str	r3, [sp, #12]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d028      	beq.n	8016d4e <__hexnan+0x9a>
 8016cfc:	9803      	ldr	r0, [sp, #12]
 8016cfe:	f7ff fd73 	bl	80167e8 <__hexdig_fun>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	d145      	bne.n	8016d92 <__hexnan+0xde>
 8016d06:	9b03      	ldr	r3, [sp, #12]
 8016d08:	2b20      	cmp	r3, #32
 8016d0a:	d819      	bhi.n	8016d40 <__hexnan+0x8c>
 8016d0c:	9b02      	ldr	r3, [sp, #8]
 8016d0e:	9a07      	ldr	r2, [sp, #28]
 8016d10:	4293      	cmp	r3, r2
 8016d12:	dd12      	ble.n	8016d3a <__hexnan+0x86>
 8016d14:	42bc      	cmp	r4, r7
 8016d16:	d206      	bcs.n	8016d26 <__hexnan+0x72>
 8016d18:	2d07      	cmp	r5, #7
 8016d1a:	dc04      	bgt.n	8016d26 <__hexnan+0x72>
 8016d1c:	002a      	movs	r2, r5
 8016d1e:	0039      	movs	r1, r7
 8016d20:	0020      	movs	r0, r4
 8016d22:	f7ff ffa1 	bl	8016c68 <L_shift>
 8016d26:	9b01      	ldr	r3, [sp, #4]
 8016d28:	2508      	movs	r5, #8
 8016d2a:	429c      	cmp	r4, r3
 8016d2c:	d905      	bls.n	8016d3a <__hexnan+0x86>
 8016d2e:	1f27      	subs	r7, r4, #4
 8016d30:	2500      	movs	r5, #0
 8016d32:	003c      	movs	r4, r7
 8016d34:	9b02      	ldr	r3, [sp, #8]
 8016d36:	603d      	str	r5, [r7, #0]
 8016d38:	9307      	str	r3, [sp, #28]
 8016d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d3c:	9305      	str	r3, [sp, #20]
 8016d3e:	e7d5      	b.n	8016cec <__hexnan+0x38>
 8016d40:	9b03      	ldr	r3, [sp, #12]
 8016d42:	2b29      	cmp	r3, #41	; 0x29
 8016d44:	d14a      	bne.n	8016ddc <__hexnan+0x128>
 8016d46:	9b05      	ldr	r3, [sp, #20]
 8016d48:	9a08      	ldr	r2, [sp, #32]
 8016d4a:	3302      	adds	r3, #2
 8016d4c:	6013      	str	r3, [r2, #0]
 8016d4e:	9b02      	ldr	r3, [sp, #8]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d043      	beq.n	8016ddc <__hexnan+0x128>
 8016d54:	42bc      	cmp	r4, r7
 8016d56:	d206      	bcs.n	8016d66 <__hexnan+0xb2>
 8016d58:	2d07      	cmp	r5, #7
 8016d5a:	dc04      	bgt.n	8016d66 <__hexnan+0xb2>
 8016d5c:	002a      	movs	r2, r5
 8016d5e:	0039      	movs	r1, r7
 8016d60:	0020      	movs	r0, r4
 8016d62:	f7ff ff81 	bl	8016c68 <L_shift>
 8016d66:	9b01      	ldr	r3, [sp, #4]
 8016d68:	429c      	cmp	r4, r3
 8016d6a:	d926      	bls.n	8016dba <__hexnan+0x106>
 8016d6c:	cc04      	ldmia	r4!, {r2}
 8016d6e:	601a      	str	r2, [r3, #0]
 8016d70:	3304      	adds	r3, #4
 8016d72:	42a6      	cmp	r6, r4
 8016d74:	d2fa      	bcs.n	8016d6c <__hexnan+0xb8>
 8016d76:	2200      	movs	r2, #0
 8016d78:	c304      	stmia	r3!, {r2}
 8016d7a:	429e      	cmp	r6, r3
 8016d7c:	d2fc      	bcs.n	8016d78 <__hexnan+0xc4>
 8016d7e:	6833      	ldr	r3, [r6, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d104      	bne.n	8016d8e <__hexnan+0xda>
 8016d84:	9b01      	ldr	r3, [sp, #4]
 8016d86:	429e      	cmp	r6, r3
 8016d88:	d126      	bne.n	8016dd8 <__hexnan+0x124>
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	6033      	str	r3, [r6, #0]
 8016d8e:	2005      	movs	r0, #5
 8016d90:	e025      	b.n	8016dde <__hexnan+0x12a>
 8016d92:	9b02      	ldr	r3, [sp, #8]
 8016d94:	3501      	adds	r5, #1
 8016d96:	3301      	adds	r3, #1
 8016d98:	9302      	str	r3, [sp, #8]
 8016d9a:	2d08      	cmp	r5, #8
 8016d9c:	dd06      	ble.n	8016dac <__hexnan+0xf8>
 8016d9e:	9b01      	ldr	r3, [sp, #4]
 8016da0:	429c      	cmp	r4, r3
 8016da2:	d9ca      	bls.n	8016d3a <__hexnan+0x86>
 8016da4:	2300      	movs	r3, #0
 8016da6:	2501      	movs	r5, #1
 8016da8:	3c04      	subs	r4, #4
 8016daa:	6023      	str	r3, [r4, #0]
 8016dac:	220f      	movs	r2, #15
 8016dae:	6823      	ldr	r3, [r4, #0]
 8016db0:	4010      	ands	r0, r2
 8016db2:	011b      	lsls	r3, r3, #4
 8016db4:	4318      	orrs	r0, r3
 8016db6:	6020      	str	r0, [r4, #0]
 8016db8:	e7bf      	b.n	8016d3a <__hexnan+0x86>
 8016dba:	9b06      	ldr	r3, [sp, #24]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d0de      	beq.n	8016d7e <__hexnan+0xca>
 8016dc0:	2120      	movs	r1, #32
 8016dc2:	9a06      	ldr	r2, [sp, #24]
 8016dc4:	9b04      	ldr	r3, [sp, #16]
 8016dc6:	1a89      	subs	r1, r1, r2
 8016dc8:	2201      	movs	r2, #1
 8016dca:	4252      	negs	r2, r2
 8016dcc:	40ca      	lsrs	r2, r1
 8016dce:	3b04      	subs	r3, #4
 8016dd0:	6819      	ldr	r1, [r3, #0]
 8016dd2:	400a      	ands	r2, r1
 8016dd4:	601a      	str	r2, [r3, #0]
 8016dd6:	e7d2      	b.n	8016d7e <__hexnan+0xca>
 8016dd8:	3e04      	subs	r6, #4
 8016dda:	e7d0      	b.n	8016d7e <__hexnan+0xca>
 8016ddc:	2004      	movs	r0, #4
 8016dde:	b00b      	add	sp, #44	; 0x2c
 8016de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016de2 <__localeconv_l>:
 8016de2:	30f0      	adds	r0, #240	; 0xf0
 8016de4:	4770      	bx	lr
	...

08016de8 <_localeconv_r>:
 8016de8:	4b03      	ldr	r3, [pc, #12]	; (8016df8 <_localeconv_r+0x10>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016dee:	2800      	cmp	r0, #0
 8016df0:	d100      	bne.n	8016df4 <_localeconv_r+0xc>
 8016df2:	4802      	ldr	r0, [pc, #8]	; (8016dfc <_localeconv_r+0x14>)
 8016df4:	30f0      	adds	r0, #240	; 0xf0
 8016df6:	4770      	bx	lr
 8016df8:	200000d0 	.word	0x200000d0
 8016dfc:	20000500 	.word	0x20000500

08016e00 <__retarget_lock_acquire_recursive>:
 8016e00:	4770      	bx	lr

08016e02 <__retarget_lock_release_recursive>:
 8016e02:	4770      	bx	lr

08016e04 <memchr>:
 8016e04:	b2c9      	uxtb	r1, r1
 8016e06:	1882      	adds	r2, r0, r2
 8016e08:	4290      	cmp	r0, r2
 8016e0a:	d101      	bne.n	8016e10 <memchr+0xc>
 8016e0c:	2000      	movs	r0, #0
 8016e0e:	4770      	bx	lr
 8016e10:	7803      	ldrb	r3, [r0, #0]
 8016e12:	428b      	cmp	r3, r1
 8016e14:	d0fb      	beq.n	8016e0e <memchr+0xa>
 8016e16:	3001      	adds	r0, #1
 8016e18:	e7f6      	b.n	8016e08 <memchr+0x4>

08016e1a <memmove>:
 8016e1a:	b510      	push	{r4, lr}
 8016e1c:	4288      	cmp	r0, r1
 8016e1e:	d902      	bls.n	8016e26 <memmove+0xc>
 8016e20:	188b      	adds	r3, r1, r2
 8016e22:	4298      	cmp	r0, r3
 8016e24:	d303      	bcc.n	8016e2e <memmove+0x14>
 8016e26:	2300      	movs	r3, #0
 8016e28:	e007      	b.n	8016e3a <memmove+0x20>
 8016e2a:	5c8b      	ldrb	r3, [r1, r2]
 8016e2c:	5483      	strb	r3, [r0, r2]
 8016e2e:	3a01      	subs	r2, #1
 8016e30:	d2fb      	bcs.n	8016e2a <memmove+0x10>
 8016e32:	bd10      	pop	{r4, pc}
 8016e34:	5ccc      	ldrb	r4, [r1, r3]
 8016e36:	54c4      	strb	r4, [r0, r3]
 8016e38:	3301      	adds	r3, #1
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d1fa      	bne.n	8016e34 <memmove+0x1a>
 8016e3e:	e7f8      	b.n	8016e32 <memmove+0x18>

08016e40 <_Balloc>:
 8016e40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016e42:	b570      	push	{r4, r5, r6, lr}
 8016e44:	0004      	movs	r4, r0
 8016e46:	000d      	movs	r5, r1
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d012      	beq.n	8016e72 <_Balloc+0x32>
 8016e4c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016e4e:	00ab      	lsls	r3, r5, #2
 8016e50:	18d3      	adds	r3, r2, r3
 8016e52:	6818      	ldr	r0, [r3, #0]
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d115      	bne.n	8016e84 <_Balloc+0x44>
 8016e58:	2101      	movs	r1, #1
 8016e5a:	000e      	movs	r6, r1
 8016e5c:	40ae      	lsls	r6, r5
 8016e5e:	1d72      	adds	r2, r6, #5
 8016e60:	0092      	lsls	r2, r2, #2
 8016e62:	0020      	movs	r0, r4
 8016e64:	f7fb fe56 	bl	8012b14 <_calloc_r>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	d009      	beq.n	8016e80 <_Balloc+0x40>
 8016e6c:	6045      	str	r5, [r0, #4]
 8016e6e:	6086      	str	r6, [r0, #8]
 8016e70:	e00a      	b.n	8016e88 <_Balloc+0x48>
 8016e72:	2221      	movs	r2, #33	; 0x21
 8016e74:	2104      	movs	r1, #4
 8016e76:	f7fb fe4d 	bl	8012b14 <_calloc_r>
 8016e7a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d1e5      	bne.n	8016e4c <_Balloc+0xc>
 8016e80:	2000      	movs	r0, #0
 8016e82:	bd70      	pop	{r4, r5, r6, pc}
 8016e84:	6802      	ldr	r2, [r0, #0]
 8016e86:	601a      	str	r2, [r3, #0]
 8016e88:	2300      	movs	r3, #0
 8016e8a:	6103      	str	r3, [r0, #16]
 8016e8c:	60c3      	str	r3, [r0, #12]
 8016e8e:	e7f8      	b.n	8016e82 <_Balloc+0x42>

08016e90 <_Bfree>:
 8016e90:	2900      	cmp	r1, #0
 8016e92:	d006      	beq.n	8016ea2 <_Bfree+0x12>
 8016e94:	684b      	ldr	r3, [r1, #4]
 8016e96:	009a      	lsls	r2, r3, #2
 8016e98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016e9a:	189b      	adds	r3, r3, r2
 8016e9c:	681a      	ldr	r2, [r3, #0]
 8016e9e:	600a      	str	r2, [r1, #0]
 8016ea0:	6019      	str	r1, [r3, #0]
 8016ea2:	4770      	bx	lr

08016ea4 <__multadd>:
 8016ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ea6:	001e      	movs	r6, r3
 8016ea8:	2314      	movs	r3, #20
 8016eaa:	469c      	mov	ip, r3
 8016eac:	0007      	movs	r7, r0
 8016eae:	000c      	movs	r4, r1
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	690d      	ldr	r5, [r1, #16]
 8016eb4:	448c      	add	ip, r1
 8016eb6:	4663      	mov	r3, ip
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	3001      	adds	r0, #1
 8016ebc:	b299      	uxth	r1, r3
 8016ebe:	4663      	mov	r3, ip
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	4351      	muls	r1, r2
 8016ec4:	0c1b      	lsrs	r3, r3, #16
 8016ec6:	4353      	muls	r3, r2
 8016ec8:	1989      	adds	r1, r1, r6
 8016eca:	0c0e      	lsrs	r6, r1, #16
 8016ecc:	199b      	adds	r3, r3, r6
 8016ece:	b289      	uxth	r1, r1
 8016ed0:	0c1e      	lsrs	r6, r3, #16
 8016ed2:	041b      	lsls	r3, r3, #16
 8016ed4:	185b      	adds	r3, r3, r1
 8016ed6:	4661      	mov	r1, ip
 8016ed8:	c108      	stmia	r1!, {r3}
 8016eda:	468c      	mov	ip, r1
 8016edc:	4285      	cmp	r5, r0
 8016ede:	dcea      	bgt.n	8016eb6 <__multadd+0x12>
 8016ee0:	2e00      	cmp	r6, #0
 8016ee2:	d01b      	beq.n	8016f1c <__multadd+0x78>
 8016ee4:	68a3      	ldr	r3, [r4, #8]
 8016ee6:	42ab      	cmp	r3, r5
 8016ee8:	dc12      	bgt.n	8016f10 <__multadd+0x6c>
 8016eea:	6863      	ldr	r3, [r4, #4]
 8016eec:	0038      	movs	r0, r7
 8016eee:	1c59      	adds	r1, r3, #1
 8016ef0:	f7ff ffa6 	bl	8016e40 <_Balloc>
 8016ef4:	0021      	movs	r1, r4
 8016ef6:	6923      	ldr	r3, [r4, #16]
 8016ef8:	9001      	str	r0, [sp, #4]
 8016efa:	1c9a      	adds	r2, r3, #2
 8016efc:	0092      	lsls	r2, r2, #2
 8016efe:	310c      	adds	r1, #12
 8016f00:	300c      	adds	r0, #12
 8016f02:	f7fc f8b6 	bl	8013072 <memcpy>
 8016f06:	0021      	movs	r1, r4
 8016f08:	0038      	movs	r0, r7
 8016f0a:	f7ff ffc1 	bl	8016e90 <_Bfree>
 8016f0e:	9c01      	ldr	r4, [sp, #4]
 8016f10:	1d2b      	adds	r3, r5, #4
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	18e3      	adds	r3, r4, r3
 8016f16:	3501      	adds	r5, #1
 8016f18:	605e      	str	r6, [r3, #4]
 8016f1a:	6125      	str	r5, [r4, #16]
 8016f1c:	0020      	movs	r0, r4
 8016f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016f20 <__s2b>:
 8016f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f22:	0006      	movs	r6, r0
 8016f24:	0018      	movs	r0, r3
 8016f26:	000c      	movs	r4, r1
 8016f28:	3008      	adds	r0, #8
 8016f2a:	2109      	movs	r1, #9
 8016f2c:	9301      	str	r3, [sp, #4]
 8016f2e:	0015      	movs	r5, r2
 8016f30:	f7e9 f998 	bl	8000264 <__divsi3>
 8016f34:	2301      	movs	r3, #1
 8016f36:	2100      	movs	r1, #0
 8016f38:	4283      	cmp	r3, r0
 8016f3a:	db1f      	blt.n	8016f7c <__s2b+0x5c>
 8016f3c:	0030      	movs	r0, r6
 8016f3e:	f7ff ff7f 	bl	8016e40 <_Balloc>
 8016f42:	9b08      	ldr	r3, [sp, #32]
 8016f44:	6143      	str	r3, [r0, #20]
 8016f46:	2301      	movs	r3, #1
 8016f48:	6103      	str	r3, [r0, #16]
 8016f4a:	2d09      	cmp	r5, #9
 8016f4c:	dd19      	ble.n	8016f82 <__s2b+0x62>
 8016f4e:	0023      	movs	r3, r4
 8016f50:	3309      	adds	r3, #9
 8016f52:	001f      	movs	r7, r3
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	1964      	adds	r4, r4, r5
 8016f58:	783b      	ldrb	r3, [r7, #0]
 8016f5a:	0001      	movs	r1, r0
 8016f5c:	3b30      	subs	r3, #48	; 0x30
 8016f5e:	220a      	movs	r2, #10
 8016f60:	0030      	movs	r0, r6
 8016f62:	3701      	adds	r7, #1
 8016f64:	f7ff ff9e 	bl	8016ea4 <__multadd>
 8016f68:	42a7      	cmp	r7, r4
 8016f6a:	d1f5      	bne.n	8016f58 <__s2b+0x38>
 8016f6c:	9b00      	ldr	r3, [sp, #0]
 8016f6e:	195c      	adds	r4, r3, r5
 8016f70:	3c08      	subs	r4, #8
 8016f72:	002f      	movs	r7, r5
 8016f74:	9b01      	ldr	r3, [sp, #4]
 8016f76:	429f      	cmp	r7, r3
 8016f78:	db06      	blt.n	8016f88 <__s2b+0x68>
 8016f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	3101      	adds	r1, #1
 8016f80:	e7da      	b.n	8016f38 <__s2b+0x18>
 8016f82:	340a      	adds	r4, #10
 8016f84:	2509      	movs	r5, #9
 8016f86:	e7f4      	b.n	8016f72 <__s2b+0x52>
 8016f88:	1b63      	subs	r3, r4, r5
 8016f8a:	5ddb      	ldrb	r3, [r3, r7]
 8016f8c:	0001      	movs	r1, r0
 8016f8e:	3b30      	subs	r3, #48	; 0x30
 8016f90:	220a      	movs	r2, #10
 8016f92:	0030      	movs	r0, r6
 8016f94:	f7ff ff86 	bl	8016ea4 <__multadd>
 8016f98:	3701      	adds	r7, #1
 8016f9a:	e7eb      	b.n	8016f74 <__s2b+0x54>

08016f9c <__hi0bits>:
 8016f9c:	0003      	movs	r3, r0
 8016f9e:	0c02      	lsrs	r2, r0, #16
 8016fa0:	2000      	movs	r0, #0
 8016fa2:	4282      	cmp	r2, r0
 8016fa4:	d101      	bne.n	8016faa <__hi0bits+0xe>
 8016fa6:	041b      	lsls	r3, r3, #16
 8016fa8:	3010      	adds	r0, #16
 8016faa:	0e1a      	lsrs	r2, r3, #24
 8016fac:	d101      	bne.n	8016fb2 <__hi0bits+0x16>
 8016fae:	3008      	adds	r0, #8
 8016fb0:	021b      	lsls	r3, r3, #8
 8016fb2:	0f1a      	lsrs	r2, r3, #28
 8016fb4:	d101      	bne.n	8016fba <__hi0bits+0x1e>
 8016fb6:	3004      	adds	r0, #4
 8016fb8:	011b      	lsls	r3, r3, #4
 8016fba:	0f9a      	lsrs	r2, r3, #30
 8016fbc:	d101      	bne.n	8016fc2 <__hi0bits+0x26>
 8016fbe:	3002      	adds	r0, #2
 8016fc0:	009b      	lsls	r3, r3, #2
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	db03      	blt.n	8016fce <__hi0bits+0x32>
 8016fc6:	3001      	adds	r0, #1
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	d400      	bmi.n	8016fce <__hi0bits+0x32>
 8016fcc:	2020      	movs	r0, #32
 8016fce:	4770      	bx	lr

08016fd0 <__lo0bits>:
 8016fd0:	2207      	movs	r2, #7
 8016fd2:	6803      	ldr	r3, [r0, #0]
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	0001      	movs	r1, r0
 8016fd8:	401a      	ands	r2, r3
 8016fda:	d00d      	beq.n	8016ff8 <__lo0bits+0x28>
 8016fdc:	2401      	movs	r4, #1
 8016fde:	2000      	movs	r0, #0
 8016fe0:	4223      	tst	r3, r4
 8016fe2:	d105      	bne.n	8016ff0 <__lo0bits+0x20>
 8016fe4:	3002      	adds	r0, #2
 8016fe6:	4203      	tst	r3, r0
 8016fe8:	d003      	beq.n	8016ff2 <__lo0bits+0x22>
 8016fea:	40e3      	lsrs	r3, r4
 8016fec:	0020      	movs	r0, r4
 8016fee:	600b      	str	r3, [r1, #0]
 8016ff0:	bd10      	pop	{r4, pc}
 8016ff2:	089b      	lsrs	r3, r3, #2
 8016ff4:	600b      	str	r3, [r1, #0]
 8016ff6:	e7fb      	b.n	8016ff0 <__lo0bits+0x20>
 8016ff8:	b29c      	uxth	r4, r3
 8016ffa:	0010      	movs	r0, r2
 8016ffc:	2c00      	cmp	r4, #0
 8016ffe:	d101      	bne.n	8017004 <__lo0bits+0x34>
 8017000:	2010      	movs	r0, #16
 8017002:	0c1b      	lsrs	r3, r3, #16
 8017004:	b2da      	uxtb	r2, r3
 8017006:	2a00      	cmp	r2, #0
 8017008:	d101      	bne.n	801700e <__lo0bits+0x3e>
 801700a:	3008      	adds	r0, #8
 801700c:	0a1b      	lsrs	r3, r3, #8
 801700e:	071a      	lsls	r2, r3, #28
 8017010:	d101      	bne.n	8017016 <__lo0bits+0x46>
 8017012:	3004      	adds	r0, #4
 8017014:	091b      	lsrs	r3, r3, #4
 8017016:	079a      	lsls	r2, r3, #30
 8017018:	d101      	bne.n	801701e <__lo0bits+0x4e>
 801701a:	3002      	adds	r0, #2
 801701c:	089b      	lsrs	r3, r3, #2
 801701e:	07da      	lsls	r2, r3, #31
 8017020:	d4e8      	bmi.n	8016ff4 <__lo0bits+0x24>
 8017022:	085b      	lsrs	r3, r3, #1
 8017024:	d001      	beq.n	801702a <__lo0bits+0x5a>
 8017026:	3001      	adds	r0, #1
 8017028:	e7e4      	b.n	8016ff4 <__lo0bits+0x24>
 801702a:	2020      	movs	r0, #32
 801702c:	e7e0      	b.n	8016ff0 <__lo0bits+0x20>

0801702e <__i2b>:
 801702e:	b510      	push	{r4, lr}
 8017030:	000c      	movs	r4, r1
 8017032:	2101      	movs	r1, #1
 8017034:	f7ff ff04 	bl	8016e40 <_Balloc>
 8017038:	2301      	movs	r3, #1
 801703a:	6144      	str	r4, [r0, #20]
 801703c:	6103      	str	r3, [r0, #16]
 801703e:	bd10      	pop	{r4, pc}

08017040 <__multiply>:
 8017040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017042:	690b      	ldr	r3, [r1, #16]
 8017044:	0014      	movs	r4, r2
 8017046:	6912      	ldr	r2, [r2, #16]
 8017048:	b089      	sub	sp, #36	; 0x24
 801704a:	000d      	movs	r5, r1
 801704c:	4293      	cmp	r3, r2
 801704e:	da01      	bge.n	8017054 <__multiply+0x14>
 8017050:	0025      	movs	r5, r4
 8017052:	000c      	movs	r4, r1
 8017054:	692f      	ldr	r7, [r5, #16]
 8017056:	6926      	ldr	r6, [r4, #16]
 8017058:	6869      	ldr	r1, [r5, #4]
 801705a:	19bb      	adds	r3, r7, r6
 801705c:	9302      	str	r3, [sp, #8]
 801705e:	68ab      	ldr	r3, [r5, #8]
 8017060:	19ba      	adds	r2, r7, r6
 8017062:	4293      	cmp	r3, r2
 8017064:	da00      	bge.n	8017068 <__multiply+0x28>
 8017066:	3101      	adds	r1, #1
 8017068:	f7ff feea 	bl	8016e40 <_Balloc>
 801706c:	0002      	movs	r2, r0
 801706e:	19bb      	adds	r3, r7, r6
 8017070:	3214      	adds	r2, #20
 8017072:	009b      	lsls	r3, r3, #2
 8017074:	18d3      	adds	r3, r2, r3
 8017076:	469c      	mov	ip, r3
 8017078:	2100      	movs	r1, #0
 801707a:	0013      	movs	r3, r2
 801707c:	9004      	str	r0, [sp, #16]
 801707e:	4563      	cmp	r3, ip
 8017080:	d31d      	bcc.n	80170be <__multiply+0x7e>
 8017082:	3514      	adds	r5, #20
 8017084:	00bf      	lsls	r7, r7, #2
 8017086:	19eb      	adds	r3, r5, r7
 8017088:	3414      	adds	r4, #20
 801708a:	00b6      	lsls	r6, r6, #2
 801708c:	9305      	str	r3, [sp, #20]
 801708e:	19a3      	adds	r3, r4, r6
 8017090:	9503      	str	r5, [sp, #12]
 8017092:	9401      	str	r4, [sp, #4]
 8017094:	9307      	str	r3, [sp, #28]
 8017096:	9b07      	ldr	r3, [sp, #28]
 8017098:	9901      	ldr	r1, [sp, #4]
 801709a:	4299      	cmp	r1, r3
 801709c:	d311      	bcc.n	80170c2 <__multiply+0x82>
 801709e:	9b02      	ldr	r3, [sp, #8]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	dd06      	ble.n	80170b2 <__multiply+0x72>
 80170a4:	2304      	movs	r3, #4
 80170a6:	425b      	negs	r3, r3
 80170a8:	449c      	add	ip, r3
 80170aa:	4663      	mov	r3, ip
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d051      	beq.n	8017156 <__multiply+0x116>
 80170b2:	9b04      	ldr	r3, [sp, #16]
 80170b4:	9a02      	ldr	r2, [sp, #8]
 80170b6:	0018      	movs	r0, r3
 80170b8:	611a      	str	r2, [r3, #16]
 80170ba:	b009      	add	sp, #36	; 0x24
 80170bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170be:	c302      	stmia	r3!, {r1}
 80170c0:	e7dd      	b.n	801707e <__multiply+0x3e>
 80170c2:	9b01      	ldr	r3, [sp, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	b298      	uxth	r0, r3
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d01c      	beq.n	8017106 <__multiply+0xc6>
 80170cc:	0015      	movs	r5, r2
 80170ce:	2600      	movs	r6, #0
 80170d0:	9f03      	ldr	r7, [sp, #12]
 80170d2:	cf02      	ldmia	r7!, {r1}
 80170d4:	682c      	ldr	r4, [r5, #0]
 80170d6:	b28b      	uxth	r3, r1
 80170d8:	4343      	muls	r3, r0
 80170da:	0c09      	lsrs	r1, r1, #16
 80170dc:	4341      	muls	r1, r0
 80170de:	b2a4      	uxth	r4, r4
 80170e0:	191b      	adds	r3, r3, r4
 80170e2:	199b      	adds	r3, r3, r6
 80170e4:	000e      	movs	r6, r1
 80170e6:	6829      	ldr	r1, [r5, #0]
 80170e8:	9506      	str	r5, [sp, #24]
 80170ea:	0c09      	lsrs	r1, r1, #16
 80170ec:	1871      	adds	r1, r6, r1
 80170ee:	0c1e      	lsrs	r6, r3, #16
 80170f0:	1989      	adds	r1, r1, r6
 80170f2:	0c0e      	lsrs	r6, r1, #16
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	0409      	lsls	r1, r1, #16
 80170f8:	430b      	orrs	r3, r1
 80170fa:	c508      	stmia	r5!, {r3}
 80170fc:	9b05      	ldr	r3, [sp, #20]
 80170fe:	42bb      	cmp	r3, r7
 8017100:	d8e7      	bhi.n	80170d2 <__multiply+0x92>
 8017102:	9b06      	ldr	r3, [sp, #24]
 8017104:	605e      	str	r6, [r3, #4]
 8017106:	9b01      	ldr	r3, [sp, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	0c1d      	lsrs	r5, r3, #16
 801710c:	d01e      	beq.n	801714c <__multiply+0x10c>
 801710e:	0010      	movs	r0, r2
 8017110:	2700      	movs	r7, #0
 8017112:	6813      	ldr	r3, [r2, #0]
 8017114:	9e03      	ldr	r6, [sp, #12]
 8017116:	6831      	ldr	r1, [r6, #0]
 8017118:	6804      	ldr	r4, [r0, #0]
 801711a:	b289      	uxth	r1, r1
 801711c:	4369      	muls	r1, r5
 801711e:	0c24      	lsrs	r4, r4, #16
 8017120:	1909      	adds	r1, r1, r4
 8017122:	19c9      	adds	r1, r1, r7
 8017124:	040f      	lsls	r7, r1, #16
 8017126:	b29b      	uxth	r3, r3
 8017128:	433b      	orrs	r3, r7
 801712a:	6003      	str	r3, [r0, #0]
 801712c:	ce80      	ldmia	r6!, {r7}
 801712e:	6843      	ldr	r3, [r0, #4]
 8017130:	0c3f      	lsrs	r7, r7, #16
 8017132:	436f      	muls	r7, r5
 8017134:	b29b      	uxth	r3, r3
 8017136:	18fb      	adds	r3, r7, r3
 8017138:	0c09      	lsrs	r1, r1, #16
 801713a:	185b      	adds	r3, r3, r1
 801713c:	9905      	ldr	r1, [sp, #20]
 801713e:	9006      	str	r0, [sp, #24]
 8017140:	0c1f      	lsrs	r7, r3, #16
 8017142:	3004      	adds	r0, #4
 8017144:	42b1      	cmp	r1, r6
 8017146:	d8e6      	bhi.n	8017116 <__multiply+0xd6>
 8017148:	9906      	ldr	r1, [sp, #24]
 801714a:	604b      	str	r3, [r1, #4]
 801714c:	9b01      	ldr	r3, [sp, #4]
 801714e:	3204      	adds	r2, #4
 8017150:	3304      	adds	r3, #4
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	e79f      	b.n	8017096 <__multiply+0x56>
 8017156:	9b02      	ldr	r3, [sp, #8]
 8017158:	3b01      	subs	r3, #1
 801715a:	9302      	str	r3, [sp, #8]
 801715c:	e79f      	b.n	801709e <__multiply+0x5e>
	...

08017160 <__pow5mult>:
 8017160:	2303      	movs	r3, #3
 8017162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017164:	4013      	ands	r3, r2
 8017166:	0006      	movs	r6, r0
 8017168:	000f      	movs	r7, r1
 801716a:	0015      	movs	r5, r2
 801716c:	2b00      	cmp	r3, #0
 801716e:	d008      	beq.n	8017182 <__pow5mult+0x22>
 8017170:	491a      	ldr	r1, [pc, #104]	; (80171dc <__pow5mult+0x7c>)
 8017172:	3b01      	subs	r3, #1
 8017174:	009a      	lsls	r2, r3, #2
 8017176:	5852      	ldr	r2, [r2, r1]
 8017178:	2300      	movs	r3, #0
 801717a:	0039      	movs	r1, r7
 801717c:	f7ff fe92 	bl	8016ea4 <__multadd>
 8017180:	0007      	movs	r7, r0
 8017182:	10ad      	asrs	r5, r5, #2
 8017184:	d027      	beq.n	80171d6 <__pow5mult+0x76>
 8017186:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017188:	2c00      	cmp	r4, #0
 801718a:	d107      	bne.n	801719c <__pow5mult+0x3c>
 801718c:	4914      	ldr	r1, [pc, #80]	; (80171e0 <__pow5mult+0x80>)
 801718e:	0030      	movs	r0, r6
 8017190:	f7ff ff4d 	bl	801702e <__i2b>
 8017194:	2300      	movs	r3, #0
 8017196:	0004      	movs	r4, r0
 8017198:	64b0      	str	r0, [r6, #72]	; 0x48
 801719a:	6003      	str	r3, [r0, #0]
 801719c:	2301      	movs	r3, #1
 801719e:	421d      	tst	r5, r3
 80171a0:	d00a      	beq.n	80171b8 <__pow5mult+0x58>
 80171a2:	0039      	movs	r1, r7
 80171a4:	0022      	movs	r2, r4
 80171a6:	0030      	movs	r0, r6
 80171a8:	f7ff ff4a 	bl	8017040 <__multiply>
 80171ac:	0039      	movs	r1, r7
 80171ae:	9001      	str	r0, [sp, #4]
 80171b0:	0030      	movs	r0, r6
 80171b2:	f7ff fe6d 	bl	8016e90 <_Bfree>
 80171b6:	9f01      	ldr	r7, [sp, #4]
 80171b8:	106d      	asrs	r5, r5, #1
 80171ba:	d00c      	beq.n	80171d6 <__pow5mult+0x76>
 80171bc:	6820      	ldr	r0, [r4, #0]
 80171be:	2800      	cmp	r0, #0
 80171c0:	d107      	bne.n	80171d2 <__pow5mult+0x72>
 80171c2:	0022      	movs	r2, r4
 80171c4:	0021      	movs	r1, r4
 80171c6:	0030      	movs	r0, r6
 80171c8:	f7ff ff3a 	bl	8017040 <__multiply>
 80171cc:	2300      	movs	r3, #0
 80171ce:	6020      	str	r0, [r4, #0]
 80171d0:	6003      	str	r3, [r0, #0]
 80171d2:	0004      	movs	r4, r0
 80171d4:	e7e2      	b.n	801719c <__pow5mult+0x3c>
 80171d6:	0038      	movs	r0, r7
 80171d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80171da:	46c0      	nop			; (mov r8, r8)
 80171dc:	0801ada0 	.word	0x0801ada0
 80171e0:	00000271 	.word	0x00000271

080171e4 <__lshift>:
 80171e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171e6:	000d      	movs	r5, r1
 80171e8:	0017      	movs	r7, r2
 80171ea:	692b      	ldr	r3, [r5, #16]
 80171ec:	1154      	asrs	r4, r2, #5
 80171ee:	b085      	sub	sp, #20
 80171f0:	18e3      	adds	r3, r4, r3
 80171f2:	9301      	str	r3, [sp, #4]
 80171f4:	3301      	adds	r3, #1
 80171f6:	9300      	str	r3, [sp, #0]
 80171f8:	6849      	ldr	r1, [r1, #4]
 80171fa:	68ab      	ldr	r3, [r5, #8]
 80171fc:	9002      	str	r0, [sp, #8]
 80171fe:	9a00      	ldr	r2, [sp, #0]
 8017200:	4293      	cmp	r3, r2
 8017202:	db35      	blt.n	8017270 <__lshift+0x8c>
 8017204:	9802      	ldr	r0, [sp, #8]
 8017206:	f7ff fe1b 	bl	8016e40 <_Balloc>
 801720a:	2300      	movs	r3, #0
 801720c:	0002      	movs	r2, r0
 801720e:	0006      	movs	r6, r0
 8017210:	0019      	movs	r1, r3
 8017212:	3214      	adds	r2, #20
 8017214:	42a3      	cmp	r3, r4
 8017216:	db2e      	blt.n	8017276 <__lshift+0x92>
 8017218:	43e3      	mvns	r3, r4
 801721a:	17db      	asrs	r3, r3, #31
 801721c:	401c      	ands	r4, r3
 801721e:	002b      	movs	r3, r5
 8017220:	00a4      	lsls	r4, r4, #2
 8017222:	1914      	adds	r4, r2, r4
 8017224:	692a      	ldr	r2, [r5, #16]
 8017226:	3314      	adds	r3, #20
 8017228:	0092      	lsls	r2, r2, #2
 801722a:	189a      	adds	r2, r3, r2
 801722c:	4694      	mov	ip, r2
 801722e:	221f      	movs	r2, #31
 8017230:	4017      	ands	r7, r2
 8017232:	d024      	beq.n	801727e <__lshift+0x9a>
 8017234:	3201      	adds	r2, #1
 8017236:	1bd2      	subs	r2, r2, r7
 8017238:	9203      	str	r2, [sp, #12]
 801723a:	2200      	movs	r2, #0
 801723c:	6819      	ldr	r1, [r3, #0]
 801723e:	0020      	movs	r0, r4
 8017240:	40b9      	lsls	r1, r7
 8017242:	430a      	orrs	r2, r1
 8017244:	c404      	stmia	r4!, {r2}
 8017246:	cb04      	ldmia	r3!, {r2}
 8017248:	9903      	ldr	r1, [sp, #12]
 801724a:	40ca      	lsrs	r2, r1
 801724c:	459c      	cmp	ip, r3
 801724e:	d8f5      	bhi.n	801723c <__lshift+0x58>
 8017250:	6042      	str	r2, [r0, #4]
 8017252:	2a00      	cmp	r2, #0
 8017254:	d002      	beq.n	801725c <__lshift+0x78>
 8017256:	9b01      	ldr	r3, [sp, #4]
 8017258:	3302      	adds	r3, #2
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	9b00      	ldr	r3, [sp, #0]
 801725e:	9802      	ldr	r0, [sp, #8]
 8017260:	3b01      	subs	r3, #1
 8017262:	6133      	str	r3, [r6, #16]
 8017264:	0029      	movs	r1, r5
 8017266:	f7ff fe13 	bl	8016e90 <_Bfree>
 801726a:	0030      	movs	r0, r6
 801726c:	b005      	add	sp, #20
 801726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017270:	3101      	adds	r1, #1
 8017272:	005b      	lsls	r3, r3, #1
 8017274:	e7c3      	b.n	80171fe <__lshift+0x1a>
 8017276:	0098      	lsls	r0, r3, #2
 8017278:	5011      	str	r1, [r2, r0]
 801727a:	3301      	adds	r3, #1
 801727c:	e7ca      	b.n	8017214 <__lshift+0x30>
 801727e:	cb04      	ldmia	r3!, {r2}
 8017280:	c404      	stmia	r4!, {r2}
 8017282:	459c      	cmp	ip, r3
 8017284:	d8fb      	bhi.n	801727e <__lshift+0x9a>
 8017286:	e7e9      	b.n	801725c <__lshift+0x78>

08017288 <__mcmp>:
 8017288:	690a      	ldr	r2, [r1, #16]
 801728a:	6903      	ldr	r3, [r0, #16]
 801728c:	b530      	push	{r4, r5, lr}
 801728e:	1a9b      	subs	r3, r3, r2
 8017290:	d10d      	bne.n	80172ae <__mcmp+0x26>
 8017292:	0092      	lsls	r2, r2, #2
 8017294:	3014      	adds	r0, #20
 8017296:	3114      	adds	r1, #20
 8017298:	1884      	adds	r4, r0, r2
 801729a:	1889      	adds	r1, r1, r2
 801729c:	3c04      	subs	r4, #4
 801729e:	3904      	subs	r1, #4
 80172a0:	6825      	ldr	r5, [r4, #0]
 80172a2:	680a      	ldr	r2, [r1, #0]
 80172a4:	4295      	cmp	r5, r2
 80172a6:	d004      	beq.n	80172b2 <__mcmp+0x2a>
 80172a8:	2301      	movs	r3, #1
 80172aa:	4295      	cmp	r5, r2
 80172ac:	d304      	bcc.n	80172b8 <__mcmp+0x30>
 80172ae:	0018      	movs	r0, r3
 80172b0:	bd30      	pop	{r4, r5, pc}
 80172b2:	42a0      	cmp	r0, r4
 80172b4:	d3f2      	bcc.n	801729c <__mcmp+0x14>
 80172b6:	e7fa      	b.n	80172ae <__mcmp+0x26>
 80172b8:	425b      	negs	r3, r3
 80172ba:	e7f8      	b.n	80172ae <__mcmp+0x26>

080172bc <__mdiff>:
 80172bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172be:	000d      	movs	r5, r1
 80172c0:	b085      	sub	sp, #20
 80172c2:	0007      	movs	r7, r0
 80172c4:	0011      	movs	r1, r2
 80172c6:	0028      	movs	r0, r5
 80172c8:	0014      	movs	r4, r2
 80172ca:	f7ff ffdd 	bl	8017288 <__mcmp>
 80172ce:	1e06      	subs	r6, r0, #0
 80172d0:	d108      	bne.n	80172e4 <__mdiff+0x28>
 80172d2:	0001      	movs	r1, r0
 80172d4:	0038      	movs	r0, r7
 80172d6:	f7ff fdb3 	bl	8016e40 <_Balloc>
 80172da:	2301      	movs	r3, #1
 80172dc:	6146      	str	r6, [r0, #20]
 80172de:	6103      	str	r3, [r0, #16]
 80172e0:	b005      	add	sp, #20
 80172e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172e4:	2301      	movs	r3, #1
 80172e6:	9301      	str	r3, [sp, #4]
 80172e8:	2800      	cmp	r0, #0
 80172ea:	db04      	blt.n	80172f6 <__mdiff+0x3a>
 80172ec:	0023      	movs	r3, r4
 80172ee:	002c      	movs	r4, r5
 80172f0:	001d      	movs	r5, r3
 80172f2:	2300      	movs	r3, #0
 80172f4:	9301      	str	r3, [sp, #4]
 80172f6:	6861      	ldr	r1, [r4, #4]
 80172f8:	0038      	movs	r0, r7
 80172fa:	f7ff fda1 	bl	8016e40 <_Balloc>
 80172fe:	002f      	movs	r7, r5
 8017300:	2200      	movs	r2, #0
 8017302:	9b01      	ldr	r3, [sp, #4]
 8017304:	6926      	ldr	r6, [r4, #16]
 8017306:	60c3      	str	r3, [r0, #12]
 8017308:	3414      	adds	r4, #20
 801730a:	00b3      	lsls	r3, r6, #2
 801730c:	18e3      	adds	r3, r4, r3
 801730e:	9302      	str	r3, [sp, #8]
 8017310:	692b      	ldr	r3, [r5, #16]
 8017312:	3714      	adds	r7, #20
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	18fb      	adds	r3, r7, r3
 8017318:	9303      	str	r3, [sp, #12]
 801731a:	0003      	movs	r3, r0
 801731c:	4694      	mov	ip, r2
 801731e:	3314      	adds	r3, #20
 8017320:	cc20      	ldmia	r4!, {r5}
 8017322:	cf04      	ldmia	r7!, {r2}
 8017324:	9201      	str	r2, [sp, #4]
 8017326:	b2aa      	uxth	r2, r5
 8017328:	4494      	add	ip, r2
 801732a:	466a      	mov	r2, sp
 801732c:	4661      	mov	r1, ip
 801732e:	8892      	ldrh	r2, [r2, #4]
 8017330:	0c2d      	lsrs	r5, r5, #16
 8017332:	1a8a      	subs	r2, r1, r2
 8017334:	9901      	ldr	r1, [sp, #4]
 8017336:	0c09      	lsrs	r1, r1, #16
 8017338:	1a69      	subs	r1, r5, r1
 801733a:	1415      	asrs	r5, r2, #16
 801733c:	1949      	adds	r1, r1, r5
 801733e:	140d      	asrs	r5, r1, #16
 8017340:	b292      	uxth	r2, r2
 8017342:	0409      	lsls	r1, r1, #16
 8017344:	430a      	orrs	r2, r1
 8017346:	601a      	str	r2, [r3, #0]
 8017348:	9a03      	ldr	r2, [sp, #12]
 801734a:	46ac      	mov	ip, r5
 801734c:	3304      	adds	r3, #4
 801734e:	42ba      	cmp	r2, r7
 8017350:	d8e6      	bhi.n	8017320 <__mdiff+0x64>
 8017352:	9902      	ldr	r1, [sp, #8]
 8017354:	001a      	movs	r2, r3
 8017356:	428c      	cmp	r4, r1
 8017358:	d305      	bcc.n	8017366 <__mdiff+0xaa>
 801735a:	3a04      	subs	r2, #4
 801735c:	6813      	ldr	r3, [r2, #0]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d00e      	beq.n	8017380 <__mdiff+0xc4>
 8017362:	6106      	str	r6, [r0, #16]
 8017364:	e7bc      	b.n	80172e0 <__mdiff+0x24>
 8017366:	cc04      	ldmia	r4!, {r2}
 8017368:	b291      	uxth	r1, r2
 801736a:	4461      	add	r1, ip
 801736c:	140d      	asrs	r5, r1, #16
 801736e:	0c12      	lsrs	r2, r2, #16
 8017370:	1952      	adds	r2, r2, r5
 8017372:	1415      	asrs	r5, r2, #16
 8017374:	b289      	uxth	r1, r1
 8017376:	0412      	lsls	r2, r2, #16
 8017378:	430a      	orrs	r2, r1
 801737a:	46ac      	mov	ip, r5
 801737c:	c304      	stmia	r3!, {r2}
 801737e:	e7e8      	b.n	8017352 <__mdiff+0x96>
 8017380:	3e01      	subs	r6, #1
 8017382:	e7ea      	b.n	801735a <__mdiff+0x9e>

08017384 <__ulp>:
 8017384:	000b      	movs	r3, r1
 8017386:	4910      	ldr	r1, [pc, #64]	; (80173c8 <__ulp+0x44>)
 8017388:	b510      	push	{r4, lr}
 801738a:	4019      	ands	r1, r3
 801738c:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <__ulp+0x48>)
 801738e:	18c9      	adds	r1, r1, r3
 8017390:	2900      	cmp	r1, #0
 8017392:	dd04      	ble.n	801739e <__ulp+0x1a>
 8017394:	2200      	movs	r2, #0
 8017396:	000b      	movs	r3, r1
 8017398:	0010      	movs	r0, r2
 801739a:	0019      	movs	r1, r3
 801739c:	bd10      	pop	{r4, pc}
 801739e:	4249      	negs	r1, r1
 80173a0:	1509      	asrs	r1, r1, #20
 80173a2:	2200      	movs	r2, #0
 80173a4:	2300      	movs	r3, #0
 80173a6:	2913      	cmp	r1, #19
 80173a8:	dc04      	bgt.n	80173b4 <__ulp+0x30>
 80173aa:	2080      	movs	r0, #128	; 0x80
 80173ac:	0300      	lsls	r0, r0, #12
 80173ae:	4108      	asrs	r0, r1
 80173b0:	0003      	movs	r3, r0
 80173b2:	e7f1      	b.n	8017398 <__ulp+0x14>
 80173b4:	3914      	subs	r1, #20
 80173b6:	2001      	movs	r0, #1
 80173b8:	291e      	cmp	r1, #30
 80173ba:	dc02      	bgt.n	80173c2 <__ulp+0x3e>
 80173bc:	241f      	movs	r4, #31
 80173be:	1a61      	subs	r1, r4, r1
 80173c0:	4088      	lsls	r0, r1
 80173c2:	0002      	movs	r2, r0
 80173c4:	e7e8      	b.n	8017398 <__ulp+0x14>
 80173c6:	46c0      	nop			; (mov r8, r8)
 80173c8:	7ff00000 	.word	0x7ff00000
 80173cc:	fcc00000 	.word	0xfcc00000

080173d0 <__b2d>:
 80173d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173d2:	0006      	movs	r6, r0
 80173d4:	6903      	ldr	r3, [r0, #16]
 80173d6:	3614      	adds	r6, #20
 80173d8:	009b      	lsls	r3, r3, #2
 80173da:	18f3      	adds	r3, r6, r3
 80173dc:	1f1d      	subs	r5, r3, #4
 80173de:	682c      	ldr	r4, [r5, #0]
 80173e0:	000f      	movs	r7, r1
 80173e2:	0020      	movs	r0, r4
 80173e4:	9301      	str	r3, [sp, #4]
 80173e6:	f7ff fdd9 	bl	8016f9c <__hi0bits>
 80173ea:	2320      	movs	r3, #32
 80173ec:	1a1b      	subs	r3, r3, r0
 80173ee:	603b      	str	r3, [r7, #0]
 80173f0:	491c      	ldr	r1, [pc, #112]	; (8017464 <__b2d+0x94>)
 80173f2:	280a      	cmp	r0, #10
 80173f4:	dc16      	bgt.n	8017424 <__b2d+0x54>
 80173f6:	230b      	movs	r3, #11
 80173f8:	0027      	movs	r7, r4
 80173fa:	1a1b      	subs	r3, r3, r0
 80173fc:	40df      	lsrs	r7, r3
 80173fe:	4339      	orrs	r1, r7
 8017400:	469c      	mov	ip, r3
 8017402:	000b      	movs	r3, r1
 8017404:	2100      	movs	r1, #0
 8017406:	42ae      	cmp	r6, r5
 8017408:	d202      	bcs.n	8017410 <__b2d+0x40>
 801740a:	9901      	ldr	r1, [sp, #4]
 801740c:	3908      	subs	r1, #8
 801740e:	6809      	ldr	r1, [r1, #0]
 8017410:	3015      	adds	r0, #21
 8017412:	4084      	lsls	r4, r0
 8017414:	4660      	mov	r0, ip
 8017416:	40c1      	lsrs	r1, r0
 8017418:	430c      	orrs	r4, r1
 801741a:	0022      	movs	r2, r4
 801741c:	0010      	movs	r0, r2
 801741e:	0019      	movs	r1, r3
 8017420:	b003      	add	sp, #12
 8017422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017424:	2700      	movs	r7, #0
 8017426:	42ae      	cmp	r6, r5
 8017428:	d202      	bcs.n	8017430 <__b2d+0x60>
 801742a:	9d01      	ldr	r5, [sp, #4]
 801742c:	3d08      	subs	r5, #8
 801742e:	682f      	ldr	r7, [r5, #0]
 8017430:	380b      	subs	r0, #11
 8017432:	4684      	mov	ip, r0
 8017434:	1e03      	subs	r3, r0, #0
 8017436:	d012      	beq.n	801745e <__b2d+0x8e>
 8017438:	409c      	lsls	r4, r3
 801743a:	2020      	movs	r0, #32
 801743c:	4321      	orrs	r1, r4
 801743e:	003c      	movs	r4, r7
 8017440:	1ac0      	subs	r0, r0, r3
 8017442:	40c4      	lsrs	r4, r0
 8017444:	4321      	orrs	r1, r4
 8017446:	000b      	movs	r3, r1
 8017448:	2100      	movs	r1, #0
 801744a:	42b5      	cmp	r5, r6
 801744c:	d901      	bls.n	8017452 <__b2d+0x82>
 801744e:	3d04      	subs	r5, #4
 8017450:	6829      	ldr	r1, [r5, #0]
 8017452:	4664      	mov	r4, ip
 8017454:	40c1      	lsrs	r1, r0
 8017456:	40a7      	lsls	r7, r4
 8017458:	430f      	orrs	r7, r1
 801745a:	003a      	movs	r2, r7
 801745c:	e7de      	b.n	801741c <__b2d+0x4c>
 801745e:	4321      	orrs	r1, r4
 8017460:	000b      	movs	r3, r1
 8017462:	e7fa      	b.n	801745a <__b2d+0x8a>
 8017464:	3ff00000 	.word	0x3ff00000

08017468 <__d2b>:
 8017468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801746a:	001d      	movs	r5, r3
 801746c:	2101      	movs	r1, #1
 801746e:	0014      	movs	r4, r2
 8017470:	9f08      	ldr	r7, [sp, #32]
 8017472:	f7ff fce5 	bl	8016e40 <_Balloc>
 8017476:	032b      	lsls	r3, r5, #12
 8017478:	006d      	lsls	r5, r5, #1
 801747a:	0006      	movs	r6, r0
 801747c:	0b1b      	lsrs	r3, r3, #12
 801747e:	0d6d      	lsrs	r5, r5, #21
 8017480:	d124      	bne.n	80174cc <__d2b+0x64>
 8017482:	9301      	str	r3, [sp, #4]
 8017484:	2c00      	cmp	r4, #0
 8017486:	d027      	beq.n	80174d8 <__d2b+0x70>
 8017488:	4668      	mov	r0, sp
 801748a:	9400      	str	r4, [sp, #0]
 801748c:	f7ff fda0 	bl	8016fd0 <__lo0bits>
 8017490:	9c00      	ldr	r4, [sp, #0]
 8017492:	2800      	cmp	r0, #0
 8017494:	d01e      	beq.n	80174d4 <__d2b+0x6c>
 8017496:	9b01      	ldr	r3, [sp, #4]
 8017498:	2120      	movs	r1, #32
 801749a:	001a      	movs	r2, r3
 801749c:	1a09      	subs	r1, r1, r0
 801749e:	408a      	lsls	r2, r1
 80174a0:	40c3      	lsrs	r3, r0
 80174a2:	4322      	orrs	r2, r4
 80174a4:	6172      	str	r2, [r6, #20]
 80174a6:	9301      	str	r3, [sp, #4]
 80174a8:	9c01      	ldr	r4, [sp, #4]
 80174aa:	61b4      	str	r4, [r6, #24]
 80174ac:	1e63      	subs	r3, r4, #1
 80174ae:	419c      	sbcs	r4, r3
 80174b0:	3401      	adds	r4, #1
 80174b2:	6134      	str	r4, [r6, #16]
 80174b4:	2d00      	cmp	r5, #0
 80174b6:	d018      	beq.n	80174ea <__d2b+0x82>
 80174b8:	4b12      	ldr	r3, [pc, #72]	; (8017504 <__d2b+0x9c>)
 80174ba:	18ed      	adds	r5, r5, r3
 80174bc:	2335      	movs	r3, #53	; 0x35
 80174be:	182d      	adds	r5, r5, r0
 80174c0:	603d      	str	r5, [r7, #0]
 80174c2:	1a18      	subs	r0, r3, r0
 80174c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c6:	6018      	str	r0, [r3, #0]
 80174c8:	0030      	movs	r0, r6
 80174ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80174cc:	2280      	movs	r2, #128	; 0x80
 80174ce:	0352      	lsls	r2, r2, #13
 80174d0:	4313      	orrs	r3, r2
 80174d2:	e7d6      	b.n	8017482 <__d2b+0x1a>
 80174d4:	6174      	str	r4, [r6, #20]
 80174d6:	e7e7      	b.n	80174a8 <__d2b+0x40>
 80174d8:	a801      	add	r0, sp, #4
 80174da:	f7ff fd79 	bl	8016fd0 <__lo0bits>
 80174de:	2401      	movs	r4, #1
 80174e0:	9b01      	ldr	r3, [sp, #4]
 80174e2:	6134      	str	r4, [r6, #16]
 80174e4:	6173      	str	r3, [r6, #20]
 80174e6:	3020      	adds	r0, #32
 80174e8:	e7e4      	b.n	80174b4 <__d2b+0x4c>
 80174ea:	4b07      	ldr	r3, [pc, #28]	; (8017508 <__d2b+0xa0>)
 80174ec:	18c0      	adds	r0, r0, r3
 80174ee:	4b07      	ldr	r3, [pc, #28]	; (801750c <__d2b+0xa4>)
 80174f0:	6038      	str	r0, [r7, #0]
 80174f2:	18e3      	adds	r3, r4, r3
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	18f3      	adds	r3, r6, r3
 80174f8:	6958      	ldr	r0, [r3, #20]
 80174fa:	f7ff fd4f 	bl	8016f9c <__hi0bits>
 80174fe:	0164      	lsls	r4, r4, #5
 8017500:	1a20      	subs	r0, r4, r0
 8017502:	e7df      	b.n	80174c4 <__d2b+0x5c>
 8017504:	fffffbcd 	.word	0xfffffbcd
 8017508:	fffffbce 	.word	0xfffffbce
 801750c:	3fffffff 	.word	0x3fffffff

08017510 <__ratio>:
 8017510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017512:	b085      	sub	sp, #20
 8017514:	000f      	movs	r7, r1
 8017516:	a902      	add	r1, sp, #8
 8017518:	0006      	movs	r6, r0
 801751a:	f7ff ff59 	bl	80173d0 <__b2d>
 801751e:	0004      	movs	r4, r0
 8017520:	000d      	movs	r5, r1
 8017522:	0038      	movs	r0, r7
 8017524:	a903      	add	r1, sp, #12
 8017526:	9400      	str	r4, [sp, #0]
 8017528:	9501      	str	r5, [sp, #4]
 801752a:	f7ff ff51 	bl	80173d0 <__b2d>
 801752e:	6936      	ldr	r6, [r6, #16]
 8017530:	693f      	ldr	r7, [r7, #16]
 8017532:	0002      	movs	r2, r0
 8017534:	1bf7      	subs	r7, r6, r7
 8017536:	017e      	lsls	r6, r7, #5
 8017538:	46b4      	mov	ip, r6
 801753a:	9f03      	ldr	r7, [sp, #12]
 801753c:	9e02      	ldr	r6, [sp, #8]
 801753e:	000b      	movs	r3, r1
 8017540:	1bf6      	subs	r6, r6, r7
 8017542:	4466      	add	r6, ip
 8017544:	0537      	lsls	r7, r6, #20
 8017546:	2e00      	cmp	r6, #0
 8017548:	dd07      	ble.n	801755a <__ratio+0x4a>
 801754a:	1979      	adds	r1, r7, r5
 801754c:	9101      	str	r1, [sp, #4]
 801754e:	9800      	ldr	r0, [sp, #0]
 8017550:	9901      	ldr	r1, [sp, #4]
 8017552:	f7ea f977 	bl	8001844 <__aeabi_ddiv>
 8017556:	b005      	add	sp, #20
 8017558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755a:	1bcb      	subs	r3, r1, r7
 801755c:	e7f7      	b.n	801754e <__ratio+0x3e>

0801755e <__copybits>:
 801755e:	0013      	movs	r3, r2
 8017560:	3901      	subs	r1, #1
 8017562:	b510      	push	{r4, lr}
 8017564:	1149      	asrs	r1, r1, #5
 8017566:	6912      	ldr	r2, [r2, #16]
 8017568:	3101      	adds	r1, #1
 801756a:	0089      	lsls	r1, r1, #2
 801756c:	3314      	adds	r3, #20
 801756e:	0092      	lsls	r2, r2, #2
 8017570:	1841      	adds	r1, r0, r1
 8017572:	189a      	adds	r2, r3, r2
 8017574:	429a      	cmp	r2, r3
 8017576:	d803      	bhi.n	8017580 <__copybits+0x22>
 8017578:	2300      	movs	r3, #0
 801757a:	4281      	cmp	r1, r0
 801757c:	d803      	bhi.n	8017586 <__copybits+0x28>
 801757e:	bd10      	pop	{r4, pc}
 8017580:	cb10      	ldmia	r3!, {r4}
 8017582:	c010      	stmia	r0!, {r4}
 8017584:	e7f6      	b.n	8017574 <__copybits+0x16>
 8017586:	c008      	stmia	r0!, {r3}
 8017588:	e7f7      	b.n	801757a <__copybits+0x1c>

0801758a <__any_on>:
 801758a:	0002      	movs	r2, r0
 801758c:	6900      	ldr	r0, [r0, #16]
 801758e:	b510      	push	{r4, lr}
 8017590:	3214      	adds	r2, #20
 8017592:	114b      	asrs	r3, r1, #5
 8017594:	4298      	cmp	r0, r3
 8017596:	db12      	blt.n	80175be <__any_on+0x34>
 8017598:	dd0b      	ble.n	80175b2 <__any_on+0x28>
 801759a:	201f      	movs	r0, #31
 801759c:	4001      	ands	r1, r0
 801759e:	d008      	beq.n	80175b2 <__any_on+0x28>
 80175a0:	0098      	lsls	r0, r3, #2
 80175a2:	5884      	ldr	r4, [r0, r2]
 80175a4:	0020      	movs	r0, r4
 80175a6:	40c8      	lsrs	r0, r1
 80175a8:	4088      	lsls	r0, r1
 80175aa:	0001      	movs	r1, r0
 80175ac:	2001      	movs	r0, #1
 80175ae:	428c      	cmp	r4, r1
 80175b0:	d104      	bne.n	80175bc <__any_on+0x32>
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	18d3      	adds	r3, r2, r3
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d803      	bhi.n	80175c2 <__any_on+0x38>
 80175ba:	2000      	movs	r0, #0
 80175bc:	bd10      	pop	{r4, pc}
 80175be:	0003      	movs	r3, r0
 80175c0:	e7f7      	b.n	80175b2 <__any_on+0x28>
 80175c2:	3b04      	subs	r3, #4
 80175c4:	6819      	ldr	r1, [r3, #0]
 80175c6:	2900      	cmp	r1, #0
 80175c8:	d0f5      	beq.n	80175b6 <__any_on+0x2c>
 80175ca:	2001      	movs	r0, #1
 80175cc:	e7f6      	b.n	80175bc <__any_on+0x32>
	...

080175d0 <frexp>:
 80175d0:	b570      	push	{r4, r5, r6, lr}
 80175d2:	0014      	movs	r4, r2
 80175d4:	2500      	movs	r5, #0
 80175d6:	6025      	str	r5, [r4, #0]
 80175d8:	4d10      	ldr	r5, [pc, #64]	; (801761c <frexp+0x4c>)
 80175da:	004b      	lsls	r3, r1, #1
 80175dc:	000a      	movs	r2, r1
 80175de:	085b      	lsrs	r3, r3, #1
 80175e0:	42ab      	cmp	r3, r5
 80175e2:	dc1a      	bgt.n	801761a <frexp+0x4a>
 80175e4:	001d      	movs	r5, r3
 80175e6:	4305      	orrs	r5, r0
 80175e8:	d017      	beq.n	801761a <frexp+0x4a>
 80175ea:	4d0d      	ldr	r5, [pc, #52]	; (8017620 <frexp+0x50>)
 80175ec:	42ab      	cmp	r3, r5
 80175ee:	dc09      	bgt.n	8017604 <frexp+0x34>
 80175f0:	2200      	movs	r2, #0
 80175f2:	4b0c      	ldr	r3, [pc, #48]	; (8017624 <frexp+0x54>)
 80175f4:	f7ea fd30 	bl	8002058 <__aeabi_dmul>
 80175f8:	2536      	movs	r5, #54	; 0x36
 80175fa:	000a      	movs	r2, r1
 80175fc:	004b      	lsls	r3, r1, #1
 80175fe:	426d      	negs	r5, r5
 8017600:	085b      	lsrs	r3, r3, #1
 8017602:	6025      	str	r5, [r4, #0]
 8017604:	4d08      	ldr	r5, [pc, #32]	; (8017628 <frexp+0x58>)
 8017606:	151b      	asrs	r3, r3, #20
 8017608:	195b      	adds	r3, r3, r5
 801760a:	6825      	ldr	r5, [r4, #0]
 801760c:	18eb      	adds	r3, r5, r3
 801760e:	6023      	str	r3, [r4, #0]
 8017610:	4b06      	ldr	r3, [pc, #24]	; (801762c <frexp+0x5c>)
 8017612:	401a      	ands	r2, r3
 8017614:	4b06      	ldr	r3, [pc, #24]	; (8017630 <frexp+0x60>)
 8017616:	4313      	orrs	r3, r2
 8017618:	0019      	movs	r1, r3
 801761a:	bd70      	pop	{r4, r5, r6, pc}
 801761c:	7fefffff 	.word	0x7fefffff
 8017620:	000fffff 	.word	0x000fffff
 8017624:	43500000 	.word	0x43500000
 8017628:	fffffc02 	.word	0xfffffc02
 801762c:	800fffff 	.word	0x800fffff
 8017630:	3fe00000 	.word	0x3fe00000

08017634 <__ssprint_r>:
 8017634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017636:	6893      	ldr	r3, [r2, #8]
 8017638:	b087      	sub	sp, #28
 801763a:	9002      	str	r0, [sp, #8]
 801763c:	000c      	movs	r4, r1
 801763e:	0016      	movs	r6, r2
 8017640:	2b00      	cmp	r3, #0
 8017642:	d063      	beq.n	801770c <__ssprint_r+0xd8>
 8017644:	6813      	ldr	r3, [r2, #0]
 8017646:	9303      	str	r3, [sp, #12]
 8017648:	2300      	movs	r3, #0
 801764a:	001f      	movs	r7, r3
 801764c:	9305      	str	r3, [sp, #20]
 801764e:	2f00      	cmp	r7, #0
 8017650:	d02e      	beq.n	80176b0 <__ssprint_r+0x7c>
 8017652:	68a5      	ldr	r5, [r4, #8]
 8017654:	42af      	cmp	r7, r5
 8017656:	d347      	bcc.n	80176e8 <__ssprint_r+0xb4>
 8017658:	2390      	movs	r3, #144	; 0x90
 801765a:	89a2      	ldrh	r2, [r4, #12]
 801765c:	00db      	lsls	r3, r3, #3
 801765e:	421a      	tst	r2, r3
 8017660:	d042      	beq.n	80176e8 <__ssprint_r+0xb4>
 8017662:	2003      	movs	r0, #3
 8017664:	6921      	ldr	r1, [r4, #16]
 8017666:	6823      	ldr	r3, [r4, #0]
 8017668:	1a5b      	subs	r3, r3, r1
 801766a:	9304      	str	r3, [sp, #16]
 801766c:	6963      	ldr	r3, [r4, #20]
 801766e:	4343      	muls	r3, r0
 8017670:	0fd8      	lsrs	r0, r3, #31
 8017672:	18c3      	adds	r3, r0, r3
 8017674:	105b      	asrs	r3, r3, #1
 8017676:	9301      	str	r3, [sp, #4]
 8017678:	9b04      	ldr	r3, [sp, #16]
 801767a:	9801      	ldr	r0, [sp, #4]
 801767c:	3301      	adds	r3, #1
 801767e:	19db      	adds	r3, r3, r7
 8017680:	4283      	cmp	r3, r0
 8017682:	d900      	bls.n	8017686 <__ssprint_r+0x52>
 8017684:	9301      	str	r3, [sp, #4]
 8017686:	0553      	lsls	r3, r2, #21
 8017688:	d544      	bpl.n	8017714 <__ssprint_r+0xe0>
 801768a:	9901      	ldr	r1, [sp, #4]
 801768c:	9802      	ldr	r0, [sp, #8]
 801768e:	f7fb fab7 	bl	8012c00 <_malloc_r>
 8017692:	1e05      	subs	r5, r0, #0
 8017694:	d114      	bne.n	80176c0 <__ssprint_r+0x8c>
 8017696:	230c      	movs	r3, #12
 8017698:	9a02      	ldr	r2, [sp, #8]
 801769a:	2001      	movs	r0, #1
 801769c:	6013      	str	r3, [r2, #0]
 801769e:	2340      	movs	r3, #64	; 0x40
 80176a0:	89a2      	ldrh	r2, [r4, #12]
 80176a2:	4240      	negs	r0, r0
 80176a4:	4313      	orrs	r3, r2
 80176a6:	81a3      	strh	r3, [r4, #12]
 80176a8:	2300      	movs	r3, #0
 80176aa:	60b3      	str	r3, [r6, #8]
 80176ac:	6073      	str	r3, [r6, #4]
 80176ae:	e02f      	b.n	8017710 <__ssprint_r+0xdc>
 80176b0:	9b03      	ldr	r3, [sp, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	9305      	str	r3, [sp, #20]
 80176b6:	9b03      	ldr	r3, [sp, #12]
 80176b8:	685f      	ldr	r7, [r3, #4]
 80176ba:	3308      	adds	r3, #8
 80176bc:	9303      	str	r3, [sp, #12]
 80176be:	e7c6      	b.n	801764e <__ssprint_r+0x1a>
 80176c0:	9a04      	ldr	r2, [sp, #16]
 80176c2:	6921      	ldr	r1, [r4, #16]
 80176c4:	f7fb fcd5 	bl	8013072 <memcpy>
 80176c8:	89a3      	ldrh	r3, [r4, #12]
 80176ca:	4a18      	ldr	r2, [pc, #96]	; (801772c <__ssprint_r+0xf8>)
 80176cc:	401a      	ands	r2, r3
 80176ce:	2380      	movs	r3, #128	; 0x80
 80176d0:	4313      	orrs	r3, r2
 80176d2:	81a3      	strh	r3, [r4, #12]
 80176d4:	9b04      	ldr	r3, [sp, #16]
 80176d6:	6125      	str	r5, [r4, #16]
 80176d8:	18ed      	adds	r5, r5, r3
 80176da:	6025      	str	r5, [r4, #0]
 80176dc:	003d      	movs	r5, r7
 80176de:	9b01      	ldr	r3, [sp, #4]
 80176e0:	9a04      	ldr	r2, [sp, #16]
 80176e2:	6163      	str	r3, [r4, #20]
 80176e4:	1a9b      	subs	r3, r3, r2
 80176e6:	60a3      	str	r3, [r4, #8]
 80176e8:	42bd      	cmp	r5, r7
 80176ea:	d900      	bls.n	80176ee <__ssprint_r+0xba>
 80176ec:	003d      	movs	r5, r7
 80176ee:	002a      	movs	r2, r5
 80176f0:	9905      	ldr	r1, [sp, #20]
 80176f2:	6820      	ldr	r0, [r4, #0]
 80176f4:	f7ff fb91 	bl	8016e1a <memmove>
 80176f8:	68a3      	ldr	r3, [r4, #8]
 80176fa:	1b5b      	subs	r3, r3, r5
 80176fc:	60a3      	str	r3, [r4, #8]
 80176fe:	6823      	ldr	r3, [r4, #0]
 8017700:	195d      	adds	r5, r3, r5
 8017702:	68b3      	ldr	r3, [r6, #8]
 8017704:	6025      	str	r5, [r4, #0]
 8017706:	1bdb      	subs	r3, r3, r7
 8017708:	60b3      	str	r3, [r6, #8]
 801770a:	d1d1      	bne.n	80176b0 <__ssprint_r+0x7c>
 801770c:	2000      	movs	r0, #0
 801770e:	6070      	str	r0, [r6, #4]
 8017710:	b007      	add	sp, #28
 8017712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017714:	9a01      	ldr	r2, [sp, #4]
 8017716:	9802      	ldr	r0, [sp, #8]
 8017718:	f7fb fcf0 	bl	80130fc <_realloc_r>
 801771c:	1e05      	subs	r5, r0, #0
 801771e:	d1d9      	bne.n	80176d4 <__ssprint_r+0xa0>
 8017720:	6921      	ldr	r1, [r4, #16]
 8017722:	9802      	ldr	r0, [sp, #8]
 8017724:	f7fe ff78 	bl	8016618 <_free_r>
 8017728:	e7b5      	b.n	8017696 <__ssprint_r+0x62>
 801772a:	46c0      	nop			; (mov r8, r8)
 801772c:	fffffb7f 	.word	0xfffffb7f

08017730 <__register_exitproc>:
 8017730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017732:	4d29      	ldr	r5, [pc, #164]	; (80177d8 <__register_exitproc+0xa8>)
 8017734:	0006      	movs	r6, r0
 8017736:	6828      	ldr	r0, [r5, #0]
 8017738:	9301      	str	r3, [sp, #4]
 801773a:	9100      	str	r1, [sp, #0]
 801773c:	0017      	movs	r7, r2
 801773e:	f7ff fb5f 	bl	8016e00 <__retarget_lock_acquire_recursive>
 8017742:	4b26      	ldr	r3, [pc, #152]	; (80177dc <__register_exitproc+0xac>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	001c      	movs	r4, r3
 8017748:	34fc      	adds	r4, #252	; 0xfc
 801774a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801774c:	2800      	cmp	r0, #0
 801774e:	d103      	bne.n	8017758 <__register_exitproc+0x28>
 8017750:	334d      	adds	r3, #77	; 0x4d
 8017752:	33ff      	adds	r3, #255	; 0xff
 8017754:	0018      	movs	r0, r3
 8017756:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017758:	6843      	ldr	r3, [r0, #4]
 801775a:	2b1f      	cmp	r3, #31
 801775c:	dd18      	ble.n	8017790 <__register_exitproc+0x60>
 801775e:	4b20      	ldr	r3, [pc, #128]	; (80177e0 <__register_exitproc+0xb0>)
 8017760:	2b00      	cmp	r3, #0
 8017762:	d105      	bne.n	8017770 <__register_exitproc+0x40>
 8017764:	6828      	ldr	r0, [r5, #0]
 8017766:	f7ff fb4c 	bl	8016e02 <__retarget_lock_release_recursive>
 801776a:	2001      	movs	r0, #1
 801776c:	4240      	negs	r0, r0
 801776e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017770:	20c8      	movs	r0, #200	; 0xc8
 8017772:	0040      	lsls	r0, r0, #1
 8017774:	f7fb fa30 	bl	8012bd8 <malloc>
 8017778:	2800      	cmp	r0, #0
 801777a:	d0f3      	beq.n	8017764 <__register_exitproc+0x34>
 801777c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801777e:	2300      	movs	r3, #0
 8017780:	6002      	str	r2, [r0, #0]
 8017782:	22c4      	movs	r2, #196	; 0xc4
 8017784:	0052      	lsls	r2, r2, #1
 8017786:	6043      	str	r3, [r0, #4]
 8017788:	64e0      	str	r0, [r4, #76]	; 0x4c
 801778a:	5083      	str	r3, [r0, r2]
 801778c:	3204      	adds	r2, #4
 801778e:	5083      	str	r3, [r0, r2]
 8017790:	6843      	ldr	r3, [r0, #4]
 8017792:	2e00      	cmp	r6, #0
 8017794:	d014      	beq.n	80177c0 <__register_exitproc+0x90>
 8017796:	009a      	lsls	r2, r3, #2
 8017798:	1882      	adds	r2, r0, r2
 801779a:	0011      	movs	r1, r2
 801779c:	3188      	adds	r1, #136	; 0x88
 801779e:	600f      	str	r7, [r1, #0]
 80177a0:	2101      	movs	r1, #1
 80177a2:	0004      	movs	r4, r0
 80177a4:	4099      	lsls	r1, r3
 80177a6:	3485      	adds	r4, #133	; 0x85
 80177a8:	34ff      	adds	r4, #255	; 0xff
 80177aa:	6865      	ldr	r5, [r4, #4]
 80177ac:	32fc      	adds	r2, #252	; 0xfc
 80177ae:	430d      	orrs	r5, r1
 80177b0:	6065      	str	r5, [r4, #4]
 80177b2:	9d01      	ldr	r5, [sp, #4]
 80177b4:	60d5      	str	r5, [r2, #12]
 80177b6:	2e02      	cmp	r6, #2
 80177b8:	d102      	bne.n	80177c0 <__register_exitproc+0x90>
 80177ba:	68a2      	ldr	r2, [r4, #8]
 80177bc:	4311      	orrs	r1, r2
 80177be:	60a1      	str	r1, [r4, #8]
 80177c0:	1c5a      	adds	r2, r3, #1
 80177c2:	6042      	str	r2, [r0, #4]
 80177c4:	3302      	adds	r3, #2
 80177c6:	9a00      	ldr	r2, [sp, #0]
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	501a      	str	r2, [r3, r0]
 80177cc:	4b02      	ldr	r3, [pc, #8]	; (80177d8 <__register_exitproc+0xa8>)
 80177ce:	6818      	ldr	r0, [r3, #0]
 80177d0:	f7ff fb17 	bl	8016e02 <__retarget_lock_release_recursive>
 80177d4:	2000      	movs	r0, #0
 80177d6:	e7ca      	b.n	801776e <__register_exitproc+0x3e>
 80177d8:	20000a7c 	.word	0x20000a7c
 80177dc:	0801aae8 	.word	0x0801aae8
 80177e0:	08012bd9 	.word	0x08012bd9

080177e4 <_sbrk>:
 80177e4:	4b05      	ldr	r3, [pc, #20]	; (80177fc <_sbrk+0x18>)
 80177e6:	0002      	movs	r2, r0
 80177e8:	6819      	ldr	r1, [r3, #0]
 80177ea:	2900      	cmp	r1, #0
 80177ec:	d101      	bne.n	80177f2 <_sbrk+0xe>
 80177ee:	4904      	ldr	r1, [pc, #16]	; (8017800 <_sbrk+0x1c>)
 80177f0:	6019      	str	r1, [r3, #0]
 80177f2:	6818      	ldr	r0, [r3, #0]
 80177f4:	1882      	adds	r2, r0, r2
 80177f6:	601a      	str	r2, [r3, #0]
 80177f8:	4770      	bx	lr
 80177fa:	46c0      	nop			; (mov r8, r8)
 80177fc:	200067d8 	.word	0x200067d8
 8017800:	20006da8 	.word	0x20006da8

08017804 <_init>:
 8017804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017806:	46c0      	nop			; (mov r8, r8)
 8017808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801780a:	bc08      	pop	{r3}
 801780c:	469e      	mov	lr, r3
 801780e:	4770      	bx	lr

08017810 <_fini>:
 8017810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017812:	46c0      	nop			; (mov r8, r8)
 8017814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017816:	bc08      	pop	{r3}
 8017818:	469e      	mov	lr, r3
 801781a:	4770      	bx	lr
